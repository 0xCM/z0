//-----------------------------------------------------------------------------
// Copyright   :  (c) Chris Moore, 2019
// License     :  MIT
//-----------------------------------------------------------------------------
namespace Z0
{
    using System;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    using static zfunc;
    using static As;     
    using static AsIn;     

    public static class BitStore
    {
        /// <summary>
        /// Constructs a sequence of 8 characters {ci} := [c7,...c0] over the domain {'0','1'} according to whether the
        /// bit in the i'th position of the source is respecively disabled/enabled
        /// </summary>
        /// <param name="value">The source value</param>
        [MethodImpl(Inline)]
        public static unsafe ReadOnlySpan<char> bitchars(byte value)
        {
            var selection = new ReadOnlySpan<byte>((byte*)bitcharP(value), 16);
            return MemoryMarshal.Cast<byte,char>(selection);
        }

        /// <summary>
        /// Selects an identified bit sequence
        /// </summary>
        /// <param name="index">A value from 0 - 255 indicating the byte of interest</param>
        [MethodImpl(Inline)]
        public static unsafe ReadOnlySpan<byte> select(byte value)            
            => new ReadOnlySpan<byte>(bitseqP(value), 8);
         
        /// <summary>
        /// Selects unpacked bits from a block of 8*256 bytes, where each byte represents 1 bit
        /// </summary>
        /// <param name="offset">The bit offset index</param>
        /// <param name="length">The number of bits to select</param>
        [MethodImpl(Inline)]
        public static ReadOnlySpan<byte> select(int offset, int length)
            => BitSeqData.Slice(offset,length);

        /// <summary>
        /// Constructs a span of bytes where each byte, ordered from lo to hi, 
        /// represents a single bit in the source value
        /// </summary>
        /// <param name="src">The source value</param>
        /// <typeparam name="T">The primal source type</typeparam>
        [MethodImpl(Inline)]
        public static ReadOnlySpan<byte> bitseq<T>(T src)
            where T : unmanaged
        {
            var dst = new byte[bitsize<T>()];
            bitseq(src,dst);
            return dst;                
        }

        [MethodImpl(Inline)]
        public static ReadOnlySpan<byte> bitseq<T>(T src, int count)
            where T : unmanaged
                => bitseq(src).Slice(0, Math.Min(bitsize<T>(), count));

        [MethodImpl(Inline)]
        public static void bitseq<T>(T src, Span<byte> dst, int offset = 0)
            where T : unmanaged
        {
            if(typeof(T) == typeof(byte) 
            || typeof(T) == typeof(ushort) 
            || typeof(T) == typeof(uint) 
            || typeof(T) == typeof(ulong))
                bitseq_u(src,dst,offset);
            else if(typeof(T) == typeof(sbyte) 
            || typeof(T) == typeof(short) 
            || typeof(T) == typeof(int) 
            || typeof(T) == typeof(long))
                bitseq_i(src,dst,offset);
            else 
                bitseq_f(src,dst,offset);
        }        

        [MethodImpl(Inline)]
        public static void bitchars<T>(T src, Span<char> dst, int offset = 0)
            where T : unmanaged
        {
            if(typeof(T) == typeof(byte) 
            || typeof(T) == typeof(ushort) 
            || typeof(T) == typeof(uint) 
            || typeof(T) == typeof(ulong))
                bitchars_u(src,dst,offset);
            else if(typeof(T) == typeof(sbyte) 
            || typeof(T) == typeof(short) 
            || typeof(T) == typeof(int) 
            || typeof(T) == typeof(long))
                bitchars_i(src,dst,offset);
            else 
                bitchars_f(src,dst,offset);
        }        

        [MethodImpl(Inline)]
        static int popd(in byte a)
            => skip(in head(PopCounts), a);

        [MethodImpl(Inline)]
        static int popd(in ushort a)
        {
            var count = 0;
            ref readonly var src = ref AsIn.uint8(in a);
            count += popd(skip(in src, 0));
            count += popd(skip(in src, 1));
            return count;
        }

        [MethodImpl(Inline)]
        static int popd(in uint a)
        {
            var count = 0;
            ref readonly var src = ref AsIn.uint8(in a);
            count += popd(skip(in src, 0));
            count += popd(skip(in src, 1));
            count += popd(skip(in src, 2));
            count += popd(skip(in src, 3));
            return count;
        }

        [MethodImpl(Inline)]
        static int popd(in ulong a)
        {
            var count = 0;
            ref readonly var src = ref AsIn.uint8(in a);
            count += popd(skip(in src, 0));
            count += popd(skip(in src, 1));
            count += popd(skip(in src, 2));
            count += popd(skip(in src, 3));
            count += popd(skip(in src, 4));
            count += popd(skip(in src, 5));
            count += popd(skip(in src, 6));
            count += popd(skip(in src, 7));
            return count;
        }

        const int seglen = 8;

        [MethodImpl(Inline)]
        static unsafe byte* bitseqP(byte value)
            => constptr(in skip(in head(BitSeqData), 8*value));

        [MethodImpl(Inline)]
        static unsafe char* bitcharP(byte value)
        {
            ref readonly var start = ref skip(head(BitChars), 16*value);
            return (char*)constptr(in start);
        }

        [MethodImpl(Inline)]
        static unsafe void bitchars(byte src, Span<char> dst, int offset)
        {
            memcpy(bitcharP((byte)(src >> seglen*0)), dst, offset + seglen*0,  seglen);
        }

        [MethodImpl(Inline)]
        static unsafe void bitchars(ushort src, Span<char> dst, int offset)
        {
            memcpy(bitcharP((byte)(src >> seglen*0)), dst, offset + seglen*0,  seglen);
            memcpy(bitcharP((byte)(src >> seglen*1)), dst, offset + seglen*1,  seglen);
        }

        [MethodImpl(Inline)]
        static unsafe void bitchars(uint src, Span<char> dst, int offset)
        {
            for(var i=0; i<4; i++)
                memcpy(bitcharP((byte)(src >> seglen*i)), dst, offset + seglen*i,  seglen);
        }

        [MethodImpl(Inline)]
        static unsafe void bitchars(ulong src, Span<char> dst, int offset)
        {
            for(var i=0; i<8; i++)
                memcpy(bitcharP((byte)(src >> seglen*i)), dst, offset + seglen*i,  seglen);
        }

        [MethodImpl(Inline)]
        static unsafe void bitchars(sbyte src, Span<char> dst, int offset)
            => bitchars((byte)src, dst, offset);
        
        [MethodImpl(Inline)]
        static unsafe void bitchars(short src, Span<char> dst, int offset)
            => bitchars((ushort)src, dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitchars(int src, Span<char> dst, int offset)
            => bitchars((uint)src, dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitchars(long src, Span<char> dst, int offset)
            => bitchars((ulong)src, dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitchars(float src, Span<char> dst, int offset)
            => bitchars(BitConvert.ToUInt32(src), dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitchars(double src, Span<char> dst, int offset)
            => bitchars(BitConvert.ToUInt64(src), dst, offset);


        [MethodImpl(Inline)]
        static unsafe void bitseq(byte src, Span<byte> dst, int offset)
        {
            memcpy(bitseqP((byte)(src >> seglen*0)), dst, offset + seglen*0, seglen);
        }

        [MethodImpl(Inline)]
        static unsafe void bitseq(ushort src, Span<byte> dst, int offset)
        {
            ref var target = ref head(dst);
            memcpy(bitseqP((byte)(src >> seglen*0)), dst, offset + seglen*0, seglen);
            memcpy(bitseqP((byte)(src >> seglen*1)), dst, offset + seglen*1, seglen);            
        }

        [MethodImpl(Inline)]
        static unsafe void bitseq(uint src, Span<byte> dst, int offset)
        {            
            for(var i=0; i<4; i++)
                memcpy(bitseqP((byte)(src >> seglen*i)), dst, offset + seglen*i, seglen);
        }                 

        [MethodImpl(Inline)]
        static unsafe void bitseq(ulong src, Span<byte> dst, int offset)
        {            
            for(var i=0; i<8; i++)
                memcpy(bitseqP((byte)(src >> seglen*i)), dst, offset + seglen*i, seglen);
        }

        [MethodImpl(Inline)]
        static unsafe void bitseq(short src, Span<byte> dst, int offset)
            => bitseq((ushort)src, dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitseq(sbyte src, Span<byte> dst, int offset)
            => bitseq((byte)src, dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitseq(int src, Span<byte> dst, int offset)
            => bitseq((uint)src,dst,offset);

        [MethodImpl(Inline)]
        static unsafe void bitseq(long src, Span<byte> dst, int offset)
            => bitseq((ulong)src,dst,offset);

        [MethodImpl(Inline)]
        static unsafe void bitseq(float src, Span<byte> dst, int offset)
            => bitseq(BitConvert.ToUInt32(src), dst, offset);

        [MethodImpl(Inline)]
        static unsafe void bitseq(double src, Span<byte> dst, int offset)
            => bitseq(BitConvert.ToUInt64(src), dst, offset);

        [MethodImpl(Inline)]
        static void bitseq_i<T>(T src, Span<byte> dst, int offset)
            where T : unmanaged
        {
            if(typeof(T) == typeof(sbyte))
                bitseq(int8(src),dst,offset);
            else if(typeof(T) == typeof(short))
                bitseq(int16(src),dst,offset);
            else if(typeof(T) == typeof(int))
                bitseq(int32(src),dst,offset);
            else 
                bitseq(int64(src),dst,offset);
        }        

        [MethodImpl(Inline)]
        static void bitseq_u<T>(T src, Span<byte> dst, int offset)
            where T : unmanaged
        {
            if(typeof(T) == typeof(byte))
                bitseq(uint8(src),dst,offset);
            else if(typeof(T) == typeof(ushort))
                bitseq(uint16(src),dst,offset);
            else if(typeof(T) == typeof(uint))
                bitseq(uint32(src),dst,offset);
            else 
                bitseq(uint64(src),dst,offset);
        }        

        [MethodImpl(Inline)]
        static void bitseq_f<T>(T src, Span<byte> dst, int offset)
            where T : unmanaged
        {
            if(typeof(T) == typeof(float))
                bitseq(float32(src),dst,offset);
            else if(typeof(T) == typeof(double))
                bitseq(float64(src),dst,offset);
            else 
                throw unsupported<T>();
        }        

        [MethodImpl(Inline)]
        static void bitchars_i<T>(T src, Span<char> dst, int offset)
            where T : unmanaged
        {
            if(typeof(T) == typeof(sbyte))
                bitchars(int8(src),dst,offset);
            else if(typeof(T) == typeof(short))
                bitchars(int16(src),dst,offset);
            else if(typeof(T) == typeof(int))
                bitchars(int32(src),dst,offset);
            else 
                bitchars(int64(src),dst,offset);
        }        

        [MethodImpl(Inline)]
        static void bitchars_u<T>(T src, Span<char> dst, int offset)
            where T : unmanaged
        {
            if(typeof(T) == typeof(byte))
                bitchars(uint8(src),dst,offset);
            else if(typeof(T) == typeof(ushort))
                bitchars(uint16(src),dst,offset);
            else if(typeof(T) == typeof(uint))
                bitchars(uint32(src),dst,offset);
            else 
                bitchars(uint64(src),dst,offset);
        }        

        [MethodImpl(Inline)]
        static void bitchars_f<T>(T src, Span<char> dst, int offset)
            where T : unmanaged
        {
            if(typeof(T) == typeof(float))
                bitchars(float32(src),dst,offset);
            else if(typeof(T) == typeof(double))
                bitchars(float64(src),dst,offset);
            else 
                throw unsupported<T>();
        }        
         
        static ReadOnlySpan<byte> PopCounts => new byte[]
        {
            0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
            0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
            0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
            
        };

        static ReadOnlySpan<byte> BitSeqData 
            => new byte[]
            {

                0,0,0,0,0,0,0,0,
                1,0,0,0,0,0,0,0,
                0,1,0,0,0,0,0,0,
                1,1,0,0,0,0,0,0,
                0,0,1,0,0,0,0,0,
                1,0,1,0,0,0,0,0,
                0,1,1,0,0,0,0,0,
                1,1,1,0,0,0,0,0,
                0,0,0,1,0,0,0,0,
                1,0,0,1,0,0,0,0,
                0,1,0,1,0,0,0,0,
                1,1,0,1,0,0,0,0,
                0,0,1,1,0,0,0,0,
                1,0,1,1,0,0,0,0,
                0,1,1,1,0,0,0,0,
                1,1,1,1,0,0,0,0,
                0,0,0,0,1,0,0,0,
                1,0,0,0,1,0,0,0,
                0,1,0,0,1,0,0,0,
                1,1,0,0,1,0,0,0,
                0,0,1,0,1,0,0,0,
                1,0,1,0,1,0,0,0,
                0,1,1,0,1,0,0,0,
                1,1,1,0,1,0,0,0,
                0,0,0,1,1,0,0,0,
                1,0,0,1,1,0,0,0,
                0,1,0,1,1,0,0,0,
                1,1,0,1,1,0,0,0,
                0,0,1,1,1,0,0,0,
                1,0,1,1,1,0,0,0,
                0,1,1,1,1,0,0,0,
                1,1,1,1,1,0,0,0,
                0,0,0,0,0,1,0,0,
                1,0,0,0,0,1,0,0,
                0,1,0,0,0,1,0,0,
                1,1,0,0,0,1,0,0,
                0,0,1,0,0,1,0,0,
                1,0,1,0,0,1,0,0,
                0,1,1,0,0,1,0,0,
                1,1,1,0,0,1,0,0,
                0,0,0,1,0,1,0,0,
                1,0,0,1,0,1,0,0,
                0,1,0,1,0,1,0,0,
                1,1,0,1,0,1,0,0,
                0,0,1,1,0,1,0,0,
                1,0,1,1,0,1,0,0,
                0,1,1,1,0,1,0,0,
                1,1,1,1,0,1,0,0,
                0,0,0,0,1,1,0,0,
                1,0,0,0,1,1,0,0,
                0,1,0,0,1,1,0,0,
                1,1,0,0,1,1,0,0,
                0,0,1,0,1,1,0,0,
                1,0,1,0,1,1,0,0,
                0,1,1,0,1,1,0,0,
                1,1,1,0,1,1,0,0,
                0,0,0,1,1,1,0,0,
                1,0,0,1,1,1,0,0,
                0,1,0,1,1,1,0,0,
                1,1,0,1,1,1,0,0,
                0,0,1,1,1,1,0,0,
                1,0,1,1,1,1,0,0,
                0,1,1,1,1,1,0,0,
                1,1,1,1,1,1,0,0,
                0,0,0,0,0,0,1,0,
                1,0,0,0,0,0,1,0,
                0,1,0,0,0,0,1,0,
                1,1,0,0,0,0,1,0,
                0,0,1,0,0,0,1,0,
                1,0,1,0,0,0,1,0,
                0,1,1,0,0,0,1,0,
                1,1,1,0,0,0,1,0,
                0,0,0,1,0,0,1,0,
                1,0,0,1,0,0,1,0,
                0,1,0,1,0,0,1,0,
                1,1,0,1,0,0,1,0,
                0,0,1,1,0,0,1,0,
                1,0,1,1,0,0,1,0,
                0,1,1,1,0,0,1,0,
                1,1,1,1,0,0,1,0,
                0,0,0,0,1,0,1,0,
                1,0,0,0,1,0,1,0,
                0,1,0,0,1,0,1,0,
                1,1,0,0,1,0,1,0,
                0,0,1,0,1,0,1,0,
                1,0,1,0,1,0,1,0,
                0,1,1,0,1,0,1,0,
                1,1,1,0,1,0,1,0,
                0,0,0,1,1,0,1,0,
                1,0,0,1,1,0,1,0,
                0,1,0,1,1,0,1,0,
                1,1,0,1,1,0,1,0,
                0,0,1,1,1,0,1,0,
                1,0,1,1,1,0,1,0,
                0,1,1,1,1,0,1,0,
                1,1,1,1,1,0,1,0,
                0,0,0,0,0,1,1,0,
                1,0,0,0,0,1,1,0,
                0,1,0,0,0,1,1,0,
                1,1,0,0,0,1,1,0,
                0,0,1,0,0,1,1,0,
                1,0,1,0,0,1,1,0,
                0,1,1,0,0,1,1,0,
                1,1,1,0,0,1,1,0,
                0,0,0,1,0,1,1,0,
                1,0,0,1,0,1,1,0,
                0,1,0,1,0,1,1,0,
                1,1,0,1,0,1,1,0,
                0,0,1,1,0,1,1,0,
                1,0,1,1,0,1,1,0,
                0,1,1,1,0,1,1,0,
                1,1,1,1,0,1,1,0,
                0,0,0,0,1,1,1,0,
                1,0,0,0,1,1,1,0,
                0,1,0,0,1,1,1,0,
                1,1,0,0,1,1,1,0,
                0,0,1,0,1,1,1,0,
                1,0,1,0,1,1,1,0,
                0,1,1,0,1,1,1,0,
                1,1,1,0,1,1,1,0,
                0,0,0,1,1,1,1,0,
                1,0,0,1,1,1,1,0,
                0,1,0,1,1,1,1,0,
                1,1,0,1,1,1,1,0,
                0,0,1,1,1,1,1,0,
                1,0,1,1,1,1,1,0,
                0,1,1,1,1,1,1,0,
                1,1,1,1,1,1,1,0,
                0,0,0,0,0,0,0,1,
                1,0,0,0,0,0,0,1,
                0,1,0,0,0,0,0,1,
                1,1,0,0,0,0,0,1,
                0,0,1,0,0,0,0,1,
                1,0,1,0,0,0,0,1,
                0,1,1,0,0,0,0,1,
                1,1,1,0,0,0,0,1,
                0,0,0,1,0,0,0,1,
                1,0,0,1,0,0,0,1,
                0,1,0,1,0,0,0,1,
                1,1,0,1,0,0,0,1,
                0,0,1,1,0,0,0,1,
                1,0,1,1,0,0,0,1,
                0,1,1,1,0,0,0,1,
                1,1,1,1,0,0,0,1,
                0,0,0,0,1,0,0,1,
                1,0,0,0,1,0,0,1,
                0,1,0,0,1,0,0,1,
                1,1,0,0,1,0,0,1,
                0,0,1,0,1,0,0,1,
                1,0,1,0,1,0,0,1,
                0,1,1,0,1,0,0,1,
                1,1,1,0,1,0,0,1,
                0,0,0,1,1,0,0,1,
                1,0,0,1,1,0,0,1,
                0,1,0,1,1,0,0,1,
                1,1,0,1,1,0,0,1,
                0,0,1,1,1,0,0,1,
                1,0,1,1,1,0,0,1,
                0,1,1,1,1,0,0,1,
                1,1,1,1,1,0,0,1,
                0,0,0,0,0,1,0,1,
                1,0,0,0,0,1,0,1,
                0,1,0,0,0,1,0,1,
                1,1,0,0,0,1,0,1,
                0,0,1,0,0,1,0,1,
                1,0,1,0,0,1,0,1,
                0,1,1,0,0,1,0,1,
                1,1,1,0,0,1,0,1,
                0,0,0,1,0,1,0,1,
                1,0,0,1,0,1,0,1,
                0,1,0,1,0,1,0,1,
                1,1,0,1,0,1,0,1,
                0,0,1,1,0,1,0,1,
                1,0,1,1,0,1,0,1,
                0,1,1,1,0,1,0,1,
                1,1,1,1,0,1,0,1,
                0,0,0,0,1,1,0,1,
                1,0,0,0,1,1,0,1,
                0,1,0,0,1,1,0,1,
                1,1,0,0,1,1,0,1,
                0,0,1,0,1,1,0,1,
                1,0,1,0,1,1,0,1,
                0,1,1,0,1,1,0,1,
                1,1,1,0,1,1,0,1,
                0,0,0,1,1,1,0,1,
                1,0,0,1,1,1,0,1,
                0,1,0,1,1,1,0,1,
                1,1,0,1,1,1,0,1,
                0,0,1,1,1,1,0,1,
                1,0,1,1,1,1,0,1,
                0,1,1,1,1,1,0,1,
                1,1,1,1,1,1,0,1,
                0,0,0,0,0,0,1,1,
                1,0,0,0,0,0,1,1,
                0,1,0,0,0,0,1,1,
                1,1,0,0,0,0,1,1,
                0,0,1,0,0,0,1,1,
                1,0,1,0,0,0,1,1,
                0,1,1,0,0,0,1,1,
                1,1,1,0,0,0,1,1,
                0,0,0,1,0,0,1,1,
                1,0,0,1,0,0,1,1,
                0,1,0,1,0,0,1,1,
                1,1,0,1,0,0,1,1,
                0,0,1,1,0,0,1,1,
                1,0,1,1,0,0,1,1,
                0,1,1,1,0,0,1,1,
                1,1,1,1,0,0,1,1,
                0,0,0,0,1,0,1,1,
                1,0,0,0,1,0,1,1,
                0,1,0,0,1,0,1,1,
                1,1,0,0,1,0,1,1,
                0,0,1,0,1,0,1,1,
                1,0,1,0,1,0,1,1,
                0,1,1,0,1,0,1,1,
                1,1,1,0,1,0,1,1,
                0,0,0,1,1,0,1,1,
                1,0,0,1,1,0,1,1,
                0,1,0,1,1,0,1,1,
                1,1,0,1,1,0,1,1,
                0,0,1,1,1,0,1,1,
                1,0,1,1,1,0,1,1,
                0,1,1,1,1,0,1,1,
                1,1,1,1,1,0,1,1,
                0,0,0,0,0,1,1,1,
                1,0,0,0,0,1,1,1,
                0,1,0,0,0,1,1,1,
                1,1,0,0,0,1,1,1,
                0,0,1,0,0,1,1,1,
                1,0,1,0,0,1,1,1,
                0,1,1,0,0,1,1,1,
                1,1,1,0,0,1,1,1,
                0,0,0,1,0,1,1,1,
                1,0,0,1,0,1,1,1,
                0,1,0,1,0,1,1,1,
                1,1,0,1,0,1,1,1,
                0,0,1,1,0,1,1,1,
                1,0,1,1,0,1,1,1,
                0,1,1,1,0,1,1,1,
                1,1,1,1,0,1,1,1,
                0,0,0,0,1,1,1,1,
                1,0,0,0,1,1,1,1,
                0,1,0,0,1,1,1,1,
                1,1,0,0,1,1,1,1,
                0,0,1,0,1,1,1,1,
                1,0,1,0,1,1,1,1,
                0,1,1,0,1,1,1,1,
                1,1,1,0,1,1,1,1,
                0,0,0,1,1,1,1,1,
                1,0,0,1,1,1,1,1,
                0,1,0,1,1,1,1,1,
                1,1,0,1,1,1,1,1,
                0,0,1,1,1,1,1,1,
                1,0,1,1,1,1,1,1,
                0,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,

            };

        static ReadOnlySpan<byte> BitChars => new byte[]
        {
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,            
        };
    }
}