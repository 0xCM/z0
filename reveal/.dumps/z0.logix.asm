; 2019-11-01 18:19:07:158
; function: ref AndGate and()
; location: [7FFDDB8363D0h, 7FFDDB8363FEh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,21h                   ; MOV(Mov_r32_imm32) [EDX,21h:imm32]                   encoding(5 bytes) = ba 21 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42E4E0h:jmp64]                encoding(5 bytes) = e8 c7 e4 42 5f
0019h mov rax,1F96AFE6E30h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e30h:imm64]          encoding(10 bytes) = 48 b8 30 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rax,8                     ; ADD(Add_rm64_imm8) [RAX,8h:imm64]                    encoding(4 bytes) = 48 83 c0 08
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[47]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x21,0x00,0x00,0x00,0xE8,0xC7,0xE4,0x42,0x5F,0x48,0xB8,0x30,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC0,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ref XOrGate xor()
; location: [7FFDDB836420h, 7FFDDB83644Eh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,23h                   ; MOV(Mov_r32_imm32) [EDX,23h:imm32]                   encoding(5 bytes) = ba 23 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42E490h:jmp64]                encoding(5 bytes) = e8 77 e4 42 5f
0019h mov rax,1F96AFE6E40h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e40h:imm64]          encoding(10 bytes) = 48 b8 40 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rax,8                     ; ADD(Add_rm64_imm8) [RAX,8h:imm64]                    encoding(4 bytes) = 48 83 c0 08
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[47]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x23,0x00,0x00,0x00,0xE8,0x77,0xE4,0x42,0x5F,0x48,0xB8,0x40,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC0,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Compute(bit x, bit y, bit cin, out bit sum, out bit cout)
; location: [7FFDDB8364D0h, 7FFDDB8364F1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0009h mov r10d,eax                  ; MOV(Mov_r32_rm32) [R10D,EAX]                         encoding(3 bytes) = 44 8b d0
000ch and r10d,r8d                  ; AND(And_r32_rm32) [R10D,R8D]                         encoding(3 bytes) = 45 23 d0
000fh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0011h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0014h mov [r9],eax                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),EAX]         encoding(3 bytes) = 41 89 01
0017h or edx,r10d                   ; OR(Or_r32_rm32) [EDX,R10D]                           encoding(3 bytes) = 41 0b d2
001ah mov rax,[rsp+28h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 44 24 28
001fh mov [rax],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(2 bytes) = 89 10
0021h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ComputeBytes => new byte[34]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x33,0xC2,0x44,0x8B,0xD0,0x45,0x23,0xD0,0x23,0xD1,0x41,0x33,0xC0,0x41,0x89,0x01,0x41,0x0B,0xD2,0x48,0x8B,0x44,0x24,0x28,0x89,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: OutPair<bit> Compute(bit x, bit y, bit cin)
; location: [7FFDDB836510h, 7FFDDB83656Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0009h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000bh mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
000eh and r9d,r8d                   ; AND(And_r32_rm32) [R9D,R8D]                          encoding(3 bytes) = 45 23 c8
0011h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0013h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0016h or edx,r9d                    ; OR(Or_r32_rm32) [EDX,R9D]                            encoding(3 bytes) = 41 0b d1
0019h lea rcx,[rsp+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 18
001eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0022h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0026h mov [rsp+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 18
002ah mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
002eh vmovdqu xmm0,xmmword ptr [rsp+18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 18
0034h vmovdqu xmmword ptr [rsp+8],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 08
003ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
003ch mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
003fh mov [rsp+4],eax               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 04
0043h mov eax,[rsp+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 08
0047h mov edx,[rsp+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 10
004bh mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
004eh mov [rsp+4],edx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 04
0052h mov rax,[rsp]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(4 bytes) = 48 8b 04 24
0056h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
005ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ComputeBytes => new byte[91]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x8B,0xC1,0x33,0xC2,0x44,0x8B,0xC8,0x45,0x23,0xC8,0x23,0xD1,0x41,0x33,0xC0,0x41,0x0B,0xD1,0x48,0x8D,0x4C,0x24,0x18,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x89,0x44,0x24,0x18,0x89,0x54,0x24,0x20,0xC5,0xFA,0x6F,0x44,0x24,0x18,0xC5,0xFA,0x7F,0x44,0x24,0x08,0x33,0xC0,0x89,0x04,0x24,0x89,0x44,0x24,0x04,0x8B,0x44,0x24,0x08,0x8B,0x54,0x24,0x10,0x89,0x04,0x24,0x89,0x54,0x24,0x04,0x48,0x8B,0x04,0x24,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector64 Compute(BitVector32 x, BitVector32 y, BitVector32 cin)
; location: [7FFDDB8367A0h, 7FFDDB8367C0h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0009h mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
000ch and r9d,r8d                   ; AND(And_r32_rm32) [R9D,R8D]                          encoding(3 bytes) = 45 23 c8
000fh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0011h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0014h or edx,r9d                    ; OR(Or_r32_rm32) [EDX,R9D]                            encoding(3 bytes) = 41 0b d1
0017h shl rdx,20h                   ; SHL(Shl_rm64_imm8) [RDX,20h:imm8]                    encoding(4 bytes) = 48 c1 e2 20
001bh mov eax,eax                   ; MOV(Mov_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 8b c0
001dh or rax,rdx                    ; OR(Or_r64_rm64) [RAX,RDX]                            encoding(3 bytes) = 48 0b c2
0020h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ComputeBytes => new byte[33]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x33,0xC2,0x44,0x8B,0xC8,0x45,0x23,0xC8,0x23,0xD1,0x41,0x33,0xC0,0x41,0x0B,0xD1,0x48,0xC1,0xE2,0x20,0x8B,0xC0,0x48,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ValueTuple<Bit,Bit> Send(Bit a, Bit b)
; location: [7FFDDB836DA0h, 7FFDDB836E5Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000dh mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
0010h mov ebx,r9d                   ; MOV(Mov_r32_rm32) [EBX,R9D]                          encoding(3 bytes) = 41 8b d9
0013h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
001dh mov edx,25h                   ; MOV(Mov_r32_imm32) [EDX,25h:imm32]                   encoding(5 bytes) = ba 25 00 00 00
0022h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42DB10h:jmp64]                encoding(5 bytes) = e8 e9 da 42 5f
0027h movzx eax,dil                 ; MOVZX(Movzx_r32_rm8) [EAX,DIL]                       encoding(4 bytes) = 40 0f b6 c7
002bh test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
002dh jne short 0033h               ; JNE(Jne_rel8_64) [33h:jmp64]                         encoding(2 bytes) = 75 04
002fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0031h jmp short 0038h               ; JMP(Jmp_rel8_64) [38h:jmp64]                         encoding(2 bytes) = eb 05
0033h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0038h movzx edx,bl                  ; MOVZX(Movzx_r32_rm8) [EDX,BL]                        encoding(3 bytes) = 0f b6 d3
003bh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
003dh jne short 0043h               ; JNE(Jne_rel8_64) [43h:jmp64]                         encoding(2 bytes) = 75 04
003fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0041h jmp short 0048h               ; JMP(Jmp_rel8_64) [48h:jmp64]                         encoding(2 bytes) = eb 05
0043h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0048h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
004ah cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
004dh je short 0053h                ; JE(Je_rel8_64) [53h:jmp64]                           encoding(2 bytes) = 74 04
004fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0051h jmp short 0058h               ; JMP(Jmp_rel8_64) [58h:jmp64]                         encoding(2 bytes) = eb 05
0053h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0058h mov [rsp+38h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 38
005ch test dil,dil                  ; TEST(Test_rm8_r8) [DIL,DIL]                          encoding(3 bytes) = 40 84 ff
005fh jne short 0065h               ; JNE(Jne_rel8_64) [65h:jmp64]                         encoding(2 bytes) = 75 04
0061h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0063h jmp short 006ah               ; JMP(Jmp_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = eb 05
0065h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
006ah test bl,bl                    ; TEST(Test_rm8_r8) [BL,BL]                            encoding(2 bytes) = 84 db
006ch jne short 0072h               ; JNE(Jne_rel8_64) [72h:jmp64]                         encoding(2 bytes) = 75 04
006eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0070h jmp short 0077h               ; JMP(Jmp_rel8_64) [77h:jmp64]                         encoding(2 bytes) = eb 05
0072h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0077h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0079h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
007ch je short 0082h                ; JE(Je_rel8_64) [82h:jmp64]                           encoding(2 bytes) = 74 04
007eh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0080h jmp short 0087h               ; JMP(Jmp_rel8_64) [87h:jmp64]                         encoding(2 bytes) = eb 05
0082h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0087h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
008ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0090h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
0094h mov [rsp+20h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 20
0098h movzx eax,byte ptr [rsp+38h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 44 24 38
009dh movzx edx,byte ptr [rsp+20h]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 54 24 20
00a2h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
00a6h mov [rsp+30h],dl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(4 bytes) = 88 54 24 30
00aah vmovdqu xmm0,xmmword ptr [rsp+28h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 28
00b0h vmovdqu xmmword ptr [rsi],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSI:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 06
00b4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00b7h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
00bbh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00bch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00bdh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00beh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SendBytes => new byte[191]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x41,0x8B,0xD9,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x25,0x00,0x00,0x00,0xE8,0xE9,0xDA,0x42,0x5F,0x40,0x0F,0xB6,0xC7,0x84,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x0F,0xB6,0xD3,0x84,0xD2,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x33,0xC2,0x83,0xF8,0x01,0x74,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x88,0x44,0x24,0x38,0x40,0x84,0xFF,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x84,0xDB,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x23,0xC2,0x83,0xF8,0x01,0x74,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x28,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x88,0x44,0x24,0x20,0x0F,0xB6,0x44,0x24,0x38,0x0F,0xB6,0x54,0x24,0x20,0x88,0x44,0x24,0x28,0x88,0x54,0x24,0x30,0xC5,0xFA,0x6F,0x44,0x24,0x28,0xC5,0xFA,0x7F,0x06,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOpKind:byte Next(TernaryOpKind:byte src)
; location: [7FFDDB836E80h, 7FFDDB836E98h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx edx,cl                  ; MOVZX(Movzx_r32_rm8) [EDX,CL]                        encoding(3 bytes) = 0f b6 d1
0008h cmp edx,0FFh                  ; CMP(Cmp_rm32_imm32) [EDX,ffh:imm32]                  encoding(6 bytes) = 81 fa ff 00 00 00
000eh jne short 0013h               ; JNE(Jne_rel8_64) [13h:jmp64]                         encoding(2 bytes) = 75 03
0010h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0013h inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
0015h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0018h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> NextBytes => new byte[25]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xD1,0x81,0xFA,0xFF,0x00,0x00,0x00,0x75,0x03,0x33,0xC0,0xC3,0xFF,0xC2,0x0F,0xB6,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bool IsOperator(LogicExprKind:uint kind)
; location: [7FFDDB836EB0h, 7FFDDB836EBEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h cmp ecx,20h                   ; CMP(Cmp_rm32_imm8) [ECX,20h:imm32]                   encoding(3 bytes) = 83 f9 20
0008h setae al                      ; SETAE(Setae_rm8) [AL]                                encoding(3 bytes) = 0f 93 c0
000bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> IsOperatorBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF9,0x20,0x0F,0x93,0xC0,0x0F,0xB6,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bool IsOperator(TypedExprKind:uint kind)
; location: [7FFDDB836ED0h, 7FFDDB836EDEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h cmp ecx,20h                   ; CMP(Cmp_rm32_imm8) [ECX,20h:imm32]                   encoding(3 bytes) = 83 f9 20
0008h setae al                      ; SETAE(Setae_rm8) [AL]                                encoding(3 bytes) = 0f 93 c0
000bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> IsOperatorBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF9,0x20,0x0F,0x93,0xC0,0x0F,0xB6,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOpKind:byte ToLogical(BinaryBitwiseOpKind:uint kind)
; location: [7FFDDB836EF0h, 7FFDDB836EF8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ToLogicalBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind:uint ToBitwise(BinaryLogicOpKind:byte kind)
; location: [7FFDDB836F10h, 7FFDDB836F18h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ToBitwiseBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: uint get_OpId()
; location: [7FFDDB836F30h, 7FFDDB836F38h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 10
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpIdBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_OpName()
; location: [7FFDDB836F50h, 7FFDDB836F59h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpNameBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryBitwiseOpKind:uint get_Kind()
; location: [7FFDDB836F70h, 7FFDDB836F78h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB836F90h, 7FFDDB836FBAh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,30h                   ; MOV(Mov_r32_imm32) [EDX,30h:imm32]                   encoding(5 bytes) = ba 30 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42D920h:jmp64]                encoding(5 bytes) = e8 07 d9 42 5f
0019h mov rax,1F96AFE6E58h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e58h:imm64]          encoding(10 bytes) = 48 b8 58 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x30,0x00,0x00,0x00,0xE8,0x07,0xD9,0x42,0x5F,0x48,0xB8,0x58,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind:uint get_Kind()
; location: [7FFDDB836FD0h, 7FFDDB836FD8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB836FF0h, 7FFDDB83701Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,31h                   ; MOV(Mov_r32_imm32) [EDX,31h:imm32]                   encoding(5 bytes) = ba 31 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42D8C0h:jmp64]                encoding(5 bytes) = e8 a7 d8 42 5f
0019h mov rax,1F96AFE6E60h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e60h:imm64]          encoding(10 bytes) = 48 b8 60 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x31,0x00,0x00,0x00,0xE8,0xA7,0xD8,0x42,0x5F,0x48,0xB8,0x60,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOpKind:byte get_Kind()
; location: [7FFDDB837030h, 7FFDDB837039h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx+14h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 14
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB837050h, 7FFDDB83707Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,32h                   ; MOV(Mov_r32_imm32) [EDX,32h:imm32]                   encoding(5 bytes) = ba 32 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42D860h:jmp64]                encoding(5 bytes) = e8 47 d8 42 5f
0019h mov rax,1F96AFE6E68h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e68h:imm64]          encoding(10 bytes) = 48 b8 68 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x32,0x00,0x00,0x00,0xE8,0x47,0xD8,0x42,0x5F,0x48,0xB8,0x68,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOpKind:byte get_Kind()
; location: [7FFDDB837090h, 7FFDDB837099h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx+14h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 14
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB8370B0h, 7FFDDB8370DAh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,33h                   ; MOV(Mov_r32_imm32) [EDX,33h:imm32]                   encoding(5 bytes) = ba 33 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42D800h:jmp64]                encoding(5 bytes) = e8 e7 d7 42 5f
0019h mov rax,1F96AFE6E70h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e70h:imm64]          encoding(10 bytes) = 48 b8 70 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x33,0x00,0x00,0x00,0xE8,0xE7,0xD7,0x42,0x5F,0x48,0xB8,0x70,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind:uint get_Kind()
; location: [7FFDDB8370F0h, 7FFDDB8370F8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB837110h, 7FFDDB83713Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,34h                   ; MOV(Mov_r32_imm32) [EDX,34h:imm32]                   encoding(5 bytes) = ba 34 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42D7A0h:jmp64]                encoding(5 bytes) = e8 87 d7 42 5f
0019h mov rax,1F96AFE6E78h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e78h:imm64]          encoding(10 bytes) = 48 b8 78 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x34,0x00,0x00,0x00,0xE8,0x87,0xD7,0x42,0x5F,0x48,0xB8,0x78,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ShiftOpKind:uint get_Kind()
; location: [7FFDDB837150h, 7FFDDB837158h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB837170h, 7FFDDB83719Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
000fh mov edx,35h                   ; MOV(Mov_r32_imm32) [EDX,35h:imm32]                   encoding(5 bytes) = ba 35 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42D740h:jmp64]                encoding(5 bytes) = e8 27 d7 42 5f
0019h mov rax,1F96AFE6E80h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e80h:imm64]          encoding(10 bytes) = 48 b8 80 6e fe 6a f9 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x35,0x00,0x00,0x00,0xE8,0x27,0xD7,0x42,0x5F,0x48,0xB8,0x80,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(ILogicExpr expr)
; location: [7FFDDB8371B0h, 7FFDDB8371BFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB8328C8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb8328c8h:imm64]         encoding(10 bytes) = 48 b8 c8 28 83 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> evalBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0xC8,0x28,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit satisfied(ComparisonExpr expr, bit a, bit b)
; location: [7FFDDB8371E0h, 7FFDDB837271h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000fh mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
0011h mov ebx,r8d                   ; MOV(Mov_r32_rm32) [EBX,R8D]                          encoding(3 bytes) = 41 8b d8
0014h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0016h mov rbp,[rsi+18h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 6e 18
001ah mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
001dh mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0021h cmp r14d,0                    ; CMP(Cmp_rm32_imm8) [R14D,0h:imm32]                   encoding(4 bytes) = 41 83 fe 00
0025h jbe short 008ch               ; JBE(Jbe_rel8_64) [8Ch:jmp64]                         encoding(2 bytes) = 76 65
0027h mov r15,[rcx+10h]             ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 4c 8b 79 10
002bh mov ecx,[r15]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R15:br,DS:sr)]        encoding(3 bytes) = 41 8b 0f
002eh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0038h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42D2D0h:jmp64]                encoding(5 bytes) = e8 93 d2 42 5f
003dh mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
0040h lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
0044h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0047h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42C410h:jmp64]                encoding(5 bytes) = e8 c4 c3 42 5f
004ch cmp r14d,1                    ; CMP(Cmp_rm32_imm8) [R14D,1h:imm32]                   encoding(4 bytes) = 41 83 fe 01
0050h jbe short 008ch               ; JBE(Jbe_rel8_64) [8Ch:jmp64]                         encoding(2 bytes) = 76 3a
0052h mov rdi,[rbp+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 7d 18
0056h mov ecx,[rdi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RDI:br,DS:sr)]        encoding(2 bytes) = 8b 0f
0058h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0062h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42D2D0h:jmp64]                encoding(5 bytes) = e8 69 d2 42 5f
0067h mov [rax+8],ebx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EBX]        encoding(3 bytes) = 89 58 08
006ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
006eh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0071h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42C410h:jmp64]                encoding(5 bytes) = e8 9a c3 42 5f
0076h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0079h call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB6E8h:jmp64]        encoding(5 bytes) = e8 6a b6 ff ff
007eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
007fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0083h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0084h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0085h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0086h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0087h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0089h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
008bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
008ch call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F557D20h:jmp64]                encoding(5 bytes) = e8 8f 7c 55 5f
0091h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> satisfiedBytes => new byte[146]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x8B,0xFA,0x41,0x8B,0xD8,0x8B,0x0E,0x48,0x8B,0x6E,0x18,0x48,0x8B,0xCD,0x44,0x8B,0x71,0x08,0x41,0x83,0xFE,0x00,0x76,0x65,0x4C,0x8B,0x79,0x10,0x41,0x8B,0x0F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x93,0xD2,0x42,0x5F,0x89,0x78,0x08,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xC4,0xC3,0x42,0x5F,0x41,0x83,0xFE,0x01,0x76,0x3A,0x48,0x8B,0x7D,0x18,0x8B,0x0F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x69,0xD2,0x42,0x5F,0x89,0x58,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x9A,0xC3,0x42,0x5F,0x48,0x8B,0xCE,0xE8,0x6A,0xB6,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x8F,0x7C,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit equal(VariedLogicExpr a, VariedLogicExpr b)
; location: [7FFDDB8372A0h, 7FFDDB837469h]
0000h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0001h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0003h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0005h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0006h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,48h                   ; SUB(Sub_rm64_imm8) [RSP,48h:imm64]                   encoding(4 bytes) = 48 83 ec 48
000ch lea rbp,[rsp+70h]             ; LEA(Lea_r64_m) [RBP,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 6c 24 70
0011h mov [rbp-48h],rsp             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RSP]        encoding(4 bytes) = 48 89 65 b8
0015h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0018h mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
001bh mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
001fh mov rbx,[rdi+10h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 5f 10
0023h mov r14d,0AAh                 ; MOV(Mov_r32_imm32) [R14D,aah:imm32]                  encoding(6 bytes) = 41 be aa 00 00 00
0029h mov r15d,1                    ; MOV(Mov_r32_imm32) [R15D,1h:imm32]                   encoding(6 bytes) = 41 bf 01 00 00 00
002fh mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
0032h cmp ecx,[rbx+8]               ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RBX:br,DS:sr)]        encoding(3 bytes) = 3b 4b 08
0035h jne near ptr 0124h            ; JNE(Jne_rel32_64) [124h:jmp64]                       encoding(6 bytes) = 0f 85 e9 00 00 00
003bh call 7FFDDB8330F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBE50h:jmp64]        encoding(5 bytes) = e8 10 be ff ff
0040h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0043h mov r11,7FFDDB030E58h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e58h:imm64]         encoding(10 bytes) = 49 bb 58 0e 03 db fd 7f 00 00
004dh mov rax,7FFDDB030E58h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e58h:imm64]         encoding(10 bytes) = 48 b8 58 0e 03 db fd 7f 00 00
0057h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0059h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
005bh mov [rbp-38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RAX]        encoding(4 bytes) = 48 89 45 c8
005fh mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
0063h mov r11,7FFDDB030E60h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e60h:imm64]         encoding(10 bytes) = 49 bb 60 0e 03 db fd 7f 00 00
006dh mov rax,7FFDDB030E60h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e60h:imm64]         encoding(10 bytes) = 48 b8 60 0e 03 db fd 7f 00 00
0077h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0079h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
007bh test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
007dh je short 00dch                ; JE(Je_rel8_64) [DCh:jmp64]                           encoding(2 bytes) = 74 5d
007fh mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
0083h mov r11,7FFDDB030E68h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e68h:imm64]         encoding(10 bytes) = 49 bb 68 0e 03 db fd 7f 00 00
008dh mov rax,7FFDDB030E68h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e68h:imm64]         encoding(10 bytes) = 48 b8 68 0e 03 db fd 7f 00 00
0097h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0099h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
009bh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
009eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
00a1h call 7FFDDB833F60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCCC0h:jmp64]        encoding(5 bytes) = e8 1a cc ff ff
00a6h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
00a9h call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB628h:jmp64]        encoding(5 bytes) = e8 7a b5 ff ff
00aeh mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
00b0h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00b3h call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB628h:jmp64]        encoding(5 bytes) = e8 70 b5 ff ff
00b8h cmp ebx,eax                   ; CMP(Cmp_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 3b d8
00bah jne short 00fah               ; JNE(Jne_rel8_64) [FAh:jmp64]                         encoding(2 bytes) = 75 3e
00bch mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
00c0h mov r11,7FFDDB030E60h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e60h:imm64]         encoding(10 bytes) = 49 bb 60 0e 03 db fd 7f 00 00
00cah mov rax,7FFDDB030E60h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e60h:imm64]         encoding(10 bytes) = 48 b8 60 0e 03 db fd 7f 00 00
00d4h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00d6h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00d8h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
00dah jne short 007fh               ; JNE(Jne_rel8_64) [7Fh:jmp64]                         encoding(2 bytes) = 75 a3
00dch mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
00e0h mov r11,7FFDDB030E70h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e70h:imm64]         encoding(10 bytes) = 49 bb 70 0e 03 db fd 7f 00 00
00eah mov rax,7FFDDB030E70h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e70h:imm64]         encoding(10 bytes) = 48 b8 70 0e 03 db fd 7f 00 00
00f4h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00f6h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00f8h jmp short 0112h               ; JMP(Jmp_rel8_64) [112h:jmp64]                        encoding(2 bytes) = eb 18
00fah mov rcx,rsp                   ; MOV(Mov_r64_rm64) [RCX,RSP]                          encoding(3 bytes) = 48 8b cc
00fdh call 7FFDDB837420h            ; CALL(Call_rel32_64) [180h:jmp64]                     encoding(5 bytes) = e8 7e 00 00 00
0102h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0103h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0105h lea rsp,[rbp-28h]             ; LEA(Lea_r64_m) [RSP,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 65 d8
0109h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
010ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
010bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
010ch pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
010eh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0110h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0111h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0112h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0117h lea rsp,[rbp-28h]             ; LEA(Lea_r64_m) [RSP,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 65 d8
011bh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
011ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
011dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
011eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0120h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0122h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0123h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0124h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0126h mov edi,[rbx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RBX:br,DS:sr)]        encoding(3 bytes) = 8b 7b 08
0129h mov ecx,2A7h                  ; MOV(Mov_r32_imm32) [ECX,2a7h:imm32]                  encoding(5 bytes) = b9 a7 02 00 00
012eh mov rdx,7FFDDB27A670h         ; MOV(Mov_r64_imm64) [RDX,7ffddb27a670h:imm64]         encoding(10 bytes) = 48 ba 70 a6 27 db fd 7f 00 00
0138h call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F558440h:jmp64]                encoding(5 bytes) = e8 03 83 55 5f
013dh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0140h mov ecx,2B3h                  ; MOV(Mov_r32_imm32) [ECX,2b3h:imm32]                  encoding(5 bytes) = b9 b3 02 00 00
0145h mov rdx,7FFDDB27A670h         ; MOV(Mov_r64_imm64) [RDX,7ffddb27a670h:imm64]         encoding(10 bytes) = 48 ba 70 a6 27 db fd 7f 00 00
014fh call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F558440h:jmp64]                encoding(5 bytes) = e8 ec 82 55 5f
0154h mov r9,rax                    ; MOV(Mov_r64_rm64) [R9,RAX]                           encoding(3 bytes) = 4c 8b c8
0157h lea r8,[rbp-30h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RBP:br,SS:sr)]        encoding(4 bytes) = 4c 8d 45 d0
015bh mov [r8],r15b                 ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),R15L]           encoding(3 bytes) = 45 88 38
015eh mov [r8+4],r14d               ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R14D]        encoding(4 bytes) = 45 89 70 04
0162h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0165h mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0167h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0169h mov rax,[rbp-30h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 45 d0
016dh mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
0172h call 7FFDDB494930h            ; CALL(Call_rel32_64) [FFFFFFFFFFC5D690h:jmp64]        encoding(5 bytes) = e8 19 d5 c5 ff
0177h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
017ah call 7FFE3AC1A4F0h            ; CALL(Call_rel32_64) [5F3E3250h:jmp64]                encoding(5 bytes) = e8 d1 30 3e 5f
017fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0180h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0181h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0183h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0185h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0186h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0187h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0188h sub rsp,38h                   ; SUB(Sub_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 ec 38
018ch mov rbp,[rcx+28h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 69 28
0190h mov [rsp+28h],rbp             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RBP]        encoding(5 bytes) = 48 89 6c 24 28
0195h lea rbp,[rbp+70h]             ; LEA(Lea_r64_m) [RBP,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 6d 70
0199h cmp qword ptr [rbp-38h],0     ; CMP(Cmp_rm64_imm8) [mem(64u,RBP:br,SS:sr),0h:imm64]  encoding(5 bytes) = 48 83 7d c8 00
019eh je short 01bch                ; JE(Je_rel8_64) [1BCh:jmp64]                          encoding(2 bytes) = 74 1c
01a0h mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
01a4h mov r11,7FFDDB030E70h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e70h:imm64]         encoding(10 bytes) = 49 bb 70 0e 03 db fd 7f 00 00
01aeh mov rax,7FFDDB030E70h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e70h:imm64]         encoding(10 bytes) = 48 b8 70 0e 03 db fd 7f 00 00
01b8h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
01bah call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
01bch nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
01bdh add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
01c1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01c2h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01c3h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01c4h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
01c6h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
01c8h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01c9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> equalBytes => new byte[458]{0x55,0x41,0x57,0x41,0x56,0x57,0x56,0x53,0x48,0x83,0xEC,0x48,0x48,0x8D,0x6C,0x24,0x70,0x48,0x89,0x65,0xB8,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x10,0x48,0x8B,0x5F,0x10,0x41,0xBE,0xAA,0x00,0x00,0x00,0x41,0xBF,0x01,0x00,0x00,0x00,0x8B,0x49,0x08,0x3B,0x4B,0x08,0x0F,0x85,0xE9,0x00,0x00,0x00,0xE8,0x10,0xBE,0xFF,0xFF,0x48,0x8B,0xC8,0x49,0xBB,0x58,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x58,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x89,0x45,0xC8,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x60,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x60,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x85,0xC0,0x74,0x5D,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x68,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x68,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0xE8,0x1A,0xCC,0xFF,0xFF,0x48,0x8B,0xCE,0xE8,0x7A,0xB5,0xFF,0xFF,0x8B,0xD8,0x48,0x8B,0xCF,0xE8,0x70,0xB5,0xFF,0xFF,0x3B,0xD8,0x75,0x3E,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x60,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x60,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x85,0xC0,0x75,0xA3,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x70,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x70,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0xEB,0x18,0x48,0x8B,0xCC,0xE8,0x7E,0x00,0x00,0x00,0x90,0x33,0xC0,0x48,0x8D,0x65,0xD8,0x5B,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x5D,0xC3,0xB8,0x01,0x00,0x00,0x00,0x48,0x8D,0x65,0xD8,0x5B,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x5D,0xC3,0x8B,0xF1,0x8B,0x7B,0x08,0xB9,0xA7,0x02,0x00,0x00,0x48,0xBA,0x70,0xA6,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x03,0x83,0x55,0x5F,0x48,0x8B,0xD8,0xB9,0xB3,0x02,0x00,0x00,0x48,0xBA,0x70,0xA6,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEC,0x82,0x55,0x5F,0x4C,0x8B,0xC8,0x4C,0x8D,0x45,0xD0,0x45,0x88,0x38,0x45,0x89,0x70,0x04,0x4C,0x8B,0xC3,0x8B,0xCE,0x8B,0xD7,0x48,0x8B,0x45,0xD0,0x48,0x89,0x44,0x24,0x20,0xE8,0x19,0xD5,0xC5,0xFF,0x48,0x8B,0xC8,0xE8,0xD1,0x30,0x3E,0x5F,0xCC,0x55,0x41,0x57,0x41,0x56,0x57,0x56,0x53,0x48,0x83,0xEC,0x38,0x48,0x8B,0x69,0x28,0x48,0x89,0x6C,0x24,0x28,0x48,0x8D,0x6D,0x70,0x48,0x83,0x7D,0xC8,0x00,0x74,0x1C,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x70,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x70,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x90,0x48,0x83,0xC4,0x38,0x5B,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x5D,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(ILogicExpr expr)
; location: [7FFDDB8374B0h, 7FFDDB837632h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
000ch mov rcx,7FFDDB99E480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99e480h:imm64]         encoding(10 bytes) = 48 b9 80 e4 99 db fd 7f 00 00
0016h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42C020h:jmp64]                encoding(5 bytes) = e8 05 c0 42 5f
001bh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
001eh jne short 0094h               ; JNE(Jne_rel8_64) [94h:jmp64]                         encoding(2 bytes) = 75 74
0020h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0023h mov rcx,7FFDDB99E9C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99e9c8h:imm64]         encoding(10 bytes) = 48 b9 c8 e9 99 db fd 7f 00 00
002dh call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42C020h:jmp64]                encoding(5 bytes) = e8 ee bf 42 5f
0032h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0035h jne near ptr 00bch            ; JNE(Jne_rel32_64) [BCh:jmp64]                        encoding(6 bytes) = 0f 85 81 00 00 00
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rcx,7FFDDB99C260h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99c260h:imm64]         encoding(10 bytes) = 48 b9 60 c2 99 db fd 7f 00 00
0048h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42C020h:jmp64]                encoding(5 bytes) = e8 d3 bf 42 5f
004dh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0050h jne near ptr 00e4h            ; JNE(Jne_rel32_64) [E4h:jmp64]                        encoding(6 bytes) = 0f 85 8e 00 00 00
0056h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0059h mov rcx,7FFDDB99AA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99aa10h:imm64]         encoding(10 bytes) = 48 b9 10 aa 99 db fd 7f 00 00
0063h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42C020h:jmp64]                encoding(5 bytes) = e8 b8 bf 42 5f
0068h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
006bh jne near ptr 0101h            ; JNE(Jne_rel32_64) [101h:jmp64]                       encoding(6 bytes) = 0f 85 90 00 00 00
0071h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0074h mov rcx,7FFDDB99B6C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99b6c8h:imm64]         encoding(10 bytes) = 48 b9 c8 b6 99 db fd 7f 00 00
007eh call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42C020h:jmp64]                encoding(5 bytes) = e8 9d bf 42 5f
0083h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0086h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0089h jne near ptr 010bh            ; JNE(Jne_rel32_64) [10Bh:jmp64]                       encoding(6 bytes) = 0f 85 7c 00 00 00
008fh jmp near ptr 0173h            ; JMP(Jmp_rel32_64) [173h:jmp64]                       encoding(5 bytes) = e9 df 00 00 00
0094h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0097h mov r11,7FFDDB030E78h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e78h:imm64]         encoding(10 bytes) = 49 bb 78 0e 03 db fd 7f 00 00
00a1h mov rax,7FFDDB030E78h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e78h:imm64]         encoding(10 bytes) = 48 b8 78 0e 03 db fd 7f 00 00
00abh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00adh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00afh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00b2h call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB418h:jmp64]        encoding(5 bytes) = e8 61 b3 ff ff
00b7h jmp near ptr 017bh            ; JMP(Jmp_rel32_64) [17Bh:jmp64]                       encoding(5 bytes) = e9 bf 00 00 00
00bch mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00bfh mov r11,7FFDDB030E80h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e80h:imm64]         encoding(10 bytes) = 49 bb 80 0e 03 db fd 7f 00 00
00c9h mov rax,7FFDDB030E80h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e80h:imm64]         encoding(10 bytes) = 48 b8 80 0e 03 db fd 7f 00 00
00d3h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00d5h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00d7h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00dah call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB418h:jmp64]        encoding(5 bytes) = e8 39 b3 ff ff
00dfh jmp near ptr 017bh            ; JMP(Jmp_rel32_64) [17Bh:jmp64]                       encoding(5 bytes) = e9 97 00 00 00
00e4h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00e7h mov r11,7FFDDB030E88h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e88h:imm64]         encoding(10 bytes) = 49 bb 88 0e 03 db fd 7f 00 00
00f1h mov rax,7FFDDB030E88h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e88h:imm64]         encoding(10 bytes) = 48 b8 88 0e 03 db fd 7f 00 00
00fbh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00fdh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00ffh jmp short 017bh               ; JMP(Jmp_rel8_64) [17Bh:jmp64]                        encoding(2 bytes) = eb 7a
0101h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0104h call 7FFDDB8328D0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB420h:jmp64]        encoding(5 bytes) = e8 17 b3 ff ff
0109h jmp short 017bh               ; JMP(Jmp_rel8_64) [17Bh:jmp64]                        encoding(2 bytes) = eb 70
010bh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
010eh mov r11,7FFDDB030E90h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e90h:imm64]         encoding(10 bytes) = 49 bb 90 0e 03 db fd 7f 00 00
0118h mov rax,7FFDDB030E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e90h:imm64]         encoding(10 bytes) = 48 b8 90 0e 03 db fd 7f 00 00
0122h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0124h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0126h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0129h call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB418h:jmp64]        encoding(5 bytes) = e8 ea b2 ff ff
012eh mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
0130h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0133h mov r11,7FFDDB030E98h         ; MOV(Mov_r64_imm64) [R11,7ffddb030e98h:imm64]         encoding(10 bytes) = 49 bb 98 0e 03 db fd 7f 00 00
013dh mov rax,7FFDDB030E98h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030e98h:imm64]         encoding(10 bytes) = 48 b8 98 0e 03 db fd 7f 00 00
0147h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0149h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
014bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
014eh call 7FFDDB8328C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB418h:jmp64]        encoding(5 bytes) = e8 c5 b2 ff ff
0153h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0155h mov [rsp+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 20
0159h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
015eh cmp esi,eax                   ; CMP(Cmp_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 3b f0
0160h je short 0166h                ; JE(Je_rel8_64) [166h:jmp64]                          encoding(2 bytes) = 74 04
0162h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0164h jmp short 016bh               ; JMP(Jmp_rel8_64) [16Bh:jmp64]                        encoding(2 bytes) = eb 05
0166h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
016bh mov [rcx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(2 bytes) = 89 01
016dh mov eax,[rsp+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 20
0171h jmp short 017bh               ; JMP(Jmp_rel8_64) [17Bh:jmp64]                        encoding(2 bytes) = eb 08
0173h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0176h call 7FFDDB8328D8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB428h:jmp64]        encoding(5 bytes) = e8 ad b2 ff ff
017bh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
017ch add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0180h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0181h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0182h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[387]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xD6,0x48,0xB9,0x80,0xE4,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x05,0xC0,0x42,0x5F,0x48,0x85,0xC0,0x75,0x74,0x48,0x8B,0xD6,0x48,0xB9,0xC8,0xE9,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEE,0xBF,0x42,0x5F,0x48,0x85,0xC0,0x0F,0x85,0x81,0x00,0x00,0x00,0x48,0x8B,0xD6,0x48,0xB9,0x60,0xC2,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD3,0xBF,0x42,0x5F,0x48,0x85,0xC0,0x0F,0x85,0x8E,0x00,0x00,0x00,0x48,0x8B,0xD6,0x48,0xB9,0x10,0xAA,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0xBF,0x42,0x5F,0x48,0x85,0xC0,0x0F,0x85,0x90,0x00,0x00,0x00,0x48,0x8B,0xD6,0x48,0xB9,0xC8,0xB6,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9D,0xBF,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x85,0xFF,0x0F,0x85,0x7C,0x00,0x00,0x00,0xE9,0xDF,0x00,0x00,0x00,0x48,0x8B,0xC8,0x49,0xBB,0x78,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0x61,0xB3,0xFF,0xFF,0xE9,0xBF,0x00,0x00,0x00,0x48,0x8B,0xC8,0x49,0xBB,0x80,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x80,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0x39,0xB3,0xFF,0xFF,0xE9,0x97,0x00,0x00,0x00,0x48,0x8B,0xC8,0x49,0xBB,0x88,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x88,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0xEB,0x7A,0x48,0x8B,0xC8,0xE8,0x17,0xB3,0xFF,0xFF,0xEB,0x70,0x48,0x8B,0xCF,0x49,0xBB,0x90,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0xEA,0xB2,0xFF,0xFF,0x8B,0xF0,0x48,0x8B,0xCF,0x49,0xBB,0x98,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x98,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0xC5,0xB2,0xFF,0xFF,0x33,0xC9,0x89,0x4C,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x3B,0xF0,0x74,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x01,0x8B,0x44,0x24,0x20,0xEB,0x08,0x48,0x8B,0xCE,0xE8,0xAD,0xB2,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(ILogicOp expr)
; location: [7FFDDB837650h, 7FFDDB83784Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
000eh mov rcx,7FFDDB99DC10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99dc10h:imm64]         encoding(10 bytes) = 48 b9 10 dc 99 db fd 7f 00 00
0018h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42BE80h:jmp64]                encoding(5 bytes) = e8 63 be 42 5f
001dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0020h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0023h jne short 0066h               ; JNE(Jne_rel8_64) [66h:jmp64]                         encoding(2 bytes) = 75 41
0025h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0028h mov rcx,7FFDDB99AB48h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99ab48h:imm64]         encoding(10 bytes) = 48 b9 48 ab 99 db fd 7f 00 00
0032h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42BE80h:jmp64]                encoding(5 bytes) = e8 49 be 42 5f
0037h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
003ah test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
003dh jne near ptr 00bfh            ; JNE(Jne_rel32_64) [BFh:jmp64]                        encoding(6 bytes) = 0f 85 7c 00 00 00
0043h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0046h mov rcx,7FFDDB99D0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99d0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 d0 99 db fd 7f 00 00
0050h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F42BE80h:jmp64]                encoding(5 bytes) = e8 2b be 42 5f
0055h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0058h test rbp,rbp                  ; TEST(Test_rm64_r64) [RBP,RBP]                        encoding(3 bytes) = 48 85 ed
005bh jne near ptr 0140h            ; JNE(Jne_rel32_64) [140h:jmp64]                       encoding(6 bytes) = 0f 85 df 00 00 00
0061h jmp near ptr 01e9h            ; JMP(Jmp_rel32_64) [1E9h:jmp64]                       encoding(5 bytes) = e9 83 01 00 00
0066h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0069h mov r11,7FFDDB030EA0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ea0h:imm64]         encoding(10 bytes) = 49 bb a0 0e 03 db fd 7f 00 00
0073h mov rax,7FFDDB030EA0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ea0h:imm64]         encoding(10 bytes) = 48 b8 a0 0e 03 db fd 7f 00 00
007dh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
007fh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0081h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
0083h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0086h mov r11,7FFDDB030EA8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ea8h:imm64]         encoding(10 bytes) = 49 bb a8 0e 03 db fd 7f 00 00
0090h mov rax,7FFDDB030EA8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ea8h:imm64]         encoding(10 bytes) = 48 b8 a8 0e 03 db fd 7f 00 00
009ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
009ch call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
009eh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00a1h call 7FFDDB8374B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE60h:jmp64]        encoding(5 bytes) = e8 ba fd ff ff
00a6h mov edx,eax                   ; MOV(Mov_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 8b d0
00a8h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
00aah mov rax,7FFDDB834228h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834228h:imm64]         encoding(10 bytes) = 48 b8 28 42 83 db fd 7f 00 00
00b4h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00b8h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00b9h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00bah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00bbh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00bch jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
00bfh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
00c2h mov r11,7FFDDB030EB0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030eb0h:imm64]         encoding(10 bytes) = 49 bb b0 0e 03 db fd 7f 00 00
00cch mov rax,7FFDDB030EB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030eb0h:imm64]         encoding(10 bytes) = 48 b8 b0 0e 03 db fd 7f 00 00
00d6h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00d8h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00dah mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
00dch mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
00dfh mov r11,7FFDDB030EB8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030eb8h:imm64]         encoding(10 bytes) = 49 bb b8 0e 03 db fd 7f 00 00
00e9h mov rax,7FFDDB030EB8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030eb8h:imm64]         encoding(10 bytes) = 48 b8 b8 0e 03 db fd 7f 00 00
00f3h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00f5h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00f7h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00fah call 7FFDDB8374B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE60h:jmp64]        encoding(5 bytes) = e8 61 fd ff ff
00ffh mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
0101h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0104h mov r11,7FFDDB030EC0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ec0h:imm64]         encoding(10 bytes) = 49 bb c0 0e 03 db fd 7f 00 00
010eh mov rax,7FFDDB030EC0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ec0h:imm64]         encoding(10 bytes) = 48 b8 c0 0e 03 db fd 7f 00 00
0118h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
011ah call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
011ch mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
011fh call 7FFDDB8374B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE60h:jmp64]        encoding(5 bytes) = e8 3c fd ff ff
0124h mov r8d,eax                   ; MOV(Mov_r32_rm32) [R8D,EAX]                          encoding(3 bytes) = 44 8b c0
0127h mov ecx,ebp                   ; MOV(Mov_r32_rm32) [ECX,EBP]                          encoding(2 bytes) = 8b cd
0129h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
012bh mov rax,7FFDDB834230h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834230h:imm64]         encoding(10 bytes) = 48 b8 30 42 83 db fd 7f 00 00
0135h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0139h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
013ah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
013bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
013ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
013dh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0140h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0143h mov r11,7FFDDB030EC8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ec8h:imm64]         encoding(10 bytes) = 49 bb c8 0e 03 db fd 7f 00 00
014dh mov rax,7FFDDB030EC8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ec8h:imm64]         encoding(10 bytes) = 48 b8 c8 0e 03 db fd 7f 00 00
0157h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0159h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
015bh mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
015dh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0160h mov r11,7FFDDB030ED0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ed0h:imm64]         encoding(10 bytes) = 49 bb d0 0e 03 db fd 7f 00 00
016ah mov rax,7FFDDB030ED0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ed0h:imm64]         encoding(10 bytes) = 48 b8 d0 0e 03 db fd 7f 00 00
0174h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0176h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0178h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
017bh call 7FFDDB8374B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE60h:jmp64]        encoding(5 bytes) = e8 e0 fc ff ff
0180h mov edi,eax                   ; MOV(Mov_r32_rm32) [EDI,EAX]                          encoding(2 bytes) = 8b f8
0182h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0185h mov r11,7FFDDB030ED8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ed8h:imm64]         encoding(10 bytes) = 49 bb d8 0e 03 db fd 7f 00 00
018fh mov rax,7FFDDB030ED8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ed8h:imm64]         encoding(10 bytes) = 48 b8 d8 0e 03 db fd 7f 00 00
0199h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
019bh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
019dh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
01a0h call 7FFDDB8374B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE60h:jmp64]        encoding(5 bytes) = e8 bb fc ff ff
01a5h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
01a7h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
01aah mov r11,7FFDDB030EE0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ee0h:imm64]         encoding(10 bytes) = 49 bb e0 0e 03 db fd 7f 00 00
01b4h mov rax,7FFDDB030EE0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ee0h:imm64]         encoding(10 bytes) = 48 b8 e0 0e 03 db fd 7f 00 00
01beh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
01c0h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
01c2h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
01c5h call 7FFDDB8374B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE60h:jmp64]        encoding(5 bytes) = e8 96 fc ff ff
01cah mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
01cdh mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
01cfh mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
01d1h mov r8d,ebx                   ; MOV(Mov_r32_rm32) [R8D,EBX]                          encoding(3 bytes) = 44 8b c3
01d4h mov rax,7FFDDB834248h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834248h:imm64]         encoding(10 bytes) = 48 b8 48 42 83 db fd 7f 00 00
01deh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01e2h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01e3h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01e4h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01e5h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01e6h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
01e9h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
01ech mov rax,7FFDDB8328D8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb8328d8h:imm64]         encoding(10 bytes) = 48 b8 d8 28 83 db fd 7f 00 00
01f6h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01fah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01fbh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01fch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01fdh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01feh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> evalBytes => new byte[513]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xD6,0x48,0xB9,0x10,0xDC,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x63,0xBE,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x85,0xFF,0x75,0x41,0x48,0x8B,0xD6,0x48,0xB9,0x48,0xAB,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x49,0xBE,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x85,0xDB,0x0F,0x85,0x7C,0x00,0x00,0x00,0x48,0x8B,0xD6,0x48,0xB9,0xD0,0xD0,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2B,0xBE,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x85,0xED,0x0F,0x85,0xDF,0x00,0x00,0x00,0xE9,0x83,0x01,0x00,0x00,0x48,0x8B,0xCF,0x49,0xBB,0xA0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xA0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x8B,0xD8,0x48,0x8B,0xCF,0x49,0xBB,0xA8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xA8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0xBA,0xFD,0xFF,0xFF,0x8B,0xD0,0x8B,0xCB,0x48,0xB8,0x28,0x42,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0x49,0xBB,0xB0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xB0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x8B,0xE8,0x48,0x8B,0xCB,0x49,0xBB,0xB8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xB8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0x61,0xFD,0xFF,0xFF,0x8B,0xF0,0x48,0x8B,0xCB,0x49,0xBB,0xC0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xC0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0x3C,0xFD,0xFF,0xFF,0x44,0x8B,0xC0,0x8B,0xCD,0x8B,0xD6,0x48,0xB8,0x30,0x42,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCD,0x49,0xBB,0xC8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xC8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x8B,0xF0,0x48,0x8B,0xCD,0x49,0xBB,0xD0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xD0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0xE0,0xFC,0xFF,0xFF,0x8B,0xF8,0x48,0x8B,0xCD,0x49,0xBB,0xD8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xD8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0xBB,0xFC,0xFF,0xFF,0x8B,0xD8,0x48,0x8B,0xCD,0x49,0xBB,0xE0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xE0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xC8,0xE8,0x96,0xFC,0xFF,0xFF,0x44,0x8B,0xC8,0x8B,0xCE,0x8B,0xD7,0x44,0x8B,0xC3,0x48,0xB8,0x48,0x42,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCE,0x48,0xB8,0xD8,0x28,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit unhandled(ILogicExpr expr)
; location: [7FFDDB837870h, 7FFDDB8378C9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB1E0390h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1e0390h:imm64]         encoding(10 bytes) = 48 b9 90 03 1e db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CC40h:jmp64]                encoding(5 bytes) = e8 28 cc 42 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh mov ecx,28Bh                  ; MOV(Mov_r32_imm32) [ECX,28bh:imm32]                  encoding(5 bytes) = b9 8b 02 00 00
0020h mov rdx,7FFDDB27A670h         ; MOV(Mov_r64_imm64) [RDX,7ffddb27a670h:imm64]         encoding(10 bytes) = 48 ba 70 a6 27 db fd 7f 00 00
002ah call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F557E70h:jmp64]                encoding(5 bytes) = e8 41 7e 55 5f
002fh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0032h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0035h call 7FFDDB154130h            ; CALL(Call_rel32_64) [FFFFFFFFFF91C8C0h:jmp64]        encoding(5 bytes) = e8 86 c8 91 ff
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0040h call 7FFDDB154C88h            ; CALL(Call_rel32_64) [FFFFFFFFFF91D418h:jmp64]        encoding(5 bytes) = e8 d3 d3 91 ff
0045h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0049h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
004ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BD80h:jmp64]                encoding(5 bytes) = e8 2f bd 42 5f
0051h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0054h call 7FFE3AC1A4F0h            ; CALL(Call_rel32_64) [5F3E2C80h:jmp64]                encoding(5 bytes) = e8 27 2c 3e 5f
0059h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> unhandledBytes => new byte[90]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0x90,0x03,0x1E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0xCC,0x42,0x5F,0x48,0x8B,0xF8,0xB9,0x8B,0x02,0x00,0x00,0x48,0xBA,0x70,0xA6,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x41,0x7E,0x55,0x5F,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0xE8,0x86,0xC8,0x91,0xFF,0x48,0x8B,0xF0,0x48,0x8B,0xCF,0xE8,0xD3,0xD3,0x91,0xFF,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x2F,0xBD,0x42,0x5F,0x48,0x8B,0xCF,0xE8,0x27,0x2C,0x3E,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq bitseq(bit[] terms)
; location: [7FFDDB8378F0h, 7FFDDB837920h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CBC0h:jmp64]                encoding(5 bytes) = e8 a8 cb 42 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
001fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0022h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BD00h:jmp64]                encoding(5 bytes) = e8 d9 bc 42 5f
0027h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
002fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bitseqBytes => new byte[49]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA8,0xCB,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xD9,0xBC,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp not(ILogicExpr a)
; location: [7FFDDB837940h, 7FFDDB837977h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CB70h:jmp64]                encoding(5 bytes) = e8 58 cb 42 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh mov dword ptr [rdi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 10 01 00 00 00
0022h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0026h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0029h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BCB0h:jmp64]                encoding(5 bytes) = e8 82 bc 42 5f
002eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0031h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0035h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0036h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notBytes => new byte[56]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x58,0xCB,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x82,0xBC,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp not(bit a)
; location: [7FFDDB837990h, 7FFDDB8379DBh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0008h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0012h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CB20h:jmp64]                encoding(5 bytes) = e8 09 cb 42 5f
0017h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001ah mov [rdi+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 08
001dh mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
0027h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CB20h:jmp64]                encoding(5 bytes) = e8 f4 ca 42 5f
002ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
002fh mov dword ptr [rsi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 10 01 00 00 00
0036h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BC60h:jmp64]                encoding(5 bytes) = e8 1e bc 42 5f
0042h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0045h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0049h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notBytes => new byte[76]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF1,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x09,0xCB,0x42,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x08,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF4,0xCA,0x42,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x1E,0xBC,0x42,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp and(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837A00h, 7FFDDB837A45h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CAB0h:jmp64]                encoding(5 bytes) = e8 94 ca 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),1h:imm8]     encoding(4 bytes) = c6 43 18 01
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BBF0h:jmp64]                encoding(5 bytes) = e8 c1 bb 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BBF0h:jmp64]                encoding(5 bytes) = e8 b5 bb 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0xCA,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x01,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC1,0xBB,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xB5,0xBB,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp and(bit a, bit b)
; location: [7FFDDB837A60h, 7FFDDB837ACDh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CA50h:jmp64]                encoding(5 bytes) = e8 36 ca 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CA50h:jmp64]                encoding(5 bytes) = e8 21 ca 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42CA50h:jmp64]                encoding(5 bytes) = e8 0c ca 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),1h:imm8]     encoding(4 bytes) = c6 47 18 01
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BB90h:jmp64]                encoding(5 bytes) = e8 39 bb 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BB90h:jmp64]                encoding(5 bytes) = e8 2d bb 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x36,0xCA,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0xCA,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0C,0xCA,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x01,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x39,0xBB,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x2D,0xBB,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nand(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837AF0h, 7FFDDB837B35h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C9C0h:jmp64]                encoding(5 bytes) = e8 a4 c9 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],0Eh    ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),eh:imm8]     encoding(4 bytes) = c6 43 18 0e
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BB00h:jmp64]                encoding(5 bytes) = e8 d1 ba 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BB00h:jmp64]                encoding(5 bytes) = e8 c5 ba 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> nandBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0xC9,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x0E,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD1,0xBA,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xC5,0xBA,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nand(bit a, bit b)
; location: [7FFDDB837B50h, 7FFDDB837BBDh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C960h:jmp64]                encoding(5 bytes) = e8 46 c9 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C960h:jmp64]                encoding(5 bytes) = e8 31 c9 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C960h:jmp64]                encoding(5 bytes) = e8 1c c9 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],0Eh    ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),eh:imm8]     encoding(4 bytes) = c6 47 18 0e
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BAA0h:jmp64]                encoding(5 bytes) = e8 49 ba 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BAA0h:jmp64]                encoding(5 bytes) = e8 3d ba 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> nandBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x46,0xC9,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x31,0xC9,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0xC9,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x0E,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x49,0xBA,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x3D,0xBA,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp or(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837BE0h, 7FFDDB837C25h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C8D0h:jmp64]                encoding(5 bytes) = e8 b4 c8 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),7h:imm8]     encoding(4 bytes) = c6 43 18 07
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BA10h:jmp64]                encoding(5 bytes) = e8 e1 b9 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42BA10h:jmp64]                encoding(5 bytes) = e8 d5 b9 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> orBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0xC8,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x07,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE1,0xB9,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xD5,0xB9,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp or(bit a, bit b)
; location: [7FFDDB837C40h, 7FFDDB837CADh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C870h:jmp64]                encoding(5 bytes) = e8 56 c8 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C870h:jmp64]                encoding(5 bytes) = e8 41 c8 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C870h:jmp64]                encoding(5 bytes) = e8 2c c8 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),7h:imm8]     encoding(4 bytes) = c6 47 18 07
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B9B0h:jmp64]                encoding(5 bytes) = e8 59 b9 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B9B0h:jmp64]                encoding(5 bytes) = e8 4d b9 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> orBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x56,0xC8,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x41,0xC8,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2C,0xC8,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x07,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x59,0xB9,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x4D,0xB9,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nor(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837CD0h, 7FFDDB837D15h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C7E0h:jmp64]                encoding(5 bytes) = e8 c4 c7 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],8      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),8h:imm8]     encoding(4 bytes) = c6 43 18 08
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B920h:jmp64]                encoding(5 bytes) = e8 f1 b8 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B920h:jmp64]                encoding(5 bytes) = e8 e5 b8 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> norBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0xC7,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x08,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xF1,0xB8,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xE5,0xB8,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nor(bit a, bit b)
; location: [7FFDDB837D30h, 7FFDDB837D9Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C780h:jmp64]                encoding(5 bytes) = e8 66 c7 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C780h:jmp64]                encoding(5 bytes) = e8 51 c7 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C780h:jmp64]                encoding(5 bytes) = e8 3c c7 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],8      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),8h:imm8]     encoding(4 bytes) = c6 47 18 08
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B8C0h:jmp64]                encoding(5 bytes) = e8 69 b8 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B8C0h:jmp64]                encoding(5 bytes) = e8 5d b8 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> norBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x66,0xC7,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0xC7,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3C,0xC7,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x08,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x69,0xB8,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x5D,0xB8,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xor(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837DC0h, 7FFDDB837E05h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C6F0h:jmp64]                encoding(5 bytes) = e8 d4 c6 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],6      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),6h:imm8]     encoding(4 bytes) = c6 43 18 06
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B830h:jmp64]                encoding(5 bytes) = e8 01 b8 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B830h:jmp64]                encoding(5 bytes) = e8 f5 b7 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0xC6,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x06,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x01,0xB8,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xF5,0xB7,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xor(bit a, bit b)
; location: [7FFDDB837E20h, 7FFDDB837E8Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C690h:jmp64]                encoding(5 bytes) = e8 76 c6 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C690h:jmp64]                encoding(5 bytes) = e8 61 c6 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C690h:jmp64]                encoding(5 bytes) = e8 4c c6 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],6      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),6h:imm8]     encoding(4 bytes) = c6 47 18 06
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B7D0h:jmp64]                encoding(5 bytes) = e8 79 b7 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B7D0h:jmp64]                encoding(5 bytes) = e8 6d b7 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0xC6,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x61,0xC6,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4C,0xC6,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x06,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x79,0xB7,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x6D,0xB7,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xnor(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837EB0h, 7FFDDB837EF5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C600h:jmp64]                encoding(5 bytes) = e8 e4 c5 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],9      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),9h:imm8]     encoding(4 bytes) = c6 43 18 09
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B740h:jmp64]                encoding(5 bytes) = e8 11 b7 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B740h:jmp64]                encoding(5 bytes) = e8 05 b7 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xnorBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE4,0xC5,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x09,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x11,0xB7,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x05,0xB7,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xnor(bit a, bit b)
; location: [7FFDDB837F10h, 7FFDDB837F7Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C5A0h:jmp64]                encoding(5 bytes) = e8 86 c5 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C5A0h:jmp64]                encoding(5 bytes) = e8 71 c5 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C5A0h:jmp64]                encoding(5 bytes) = e8 5c c5 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],9      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),9h:imm8]     encoding(4 bytes) = c6 47 18 09
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B6E0h:jmp64]                encoding(5 bytes) = e8 89 b6 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B6E0h:jmp64]                encoding(5 bytes) = e8 7d b6 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xnorBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x86,0xC5,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x71,0xC5,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5C,0xC5,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x09,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x89,0xB6,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x7D,0xB6,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp left(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB837FA0h, 7FFDDB837FE5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C510h:jmp64]                encoding(5 bytes) = e8 f4 c4 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],3      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),3h:imm8]     encoding(4 bytes) = c6 43 18 03
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B650h:jmp64]                encoding(5 bytes) = e8 21 b6 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B650h:jmp64]                encoding(5 bytes) = e8 15 b6 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> leftBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF4,0xC4,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x03,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x21,0xB6,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x15,0xB6,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp left(bit a, bit b)
; location: [7FFDDB838000h, 7FFDDB83806Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C4B0h:jmp64]                encoding(5 bytes) = e8 96 c4 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C4B0h:jmp64]                encoding(5 bytes) = e8 81 c4 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C4B0h:jmp64]                encoding(5 bytes) = e8 6c c4 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],3      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),3h:imm8]     encoding(4 bytes) = c6 47 18 03
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B5F0h:jmp64]                encoding(5 bytes) = e8 99 b5 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B5F0h:jmp64]                encoding(5 bytes) = e8 8d b5 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> leftBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0xC4,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x81,0xC4,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6C,0xC4,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x03,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x99,0xB5,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x8D,0xB5,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp right(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838090h, 7FFDDB8380D5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C420h:jmp64]                encoding(5 bytes) = e8 04 c4 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],5      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),5h:imm8]     encoding(4 bytes) = c6 43 18 05
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B560h:jmp64]                encoding(5 bytes) = e8 31 b5 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B560h:jmp64]                encoding(5 bytes) = e8 25 b5 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rightBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0xC4,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x05,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x31,0xB5,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x25,0xB5,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp right(bit a, bit b)
; location: [7FFDDB8380F0h, 7FFDDB83815Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C3C0h:jmp64]                encoding(5 bytes) = e8 a6 c3 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C3C0h:jmp64]                encoding(5 bytes) = e8 91 c3 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C3C0h:jmp64]                encoding(5 bytes) = e8 7c c3 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],5      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),5h:imm8]     encoding(4 bytes) = c6 47 18 05
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B500h:jmp64]                encoding(5 bytes) = e8 a9 b4 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B500h:jmp64]                encoding(5 bytes) = e8 9d b4 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rightBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0xC3,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x91,0xC3,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0xC3,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x05,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xA9,0xB4,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0x9D,0xB4,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp lnot(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838180h, 7FFDDB8381C5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C330h:jmp64]                encoding(5 bytes) = e8 14 c3 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],0Ch    ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),ch:imm8]     encoding(4 bytes) = c6 43 18 0c
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B470h:jmp64]                encoding(5 bytes) = e8 41 b4 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B470h:jmp64]                encoding(5 bytes) = e8 35 b4 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lnotBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xC3,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x0C,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x41,0xB4,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x35,0xB4,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp lnot(bit a, bit b)
; location: [7FFDDB8381E0h, 7FFDDB83824Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C2D0h:jmp64]                encoding(5 bytes) = e8 b6 c2 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C2D0h:jmp64]                encoding(5 bytes) = e8 a1 c2 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C2D0h:jmp64]                encoding(5 bytes) = e8 8c c2 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],0Ch    ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),ch:imm8]     encoding(4 bytes) = c6 47 18 0c
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B410h:jmp64]                encoding(5 bytes) = e8 b9 b3 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B410h:jmp64]                encoding(5 bytes) = e8 ad b3 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lnotBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB6,0xC2,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA1,0xC2,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8C,0xC2,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x0C,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xB9,0xB3,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xAD,0xB3,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp rnot(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838270h, 7FFDDB8382B5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C240h:jmp64]                encoding(5 bytes) = e8 24 c2 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],0Ah    ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),ah:imm8]     encoding(4 bytes) = c6 43 18 0a
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B380h:jmp64]                encoding(5 bytes) = e8 51 b3 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B380h:jmp64]                encoding(5 bytes) = e8 45 b3 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rnotBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0xC2,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x0A,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x51,0xB3,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x45,0xB3,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp rnot(bit a, bit b)
; location: [7FFDDB8382D0h, 7FFDDB83833Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C1E0h:jmp64]                encoding(5 bytes) = e8 c6 c1 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C1E0h:jmp64]                encoding(5 bytes) = e8 b1 c1 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C1E0h:jmp64]                encoding(5 bytes) = e8 9c c1 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],0Ah    ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),ah:imm8]     encoding(4 bytes) = c6 47 18 0a
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B320h:jmp64]                encoding(5 bytes) = e8 c9 b2 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B320h:jmp64]                encoding(5 bytes) = e8 bd b2 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rnotBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0xC1,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB1,0xC1,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0xC1,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x0A,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xC9,0xB2,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xBD,0xB2,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp imply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838360h, 7FFDDB8383A5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C150h:jmp64]                encoding(5 bytes) = e8 34 c1 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],0Bh    ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),bh:imm8]     encoding(4 bytes) = c6 43 18 0b
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B290h:jmp64]                encoding(5 bytes) = e8 61 b2 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B290h:jmp64]                encoding(5 bytes) = e8 55 b2 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> implyBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0xC1,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x0B,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x61,0xB2,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x55,0xB2,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp imply(bit a, bit b)
; location: [7FFDDB8383C0h, 7FFDDB83842Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C0F0h:jmp64]                encoding(5 bytes) = e8 d6 c0 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C0F0h:jmp64]                encoding(5 bytes) = e8 c1 c0 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C0F0h:jmp64]                encoding(5 bytes) = e8 ac c0 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],0Bh    ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),bh:imm8]     encoding(4 bytes) = c6 47 18 0b
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B230h:jmp64]                encoding(5 bytes) = e8 d9 b1 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B230h:jmp64]                encoding(5 bytes) = e8 cd b1 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> implyBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0xC0,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC1,0xC0,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAC,0xC0,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x0B,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xD9,0xB1,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xCD,0xB1,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp notimply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838450h, 7FFDDB838495h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C060h:jmp64]                encoding(5 bytes) = e8 44 c0 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],4      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),4h:imm8]     encoding(4 bytes) = c6 43 18 04
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B1A0h:jmp64]                encoding(5 bytes) = e8 71 b1 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B1A0h:jmp64]                encoding(5 bytes) = e8 65 b1 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notimplyBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0xC0,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x04,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x71,0xB1,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x65,0xB1,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp notimply(bit a, bit b)
; location: [7FFDDB8384B0h, 7FFDDB83851Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C000h:jmp64]                encoding(5 bytes) = e8 e6 bf 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C000h:jmp64]                encoding(5 bytes) = e8 d1 bf 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42C000h:jmp64]                encoding(5 bytes) = e8 bc bf 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],4      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),4h:imm8]     encoding(4 bytes) = c6 47 18 04
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B140h:jmp64]                encoding(5 bytes) = e8 e9 b0 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B140h:jmp64]                encoding(5 bytes) = e8 dd b0 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notimplyBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0xBF,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD1,0xBF,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBC,0xBF,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x04,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xE9,0xB0,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xDD,0xB0,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cimply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838540h, 7FFDDB838585h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BF70h:jmp64]                encoding(5 bytes) = e8 54 bf 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],0Dh    ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),dh:imm8]     encoding(4 bytes) = c6 43 18 0d
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B0B0h:jmp64]                encoding(5 bytes) = e8 81 b0 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B0B0h:jmp64]                encoding(5 bytes) = e8 75 b0 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cimplyBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0xBF,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x0D,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x81,0xB0,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x75,0xB0,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cimply(bit a, bit b)
; location: [7FFDDB8385A0h, 7FFDDB83860Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BF10h:jmp64]                encoding(5 bytes) = e8 f6 be 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BF10h:jmp64]                encoding(5 bytes) = e8 e1 be 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BF10h:jmp64]                encoding(5 bytes) = e8 cc be 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],0Dh    ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),dh:imm8]     encoding(4 bytes) = c6 47 18 0d
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B050h:jmp64]                encoding(5 bytes) = e8 f9 af 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42B050h:jmp64]                encoding(5 bytes) = e8 ed af 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cimplyBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0xBE,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0xBE,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0xBE,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x0D,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF9,0xAF,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xED,0xAF,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cnotimply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB838630h, 7FFDDB838675h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BE80h:jmp64]                encoding(5 bytes) = e8 64 be 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov byte ptr [rbx+18h],2      ; MOV(Mov_rm8_imm8) [mem(8u,RBX:br,DS:sr),2h:imm8]     encoding(4 bytes) = c6 43 18 02
0023h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0027h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AFC0h:jmp64]                encoding(5 bytes) = e8 91 af 42 5f
002fh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0033h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AFC0h:jmp64]                encoding(5 bytes) = e8 85 af 42 5f
003bh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0042h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0043h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0044h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cnotimplyBytes => new byte[70]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xBE,0x42,0x5F,0x48,0x8B,0xD8,0xC6,0x43,0x18,0x02,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x91,0xAF,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x85,0xAF,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cnotimply(bit a, bit b)
; location: [7FFDDB838690h, 7FFDDB8386FDh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BE20h:jmp64]                encoding(5 bytes) = e8 06 be 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BE20h:jmp64]                encoding(5 bytes) = e8 f1 bd 42 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42BE20h:jmp64]                encoding(5 bytes) = e8 dc bd 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov byte ptr [rdi+18h],2      ; MOV(Mov_rm8_imm8) [mem(8u,RDI:br,DS:sr),2h:imm8]     encoding(4 bytes) = c6 47 18 02
004bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0052h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AF60h:jmp64]                encoding(5 bytes) = e8 09 af 42 5f
0057h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AF60h:jmp64]                encoding(5 bytes) = e8 fd ae 42 5f
0063h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cnotimplyBytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0xBE,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF1,0xBD,0x42,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDC,0xBD,0x42,0x5F,0x48,0x8B,0xF8,0xC6,0x47,0x18,0x02,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x09,0xAF,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xFD,0xAE,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq> bitcombo(int n)
; location: [7FFDDB838B20h, 7FFDDB83A8F3h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0010h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
0012h cmp ecx,7                     ; CMP(Cmp_rm32_imm8) [ECX,7h:imm32]                    encoding(3 bytes) = 83 f9 07
0015h ja near ptr 1bb0h             ; JA(Ja_rel32_64) [1BB0h:jmp64]                        encoding(6 bytes) = 0f 87 95 1b 00 00
001bh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
001dh lea rdx,[7FFDDB83A8F8h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 b4 1d 00 00
0024h mov edx,[rdx+rcx*4]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 14 8a
0027h lea rax,[7FFDDB838B30h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 e2 ff ff ff
002eh add rdx,rax                   ; ADD(Add_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 03 d0
0031h jmp rdx                       ; JMP(Jmp_rm64) [RDX]                                  encoding(2 bytes) = ff e2
0033h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
003dh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0042h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 79 ba 42 5f
0047h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
004ah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
004ch mov [rsi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4e 10
004fh mov dword ptr [rsi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 14 01 00 00 00
0056h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0060h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0065h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 26 bd 42 5f
006ah mov rcx,1F96AFE6ED8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ed8h:imm64]          encoding(10 bytes) = 48 b9 d8 6e fe 6a f9 01 00 00
0074h mov r8,[rcx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 01
0077h test r8,r8                    ; TEST(Test_rm64_r64) [R8,R8]                          encoding(3 bytes) = 4d 85 c0
007ah jne short 00d0h               ; JNE(Jne_rel8_64) [D0h:jmp64]                         encoding(2 bytes) = 75 54
007ch mov rcx,7FFDDB9C5568h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5568h:imm64]         encoding(10 bytes) = 48 b9 68 55 9c db fd 7f 00 00
0086h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 05 b9 42 5f
008bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
008eh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0098h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
009bh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
009eh je near ptr 1bd3h             ; JE(Je_rel32_64) [1BD3h:jmp64]                        encoding(6 bytes) = 0f 84 2f 1b 00 00
00a4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
00a8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 23 aa 42 5f
00adh mov rdx,7FFDDB835990h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835990h:imm64]         encoding(10 bytes) = 48 ba 90 59 83 db fd 7f 00 00
00b7h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
00bbh mov rcx,1F96AFE6ED8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ed8h:imm64]          encoding(10 bytes) = 48 b9 d8 6e fe 6a f9 01 00 00
00c5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00c8h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 d3 a9 42 5f
00cdh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
00d0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00d3h mov rcx,7FFDDB9C56F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c56f0h:imm64]         encoding(10 bytes) = 48 b9 f0 56 9c db fd 7f 00 00
00ddh mov rax,7FFDDB838928h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838928h:imm64]         encoding(10 bytes) = 48 b8 28 89 83 db fd 7f 00 00
00e7h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00ebh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00ech pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00edh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00eeh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00efh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
00f1h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
00f3h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00f5h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00f7h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
00fah mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0104h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0109h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 b2 b9 42 5f
010eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0111h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0113h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0116h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
011dh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0127h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
012ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 5f bc 42 5f
0131h mov rcx,1F96AFE6EE0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ee0h:imm64]          encoding(10 bytes) = 48 b9 e0 6e fe 6a f9 01 00 00
013bh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
013eh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0141h jne short 0194h               ; JNE(Jne_rel8_64) [194h:jmp64]                        encoding(2 bytes) = 75 51
0143h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
014dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 3e b8 42 5f
0152h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0155h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
015fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0162h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0165h je near ptr 1bdch             ; JE(Je_rel32_64) [1BDCh:jmp64]                        encoding(6 bytes) = 0f 84 71 1a 00 00
016bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
016fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 5c a9 42 5f
0174h mov rdx,7FFDDB835998h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835998h:imm64]         encoding(10 bytes) = 48 ba 98 59 83 db fd 7f 00 00
017eh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0182h mov rcx,1F96AFE6EE0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ee0h:imm64]          encoding(10 bytes) = 48 b9 e0 6e fe 6a f9 01 00 00
018ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
018fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 0c a9 42 5f
0194h mov rcx,1F96AFE6EE8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ee8h:imm64]          encoding(10 bytes) = 48 b9 e8 6e fe 6a f9 01 00 00
019eh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01a1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01a4h jne short 01fah               ; JNE(Jne_rel8_64) [1FAh:jmp64]                        encoding(2 bytes) = 75 54
01a6h mov rcx,7FFDDB9C5400h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5400h:imm64]         encoding(10 bytes) = 48 b9 00 54 9c db fd 7f 00 00
01b0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 db b7 42 5f
01b5h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01b8h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
01c2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01c5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01c8h je near ptr 1be5h             ; JE(Je_rel32_64) [1BE5h:jmp64]                        encoding(6 bytes) = 0f 84 17 1a 00 00
01ceh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01d2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 f9 a8 42 5f
01d7h mov rdx,7FFDDB8359A0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359a0h:imm64]         encoding(10 bytes) = 48 ba a0 59 83 db fd 7f 00 00
01e1h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01e5h mov rcx,1F96AFE6EE8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ee8h:imm64]          encoding(10 bytes) = 48 b9 e8 6e fe 6a f9 01 00 00
01efh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
01f2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 a9 a8 42 5f
01f7h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
01fah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01fdh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0200h mov rcx,7FFDDB9C5518h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5518h:imm64]         encoding(10 bytes) = 48 b9 18 55 9c db fd 7f 00 00
020ah mov rax,7FFDDB836D70h         ; MOV(Mov_r64_imm64) [RAX,7ffddb836d70h:imm64]         encoding(10 bytes) = 48 b8 70 6d 83 db fd 7f 00 00
0214h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0218h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0219h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
021ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
021bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
021ch pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
021eh pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0220h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0222h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0224h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0227h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0231h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0236h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 85 b8 42 5f
023bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
023eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0240h mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
0243h mov dword ptr [rbx+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 43 14 01 00 00 00
024ah mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0254h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0259h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 32 bb 42 5f
025eh mov rcx,1F96AFE6EF0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ef0h:imm64]          encoding(10 bytes) = 48 b9 f0 6e fe 6a f9 01 00 00
0268h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
026bh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
026eh jne short 02c1h               ; JNE(Jne_rel8_64) [2C1h:jmp64]                        encoding(2 bytes) = 75 51
0270h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
027ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 11 b7 42 5f
027fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0282h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
028ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
028fh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0292h je near ptr 1beeh             ; JE(Je_rel32_64) [1BEEh:jmp64]                        encoding(6 bytes) = 0f 84 56 19 00 00
0298h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
029ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 2f a8 42 5f
02a1h mov rdx,7FFDDB8359A8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359a8h:imm64]         encoding(10 bytes) = 48 ba a8 59 83 db fd 7f 00 00
02abh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
02afh mov rcx,1F96AFE6EF0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ef0h:imm64]          encoding(10 bytes) = 48 b9 f0 6e fe 6a f9 01 00 00
02b9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
02bch call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 df a7 42 5f
02c1h mov rcx,1F96AFE6EF8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ef8h:imm64]          encoding(10 bytes) = 48 b9 f8 6e fe 6a f9 01 00 00
02cbh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
02ceh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
02d1h jne short 0327h               ; JNE(Jne_rel8_64) [327h:jmp64]                        encoding(2 bytes) = 75 54
02d3h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
02ddh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 ae b6 42 5f
02e2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
02e5h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
02efh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02f2h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02f5h je near ptr 1bf7h             ; JE(Je_rel32_64) [1BF7h:jmp64]                        encoding(6 bytes) = 0f 84 fc 18 00 00
02fbh lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
02ffh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 cc a7 42 5f
0304h mov rdx,7FFDDB8359B0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359b0h:imm64]         encoding(10 bytes) = 48 ba b0 59 83 db fd 7f 00 00
030eh mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0312h mov rcx,1F96AFE6EF8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ef8h:imm64]          encoding(10 bytes) = 48 b9 f8 6e fe 6a f9 01 00 00
031ch mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
031fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 7c a7 42 5f
0324h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0327h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
032ah mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
032dh mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
0337h call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE250h:jmp64]        encoding(5 bytes) = e8 14 df ff ff
033ch mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
033fh mov rcx,1F96AFE6F00h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f00h:imm64]          encoding(10 bytes) = 48 b9 00 6f fe 6a f9 01 00 00
0349h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
034ch test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
034fh jne short 03a2h               ; JNE(Jne_rel8_64) [3A2h:jmp64]                        encoding(2 bytes) = 75 51
0351h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
035bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 30 b6 42 5f
0360h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0363h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
036dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0370h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0373h je near ptr 1c00h             ; JE(Je_rel32_64) [1C00h:jmp64]                        encoding(6 bytes) = 0f 84 87 18 00 00
0379h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
037dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 4e a7 42 5f
0382h mov rdx,7FFDDB8359B8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359b8h:imm64]         encoding(10 bytes) = 48 ba b8 59 83 db fd 7f 00 00
038ch mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0390h mov rcx,1F96AFE6F00h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f00h:imm64]          encoding(10 bytes) = 48 b9 00 6f fe 6a f9 01 00 00
039ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
039dh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 fe a6 42 5f
03a2h mov rcx,1F96AFE6F08h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f08h:imm64]          encoding(10 bytes) = 48 b9 08 6f fe 6a f9 01 00 00
03ach mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
03afh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
03b2h jne short 0408h               ; JNE(Jne_rel8_64) [408h:jmp64]                        encoding(2 bytes) = 75 54
03b4h mov rcx,7FFDDB9C5298h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5298h:imm64]         encoding(10 bytes) = 48 b9 98 52 9c db fd 7f 00 00
03beh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 cd b5 42 5f
03c3h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
03c6h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
03d0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
03d3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
03d6h je near ptr 1c09h             ; JE(Je_rel32_64) [1C09h:jmp64]                        encoding(6 bytes) = 0f 84 2d 18 00 00
03dch lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
03e0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 eb a6 42 5f
03e5h mov rdx,7FFDDB8359C0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359c0h:imm64]         encoding(10 bytes) = 48 ba c0 59 83 db fd 7f 00 00
03efh mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
03f3h mov rcx,1F96AFE6F08h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f08h:imm64]          encoding(10 bytes) = 48 b9 08 6f fe 6a f9 01 00 00
03fdh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0400h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 9b a6 42 5f
0405h mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
0408h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
040bh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
040eh mov rcx,7FFDDB9C53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9c db fd 7f 00 00
0418h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
0422h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0426h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0427h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0428h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0429h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
042ah pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
042ch pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
042eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0430h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0432h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0435h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
043fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0444h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 77 b6 42 5f
0449h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
044ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
044eh mov [r14+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),ECX]        encoding(4 bytes) = 41 89 4e 10
0452h mov dword ptr [r14+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 14 01 00 00 00
045ah mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0464h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0469h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 22 b9 42 5f
046eh mov rcx,1F96AFE6F10h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f10h:imm64]          encoding(10 bytes) = 48 b9 10 6f fe 6a f9 01 00 00
0478h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
047bh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
047eh jne short 04d1h               ; JNE(Jne_rel8_64) [4D1h:jmp64]                        encoding(2 bytes) = 75 51
0480h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
048ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 01 b5 42 5f
048fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0492h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
049ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
049fh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
04a2h je near ptr 1c12h             ; JE(Je_rel32_64) [1C12h:jmp64]                        encoding(6 bytes) = 0f 84 6a 17 00 00
04a8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
04ach call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 1f a6 42 5f
04b1h mov rdx,7FFDDB8359C8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359c8h:imm64]         encoding(10 bytes) = 48 ba c8 59 83 db fd 7f 00 00
04bbh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
04bfh mov rcx,1F96AFE6F10h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f10h:imm64]          encoding(10 bytes) = 48 b9 10 6f fe 6a f9 01 00 00
04c9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
04cch call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 cf a5 42 5f
04d1h mov rcx,1F96AFE6F18h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f18h:imm64]          encoding(10 bytes) = 48 b9 18 6f fe 6a f9 01 00 00
04dbh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
04deh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
04e1h jne short 0537h               ; JNE(Jne_rel8_64) [537h:jmp64]                        encoding(2 bytes) = 75 54
04e3h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
04edh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 9e b4 42 5f
04f2h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
04f5h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
04ffh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0502h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0505h je near ptr 1c1bh             ; JE(Je_rel32_64) [1C1Bh:jmp64]                        encoding(6 bytes) = 0f 84 10 17 00 00
050bh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
050fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 bc a5 42 5f
0514h mov rdx,7FFDDB8359D0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359d0h:imm64]         encoding(10 bytes) = 48 ba d0 59 83 db fd 7f 00 00
051eh mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
0522h mov rcx,1F96AFE6F18h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f18h:imm64]          encoding(10 bytes) = 48 b9 18 6f fe 6a f9 01 00 00
052ch mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
052fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 6c a5 42 5f
0534h mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
0537h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
053ah mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
053dh mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
0547h call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE250h:jmp64]        encoding(5 bytes) = e8 04 dd ff ff
054ch mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
054fh mov rcx,1F96AFE6F20h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f20h:imm64]          encoding(10 bytes) = 48 b9 20 6f fe 6a f9 01 00 00
0559h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
055ch test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
055fh jne short 05b2h               ; JNE(Jne_rel8_64) [5B2h:jmp64]                        encoding(2 bytes) = 75 51
0561h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
056bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 20 b4 42 5f
0570h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0573h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
057dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0580h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0583h je near ptr 1c24h             ; JE(Je_rel32_64) [1C24h:jmp64]                        encoding(6 bytes) = 0f 84 9b 16 00 00
0589h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
058dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 3e a5 42 5f
0592h mov rdx,7FFDDB8359D8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359d8h:imm64]         encoding(10 bytes) = 48 ba d8 59 83 db fd 7f 00 00
059ch mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
05a0h mov rcx,1F96AFE6F20h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f20h:imm64]          encoding(10 bytes) = 48 b9 20 6f fe 6a f9 01 00 00
05aah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
05adh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 ee a4 42 5f
05b2h mov rcx,1F96AFE6F28h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f28h:imm64]          encoding(10 bytes) = 48 b9 28 6f fe 6a f9 01 00 00
05bch mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
05bfh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
05c2h jne short 061ah               ; JNE(Jne_rel8_64) [61Ah:jmp64]                        encoding(2 bytes) = 75 56
05c4h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
05ceh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 bd b3 42 5f
05d3h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
05d6h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
05e0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
05e3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
05e6h je near ptr 1c2dh             ; JE(Je_rel32_64) [1C2Dh:jmp64]                        encoding(6 bytes) = 0f 84 41 16 00 00
05ech lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
05f1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 da a4 42 5f
05f6h mov rdx,7FFDDB8359E0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359e0h:imm64]         encoding(10 bytes) = 48 ba e0 59 83 db fd 7f 00 00
0600h mov [r12+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R12:br,DS:sr),RDX]        encoding(5 bytes) = 49 89 54 24 18
0605h mov rcx,1F96AFE6F28h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f28h:imm64]          encoding(10 bytes) = 48 b9 28 6f fe 6a f9 01 00 00
060fh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
0612h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 89 a4 42 5f
0617h mov r9,r12                    ; MOV(Mov_r64_rm64) [R9,R12]                           encoding(3 bytes) = 4d 8b cc
061ah mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
061dh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0620h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
062ah call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 29 f6 ff ff
062fh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
0632h mov rcx,1F96AFE6F30h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f30h:imm64]          encoding(10 bytes) = 48 b9 30 6f fe 6a f9 01 00 00
063ch mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
063fh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0642h jne short 0695h               ; JNE(Jne_rel8_64) [695h:jmp64]                        encoding(2 bytes) = 75 51
0644h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
064eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 3d b3 42 5f
0653h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0656h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0660h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0663h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0666h je near ptr 1c36h             ; JE(Je_rel32_64) [1C36h:jmp64]                        encoding(6 bytes) = 0f 84 ca 15 00 00
066ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0670h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 5b a4 42 5f
0675h mov rdx,7FFDDB8359E8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359e8h:imm64]         encoding(10 bytes) = 48 ba e8 59 83 db fd 7f 00 00
067fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0683h mov rcx,1F96AFE6F30h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f30h:imm64]          encoding(10 bytes) = 48 b9 30 6f fe 6a f9 01 00 00
068dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0690h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 0b a4 42 5f
0695h mov rcx,1F96AFE6F38h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f38h:imm64]          encoding(10 bytes) = 48 b9 38 6f fe 6a f9 01 00 00
069fh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
06a2h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
06a5h jne short 06fbh               ; JNE(Jne_rel8_64) [6FBh:jmp64]                        encoding(2 bytes) = 75 54
06a7h mov rcx,7FFDDB9C5130h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5130h:imm64]         encoding(10 bytes) = 48 b9 30 51 9c db fd 7f 00 00
06b1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 da b2 42 5f
06b6h mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
06b9h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
06c3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06c6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
06c9h je near ptr 1c3fh             ; JE(Je_rel32_64) [1C3Fh:jmp64]                        encoding(6 bytes) = 0f 84 70 15 00 00
06cfh lea rcx,[r13+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 08
06d3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 f8 a3 42 5f
06d8h mov rdx,7FFDDB8359F0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359f0h:imm64]         encoding(10 bytes) = 48 ba f0 59 83 db fd 7f 00 00
06e2h mov [r13+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R13:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 55 18
06e6h mov rcx,1F96AFE6F38h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f38h:imm64]          encoding(10 bytes) = 48 b9 38 6f fe 6a f9 01 00 00
06f0h mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
06f3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 a8 a3 42 5f
06f8h mov r9,r13                    ; MOV(Mov_r64_rm64) [R9,R13]                           encoding(3 bytes) = 4d 8b cd
06fbh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
06feh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0701h mov rcx,7FFDDB9C5248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5248h:imm64]         encoding(10 bytes) = 48 b9 48 52 9c db fd 7f 00 00
070bh mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
0715h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0719h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
071ah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
071bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
071ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
071dh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
071fh pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0721h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0723h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0725h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0728h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0732h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0737h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 84 b3 42 5f
073ch mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
073fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0741h mov [r13+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,R13:br,DS:sr),ECX]        encoding(4 bytes) = 41 89 4d 10
0745h mov dword ptr [r13+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R13:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 45 14 01 00 00 00
074dh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0757h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
075ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 2f b6 42 5f
0761h mov rcx,1F96AFE6F40h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f40h:imm64]          encoding(10 bytes) = 48 b9 40 6f fe 6a f9 01 00 00
076bh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
076eh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0771h jne short 07c4h               ; JNE(Jne_rel8_64) [7C4h:jmp64]                        encoding(2 bytes) = 75 51
0773h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
077dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 0e b2 42 5f
0782h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0785h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
078fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0792h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0795h je near ptr 1c48h             ; JE(Je_rel32_64) [1C48h:jmp64]                        encoding(6 bytes) = 0f 84 ad 14 00 00
079bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
079fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 2c a3 42 5f
07a4h mov rdx,7FFDDB8359F8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb8359f8h:imm64]         encoding(10 bytes) = 48 ba f8 59 83 db fd 7f 00 00
07aeh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
07b2h mov rcx,1F96AFE6F40h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f40h:imm64]          encoding(10 bytes) = 48 b9 40 6f fe 6a f9 01 00 00
07bch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
07bfh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 dc a2 42 5f
07c4h mov rcx,1F96AFE6F48h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f48h:imm64]          encoding(10 bytes) = 48 b9 48 6f fe 6a f9 01 00 00
07ceh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
07d1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
07d4h jne short 082ah               ; JNE(Jne_rel8_64) [82Ah:jmp64]                        encoding(2 bytes) = 75 54
07d6h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
07e0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 ab b1 42 5f
07e5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
07e8h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
07f2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
07f5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
07f8h je near ptr 1c51h             ; JE(Je_rel32_64) [1C51h:jmp64]                        encoding(6 bytes) = 0f 84 53 14 00 00
07feh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0802h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 c9 a2 42 5f
0807h mov rdx,7FFDDB835A00h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a00h:imm64]         encoding(10 bytes) = 48 ba 00 5a 83 db fd 7f 00 00
0811h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0815h mov rcx,1F96AFE6F48h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f48h:imm64]          encoding(10 bytes) = 48 b9 48 6f fe 6a f9 01 00 00
081fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0822h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 79 a2 42 5f
0827h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
082ah mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
082dh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0830h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
083ah call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE250h:jmp64]        encoding(5 bytes) = e8 11 da ff ff
083fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0842h mov rcx,1F96AFE6F50h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f50h:imm64]          encoding(10 bytes) = 48 b9 50 6f fe 6a f9 01 00 00
084ch mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
084fh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0852h jne short 08a5h               ; JNE(Jne_rel8_64) [8A5h:jmp64]                        encoding(2 bytes) = 75 51
0854h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
085eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 2d b1 42 5f
0863h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0866h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0870h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0873h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0876h je near ptr 1c5ah             ; JE(Je_rel32_64) [1C5Ah:jmp64]                        encoding(6 bytes) = 0f 84 de 13 00 00
087ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0880h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 4b a2 42 5f
0885h mov rdx,7FFDDB835A08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a08h:imm64]         encoding(10 bytes) = 48 ba 08 5a 83 db fd 7f 00 00
088fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0893h mov rcx,1F96AFE6F50h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f50h:imm64]          encoding(10 bytes) = 48 b9 50 6f fe 6a f9 01 00 00
089dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
08a0h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 fb a1 42 5f
08a5h mov rcx,1F96AFE6F58h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f58h:imm64]          encoding(10 bytes) = 48 b9 58 6f fe 6a f9 01 00 00
08afh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
08b2h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
08b5h jne short 090bh               ; JNE(Jne_rel8_64) [90Bh:jmp64]                        encoding(2 bytes) = 75 54
08b7h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
08c1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 ca b0 42 5f
08c6h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
08c9h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
08d3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
08d6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
08d9h je near ptr 1c63h             ; JE(Je_rel32_64) [1C63h:jmp64]                        encoding(6 bytes) = 0f 84 84 13 00 00
08dfh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
08e3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 e8 a1 42 5f
08e8h mov rdx,7FFDDB835A10h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a10h:imm64]         encoding(10 bytes) = 48 ba 10 5a 83 db fd 7f 00 00
08f2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
08f6h mov rcx,1F96AFE6F58h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f58h:imm64]          encoding(10 bytes) = 48 b9 58 6f fe 6a f9 01 00 00
0900h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0903h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 98 a1 42 5f
0908h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
090bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
090eh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0911h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
091bh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 38 f3 ff ff
0920h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0923h mov rcx,1F96AFE6F60h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f60h:imm64]          encoding(10 bytes) = 48 b9 60 6f fe 6a f9 01 00 00
092dh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0930h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0933h jne short 0986h               ; JNE(Jne_rel8_64) [986h:jmp64]                        encoding(2 bytes) = 75 51
0935h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
093fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 4c b0 42 5f
0944h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0947h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0951h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0954h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0957h je near ptr 1c6ch             ; JE(Je_rel32_64) [1C6Ch:jmp64]                        encoding(6 bytes) = 0f 84 0f 13 00 00
095dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0961h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 6a a1 42 5f
0966h mov rdx,7FFDDB835A18h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a18h:imm64]         encoding(10 bytes) = 48 ba 18 5a 83 db fd 7f 00 00
0970h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0974h mov rcx,1F96AFE6F60h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f60h:imm64]          encoding(10 bytes) = 48 b9 60 6f fe 6a f9 01 00 00
097eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0981h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 1a a1 42 5f
0986h mov rcx,1F96AFE6F68h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f68h:imm64]          encoding(10 bytes) = 48 b9 68 6f fe 6a f9 01 00 00
0990h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0993h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0996h jne short 09ech               ; JNE(Jne_rel8_64) [9ECh:jmp64]                        encoding(2 bytes) = 75 54
0998h mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
09a2h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 e9 af 42 5f
09a7h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
09aah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
09b4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
09b7h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
09bah je near ptr 1c75h             ; JE(Je_rel32_64) [1C75h:jmp64]                        encoding(6 bytes) = 0f 84 b5 12 00 00
09c0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
09c4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 07 a1 42 5f
09c9h mov rdx,7FFDDB835A20h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a20h:imm64]         encoding(10 bytes) = 48 ba 20 5a 83 db fd 7f 00 00
09d3h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
09d7h mov rcx,1F96AFE6F68h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f68h:imm64]          encoding(10 bytes) = 48 b9 68 6f fe 6a f9 01 00 00
09e1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
09e4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 b7 a0 42 5f
09e9h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
09ech mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
09efh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
09f2h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
09fch call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 57 f2 ff ff
0a01h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a04h mov rcx,1F96AFE6F70h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f70h:imm64]          encoding(10 bytes) = 48 b9 70 6f fe 6a f9 01 00 00
0a0eh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0a11h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0a14h jne short 0a67h               ; JNE(Jne_rel8_64) [A67h:jmp64]                        encoding(2 bytes) = 75 51
0a16h mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
0a20h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 6b af 42 5f
0a25h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0a28h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0a32h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a35h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0a38h je near ptr 1c7eh             ; JE(Je_rel32_64) [1C7Eh:jmp64]                        encoding(6 bytes) = 0f 84 40 12 00 00
0a3eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0a42h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 89 a0 42 5f
0a47h mov rdx,7FFDDB835A28h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a28h:imm64]         encoding(10 bytes) = 48 ba 28 5a 83 db fd 7f 00 00
0a51h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0a55h mov rcx,1F96AFE6F70h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f70h:imm64]          encoding(10 bytes) = 48 b9 70 6f fe 6a f9 01 00 00
0a5fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0a62h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 39 a0 42 5f
0a67h mov rcx,1F96AFE6F78h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f78h:imm64]          encoding(10 bytes) = 48 b9 78 6f fe 6a f9 01 00 00
0a71h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0a74h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0a77h jne short 0acdh               ; JNE(Jne_rel8_64) [ACDh:jmp64]                        encoding(2 bytes) = 75 54
0a79h mov rcx,7FFDDB9C4FC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4fc8h:imm64]         encoding(10 bytes) = 48 b9 c8 4f 9c db fd 7f 00 00
0a83h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 08 af 42 5f
0a88h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0a8bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0a95h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a98h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0a9bh je near ptr 1c87h             ; JE(Je_rel32_64) [1C87h:jmp64]                        encoding(6 bytes) = 0f 84 e6 11 00 00
0aa1h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0aa5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 26 a0 42 5f
0aaah mov rdx,7FFDDB835A30h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a30h:imm64]         encoding(10 bytes) = 48 ba 30 5a 83 db fd 7f 00 00
0ab4h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0ab8h mov rcx,1F96AFE6F78h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f78h:imm64]          encoding(10 bytes) = 48 b9 78 6f fe 6a f9 01 00 00
0ac2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0ac5h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 d6 9f 42 5f
0acah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0acdh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ad0h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0ad3h mov rcx,7FFDDB9C50E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c50e0h:imm64]         encoding(10 bytes) = 48 b9 e0 50 9c db fd 7f 00 00
0addh mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
0ae7h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0aebh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0aech pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0aedh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0aeeh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0aefh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0af1h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0af3h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0af5h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0af7h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0afah mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0b04h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0b09h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 b2 af 42 5f
0b0eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0b11h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0b13h mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
0b16h mov dword ptr [rbx+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 43 14 01 00 00 00
0b1dh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0b27h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0b2ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 5f b2 42 5f
0b31h mov rcx,1F96AFE6F80h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f80h:imm64]          encoding(10 bytes) = 48 b9 80 6f fe 6a f9 01 00 00
0b3bh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0b3eh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0b41h jne short 0b94h               ; JNE(Jne_rel8_64) [B94h:jmp64]                        encoding(2 bytes) = 75 51
0b43h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
0b4dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 3e ae 42 5f
0b52h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0b55h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0b5fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0b62h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0b65h je near ptr 1c90h             ; JE(Je_rel32_64) [1C90h:jmp64]                        encoding(6 bytes) = 0f 84 25 11 00 00
0b6bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0b6fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 5c 9f 42 5f
0b74h mov rdx,7FFDDB835A38h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a38h:imm64]         encoding(10 bytes) = 48 ba 38 5a 83 db fd 7f 00 00
0b7eh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0b82h mov rcx,1F96AFE6F80h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f80h:imm64]          encoding(10 bytes) = 48 b9 80 6f fe 6a f9 01 00 00
0b8ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0b8fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 0c 9f 42 5f
0b94h mov rcx,1F96AFE6F88h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f88h:imm64]          encoding(10 bytes) = 48 b9 88 6f fe 6a f9 01 00 00
0b9eh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0ba1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0ba4h jne short 0bfah               ; JNE(Jne_rel8_64) [BFAh:jmp64]                        encoding(2 bytes) = 75 54
0ba6h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
0bb0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 db ad 42 5f
0bb5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0bb8h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0bc2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0bc5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0bc8h je near ptr 1c99h             ; JE(Je_rel32_64) [1C99h:jmp64]                        encoding(6 bytes) = 0f 84 cb 10 00 00
0bceh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0bd2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 f9 9e 42 5f
0bd7h mov rdx,7FFDDB835A40h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a40h:imm64]         encoding(10 bytes) = 48 ba 40 5a 83 db fd 7f 00 00
0be1h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0be5h mov rcx,1F96AFE6F88h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f88h:imm64]          encoding(10 bytes) = 48 b9 88 6f fe 6a f9 01 00 00
0befh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0bf2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 a9 9e 42 5f
0bf7h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
0bfah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0bfdh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0c00h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
0c0ah call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE250h:jmp64]        encoding(5 bytes) = e8 41 d6 ff ff
0c0fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c12h mov rcx,1F96AFE6F90h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f90h:imm64]          encoding(10 bytes) = 48 b9 90 6f fe 6a f9 01 00 00
0c1ch mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0c1fh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0c22h jne short 0c75h               ; JNE(Jne_rel8_64) [C75h:jmp64]                        encoding(2 bytes) = 75 51
0c24h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
0c2eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 5d ad 42 5f
0c33h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0c36h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0c40h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0c43h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0c46h je near ptr 1ca2h             ; JE(Je_rel32_64) [1CA2h:jmp64]                        encoding(6 bytes) = 0f 84 56 10 00 00
0c4ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0c50h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 7b 9e 42 5f
0c55h mov rdx,7FFDDB835A48h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a48h:imm64]         encoding(10 bytes) = 48 ba 48 5a 83 db fd 7f 00 00
0c5fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0c63h mov rcx,1F96AFE6F90h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f90h:imm64]          encoding(10 bytes) = 48 b9 90 6f fe 6a f9 01 00 00
0c6dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0c70h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 2b 9e 42 5f
0c75h mov rcx,1F96AFE6F98h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f98h:imm64]          encoding(10 bytes) = 48 b9 98 6f fe 6a f9 01 00 00
0c7fh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0c82h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0c85h jne short 0cdbh               ; JNE(Jne_rel8_64) [CDBh:jmp64]                        encoding(2 bytes) = 75 54
0c87h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
0c91h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 fa ac 42 5f
0c96h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0c99h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0ca3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0ca6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0ca9h je near ptr 1cabh             ; JE(Je_rel32_64) [1CABh:jmp64]                        encoding(6 bytes) = 0f 84 fc 0f 00 00
0cafh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0cb3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 18 9e 42 5f
0cb8h mov rdx,7FFDDB835A50h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a50h:imm64]         encoding(10 bytes) = 48 ba 50 5a 83 db fd 7f 00 00
0cc2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0cc6h mov rcx,1F96AFE6F98h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6f98h:imm64]          encoding(10 bytes) = 48 b9 98 6f fe 6a f9 01 00 00
0cd0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0cd3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 c8 9d 42 5f
0cd8h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0cdbh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0cdeh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0ce1h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
0cebh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 68 ef ff ff
0cf0h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0cf3h mov rcx,1F96AFE6FA0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fa0h:imm64]          encoding(10 bytes) = 48 b9 a0 6f fe 6a f9 01 00 00
0cfdh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0d00h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0d03h jne short 0d56h               ; JNE(Jne_rel8_64) [D56h:jmp64]                        encoding(2 bytes) = 75 51
0d05h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
0d0fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 7c ac 42 5f
0d14h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0d17h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0d21h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0d24h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0d27h je near ptr 1cb4h             ; JE(Je_rel32_64) [1CB4h:jmp64]                        encoding(6 bytes) = 0f 84 87 0f 00 00
0d2dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0d31h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 9a 9d 42 5f
0d36h mov rdx,7FFDDB835A58h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a58h:imm64]         encoding(10 bytes) = 48 ba 58 5a 83 db fd 7f 00 00
0d40h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0d44h mov rcx,1F96AFE6FA0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fa0h:imm64]          encoding(10 bytes) = 48 b9 a0 6f fe 6a f9 01 00 00
0d4eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0d51h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 4a 9d 42 5f
0d56h mov rcx,1F96AFE6FA8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fa8h:imm64]          encoding(10 bytes) = 48 b9 a8 6f fe 6a f9 01 00 00
0d60h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0d63h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0d66h jne short 0dbch               ; JNE(Jne_rel8_64) [DBCh:jmp64]                        encoding(2 bytes) = 75 54
0d68h mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
0d72h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 19 ac 42 5f
0d77h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d7ah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0d84h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0d87h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0d8ah je near ptr 1cbdh             ; JE(Je_rel32_64) [1CBDh:jmp64]                        encoding(6 bytes) = 0f 84 2d 0f 00 00
0d90h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d94h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 37 9d 42 5f
0d99h mov rdx,7FFDDB835A60h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a60h:imm64]         encoding(10 bytes) = 48 ba 60 5a 83 db fd 7f 00 00
0da3h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0da7h mov rcx,1F96AFE6FA8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fa8h:imm64]          encoding(10 bytes) = 48 b9 a8 6f fe 6a f9 01 00 00
0db1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0db4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 e7 9c 42 5f
0db9h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
0dbch mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0dbfh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0dc2h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
0dcch call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 87 ee ff ff
0dd1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0dd4h mov rcx,1F96AFE6FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 6f fe 6a f9 01 00 00
0ddeh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0de1h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0de4h jne short 0e37h               ; JNE(Jne_rel8_64) [E37h:jmp64]                        encoding(2 bytes) = 75 51
0de6h mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
0df0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 9b ab 42 5f
0df5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0df8h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0e02h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0e05h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0e08h je near ptr 1cc6h             ; JE(Je_rel32_64) [1CC6h:jmp64]                        encoding(6 bytes) = 0f 84 b8 0e 00 00
0e0eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0e12h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 b9 9c 42 5f
0e17h mov rdx,7FFDDB835A68h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a68h:imm64]         encoding(10 bytes) = 48 ba 68 5a 83 db fd 7f 00 00
0e21h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0e25h mov rcx,1F96AFE6FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 6f fe 6a f9 01 00 00
0e2fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0e32h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 69 9c 42 5f
0e37h mov rcx,1F96AFE6FB8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fb8h:imm64]          encoding(10 bytes) = 48 b9 b8 6f fe 6a f9 01 00 00
0e41h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0e44h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0e47h jne short 0e9dh               ; JNE(Jne_rel8_64) [E9Dh:jmp64]                        encoding(2 bytes) = 75 54
0e49h mov rcx,7FFDDB9C4068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4068h:imm64]         encoding(10 bytes) = 48 b9 68 40 9c db fd 7f 00 00
0e53h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 38 ab 42 5f
0e58h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0e5bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0e65h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0e68h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0e6bh je near ptr 1ccfh             ; JE(Je_rel32_64) [1CCFh:jmp64]                        encoding(6 bytes) = 0f 84 5e 0e 00 00
0e71h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0e75h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 56 9c 42 5f
0e7ah mov rdx,7FFDDB835A70h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a70h:imm64]         encoding(10 bytes) = 48 ba 70 5a 83 db fd 7f 00 00
0e84h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0e88h mov rcx,1F96AFE6FB8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fb8h:imm64]          encoding(10 bytes) = 48 b9 b8 6f fe 6a f9 01 00 00
0e92h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0e95h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 06 9c 42 5f
0e9ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0e9dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ea0h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0ea3h mov rcx,7FFDDB9C4180h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4180h:imm64]         encoding(10 bytes) = 48 b9 80 41 9c db fd 7f 00 00
0eadh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 a6 ed ff ff
0eb2h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0eb5h mov rcx,1F96AFE6FC0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fc0h:imm64]          encoding(10 bytes) = 48 b9 c0 6f fe 6a f9 01 00 00
0ebfh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0ec2h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0ec5h jne short 0f18h               ; JNE(Jne_rel8_64) [F18h:jmp64]                        encoding(2 bytes) = 75 51
0ec7h mov rcx,7FFDDB9C41D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c41d0h:imm64]         encoding(10 bytes) = 48 b9 d0 41 9c db fd 7f 00 00
0ed1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 ba aa 42 5f
0ed6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0ed9h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0ee3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0ee6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0ee9h je near ptr 1cd8h             ; JE(Je_rel32_64) [1CD8h:jmp64]                        encoding(6 bytes) = 0f 84 e9 0d 00 00
0eefh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0ef3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 d8 9b 42 5f
0ef8h mov rdx,7FFDDB835A78h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a78h:imm64]         encoding(10 bytes) = 48 ba 78 5a 83 db fd 7f 00 00
0f02h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0f06h mov rcx,1F96AFE6FC0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fc0h:imm64]          encoding(10 bytes) = 48 b9 c0 6f fe 6a f9 01 00 00
0f10h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0f13h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 88 9b 42 5f
0f18h mov rcx,1F96AFE6FC8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fc8h:imm64]          encoding(10 bytes) = 48 b9 c8 6f fe 6a f9 01 00 00
0f22h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0f25h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0f28h jne short 0f7eh               ; JNE(Jne_rel8_64) [F7Eh:jmp64]                        encoding(2 bytes) = 75 54
0f2ah mov rcx,7FFDDB9C4E60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4e60h:imm64]         encoding(10 bytes) = 48 b9 60 4e 9c db fd 7f 00 00
0f34h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 57 aa 42 5f
0f39h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f3ch mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0f46h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0f49h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0f4ch je near ptr 1ce1h             ; JE(Je_rel32_64) [1CE1h:jmp64]                        encoding(6 bytes) = 0f 84 8f 0d 00 00
0f52h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f56h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 75 9b 42 5f
0f5bh mov rdx,7FFDDB835A80h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a80h:imm64]         encoding(10 bytes) = 48 ba 80 5a 83 db fd 7f 00 00
0f65h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0f69h mov rcx,1F96AFE6FC8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fc8h:imm64]          encoding(10 bytes) = 48 b9 c8 6f fe 6a f9 01 00 00
0f73h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f76h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 25 9b 42 5f
0f7bh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
0f7eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0f81h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0f84h mov rcx,7FFDDB9C4F78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4f78h:imm64]         encoding(10 bytes) = 48 b9 78 4f 9c db fd 7f 00 00
0f8eh mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
0f98h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0f9ch pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0f9dh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0f9eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0f9fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0fa0h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0fa2h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0fa4h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0fa6h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0fa8h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0fabh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0fb5h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0fbah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 01 ab 42 5f
0fbfh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0fc2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0fc4h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0fc7h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
0fceh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0fd8h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0fddh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 ae ad 42 5f
0fe2h mov rcx,1F96AFE6FD0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fd0h:imm64]          encoding(10 bytes) = 48 b9 d0 6f fe 6a f9 01 00 00
0fech mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0fefh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0ff2h jne short 1045h               ; JNE(Jne_rel8_64) [1045h:jmp64]                       encoding(2 bytes) = 75 51
0ff4h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
0ffeh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 8d a9 42 5f
1003h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1006h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1010h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1013h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1016h je near ptr 1ceah             ; JE(Je_rel32_64) [1CEAh:jmp64]                        encoding(6 bytes) = 0f 84 ce 0c 00 00
101ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1020h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 ab 9a 42 5f
1025h mov rdx,7FFDDB835A88h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a88h:imm64]         encoding(10 bytes) = 48 ba 88 5a 83 db fd 7f 00 00
102fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1033h mov rcx,1F96AFE6FD0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fd0h:imm64]          encoding(10 bytes) = 48 b9 d0 6f fe 6a f9 01 00 00
103dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1040h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 5b 9a 42 5f
1045h mov rcx,1F96AFE6FD8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fd8h:imm64]          encoding(10 bytes) = 48 b9 d8 6f fe 6a f9 01 00 00
104fh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1052h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1055h jne short 10abh               ; JNE(Jne_rel8_64) [10ABh:jmp64]                       encoding(2 bytes) = 75 54
1057h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
1061h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 2a a9 42 5f
1066h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1069h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1073h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1076h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1079h je near ptr 1cf3h             ; JE(Je_rel32_64) [1CF3h:jmp64]                        encoding(6 bytes) = 0f 84 74 0c 00 00
107fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1083h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 48 9a 42 5f
1088h mov rdx,7FFDDB835A90h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a90h:imm64]         encoding(10 bytes) = 48 ba 90 5a 83 db fd 7f 00 00
1092h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1096h mov rcx,1F96AFE6FD8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fd8h:imm64]          encoding(10 bytes) = 48 b9 d8 6f fe 6a f9 01 00 00
10a0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
10a3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 f8 99 42 5f
10a8h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
10abh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
10aeh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
10b1h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
10bbh call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE250h:jmp64]        encoding(5 bytes) = e8 90 d1 ff ff
10c0h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
10c3h mov rcx,1F96AFE6FE0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fe0h:imm64]          encoding(10 bytes) = 48 b9 e0 6f fe 6a f9 01 00 00
10cdh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
10d0h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
10d3h jne short 1126h               ; JNE(Jne_rel8_64) [1126h:jmp64]                       encoding(2 bytes) = 75 51
10d5h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
10dfh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 ac a8 42 5f
10e4h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
10e7h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
10f1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
10f4h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
10f7h je near ptr 1cfch             ; JE(Je_rel32_64) [1CFCh:jmp64]                        encoding(6 bytes) = 0f 84 ff 0b 00 00
10fdh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1101h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 ca 99 42 5f
1106h mov rdx,7FFDDB835A98h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835a98h:imm64]         encoding(10 bytes) = 48 ba 98 5a 83 db fd 7f 00 00
1110h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1114h mov rcx,1F96AFE6FE0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fe0h:imm64]          encoding(10 bytes) = 48 b9 e0 6f fe 6a f9 01 00 00
111eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1121h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 7a 99 42 5f
1126h mov rcx,1F96AFE6FE8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fe8h:imm64]          encoding(10 bytes) = 48 b9 e8 6f fe 6a f9 01 00 00
1130h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1133h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1136h jne short 118ch               ; JNE(Jne_rel8_64) [118Ch:jmp64]                       encoding(2 bytes) = 75 54
1138h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
1142h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 49 a8 42 5f
1147h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
114ah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1154h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1157h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
115ah je near ptr 1d05h             ; JE(Je_rel32_64) [1D05h:jmp64]                        encoding(6 bytes) = 0f 84 a5 0b 00 00
1160h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1164h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 67 99 42 5f
1169h mov rdx,7FFDDB835AA0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835aa0h:imm64]         encoding(10 bytes) = 48 ba a0 5a 83 db fd 7f 00 00
1173h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1177h mov rcx,1F96AFE6FE8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6fe8h:imm64]          encoding(10 bytes) = 48 b9 e8 6f fe 6a f9 01 00 00
1181h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1184h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 17 99 42 5f
1189h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
118ch mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
118fh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1192h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
119ch call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 b7 ea ff ff
11a1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
11a4h mov rcx,1F96AFE6FF0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ff0h:imm64]          encoding(10 bytes) = 48 b9 f0 6f fe 6a f9 01 00 00
11aeh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
11b1h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
11b4h jne short 1207h               ; JNE(Jne_rel8_64) [1207h:jmp64]                       encoding(2 bytes) = 75 51
11b6h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
11c0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 cb a7 42 5f
11c5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
11c8h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
11d2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
11d5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
11d8h je near ptr 1d0eh             ; JE(Je_rel32_64) [1D0Eh:jmp64]                        encoding(6 bytes) = 0f 84 30 0b 00 00
11deh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
11e2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 e9 98 42 5f
11e7h mov rdx,7FFDDB835AA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835aa8h:imm64]         encoding(10 bytes) = 48 ba a8 5a 83 db fd 7f 00 00
11f1h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
11f5h mov rcx,1F96AFE6FF0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ff0h:imm64]          encoding(10 bytes) = 48 b9 f0 6f fe 6a f9 01 00 00
11ffh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1202h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 99 98 42 5f
1207h mov rcx,1F96AFE6FF8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ff8h:imm64]          encoding(10 bytes) = 48 b9 f8 6f fe 6a f9 01 00 00
1211h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1214h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1217h jne short 126dh               ; JNE(Jne_rel8_64) [126Dh:jmp64]                       encoding(2 bytes) = 75 54
1219h mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
1223h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 68 a7 42 5f
1228h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
122bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1235h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1238h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
123bh je near ptr 1d17h             ; JE(Je_rel32_64) [1D17h:jmp64]                        encoding(6 bytes) = 0f 84 d6 0a 00 00
1241h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1245h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 86 98 42 5f
124ah mov rdx,7FFDDB835AB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ab0h:imm64]         encoding(10 bytes) = 48 ba b0 5a 83 db fd 7f 00 00
1254h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1258h mov rcx,1F96AFE6FF8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ff8h:imm64]          encoding(10 bytes) = 48 b9 f8 6f fe 6a f9 01 00 00
1262h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1265h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 36 98 42 5f
126ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
126dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1270h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1273h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
127dh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 d6 e9 ff ff
1282h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1285h mov rcx,1F96AFE7000h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7000h:imm64]          encoding(10 bytes) = 48 b9 00 70 fe 6a f9 01 00 00
128fh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1292h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1295h jne short 12e8h               ; JNE(Jne_rel8_64) [12E8h:jmp64]                       encoding(2 bytes) = 75 51
1297h mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
12a1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 ea a6 42 5f
12a6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
12a9h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
12b3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
12b6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
12b9h je near ptr 1d20h             ; JE(Je_rel32_64) [1D20h:jmp64]                        encoding(6 bytes) = 0f 84 61 0a 00 00
12bfh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
12c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 08 98 42 5f
12c8h mov rdx,7FFDDB835AB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ab8h:imm64]         encoding(10 bytes) = 48 ba b8 5a 83 db fd 7f 00 00
12d2h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
12d6h mov rcx,1F96AFE7000h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7000h:imm64]          encoding(10 bytes) = 48 b9 00 70 fe 6a f9 01 00 00
12e0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
12e3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 b8 97 42 5f
12e8h mov rcx,1F96AFE7008h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7008h:imm64]          encoding(10 bytes) = 48 b9 08 70 fe 6a f9 01 00 00
12f2h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
12f5h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
12f8h jne short 134eh               ; JNE(Jne_rel8_64) [134Eh:jmp64]                       encoding(2 bytes) = 75 54
12fah mov rcx,7FFDDB9C4068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4068h:imm64]         encoding(10 bytes) = 48 b9 68 40 9c db fd 7f 00 00
1304h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 87 a6 42 5f
1309h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
130ch mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1316h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1319h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
131ch je near ptr 1d29h             ; JE(Je_rel32_64) [1D29h:jmp64]                        encoding(6 bytes) = 0f 84 07 0a 00 00
1322h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1326h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 a5 97 42 5f
132bh mov rdx,7FFDDB835AC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ac0h:imm64]         encoding(10 bytes) = 48 ba c0 5a 83 db fd 7f 00 00
1335h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1339h mov rcx,1F96AFE7008h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7008h:imm64]          encoding(10 bytes) = 48 b9 08 70 fe 6a f9 01 00 00
1343h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1346h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 55 97 42 5f
134bh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
134eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1351h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1354h mov rcx,7FFDDB9C4180h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4180h:imm64]         encoding(10 bytes) = 48 b9 80 41 9c db fd 7f 00 00
135eh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 f5 e8 ff ff
1363h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1366h mov rcx,1F96AFE7010h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7010h:imm64]          encoding(10 bytes) = 48 b9 10 70 fe 6a f9 01 00 00
1370h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1373h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1376h jne short 13c9h               ; JNE(Jne_rel8_64) [13C9h:jmp64]                       encoding(2 bytes) = 75 51
1378h mov rcx,7FFDDB9C41D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c41d0h:imm64]         encoding(10 bytes) = 48 b9 d0 41 9c db fd 7f 00 00
1382h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 09 a6 42 5f
1387h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
138ah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1394h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1397h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
139ah je near ptr 1d32h             ; JE(Je_rel32_64) [1D32h:jmp64]                        encoding(6 bytes) = 0f 84 92 09 00 00
13a0h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
13a4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 27 97 42 5f
13a9h mov rdx,7FFDDB835AC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ac8h:imm64]         encoding(10 bytes) = 48 ba c8 5a 83 db fd 7f 00 00
13b3h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
13b7h mov rcx,1F96AFE7010h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7010h:imm64]          encoding(10 bytes) = 48 b9 10 70 fe 6a f9 01 00 00
13c1h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
13c4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 d7 96 42 5f
13c9h mov rcx,1F96AFE7018h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7018h:imm64]          encoding(10 bytes) = 48 b9 18 70 fe 6a f9 01 00 00
13d3h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
13d6h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
13d9h jne short 142fh               ; JNE(Jne_rel8_64) [142Fh:jmp64]                       encoding(2 bytes) = 75 54
13dbh mov rcx,7FFDDB9C44D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c44d8h:imm64]         encoding(10 bytes) = 48 b9 d8 44 9c db fd 7f 00 00
13e5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 a6 a5 42 5f
13eah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
13edh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
13f7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
13fah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
13fdh je near ptr 1d3bh             ; JE(Je_rel32_64) [1D3Bh:jmp64]                        encoding(6 bytes) = 0f 84 38 09 00 00
1403h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1407h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 c4 96 42 5f
140ch mov rdx,7FFDDB835AD0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ad0h:imm64]         encoding(10 bytes) = 48 ba d0 5a 83 db fd 7f 00 00
1416h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
141ah mov rcx,1F96AFE7018h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7018h:imm64]          encoding(10 bytes) = 48 b9 18 70 fe 6a f9 01 00 00
1424h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1427h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 74 96 42 5f
142ch mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
142fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1432h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1435h mov rcx,7FFDDB9C45F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c45f0h:imm64]         encoding(10 bytes) = 48 b9 f0 45 9c db fd 7f 00 00
143fh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 14 e8 ff ff
1444h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1447h mov rcx,1F96AFE7020h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7020h:imm64]          encoding(10 bytes) = 48 b9 20 70 fe 6a f9 01 00 00
1451h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1454h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1457h jne short 14aah               ; JNE(Jne_rel8_64) [14AAh:jmp64]                       encoding(2 bytes) = 75 51
1459h mov rcx,7FFDDB9C4640h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4640h:imm64]         encoding(10 bytes) = 48 b9 40 46 9c db fd 7f 00 00
1463h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 28 a5 42 5f
1468h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
146bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1475h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1478h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
147bh je near ptr 1d44h             ; JE(Je_rel32_64) [1D44h:jmp64]                        encoding(6 bytes) = 0f 84 c3 08 00 00
1481h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1485h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 46 96 42 5f
148ah mov rdx,7FFDDB835AD8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ad8h:imm64]         encoding(10 bytes) = 48 ba d8 5a 83 db fd 7f 00 00
1494h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1498h mov rcx,1F96AFE7020h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7020h:imm64]          encoding(10 bytes) = 48 b9 20 70 fe 6a f9 01 00 00
14a2h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
14a5h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 f6 95 42 5f
14aah mov rcx,1F96AFE7028h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7028h:imm64]          encoding(10 bytes) = 48 b9 28 70 fe 6a f9 01 00 00
14b4h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
14b7h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
14bah jne short 1510h               ; JNE(Jne_rel8_64) [1510h:jmp64]                       encoding(2 bytes) = 75 54
14bch mov rcx,7FFDDB9C4CF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4cf8h:imm64]         encoding(10 bytes) = 48 b9 f8 4c 9c db fd 7f 00 00
14c6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 c5 a4 42 5f
14cbh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
14ceh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
14d8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
14dbh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
14deh je near ptr 1d4dh             ; JE(Je_rel32_64) [1D4Dh:jmp64]                        encoding(6 bytes) = 0f 84 69 08 00 00
14e4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
14e8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 e3 95 42 5f
14edh mov rdx,7FFDDB835AE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ae0h:imm64]         encoding(10 bytes) = 48 ba e0 5a 83 db fd 7f 00 00
14f7h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
14fbh mov rcx,1F96AFE7028h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7028h:imm64]          encoding(10 bytes) = 48 b9 28 70 fe 6a f9 01 00 00
1505h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1508h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 93 95 42 5f
150dh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
1510h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1513h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1516h mov rcx,7FFDDB9C4E10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4e10h:imm64]         encoding(10 bytes) = 48 b9 10 4e 9c db fd 7f 00 00
1520h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
152ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
152eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
152fh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1530h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1531h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1532h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1534h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1536h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1538h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
153ah jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
153dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
1547h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
154ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F42BAC0h:jmp64]                encoding(5 bytes) = e8 6f a5 42 5f
1551h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1554h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1556h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
1559h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
1560h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
156ah mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
156fh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F42BD90h:jmp64]                encoding(5 bytes) = e8 1c a8 42 5f
1574h mov rcx,1F96AFE7030h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7030h:imm64]          encoding(10 bytes) = 48 b9 30 70 fe 6a f9 01 00 00
157eh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1581h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1584h jne short 15d7h               ; JNE(Jne_rel8_64) [15D7h:jmp64]                       encoding(2 bytes) = 75 51
1586h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
1590h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 fb a3 42 5f
1595h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1598h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
15a2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
15a5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
15a8h je near ptr 1d56h             ; JE(Je_rel32_64) [1D56h:jmp64]                        encoding(6 bytes) = 0f 84 a8 07 00 00
15aeh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
15b2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 19 95 42 5f
15b7h mov rdx,7FFDDB835AE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ae8h:imm64]         encoding(10 bytes) = 48 ba e8 5a 83 db fd 7f 00 00
15c1h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
15c5h mov rcx,1F96AFE7030h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7030h:imm64]          encoding(10 bytes) = 48 b9 30 70 fe 6a f9 01 00 00
15cfh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
15d2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 c9 94 42 5f
15d7h mov rcx,1F96AFE7038h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7038h:imm64]          encoding(10 bytes) = 48 b9 38 70 fe 6a f9 01 00 00
15e1h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
15e4h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
15e7h jne short 163dh               ; JNE(Jne_rel8_64) [163Dh:jmp64]                       encoding(2 bytes) = 75 54
15e9h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
15f3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 98 a3 42 5f
15f8h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
15fbh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1605h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1608h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
160bh je near ptr 1d5fh             ; JE(Je_rel32_64) [1D5Fh:jmp64]                        encoding(6 bytes) = 0f 84 4e 07 00 00
1611h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1615h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 b6 94 42 5f
161ah mov rdx,7FFDDB835AF0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835af0h:imm64]         encoding(10 bytes) = 48 ba f0 5a 83 db fd 7f 00 00
1624h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1628h mov rcx,1F96AFE7038h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7038h:imm64]          encoding(10 bytes) = 48 b9 38 70 fe 6a f9 01 00 00
1632h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1635h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 66 94 42 5f
163ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
163dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1640h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1643h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
164dh call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE250h:jmp64]        encoding(5 bytes) = e8 fe cb ff ff
1652h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1655h mov rcx,1F96AFE7040h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7040h:imm64]          encoding(10 bytes) = 48 b9 40 70 fe 6a f9 01 00 00
165fh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1662h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1665h jne short 16b8h               ; JNE(Jne_rel8_64) [16B8h:jmp64]                       encoding(2 bytes) = 75 51
1667h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
1671h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 1a a3 42 5f
1676h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1679h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1683h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1686h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1689h je near ptr 1d68h             ; JE(Je_rel32_64) [1D68h:jmp64]                        encoding(6 bytes) = 0f 84 d9 06 00 00
168fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1693h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 38 94 42 5f
1698h mov rdx,7FFDDB835AF8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835af8h:imm64]         encoding(10 bytes) = 48 ba f8 5a 83 db fd 7f 00 00
16a2h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
16a6h mov rcx,1F96AFE7040h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7040h:imm64]          encoding(10 bytes) = 48 b9 40 70 fe 6a f9 01 00 00
16b0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
16b3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 e8 93 42 5f
16b8h mov rcx,1F96AFE7048h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7048h:imm64]          encoding(10 bytes) = 48 b9 48 70 fe 6a f9 01 00 00
16c2h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
16c5h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
16c8h jne short 171eh               ; JNE(Jne_rel8_64) [171Eh:jmp64]                       encoding(2 bytes) = 75 54
16cah mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
16d4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 b7 a2 42 5f
16d9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16dch mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
16e6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
16e9h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
16ech je near ptr 1d71h             ; JE(Je_rel32_64) [1D71h:jmp64]                        encoding(6 bytes) = 0f 84 7f 06 00 00
16f2h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
16f6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 d5 93 42 5f
16fbh mov rdx,7FFDDB835B00h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b00h:imm64]         encoding(10 bytes) = 48 ba 00 5b 83 db fd 7f 00 00
1705h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1709h mov rcx,1F96AFE7048h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7048h:imm64]          encoding(10 bytes) = 48 b9 48 70 fe 6a f9 01 00 00
1713h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1716h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 85 93 42 5f
171bh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
171eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1721h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1724h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
172eh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 25 e5 ff ff
1733h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1736h mov rcx,1F96AFE7050h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7050h:imm64]          encoding(10 bytes) = 48 b9 50 70 fe 6a f9 01 00 00
1740h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1743h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1746h jne short 1799h               ; JNE(Jne_rel8_64) [1799h:jmp64]                       encoding(2 bytes) = 75 51
1748h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
1752h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 39 a2 42 5f
1757h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
175ah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1764h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1767h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
176ah je near ptr 1d7ah             ; JE(Je_rel32_64) [1D7Ah:jmp64]                        encoding(6 bytes) = 0f 84 0a 06 00 00
1770h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1774h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 57 93 42 5f
1779h mov rdx,7FFDDB835B08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b08h:imm64]         encoding(10 bytes) = 48 ba 08 5b 83 db fd 7f 00 00
1783h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1787h mov rcx,1F96AFE7050h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7050h:imm64]          encoding(10 bytes) = 48 b9 50 70 fe 6a f9 01 00 00
1791h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1794h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 07 93 42 5f
1799h mov rcx,1F96AFE7058h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7058h:imm64]          encoding(10 bytes) = 48 b9 58 70 fe 6a f9 01 00 00
17a3h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
17a6h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
17a9h jne short 17ffh               ; JNE(Jne_rel8_64) [17FFh:jmp64]                       encoding(2 bytes) = 75 54
17abh mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
17b5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 d6 a1 42 5f
17bah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
17bdh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
17c7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
17cah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
17cdh je near ptr 1d83h             ; JE(Je_rel32_64) [1D83h:jmp64]                        encoding(6 bytes) = 0f 84 b0 05 00 00
17d3h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
17d7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 f4 92 42 5f
17dch mov rdx,7FFDDB835B10h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b10h:imm64]         encoding(10 bytes) = 48 ba 10 5b 83 db fd 7f 00 00
17e6h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
17eah mov rcx,1F96AFE7058h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7058h:imm64]          encoding(10 bytes) = 48 b9 58 70 fe 6a f9 01 00 00
17f4h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
17f7h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 a4 92 42 5f
17fch mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
17ffh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1802h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1805h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
180fh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 44 e4 ff ff
1814h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1817h mov rcx,1F96AFE7060h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7060h:imm64]          encoding(10 bytes) = 48 b9 60 70 fe 6a f9 01 00 00
1821h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1824h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1827h jne short 187ah               ; JNE(Jne_rel8_64) [187Ah:jmp64]                       encoding(2 bytes) = 75 51
1829h mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
1833h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 58 a1 42 5f
1838h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
183bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1845h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1848h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
184bh je near ptr 1d8ch             ; JE(Je_rel32_64) [1D8Ch:jmp64]                        encoding(6 bytes) = 0f 84 3b 05 00 00
1851h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1855h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 76 92 42 5f
185ah mov rdx,7FFDDB835B18h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b18h:imm64]         encoding(10 bytes) = 48 ba 18 5b 83 db fd 7f 00 00
1864h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1868h mov rcx,1F96AFE7060h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7060h:imm64]          encoding(10 bytes) = 48 b9 60 70 fe 6a f9 01 00 00
1872h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1875h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 26 92 42 5f
187ah mov rcx,1F96AFE7068h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7068h:imm64]          encoding(10 bytes) = 48 b9 68 70 fe 6a f9 01 00 00
1884h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1887h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
188ah jne short 18e0h               ; JNE(Jne_rel8_64) [18E0h:jmp64]                       encoding(2 bytes) = 75 54
188ch mov rcx,7FFDDB9C4068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4068h:imm64]         encoding(10 bytes) = 48 b9 68 40 9c db fd 7f 00 00
1896h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 f5 a0 42 5f
189bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
189eh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
18a8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
18abh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
18aeh je near ptr 1d95h             ; JE(Je_rel32_64) [1D95h:jmp64]                        encoding(6 bytes) = 0f 84 e1 04 00 00
18b4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
18b8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 13 92 42 5f
18bdh mov rdx,7FFDDB835B20h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b20h:imm64]         encoding(10 bytes) = 48 ba 20 5b 83 db fd 7f 00 00
18c7h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
18cbh mov rcx,1F96AFE7068h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7068h:imm64]          encoding(10 bytes) = 48 b9 68 70 fe 6a f9 01 00 00
18d5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
18d8h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 c3 91 42 5f
18ddh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
18e0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
18e3h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
18e6h mov rcx,7FFDDB9C4180h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4180h:imm64]         encoding(10 bytes) = 48 b9 80 41 9c db fd 7f 00 00
18f0h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 63 e3 ff ff
18f5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
18f8h mov rcx,1F96AFE7070h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7070h:imm64]          encoding(10 bytes) = 48 b9 70 70 fe 6a f9 01 00 00
1902h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1905h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1908h jne short 195bh               ; JNE(Jne_rel8_64) [195Bh:jmp64]                       encoding(2 bytes) = 75 51
190ah mov rcx,7FFDDB9C41D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c41d0h:imm64]         encoding(10 bytes) = 48 b9 d0 41 9c db fd 7f 00 00
1914h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 77 a0 42 5f
1919h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
191ch mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1926h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1929h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
192ch je near ptr 1d9eh             ; JE(Je_rel32_64) [1D9Eh:jmp64]                        encoding(6 bytes) = 0f 84 6c 04 00 00
1932h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1936h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 95 91 42 5f
193bh mov rdx,7FFDDB835B28h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b28h:imm64]         encoding(10 bytes) = 48 ba 28 5b 83 db fd 7f 00 00
1945h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1949h mov rcx,1F96AFE7070h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7070h:imm64]          encoding(10 bytes) = 48 b9 70 70 fe 6a f9 01 00 00
1953h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1956h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 45 91 42 5f
195bh mov rcx,1F96AFE7078h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7078h:imm64]          encoding(10 bytes) = 48 b9 78 70 fe 6a f9 01 00 00
1965h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1968h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
196bh jne short 19c1h               ; JNE(Jne_rel8_64) [19C1h:jmp64]                       encoding(2 bytes) = 75 54
196dh mov rcx,7FFDDB9C44D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c44d8h:imm64]         encoding(10 bytes) = 48 b9 d8 44 9c db fd 7f 00 00
1977h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 14 a0 42 5f
197ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
197fh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1989h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
198ch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
198fh je near ptr 1da7h             ; JE(Je_rel32_64) [1DA7h:jmp64]                        encoding(6 bytes) = 0f 84 12 04 00 00
1995h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1999h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 32 91 42 5f
199eh mov rdx,7FFDDB835B30h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b30h:imm64]         encoding(10 bytes) = 48 ba 30 5b 83 db fd 7f 00 00
19a8h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
19ach mov rcx,1F96AFE7078h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7078h:imm64]          encoding(10 bytes) = 48 b9 78 70 fe 6a f9 01 00 00
19b6h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
19b9h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 e2 90 42 5f
19beh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
19c1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
19c4h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
19c7h mov rcx,7FFDDB9C45F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c45f0h:imm64]         encoding(10 bytes) = 48 b9 f0 45 9c db fd 7f 00 00
19d1h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 82 e2 ff ff
19d6h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
19d9h mov rcx,1F96AFE7080h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7080h:imm64]          encoding(10 bytes) = 48 b9 80 70 fe 6a f9 01 00 00
19e3h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
19e6h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
19e9h jne short 1a3ch               ; JNE(Jne_rel8_64) [1A3Ch:jmp64]                       encoding(2 bytes) = 75 51
19ebh mov rcx,7FFDDB9C4640h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4640h:imm64]         encoding(10 bytes) = 48 b9 40 46 9c db fd 7f 00 00
19f5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 96 9f 42 5f
19fah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
19fdh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1a07h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1a0ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1a0dh je near ptr 1db0h             ; JE(Je_rel32_64) [1DB0h:jmp64]                        encoding(6 bytes) = 0f 84 9d 03 00 00
1a13h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1a17h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 b4 90 42 5f
1a1ch mov rdx,7FFDDB835B38h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b38h:imm64]         encoding(10 bytes) = 48 ba 38 5b 83 db fd 7f 00 00
1a26h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1a2ah mov rcx,1F96AFE7080h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7080h:imm64]          encoding(10 bytes) = 48 b9 80 70 fe 6a f9 01 00 00
1a34h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1a37h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 64 90 42 5f
1a3ch mov rcx,1F96AFE7088h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7088h:imm64]          encoding(10 bytes) = 48 b9 88 70 fe 6a f9 01 00 00
1a46h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1a49h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1a4ch jne short 1aa2h               ; JNE(Jne_rel8_64) [1AA2h:jmp64]                       encoding(2 bytes) = 75 54
1a4eh mov rcx,7FFDDB9C4948h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4948h:imm64]         encoding(10 bytes) = 48 b9 48 49 9c db fd 7f 00 00
1a58h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 33 9f 42 5f
1a5dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1a60h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1a6ah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1a6dh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1a70h je near ptr 1db9h             ; JE(Je_rel32_64) [1DB9h:jmp64]                        encoding(6 bytes) = 0f 84 43 03 00 00
1a76h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1a7ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 51 90 42 5f
1a7fh mov rdx,7FFDDB835B40h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b40h:imm64]         encoding(10 bytes) = 48 ba 40 5b 83 db fd 7f 00 00
1a89h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1a8dh mov rcx,1F96AFE7088h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7088h:imm64]          encoding(10 bytes) = 48 b9 88 70 fe 6a f9 01 00 00
1a97h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1a9ah call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 01 90 42 5f
1a9fh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
1aa2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1aa5h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1aa8h mov rcx,7FFDDB9C4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9c db fd 7f 00 00
1ab2h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC58h:jmp64]        encoding(5 bytes) = e8 a1 e1 ff ff
1ab7h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1abah mov rcx,1F96AFE7090h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7090h:imm64]          encoding(10 bytes) = 48 b9 90 70 fe 6a f9 01 00 00
1ac4h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1ac7h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1acah jne short 1b1dh               ; JNE(Jne_rel8_64) [1B1Dh:jmp64]                       encoding(2 bytes) = 75 51
1acch mov rcx,7FFDDB9C4AB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4ab0h:imm64]         encoding(10 bytes) = 48 b9 b0 4a 9c db fd 7f 00 00
1ad6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 b5 9e 42 5f
1adbh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1adeh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1ae8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1aebh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1aeeh je near ptr 1dc2h             ; JE(Je_rel32_64) [1DC2h:jmp64]                        encoding(6 bytes) = 0f 84 ce 02 00 00
1af4h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1af8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 d3 8f 42 5f
1afdh mov rdx,7FFDDB835B48h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b48h:imm64]         encoding(10 bytes) = 48 ba 48 5b 83 db fd 7f 00 00
1b07h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1b0bh mov rcx,1F96AFE7090h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7090h:imm64]          encoding(10 bytes) = 48 b9 90 70 fe 6a f9 01 00 00
1b15h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1b18h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 83 8f 42 5f
1b1dh mov rcx,1F96AFE7098h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7098h:imm64]          encoding(10 bytes) = 48 b9 98 70 fe 6a f9 01 00 00
1b27h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1b2ah test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1b2dh jne short 1b83h               ; JNE(Jne_rel8_64) [1B83h:jmp64]                       encoding(2 bytes) = 75 54
1b2fh mov rcx,7FFDDB9C4B90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4b90h:imm64]         encoding(10 bytes) = 48 b9 90 4b 9c db fd 7f 00 00
1b39h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F42B990h:jmp64]                encoding(5 bytes) = e8 52 9e 42 5f
1b3eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1b41h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
1b4bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1b4eh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1b51h je near ptr 1dcbh             ; JE(Je_rel32_64) [1DCBh:jmp64]                        encoding(6 bytes) = 0f 84 74 02 00 00
1b57h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1b5bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F42AAD0h:jmp64]                encoding(5 bytes) = e8 70 8f 42 5f
1b60h mov rdx,7FFDDB835B50h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b50h:imm64]         encoding(10 bytes) = 48 ba 50 5b 83 db fd 7f 00 00
1b6ah mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1b6eh mov rcx,1F96AFE7098h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7098h:imm64]          encoding(10 bytes) = 48 b9 98 70 fe 6a f9 01 00 00
1b78h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1b7bh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F42AAA0h:jmp64]                encoding(5 bytes) = e8 20 8f 42 5f
1b80h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
1b83h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1b86h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1b89h mov rcx,7FFDDB9C4CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 4c 9c db fd 7f 00 00
1b93h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
1b9dh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
1ba1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1ba2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1ba3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1ba4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1ba5h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1ba7h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1ba9h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1babh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1badh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
1bb0h mov rcx,7FFDDB9C28A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c28a8h:imm64]         encoding(10 bytes) = 48 b9 a8 28 9c db fd 7f 00 00
1bbah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1bbch call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F42BB20h:jmp64]                encoding(5 bytes) = e8 5f 9f 42 5f
1bc1h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
1bc2h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
1bc6h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1bc7h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1bc8h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1bc9h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1bcah pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1bcch pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1bceh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1bd0h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1bd2h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1bd3h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1bd6h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 b5 94 91 ff
1bdbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1bdch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1bdfh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 ac 94 91 ff
1be4h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1be5h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1be8h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 a3 94 91 ff
1bedh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1beeh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1bf1h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 9a 94 91 ff
1bf6h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1bf7h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
1bfah call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 91 94 91 ff
1bffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c00h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c03h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 88 94 91 ff
1c08h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c09h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
1c0ch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 7f 94 91 ff
1c11h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c12h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c15h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 76 94 91 ff
1c1ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c1bh mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
1c1eh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 6d 94 91 ff
1c23h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c24h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c27h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 64 94 91 ff
1c2ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c2dh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
1c30h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 5b 94 91 ff
1c35h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c36h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c39h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 52 94 91 ff
1c3eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c3fh mov rcx,r13                   ; MOV(Mov_r64_rm64) [RCX,R13]                          encoding(3 bytes) = 49 8b cd
1c42h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 49 94 91 ff
1c47h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c48h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c4bh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 40 94 91 ff
1c50h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c51h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1c54h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 37 94 91 ff
1c59h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c5ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c5dh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 2e 94 91 ff
1c62h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c63h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1c66h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 25 94 91 ff
1c6bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c6ch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c6fh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 1c 94 91 ff
1c74h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c75h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1c78h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 13 94 91 ff
1c7dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c7eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c81h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 0a 94 91 ff
1c86h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c87h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1c8ah call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 01 94 91 ff
1c8fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c90h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c93h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 f8 93 91 ff
1c98h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c99h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1c9ch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 ef 93 91 ff
1ca1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ca2h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1ca5h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 e6 93 91 ff
1caah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cabh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1caeh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 dd 93 91 ff
1cb3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cb4h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cb7h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 d4 93 91 ff
1cbch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cbdh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1cc0h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 cb 93 91 ff
1cc5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cc6h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cc9h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 c2 93 91 ff
1cceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ccfh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1cd2h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 b9 93 91 ff
1cd7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cd8h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cdbh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 b0 93 91 ff
1ce0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ce1h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1ce4h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 a7 93 91 ff
1ce9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ceah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cedh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 9e 93 91 ff
1cf2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cf3h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1cf6h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 95 93 91 ff
1cfbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cfch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cffh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 8c 93 91 ff
1d04h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d05h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d08h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 83 93 91 ff
1d0dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d0eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d11h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 7a 93 91 ff
1d16h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d17h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d1ah call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 71 93 91 ff
1d1fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d20h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d23h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 68 93 91 ff
1d28h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d29h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d2ch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 5f 93 91 ff
1d31h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d32h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d35h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 56 93 91 ff
1d3ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d3bh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d3eh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 4d 93 91 ff
1d43h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d44h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d47h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 44 93 91 ff
1d4ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d4dh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d50h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 3b 93 91 ff
1d55h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d56h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d59h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 32 93 91 ff
1d5eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d5fh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d62h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 29 93 91 ff
1d67h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d68h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d6bh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 20 93 91 ff
1d70h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d71h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d74h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 17 93 91 ff
1d79h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d7ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d7dh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 0e 93 91 ff
1d82h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d83h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d86h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 05 93 91 ff
1d8bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d8ch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d8fh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 fc 92 91 ff
1d94h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d95h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d98h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 f3 92 91 ff
1d9dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d9eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1da1h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 ea 92 91 ff
1da6h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1da7h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1daah call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 e1 92 91 ff
1dafh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1db0h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1db3h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 d8 92 91 ff
1db8h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1db9h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1dbch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 cf 92 91 ff
1dc1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dc2h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1dc5h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 c6 92 91 ff
1dcah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dcbh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1dceh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF91B090h:jmp64]        encoding(5 bytes) = e8 bd 92 91 ff
1dd3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[7636]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0xFF,0xC9,0x83,0xF9,0x07,0x0F,0x87,0x95,0x1B,0x00,0x00,0x8B,0xC9,0x48,0x8D,0x15,0xB4,0x1D,0x00,0x00,0x8B,0x14,0x8A,0x48,0x8D,0x05,0xE2,0xFF,0xFF,0xFF,0x48,0x03,0xD0,0xFF,0xE2,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x79,0xBA,0x42,0x5F,0x48,0x8B,0xF0,0x33,0xC9,0x89,0x4E,0x10,0xC7,0x46,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x26,0xBD,0x42,0x5F,0x48,0xB9,0xD8,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x01,0x4D,0x85,0xC0,0x75,0x54,0x48,0xB9,0x68,0x55,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x05,0xB9,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2F,0x1B,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x23,0xAA,0x42,0x5F,0x48,0xBA,0x90,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xD8,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xD3,0xA9,0x42,0x5F,0x4C,0x8B,0xC7,0x48,0x8B,0xD6,0x48,0xB9,0xF0,0x56,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x28,0x89,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB2,0xB9,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x5F,0xBC,0x42,0x5F,0x48,0xB9,0xE0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0xB8,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x71,0x1A,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x5C,0xA9,0x42,0x5F,0x48,0xBA,0x98,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xE0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x0C,0xA9,0x42,0x5F,0x48,0xB9,0xE8,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x54,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDB,0xB7,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x17,0x1A,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xF9,0xA8,0x42,0x5F,0x48,0xBA,0xA0,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xE8,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xA9,0xA8,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x18,0x55,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x70,0x6D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x85,0xB8,0x42,0x5F,0x48,0x8B,0xD8,0x33,0xC9,0x89,0x4B,0x10,0xC7,0x43,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x32,0xBB,0x42,0x5F,0x48,0xB9,0xF0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0xB7,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x56,0x19,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x2F,0xA8,0x42,0x5F,0x48,0xBA,0xA8,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xF0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xDF,0xA7,0x42,0x5F,0x48,0xB9,0xF8,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAE,0xB6,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFC,0x18,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0xCC,0xA7,0x42,0x5F,0x48,0xBA,0xB0,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xF8,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x7C,0xA7,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xDF,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0x00,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x30,0xB6,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x87,0x18,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x4E,0xA7,0x42,0x5F,0x48,0xBA,0xB8,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x00,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xFE,0xA6,0x42,0x5F,0x48,0xB9,0x08,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x98,0x52,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCD,0xB5,0x42,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2D,0x18,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0xEB,0xA6,0x42,0x5F,0x48,0xBA,0xC0,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x08,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0x9B,0xA6,0x42,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD5,0x4C,0x8B,0xC6,0x48,0xB9,0xB0,0x53,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0xB6,0x42,0x5F,0x4C,0x8B,0xF0,0x33,0xC9,0x41,0x89,0x4E,0x10,0x41,0xC7,0x46,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x22,0xB9,0x42,0x5F,0x48,0xB9,0x10,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x01,0xB5,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x6A,0x17,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x1F,0xA6,0x42,0x5F,0x48,0xBA,0xC8,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x10,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xCF,0xA5,0x42,0x5F,0x48,0xB9,0x18,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9E,0xB4,0x42,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x10,0x17,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0xBC,0xA5,0x42,0x5F,0x48,0xBA,0xD0,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0x18,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0x6C,0xA5,0x42,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC6,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0xDD,0xFF,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0x20,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x20,0xB4,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x9B,0x16,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x3E,0xA5,0x42,0x5F,0x48,0xBA,0xD8,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x20,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xEE,0xA4,0x42,0x5F,0x48,0xB9,0x28,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x56,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBD,0xB3,0x42,0x5F,0x4C,0x8B,0xE0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x41,0x16,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0xE8,0xDA,0xA4,0x42,0x5F,0x48,0xBA,0xE0,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x54,0x24,0x18,0x48,0xB9,0x28,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD4,0xE8,0x89,0xA4,0x42,0x5F,0x4D,0x8B,0xCC,0x49,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x29,0xF6,0xFF,0xFF,0x4C,0x8B,0xE0,0x48,0xB9,0x30,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0xB3,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCA,0x15,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x5B,0xA4,0x42,0x5F,0x48,0xBA,0xE8,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x30,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x0B,0xA4,0x42,0x5F,0x48,0xB9,0x38,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x30,0x51,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0xB2,0x42,0x5F,0x4C,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x70,0x15,0x00,0x00,0x49,0x8D,0x4D,0x08,0xE8,0xF8,0xA3,0x42,0x5F,0x48,0xBA,0xF0,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x55,0x18,0x48,0xB9,0x38,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD5,0xE8,0xA8,0xA3,0x42,0x5F,0x4D,0x8B,0xCD,0x49,0x8B,0xD4,0x4C,0x8B,0xC6,0x48,0xB9,0x48,0x52,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x84,0xB3,0x42,0x5F,0x4C,0x8B,0xE8,0x33,0xC9,0x41,0x89,0x4D,0x10,0x41,0xC7,0x45,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x2F,0xB6,0x42,0x5F,0x48,0xB9,0x40,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0E,0xB2,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xAD,0x14,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x2C,0xA3,0x42,0x5F,0x48,0xBA,0xF8,0x59,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x40,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xDC,0xA2,0x42,0x5F,0x48,0xB9,0x48,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAB,0xB1,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x53,0x14,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xC9,0xA2,0x42,0x5F,0x48,0xBA,0x00,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x48,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x79,0xA2,0x42,0x5F,0x4C,0x8B,0xCF,0x49,0x8B,0xD5,0x4C,0x8B,0xC6,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0xDA,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x50,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2D,0xB1,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xDE,0x13,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x4B,0xA2,0x42,0x5F,0x48,0xBA,0x08,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x50,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xFB,0xA1,0x42,0x5F,0x48,0xB9,0x58,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCA,0xB0,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x84,0x13,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xE8,0xA1,0x42,0x5F,0x48,0xBA,0x10,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x58,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x98,0xA1,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x38,0xF3,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x60,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4C,0xB0,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x0F,0x13,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x6A,0xA1,0x42,0x5F,0x48,0xBA,0x18,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x60,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x1A,0xA1,0x42,0x5F,0x48,0xB9,0x68,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE9,0xAF,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB5,0x12,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x07,0xA1,0x42,0x5F,0x48,0xBA,0x20,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x68,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB7,0xA0,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x57,0xF2,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x70,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6B,0xAF,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x40,0x12,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x89,0xA0,0x42,0x5F,0x48,0xBA,0x28,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x70,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x39,0xA0,0x42,0x5F,0x48,0xB9,0x78,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xC8,0x4F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x08,0xAF,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE6,0x11,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x26,0xA0,0x42,0x5F,0x48,0xBA,0x30,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x78,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xD6,0x9F,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xE0,0x50,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB2,0xAF,0x42,0x5F,0x48,0x8B,0xD8,0x33,0xC9,0x89,0x4B,0x10,0xC7,0x43,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x5F,0xB2,0x42,0x5F,0x48,0xB9,0x80,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0xAE,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x25,0x11,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x5C,0x9F,0x42,0x5F,0x48,0xBA,0x38,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x80,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x0C,0x9F,0x42,0x5F,0x48,0xB9,0x88,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDB,0xAD,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCB,0x10,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xF9,0x9E,0x42,0x5F,0x48,0xBA,0x40,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x88,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xA9,0x9E,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x41,0xD6,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x90,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0xAD,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x56,0x10,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x7B,0x9E,0x42,0x5F,0x48,0xBA,0x48,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x90,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x2B,0x9E,0x42,0x5F,0x48,0xB9,0x98,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFA,0xAC,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFC,0x0F,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x18,0x9E,0x42,0x5F,0x48,0xBA,0x50,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x98,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xC8,0x9D,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x68,0xEF,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xA0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0xAC,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x87,0x0F,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x9A,0x9D,0x42,0x5F,0x48,0xBA,0x58,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xA0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x4A,0x9D,0x42,0x5F,0x48,0xB9,0xA8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x19,0xAC,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2D,0x0F,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x37,0x9D,0x42,0x5F,0x48,0xBA,0x60,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xA8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xE7,0x9C,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x87,0xEE,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0xB0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9B,0xAB,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB8,0x0E,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xB9,0x9C,0x42,0x5F,0x48,0xBA,0x68,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xB0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x69,0x9C,0x42,0x5F,0x48,0xB9,0xB8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x40,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x38,0xAB,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x5E,0x0E,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x56,0x9C,0x42,0x5F,0x48,0xBA,0x70,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xB8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x06,0x9C,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x80,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0xED,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xC0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xD0,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBA,0xAA,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE9,0x0D,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xD8,0x9B,0x42,0x5F,0x48,0xBA,0x78,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xC0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x88,0x9B,0x42,0x5F,0x48,0xB9,0xC8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x60,0x4E,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x57,0xAA,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x8F,0x0D,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x75,0x9B,0x42,0x5F,0x48,0xBA,0x80,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xC8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x25,0x9B,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x78,0x4F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x01,0xAB,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xAE,0xAD,0x42,0x5F,0x48,0xB9,0xD0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8D,0xA9,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCE,0x0C,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xAB,0x9A,0x42,0x5F,0x48,0xBA,0x88,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xD0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x5B,0x9A,0x42,0x5F,0x48,0xB9,0xD8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2A,0xA9,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x74,0x0C,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x48,0x9A,0x42,0x5F,0x48,0xBA,0x90,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xD8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xF8,0x99,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x90,0xD1,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xE0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAC,0xA8,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFF,0x0B,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xCA,0x99,0x42,0x5F,0x48,0xBA,0x98,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xE0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x7A,0x99,0x42,0x5F,0x48,0xB9,0xE8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x49,0xA8,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA5,0x0B,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x67,0x99,0x42,0x5F,0x48,0xBA,0xA0,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xE8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x17,0x99,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB7,0xEA,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0xF0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCB,0xA7,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x30,0x0B,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xE9,0x98,0x42,0x5F,0x48,0xBA,0xA8,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xF0,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x99,0x98,0x42,0x5F,0x48,0xB9,0xF8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x68,0xA7,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xD6,0x0A,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x86,0x98,0x42,0x5F,0x48,0xBA,0xB0,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xF8,0x6F,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x36,0x98,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0xE9,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x00,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEA,0xA6,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x61,0x0A,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x08,0x98,0x42,0x5F,0x48,0xBA,0xB8,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x00,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xB8,0x97,0x42,0x5F,0x48,0xB9,0x08,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x40,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x87,0xA6,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x07,0x0A,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xA5,0x97,0x42,0x5F,0x48,0xBA,0xC0,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x08,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x55,0x97,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x80,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF5,0xE8,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x10,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xD0,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x09,0xA6,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x92,0x09,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x27,0x97,0x42,0x5F,0x48,0xBA,0xC8,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x10,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xD7,0x96,0x42,0x5F,0x48,0xB9,0x18,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xD8,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0xA5,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x38,0x09,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xC4,0x96,0x42,0x5F,0x48,0xBA,0xD0,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x18,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x74,0x96,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xF0,0x45,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xE8,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x20,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x40,0x46,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0xA5,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC3,0x08,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x46,0x96,0x42,0x5F,0x48,0xBA,0xD8,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x20,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xF6,0x95,0x42,0x5F,0x48,0xB9,0x28,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x4C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC5,0xA4,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x69,0x08,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xE3,0x95,0x42,0x5F,0x48,0xBA,0xE0,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x28,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x93,0x95,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x10,0x4E,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x6F,0xA5,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x1C,0xA8,0x42,0x5F,0x48,0xB9,0x30,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFB,0xA3,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA8,0x07,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x19,0x95,0x42,0x5F,0x48,0xBA,0xE8,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x30,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xC9,0x94,0x42,0x5F,0x48,0xB9,0x38,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x98,0xA3,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x4E,0x07,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xB6,0x94,0x42,0x5F,0x48,0xBA,0xF0,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x38,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x66,0x94,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0xCB,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x40,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1A,0xA3,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xD9,0x06,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x38,0x94,0x42,0x5F,0x48,0xBA,0xF8,0x5A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x40,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xE8,0x93,0x42,0x5F,0x48,0xB9,0x48,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB7,0xA2,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x7F,0x06,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xD5,0x93,0x42,0x5F,0x48,0xBA,0x00,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x48,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x85,0x93,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x25,0xE5,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x50,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x39,0xA2,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x0A,0x06,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x57,0x93,0x42,0x5F,0x48,0xBA,0x08,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x50,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x07,0x93,0x42,0x5F,0x48,0xB9,0x58,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0xA1,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB0,0x05,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xF4,0x92,0x42,0x5F,0x48,0xBA,0x10,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x58,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xA4,0x92,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0xE4,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x60,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x58,0xA1,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x3B,0x05,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x76,0x92,0x42,0x5F,0x48,0xBA,0x18,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x60,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x26,0x92,0x42,0x5F,0x48,0xB9,0x68,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x40,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF5,0xA0,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE1,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x13,0x92,0x42,0x5F,0x48,0xBA,0x20,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x68,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xC3,0x91,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x80,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x63,0xE3,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x70,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xD0,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x77,0xA0,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x6C,0x04,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x95,0x91,0x42,0x5F,0x48,0xBA,0x28,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x70,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x45,0x91,0x42,0x5F,0x48,0xB9,0x78,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xD8,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xA0,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x12,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x32,0x91,0x42,0x5F,0x48,0xBA,0x30,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x78,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xE2,0x90,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xF0,0x45,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x82,0xE2,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x80,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x40,0x46,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0x9F,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x9D,0x03,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xB4,0x90,0x42,0x5F,0x48,0xBA,0x38,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x80,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x64,0x90,0x42,0x5F,0x48,0xB9,0x88,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x48,0x49,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x33,0x9F,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x43,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x51,0x90,0x42,0x5F,0x48,0xBA,0x40,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x88,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x01,0x90,0x42,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x60,0x4A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA1,0xE1,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x90,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB0,0x4A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0x9E,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCE,0x02,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xD3,0x8F,0x42,0x5F,0x48,0xBA,0x48,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x90,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x83,0x8F,0x42,0x5F,0x48,0xB9,0x98,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x90,0x4B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x52,0x9E,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x74,0x02,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x70,0x8F,0x42,0x5F,0x48,0xBA,0x50,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x98,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x20,0x8F,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xA8,0x4C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0xA8,0x28,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0xE8,0x5F,0x9F,0x42,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0x48,0x8B,0xCF,0xE8,0xB5,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xAC,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xA3,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x9A,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x91,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x88,0x94,0x91,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0x7F,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x76,0x94,0x91,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x6D,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x64,0x94,0x91,0xFF,0xCC,0x49,0x8B,0xCC,0xE8,0x5B,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x52,0x94,0x91,0xFF,0xCC,0x49,0x8B,0xCD,0xE8,0x49,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x40,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x37,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x2E,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x25,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x1C,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x13,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x0A,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x01,0x94,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xF8,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xEF,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xE6,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xDD,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xD4,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xCB,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xC2,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xB9,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xB0,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xA7,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x9E,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x95,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x8C,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x83,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x7A,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x71,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x68,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x5F,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x56,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x4D,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x44,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x3B,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x32,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x29,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x20,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x17,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x0E,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x05,0x93,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xFC,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xF3,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xEA,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xE1,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xD8,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xCF,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xC6,0x92,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xBD,0x92,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N1>> bitcombo(N1 n)
; location: [7FFDDB83A940h, 7FFDDB83A9D7h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov [rsp+40h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 40
000ch mov rcx,7FFDDB9AEBD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9aebd8h:imm64]         encoding(10 bytes) = 48 b9 d8 eb 9a db fd 7f 00 00
0016h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429B70h:jmp64]                encoding(5 bytes) = e8 55 9b 42 5f
001bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001eh movsx rcx,byte ptr [rsp+40h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 40
0024h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0027h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0031h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0036h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F429CA0h:jmp64]                encoding(5 bytes) = e8 65 9c 42 5f
003bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0040h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0043h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004ah mov rcx,7FFDDB9C59B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c59b0h:imm64]         encoding(10 bytes) = 48 b9 b0 59 9c db fd 7f 00 00
0054h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429B70h:jmp64]                encoding(5 bytes) = e8 17 9b 42 5f
0059h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
005ch lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0060h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0063h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428CB0h:jmp64]                encoding(5 bytes) = e8 48 8c 42 5f
0068h mov r8,7FFDDB8346B0h          ; MOV(Mov_r64_imm64) [R8,7ffddb8346b0h:imm64]          encoding(10 bytes) = 49 b8 b0 46 83 db fd 7f 00 00
0072h mov [rbx+18h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 43 18
0076h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0079h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
007ch mov rcx,7FFDDB9C5AB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5ab8h:imm64]         encoding(10 bytes) = 48 b9 b8 5a 9c db fd 7f 00 00
0086h mov rax,7FFDDB838928h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838928h:imm64]         encoding(10 bytes) = 48 b8 28 89 83 db fd 7f 00 00
0090h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0094h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0095h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0096h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0097h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> bitcomboBytes => new byte[154]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x89,0x4C,0x24,0x40,0x48,0xB9,0xD8,0xEB,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0x9B,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x40,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x65,0x9C,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xB0,0x59,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x17,0x9B,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x48,0x8C,0x42,0x5F,0x49,0xB8,0xB0,0x46,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x43,0x18,0x4C,0x8B,0xC3,0x48,0x8B,0xD7,0x48,0xB9,0xB8,0x5A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x28,0x89,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N2>> bitcombo(N2 n)
; location: [7FFDDB83AA00h, 7FFDDB83AB1Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000dh mov rcx,7FFDDB9AEC98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9aec98h:imm64]         encoding(10 bytes) = 48 b9 98 ec 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429AB0h:jmp64]                encoding(5 bytes) = e8 94 9a 42 5f
001ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001fh movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0025h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0028h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0032h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0037h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F429BE0h:jmp64]                encoding(5 bytes) = e8 a4 9b 42 5f
003ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0041h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0044h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004bh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0055h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F429EB0h:jmp64]                encoding(5 bytes) = e8 51 9e 42 5f
005fh mov rcx,1F96AFE70A0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70a0h:imm64]          encoding(10 bytes) = 48 b9 a0 70 fe 6a f9 01 00 00
0069h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006ch test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
006fh jne short 00c2h               ; JNE(Jne_rel8_64) [C2h:jmp64]                         encoding(2 bytes) = 75 51
0071h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429AB0h:jmp64]                encoding(5 bytes) = e8 30 9a 42 5f
0080h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0083h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
008dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0090h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0093h je near ptr 0116h             ; JE(Je_rel32_64) [116h:jmp64]                         encoding(6 bytes) = 0f 84 7d 00 00 00
0099h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 4e 8b 42 5f
00a2h mov rdx,7FFDDB835B58h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b58h:imm64]         encoding(10 bytes) = 48 ba 58 5b 83 db fd 7f 00 00
00ach mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b0h mov rcx,1F96AFE70A0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70a0h:imm64]          encoding(10 bytes) = 48 b9 a0 70 fe 6a f9 01 00 00
00bah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bdh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428BC0h:jmp64]                encoding(5 bytes) = e8 fe 8a 42 5f
00c2h mov rcx,7FFDDB9C5D78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5d78h:imm64]         encoding(10 bytes) = 48 b9 78 5d 9c db fd 7f 00 00
00cch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429AB0h:jmp64]                encoding(5 bytes) = e8 df 99 42 5f
00d1h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d4h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 10 8b 42 5f
00e0h mov r9,7FFDDB835CF8h          ; MOV(Mov_r64_imm64) [R9,7ffddb835cf8h:imm64]          encoding(10 bytes) = 49 b9 f8 5c 83 db fd 7f 00 00
00eah mov [rbp+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),R9]         encoding(4 bytes) = 4c 89 4d 18
00eeh mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
00f1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00f4h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
00f7h mov rcx,7FFDDB9C5E90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5e90h:imm64]         encoding(10 bytes) = 48 b9 90 5e 9c db fd 7f 00 00
0101h mov rax,7FFDDB836D70h         ; MOV(Mov_r64_imm64) [RAX,7ffddb836d70h:imm64]         encoding(10 bytes) = 48 b8 70 6d 83 db fd 7f 00 00
010bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
010fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0110h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0111h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0112h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0113h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0116h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0119h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9191B0h:jmp64]        encoding(5 bytes) = e8 92 90 91 ff
011eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[287]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0x98,0xEC,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x9A,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA4,0x9B,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x51,0x9E,0x42,0x5F,0x48,0xB9,0xA0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x30,0x9A,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x7D,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x4E,0x8B,0x42,0x5F,0x48,0xBA,0x58,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xA0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xFE,0x8A,0x42,0x5F,0x48,0xB9,0x78,0x5D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDF,0x99,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x10,0x8B,0x42,0x5F,0x49,0xB9,0xF8,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4D,0x18,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x90,0x5E,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x70,0x6D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x92,0x90,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N3>> bitcombo(N3 n)
; location: [7FFDDB83AB40h, 7FFDDB83AD51h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000dh mov rcx,7FFDDB9AED58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9aed58h:imm64]         encoding(10 bytes) = 48 b9 58 ed 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429970h:jmp64]                encoding(5 bytes) = e8 54 99 42 5f
001ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001fh movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0025h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0028h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0032h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0037h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F429AA0h:jmp64]                encoding(5 bytes) = e8 64 9a 42 5f
003ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0041h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0044h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004bh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0055h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F429D70h:jmp64]                encoding(5 bytes) = e8 11 9d 42 5f
005fh mov rcx,1F96AFE70A8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70a8h:imm64]          encoding(10 bytes) = 48 b9 a8 70 fe 6a f9 01 00 00
0069h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006ch test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
006fh jne short 00c2h               ; JNE(Jne_rel8_64) [C2h:jmp64]                         encoding(2 bytes) = 75 51
0071h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429970h:jmp64]                encoding(5 bytes) = e8 f0 98 42 5f
0080h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0083h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
008dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0090h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0093h je near ptr 01f7h             ; JE(Je_rel32_64) [1F7h:jmp64]                         encoding(6 bytes) = 0f 84 5e 01 00 00
0099h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428AB0h:jmp64]                encoding(5 bytes) = e8 0e 8a 42 5f
00a2h mov rdx,7FFDDB835B60h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b60h:imm64]         encoding(10 bytes) = 48 ba 60 5b 83 db fd 7f 00 00
00ach mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b0h mov rcx,1F96AFE70A8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70a8h:imm64]          encoding(10 bytes) = 48 b9 a8 70 fe 6a f9 01 00 00
00bah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bdh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428A80h:jmp64]                encoding(5 bytes) = e8 be 89 42 5f
00c2h mov rcx,1F96AFE70B0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70b0h:imm64]          encoding(10 bytes) = 48 b9 b0 70 fe 6a f9 01 00 00
00cch mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00cfh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d2h jne short 0128h               ; JNE(Jne_rel8_64) [128h:jmp64]                        encoding(2 bytes) = 75 54
00d4h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
00deh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429970h:jmp64]                encoding(5 bytes) = e8 8d 98 42 5f
00e3h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00e6h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
00f0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00f6h je near ptr 0200h             ; JE(Je_rel32_64) [200h:jmp64]                         encoding(6 bytes) = 0f 84 04 01 00 00
00fch lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0100h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428AB0h:jmp64]                encoding(5 bytes) = e8 ab 89 42 5f
0105h mov rdx,7FFDDB835B68h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b68h:imm64]         encoding(10 bytes) = 48 ba 68 5b 83 db fd 7f 00 00
010fh mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0113h mov rcx,1F96AFE70B0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70b0h:imm64]          encoding(10 bytes) = 48 b9 b0 70 fe 6a f9 01 00 00
011dh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0120h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428A80h:jmp64]                encoding(5 bytes) = e8 5b 89 42 5f
0125h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0128h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012bh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
012eh mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
0138h call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC230h:jmp64]        encoding(5 bytes) = e8 f3 c0 ff ff
013dh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0140h mov rcx,1F96AFE70B8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70b8h:imm64]          encoding(10 bytes) = 48 b9 b8 70 fe 6a f9 01 00 00
014ah mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014dh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0150h jne short 01a3h               ; JNE(Jne_rel8_64) [1A3h:jmp64]                        encoding(2 bytes) = 75 51
0152h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
015ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429970h:jmp64]                encoding(5 bytes) = e8 0f 98 42 5f
0161h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0164h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
016eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0171h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0174h je near ptr 0209h             ; JE(Je_rel32_64) [209h:jmp64]                         encoding(6 bytes) = 0f 84 8f 00 00 00
017ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
017eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428AB0h:jmp64]                encoding(5 bytes) = e8 2d 89 42 5f
0183h mov rdx,7FFDDB835B70h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b70h:imm64]         encoding(10 bytes) = 48 ba 70 5b 83 db fd 7f 00 00
018dh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0191h mov rcx,1F96AFE70B8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70b8h:imm64]          encoding(10 bytes) = 48 b9 b8 70 fe 6a f9 01 00 00
019bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
019eh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428A80h:jmp64]                encoding(5 bytes) = e8 dd 88 42 5f
01a3h mov rcx,7FFDDB9C6150h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6150h:imm64]         encoding(10 bytes) = 48 b9 50 61 9c db fd 7f 00 00
01adh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429970h:jmp64]                encoding(5 bytes) = e8 be 97 42 5f
01b2h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01b5h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01b9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01bch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428AB0h:jmp64]                encoding(5 bytes) = e8 ef 88 42 5f
01c1h mov r9,7FFDDB835D10h          ; MOV(Mov_r64_imm64) [R9,7ffddb835d10h:imm64]          encoding(10 bytes) = 49 b9 10 5d 83 db fd 7f 00 00
01cbh mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
01cfh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
01d2h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01d5h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
01d8h mov rcx,7FFDDB9C6268h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6268h:imm64]         encoding(10 bytes) = 48 b9 68 62 9c db fd 7f 00 00
01e2h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
01ech add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01f0h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01f1h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01f2h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01f3h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01f4h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
01f7h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
01fah call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF919070h:jmp64]        encoding(5 bytes) = e8 71 8e 91 ff
01ffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0200h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0203h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF919070h:jmp64]        encoding(5 bytes) = e8 68 8e 91 ff
0208h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0209h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
020ch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF919070h:jmp64]        encoding(5 bytes) = e8 5f 8e 91 ff
0211h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[530]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0x58,0xED,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0x99,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x64,0x9A,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x11,0x9D,0x42,0x5F,0x48,0xB9,0xA8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF0,0x98,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x5E,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x0E,0x8A,0x42,0x5F,0x48,0xBA,0x60,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xA8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xBE,0x89,0x42,0x5F,0x48,0xB9,0xB0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8D,0x98,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x04,0x01,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0xAB,0x89,0x42,0x5F,0x48,0xBA,0x68,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xB0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x5B,0x89,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF3,0xC0,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xB8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0F,0x98,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x8F,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x2D,0x89,0x42,0x5F,0x48,0xBA,0x70,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xB8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xDD,0x88,0x42,0x5F,0x48,0xB9,0x50,0x61,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBE,0x97,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xEF,0x88,0x42,0x5F,0x49,0xB9,0x10,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0x68,0x62,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x71,0x8E,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x68,0x8E,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x5F,0x8E,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N4>> bitcombo(N4 n)
; location: [7FFDDB83AD70h, 7FFDDB83B074h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000dh mov rcx,7FFDDB9AEE18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9aee18h:imm64]         encoding(10 bytes) = 48 b9 18 ee 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 24 97 42 5f
001ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001fh movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0025h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0028h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0032h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0037h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F429870h:jmp64]                encoding(5 bytes) = e8 34 98 42 5f
003ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0041h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0044h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004bh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0055h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F429B40h:jmp64]                encoding(5 bytes) = e8 e1 9a 42 5f
005fh mov rcx,1F96AFE70C0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70c0h:imm64]          encoding(10 bytes) = 48 b9 c0 70 fe 6a f9 01 00 00
0069h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006ch test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
006fh jne short 00c2h               ; JNE(Jne_rel8_64) [C2h:jmp64]                         encoding(2 bytes) = 75 51
0071h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 c0 96 42 5f
0080h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0083h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
008dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0090h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0093h je near ptr 02d8h             ; JE(Je_rel32_64) [2D8h:jmp64]                         encoding(6 bytes) = 0f 84 3f 02 00 00
0099h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428880h:jmp64]                encoding(5 bytes) = e8 de 87 42 5f
00a2h mov rdx,7FFDDB835B78h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b78h:imm64]         encoding(10 bytes) = 48 ba 78 5b 83 db fd 7f 00 00
00ach mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b0h mov rcx,1F96AFE70C0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70c0h:imm64]          encoding(10 bytes) = 48 b9 c0 70 fe 6a f9 01 00 00
00bah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bdh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428850h:jmp64]                encoding(5 bytes) = e8 8e 87 42 5f
00c2h mov rcx,1F96AFE70C8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70c8h:imm64]          encoding(10 bytes) = 48 b9 c8 70 fe 6a f9 01 00 00
00cch mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00cfh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d2h jne short 0128h               ; JNE(Jne_rel8_64) [128h:jmp64]                        encoding(2 bytes) = 75 54
00d4h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
00deh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 5d 96 42 5f
00e3h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00e6h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
00f0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00f6h je near ptr 02e1h             ; JE(Je_rel32_64) [2E1h:jmp64]                         encoding(6 bytes) = 0f 84 e5 01 00 00
00fch lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0100h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428880h:jmp64]                encoding(5 bytes) = e8 7b 87 42 5f
0105h mov rdx,7FFDDB835B80h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b80h:imm64]         encoding(10 bytes) = 48 ba 80 5b 83 db fd 7f 00 00
010fh mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0113h mov rcx,1F96AFE70C8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70c8h:imm64]          encoding(10 bytes) = 48 b9 c8 70 fe 6a f9 01 00 00
011dh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0120h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428850h:jmp64]                encoding(5 bytes) = e8 2b 87 42 5f
0125h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0128h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012bh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
012eh mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
0138h call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC000h:jmp64]        encoding(5 bytes) = e8 c3 be ff ff
013dh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0140h mov rcx,1F96AFE70D0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70d0h:imm64]          encoding(10 bytes) = 48 b9 d0 70 fe 6a f9 01 00 00
014ah mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014dh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0150h jne short 01a3h               ; JNE(Jne_rel8_64) [1A3h:jmp64]                        encoding(2 bytes) = 75 51
0152h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
015ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 df 95 42 5f
0161h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0164h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
016eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0171h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0174h je near ptr 02eah             ; JE(Je_rel32_64) [2EAh:jmp64]                         encoding(6 bytes) = 0f 84 70 01 00 00
017ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
017eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428880h:jmp64]                encoding(5 bytes) = e8 fd 86 42 5f
0183h mov rdx,7FFDDB835B88h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b88h:imm64]         encoding(10 bytes) = 48 ba 88 5b 83 db fd 7f 00 00
018dh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0191h mov rcx,1F96AFE70D0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70d0h:imm64]          encoding(10 bytes) = 48 b9 d0 70 fe 6a f9 01 00 00
019bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
019eh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428850h:jmp64]                encoding(5 bytes) = e8 ad 86 42 5f
01a3h mov rcx,1F96AFE70D8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70d8h:imm64]          encoding(10 bytes) = 48 b9 d8 70 fe 6a f9 01 00 00
01adh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b0h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b3h jne short 0209h               ; JNE(Jne_rel8_64) [209h:jmp64]                        encoding(2 bytes) = 75 54
01b5h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
01bfh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 7c 95 42 5f
01c4h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01c7h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
01d1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d4h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01d7h je near ptr 02f3h             ; JE(Je_rel32_64) [2F3h:jmp64]                         encoding(6 bytes) = 0f 84 16 01 00 00
01ddh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428880h:jmp64]                encoding(5 bytes) = e8 9a 86 42 5f
01e6h mov rdx,7FFDDB835B90h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b90h:imm64]         encoding(10 bytes) = 48 ba 90 5b 83 db fd 7f 00 00
01f0h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01f4h mov rcx,1F96AFE70D8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70d8h:imm64]          encoding(10 bytes) = 48 b9 d8 70 fe 6a f9 01 00 00
01feh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0201h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428850h:jmp64]                encoding(5 bytes) = e8 4a 86 42 5f
0206h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0209h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
020ch mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
020fh mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
0219h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFDA08h:jmp64]        encoding(5 bytes) = e8 ea d7 ff ff
021eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0221h mov rcx,1F96AFE70E0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70e0h:imm64]          encoding(10 bytes) = 48 b9 e0 70 fe 6a f9 01 00 00
022bh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
022eh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0231h jne short 0284h               ; JNE(Jne_rel8_64) [284h:jmp64]                        encoding(2 bytes) = 75 51
0233h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
023dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 fe 94 42 5f
0242h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0245h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
024fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0252h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0255h je near ptr 02fch             ; JE(Je_rel32_64) [2FCh:jmp64]                         encoding(6 bytes) = 0f 84 a1 00 00 00
025bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
025fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428880h:jmp64]                encoding(5 bytes) = e8 1c 86 42 5f
0264h mov rdx,7FFDDB835B98h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835b98h:imm64]         encoding(10 bytes) = 48 ba 98 5b 83 db fd 7f 00 00
026eh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0272h mov rcx,1F96AFE70E0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70e0h:imm64]          encoding(10 bytes) = 48 b9 e0 70 fe 6a f9 01 00 00
027ch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
027fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428850h:jmp64]                encoding(5 bytes) = e8 cc 85 42 5f
0284h mov rcx,7FFDDB9C6528h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6528h:imm64]         encoding(10 bytes) = 48 b9 28 65 9c db fd 7f 00 00
028eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429740h:jmp64]                encoding(5 bytes) = e8 ad 94 42 5f
0293h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0296h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
029ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
029dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428880h:jmp64]                encoding(5 bytes) = e8 de 85 42 5f
02a2h mov r9,7FFDDB835D28h          ; MOV(Mov_r64_imm64) [R9,7ffddb835d28h:imm64]          encoding(10 bytes) = 49 b9 28 5d 83 db fd 7f 00 00
02ach mov [rbp+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),R9]         encoding(4 bytes) = 4c 89 4d 18
02b0h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
02b3h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02b6h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02b9h mov rcx,7FFDDB9C6640h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6640h:imm64]         encoding(10 bytes) = 48 b9 40 66 9c db fd 7f 00 00
02c3h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
02cdh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
02d1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
02d2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
02d3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
02d4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
02d5h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
02d8h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
02dbh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918E40h:jmp64]        encoding(5 bytes) = e8 60 8b 91 ff
02e0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02e1h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
02e4h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918E40h:jmp64]        encoding(5 bytes) = e8 57 8b 91 ff
02e9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02eah mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
02edh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918E40h:jmp64]        encoding(5 bytes) = e8 4e 8b 91 ff
02f2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02f3h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
02f6h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918E40h:jmp64]        encoding(5 bytes) = e8 45 8b 91 ff
02fbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02fch mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
02ffh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918E40h:jmp64]        encoding(5 bytes) = e8 3c 8b 91 ff
0304h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[773]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0x18,0xEE,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0x97,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x34,0x98,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xE1,0x9A,0x42,0x5F,0x48,0xB9,0xC0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0x96,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x3F,0x02,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xDE,0x87,0x42,0x5F,0x48,0xBA,0x78,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xC0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x8E,0x87,0x42,0x5F,0x48,0xB9,0xC8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0x96,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE5,0x01,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x7B,0x87,0x42,0x5F,0x48,0xBA,0x80,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xC8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x2B,0x87,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC3,0xBE,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xD0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDF,0x95,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x70,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xFD,0x86,0x42,0x5F,0x48,0xBA,0x88,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xD0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xAD,0x86,0x42,0x5F,0x48,0xB9,0xD8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0x95,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x16,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x9A,0x86,0x42,0x5F,0x48,0xBA,0x90,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xD8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x4A,0x86,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEA,0xD7,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xE0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0x94,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA1,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x1C,0x86,0x42,0x5F,0x48,0xBA,0x98,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xE0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xCC,0x85,0x42,0x5F,0x48,0xB9,0x28,0x65,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAD,0x94,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0xDE,0x85,0x42,0x5F,0x49,0xB9,0x28,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4D,0x18,0x4C,0x8B,0xCD,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x40,0x66,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x60,0x8B,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x57,0x8B,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x4E,0x8B,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x45,0x8B,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x3C,0x8B,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N5>> bitcombo(N5 n)
; location: [7FFDDB83B4A0h, 7FFDDB83B89Bh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000fh mov rcx,7FFDDB9AEED8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9aeed8h:imm64]         encoding(10 bytes) = 48 b9 d8 ee 9a db fd 7f 00 00
0019h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 f2 8f 42 5f
001eh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0021h movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0027h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
002ah mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0034h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0039h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F429140h:jmp64]                encoding(5 bytes) = e8 02 91 42 5f
003eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0041h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0043h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0046h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004dh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0057h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F429410h:jmp64]                encoding(5 bytes) = e8 af 93 42 5f
0061h mov rcx,1F96AFE70E8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70e8h:imm64]          encoding(10 bytes) = 48 b9 e8 70 fe 6a f9 01 00 00
006bh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006eh test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0071h jne short 00c4h               ; JNE(Jne_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = 75 51
0073h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
007dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 8e 8f 42 5f
0082h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0085h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
008fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0092h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0095h je near ptr 03bdh             ; JE(Je_rel32_64) [3BDh:jmp64]                         encoding(6 bytes) = 0f 84 22 03 00 00
009bh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 ac 80 42 5f
00a4h mov rdx,7FFDDB835BA0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ba0h:imm64]         encoding(10 bytes) = 48 ba a0 5b 83 db fd 7f 00 00
00aeh mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b2h mov rcx,1F96AFE70E8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70e8h:imm64]          encoding(10 bytes) = 48 b9 e8 70 fe 6a f9 01 00 00
00bch mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bfh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 5c 80 42 5f
00c4h mov rcx,1F96AFE70F0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70f0h:imm64]          encoding(10 bytes) = 48 b9 f0 70 fe 6a f9 01 00 00
00ceh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d4h jne short 012ah               ; JNE(Jne_rel8_64) [12Ah:jmp64]                        encoding(2 bytes) = 75 54
00d6h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
00e0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 2b 8f 42 5f
00e5h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00e8h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
00f2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00f8h je near ptr 03c6h             ; JE(Je_rel32_64) [3C6h:jmp64]                         encoding(6 bytes) = 0f 84 c8 02 00 00
00feh lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0102h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 49 80 42 5f
0107h mov rdx,7FFDDB835BA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ba8h:imm64]         encoding(10 bytes) = 48 ba a8 5b 83 db fd 7f 00 00
0111h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0115h mov rcx,1F96AFE70F0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70f0h:imm64]          encoding(10 bytes) = 48 b9 f0 70 fe 6a f9 01 00 00
011fh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0122h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 f9 7f 42 5f
0127h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
012ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012dh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0130h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
013ah call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB8D0h:jmp64]        encoding(5 bytes) = e8 91 b7 ff ff
013fh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0142h mov rcx,1F96AFE70F8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70f8h:imm64]          encoding(10 bytes) = 48 b9 f8 70 fe 6a f9 01 00 00
014ch mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014fh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0152h jne short 01a5h               ; JNE(Jne_rel8_64) [1A5h:jmp64]                        encoding(2 bytes) = 75 51
0154h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
015eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 ad 8e 42 5f
0163h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0166h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0170h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0173h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0176h je near ptr 03cfh             ; JE(Je_rel32_64) [3CFh:jmp64]                         encoding(6 bytes) = 0f 84 53 02 00 00
017ch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0180h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 cb 7f 42 5f
0185h mov rdx,7FFDDB835BB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bb0h:imm64]         encoding(10 bytes) = 48 ba b0 5b 83 db fd 7f 00 00
018fh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0193h mov rcx,1F96AFE70F8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe70f8h:imm64]          encoding(10 bytes) = 48 b9 f8 70 fe 6a f9 01 00 00
019dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a0h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 7b 7f 42 5f
01a5h mov rcx,1F96AFE7100h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7100h:imm64]          encoding(10 bytes) = 48 b9 00 71 fe 6a f9 01 00 00
01afh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b2h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b5h jne short 020bh               ; JNE(Jne_rel8_64) [20Bh:jmp64]                        encoding(2 bytes) = 75 54
01b7h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
01c1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 4a 8e 42 5f
01c6h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01c9h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
01d3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01d9h je near ptr 03d8h             ; JE(Je_rel32_64) [3D8h:jmp64]                         encoding(6 bytes) = 0f 84 f9 01 00 00
01dfh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 68 7f 42 5f
01e8h mov rdx,7FFDDB835BB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bb8h:imm64]         encoding(10 bytes) = 48 ba b8 5b 83 db fd 7f 00 00
01f2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01f6h mov rcx,1F96AFE7100h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7100h:imm64]          encoding(10 bytes) = 48 b9 00 71 fe 6a f9 01 00 00
0200h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0203h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 18 7f 42 5f
0208h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
020bh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
020eh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0211h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
021bh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD2D8h:jmp64]        encoding(5 bytes) = e8 b8 d0 ff ff
0220h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0223h mov rcx,1F96AFE7108h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7108h:imm64]          encoding(10 bytes) = 48 b9 08 71 fe 6a f9 01 00 00
022dh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0230h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0233h jne short 0286h               ; JNE(Jne_rel8_64) [286h:jmp64]                        encoding(2 bytes) = 75 51
0235h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
023fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 cc 8d 42 5f
0244h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0247h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0251h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0254h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0257h je near ptr 03e1h             ; JE(Je_rel32_64) [3E1h:jmp64]                         encoding(6 bytes) = 0f 84 84 01 00 00
025dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0261h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 ea 7e 42 5f
0266h mov rdx,7FFDDB835BC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bc0h:imm64]         encoding(10 bytes) = 48 ba c0 5b 83 db fd 7f 00 00
0270h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0274h mov rcx,1F96AFE7108h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7108h:imm64]          encoding(10 bytes) = 48 b9 08 71 fe 6a f9 01 00 00
027eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0281h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 9a 7e 42 5f
0286h mov rcx,1F96AFE7110h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7110h:imm64]          encoding(10 bytes) = 48 b9 10 71 fe 6a f9 01 00 00
0290h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0293h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0296h jne short 02ech               ; JNE(Jne_rel8_64) [2ECh:jmp64]                        encoding(2 bytes) = 75 54
0298h mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
02a2h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 69 8d 42 5f
02a7h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02aah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
02b4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02b7h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02bah je near ptr 03eah             ; JE(Je_rel32_64) [3EAh:jmp64]                         encoding(6 bytes) = 0f 84 2a 01 00 00
02c0h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02c4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 87 7e 42 5f
02c9h mov rdx,7FFDDB835BC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bc8h:imm64]         encoding(10 bytes) = 48 ba c8 5b 83 db fd 7f 00 00
02d3h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02d7h mov rcx,1F96AFE7110h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7110h:imm64]          encoding(10 bytes) = 48 b9 10 71 fe 6a f9 01 00 00
02e1h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02e4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 37 7e 42 5f
02e9h mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02ech mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02efh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f2h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
02fch call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD2D8h:jmp64]        encoding(5 bytes) = e8 d7 cf ff ff
0301h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0304h mov rcx,1F96AFE7118h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7118h:imm64]          encoding(10 bytes) = 48 b9 18 71 fe 6a f9 01 00 00
030eh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0311h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0314h jne short 0367h               ; JNE(Jne_rel8_64) [367h:jmp64]                        encoding(2 bytes) = 75 51
0316h mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
0320h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 eb 8c 42 5f
0325h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0328h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0332h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0335h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0338h je near ptr 03f3h             ; JE(Je_rel32_64) [3F3h:jmp64]                         encoding(6 bytes) = 0f 84 b5 00 00 00
033eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0342h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 09 7e 42 5f
0347h mov rdx,7FFDDB835BD0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bd0h:imm64]         encoding(10 bytes) = 48 ba d0 5b 83 db fd 7f 00 00
0351h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0355h mov rcx,1F96AFE7118h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7118h:imm64]          encoding(10 bytes) = 48 b9 18 71 fe 6a f9 01 00 00
035fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0362h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F428120h:jmp64]                encoding(5 bytes) = e8 b9 7d 42 5f
0367h mov rcx,7FFDDB9C6900h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6900h:imm64]         encoding(10 bytes) = 48 b9 00 69 9c db fd 7f 00 00
0371h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F429010h:jmp64]                encoding(5 bytes) = e8 9a 8c 42 5f
0376h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0379h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
037dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0380h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F428150h:jmp64]                encoding(5 bytes) = e8 cb 7d 42 5f
0385h mov r9,7FFDDB835D40h          ; MOV(Mov_r64_imm64) [R9,7ffddb835d40h:imm64]          encoding(10 bytes) = 49 b9 40 5d 83 db fd 7f 00 00
038fh mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
0393h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0396h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0399h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
039ch mov rcx,7FFDDB9C6A18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6a18h:imm64]         encoding(10 bytes) = 48 b9 18 6a 9c db fd 7f 00 00
03a6h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
03b0h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
03b4h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
03b5h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
03b6h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
03b7h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
03b8h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
03bah jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
03bdh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
03c0h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 4b 83 91 ff
03c5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03c6h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
03c9h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 42 83 91 ff
03ceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03cfh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
03d2h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 39 83 91 ff
03d7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03d8h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
03dbh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 30 83 91 ff
03e0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03e1h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
03e4h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 27 83 91 ff
03e9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03eah mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
03edh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 1e 83 91 ff
03f2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03f3h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
03f6h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF918710h:jmp64]        encoding(5 bytes) = e8 15 83 91 ff
03fbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1020]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0xD8,0xEE,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF2,0x8F,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x02,0x91,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xAF,0x93,0x42,0x5F,0x48,0xB9,0xE8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8E,0x8F,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x22,0x03,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xAC,0x80,0x42,0x5F,0x48,0xBA,0xA0,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xE8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x5C,0x80,0x42,0x5F,0x48,0xB9,0xF0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2B,0x8F,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC8,0x02,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x49,0x80,0x42,0x5F,0x48,0xBA,0xA8,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xF0,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0xF9,0x7F,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x91,0xB7,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xF8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAD,0x8E,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x53,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xCB,0x7F,0x42,0x5F,0x48,0xBA,0xB0,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xF8,0x70,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x7B,0x7F,0x42,0x5F,0x48,0xB9,0x00,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4A,0x8E,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xF9,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x68,0x7F,0x42,0x5F,0x48,0xBA,0xB8,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x00,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x18,0x7F,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0xD0,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x08,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x8D,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x84,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xEA,0x7E,0x42,0x5F,0x48,0xBA,0xC0,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x08,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x9A,0x7E,0x42,0x5F,0x48,0xB9,0x10,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x69,0x8D,0x42,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2A,0x01,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0x87,0x7E,0x42,0x5F,0x48,0xBA,0xC8,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x10,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0x37,0x7E,0x42,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD7,0xCF,0xFF,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0x18,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEB,0x8C,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB5,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x09,0x7E,0x42,0x5F,0x48,0xBA,0xD0,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x18,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB9,0x7D,0x42,0x5F,0x48,0xB9,0x00,0x69,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9A,0x8C,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xCB,0x7D,0x42,0x5F,0x49,0xB9,0x40,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x18,0x6A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x4B,0x83,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x42,0x83,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x39,0x83,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x30,0x83,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x27,0x83,0x91,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0x1E,0x83,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x15,0x83,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N6>> bitcombo(N6 n)
; location: [7FFDDB83B8C0h, 7FFDDB83BDB2h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov [rsp+60h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 60
0011h mov rcx,7FFDDB9AEF98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9aef98h:imm64]         encoding(10 bytes) = 48 b9 98 ef 9a db fd 7f 00 00
001bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 d0 8b 42 5f
0020h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0023h movsx rcx,byte ptr [rsp+60h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 60
0029h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
002ch mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0036h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F428D20h:jmp64]                encoding(5 bytes) = e8 e0 8c 42 5f
0040h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0043h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0045h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0048h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004fh mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0059h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005eh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F428FF0h:jmp64]                encoding(5 bytes) = e8 8d 8f 42 5f
0063h mov rcx,1F96AFE7120h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7120h:imm64]          encoding(10 bytes) = 48 b9 20 71 fe 6a f9 01 00 00
006dh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0070h test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0073h jne short 00c6h               ; JNE(Jne_rel8_64) [C6h:jmp64]                         encoding(2 bytes) = 75 51
0075h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
007fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 6c 8b 42 5f
0084h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0087h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0091h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0094h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0097h je near ptr 04a2h             ; JE(Je_rel32_64) [4A2h:jmp64]                         encoding(6 bytes) = 0f 84 05 04 00 00
009dh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
00a1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 8a 7c 42 5f
00a6h mov rdx,7FFDDB835BD8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bd8h:imm64]         encoding(10 bytes) = 48 ba d8 5b 83 db fd 7f 00 00
00b0h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b4h mov rcx,1F96AFE7120h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7120h:imm64]          encoding(10 bytes) = 48 b9 20 71 fe 6a f9 01 00 00
00beh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00c1h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 3a 7c 42 5f
00c6h mov rcx,1F96AFE7128h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7128h:imm64]          encoding(10 bytes) = 48 b9 28 71 fe 6a f9 01 00 00
00d0h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d3h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d6h jne short 012ch               ; JNE(Jne_rel8_64) [12Ch:jmp64]                        encoding(2 bytes) = 75 54
00d8h mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
00e2h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 09 8b 42 5f
00e7h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00eah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
00f4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f7h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00fah je near ptr 04abh             ; JE(Je_rel32_64) [4ABh:jmp64]                         encoding(6 bytes) = 0f 84 ab 03 00 00
0100h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0104h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 27 7c 42 5f
0109h mov rdx,7FFDDB835BE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835be0h:imm64]         encoding(10 bytes) = 48 ba e0 5b 83 db fd 7f 00 00
0113h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0117h mov rcx,1F96AFE7128h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7128h:imm64]          encoding(10 bytes) = 48 b9 28 71 fe 6a f9 01 00 00
0121h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0124h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 d7 7b 42 5f
0129h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
012ch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012fh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0132h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
013ch call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB4B0h:jmp64]        encoding(5 bytes) = e8 6f b3 ff ff
0141h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0144h mov rcx,1F96AFE7130h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7130h:imm64]          encoding(10 bytes) = 48 b9 30 71 fe 6a f9 01 00 00
014eh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0151h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0154h jne short 01a7h               ; JNE(Jne_rel8_64) [1A7h:jmp64]                        encoding(2 bytes) = 75 51
0156h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
0160h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 8b 8a 42 5f
0165h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0168h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0172h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0175h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0178h je near ptr 04b4h             ; JE(Je_rel32_64) [4B4h:jmp64]                         encoding(6 bytes) = 0f 84 36 03 00 00
017eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0182h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 a9 7b 42 5f
0187h mov rdx,7FFDDB835BE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835be8h:imm64]         encoding(10 bytes) = 48 ba e8 5b 83 db fd 7f 00 00
0191h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0195h mov rcx,1F96AFE7130h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7130h:imm64]          encoding(10 bytes) = 48 b9 30 71 fe 6a f9 01 00 00
019fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 59 7b 42 5f
01a7h mov rcx,1F96AFE7138h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7138h:imm64]          encoding(10 bytes) = 48 b9 38 71 fe 6a f9 01 00 00
01b1h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b4h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b7h jne short 020dh               ; JNE(Jne_rel8_64) [20Dh:jmp64]                        encoding(2 bytes) = 75 54
01b9h mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
01c3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 28 8a 42 5f
01c8h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01cbh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
01d5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d8h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01dbh je near ptr 04bdh             ; JE(Je_rel32_64) [4BDh:jmp64]                         encoding(6 bytes) = 0f 84 dc 02 00 00
01e1h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 46 7b 42 5f
01eah mov rdx,7FFDDB835BF0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bf0h:imm64]         encoding(10 bytes) = 48 ba f0 5b 83 db fd 7f 00 00
01f4h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01f8h mov rcx,1F96AFE7138h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7138h:imm64]          encoding(10 bytes) = 48 b9 38 71 fe 6a f9 01 00 00
0202h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0205h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 f6 7a 42 5f
020ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
020dh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0210h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0213h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
021dh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCEB8h:jmp64]        encoding(5 bytes) = e8 96 cc ff ff
0222h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0225h mov rcx,1F96AFE7140h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7140h:imm64]          encoding(10 bytes) = 48 b9 40 71 fe 6a f9 01 00 00
022fh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0232h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0235h jne short 0288h               ; JNE(Jne_rel8_64) [288h:jmp64]                        encoding(2 bytes) = 75 51
0237h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
0241h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 aa 89 42 5f
0246h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0249h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0253h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0256h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0259h je near ptr 04c6h             ; JE(Je_rel32_64) [4C6h:jmp64]                         encoding(6 bytes) = 0f 84 67 02 00 00
025fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0263h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 c8 7a 42 5f
0268h mov rdx,7FFDDB835BF8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835bf8h:imm64]         encoding(10 bytes) = 48 ba f8 5b 83 db fd 7f 00 00
0272h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0276h mov rcx,1F96AFE7140h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7140h:imm64]          encoding(10 bytes) = 48 b9 40 71 fe 6a f9 01 00 00
0280h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0283h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 78 7a 42 5f
0288h mov rcx,1F96AFE7148h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7148h:imm64]          encoding(10 bytes) = 48 b9 48 71 fe 6a f9 01 00 00
0292h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0295h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0298h jne short 02eeh               ; JNE(Jne_rel8_64) [2EEh:jmp64]                        encoding(2 bytes) = 75 54
029ah mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
02a4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 47 89 42 5f
02a9h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02ach mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
02b6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02b9h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02bch je near ptr 04cfh             ; JE(Je_rel32_64) [4CFh:jmp64]                         encoding(6 bytes) = 0f 84 0d 02 00 00
02c2h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02c6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 65 7a 42 5f
02cbh mov rdx,7FFDDB835C00h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c00h:imm64]         encoding(10 bytes) = 48 ba 00 5c 83 db fd 7f 00 00
02d5h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02d9h mov rcx,1F96AFE7148h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7148h:imm64]          encoding(10 bytes) = 48 b9 48 71 fe 6a f9 01 00 00
02e3h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02e6h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 15 7a 42 5f
02ebh mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02eeh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02f1h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f4h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
02feh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCEB8h:jmp64]        encoding(5 bytes) = e8 b5 cb ff ff
0303h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0306h mov rcx,1F96AFE7150h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7150h:imm64]          encoding(10 bytes) = 48 b9 50 71 fe 6a f9 01 00 00
0310h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0313h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0316h jne short 0369h               ; JNE(Jne_rel8_64) [369h:jmp64]                        encoding(2 bytes) = 75 51
0318h mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
0322h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 c9 88 42 5f
0327h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
032ah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0334h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0337h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
033ah je near ptr 04d8h             ; JE(Je_rel32_64) [4D8h:jmp64]                         encoding(6 bytes) = 0f 84 98 01 00 00
0340h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0344h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 e7 79 42 5f
0349h mov rdx,7FFDDB835C08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c08h:imm64]         encoding(10 bytes) = 48 ba 08 5c 83 db fd 7f 00 00
0353h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0357h mov rcx,1F96AFE7150h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7150h:imm64]          encoding(10 bytes) = 48 b9 50 71 fe 6a f9 01 00 00
0361h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0364h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 97 79 42 5f
0369h mov rcx,1F96AFE7158h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7158h:imm64]          encoding(10 bytes) = 48 b9 58 71 fe 6a f9 01 00 00
0373h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0376h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0379h jne short 03cfh               ; JNE(Jne_rel8_64) [3CFh:jmp64]                        encoding(2 bytes) = 75 54
037bh mov rcx,7FFDDB9C4068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4068h:imm64]         encoding(10 bytes) = 48 b9 68 40 9c db fd 7f 00 00
0385h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 66 88 42 5f
038ah mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
038dh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0397h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
039ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
039dh je near ptr 04e1h             ; JE(Je_rel32_64) [4E1h:jmp64]                         encoding(6 bytes) = 0f 84 3e 01 00 00
03a3h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
03a7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 84 79 42 5f
03ach mov rdx,7FFDDB835C10h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c10h:imm64]         encoding(10 bytes) = 48 ba 10 5c 83 db fd 7f 00 00
03b6h mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
03bah mov rcx,1F96AFE7158h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7158h:imm64]          encoding(10 bytes) = 48 b9 58 71 fe 6a f9 01 00 00
03c4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
03c7h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 34 79 42 5f
03cch mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
03cfh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
03d2h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
03d5h mov rcx,7FFDDB9C4180h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4180h:imm64]         encoding(10 bytes) = 48 b9 80 41 9c db fd 7f 00 00
03dfh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCEB8h:jmp64]        encoding(5 bytes) = e8 d4 ca ff ff
03e4h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
03e7h mov rcx,1F96AFE7160h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7160h:imm64]          encoding(10 bytes) = 48 b9 60 71 fe 6a f9 01 00 00
03f1h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03f4h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
03f7h jne short 044ah               ; JNE(Jne_rel8_64) [44Ah:jmp64]                        encoding(2 bytes) = 75 51
03f9h mov rcx,7FFDDB9C41D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c41d0h:imm64]         encoding(10 bytes) = 48 b9 d0 41 9c db fd 7f 00 00
0403h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 e8 87 42 5f
0408h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
040bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0415h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0418h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
041bh je near ptr 04eah             ; JE(Je_rel32_64) [4EAh:jmp64]                         encoding(6 bytes) = 0f 84 c9 00 00 00
0421h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0425h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 06 79 42 5f
042ah mov rdx,7FFDDB835C18h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c18h:imm64]         encoding(10 bytes) = 48 ba 18 5c 83 db fd 7f 00 00
0434h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0438h mov rcx,1F96AFE7160h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7160h:imm64]          encoding(10 bytes) = 48 b9 60 71 fe 6a f9 01 00 00
0442h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0445h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F427D00h:jmp64]                encoding(5 bytes) = e8 b6 78 42 5f
044ah mov rcx,7FFDDB9C6CD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6cd8h:imm64]         encoding(10 bytes) = 48 b9 d8 6c 9c db fd 7f 00 00
0454h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F428BF0h:jmp64]                encoding(5 bytes) = e8 97 87 42 5f
0459h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
045ch lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0460h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0463h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427D30h:jmp64]                encoding(5 bytes) = e8 c8 78 42 5f
0468h mov r9,7FFDDB835D58h          ; MOV(Mov_r64_imm64) [R9,7ffddb835d58h:imm64]          encoding(10 bytes) = 49 b9 58 5d 83 db fd 7f 00 00
0472h mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
0476h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0479h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
047ch mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
047fh mov rcx,7FFDDB9C6DF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6df0h:imm64]         encoding(10 bytes) = 48 b9 f0 6d 9c db fd 7f 00 00
0489h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
0493h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0497h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0498h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0499h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
049ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
049bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
049dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
049fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
04a2h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
04a5h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 46 7e 91 ff
04aah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04abh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
04aeh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 3d 7e 91 ff
04b3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04b4h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04b7h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 34 7e 91 ff
04bch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04bdh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
04c0h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 2b 7e 91 ff
04c5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04c6h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04c9h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 22 7e 91 ff
04ceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04cfh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
04d2h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 19 7e 91 ff
04d7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04d8h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04dbh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 10 7e 91 ff
04e0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04e1h mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
04e4h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 07 7e 91 ff
04e9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04eah mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04edh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9182F0h:jmp64]        encoding(5 bytes) = e8 fe 7d 91 ff
04f2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1267]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x60,0x48,0xB9,0x98,0xEF,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD0,0x8B,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x60,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE0,0x8C,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x8D,0x8F,0x42,0x5F,0x48,0xB9,0x20,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6C,0x8B,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x05,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x8A,0x7C,0x42,0x5F,0x48,0xBA,0xD8,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x20,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x3A,0x7C,0x42,0x5F,0x48,0xB9,0x28,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x09,0x8B,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xAB,0x03,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x27,0x7C,0x42,0x5F,0x48,0xBA,0xE0,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0x28,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0xD7,0x7B,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6F,0xB3,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0x30,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8B,0x8A,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x36,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xA9,0x7B,0x42,0x5F,0x48,0xBA,0xE8,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x30,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x59,0x7B,0x42,0x5F,0x48,0xB9,0x38,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0x8A,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xDC,0x02,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x46,0x7B,0x42,0x5F,0x48,0xBA,0xF0,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x38,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xF6,0x7A,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0xCC,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x40,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAA,0x89,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x67,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xC8,0x7A,0x42,0x5F,0x48,0xBA,0xF8,0x5B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x40,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x78,0x7A,0x42,0x5F,0x48,0xB9,0x48,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x47,0x89,0x42,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x0D,0x02,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0x65,0x7A,0x42,0x5F,0x48,0xBA,0x00,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x48,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0x15,0x7A,0x42,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0xCB,0xFF,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0x50,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC9,0x88,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x98,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xE7,0x79,0x42,0x5F,0x48,0xBA,0x08,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x50,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x97,0x79,0x42,0x5F,0x48,0xB9,0x58,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x40,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x66,0x88,0x42,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x3E,0x01,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0x84,0x79,0x42,0x5F,0x48,0xBA,0x10,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0x58,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0x34,0x79,0x42,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x80,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0xCA,0xFF,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0x60,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xD0,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE8,0x87,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC9,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x06,0x79,0x42,0x5F,0x48,0xBA,0x18,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x60,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB6,0x78,0x42,0x5F,0x48,0xB9,0xD8,0x6C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x97,0x87,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC8,0x78,0x42,0x5F,0x49,0xB9,0x58,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD7,0x4C,0x8B,0xC7,0x48,0xB9,0xF0,0x6D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x46,0x7E,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x3D,0x7E,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x34,0x7E,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x2B,0x7E,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x22,0x7E,0x91,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0x19,0x7E,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x10,0x7E,0x91,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x07,0x7E,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xFE,0x7D,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N7>> bitcombo(N7 n)
; location: [7FFDDB83BDE0h, 7FFDDB83C3CBh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov [rsp+60h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 60
0013h mov rcx,7FFDDB9AF058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9af058h:imm64]         encoding(10 bytes) = 48 b9 58 f0 9a db fd 7f 00 00
001dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 ae 86 42 5f
0022h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0025h movsx rcx,byte ptr [rsp+60h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 60
002bh mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
002eh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0038h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F428800h:jmp64]                encoding(5 bytes) = e8 be 87 42 5f
0042h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0045h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0047h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
004ah mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
0051h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
005bh mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0060h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F428AD0h:jmp64]                encoding(5 bytes) = e8 6b 8a 42 5f
0065h mov rcx,1F96AFE7168h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7168h:imm64]          encoding(10 bytes) = 48 b9 68 71 fe 6a f9 01 00 00
006fh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0072h test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0075h jne short 00c8h               ; JNE(Jne_rel8_64) [C8h:jmp64]                         encoding(2 bytes) = 75 51
0077h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
0081h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 4a 86 42 5f
0086h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0089h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0093h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0096h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0099h je near ptr 0589h             ; JE(Je_rel32_64) [589h:jmp64]                         encoding(6 bytes) = 0f 84 ea 04 00 00
009fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
00a3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 68 77 42 5f
00a8h mov rdx,7FFDDB835C20h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c20h:imm64]         encoding(10 bytes) = 48 ba 20 5c 83 db fd 7f 00 00
00b2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b6h mov rcx,1F96AFE7168h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7168h:imm64]          encoding(10 bytes) = 48 b9 68 71 fe 6a f9 01 00 00
00c0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00c3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 18 77 42 5f
00c8h mov rcx,1F96AFE7170h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7170h:imm64]          encoding(10 bytes) = 48 b9 70 71 fe 6a f9 01 00 00
00d2h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d5h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d8h jne short 012eh               ; JNE(Jne_rel8_64) [12Eh:jmp64]                        encoding(2 bytes) = 75 54
00dah mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
00e4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 e7 85 42 5f
00e9h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00ech mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
00f6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f9h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00fch je near ptr 0592h             ; JE(Je_rel32_64) [592h:jmp64]                         encoding(6 bytes) = 0f 84 90 04 00 00
0102h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0106h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 05 77 42 5f
010bh mov rdx,7FFDDB835C28h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c28h:imm64]         encoding(10 bytes) = 48 ba 28 5c 83 db fd 7f 00 00
0115h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0119h mov rcx,1F96AFE7170h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7170h:imm64]          encoding(10 bytes) = 48 b9 70 71 fe 6a f9 01 00 00
0123h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0126h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 b5 76 42 5f
012bh mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
012eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0131h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0134h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
013eh call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAF90h:jmp64]        encoding(5 bytes) = e8 4d ae ff ff
0143h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0146h mov rcx,1F96AFE7178h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7178h:imm64]          encoding(10 bytes) = 48 b9 78 71 fe 6a f9 01 00 00
0150h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0153h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0156h jne short 01a9h               ; JNE(Jne_rel8_64) [1A9h:jmp64]                        encoding(2 bytes) = 75 51
0158h mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
0162h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 69 85 42 5f
0167h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
016ah mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0174h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0177h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
017ah je near ptr 059bh             ; JE(Je_rel32_64) [59Bh:jmp64]                         encoding(6 bytes) = 0f 84 1b 04 00 00
0180h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0184h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 87 76 42 5f
0189h mov rdx,7FFDDB835C30h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c30h:imm64]         encoding(10 bytes) = 48 ba 30 5c 83 db fd 7f 00 00
0193h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0197h mov rcx,1F96AFE7178h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7178h:imm64]          encoding(10 bytes) = 48 b9 78 71 fe 6a f9 01 00 00
01a1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 37 76 42 5f
01a9h mov rcx,1F96AFE7180h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7180h:imm64]          encoding(10 bytes) = 48 b9 80 71 fe 6a f9 01 00 00
01b3h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b6h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b9h jne short 020fh               ; JNE(Jne_rel8_64) [20Fh:jmp64]                        encoding(2 bytes) = 75 54
01bbh mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
01c5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 06 85 42 5f
01cah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01cdh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
01d7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01dah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01ddh je near ptr 05a4h             ; JE(Je_rel32_64) [5A4h:jmp64]                         encoding(6 bytes) = 0f 84 c1 03 00 00
01e3h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 24 76 42 5f
01ech mov rdx,7FFDDB835C38h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c38h:imm64]         encoding(10 bytes) = 48 ba 38 5c 83 db fd 7f 00 00
01f6h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01fah mov rcx,1F96AFE7180h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7180h:imm64]          encoding(10 bytes) = 48 b9 80 71 fe 6a f9 01 00 00
0204h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0207h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 d4 75 42 5f
020ch mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
020fh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0212h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0215h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
021fh call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC998h:jmp64]        encoding(5 bytes) = e8 74 c7 ff ff
0224h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0227h mov rcx,1F96AFE7188h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7188h:imm64]          encoding(10 bytes) = 48 b9 88 71 fe 6a f9 01 00 00
0231h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0234h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0237h jne short 028ah               ; JNE(Jne_rel8_64) [28Ah:jmp64]                        encoding(2 bytes) = 75 51
0239h mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
0243h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 88 84 42 5f
0248h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
024bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0255h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0258h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
025bh je near ptr 05adh             ; JE(Je_rel32_64) [5ADh:jmp64]                         encoding(6 bytes) = 0f 84 4c 03 00 00
0261h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0265h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 a6 75 42 5f
026ah mov rdx,7FFDDB835C40h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c40h:imm64]         encoding(10 bytes) = 48 ba 40 5c 83 db fd 7f 00 00
0274h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0278h mov rcx,1F96AFE7188h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7188h:imm64]          encoding(10 bytes) = 48 b9 88 71 fe 6a f9 01 00 00
0282h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0285h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 56 75 42 5f
028ah mov rcx,1F96AFE7190h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7190h:imm64]          encoding(10 bytes) = 48 b9 90 71 fe 6a f9 01 00 00
0294h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0297h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
029ah jne short 02f0h               ; JNE(Jne_rel8_64) [2F0h:jmp64]                        encoding(2 bytes) = 75 54
029ch mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
02a6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 25 84 42 5f
02abh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02aeh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
02b8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02bbh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02beh je near ptr 05b6h             ; JE(Je_rel32_64) [5B6h:jmp64]                         encoding(6 bytes) = 0f 84 f2 02 00 00
02c4h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02c8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 43 75 42 5f
02cdh mov rdx,7FFDDB835C48h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c48h:imm64]         encoding(10 bytes) = 48 ba 48 5c 83 db fd 7f 00 00
02d7h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02dbh mov rcx,1F96AFE7190h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7190h:imm64]          encoding(10 bytes) = 48 b9 90 71 fe 6a f9 01 00 00
02e5h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02e8h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 f3 74 42 5f
02edh mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02f0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02f3h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f6h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
0300h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC998h:jmp64]        encoding(5 bytes) = e8 93 c6 ff ff
0305h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0308h mov rcx,1F96AFE7198h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7198h:imm64]          encoding(10 bytes) = 48 b9 98 71 fe 6a f9 01 00 00
0312h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0315h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0318h jne short 036bh               ; JNE(Jne_rel8_64) [36Bh:jmp64]                        encoding(2 bytes) = 75 51
031ah mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
0324h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 a7 83 42 5f
0329h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
032ch mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0336h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0339h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
033ch je near ptr 05bfh             ; JE(Je_rel32_64) [5BFh:jmp64]                         encoding(6 bytes) = 0f 84 7d 02 00 00
0342h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0346h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 c5 74 42 5f
034bh mov rdx,7FFDDB835C50h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c50h:imm64]         encoding(10 bytes) = 48 ba 50 5c 83 db fd 7f 00 00
0355h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0359h mov rcx,1F96AFE7198h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7198h:imm64]          encoding(10 bytes) = 48 b9 98 71 fe 6a f9 01 00 00
0363h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0366h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 75 74 42 5f
036bh mov rcx,1F96AFE71A0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71a0h:imm64]          encoding(10 bytes) = 48 b9 a0 71 fe 6a f9 01 00 00
0375h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0378h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
037bh jne short 03d1h               ; JNE(Jne_rel8_64) [3D1h:jmp64]                        encoding(2 bytes) = 75 54
037dh mov rcx,7FFDDB9C4068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4068h:imm64]         encoding(10 bytes) = 48 b9 68 40 9c db fd 7f 00 00
0387h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 44 83 42 5f
038ch mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
038fh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0399h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
039ch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
039fh je near ptr 05c8h             ; JE(Je_rel32_64) [5C8h:jmp64]                         encoding(6 bytes) = 0f 84 23 02 00 00
03a5h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
03a9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 62 74 42 5f
03aeh mov rdx,7FFDDB835C58h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c58h:imm64]         encoding(10 bytes) = 48 ba 58 5c 83 db fd 7f 00 00
03b8h mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
03bch mov rcx,1F96AFE71A0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71a0h:imm64]          encoding(10 bytes) = 48 b9 a0 71 fe 6a f9 01 00 00
03c6h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
03c9h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 12 74 42 5f
03ceh mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
03d1h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
03d4h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
03d7h mov rcx,7FFDDB9C4180h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4180h:imm64]         encoding(10 bytes) = 48 b9 80 41 9c db fd 7f 00 00
03e1h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC998h:jmp64]        encoding(5 bytes) = e8 b2 c5 ff ff
03e6h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
03e9h mov rcx,1F96AFE71A8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71a8h:imm64]          encoding(10 bytes) = 48 b9 a8 71 fe 6a f9 01 00 00
03f3h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03f6h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
03f9h jne short 044ch               ; JNE(Jne_rel8_64) [44Ch:jmp64]                        encoding(2 bytes) = 75 51
03fbh mov rcx,7FFDDB9C41D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c41d0h:imm64]         encoding(10 bytes) = 48 b9 d0 41 9c db fd 7f 00 00
0405h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 c6 82 42 5f
040ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
040dh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0417h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
041ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
041dh je near ptr 05d1h             ; JE(Je_rel32_64) [5D1h:jmp64]                         encoding(6 bytes) = 0f 84 ae 01 00 00
0423h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0427h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 e4 73 42 5f
042ch mov rdx,7FFDDB835C60h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c60h:imm64]         encoding(10 bytes) = 48 ba 60 5c 83 db fd 7f 00 00
0436h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
043ah mov rcx,1F96AFE71A8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71a8h:imm64]          encoding(10 bytes) = 48 b9 a8 71 fe 6a f9 01 00 00
0444h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0447h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 94 73 42 5f
044ch mov rcx,1F96AFE71B0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71b0h:imm64]          encoding(10 bytes) = 48 b9 b0 71 fe 6a f9 01 00 00
0456h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0459h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
045ch jne short 04b4h               ; JNE(Jne_rel8_64) [4B4h:jmp64]                        encoding(2 bytes) = 75 56
045eh mov rcx,7FFDDB9C44D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c44d8h:imm64]         encoding(10 bytes) = 48 b9 d8 44 9c db fd 7f 00 00
0468h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 63 82 42 5f
046dh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
0470h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
047ah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
047dh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0480h je near ptr 05dah             ; JE(Je_rel32_64) [5DAh:jmp64]                         encoding(6 bytes) = 0f 84 54 01 00 00
0486h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
048bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 80 73 42 5f
0490h mov rdx,7FFDDB835C68h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c68h:imm64]         encoding(10 bytes) = 48 ba 68 5c 83 db fd 7f 00 00
049ah mov [r12+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R12:br,DS:sr),RDX]        encoding(5 bytes) = 49 89 54 24 18
049fh mov rcx,1F96AFE71B0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71b0h:imm64]          encoding(10 bytes) = 48 b9 b0 71 fe 6a f9 01 00 00
04a9h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
04ach call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 2f 73 42 5f
04b1h mov r9,r12                    ; MOV(Mov_r64_rm64) [R9,R12]                           encoding(3 bytes) = 4d 8b cc
04b4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
04b7h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
04bah mov rcx,7FFDDB9C45F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c45f0h:imm64]         encoding(10 bytes) = 48 b9 f0 45 9c db fd 7f 00 00
04c4h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC998h:jmp64]        encoding(5 bytes) = e8 cf c4 ff ff
04c9h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
04cch mov rcx,1F96AFE71B8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71b8h:imm64]          encoding(10 bytes) = 48 b9 b8 71 fe 6a f9 01 00 00
04d6h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
04d9h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
04dch jne short 052fh               ; JNE(Jne_rel8_64) [52Fh:jmp64]                        encoding(2 bytes) = 75 51
04deh mov rcx,7FFDDB9C4640h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4640h:imm64]         encoding(10 bytes) = 48 b9 40 46 9c db fd 7f 00 00
04e8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 e3 81 42 5f
04edh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f0h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
04fah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
04fdh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0500h je near ptr 05e3h             ; JE(Je_rel32_64) [5E3h:jmp64]                         encoding(6 bytes) = 0f 84 dd 00 00 00
0506h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
050ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 01 73 42 5f
050fh mov rdx,7FFDDB835C70h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c70h:imm64]         encoding(10 bytes) = 48 ba 70 5c 83 db fd 7f 00 00
0519h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
051dh mov rcx,1F96AFE71B8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71b8h:imm64]          encoding(10 bytes) = 48 b9 b8 71 fe 6a f9 01 00 00
0527h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
052ah call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 b1 72 42 5f
052fh mov rcx,7FFDDB9C70B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c70b0h:imm64]         encoding(10 bytes) = 48 b9 b0 70 9c db fd 7f 00 00
0539h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4286D0h:jmp64]                encoding(5 bytes) = e8 92 81 42 5f
053eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0541h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0545h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0548h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427810h:jmp64]                encoding(5 bytes) = e8 c3 72 42 5f
054dh mov r9,7FFDDB835D70h          ; MOV(Mov_r64_imm64) [R9,7ffddb835d70h:imm64]          encoding(10 bytes) = 49 b9 70 5d 83 db fd 7f 00 00
0557h mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
055bh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
055eh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
0561h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0564h mov rcx,7FFDDB9C71C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c71c8h:imm64]         encoding(10 bytes) = 48 b9 c8 71 9c db fd 7f 00 00
056eh mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
0578h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
057ch pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
057dh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
057eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
057fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0580h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0582h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0584h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0586h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0589h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
058ch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 3f 78 91 ff
0591h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0592h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0595h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 36 78 91 ff
059ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
059bh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
059eh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 2d 78 91 ff
05a3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05a4h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
05a7h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 24 78 91 ff
05ach int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05adh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05b0h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 1b 78 91 ff
05b5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05b6h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
05b9h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 12 78 91 ff
05beh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05bfh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05c2h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 09 78 91 ff
05c7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05c8h mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
05cbh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 00 78 91 ff
05d0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05d1h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05d4h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 f7 77 91 ff
05d9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05dah mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
05ddh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 ee 77 91 ff
05e2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05e3h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05e6h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF917DD0h:jmp64]        encoding(5 bytes) = e8 e5 77 91 ff
05ebh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1516]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x89,0x4C,0x24,0x60,0x48,0xB9,0x58,0xF0,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAE,0x86,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x60,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xBE,0x87,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x6B,0x8A,0x42,0x5F,0x48,0xB9,0x68,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4A,0x86,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xEA,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x68,0x77,0x42,0x5F,0x48,0xBA,0x20,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x68,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x18,0x77,0x42,0x5F,0x48,0xB9,0x70,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE7,0x85,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x90,0x04,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x05,0x77,0x42,0x5F,0x48,0xBA,0x28,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0x70,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0xB5,0x76,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4D,0xAE,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0x78,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x69,0x85,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x1B,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x87,0x76,0x42,0x5F,0x48,0xBA,0x30,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x78,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x37,0x76,0x42,0x5F,0x48,0xB9,0x80,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0x85,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC1,0x03,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x24,0x76,0x42,0x5F,0x48,0xBA,0x38,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x80,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xD4,0x75,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0xC7,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x88,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x88,0x84,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x4C,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xA6,0x75,0x42,0x5F,0x48,0xBA,0x40,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x88,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x56,0x75,0x42,0x5F,0x48,0xB9,0x90,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x25,0x84,0x42,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xF2,0x02,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0x43,0x75,0x42,0x5F,0x48,0xBA,0x48,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x90,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0xF3,0x74,0x42,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x93,0xC6,0xFF,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0x98,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA7,0x83,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x7D,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xC5,0x74,0x42,0x5F,0x48,0xBA,0x50,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x98,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x75,0x74,0x42,0x5F,0x48,0xB9,0xA0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x40,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x83,0x42,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x23,0x02,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0x62,0x74,0x42,0x5F,0x48,0xBA,0x58,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0xA0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0x12,0x74,0x42,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x80,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB2,0xC5,0xFF,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0xA8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xD0,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x82,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xAE,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xE4,0x73,0x42,0x5F,0x48,0xBA,0x60,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xA8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x94,0x73,0x42,0x5F,0x48,0xB9,0xB0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x56,0x48,0xB9,0xD8,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x63,0x82,0x42,0x5F,0x4C,0x8B,0xE0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x54,0x01,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0xE8,0x80,0x73,0x42,0x5F,0x48,0xBA,0x68,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x54,0x24,0x18,0x48,0xB9,0xB0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD4,0xE8,0x2F,0x73,0x42,0x5F,0x4D,0x8B,0xCC,0x49,0x8B,0xD7,0x4C,0x8B,0xC7,0x48,0xB9,0xF0,0x45,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCF,0xC4,0xFF,0xFF,0x4C,0x8B,0xE0,0x48,0xB9,0xB8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x40,0x46,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE3,0x81,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xDD,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x01,0x73,0x42,0x5F,0x48,0xBA,0x70,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xB8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB1,0x72,0x42,0x5F,0x48,0xB9,0xB0,0x70,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x92,0x81,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC3,0x72,0x42,0x5F,0x49,0xB9,0x70,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD4,0x4C,0x8B,0xC7,0x48,0xB9,0xC8,0x71,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x3F,0x78,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x36,0x78,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x2D,0x78,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x24,0x78,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x1B,0x78,0x91,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0x12,0x78,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x09,0x78,0x91,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x00,0x78,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xF7,0x77,0x91,0xFF,0xCC,0x49,0x8B,0xCC,0xE8,0xEE,0x77,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xE5,0x77,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N8>> bitcombo(N8 n)
; location: [7FFDDB83C3F0h, 7FFDDB83CAD2h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0010h mov [rsp+70h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 70
0015h mov rcx,7FFDDB9AF118h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9af118h:imm64]         encoding(10 bytes) = 48 b9 18 f1 9a db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 9c 80 42 5f
0024h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0027h movsx rcx,byte ptr [rsp+70h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 70
002dh mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0030h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
003ah mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003fh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4281F0h:jmp64]                encoding(5 bytes) = e8 ac 81 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0049h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
004ch mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
0053h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
005dh mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0062h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F4284C0h:jmp64]                encoding(5 bytes) = e8 59 84 42 5f
0067h mov rcx,1F96AFE71C0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71c0h:imm64]          encoding(10 bytes) = 48 b9 c0 71 fe 6a f9 01 00 00
0071h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0074h test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0077h jne short 00cah               ; JNE(Jne_rel8_64) [CAh:jmp64]                         encoding(2 bytes) = 75 51
0079h mov rcx,7FFDDB9C2CA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2ca8h:imm64]         encoding(10 bytes) = 48 b9 a8 2c 9c db fd 7f 00 00
0083h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 38 80 42 5f
0088h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
008bh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0095h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0098h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
009bh je near ptr 066eh             ; JE(Je_rel32_64) [66Eh:jmp64]                         encoding(6 bytes) = 0f 84 cd 05 00 00
00a1h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
00a5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 56 71 42 5f
00aah mov rdx,7FFDDB835C78h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c78h:imm64]         encoding(10 bytes) = 48 ba 78 5c 83 db fd 7f 00 00
00b4h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b8h mov rcx,1F96AFE71C0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71c0h:imm64]          encoding(10 bytes) = 48 b9 c0 71 fe 6a f9 01 00 00
00c2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00c5h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 06 71 42 5f
00cah mov rcx,1F96AFE71C8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71c8h:imm64]          encoding(10 bytes) = 48 b9 c8 71 fe 6a f9 01 00 00
00d4h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d7h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00dah jne short 0130h               ; JNE(Jne_rel8_64) [130h:jmp64]                        encoding(2 bytes) = 75 54
00dch mov rcx,7FFDDB9C3058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3058h:imm64]         encoding(10 bytes) = 48 b9 58 30 9c db fd 7f 00 00
00e6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 d5 7f 42 5f
00ebh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00eeh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
00f8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00fbh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00feh je near ptr 0677h             ; JE(Je_rel32_64) [677h:jmp64]                         encoding(6 bytes) = 0f 84 73 05 00 00
0104h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0108h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 f3 70 42 5f
010dh mov rdx,7FFDDB835C80h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c80h:imm64]         encoding(10 bytes) = 48 ba 80 5c 83 db fd 7f 00 00
0117h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
011bh mov rcx,1F96AFE71C8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71c8h:imm64]          encoding(10 bytes) = 48 b9 c8 71 fe 6a f9 01 00 00
0125h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0128h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 a3 70 42 5f
012dh mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0130h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0133h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0136h mov rcx,7FFDDB9C31F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c31f8h:imm64]         encoding(10 bytes) = 48 b9 f8 31 9c db fd 7f 00 00
0140h call 7FFDDB836D70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFA980h:jmp64]        encoding(5 bytes) = e8 3b a8 ff ff
0145h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0148h mov rcx,1F96AFE71D0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71d0h:imm64]          encoding(10 bytes) = 48 b9 d0 71 fe 6a f9 01 00 00
0152h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0155h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0158h jne short 01abh               ; JNE(Jne_rel8_64) [1ABh:jmp64]                        encoding(2 bytes) = 75 51
015ah mov rcx,7FFDDB9C3248h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3248h:imm64]         encoding(10 bytes) = 48 b9 48 32 9c db fd 7f 00 00
0164h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 57 7f 42 5f
0169h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
016ch mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0176h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0179h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
017ch je near ptr 0680h             ; JE(Je_rel32_64) [680h:jmp64]                         encoding(6 bytes) = 0f 84 fe 04 00 00
0182h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0186h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 75 70 42 5f
018bh mov rdx,7FFDDB835C88h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c88h:imm64]         encoding(10 bytes) = 48 ba 88 5c 83 db fd 7f 00 00
0195h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0199h mov rcx,1F96AFE71D0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71d0h:imm64]          encoding(10 bytes) = 48 b9 d0 71 fe 6a f9 01 00 00
01a3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a6h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 25 70 42 5f
01abh mov rcx,1F96AFE71D8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71d8h:imm64]          encoding(10 bytes) = 48 b9 d8 71 fe 6a f9 01 00 00
01b5h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b8h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01bbh jne short 0211h               ; JNE(Jne_rel8_64) [211h:jmp64]                        encoding(2 bytes) = 75 54
01bdh mov rcx,7FFDDB9C3700h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3700h:imm64]         encoding(10 bytes) = 48 b9 00 37 9c db fd 7f 00 00
01c7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 f4 7e 42 5f
01cch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01cfh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
01d9h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01dch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01dfh je near ptr 0689h             ; JE(Je_rel32_64) [689h:jmp64]                         encoding(6 bytes) = 0f 84 a4 04 00 00
01e5h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 12 70 42 5f
01eeh mov rdx,7FFDDB835C90h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c90h:imm64]         encoding(10 bytes) = 48 ba 90 5c 83 db fd 7f 00 00
01f8h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01fch mov rcx,1F96AFE71D8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71d8h:imm64]          encoding(10 bytes) = 48 b9 d8 71 fe 6a f9 01 00 00
0206h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0209h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 c2 6f 42 5f
020eh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0211h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0214h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0217h mov rcx,7FFDDB9C38A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38a0h:imm64]         encoding(10 bytes) = 48 b9 a0 38 9c db fd 7f 00 00
0221h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC388h:jmp64]        encoding(5 bytes) = e8 62 c1 ff ff
0226h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0229h mov rcx,1F96AFE71E0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71e0h:imm64]          encoding(10 bytes) = 48 b9 e0 71 fe 6a f9 01 00 00
0233h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0236h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0239h jne short 028ch               ; JNE(Jne_rel8_64) [28Ch:jmp64]                        encoding(2 bytes) = 75 51
023bh mov rcx,7FFDDB9C38F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c38f0h:imm64]         encoding(10 bytes) = 48 b9 f0 38 9c db fd 7f 00 00
0245h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 76 7e 42 5f
024ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
024dh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0257h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
025ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
025dh je near ptr 0692h             ; JE(Je_rel32_64) [692h:jmp64]                         encoding(6 bytes) = 0f 84 2f 04 00 00
0263h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0267h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 94 6f 42 5f
026ch mov rdx,7FFDDB835C98h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835c98h:imm64]         encoding(10 bytes) = 48 ba 98 5c 83 db fd 7f 00 00
0276h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
027ah mov rcx,1F96AFE71E0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71e0h:imm64]          encoding(10 bytes) = 48 b9 e0 71 fe 6a f9 01 00 00
0284h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0287h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 44 6f 42 5f
028ch mov rcx,1F96AFE71E8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71e8h:imm64]          encoding(10 bytes) = 48 b9 e8 71 fe 6a f9 01 00 00
0296h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0299h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
029ch jne short 02f2h               ; JNE(Jne_rel8_64) [2F2h:jmp64]                        encoding(2 bytes) = 75 54
029eh mov rcx,7FFDDB9C3BF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3bf8h:imm64]         encoding(10 bytes) = 48 b9 f8 3b 9c db fd 7f 00 00
02a8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 13 7e 42 5f
02adh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02b0h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
02bah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02bdh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02c0h je near ptr 069bh             ; JE(Je_rel32_64) [69Bh:jmp64]                         encoding(6 bytes) = 0f 84 d5 03 00 00
02c6h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02cah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 31 6f 42 5f
02cfh mov rdx,7FFDDB835CA0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ca0h:imm64]         encoding(10 bytes) = 48 ba a0 5c 83 db fd 7f 00 00
02d9h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02ddh mov rcx,1F96AFE71E8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71e8h:imm64]          encoding(10 bytes) = 48 b9 e8 71 fe 6a f9 01 00 00
02e7h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02eah call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 e1 6e 42 5f
02efh mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02f2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02f5h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f8h mov rcx,7FFDDB9C3D10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d10h:imm64]         encoding(10 bytes) = 48 b9 10 3d 9c db fd 7f 00 00
0302h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC388h:jmp64]        encoding(5 bytes) = e8 81 c0 ff ff
0307h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
030ah mov rcx,1F96AFE71F0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71f0h:imm64]          encoding(10 bytes) = 48 b9 f0 71 fe 6a f9 01 00 00
0314h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0317h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
031ah jne short 036dh               ; JNE(Jne_rel8_64) [36Dh:jmp64]                        encoding(2 bytes) = 75 51
031ch mov rcx,7FFDDB9C3D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3d60h:imm64]         encoding(10 bytes) = 48 b9 60 3d 9c db fd 7f 00 00
0326h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 95 7d 42 5f
032bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
032eh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0338h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
033bh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
033eh je near ptr 06a4h             ; JE(Je_rel32_64) [6A4h:jmp64]                         encoding(6 bytes) = 0f 84 60 03 00 00
0344h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0348h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 b3 6e 42 5f
034dh mov rdx,7FFDDB835CA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835ca8h:imm64]         encoding(10 bytes) = 48 ba a8 5c 83 db fd 7f 00 00
0357h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
035bh mov rcx,1F96AFE71F0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71f0h:imm64]          encoding(10 bytes) = 48 b9 f0 71 fe 6a f9 01 00 00
0365h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0368h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 63 6e 42 5f
036dh mov rcx,1F96AFE71F8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71f8h:imm64]          encoding(10 bytes) = 48 b9 f8 71 fe 6a f9 01 00 00
0377h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
037ah test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
037dh jne short 03d3h               ; JNE(Jne_rel8_64) [3D3h:jmp64]                        encoding(2 bytes) = 75 54
037fh mov rcx,7FFDDB9C4068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4068h:imm64]         encoding(10 bytes) = 48 b9 68 40 9c db fd 7f 00 00
0389h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 32 7d 42 5f
038eh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
0391h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
039bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
039eh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
03a1h je near ptr 06adh             ; JE(Je_rel32_64) [6ADh:jmp64]                         encoding(6 bytes) = 0f 84 06 03 00 00
03a7h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
03abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 50 6e 42 5f
03b0h mov rdx,7FFDDB835CB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835cb0h:imm64]         encoding(10 bytes) = 48 ba b0 5c 83 db fd 7f 00 00
03bah mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
03beh mov rcx,1F96AFE71F8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe71f8h:imm64]          encoding(10 bytes) = 48 b9 f8 71 fe 6a f9 01 00 00
03c8h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
03cbh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 00 6e 42 5f
03d0h mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
03d3h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
03d6h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
03d9h mov rcx,7FFDDB9C4180h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4180h:imm64]         encoding(10 bytes) = 48 b9 80 41 9c db fd 7f 00 00
03e3h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC388h:jmp64]        encoding(5 bytes) = e8 a0 bf ff ff
03e8h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
03ebh mov rcx,1F96AFE7200h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7200h:imm64]          encoding(10 bytes) = 48 b9 00 72 fe 6a f9 01 00 00
03f5h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03f8h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
03fbh jne short 044eh               ; JNE(Jne_rel8_64) [44Eh:jmp64]                        encoding(2 bytes) = 75 51
03fdh mov rcx,7FFDDB9C41D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c41d0h:imm64]         encoding(10 bytes) = 48 b9 d0 41 9c db fd 7f 00 00
0407h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 b4 7c 42 5f
040ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
040fh mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
0419h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
041ch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
041fh je near ptr 06b6h             ; JE(Je_rel32_64) [6B6h:jmp64]                         encoding(6 bytes) = 0f 84 91 02 00 00
0425h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0429h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 d2 6d 42 5f
042eh mov rdx,7FFDDB835CB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835cb8h:imm64]         encoding(10 bytes) = 48 ba b8 5c 83 db fd 7f 00 00
0438h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
043ch mov rcx,1F96AFE7200h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7200h:imm64]          encoding(10 bytes) = 48 b9 00 72 fe 6a f9 01 00 00
0446h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0449h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 82 6d 42 5f
044eh mov rcx,1F96AFE7208h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7208h:imm64]          encoding(10 bytes) = 48 b9 08 72 fe 6a f9 01 00 00
0458h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
045bh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
045eh jne short 04b6h               ; JNE(Jne_rel8_64) [4B6h:jmp64]                        encoding(2 bytes) = 75 56
0460h mov rcx,7FFDDB9C44D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c44d8h:imm64]         encoding(10 bytes) = 48 b9 d8 44 9c db fd 7f 00 00
046ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 51 7c 42 5f
046fh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
0472h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
047ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
047fh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0482h je near ptr 06bfh             ; JE(Je_rel32_64) [6BFh:jmp64]                         encoding(6 bytes) = 0f 84 37 02 00 00
0488h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
048dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 6e 6d 42 5f
0492h mov rdx,7FFDDB835CC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835cc0h:imm64]         encoding(10 bytes) = 48 ba c0 5c 83 db fd 7f 00 00
049ch mov [r12+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R12:br,DS:sr),RDX]        encoding(5 bytes) = 49 89 54 24 18
04a1h mov rcx,1F96AFE7208h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7208h:imm64]          encoding(10 bytes) = 48 b9 08 72 fe 6a f9 01 00 00
04abh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
04aeh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 1d 6d 42 5f
04b3h mov r9,r12                    ; MOV(Mov_r64_rm64) [R9,R12]                           encoding(3 bytes) = 4d 8b cc
04b6h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
04b9h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
04bch mov rcx,7FFDDB9C45F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c45f0h:imm64]         encoding(10 bytes) = 48 b9 f0 45 9c db fd 7f 00 00
04c6h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC388h:jmp64]        encoding(5 bytes) = e8 bd be ff ff
04cbh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
04ceh mov rcx,1F96AFE7210h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7210h:imm64]          encoding(10 bytes) = 48 b9 10 72 fe 6a f9 01 00 00
04d8h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
04dbh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
04deh jne short 0531h               ; JNE(Jne_rel8_64) [531h:jmp64]                        encoding(2 bytes) = 75 51
04e0h mov rcx,7FFDDB9C4640h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4640h:imm64]         encoding(10 bytes) = 48 b9 40 46 9c db fd 7f 00 00
04eah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 d1 7b 42 5f
04efh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f2h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
04fch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
04ffh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0502h je near ptr 06c8h             ; JE(Je_rel32_64) [6C8h:jmp64]                         encoding(6 bytes) = 0f 84 c0 01 00 00
0508h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
050ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 ef 6c 42 5f
0511h mov rdx,7FFDDB835CC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835cc8h:imm64]         encoding(10 bytes) = 48 ba c8 5c 83 db fd 7f 00 00
051bh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
051fh mov rcx,1F96AFE7210h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7210h:imm64]          encoding(10 bytes) = 48 b9 10 72 fe 6a f9 01 00 00
0529h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
052ch call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 9f 6c 42 5f
0531h mov rcx,1F96AFE7218h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7218h:imm64]          encoding(10 bytes) = 48 b9 18 72 fe 6a f9 01 00 00
053bh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
053eh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0541h jne short 0597h               ; JNE(Jne_rel8_64) [597h:jmp64]                        encoding(2 bytes) = 75 54
0543h mov rcx,7FFDDB9C4948h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4948h:imm64]         encoding(10 bytes) = 48 b9 48 49 9c db fd 7f 00 00
054dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 6e 7b 42 5f
0552h mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
0555h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
055fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0562h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0565h je near ptr 06d1h             ; JE(Je_rel32_64) [6D1h:jmp64]                         encoding(6 bytes) = 0f 84 66 01 00 00
056bh lea rcx,[r13+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 08
056fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 8c 6c 42 5f
0574h mov rdx,7FFDDB835CD0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835cd0h:imm64]         encoding(10 bytes) = 48 ba d0 5c 83 db fd 7f 00 00
057eh mov [r13+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R13:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 55 18
0582h mov rcx,1F96AFE7218h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7218h:imm64]          encoding(10 bytes) = 48 b9 18 72 fe 6a f9 01 00 00
058ch mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
058fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 3c 6c 42 5f
0594h mov r9,r13                    ; MOV(Mov_r64_rm64) [R9,R13]                           encoding(3 bytes) = 4d 8b cd
0597h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
059ah mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
059dh mov rcx,7FFDDB9C4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9c db fd 7f 00 00
05a7h call 7FFDDB838778h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC388h:jmp64]        encoding(5 bytes) = e8 dc bd ff ff
05ach mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
05afh mov rcx,1F96AFE7220h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7220h:imm64]          encoding(10 bytes) = 48 b9 20 72 fe 6a f9 01 00 00
05b9h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
05bch test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
05bfh jne short 0612h               ; JNE(Jne_rel8_64) [612h:jmp64]                        encoding(2 bytes) = 75 51
05c1h mov rcx,7FFDDB9C4AB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4ab0h:imm64]         encoding(10 bytes) = 48 b9 b0 4a 9c db fd 7f 00 00
05cbh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 f0 7a 42 5f
05d0h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
05d3h mov rdx,1F96AFE6ED0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6ed0h:imm64]          encoding(10 bytes) = 48 ba d0 6e fe 6a f9 01 00 00
05ddh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
05e0h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
05e3h je near ptr 06dah             ; JE(Je_rel32_64) [6DAh:jmp64]                         encoding(6 bytes) = 0f 84 f1 00 00 00
05e9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
05edh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 0e 6c 42 5f
05f2h mov rdx,7FFDDB835CD8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835cd8h:imm64]         encoding(10 bytes) = 48 ba d8 5c 83 db fd 7f 00 00
05fch mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0600h mov rcx,1F96AFE7220h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7220h:imm64]          encoding(10 bytes) = 48 b9 20 72 fe 6a f9 01 00 00
060ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
060dh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4271D0h:jmp64]                encoding(5 bytes) = e8 be 6b 42 5f
0612h mov rcx,7FFDDB9C7488h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7488h:imm64]         encoding(10 bytes) = 48 b9 88 74 9c db fd 7f 00 00
061ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4280C0h:jmp64]                encoding(5 bytes) = e8 9f 7a 42 5f
0621h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0624h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0628h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
062bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F427200h:jmp64]                encoding(5 bytes) = e8 d0 6b 42 5f
0630h mov r9,7FFDDB835D88h          ; MOV(Mov_r64_imm64) [R9,7ffddb835d88h:imm64]          encoding(10 bytes) = 49 b9 88 5d 83 db fd 7f 00 00
063ah mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
063eh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0641h mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
0644h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0647h mov rcx,7FFDDB9C75A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c75a0h:imm64]         encoding(10 bytes) = 48 b9 a0 75 9c db fd 7f 00 00
0651h mov rax,7FFDDB838778h         ; MOV(Mov_r64_imm64) [RAX,7ffddb838778h:imm64]         encoding(10 bytes) = 48 b8 78 87 83 db fd 7f 00 00
065bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
065fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0660h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0661h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0662h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0663h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0665h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0667h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0669h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
066bh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
066eh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0671h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 4a 71 91 ff
0676h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0677h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
067ah call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 41 71 91 ff
067fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0680h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0683h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 38 71 91 ff
0688h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0689h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
068ch call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 2f 71 91 ff
0691h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0692h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0695h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 26 71 91 ff
069ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
069bh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
069eh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 1d 71 91 ff
06a3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06a4h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06a7h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 14 71 91 ff
06ach int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06adh mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
06b0h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 0b 71 91 ff
06b5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06b6h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06b9h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 02 71 91 ff
06beh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06bfh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
06c2h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 f9 70 91 ff
06c7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06c8h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06cbh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 f0 70 91 ff
06d0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06d1h mov rcx,r13                   ; MOV(Mov_r64_rm64) [RCX,R13]                          encoding(3 bytes) = 49 8b cd
06d4h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 e7 70 91 ff
06d9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06dah mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06ddh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9177C0h:jmp64]        encoding(5 bytes) = e8 de 70 91 ff
06e2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1763]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x70,0x48,0xB9,0x18,0xF1,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0x80,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x70,0x88,0x4E,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xAC,0x81,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x59,0x84,0x42,0x5F,0x48,0xB9,0xC0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xA8,0x2C,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x38,0x80,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCD,0x05,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x56,0x71,0x42,0x5F,0x48,0xBA,0x78,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xC0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x06,0x71,0x42,0x5F,0x48,0xB9,0xC8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x30,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD5,0x7F,0x42,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x73,0x05,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0xF3,0x70,0x42,0x5F,0x48,0xBA,0x80,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xC8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0xA3,0x70,0x42,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xF8,0x31,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3B,0xA8,0xFF,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xD0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x48,0x32,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x57,0x7F,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFE,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x75,0x70,0x42,0x5F,0x48,0xBA,0x88,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xD0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x25,0x70,0x42,0x5F,0x48,0xB9,0xD8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x00,0x37,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF4,0x7E,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA4,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x12,0x70,0x42,0x5F,0x48,0xBA,0x90,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xD8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xC2,0x6F,0x42,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xA0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x62,0xC1,0xFF,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xE0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xF0,0x38,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0x7E,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2F,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x94,0x6F,0x42,0x5F,0x48,0xBA,0x98,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xE0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x44,0x6F,0x42,0x5F,0x48,0xB9,0xE8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xF8,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x13,0x7E,0x42,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xD5,0x03,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0x31,0x6F,0x42,0x5F,0x48,0xBA,0xA0,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0xE8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0xE1,0x6E,0x42,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x10,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x81,0xC0,0xFF,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0xF0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x60,0x3D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x95,0x7D,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x60,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xB3,0x6E,0x42,0x5F,0x48,0xBA,0xA8,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xF0,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x63,0x6E,0x42,0x5F,0x48,0xB9,0xF8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x40,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x32,0x7D,0x42,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x06,0x03,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0x50,0x6E,0x42,0x5F,0x48,0xBA,0xB0,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0xF8,0x71,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0x00,0x6E,0x42,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x80,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA0,0xBF,0xFF,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0x00,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xD0,0x41,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x7C,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x91,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xD2,0x6D,0x42,0x5F,0x48,0xBA,0xB8,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x00,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x82,0x6D,0x42,0x5F,0x48,0xB9,0x08,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x56,0x48,0xB9,0xD8,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0x7C,0x42,0x5F,0x4C,0x8B,0xE0,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x37,0x02,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0xE8,0x6E,0x6D,0x42,0x5F,0x48,0xBA,0xC0,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x54,0x24,0x18,0x48,0xB9,0x08,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD4,0xE8,0x1D,0x6D,0x42,0x5F,0x4D,0x8B,0xCC,0x49,0x8B,0xD7,0x4C,0x8B,0xC7,0x48,0xB9,0xF0,0x45,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBD,0xBE,0xFF,0xFF,0x4C,0x8B,0xE0,0x48,0xB9,0x10,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x40,0x46,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD1,0x7B,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC0,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xEF,0x6C,0x42,0x5F,0x48,0xBA,0xC8,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x10,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x9F,0x6C,0x42,0x5F,0x48,0xB9,0x18,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x48,0x49,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6E,0x7B,0x42,0x5F,0x4C,0x8B,0xE8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x66,0x01,0x00,0x00,0x49,0x8D,0x4D,0x08,0xE8,0x8C,0x6C,0x42,0x5F,0x48,0xBA,0xD0,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x55,0x18,0x48,0xB9,0x18,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x49,0x8B,0xD5,0xE8,0x3C,0x6C,0x42,0x5F,0x4D,0x8B,0xCD,0x49,0x8B,0xD4,0x4C,0x8B,0xC7,0x48,0xB9,0x60,0x4A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDC,0xBD,0xFF,0xFF,0x4C,0x8B,0xE8,0x48,0xB9,0x20,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xB0,0x4A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF0,0x7A,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xD0,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xF1,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x0E,0x6C,0x42,0x5F,0x48,0xBA,0xD8,0x5C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x20,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xBE,0x6B,0x42,0x5F,0x48,0xB9,0x88,0x74,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0x7A,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD0,0x6B,0x42,0x5F,0x49,0xB9,0x88,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xA0,0x75,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x78,0x87,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x4A,0x71,0x91,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x41,0x71,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x38,0x71,0x91,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x2F,0x71,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x26,0x71,0x91,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0x1D,0x71,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x14,0x71,0x91,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x0B,0x71,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x02,0x71,0x91,0xFF,0xCC,0x49,0x8B,0xCC,0xE8,0xF9,0x70,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xF0,0x70,0x91,0xFF,0xCC,0x49,0x8B,0xCD,0xE8,0xE7,0x70,0x91,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xDE,0x70,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr on()
; location: [7FFDDB83CB00h, 7FFDDB83CB1Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
000fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4279B0h:jmp64]                encoding(5 bytes) = e8 9c 79 42 5f
0014h mov dword ptr [rax+8],1       ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 08 01 00 00 00
001bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> onBytes => new byte[32]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0x79,0x42,0x5F,0xC7,0x40,0x08,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr off()
; location: [7FFDDB83CB40h, 7FFDDB83CB5Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
000fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427970h:jmp64]                encoding(5 bytes) = e8 5c 79 42 5f
0014h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0016h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0019h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> offBytes => new byte[30]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5C,0x79,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr literal(bit a)
; location: [7FFDDB83CB80h, 7FFDDB83CB9Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427930h:jmp64]                encoding(5 bytes) = e8 1a 79 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
001dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
001eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> literalBytes => new byte[31]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1A,0x79,0x42,0x5F,0x89,0x70,0x08,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp identity(ILogicExpr a)
; location: [7FFDDB83CBC0h, 7FFDDB83CBF7h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4278F0h:jmp64]                encoding(5 bytes) = e8 d8 78 42 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh mov dword ptr [rdi+10h],2     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),2h:imm32] encoding(7 bytes) = c7 47 10 02 00 00 00
0022h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0026h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0029h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426A30h:jmp64]                encoding(5 bytes) = e8 02 6a 42 5f
002eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0031h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0035h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0036h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> identityBytes => new byte[56]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD8,0x78,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x10,0x02,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x02,0x6A,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp unary(UnaryLogicOpKind:uint op, ILogicExpr a)
; location: [7FFDDB83CC10h, 7FFDDB83CC47h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov edi,ecx                   ; MOV(Mov_r32_rm32) [EDI,ECX]                          encoding(2 bytes) = 8b f9
0009h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ch mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
0016h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4278A0h:jmp64]                encoding(5 bytes) = e8 85 78 42 5f
001bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001eh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
0021h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0025h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0028h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4269E0h:jmp64]                encoding(5 bytes) = e8 b3 69 42 5f
002dh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0030h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0034h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0035h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0036h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> unaryBytes => new byte[56]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF9,0x48,0x8B,0xF2,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x85,0x78,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x7B,0x10,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB3,0x69,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp unary(UnaryLogicOpKind:uint kind, bit a)
; location: [7FFDDB83CC60h, 7FFDDB83CCABh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427850h:jmp64]                encoding(5 bytes) = e8 36 78 42 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 08
0020h mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427850h:jmp64]                encoding(5 bytes) = e8 21 78 42 5f
002fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0032h mov [rdi+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 10
0035h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0039h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
003ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426990h:jmp64]                encoding(5 bytes) = e8 4f 69 42 5f
0041h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0044h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0048h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0049h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> unaryBytes => new byte[76]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x36,0x78,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x7B,0x08,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0x78,0x42,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x10,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x4F,0x69,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp binary(BinaryLogicOpKind:byte kind, ILogicExpr a, ILogicExpr b)
; location: [7FFDDB83CCD0h, 7FFDDB83CD18h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov ebx,ecx                   ; MOV(Mov_r32_rm32) [EBX,ECX]                          encoding(2 bytes) = 8b d9
000ah mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000dh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0010h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
001ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4277E0h:jmp64]                encoding(5 bytes) = e8 c1 77 42 5f
001fh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0022h mov [rbp+18h],bl              ; MOV(Mov_rm8_r8) [mem(8u,RBP:br,SS:sr),BL]            encoding(3 bytes) = 88 5d 18
0025h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0029h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426920h:jmp64]                encoding(5 bytes) = e8 ef 68 42 5f
0031h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
0035h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0038h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426920h:jmp64]                encoding(5 bytes) = e8 e3 68 42 5f
003dh mov rax,rbp                   ; MOV(Mov_r64_rm64) [RAX,RBP]                          encoding(3 bytes) = 48 8b c5
0040h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0044h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0045h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> binaryBytes => new byte[73]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x8B,0xD9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC1,0x77,0x42,0x5F,0x48,0x8B,0xE8,0x88,0x5D,0x18,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0xEF,0x68,0x42,0x5F,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD7,0xE8,0xE3,0x68,0x42,0x5F,0x48,0x8B,0xC5,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp binary(BinaryLogicOpKind:byte kind, bit a, bit b)
; location: [7FFDDB83CD40h, 7FFDDB83CDB2h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov ebx,edx                   ; MOV(Mov_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 8b da
000fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0019h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427770h:jmp64]                encoding(5 bytes) = e8 52 77 42 5f
001eh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0021h mov [rbp+8],ebx               ; MOV(Mov_rm32_r32) [mem(32u,RBP:br,SS:sr),EBX]        encoding(3 bytes) = 89 5d 08
0024h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
002eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427770h:jmp64]                encoding(5 bytes) = e8 3d 77 42 5f
0033h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0036h mov [rbx+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 08
0039h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0043h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427770h:jmp64]                encoding(5 bytes) = e8 28 77 42 5f
0048h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
004bh mov [rdi+18h],sil             ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),SIL]           encoding(4 bytes) = 40 88 77 18
004fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0053h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0056h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4268B0h:jmp64]                encoding(5 bytes) = e8 55 68 42 5f
005bh lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0062h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4268B0h:jmp64]                encoding(5 bytes) = e8 49 68 42 5f
0067h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
006ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0070h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0071h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0072h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> binaryBytes => new byte[115]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x8B,0xF1,0x41,0x8B,0xF8,0x8B,0xDA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x52,0x77,0x42,0x5F,0x48,0x8B,0xE8,0x89,0x5D,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0x77,0x42,0x5F,0x48,0x8B,0xD8,0x89,0x7B,0x08,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0x77,0x42,0x5F,0x48,0x8B,0xF8,0x40,0x88,0x77,0x18,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD5,0xE8,0x55,0x68,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD3,0xE8,0x49,0x68,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryLogicOp ternary(TernaryOpKind:byte kind, ILogicExpr a, ILogicExpr b, ILogicExpr c)
; location: [7FFDDB83CDD0h, 7FFDDB83CE2Ch]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ebp,ecx                   ; MOV(Mov_r32_rm32) [EBP,ECX]                          encoding(2 bytes) = 8b e9
000ch mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000fh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0012h mov rbx,r9                    ; MOV(Mov_r64_rm64) [RBX,R9]                           encoding(3 bytes) = 49 8b d9
0015h mov rcx,7FFDDB9A58B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a58b8h:imm64]         encoding(10 bytes) = 48 b9 b8 58 9a db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4276E0h:jmp64]                encoding(5 bytes) = e8 bc 76 42 5f
0024h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0027h mov [r14+20h],bpl             ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),BPL]           encoding(4 bytes) = 41 88 6e 20
002bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
002fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426820h:jmp64]                encoding(5 bytes) = e8 e9 67 42 5f
0037h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
003bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426820h:jmp64]                encoding(5 bytes) = e8 dd 67 42 5f
0043h lea rcx,[r14+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 18
0047h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426820h:jmp64]                encoding(5 bytes) = e8 d1 67 42 5f
004fh mov rax,r14                   ; MOV(Mov_r64_rm64) [RAX,R14]                          encoding(3 bytes) = 49 8b c6
0052h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0058h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0059h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
005ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ternaryBytes => new byte[93]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xE9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x49,0x8B,0xD9,0x48,0xB9,0xB8,0x58,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBC,0x76,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0x88,0x6E,0x20,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xE9,0x67,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD7,0xE8,0xDD,0x67,0x42,0x5F,0x49,0x8D,0x4E,0x18,0x48,0x8B,0xD3,0xE8,0xD1,0x67,0x42,0x5F,0x49,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryLogicOp ternary(TernaryOpKind:byte kind, bit a, bit b, bit c)
; location: [7FFDDB83CE50h, 7FFDDB83CEEBh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
000ch mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000fh mov ebx,r9d                   ; MOV(Mov_r32_rm32) [EBX,R9D]                          encoding(3 bytes) = 41 8b d9
0012h mov ebp,edx                   ; MOV(Mov_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 8b ea
0014h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
001eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427660h:jmp64]                encoding(5 bytes) = e8 3d 76 42 5f
0023h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0026h mov [r14+8],ebp               ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),EBP]        encoding(4 bytes) = 41 89 6e 08
002ah mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0034h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427660h:jmp64]                encoding(5 bytes) = e8 27 76 42 5f
0039h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
003ch mov [rbp+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RBP:br,SS:sr),EDI]        encoding(3 bytes) = 89 7d 08
003fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427660h:jmp64]                encoding(5 bytes) = e8 12 76 42 5f
004eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0051h mov [rdi+8],ebx               ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),EBX]        encoding(3 bytes) = 89 5f 08
0054h mov rcx,7FFDDB9A58B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a58b8h:imm64]         encoding(10 bytes) = 48 b9 b8 58 9a db fd 7f 00 00
005eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427660h:jmp64]                encoding(5 bytes) = e8 fd 75 42 5f
0063h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0066h mov [rbx+20h],sil             ; MOV(Mov_rm8_r8) [mem(8u,RBX:br,DS:sr),SIL]           encoding(4 bytes) = 40 88 73 20
006ah lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
006eh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0071h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4267A0h:jmp64]                encoding(5 bytes) = e8 2a 67 42 5f
0076h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
007ah mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
007dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4267A0h:jmp64]                encoding(5 bytes) = e8 1e 67 42 5f
0082h lea rcx,[rbx+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 18
0086h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0089h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4267A0h:jmp64]                encoding(5 bytes) = e8 12 67 42 5f
008eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0091h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0095h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0096h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0097h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0098h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0099h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
009bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ternaryBytes => new byte[156]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x41,0x8B,0xF8,0x41,0x8B,0xD9,0x8B,0xEA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0x76,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0x89,0x6E,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x27,0x76,0x42,0x5F,0x48,0x8B,0xE8,0x89,0x7D,0x08,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x12,0x76,0x42,0x5F,0x48,0x8B,0xF8,0x89,0x5F,0x08,0x48,0xB9,0xB8,0x58,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFD,0x75,0x42,0x5F,0x48,0x8B,0xD8,0x40,0x88,0x73,0x20,0x48,0x8D,0x4B,0x08,0x49,0x8B,0xD6,0xE8,0x2A,0x67,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD5,0xE8,0x1E,0x67,0x42,0x5F,0x48,0x8D,0x4B,0x18,0x48,0x8B,0xD7,0xE8,0x12,0x67,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable variable(string name, bit init)
; location: [7FFDDB83CF10h, 7FFDDB83CF62h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000ch mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0016h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4275A0h:jmp64]                encoding(5 bytes) = e8 85 75 42 5f
001bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001eh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0022h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0025h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4266E0h:jmp64]                encoding(5 bytes) = e8 b6 66 42 5f
002ah mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0034h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4275A0h:jmp64]                encoding(5 bytes) = e8 67 75 42 5f
0039h mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
003ch lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0040h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0043h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4266E0h:jmp64]                encoding(5 bytes) = e8 98 66 42 5f
0048h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
004bh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0050h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0051h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0052h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variableBytes => new byte[83]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x85,0x75,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB6,0x66,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x67,0x75,0x42,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x98,0x66,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable variable(Char name, bit init)
; location: [7FFDDB83CF80h, 7FFDDB83CFE9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov [rsp+40h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 40
000bh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
000dh movzx edi,word ptr [rsp+40h]  ; MOVZX(Movzx_r32_rm16) [EDI,mem(16u,RSP:br,SS:sr)]    encoding(5 bytes) = 0f b7 7c 24 40
0012h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0017h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF917528h:jmp64]        encoding(5 bytes) = e8 0c 75 91 ff
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov [rbx+0Ch],di              ; MOV(Mov_rm16_r16) [mem(16u,RBX:br,DS:sr),DI]         encoding(4 bytes) = 66 89 7b 0c
0023h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
002dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427530h:jmp64]                encoding(5 bytes) = e8 fe 74 42 5f
0032h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0035h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0039h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
003ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426670h:jmp64]                encoding(5 bytes) = e8 2f 66 42 5f
0041h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
004bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427530h:jmp64]                encoding(5 bytes) = e8 e0 74 42 5f
0050h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426670h:jmp64]                encoding(5 bytes) = e8 11 66 42 5f
005fh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0062h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0066h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0067h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0068h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0069h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variableBytes => new byte[106]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x89,0x4C,0x24,0x40,0x8B,0xF2,0x0F,0xB7,0x7C,0x24,0x40,0xB9,0x01,0x00,0x00,0x00,0xE8,0x0C,0x75,0x91,0xFF,0x48,0x8B,0xD8,0x66,0x89,0x7B,0x0C,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0x74,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x2F,0x66,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE0,0x74,0x42,0x5F,0x89,0x70,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x11,0x66,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable variable(uint name, bit init)
; location: [7FFDDB83D010h, 7FFDDB83D087h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000eh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0015h lea rax,[rsp+20h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 20
001ah mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
001dh mov [rax+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 40 08
0021h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
0026h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0029h call 7FFE3922D070h            ; CALL(Call_rel32_64) [5D9F0060h:jmp64]                encoding(5 bytes) = e8 32 00 9f 5d
002eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0031h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
003bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4274A0h:jmp64]                encoding(5 bytes) = e8 60 74 42 5f
0040h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0043h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0047h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4265E0h:jmp64]                encoding(5 bytes) = e8 91 65 42 5f
004fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0059h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4274A0h:jmp64]                encoding(5 bytes) = e8 42 74 42 5f
005eh mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0061h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0065h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0068h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4265E0h:jmp64]                encoding(5 bytes) = e8 73 65 42 5f
006dh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0070h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
0074h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0075h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0076h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0077h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variableBytes => new byte[120]{0x57,0x56,0x53,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x8B,0xF2,0x33,0xD2,0x45,0x33,0xC0,0x48,0x8D,0x44,0x24,0x20,0x48,0x89,0x10,0x44,0x89,0x40,0x08,0x48,0x8D,0x54,0x24,0x20,0x45,0x33,0xC0,0xE8,0x32,0x00,0x9F,0x5D,0x48,0x8B,0xF8,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x60,0x74,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD7,0xE8,0x91,0x65,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x42,0x74,0x42,0x5F,0x89,0x70,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x73,0x65,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable[] variables(int n)
; location: [7FFDDB83D0A0h, 7FFDDB83D159h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,38h                   ; SUB(Sub_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 ec 38
000ch xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000eh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0013h mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0018h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
001ah movsxd rdx,esi                ; MOVSXD(Movsxd_r64_rm32) [RDX,ESI]                    encoding(3 bytes) = 48 63 d6
001dh mov rcx,7FFDDB9C20D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c20d8h:imm64]         encoding(10 bytes) = 48 b9 d8 20 9c db fd 7f 00 00
0027h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F4275A0h:jmp64]                encoding(5 bytes) = e8 74 75 42 5f
002ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
002fh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0031h test esi,esi                  ; TEST(Test_rm32_r32) [ESI,ESI]                        encoding(2 bytes) = 85 f6
0033h jle short 00aah               ; JLE(Jle_rel8_64) [AAh:jmp64]                         encoding(2 bytes) = 7e 75
0035h mov ebp,ebx                   ; MOV(Mov_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 8b eb
0037h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0039h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
003bh lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
0040h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0043h mov [r8+8],edx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(4 bytes) = 41 89 50 08
0047h mov ecx,ebp                   ; MOV(Mov_r32_rm32) [ECX,EBP]                          encoding(2 bytes) = 8b cd
0049h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
004eh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0051h call 7FFE3921AD70h            ; CALL(Call_rel32_64) [5D9DDCD0h:jmp64]                encoding(5 bytes) = e8 7a dc 9d 5d
0056h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0059h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0063h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427410h:jmp64]                encoding(5 bytes) = e8 a8 73 42 5f
0068h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
006bh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
006fh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0072h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426550h:jmp64]                encoding(5 bytes) = e8 d9 64 42 5f
0077h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0081h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427410h:jmp64]                encoding(5 bytes) = e8 8a 73 42 5f
0086h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0088h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
008bh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
008fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0092h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426550h:jmp64]                encoding(5 bytes) = e8 b9 64 42 5f
0097h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
009ah mov edx,ebp                   ; MOV(Mov_r32_rm32) [EDX,EBP]                          encoding(2 bytes) = 8b d5
009ch mov r8,r15                    ; MOV(Mov_r64_rm64) [R8,R15]                           encoding(3 bytes) = 4d 8b c7
009fh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F426670h:jmp64]                encoding(5 bytes) = e8 cc 65 42 5f
00a4h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
00a6h cmp ebx,esi                   ; CMP(Cmp_r32_rm32) [EBX,ESI]                          encoding(2 bytes) = 3b de
00a8h jl short 0035h                ; JL(Jl_rel8_64) [35h:jmp64]                           encoding(2 bytes) = 7c 8b
00aah mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
00adh add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
00b1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00b2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00b3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00b4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00b5h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00b7h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00b9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variablesBytes => new byte[186]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x38,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x8B,0xF1,0x48,0x63,0xD6,0x48,0xB9,0xD8,0x20,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x75,0x42,0x5F,0x48,0x8B,0xF8,0x33,0xDB,0x85,0xF6,0x7E,0x75,0x8B,0xEB,0x33,0xC9,0x33,0xD2,0x4C,0x8D,0x44,0x24,0x28,0x49,0x89,0x08,0x41,0x89,0x50,0x08,0x8B,0xCD,0x48,0x8D,0x54,0x24,0x28,0x45,0x33,0xC0,0xE8,0x7A,0xDC,0x9D,0x5D,0x4C,0x8B,0xF0,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA8,0x73,0x42,0x5F,0x4C,0x8B,0xF8,0x49,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0xD9,0x64,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8A,0x73,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xB9,0x64,0x42,0x5F,0x48,0x8B,0xCF,0x8B,0xD5,0x4D,0x8B,0xC7,0xE8,0xCC,0x65,0x42,0x5F,0xFF,0xC3,0x3B,0xDE,0x7C,0x8B,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x38,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: VariedLogicExpr varied(ILogicExpr subject, ILogicVarExpr[] variables)
; location: [7FFDDB83D180h, 7FFDDB83D1C1h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A6838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6838h:imm64]         encoding(10 bytes) = 48 b9 38 68 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427330h:jmp64]                encoding(5 bytes) = e8 14 73 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426470h:jmp64]                encoding(5 bytes) = e8 45 64 42 5f
002bh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
002fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426470h:jmp64]                encoding(5 bytes) = e8 39 64 42 5f
0037h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
003eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
003fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0040h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0041h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variedBytes => new byte[66]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x38,0x68,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0x73,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x45,0x64,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x39,0x64,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr compare(ComparisonKind:uint kind, ILogicExpr lhs, ILogicExpr rhs, LogicVariable[] variables)
; location: [7FFDDB83D1E0h, 7FFDDB83D23Ch]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ebp,ecx                   ; MOV(Mov_r32_rm32) [EBP,ECX]                          encoding(2 bytes) = 8b e9
000ch mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000fh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0012h mov rbx,r9                    ; MOV(Mov_r64_rm64) [RBX,R9]                           encoding(3 bytes) = 49 8b d9
0015h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4272D0h:jmp64]                encoding(5 bytes) = e8 ac 72 42 5f
0024h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0027h mov [r14+20h],ebp             ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),EBP]        encoding(4 bytes) = 41 89 6e 20
002bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
002fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 d9 63 42 5f
0037h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
003bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 cd 63 42 5f
0043h lea rcx,[r14+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 18
0047h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 c1 63 42 5f
004fh mov rax,r14                   ; MOV(Mov_r64_rm64) [RAX,R14]                          encoding(3 bytes) = 49 8b c6
0052h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0058h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0059h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
005ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> compareBytes => new byte[93]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xE9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x49,0x8B,0xD9,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAC,0x72,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0x89,0x6E,0x20,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD9,0x63,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD7,0xE8,0xCD,0x63,0x42,0x5F,0x49,0x8D,0x4E,0x18,0x48,0x8B,0xD3,0xE8,0xC1,0x63,0x42,0x5F,0x49,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr equals(ILogicExpr lhs, ILogicExpr rhs, LogicVariable[] variables)
; location: [7FFDDB83D260h, 7FFDDB83D2B9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000bh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000eh mov rbx,r8                    ; MOV(Mov_r64_rm64) [RBX,R8]                           encoding(3 bytes) = 49 8b d8
0011h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
001bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F427250h:jmp64]                encoding(5 bytes) = e8 30 72 42 5f
0020h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0023h mov dword ptr [rbp+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),1h:imm32] encoding(7 bytes) = c7 45 20 01 00 00 00
002ah lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
002eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0031h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426390h:jmp64]                encoding(5 bytes) = e8 5a 63 42 5f
0036h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
003ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426390h:jmp64]                encoding(5 bytes) = e8 4e 63 42 5f
0042h lea rcx,[rbp+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 18
0046h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0049h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426390h:jmp64]                encoding(5 bytes) = e8 42 63 42 5f
004eh mov rax,rbp                   ; MOV(Mov_r64_rm64) [RAX,RBP]                          encoding(3 bytes) = 48 8b c5
0051h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0055h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0056h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0057h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0058h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0059h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> equalsBytes => new byte[90]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x49,0x8B,0xD8,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x30,0x72,0x42,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x5A,0x63,0x42,0x5F,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD7,0xE8,0x4E,0x63,0x42,0x5F,0x48,0x8D,0x4D,0x18,0x48,0x8B,0xD3,0xE8,0x42,0x63,0x42,0x5F,0x48,0x8B,0xC5,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit ToBit(bool x)
; location: [7FFDDB83D2E0h, 7FFDDB83D304h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
000ah lea rax,[rsp]                 ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 04 24
000eh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0010h jne short 0016h               ; JNE(Jne_rel8_64) [16h:jmp64]                         encoding(2 bytes) = 75 04
0012h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0014h jmp short 001bh               ; JMP(Jmp_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = eb 05
0016h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
001bh mov [rax],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(2 bytes) = 89 10
001dh mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0020h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ToBitBytes => new byte[37]{0x50,0x0F,0x1F,0x40,0x00,0x33,0xC0,0x89,0x04,0x24,0x48,0x8D,0x04,0x24,0x84,0xC9,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x89,0x10,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<ComparisonExpr> get_All()
; location: [7FFDDB83D320h, 7FFDDB83D3AAh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov rcx,7FFDDB9C7678h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7678h:imm64]         encoding(10 bytes) = 48 b9 78 76 9c db fd 7f 00 00
000fh mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
0014h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F427320h:jmp64]                encoding(5 bytes) = e8 07 73 42 5f
0019h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001ch call 7FFDDB8332B8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5F98h:jmp64]        encoding(5 bytes) = e8 77 5f ff ff
0021h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0024h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0027h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0029h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4263F0h:jmp64]                encoding(5 bytes) = e8 c2 63 42 5f
002eh call 7FFDDB8332C0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5FA0h:jmp64]        encoding(5 bytes) = e8 6d 5f ff ff
0033h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0036h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0039h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
003eh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4263F0h:jmp64]                encoding(5 bytes) = e8 ad 63 42 5f
0043h call 7FFDDB8332C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5FA8h:jmp64]        encoding(5 bytes) = e8 60 5f ff ff
0048h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
004bh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
004eh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0053h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4263F0h:jmp64]                encoding(5 bytes) = e8 98 63 42 5f
0058h call 7FFDDB8332D0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5FB0h:jmp64]        encoding(5 bytes) = e8 53 5f ff ff
005dh mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0060h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0063h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0068h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4263F0h:jmp64]                encoding(5 bytes) = e8 83 63 42 5f
006dh call 7FFDDB8332D8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5FB8h:jmp64]        encoding(5 bytes) = e8 46 5f ff ff
0072h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0075h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0078h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
007dh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4263F0h:jmp64]                encoding(5 bytes) = e8 6e 63 42 5f
0082h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0085h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0089h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
008ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_AllBytes => new byte[139]{0x56,0x48,0x83,0xEC,0x20,0x48,0xB9,0x78,0x76,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0x07,0x73,0x42,0x5F,0x48,0x8B,0xF0,0xE8,0x77,0x5F,0xFF,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0x33,0xD2,0xE8,0xC2,0x63,0x42,0x5F,0xE8,0x6D,0x5F,0xFF,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x01,0x00,0x00,0x00,0xE8,0xAD,0x63,0x42,0x5F,0xE8,0x60,0x5F,0xFF,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x02,0x00,0x00,0x00,0xE8,0x98,0x63,0x42,0x5F,0xE8,0x53,0x5F,0xFF,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x03,0x00,0x00,0x00,0xE8,0x83,0x63,0x42,0x5F,0xE8,0x46,0x5F,0xFF,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x04,0x00,0x00,0x00,0xE8,0x6E,0x63,0x42,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_AndOverOr()
; location: [7FFDDB83D3C0h, 7FFDDB83D63Fh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0013h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9170E8h:jmp64]        encoding(5 bytes) = e8 d0 70 91 ff
0018h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001bh mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
0021h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
002bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 c0 70 42 5f
0030h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0033h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 f1 61 42 5f
003fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 a2 70 42 5f
004eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0050h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 d1 61 42 5f
005fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0064h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9170E8h:jmp64]        encoding(5 bytes) = e8 7f 70 91 ff
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0072h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
007ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 6f 70 42 5f
0081h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0084h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 a0 61 42 5f
0090h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
009ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 51 70 42 5f
009fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a4h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 80 61 42 5f
00b0h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b5h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9170E8h:jmp64]        encoding(5 bytes) = e8 2e 70 91 ff
00bah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bdh mov word ptr [rsi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 46 0c 63 00
00c3h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
00cdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 1e 70 42 5f
00d2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 4f 61 42 5f
00e1h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
00ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 00 70 42 5f
00f0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f2h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f5h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00f9h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 2f 61 42 5f
0101h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 e0 6f 42 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov byte ptr [rsi+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),7h:imm8]     encoding(4 bytes) = c6 46 18 07
0117h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011bh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
011eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 0d 61 42 5f
0123h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0127h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
012ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 01 61 42 5f
012fh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0139h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 b2 6f 42 5f
013eh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0141h mov byte ptr [r14+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,R14:br,DS:sr),1h:imm8]     encoding(5 bytes) = 41 c6 46 18 01
0146h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
014ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
014dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 de 60 42 5f
0152h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0156h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0159h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 d2 60 42 5f
015eh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0168h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 83 6f 42 5f
016dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0170h mov byte ptr [rsi+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),1h:imm8]     encoding(4 bytes) = c6 46 18 01
0174h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0178h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
017bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 b0 60 42 5f
0180h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0184h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0187h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 a4 60 42 5f
018ch mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0196h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 55 6f 42 5f
019bh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
019eh mov byte ptr [r15+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,R15:br,DS:sr),1h:imm8]     encoding(5 bytes) = 41 c6 47 18 01
01a3h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
01a7h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01aah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 81 60 42 5f
01afh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
01b3h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01b6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 75 60 42 5f
01bbh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
01c5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 26 6f 42 5f
01cah mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
01cdh mov byte ptr [r12+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,R12:br,DS:sr),7h:imm8]     encoding(6 bytes) = 41 c6 44 24 18 07
01d3h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
01d8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 50 60 42 5f
01e0h lea rcx,[r12+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 10
01e5h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01e8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 43 60 42 5f
01edh mov rcx,7FFDDB9C20D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c20d8h:imm64]         encoding(10 bytes) = 48 b9 d8 20 9c db fd 7f 00 00
01f7h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
01fch call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F427280h:jmp64]                encoding(5 bytes) = e8 7f 70 42 5f
0201h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0204h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0207h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
020ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
020ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F426350h:jmp64]                encoding(5 bytes) = e8 3f 61 42 5f
0211h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0214h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0217h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
021ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F426350h:jmp64]                encoding(5 bytes) = e8 2f 61 42 5f
0221h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0224h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0227h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
022ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F426350h:jmp64]                encoding(5 bytes) = e8 1f 61 42 5f
0231h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
023bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4270F0h:jmp64]                encoding(5 bytes) = e8 b0 6e 42 5f
0240h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0243h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
024ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
024eh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0251h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 da 5f 42 5f
0256h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
025ah mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
025dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 ce 5f 42 5f
0262h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
0266h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0269h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F426230h:jmp64]                encoding(5 bytes) = e8 c2 5f 42 5f
026eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0271h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0275h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0276h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0277h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0278h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0279h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
027bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
027dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
027fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_AndOverOrBytes => new byte[640]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0xD0,0x70,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0x70,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xF1,0x61,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA2,0x70,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xD1,0x61,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x7F,0x70,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6F,0x70,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA0,0x61,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0x70,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x80,0x61,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x2E,0x70,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x63,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1E,0x70,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x4F,0x61,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x00,0x70,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0x2F,0x61,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE0,0x6F,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x07,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x0D,0x61,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD5,0xE8,0x01,0x61,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB2,0x6F,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0xC6,0x46,0x18,0x01,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xDE,0x60,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD6,0xE8,0xD2,0x60,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x83,0x6F,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x01,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xB0,0x60,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0xA4,0x60,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0x6F,0x42,0x5F,0x4C,0x8B,0xF8,0x41,0xC6,0x47,0x18,0x01,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x81,0x60,0x42,0x5F,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD5,0xE8,0x75,0x60,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x26,0x6F,0x42,0x5F,0x4C,0x8B,0xE0,0x41,0xC6,0x44,0x24,0x18,0x07,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD6,0xE8,0x50,0x60,0x42,0x5F,0x49,0x8D,0x4C,0x24,0x10,0x49,0x8B,0xD7,0xE8,0x43,0x60,0x42,0x5F,0x48,0xB9,0xD8,0x20,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x7F,0x70,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0x3F,0x61,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0x2F,0x61,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x02,0x00,0x00,0x00,0xE8,0x1F,0x61,0x42,0x5F,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB0,0x6E,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0xDA,0x5F,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD4,0xE8,0xCE,0x5F,0x42,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0xC2,0x5F,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_AndOverXOr()
; location: [7FFDDB83D660h, 7FFDDB83D8DFh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0013h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916E48h:jmp64]        encoding(5 bytes) = e8 30 6e 91 ff
0018h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001bh mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
0021h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
002bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 20 6e 42 5f
0030h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0033h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 51 5f 42 5f
003fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 02 6e 42 5f
004eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0050h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 31 5f 42 5f
005fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0064h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916E48h:jmp64]        encoding(5 bytes) = e8 df 6d 91 ff
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0072h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
007ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 cf 6d 42 5f
0081h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0084h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 00 5f 42 5f
0090h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
009ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 b1 6d 42 5f
009fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a4h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 e0 5e 42 5f
00b0h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b5h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916E48h:jmp64]        encoding(5 bytes) = e8 8e 6d 91 ff
00bah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bdh mov word ptr [rsi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 46 0c 63 00
00c3h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
00cdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 7e 6d 42 5f
00d2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 af 5e 42 5f
00e1h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
00ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 60 6d 42 5f
00f0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f2h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f5h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00f9h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 8f 5e 42 5f
0101h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 40 6d 42 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov byte ptr [rsi+18h],6      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),6h:imm8]     encoding(4 bytes) = c6 46 18 06
0117h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011bh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
011eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 6d 5e 42 5f
0123h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0127h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
012ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 61 5e 42 5f
012fh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0139h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 12 6d 42 5f
013eh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0141h mov byte ptr [r14+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,R14:br,DS:sr),1h:imm8]     encoding(5 bytes) = 41 c6 46 18 01
0146h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
014ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
014dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 3e 5e 42 5f
0152h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0156h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0159h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 32 5e 42 5f
015eh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0168h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 e3 6c 42 5f
016dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0170h mov byte ptr [rsi+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),1h:imm8]     encoding(4 bytes) = c6 46 18 01
0174h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0178h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
017bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 10 5e 42 5f
0180h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0184h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0187h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 04 5e 42 5f
018ch mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0196h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 b5 6c 42 5f
019bh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
019eh mov byte ptr [r15+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,R15:br,DS:sr),1h:imm8]     encoding(5 bytes) = 41 c6 47 18 01
01a3h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
01a7h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01aah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 e1 5d 42 5f
01afh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
01b3h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01b6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 d5 5d 42 5f
01bbh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
01c5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 86 6c 42 5f
01cah mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
01cdh mov byte ptr [r12+18h],6      ; MOV(Mov_rm8_imm8) [mem(8u,R12:br,DS:sr),6h:imm8]     encoding(6 bytes) = 41 c6 44 24 18 06
01d3h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
01d8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 b0 5d 42 5f
01e0h lea rcx,[r12+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 10
01e5h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01e8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 a3 5d 42 5f
01edh mov rcx,7FFDDB9C20D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c20d8h:imm64]         encoding(10 bytes) = 48 b9 d8 20 9c db fd 7f 00 00
01f7h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
01fch call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F426FE0h:jmp64]                encoding(5 bytes) = e8 df 6d 42 5f
0201h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0204h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0207h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
020ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
020ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4260B0h:jmp64]                encoding(5 bytes) = e8 9f 5e 42 5f
0211h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0214h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0217h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
021ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4260B0h:jmp64]                encoding(5 bytes) = e8 8f 5e 42 5f
0221h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0224h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0227h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
022ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F4260B0h:jmp64]                encoding(5 bytes) = e8 7f 5e 42 5f
0231h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
023bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426E50h:jmp64]                encoding(5 bytes) = e8 10 6c 42 5f
0240h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0243h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
024ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
024eh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0251h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 3a 5d 42 5f
0256h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
025ah mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
025dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 2e 5d 42 5f
0262h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
0266h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0269h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425F90h:jmp64]                encoding(5 bytes) = e8 22 5d 42 5f
026eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0271h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0275h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0276h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0277h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0278h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0279h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
027bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
027dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
027fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_AndOverXOrBytes => new byte[640]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0x30,0x6E,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x20,0x6E,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x51,0x5F,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x02,0x6E,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x31,0x5F,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xDF,0x6D,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCF,0x6D,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x00,0x5F,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB1,0x6D,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xE0,0x5E,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x8E,0x6D,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x63,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7E,0x6D,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0xAF,0x5E,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x60,0x6D,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0x8F,0x5E,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x40,0x6D,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x06,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x6D,0x5E,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD5,0xE8,0x61,0x5E,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x12,0x6D,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0xC6,0x46,0x18,0x01,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x3E,0x5E,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD6,0xE8,0x32,0x5E,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE3,0x6C,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x01,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x10,0x5E,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x04,0x5E,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0x6C,0x42,0x5F,0x4C,0x8B,0xF8,0x41,0xC6,0x47,0x18,0x01,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE1,0x5D,0x42,0x5F,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD5,0xE8,0xD5,0x5D,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x86,0x6C,0x42,0x5F,0x4C,0x8B,0xE0,0x41,0xC6,0x44,0x24,0x18,0x06,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD6,0xE8,0xB0,0x5D,0x42,0x5F,0x49,0x8D,0x4C,0x24,0x10,0x49,0x8B,0xD7,0xE8,0xA3,0x5D,0x42,0x5F,0x48,0xB9,0xD8,0x20,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xDF,0x6D,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0x9F,0x5E,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0x8F,0x5E,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x02,0x00,0x00,0x00,0xE8,0x7F,0x5E,0x42,0x5F,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x10,0x6C,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0x3A,0x5D,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD4,0xE8,0x2E,0x5D,0x42,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0x22,0x5D,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_OrOverAnd()
; location: [7FFDDB83D900h, 7FFDDB83DB7Fh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0013h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916BA8h:jmp64]        encoding(5 bytes) = e8 90 6b 91 ff
0018h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001bh mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
0021h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
002bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 80 6b 42 5f
0030h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0033h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 b1 5c 42 5f
003fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 62 6b 42 5f
004eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0050h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 91 5c 42 5f
005fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0064h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916BA8h:jmp64]        encoding(5 bytes) = e8 3f 6b 91 ff
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0072h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
007ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 2f 6b 42 5f
0081h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0084h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 60 5c 42 5f
0090h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
009ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 11 6b 42 5f
009fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a4h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 40 5c 42 5f
00b0h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b5h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916BA8h:jmp64]        encoding(5 bytes) = e8 ee 6a 91 ff
00bah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bdh mov word ptr [rsi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 46 0c 63 00
00c3h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
00cdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 de 6a 42 5f
00d2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 0f 5c 42 5f
00e1h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
00ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 c0 6a 42 5f
00f0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f2h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f5h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00f9h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 ef 5b 42 5f
0101h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 a0 6a 42 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov byte ptr [rsi+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),7h:imm8]     encoding(4 bytes) = c6 46 18 07
0117h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011bh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
011eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 cd 5b 42 5f
0123h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0127h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
012ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 c1 5b 42 5f
012fh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0139h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 72 6a 42 5f
013eh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0141h mov byte ptr [r14+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,R14:br,DS:sr),1h:imm8]     encoding(5 bytes) = 41 c6 46 18 01
0146h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
014ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
014dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 9e 5b 42 5f
0152h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0156h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0159h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 92 5b 42 5f
015eh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0168h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 43 6a 42 5f
016dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0170h mov byte ptr [rsi+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),1h:imm8]     encoding(4 bytes) = c6 46 18 01
0174h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0178h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
017bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 70 5b 42 5f
0180h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0184h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0187h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 64 5b 42 5f
018ch mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0196h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 15 6a 42 5f
019bh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
019eh mov byte ptr [r15+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,R15:br,DS:sr),1h:imm8]     encoding(5 bytes) = 41 c6 47 18 01
01a3h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
01a7h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01aah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 41 5b 42 5f
01afh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
01b3h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01b6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 35 5b 42 5f
01bbh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
01c5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 e6 69 42 5f
01cah mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
01cdh mov byte ptr [r12+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,R12:br,DS:sr),7h:imm8]     encoding(6 bytes) = 41 c6 44 24 18 07
01d3h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
01d8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 10 5b 42 5f
01e0h lea rcx,[r12+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 10
01e5h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01e8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 03 5b 42 5f
01edh mov rcx,7FFDDB9C20D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c20d8h:imm64]         encoding(10 bytes) = 48 b9 d8 20 9c db fd 7f 00 00
01f7h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
01fch call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F426D40h:jmp64]                encoding(5 bytes) = e8 3f 6b 42 5f
0201h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0204h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0207h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
020ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
020ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425E10h:jmp64]                encoding(5 bytes) = e8 ff 5b 42 5f
0211h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0214h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0217h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
021ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425E10h:jmp64]                encoding(5 bytes) = e8 ef 5b 42 5f
0221h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0224h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0227h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
022ch call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425E10h:jmp64]                encoding(5 bytes) = e8 df 5b 42 5f
0231h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
023bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426BB0h:jmp64]                encoding(5 bytes) = e8 70 69 42 5f
0240h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0243h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
024ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
024eh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0251h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 9a 5a 42 5f
0256h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
025ah mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
025dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 8e 5a 42 5f
0262h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
0266h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0269h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425CF0h:jmp64]                encoding(5 bytes) = e8 82 5a 42 5f
026eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0271h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0275h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0276h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0277h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0278h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0279h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
027bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
027dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
027fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OrOverAndBytes => new byte[640]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0x90,0x6B,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0x6B,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xB1,0x5C,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x62,0x6B,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x91,0x5C,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x3F,0x6B,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2F,0x6B,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x60,0x5C,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0x6B,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x40,0x5C,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xEE,0x6A,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x63,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDE,0x6A,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x0F,0x5C,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0x6A,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xEF,0x5B,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA0,0x6A,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x07,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xCD,0x5B,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD5,0xE8,0xC1,0x5B,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x72,0x6A,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0xC6,0x46,0x18,0x01,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x9E,0x5B,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD6,0xE8,0x92,0x5B,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x43,0x6A,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x01,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x70,0x5B,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x64,0x5B,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x15,0x6A,0x42,0x5F,0x4C,0x8B,0xF8,0x41,0xC6,0x47,0x18,0x01,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x41,0x5B,0x42,0x5F,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD5,0xE8,0x35,0x5B,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0x69,0x42,0x5F,0x4C,0x8B,0xE0,0x41,0xC6,0x44,0x24,0x18,0x07,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD6,0xE8,0x10,0x5B,0x42,0x5F,0x49,0x8D,0x4C,0x24,0x10,0x49,0x8B,0xD7,0xE8,0x03,0x5B,0x42,0x5F,0x48,0xB9,0xD8,0x20,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x3F,0x6B,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0xFF,0x5B,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0xEF,0x5B,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x02,0x00,0x00,0x00,0xE8,0xDF,0x5B,0x42,0x5F,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x70,0x69,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0x9A,0x5A,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD4,0xE8,0x8E,0x5A,0x42,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0x82,0x5A,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_NotOverAnd()
; location: [7FFDDB83DBA0h, 7FFDDB83DD9Bh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0011h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916908h:jmp64]        encoding(5 bytes) = e8 f2 68 91 ff
0016h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0019h mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
001fh mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0029h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 e2 68 42 5f
002eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0031h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0035h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0038h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 13 5a 42 5f
003dh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0047h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 c4 68 42 5f
004ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004eh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0051h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0055h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0058h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 f3 59 42 5f
005dh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0062h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916908h:jmp64]        encoding(5 bytes) = e8 a1 68 91 ff
0067h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ah mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0070h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
007ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 91 68 42 5f
007fh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0082h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0086h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0089h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 c2 59 42 5f
008eh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0098h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 73 68 42 5f
009dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
009fh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a2h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a6h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00a9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 a2 59 42 5f
00aeh mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
00b8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 53 68 42 5f
00bdh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c0h mov byte ptr [rsi+18h],1      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),1h:imm8]     encoding(4 bytes) = c6 46 18 01
00c4h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00cbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 80 59 42 5f
00d0h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
00d4h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00d7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 74 59 42 5f
00dch mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
00e6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 25 68 42 5f
00ebh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00eeh mov dword ptr [rbp+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),1h:imm32] encoding(7 bytes) = c7 45 10 01 00 00 00
00f5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00f9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 4f 59 42 5f
0101h mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 00 68 42 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov dword ptr [rsi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 10 01 00 00 00
011ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0121h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 2a 59 42 5f
0126h mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
0130h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 db 67 42 5f
0135h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0138h mov dword ptr [r14+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 10 01 00 00 00
0140h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0144h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0147h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 04 59 42 5f
014ch mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
0156h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 b5 67 42 5f
015bh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
015eh mov byte ptr [r15+18h],7      ; MOV(Mov_rm8_imm8) [mem(8u,R15:br,DS:sr),7h:imm8]     encoding(5 bytes) = 41 c6 47 18 07
0163h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
0167h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
016ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 e1 58 42 5f
016fh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
0173h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0176h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 d5 58 42 5f
017bh mov rcx,7FFDDB9C20D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c20d8h:imm64]         encoding(10 bytes) = 48 b9 d8 20 9c db fd 7f 00 00
0185h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
018ah call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F426AA0h:jmp64]                encoding(5 bytes) = e8 11 69 42 5f
018fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0192h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0195h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0198h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
019ah call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425B70h:jmp64]                encoding(5 bytes) = e8 d1 59 42 5f
019fh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
01a2h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
01a5h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01aah call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425B70h:jmp64]                encoding(5 bytes) = e8 c1 59 42 5f
01afh mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
01b9h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426910h:jmp64]                encoding(5 bytes) = e8 52 67 42 5f
01beh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
01c1h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
01c8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
01cch mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01cfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 7c 58 42 5f
01d4h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
01d8h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 70 58 42 5f
01e0h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
01e4h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01e7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425A50h:jmp64]                encoding(5 bytes) = e8 64 58 42 5f
01ech mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
01efh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01f3h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01f4h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01f5h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01f6h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01f7h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
01f9h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
01fbh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NotOverAndBytes => new byte[508]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0xB9,0x01,0x00,0x00,0x00,0xE8,0xF2,0x68,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE2,0x68,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x13,0x5A,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0x68,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xF3,0x59,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xA1,0x68,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x91,0x68,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC2,0x59,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x73,0x68,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xA2,0x59,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x53,0x68,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x01,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x80,0x59,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x74,0x59,0x42,0x5F,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x25,0x68,0x42,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x4F,0x59,0x42,0x5F,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x00,0x68,0x42,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x2A,0x59,0x42,0x5F,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDB,0x67,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x04,0x59,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0x67,0x42,0x5F,0x4C,0x8B,0xF8,0x41,0xC6,0x47,0x18,0x07,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xE1,0x58,0x42,0x5F,0x49,0x8D,0x4F,0x10,0x49,0x8B,0xD6,0xE8,0xD5,0x58,0x42,0x5F,0x48,0xB9,0xD8,0x20,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x11,0x69,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0xD1,0x59,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0xC1,0x59,0x42,0x5F,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x52,0x67,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD5,0xE8,0x7C,0x58,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD7,0xE8,0x70,0x58,0x42,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0x64,0x58,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_NotOverXOr()
; location: [7FFDDB83DDC0h, 7FFDDB83DF91h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
000fh call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9166E8h:jmp64]        encoding(5 bytes) = e8 d4 66 91 ff
0014h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0017h mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
001dh mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0027h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 c4 66 42 5f
002ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
002fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0033h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 f5 57 42 5f
003bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0045h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 a6 66 42 5f
004ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004ch mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
004fh lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0053h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0056h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 d5 57 42 5f
005bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0060h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9166E8h:jmp64]        encoding(5 bytes) = e8 83 66 91 ff
0065h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0068h mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
006eh mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0078h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 73 66 42 5f
007dh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0080h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0084h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0087h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 a4 57 42 5f
008ch mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0096h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 55 66 42 5f
009bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
009dh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a0h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a4h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00a7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 84 57 42 5f
00ach mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
00b6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 35 66 42 5f
00bbh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00beh mov byte ptr [rsi+18h],6      ; MOV(Mov_rm8_imm8) [mem(8u,RSI:br,DS:sr),6h:imm8]     encoding(4 bytes) = c6 46 18 06
00c2h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c6h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00c9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 62 57 42 5f
00ceh lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
00d2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00d5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 56 57 42 5f
00dah mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
00e4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 07 66 42 5f
00e9h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00ech mov dword ptr [rbp+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),1h:imm32] encoding(7 bytes) = c7 45 10 01 00 00 00
00f3h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00f7h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00fah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 31 57 42 5f
00ffh mov rcx,7FFDDB9A6070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6070h:imm64]         encoding(10 bytes) = 48 b9 70 60 9a db fd 7f 00 00
0109h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 e2 65 42 5f
010eh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0111h mov dword ptr [rsi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 10 01 00 00 00
0118h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011ch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
011fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 0c 57 42 5f
0124h mov rcx,7FFDDB9A4A60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4a60h:imm64]         encoding(10 bytes) = 48 b9 60 4a 9a db fd 7f 00 00
012eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 bd 65 42 5f
0133h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0136h mov byte ptr [r14+18h],6      ; MOV(Mov_rm8_imm8) [mem(8u,R14:br,DS:sr),6h:imm8]     encoding(5 bytes) = 41 c6 46 18 06
013bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
013fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0142h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 e9 56 42 5f
0147h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
014bh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
014eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 dd 56 42 5f
0153h mov rcx,7FFDDB9C20D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c20d8h:imm64]         encoding(10 bytes) = 48 b9 d8 20 9c db fd 7f 00 00
015dh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0162h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F426880h:jmp64]                encoding(5 bytes) = e8 19 67 42 5f
0167h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
016ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
016dh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0170h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0172h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425950h:jmp64]                encoding(5 bytes) = e8 d9 57 42 5f
0177h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
017ah mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
017dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0182h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F425950h:jmp64]                encoding(5 bytes) = e8 c9 57 42 5f
0187h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
0191h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4266F0h:jmp64]                encoding(5 bytes) = e8 5a 65 42 5f
0196h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0199h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
01a0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
01a4h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01a7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 84 56 42 5f
01ach lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
01b0h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
01b3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 78 56 42 5f
01b8h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
01bch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01bfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425830h:jmp64]                encoding(5 bytes) = e8 6c 56 42 5f
01c4h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
01c7h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
01cbh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01cch pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01cdh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01ceh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01cfh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
01d1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NotOverXOrBytes => new byte[466]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0xD4,0x66,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0x66,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xF5,0x57,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0x66,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xD5,0x57,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x83,0x66,0x91,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x73,0x66,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA4,0x57,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0x66,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x84,0x57,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x35,0x66,0x42,0x5F,0x48,0x8B,0xF0,0xC6,0x46,0x18,0x06,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x62,0x57,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x56,0x57,0x42,0x5F,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x07,0x66,0x42,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x31,0x57,0x42,0x5F,0x48,0xB9,0x70,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE2,0x65,0x42,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x0C,0x57,0x42,0x5F,0x48,0xB9,0x60,0x4A,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBD,0x65,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0xC6,0x46,0x18,0x06,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xE9,0x56,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0xDD,0x56,0x42,0x5F,0x48,0xB9,0xD8,0x20,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x19,0x67,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0xD9,0x57,0x42,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0xC9,0x57,0x42,0x5F,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5A,0x65,0x42,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD5,0xE8,0x84,0x56,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD6,0xE8,0x78,0x56,0x42,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0x6C,0x56,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ValueTuple<LogicVariable,LogicVariable> get_vars2()
; location: [7FFDDB83DFB0h, 7FFDDB83E07Fh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0010h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9164F8h:jmp64]        encoding(5 bytes) = e8 e3 64 91 ff
0015h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0018h mov word ptr [rdi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 47 0c 61 00
001eh mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0028h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426500h:jmp64]                encoding(5 bytes) = e8 d3 64 42 5f
002dh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0030h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0034h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0037h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425640h:jmp64]                encoding(5 bytes) = e8 04 56 42 5f
003ch mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0046h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426500h:jmp64]                encoding(5 bytes) = e8 b5 64 42 5f
004bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004dh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0050h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0054h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0057h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425640h:jmp64]                encoding(5 bytes) = e8 e4 55 42 5f
005ch mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0061h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9164F8h:jmp64]        encoding(5 bytes) = e8 92 64 91 ff
0066h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0069h mov word ptr [rdi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 47 0c 62 00
006fh mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
0079h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426500h:jmp64]                encoding(5 bytes) = e8 82 64 42 5f
007eh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0081h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0085h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0088h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425640h:jmp64]                encoding(5 bytes) = e8 b3 55 42 5f
008dh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0097h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426500h:jmp64]                encoding(5 bytes) = e8 64 64 42 5f
009ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
009eh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a1h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00a5h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00a8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425640h:jmp64]                encoding(5 bytes) = e8 93 55 42 5f
00adh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00b0h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
00b3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F425610h:jmp64]                encoding(5 bytes) = e8 58 55 42 5f
00b8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00bch mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
00bfh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F425610h:jmp64]                encoding(5 bytes) = e8 4c 55 42 5f
00c4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00c7h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00cbh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00cch pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00cdh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00ceh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00cfh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_vars2Bytes => new byte[208]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0xB9,0x01,0x00,0x00,0x00,0xE8,0xE3,0x64,0x91,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD3,0x64,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD7,0xE8,0x04,0x56,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0x64,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xE4,0x55,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x92,0x64,0x91,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x82,0x64,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD7,0xE8,0xB3,0x55,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x64,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0x93,0x55,0x42,0x5F,0x48,0x8B,0xD3,0x48,0x8B,0xCE,0xE8,0x58,0x55,0x42,0x5F,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD5,0xE8,0x4C,0x55,0x42,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ValueTuple<LogicVariable,LogicVariable,LogicVariable> get_vars3()
; location: [7FFDDB83E0A0h, 7FFDDB83E1D0h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0012h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916408h:jmp64]        encoding(5 bytes) = e8 f1 63 91 ff
0017h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001ah mov word ptr [rdi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 47 0c 61 00
0020h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 e1 63 42 5f
002fh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0032h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425550h:jmp64]                encoding(5 bytes) = e8 12 55 42 5f
003eh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0048h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 c3 63 42 5f
004dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004fh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0052h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0056h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0059h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425550h:jmp64]                encoding(5 bytes) = e8 f2 54 42 5f
005eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0063h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916408h:jmp64]        encoding(5 bytes) = e8 a0 63 91 ff
0068h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
006bh mov word ptr [rdi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 47 0c 62 00
0071h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 90 63 42 5f
0080h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0083h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0087h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
008ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425550h:jmp64]                encoding(5 bytes) = e8 c1 54 42 5f
008fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0099h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 72 63 42 5f
009eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a0h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a3h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00a7h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00aah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425550h:jmp64]                encoding(5 bytes) = e8 a1 54 42 5f
00afh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b4h call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF916408h:jmp64]        encoding(5 bytes) = e8 4f 63 91 ff
00b9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00bch mov word ptr [rdi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 47 0c 63 00
00c2h mov rcx,7FFDDB9A5720h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5720h:imm64]         encoding(10 bytes) = 48 b9 20 57 9a db fd 7f 00 00
00cch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 3f 63 42 5f
00d1h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
00d4h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
00d8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425550h:jmp64]                encoding(5 bytes) = e8 70 54 42 5f
00e0h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
00eah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F426410h:jmp64]                encoding(5 bytes) = e8 21 63 42 5f
00efh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f4h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
00f8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425550h:jmp64]                encoding(5 bytes) = e8 50 54 42 5f
0100h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0103h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0106h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F425520h:jmp64]                encoding(5 bytes) = e8 15 54 42 5f
010bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
010fh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0112h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F425520h:jmp64]                encoding(5 bytes) = e8 09 54 42 5f
0117h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
011bh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
011eh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F425520h:jmp64]                encoding(5 bytes) = e8 fd 53 42 5f
0123h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0126h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
012ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
012bh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
012ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
012dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
012eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0130h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_vars3Bytes => new byte[305]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0xB9,0x01,0x00,0x00,0x00,0xE8,0xF1,0x63,0x91,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x61,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x63,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD7,0xE8,0x12,0x55,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC3,0x63,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xF2,0x54,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xA0,0x63,0x91,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x62,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x90,0x63,0x42,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD7,0xE8,0xC1,0x54,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x72,0x63,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xA1,0x54,0x42,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x4F,0x63,0x91,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x63,0x00,0x48,0xB9,0x20,0x57,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3F,0x63,0x42,0x5F,0x4C,0x8B,0xF0,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x70,0x54,0x42,0x5F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0x63,0x42,0x5F,0x33,0xD2,0x89,0x50,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x50,0x54,0x42,0x5F,0x48,0x8B,0xD3,0x48,0x8B,0xCE,0xE8,0x15,0x54,0x42,0x5F,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD5,0xE8,0x09,0x54,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x49,0x8B,0xD6,0xE8,0xFD,0x53,0x42,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_Name()
; location: [7FFDDB83E240h, 7FFDDB83E249h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NameBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IExpr get_Encoding()
; location: [7FFDDB83E260h, 7FFDDB83E269h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_EncodingBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83E280h, 7FFDDB83E2CCh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
000ah mov r11,1F96B0094B8h          ; MOV(Mov_r64_imm64) [R11,1f96b0094b8h:imm64]          encoding(10 bytes) = 49 bb b8 94 00 6b f9 01 00 00
0014h mov rdi,[r11]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,R11:br,DS:sr)]        encoding(3 bytes) = 49 8b 3b
0017h mov rcx,[rcx+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 10
001bh mov r11,7FFDDB030EE8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ee8h:imm64]         encoding(10 bytes) = 49 bb e8 0e 03 db fd 7f 00 00
0025h mov rax,7FFDDB030EE8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ee8h:imm64]         encoding(10 bytes) = 48 b8 e8 0e 03 db fd 7f 00 00
002fh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0031h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0033h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
003ch mov rax,7FFE39224DE0h         ; MOV(Mov_r64_imm64) [RAX,7ffe39224de0h:imm64]         encoding(10 bytes) = 48 b8 e0 4d 22 39 fe 7f 00 00
0046h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
004ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004ch jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0x71,0x08,0x49,0xBB,0xB8,0x94,0x00,0x6B,0xF9,0x01,0x00,0x00,0x49,0x8B,0x3B,0x48,0x8B,0x49,0x10,0x49,0xBB,0xE8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xE8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x4C,0x8B,0xC0,0x48,0x8B,0xD7,0x48,0x8B,0xCE,0x48,0xB8,0xE0,0x4D,0x22,0x39,0xFE,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr Define(ComparisonKind:uint kind, ILogicExpr lhs, ILogicExpr rhs, LogicVariable[] vars)
; location: [7FFDDB83E2F0h, 7FFDDB83E34Ch]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ebp,ecx                   ; MOV(Mov_r32_rm32) [EBP,ECX]                          encoding(2 bytes) = 8b e9
000ch mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000fh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0012h mov rbx,r9                    ; MOV(Mov_r64_rm64) [RBX,R9]                           encoding(3 bytes) = 49 8b d9
0015h mov rcx,7FFDDB9A4200h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a4200h:imm64]         encoding(10 bytes) = 48 b9 00 42 9a db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4261C0h:jmp64]                encoding(5 bytes) = e8 9c 61 42 5f
0024h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0027h mov [r14+20h],ebp             ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),EBP]        encoding(4 bytes) = 41 89 6e 20
002bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
002fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425300h:jmp64]                encoding(5 bytes) = e8 c9 52 42 5f
0037h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
003bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425300h:jmp64]                encoding(5 bytes) = e8 bd 52 42 5f
0043h lea rcx,[r14+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 18
0047h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425300h:jmp64]                encoding(5 bytes) = e8 b1 52 42 5f
004fh mov rax,r14                   ; MOV(Mov_r64_rm64) [RAX,R14]                          encoding(3 bytes) = 49 8b c6
0052h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0058h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0059h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
005ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[93]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xE9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x49,0x8B,0xD9,0x48,0xB9,0x00,0x42,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0x61,0x42,0x5F,0x4C,0x8B,0xF0,0x41,0x89,0x6E,0x20,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xC9,0x52,0x42,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD7,0xE8,0xBD,0x52,0x42,0x5F,0x49,0x8D,0x4E,0x18,0x48,0x8B,0xD3,0xE8,0xB1,0x52,0x42,0x5F,0x49,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind:uint get_ComparisonKind()
; location: [7FFDDB83E370h, 7FFDDB83E378h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 20
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x20,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Lhs()
; location: [7FFDDB83E390h, 7FFDDB83E399h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_LhsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Rhs()
; location: [7FFDDB83E3B0h, 7FFDDB83E3B9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_RhsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable[] get_Vars()
; location: [7FFDDB83E3D0h, 7FFDDB83E3D9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+18h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 18
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VarsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x18,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(ILogicExpr[] values)
; location: [7FFDDB83E3F0h, 7FFDDB83E4AFh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0010h mov rdi,rcx                   ; MOV(Mov_r64_rm64) [RDI,RCX]                          encoding(3 bytes) = 48 8b f9
0013h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
0016h mov rbx,[rdi+18h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 5f 18
001ah mov ebp,[rbx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RBX:br,DS:sr)]        encoding(3 bytes) = 8b 6b 08
001dh mov r14d,[rsi+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RSI:br,DS:sr)]       encoding(4 bytes) = 44 8b 76 08
0021h mov r15d,r14d                 ; MOV(Mov_r32_rm32) [R15D,R14D]                        encoding(3 bytes) = 45 8b fe
0024h cmp ebp,r15d                  ; CMP(Cmp_r32_rm32) [EBP,R15D]                         encoding(3 bytes) = 41 3b ef
0027h jle short 002bh               ; JLE(Jle_rel8_64) [2Bh:jmp64]                         encoding(2 bytes) = 7e 02
0029h jmp short 002eh               ; JMP(Jmp_rel8_64) [2Eh:jmp64]                         encoding(2 bytes) = eb 03
002bh mov r15d,ebp                  ; MOV(Mov_r32_rm32) [R15D,EBP]                         encoding(3 bytes) = 44 8b fd
002eh xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
0030h test r15d,r15d                ; TEST(Test_rm32_r32) [R15D,R15D]                      encoding(3 bytes) = 45 85 ff
0033h jle short 00a9h               ; JLE(Jle_rel8_64) [A9h:jmp64]                         encoding(2 bytes) = 7e 74
0035h cmp r14d,r15d                 ; CMP(Cmp_r32_rm32) [R14D,R15D]                        encoding(3 bytes) = 45 3b f7
0038h setge dl                      ; SETGE(Setge_rm8) [DL]                                encoding(3 bytes) = 0f 9d c2
003bh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
003eh test r15d,r15d                ; TEST(Test_rm32_r32) [R15D,R15D]                      encoding(3 bytes) = 45 85 ff
0041h setge cl                      ; SETGE(Setge_rm8) [CL]                                encoding(3 bytes) = 0f 9d c1
0044h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0047h test edx,ecx                  ; TEST(Test_rm32_r32) [ECX,EDX]                        encoding(2 bytes) = 85 d1
0049h je short 0078h                ; JE(Je_rel8_64) [78h:jmp64]                           encoding(2 bytes) = 74 2d
004bh mov r12,rbx                   ; MOV(Mov_r64_rm64) [R12,RBX]                          encoding(3 bytes) = 4c 8b e3
004eh cmp ebp,[r12+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R12:br,DS:sr)]        encoding(5 bytes) = 41 3b 6c 24 08
0053h jae short 00bah               ; JAE(Jae_rel8_64) [BAh:jmp64]                         encoding(2 bytes) = 73 65
0055h movsxd rdx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBP]                    encoding(3 bytes) = 48 63 d5
0058h mov r13,[r12+rdx*8+10h]       ; MOV(Mov_r64_rm64) [R13,mem(64u,R12:br,DS:sr)]        encoding(5 bytes) = 4d 8b 6c d4 10
005dh mov rdx,[rsi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d6 10
0062h mov ecx,[r13]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R13:br,DS:sr)]        encoding(4 bytes) = 41 8b 4d 00
0066h lea rcx,[r13+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 10
006ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425200h:jmp64]                encoding(5 bytes) = e8 91 51 42 5f
006fh inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
0071h cmp ebp,r15d                  ; CMP(Cmp_r32_rm32) [EBP,R15D]                         encoding(3 bytes) = 41 3b ef
0074h jl short 004bh                ; JL(Jl_rel8_64) [4Bh:jmp64]                           encoding(2 bytes) = 7c d5
0076h jmp short 00a9h               ; JMP(Jmp_rel8_64) [A9h:jmp64]                         encoding(2 bytes) = eb 31
0078h mov r12,[rdi+18h]             ; MOV(Mov_r64_rm64) [R12,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 67 18
007ch cmp ebp,[r12+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R12:br,DS:sr)]        encoding(5 bytes) = 41 3b 6c 24 08
0081h jae short 00bah               ; JAE(Jae_rel8_64) [BAh:jmp64]                         encoding(2 bytes) = 73 37
0083h movsxd rdx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBP]                    encoding(3 bytes) = 48 63 d5
0086h mov r13,[r12+rdx*8+10h]       ; MOV(Mov_r64_rm64) [R13,mem(64u,R12:br,DS:sr)]        encoding(5 bytes) = 4d 8b 6c d4 10
008bh cmp ebp,r14d                  ; CMP(Cmp_r32_rm32) [EBP,R14D]                         encoding(3 bytes) = 41 3b ee
008eh jae short 00bah               ; JAE(Jae_rel8_64) [BAh:jmp64]                         encoding(2 bytes) = 73 2a
0090h mov rdx,[rsi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d6 10
0095h mov ecx,[r13]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R13:br,DS:sr)]        encoding(4 bytes) = 41 8b 4d 00
0099h lea rcx,[r13+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 10
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425200h:jmp64]                encoding(5 bytes) = e8 5e 51 42 5f
00a2h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
00a4h cmp ebp,r15d                  ; CMP(Cmp_r32_rm32) [EBP,R15D]                         encoding(3 bytes) = 41 3b ef
00a7h jl short 0078h                ; JL(Jl_rel8_64) [78h:jmp64]                           encoding(2 bytes) = 7c cf
00a9h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00adh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00aeh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00afh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00b0h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00b1h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
00b3h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
00b5h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00b7h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00b9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00bah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F550B10h:jmp64]                encoding(5 bytes) = e8 51 0a 55 5f
00bfh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[192]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF9,0x48,0x8B,0xF2,0x48,0x8B,0x5F,0x18,0x8B,0x6B,0x08,0x44,0x8B,0x76,0x08,0x45,0x8B,0xFE,0x41,0x3B,0xEF,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xFD,0x33,0xED,0x45,0x85,0xFF,0x7E,0x74,0x45,0x3B,0xF7,0x0F,0x9D,0xC2,0x0F,0xB6,0xD2,0x45,0x85,0xFF,0x0F,0x9D,0xC1,0x0F,0xB6,0xC9,0x85,0xD1,0x74,0x2D,0x4C,0x8B,0xE3,0x41,0x3B,0x6C,0x24,0x08,0x73,0x65,0x48,0x63,0xD5,0x4D,0x8B,0x6C,0xD4,0x10,0x48,0x8B,0x54,0xD6,0x10,0x41,0x8B,0x4D,0x00,0x49,0x8D,0x4D,0x10,0xE8,0x91,0x51,0x42,0x5F,0xFF,0xC5,0x41,0x3B,0xEF,0x7C,0xD5,0xEB,0x31,0x4C,0x8B,0x67,0x18,0x41,0x3B,0x6C,0x24,0x08,0x73,0x37,0x48,0x63,0xD5,0x4D,0x8B,0x6C,0xD4,0x10,0x41,0x3B,0xEE,0x73,0x2A,0x48,0x8B,0x54,0xD6,0x10,0x41,0x8B,0x4D,0x00,0x49,0x8D,0x4D,0x10,0xE8,0x5E,0x51,0x42,0x5F,0xFF,0xC5,0x41,0x3B,0xEF,0x7C,0xCF,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x51,0x0A,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(ILiteralLogicSeq values)
; location: [7FFDDB83E4E0h, 7FFDDB83E58Fh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000fh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
0012h mov rcx,[rsi+18h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 18
0016h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0019h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
001ch mov r11,7FFDDB030EF0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ef0h:imm64]         encoding(10 bytes) = 49 bb f0 0e 03 db fd 7f 00 00
0026h mov rax,7FFDDB030EF0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ef0h:imm64]         encoding(10 bytes) = 48 b8 f0 0e 03 db fd 7f 00 00
0030h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0032h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0034h cmp ebx,eax                   ; CMP(Cmp_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 3b d8
0036h jle short 003ch               ; JLE(Jle_rel8_64) [3Ch:jmp64]                         encoding(2 bytes) = 7e 04
0038h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
003ah jmp short 003eh               ; JMP(Jmp_rel8_64) [3Eh:jmp64]                         encoding(2 bytes) = eb 02
003ch mov ebp,ebx                   ; MOV(Mov_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 8b eb
003eh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0040h test ebp,ebp                  ; TEST(Test_rm32_r32) [EBP,EBP]                        encoding(2 bytes) = 85 ed
0042h jle short 009dh               ; JLE(Jle_rel8_64) [9Dh:jmp64]                         encoding(2 bytes) = 7e 59
0044h mov rcx,[rsi+18h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 18
0048h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
004bh jae short 00aah               ; JAE(Jae_rel8_64) [AAh:jmp64]                         encoding(2 bytes) = 73 5d
004dh movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
0050h mov r14,[rcx+rdx*8+10h]       ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 4c 8b 74 d1 10
0055h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0058h mov edx,ebx                   ; MOV(Mov_r32_rm32) [EDX,EBX]                          encoding(2 bytes) = 8b d3
005ah mov r11,7FFDDB030EF8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ef8h:imm64]         encoding(10 bytes) = 49 bb f8 0e 03 db fd 7f 00 00
0064h mov rax,7FFDDB030EF8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ef8h:imm64]         encoding(10 bytes) = 48 b8 f8 0e 03 db fd 7f 00 00
006eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0070h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0072h mov r15d,eax                  ; MOV(Mov_r32_rm32) [R15D,EAX]                         encoding(3 bytes) = 44 8b f8
0075h mov ecx,[r14]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R14:br,DS:sr)]        encoding(3 bytes) = 41 8b 0e
0078h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0082h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425FD0h:jmp64]                encoding(5 bytes) = e8 49 5f 42 5f
0087h mov [rax+8],r15d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R15D]       encoding(4 bytes) = 44 89 78 08
008bh lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
008fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0092h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425110h:jmp64]                encoding(5 bytes) = e8 79 50 42 5f
0097h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0099h cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
009bh jl short 0044h                ; JL(Jl_rel8_64) [44h:jmp64]                           encoding(2 bytes) = 7c a7
009dh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00a1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00a3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00a5h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00a7h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00a9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00aah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F550A20h:jmp64]                encoding(5 bytes) = e8 71 09 55 5f
00afh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[176]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x18,0x8B,0x59,0x08,0x48,0x8B,0xCF,0x49,0xBB,0xF0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xF0,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x3B,0xD8,0x7E,0x04,0x8B,0xE8,0xEB,0x02,0x8B,0xEB,0x33,0xDB,0x85,0xED,0x7E,0x59,0x48,0x8B,0x4E,0x18,0x3B,0x59,0x08,0x73,0x5D,0x48,0x63,0xD3,0x4C,0x8B,0x74,0xD1,0x10,0x48,0x8B,0xCF,0x8B,0xD3,0x49,0xBB,0xF8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xF8,0x0E,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x44,0x8B,0xF8,0x41,0x8B,0x0E,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x49,0x5F,0x42,0x5F,0x44,0x89,0x78,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x79,0x50,0x42,0x5F,0xFF,0xC3,0x3B,0xDD,0x7C,0xA7,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x71,0x09,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit[] values)
; location: [7FFDDB83E5B0h, 7FFDDB83E635h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
0011h mov rdi,[rcx+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 18
0015h mov ebx,[rdi+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RDI:br,DS:sr)]        encoding(3 bytes) = 8b 5f 08
0018h mov ebp,[rsi+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 6e 08
001bh mov r14d,ebp                  ; MOV(Mov_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 8b f5
001eh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0021h jle short 0025h               ; JLE(Jle_rel8_64) [25h:jmp64]                         encoding(2 bytes) = 7e 02
0023h jmp short 0028h               ; JMP(Jmp_rel8_64) [28h:jmp64]                         encoding(2 bytes) = eb 03
0025h mov r14d,ebx                  ; MOV(Mov_r32_rm32) [R14D,EBX]                         encoding(3 bytes) = 44 8b f3
0028h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
002ah test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002dh jle short 0071h               ; JLE(Jle_rel8_64) [71h:jmp64]                         encoding(2 bytes) = 7e 42
002fh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0032h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0035h jae short 0080h               ; JAE(Jae_rel8_64) [80h:jmp64]                         encoding(2 bytes) = 73 49
0037h movsxd rax,ebx                ; MOVSXD(Movsxd_r64_rm32) [RAX,EBX]                    encoding(3 bytes) = 48 63 c3
003ah mov r15,[rcx+rax*8+10h]       ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 4c 8b 7c c1 10
003fh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0041h jae short 0080h               ; JAE(Jae_rel8_64) [80h:jmp64]                         encoding(2 bytes) = 73 3d
0043h mov r12d,[rsi+rax*4+10h]      ; MOV(Mov_r32_rm32) [R12D,mem(32u,RSI:br,DS:sr)]       encoding(5 bytes) = 44 8b 64 86 10
0048h mov ecx,[r15]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R15:br,DS:sr)]        encoding(3 bytes) = 41 8b 0f
004bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0055h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425F00h:jmp64]                encoding(5 bytes) = e8 a6 5e 42 5f
005ah mov [rax+8],r12d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R12D]       encoding(4 bytes) = 44 89 60 08
005eh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
0062h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0065h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F425040h:jmp64]                encoding(5 bytes) = e8 d6 4f 42 5f
006ah inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
006ch cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
006fh jl short 002fh                ; JL(Jl_rel8_64) [2Fh:jmp64]                           encoding(2 bytes) = 7c be
0071h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0075h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0076h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0077h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0078h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0079h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
007bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
007dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
007fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0080h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F550950h:jmp64]                encoding(5 bytes) = e8 cb 08 55 5f
0085h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[134]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x48,0x8B,0x79,0x18,0x8B,0x5F,0x08,0x8B,0x6E,0x08,0x44,0x8B,0xF5,0x41,0x3B,0xDE,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xF3,0x33,0xDB,0x45,0x85,0xF6,0x7E,0x42,0x48,0x8B,0xCF,0x3B,0x59,0x08,0x73,0x49,0x48,0x63,0xC3,0x4C,0x8B,0x7C,0xC1,0x10,0x3B,0xDD,0x73,0x3D,0x44,0x8B,0x64,0x86,0x10,0x41,0x8B,0x0F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0x5E,0x42,0x5F,0x44,0x89,0x60,0x08,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xD6,0x4F,0x42,0x5F,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xBE,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xCB,0x08,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVar(bit a)
; location: [7FFDDB83E660h, 7FFDDB83E6A3h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rcx,[rcx+18h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 18
000ah cmp dword ptr [rcx+8],0       ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 08 00
000eh jbe short 003eh               ; JBE(Jbe_rel8_64) [3Eh:jmp64]                         encoding(2 bytes) = 76 2e
0010h mov rsi,[rcx+10h]             ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 10
0014h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
0016h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0018h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0022h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425E50h:jmp64]                encoding(5 bytes) = e8 29 5e 42 5f
0027h mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
002ah lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
002eh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0031h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424F90h:jmp64]                encoding(5 bytes) = e8 5a 4f 42 5f
0036h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0037h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
003ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
003dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
003eh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F5508A0h:jmp64]                encoding(5 bytes) = e8 5d 08 55 5f
0043h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarBytes => new byte[68]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0x49,0x18,0x83,0x79,0x08,0x00,0x76,0x2E,0x48,0x8B,0x71,0x10,0x8B,0xFA,0x8B,0x0E,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x29,0x5E,0x42,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x5A,0x4F,0x42,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3,0xE8,0x5D,0x08,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit a, bit b)
; location: [7FFDDB83E6C0h, 7FFDDB83E73Fh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov esi,r8d                   ; MOV(Mov_r32_rm32) [ESI,R8D]                          encoding(3 bytes) = 41 8b f0
000dh mov rdi,[rcx+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 18
0011h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0014h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0017h cmp ebx,0                     ; CMP(Cmp_rm32_imm8) [EBX,0h:imm32]                    encoding(3 bytes) = 83 fb 00
001ah jbe short 007ah               ; JBE(Jbe_rel8_64) [7Ah:jmp64]                         encoding(2 bytes) = 76 5e
001ch mov rbp,[rcx+10h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 69 10
0020h mov r14d,edx                  ; MOV(Mov_r32_rm32) [R14D,EDX]                         encoding(3 bytes) = 44 8b f2
0023h mov ecx,[rbp]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RBP:br,SS:sr)]        encoding(3 bytes) = 8b 4d 00
0026h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0030h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425DF0h:jmp64]                encoding(5 bytes) = e8 bb 5d 42 5f
0035h mov [rax+8],r14d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R14D]       encoding(4 bytes) = 44 89 70 08
0039h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
003dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0040h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424F30h:jmp64]                encoding(5 bytes) = e8 eb 4e 42 5f
0045h cmp ebx,1                     ; CMP(Cmp_rm32_imm8) [EBX,1h:imm32]                    encoding(3 bytes) = 83 fb 01
0048h jbe short 007ah               ; JBE(Jbe_rel8_64) [7Ah:jmp64]                         encoding(2 bytes) = 76 30
004ah mov rdi,[rdi+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 7f 18
004eh mov ecx,[rdi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RDI:br,DS:sr)]        encoding(2 bytes) = 8b 0f
0050h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
005ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425DF0h:jmp64]                encoding(5 bytes) = e8 91 5d 42 5f
005fh mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0062h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0066h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0069h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424F30h:jmp64]                encoding(5 bytes) = e8 c2 4e 42 5f
006eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
006fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0073h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0074h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0075h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0076h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0077h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0079h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
007ah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F550840h:jmp64]                encoding(5 bytes) = e8 c1 07 55 5f
007fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[128]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x41,0x8B,0xF0,0x48,0x8B,0x79,0x18,0x48,0x8B,0xCF,0x8B,0x59,0x08,0x83,0xFB,0x00,0x76,0x5E,0x48,0x8B,0x69,0x10,0x44,0x8B,0xF2,0x8B,0x4D,0x00,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0x5D,0x42,0x5F,0x44,0x89,0x70,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xEB,0x4E,0x42,0x5F,0x83,0xFB,0x01,0x76,0x30,0x48,0x8B,0x7F,0x18,0x8B,0x0F,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x91,0x5D,0x42,0x5F,0x89,0x70,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xC2,0x4E,0x42,0x5F,0x90,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0xC1,0x07,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit a, bit b, bit c)
; location: [7FFDDB83E760h, 7FFDDB83E817h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov esi,r8d                   ; MOV(Mov_r32_rm32) [ESI,R8D]                          encoding(3 bytes) = 41 8b f0
000fh mov edi,r9d                   ; MOV(Mov_r32_rm32) [EDI,R9D]                          encoding(3 bytes) = 41 8b f9
0012h mov rbx,[rcx+18h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 59 18
0016h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0019h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
001ch cmp ebp,0                     ; CMP(Cmp_rm32_imm8) [EBP,0h:imm32]                    encoding(3 bytes) = 83 fd 00
001fh jbe near ptr 00b2h            ; JBE(Jbe_rel32_64) [B2h:jmp64]                        encoding(6 bytes) = 0f 86 8d 00 00 00
0025h mov r14,[rcx+10h]             ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 4c 8b 71 10
0029h mov r15d,edx                  ; MOV(Mov_r32_rm32) [R15D,EDX]                         encoding(3 bytes) = 44 8b fa
002ch mov ecx,[r14]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R14:br,DS:sr)]        encoding(3 bytes) = 41 8b 0e
002fh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0039h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425D50h:jmp64]                encoding(5 bytes) = e8 12 5d 42 5f
003eh mov [rax+8],r15d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R15D]       encoding(4 bytes) = 44 89 78 08
0042h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0046h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0049h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424E90h:jmp64]                encoding(5 bytes) = e8 42 4e 42 5f
004eh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0051h cmp ebp,1                     ; CMP(Cmp_rm32_imm8) [EBP,1h:imm32]                    encoding(3 bytes) = 83 fd 01
0054h jbe short 00b2h               ; JBE(Jbe_rel8_64) [B2h:jmp64]                         encoding(2 bytes) = 76 5c
0056h mov r14,[rcx+18h]             ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 4c 8b 71 18
005ah mov ecx,[r14]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R14:br,DS:sr)]        encoding(3 bytes) = 41 8b 0e
005dh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0067h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425D50h:jmp64]                encoding(5 bytes) = e8 e4 5c 42 5f
006ch mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
006fh lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0073h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0076h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424E90h:jmp64]                encoding(5 bytes) = e8 15 4e 42 5f
007bh cmp ebp,2                     ; CMP(Cmp_rm32_imm8) [EBP,2h:imm32]                    encoding(3 bytes) = 83 fd 02
007eh jbe short 00b2h               ; JBE(Jbe_rel8_64) [B2h:jmp64]                         encoding(2 bytes) = 76 32
0080h mov rsi,[rbx+20h]             ; MOV(Mov_r64_rm64) [RSI,mem(64u,RBX:br,DS:sr)]        encoding(4 bytes) = 48 8b 73 20
0084h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0086h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0090h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425D50h:jmp64]                encoding(5 bytes) = e8 bb 5c 42 5f
0095h mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
0098h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
009ch mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
009fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424E90h:jmp64]                encoding(5 bytes) = e8 ec 4d 42 5f
00a4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a5h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00a9h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00aah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00abh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00ach pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00adh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00afh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00b1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00b2h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F5507A0h:jmp64]                encoding(5 bytes) = e8 e9 06 55 5f
00b7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[184]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x41,0x8B,0xF0,0x41,0x8B,0xF9,0x48,0x8B,0x59,0x18,0x48,0x8B,0xCB,0x8B,0x69,0x08,0x83,0xFD,0x00,0x0F,0x86,0x8D,0x00,0x00,0x00,0x4C,0x8B,0x71,0x10,0x44,0x8B,0xFA,0x41,0x8B,0x0E,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x12,0x5D,0x42,0x5F,0x44,0x89,0x78,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x42,0x4E,0x42,0x5F,0x48,0x8B,0xCB,0x83,0xFD,0x01,0x76,0x5C,0x4C,0x8B,0x71,0x18,0x41,0x8B,0x0E,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE4,0x5C,0x42,0x5F,0x89,0x70,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x15,0x4E,0x42,0x5F,0x83,0xFD,0x02,0x76,0x32,0x48,0x8B,0x73,0x20,0x8B,0x0E,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0x5C,0x42,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0xEC,0x4D,0x42,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xE9,0x06,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83E840h, 7FFDDB83E8ACh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
000eh mov r11,7FFDDB030F00h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f00h:imm64]         encoding(10 bytes) = 49 bb 00 0f 03 db fd 7f 00 00
0018h mov rax,7FFDDB030F00h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f00h:imm64]         encoding(10 bytes) = 48 b8 00 0f 03 db fd 7f 00 00
0022h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0024h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0026h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0029h mov rcx,1F96B0094E0h          ; MOV(Mov_r64_imm64) [RCX,1f96b0094e0h:imm64]          encoding(10 bytes) = 48 b9 e0 94 00 6b f9 01 00 00
0033h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0036h mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
003ah mov r11,7FFDDB030F08h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f08h:imm64]         encoding(10 bytes) = 49 bb 08 0f 03 db fd 7f 00 00
0044h mov rax,7FFDDB030F08h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f08h:imm64]         encoding(10 bytes) = 48 b8 08 0f 03 db fd 7f 00 00
004eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0050h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0052h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0055h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0058h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
005bh mov rax,7FFE39224DE0h         ; MOV(Mov_r64_imm64) [RAX,7ffe39224de0h:imm64]         encoding(10 bytes) = 48 b8 e0 4d 22 39 fe 7f 00 00
0065h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0069h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006ch jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[111]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0x4E,0x08,0x49,0xBB,0x00,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x00,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8B,0xF8,0x48,0xB9,0xE0,0x94,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x8B,0x4E,0x10,0x49,0xBB,0x08,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x08,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x4C,0x8B,0xC0,0x48,0x8B,0xD3,0x48,0x8B,0xCF,0x48,0xB8,0xE0,0x4D,0x22,0x39,0xFE,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_LeftArg()
; location: [7FFDDB83E8D0h, 7FFDDB83E8D9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_LeftArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_RightArg()
; location: [7FFDDB83E8F0h, 7FFDDB83E8F9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_RightArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOpKind:byte get_OpKind()
; location: [7FFDDB83E910h, 7FFDDB83E919h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx+18h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 18
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpKindBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x41,0x18,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83E930h, 7FFDDB83E9DFh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000eh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0013h mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0018h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
001dh movzx eax,byte ptr [rcx+18h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 18
0021h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0025h mov rdi,[rcx+10h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 10
0029h movzx ebx,al                  ; MOVZX(Movzx_r32_rm8) [EBX,AL]                        encoding(3 bytes) = 0f b6 d8
002ch mov rcx,7FFDDB996D28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb996d28h:imm64]         encoding(10 bytes) = 48 b9 28 6d 99 db fd 7f 00 00
0036h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425B80h:jmp64]                encoding(5 bytes) = e8 45 5b 42 5f
003bh mov [rax+8],bl                ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),BL]            encoding(3 bytes) = 88 58 08
003eh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0041h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E60F0h:jmp64]                encoding(5 bytes) = e8 aa 60 9e 5d
0046h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0049h mov eax,[rbx]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RBX:br,DS:sr)]        encoding(2 bytes) = 8b 03
004bh call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D68A0h:jmp64]                encoding(5 bytes) = e8 50 68 9d 5d
0050h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0053h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0056h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
005ah call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
005dh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0060h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0063h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0066h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
006ah call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
006dh mov r8,1F96AFE1398h           ; MOV(Mov_r64_imm64) [R8,1f96afe1398h:imm64]           encoding(10 bytes) = 49 b8 98 13 fe 6a f9 01 00 00
0077h mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
007ah mov rdx,1F96B009558h          ; MOV(Mov_r64_imm64) [RDX,1f96b009558h:imm64]          encoding(10 bytes) = 48 ba 58 95 00 6b f9 01 00 00
0084h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0087h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
008ch mov [rcx],rax                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RAX]        encoding(3 bytes) = 48 89 01
008fh mov [rcx+8],rsi               ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RSI]        encoding(4 bytes) = 48 89 71 08
0093h mov [rcx+10h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDI]        encoding(4 bytes) = 48 89 79 10
0097h mov [rcx+18h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 41 18
009bh lea r8,[rsp+20h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 20
00a0h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00a2h call 7FFE39225AE0h            ; CALL(Call_rel32_64) [5D9E71B0h:jmp64]                encoding(5 bytes) = e8 09 71 9e 5d
00a7h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a8h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
00ach pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00adh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00aeh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00afh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[176]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x0F,0xB6,0x41,0x18,0x48,0x8B,0x71,0x08,0x48,0x8B,0x79,0x10,0x0F,0xB6,0xD8,0x48,0xB9,0x28,0x6D,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x45,0x5B,0x42,0x5F,0x88,0x58,0x08,0x48,0x8B,0xC8,0xE8,0xAA,0x60,0x9E,0x5D,0x48,0x8B,0xD8,0x8B,0x03,0xE8,0x50,0x68,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD3,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x49,0xB8,0x98,0x13,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4D,0x8B,0x00,0x48,0xBA,0x58,0x95,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8D,0x4C,0x24,0x20,0x48,0x89,0x01,0x48,0x89,0x71,0x08,0x48,0x89,0x79,0x10,0x4C,0x89,0x41,0x18,0x4C,0x8D,0x44,0x24,0x20,0x33,0xC9,0xE8,0x09,0x71,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDB83EA00h, 7FFDDB83EA0Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB83E930h         ; MOV(Mov_r64_imm64) [RAX,7ffddb83e930h:imm64]         encoding(10 bytes) = 48 b8 30 e9 83 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x30,0xE9,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit op_Implicit(LiteralLogicExpr src)
; location: [7FFDDB83EA30h, 7FFDDB83EA38h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> op_ImplicitBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr op_Implicit(bit src)
; location: [7FFDDB83EA50h, 7FFDDB83EA6Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425A60h:jmp64]                encoding(5 bytes) = e8 4a 5a 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
001dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
001eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> op_ImplicitBytes => new byte[31]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4A,0x5A,0x42,0x5F,0x89,0x70,0x08,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicExprKind:uint get_ExprKind()
; location: [7FFDDB83EA90h, 7FFDDB83EA9Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,8                     ; MOV(Mov_r32_imm32) [EAX,8h:imm32]                    encoding(5 bytes) = b8 08 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ExprKindBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x08,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_Value()
; location: [7FFDDB83EAB0h, 7FFDDB83EAB8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ValueBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83EAD0h, 7FFDDB83EAE1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0007h mov rax,7FFDDB833D70h         ; MOV(Mov_r64_imm64) [RAX,7ffddb833d70h:imm64]         encoding(10 bytes) = 48 b8 70 3d 83 db fd 7f 00 00
0011h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD2,0x48,0xB8,0x70,0x3D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(bool digit)
; location: [7FFDDB83EB00h, 7FFDDB83EB66h]
0000h sub rsp,38h                   ; SUB(Sub_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 ec 38
0004h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0006h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000bh mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0010h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0012h jne short 0040h               ; JNE(Jne_rel8_64) [40h:jmp64]                         encoding(2 bytes) = 75 2c
0014h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0017h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
001ah je short 002eh                ; JE(Je_rel8_64) [2Eh:jmp64]                           encoding(2 bytes) = 74 12
001ch mov rax,1F96B009590h          ; MOV(Mov_r64_imm64) [RAX,1f96b009590h:imm64]          encoding(10 bytes) = 48 b8 90 95 00 6b f9 01 00 00
0026h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0029h add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
002eh mov rax,1F96B009598h          ; MOV(Mov_r64_imm64) [RAX,1f96b009598h:imm64]          encoding(10 bytes) = 48 b8 98 95 00 6b f9 01 00 00
0038h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
003bh add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
003fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0040h mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
0043h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0045h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0048h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
004dh mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
0050h mov [rax+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 40 08
0054h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0059h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
005ch call 7FFE3922D070h            ; CALL(Call_rel32_64) [5D9EE570h:jmp64]                encoding(5 bytes) = e8 0f e5 9e 5d
0061h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0062h add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
0066h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[103]{0x48,0x83,0xEC,0x38,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x84,0xD2,0x75,0x2C,0x8B,0x41,0x08,0x83,0xF8,0x01,0x74,0x12,0x48,0xB8,0x90,0x95,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x38,0xC3,0x48,0xB8,0x98,0x95,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x38,0xC3,0x8B,0x49,0x08,0x33,0xD2,0x45,0x33,0xC0,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x10,0x44,0x89,0x40,0x08,0x48,0x8D,0x54,0x24,0x28,0x45,0x33,0xC0,0xE8,0x0F,0xE5,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x38,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDB83EB80h, 7FFDDB83EB91h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0007h mov rax,7FFDDB83EB00h         ; MOV(Mov_r64_imm64) [RAX,7ffddb83eb00h:imm64]         encoding(10 bytes) = 48 b8 00 eb 83 db fd 7f 00 00
0011h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD2,0x48,0xB8,0x00,0xEB,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq FromBitString(BitString bs)
; location: [7FFDDB83F3C0h, 7FFDDB83F45Ch]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
0010h movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
0013h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F425220h:jmp64]                encoding(5 bytes) = e8 fe 51 42 5f
0022h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0025h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
0027h mov r14d,[rbx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RBX:br,DS:sr)]       encoding(4 bytes) = 44 8b 73 08
002bh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002eh jle short 006bh               ; JLE(Jle_rel8_64) [6Bh:jmp64]                         encoding(2 bytes) = 7e 3b
0030h cmp ebp,edi                   ; CMP(Cmp_r32_rm32) [EBP,EDI]                          encoding(2 bytes) = 3b ef
0032h jae short 0097h               ; JAE(Jae_rel8_64) [97h:jmp64]                         encoding(2 bytes) = 73 63
0034h movsxd rax,ebp                ; MOVSXD(Movsxd_r64_rm32) [RAX,EBP]                    encoding(3 bytes) = 48 63 c5
0037h cmp byte ptr [rsi+rax+10h],1  ; CMP(Cmp_rm8_imm8) [mem(8u,RSI:br,DS:sr),1h:imm8]     encoding(5 bytes) = 80 7c 06 10 01
003ch sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
003fh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0042h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0044h mov [rsp+28h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 28
0048h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004dh test edx,edx                  ; TEST(Test_rm32_r32) [EDX,EDX]                        encoding(2 bytes) = 85 d2
004fh jne short 0055h               ; JNE(Jne_rel8_64) [55h:jmp64]                         encoding(2 bytes) = 75 04
0051h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0053h jmp short 005ah               ; JMP(Jmp_rel8_64) [5Ah:jmp64]                         encoding(2 bytes) = eb 05
0055h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
005ah mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
005ch mov edx,[rsp+28h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 28
0060h mov [rbx+rax*4+10h],edx       ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(4 bytes) = 89 54 83 10
0064h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
0066h cmp r14d,ebp                  ; CMP(Cmp_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 3b f5
0069h jg short 0030h                ; JG(Jg_rel8_64) [30h:jmp64]                           encoding(2 bytes) = 7f c5
006bh mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0075h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4250F0h:jmp64]                encoding(5 bytes) = e8 76 50 42 5f
007ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
007dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0081h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0084h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424230h:jmp64]                encoding(5 bytes) = e8 a7 41 42 5f
0089h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
008ch add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
0090h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0091h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0092h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0093h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0094h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0096h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0097h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54FB40h:jmp64]                encoding(5 bytes) = e8 a4 fa 54 5f
009ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FromBitStringBytes => new byte[157]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x30,0x48,0x8B,0xF1,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0x51,0x42,0x5F,0x48,0x8B,0xD8,0x33,0xED,0x44,0x8B,0x73,0x08,0x45,0x85,0xF6,0x7E,0x3B,0x3B,0xEF,0x73,0x63,0x48,0x63,0xC5,0x80,0x7C,0x06,0x10,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC9,0x89,0x4C,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x85,0xD2,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x89,0x11,0x8B,0x54,0x24,0x28,0x89,0x54,0x83,0x10,0xFF,0xC5,0x44,0x3B,0xF5,0x7F,0xC5,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0x50,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xA7,0x41,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x30,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0xA4,0xFA,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq FromBits(bit[] src)
; location: [7FFDDB83F480h, 7FFDDB83F4B0h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F425030h:jmp64]                encoding(5 bytes) = e8 18 50 42 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
001fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0022h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F424170h:jmp64]                encoding(5 bytes) = e8 49 41 42 5f
0027h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
002fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FromBitsBytes => new byte[49]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x18,0x50,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x49,0x41,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicExprKind:uint get_ExprKind()
; location: [7FFDDB83F4D0h, 7FFDDB83F4DAh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,8                     ; MOV(Mov_r32_imm32) [EAX,8h:imm32]                    encoding(5 bytes) = b8 08 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ExprKindBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x08,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit[] get_Terms()
; location: [7FFDDB83F4F0h, 7FFDDB83F4F9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TermsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_Item(int index)
; location: [7FFDDB83F510h, 7FFDDB83F52Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h cmp edx,[rax+8]               ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 3b 50 08
000ch jae short 001ah               ; JAE(Jae_rel8_64) [1Ah:jmp64]                         encoding(2 bytes) = 73 0c
000eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0011h mov eax,[rax+rdx*4+10h]       ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(4 bytes) = 8b 44 90 10
0015h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
001ah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F9F0h:jmp64]                encoding(5 bytes) = e8 d1 f9 54 5f
001fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> get_ItemBytes => new byte[32]{0x48,0x83,0xEC,0x28,0x90,0x48,0x8B,0x41,0x08,0x3B,0x50,0x08,0x73,0x0C,0x48,0x63,0xD2,0x8B,0x44,0x90,0x10,0x48,0x83,0xC4,0x28,0xC3,0xE8,0xD1,0xF9,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Item(int index, bit value)
; location: [7FFDDB83F550h, 7FFDDB83F570h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h cmp edx,[rax+8]               ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 3b 50 08
000ch jae short 001bh               ; JAE(Jae_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = 73 0d
000eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0011h mov [rax+rdx*4+10h],r8d       ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(5 bytes) = 44 89 44 90 10
0016h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
001ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
001bh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F9B0h:jmp64]                encoding(5 bytes) = e8 90 f9 54 5f
0020h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> set_ItemBytes => new byte[33]{0x48,0x83,0xEC,0x28,0x90,0x48,0x8B,0x41,0x08,0x3B,0x50,0x08,0x73,0x0D,0x48,0x63,0xD2,0x44,0x89,0x44,0x90,0x10,0x48,0x83,0xC4,0x28,0xC3,0xE8,0x90,0xF9,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: int get_Length()
; location: [7FFDDB83F590h, 7FFDDB83F59Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_LengthBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0x8B,0x40,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitString ToBitString()
; location: [7FFDDB83F5B0h, 7FFDDB83F5FFh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
000ah mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
000dh movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
0010h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
001ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F425030h:jmp64]                encoding(5 bytes) = e8 11 50 42 5f
001fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0021h test edi,edi                  ; TEST(Test_rm32_r32) [EDI,EDI]                        encoding(2 bytes) = 85 ff
0023h jle short 0043h               ; JLE(Jle_rel8_64) [43h:jmp64]                         encoding(2 bytes) = 7e 1e
0025h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0028h movsxd r8,edx                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDX]                     encoding(3 bytes) = 4c 63 c2
002bh mov r9d,[rsi+r8*4+10h]        ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSI:br,DS:sr)]        encoding(5 bytes) = 46 8b 4c 86 10
0030h movzx r9d,r9b                 ; MOVZX(Movzx_r32_rm8) [R9D,R9L]                       encoding(4 bytes) = 45 0f b6 c9
0034h cmp edx,ecx                   ; CMP(Cmp_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 3b d1
0036h jae short 004ah               ; JAE(Jae_rel8_64) [4Ah:jmp64]                         encoding(2 bytes) = 73 12
0038h mov [rax+r8+10h],r9b          ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R9L]           encoding(5 bytes) = 46 88 4c 00 10
003dh inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
003fh cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
0041h jg short 0028h                ; JG(Jg_rel8_64) [28h:jmp64]                           encoding(2 bytes) = 7f e5
0043h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0047h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0048h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0049h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
004ah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F950h:jmp64]                encoding(5 bytes) = e8 01 f9 54 5f
004fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> ToBitStringBytes => new byte[80]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0x71,0x08,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0x50,0x42,0x5F,0x33,0xD2,0x85,0xFF,0x7E,0x1E,0x8B,0x48,0x08,0x4C,0x63,0xC2,0x46,0x8B,0x4C,0x86,0x10,0x45,0x0F,0xB6,0xC9,0x3B,0xD1,0x73,0x12,0x46,0x88,0x4C,0x00,0x10,0xFF,0xC2,0x3B,0xFA,0x7F,0xE5,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3,0xE8,0x01,0xF9,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83F620h, 7FFDDB83F6BBh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
000eh mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0012h mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
0015h movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
0018h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0022h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F424FC0h:jmp64]                encoding(5 bytes) = e8 99 4f 42 5f
0027h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0029h test edi,edi                  ; TEST(Test_rm32_r32) [EDI,EDI]                        encoding(2 bytes) = 85 ff
002bh jle short 004bh               ; JLE(Jle_rel8_64) [4Bh:jmp64]                         encoding(2 bytes) = 7e 1e
002dh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0030h movsxd rcx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBX]                    encoding(3 bytes) = 48 63 cb
0033h mov r8d,[rsi+rcx*4+10h]       ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSI:br,DS:sr)]        encoding(5 bytes) = 44 8b 44 8e 10
0038h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
003ch cmp ebx,edx                   ; CMP(Cmp_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 3b da
003eh jae short 0096h               ; JAE(Jae_rel8_64) [96h:jmp64]                         encoding(2 bytes) = 73 56
0040h mov [rax+rcx+10h],r8b         ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(5 bytes) = 44 88 44 08 10
0045h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0047h cmp edi,ebx                   ; CMP(Cmp_r32_rm32) [EDI,EBX]                          encoding(2 bytes) = 3b fb
0049h jg short 0030h                ; JG(Jg_rel8_64) [30h:jmp64]                           encoding(2 bytes) = 7f e5
004bh mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0050h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0052h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0055h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0057h lea r8,[rsp+38h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 38
005ch lea rax,[rsp+30h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 30
0061h mov [rax],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 08
0064h mov [rax+4],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 04
0067h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
006ch mov [rcx],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RCX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 09
006fh mov [rcx+2],dx                ; MOV(Mov_rm16_r16) [mem(16u,RCX:br,DS:sr),DX]         encoding(4 bytes) = 66 89 51 02
0073h mov rcx,r8                    ; MOV(Mov_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 8b c8
0076h mov r9,[rsp+30h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 30
007bh mov edx,[rsp+28h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 28
007fh mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
0083h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0085h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0088h call 7FFDDB83EDC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF7A0h:jmp64]        encoding(5 bytes) = e8 13 f7 ff ff
008dh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
008eh add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0092h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0093h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0094h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0095h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0096h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F8E0h:jmp64]                encoding(5 bytes) = e8 45 f8 54 5f
009bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FormatBytes => new byte[156]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x38,0x48,0x8B,0x71,0x08,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x99,0x4F,0x42,0x5F,0x33,0xDB,0x85,0xFF,0x7E,0x1E,0x8B,0x50,0x08,0x48,0x63,0xCB,0x44,0x8B,0x44,0x8E,0x10,0x45,0x0F,0xB6,0xC0,0x3B,0xDA,0x73,0x56,0x44,0x88,0x44,0x08,0x10,0xFF,0xC3,0x3B,0xFB,0x7F,0xE5,0x48,0x89,0x44,0x24,0x38,0x33,0xC9,0x45,0x33,0xC9,0x33,0xD2,0x4C,0x8D,0x44,0x24,0x38,0x48,0x8D,0x44,0x24,0x30,0x44,0x88,0x08,0x89,0x48,0x04,0x48,0x8D,0x4C,0x24,0x28,0x44,0x88,0x09,0x66,0x89,0x51,0x02,0x49,0x8B,0xC8,0x4C,0x8B,0x4C,0x24,0x30,0x8B,0x54,0x24,0x28,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x13,0xF7,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3,0xE8,0x45,0xF8,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDB83F6E0h, 7FFDDB83F782h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
000eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0010h mov [rsp+38h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 38
0015h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0019h mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
001ch movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
001fh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0029h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F424F00h:jmp64]                encoding(5 bytes) = e8 d2 4e 42 5f
002eh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0030h test edi,edi                  ; TEST(Test_rm32_r32) [EDI,EDI]                        encoding(2 bytes) = 85 ff
0032h jle short 0052h               ; JLE(Jle_rel8_64) [52h:jmp64]                         encoding(2 bytes) = 7e 1e
0034h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0037h movsxd rcx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBX]                    encoding(3 bytes) = 48 63 cb
003ah mov r8d,[rsi+rcx*4+10h]       ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSI:br,DS:sr)]        encoding(5 bytes) = 44 8b 44 8e 10
003fh movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
0043h cmp ebx,edx                   ; CMP(Cmp_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 3b da
0045h jae short 009dh               ; JAE(Jae_rel8_64) [9Dh:jmp64]                         encoding(2 bytes) = 73 56
0047h mov [rax+rcx+10h],r8b         ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(5 bytes) = 44 88 44 08 10
004ch inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
004eh cmp edi,ebx                   ; CMP(Cmp_r32_rm32) [EDI,EBX]                          encoding(2 bytes) = 3b fb
0050h jg short 0037h                ; JG(Jg_rel8_64) [37h:jmp64]                           encoding(2 bytes) = 7f e5
0052h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0057h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0059h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
005ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
005eh lea r8,[rsp+38h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 38
0063h lea rax,[rsp+30h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 30
0068h mov [rax],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 08
006bh mov [rax+4],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 04
006eh lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
0073h mov [rcx],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RCX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 09
0076h mov [rcx+2],dx                ; MOV(Mov_rm16_r16) [mem(16u,RCX:br,DS:sr),DX]         encoding(4 bytes) = 66 89 51 02
007ah mov rcx,r8                    ; MOV(Mov_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 8b c8
007dh mov r9,[rsp+30h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 30
0082h mov edx,[rsp+28h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 28
0086h mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
008ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
008ch xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
008fh call 7FFDDB83EDC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF6E0h:jmp64]        encoding(5 bytes) = e8 4c f6 ff ff
0094h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0095h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0099h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
009ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
009bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
009ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
009dh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F820h:jmp64]                encoding(5 bytes) = e8 7e f7 54 5f
00a2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> ToStringBytes => new byte[163]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x38,0x33,0xD2,0x48,0x89,0x54,0x24,0x38,0x48,0x8B,0x71,0x08,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD2,0x4E,0x42,0x5F,0x33,0xDB,0x85,0xFF,0x7E,0x1E,0x8B,0x50,0x08,0x48,0x63,0xCB,0x44,0x8B,0x44,0x8E,0x10,0x45,0x0F,0xB6,0xC0,0x3B,0xDA,0x73,0x56,0x44,0x88,0x44,0x08,0x10,0xFF,0xC3,0x3B,0xFB,0x7F,0xE5,0x48,0x89,0x44,0x24,0x38,0x33,0xC9,0x45,0x33,0xC9,0x33,0xD2,0x4C,0x8D,0x44,0x24,0x38,0x48,0x8D,0x44,0x24,0x30,0x44,0x88,0x08,0x89,0x48,0x04,0x48,0x8D,0x4C,0x24,0x28,0x44,0x88,0x09,0x66,0x89,0x51,0x02,0x49,0x8B,0xC8,0x4C,0x8B,0x4C,0x24,0x30,0x8B,0x54,0x24,0x28,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x4C,0xF6,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3,0xE8,0x7E,0xF7,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_Name()
; location: [7FFDDB83F7A0h, 7FFDDB83F7A9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NameBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Value()
; location: [7FFDDB83F7C0h, 7FFDDB83F7C9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ValueBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Value(ILogicExpr value)
; location: [7FFDDB83F7E0h, 7FFDDB83F7EFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h lea rcx,[rcx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 49 10
0009h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423E10h:jmp64]                encoding(5 bytes) = e8 02 3e 42 5f
000eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_ValueBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8D,0x49,0x10,0xE8,0x02,0x3E,0x42,0x5F,0x90,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Set(ILogicExpr value)
; location: [7FFDDB83F800h, 7FFDDB83F80Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h lea rcx,[rcx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 49 10
0009h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423DF0h:jmp64]                encoding(5 bytes) = e8 e2 3d 42 5f
000eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8D,0x49,0x10,0xE8,0xE2,0x3D,0x42,0x5F,0x90,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Set(bit value)
; location: [7FFDDB83F820h, 7FFDDB83F850h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9A53B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a53b0h:imm64]         encoding(10 bytes) = 48 b9 b0 53 9a db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424C90h:jmp64]                encoding(5 bytes) = e8 76 4c 42 5f
001ah mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
001dh lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0021h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0024h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423DD0h:jmp64]                encoding(5 bytes) = e8 a7 3d 42 5f
0029h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
002fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetBytes => new byte[49]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xB0,0x53,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0x4C,0x42,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0xA7,0x3D,0x42,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Set(IExpr value)
; location: [7FFDDB83F870h, 7FFDDB83F899h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0008h mov rcx,7FFDDB99A9B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb99a9b0h:imm64]         encoding(10 bytes) = 48 b9 b0 a9 99 db fd 7f 00 00
0012h call 7FFE3AC63550h            ; CALL(Call_rel32_64) [5F423CE0h:jmp64]                encoding(5 bytes) = e8 c9 3c 42 5f
0017h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
001bh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
001eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423D80h:jmp64]                encoding(5 bytes) = e8 5d 3d 42 5f
0023h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0024h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0028h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetBytes => new byte[42]{0x56,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0xB9,0xB0,0xA9,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC9,0x3C,0x42,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x5D,0x3D,0x42,0x5F,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83F8B0h, 7FFDDB83F8D0h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0009h mov rdx,1F96AFE3060h          ; MOV(Mov_r64_imm64) [RDX,1f96afe3060h:imm64]          encoding(10 bytes) = 48 ba 60 30 fe 6a f9 01 00 00
0013h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0016h mov rax,7FFE39219580h         ; MOV(Mov_r64_imm64) [RAX,7ffe39219580h:imm64]         encoding(10 bytes) = 48 b8 80 95 21 39 fe 7f 00 00
0020h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[35]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x49,0x08,0x48,0xBA,0x60,0x30,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0xB8,0x80,0x95,0x21,0x39,0xFE,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(bool expand)
; location: [7FFDDB83F8F0h, 7FFDDB83F976h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000ch mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0011h mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0016h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
001bh mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
001fh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0021h jne short 0032h               ; JNE(Jne_rel8_64) [32h:jmp64]                         encoding(2 bytes) = 75 0f
0023h mov rcx,1F96AFE3060h          ; MOV(Mov_r64_imm64) [RCX,1f96afe3060h:imm64]          encoding(10 bytes) = 48 b9 60 30 fe 6a f9 01 00 00
002dh mov rdx,[rcx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 11
0030h jmp short 0078h               ; JMP(Jmp_rel8_64) [78h:jmp64]                         encoding(2 bytes) = eb 46
0032h mov r8,[rcx+10h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(4 bytes) = 4c 8b 41 10
0036h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0038h mov rcx,1F96AFE1388h          ; MOV(Mov_r64_imm64) [RCX,1f96afe1388h:imm64]          encoding(10 bytes) = 48 b9 88 13 fe 6a f9 01 00 00
0042h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0045h mov rax,1F96B009640h          ; MOV(Mov_r64_imm64) [RAX,1f96b009640h:imm64]          encoding(10 bytes) = 48 b8 40 96 00 6b f9 01 00 00
004fh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0052h lea r9,[rsp+20h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 4c 24 20
0057h mov [r9],r8                   ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),R8]          encoding(3 bytes) = 4d 89 01
005ah mov [r9+8],rdx                ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDX]         encoding(4 bytes) = 49 89 51 08
005eh mov [r9+10h],rdx              ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDX]         encoding(4 bytes) = 49 89 51 10
0062h mov [r9+18h],rcx              ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RCX]         encoding(4 bytes) = 49 89 49 18
0066h lea r8,[rsp+20h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 20
006bh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
006eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0070h call 7FFE39225AE0h            ; CALL(Call_rel32_64) [5D9E61F0h:jmp64]                encoding(5 bytes) = e8 7b 61 9e 5d
0075h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0078h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
007bh call 7FFE39219580h            ; CALL(Call_rel32_64) [5D9D9C90h:jmp64]                encoding(5 bytes) = e8 10 9c 9d 5d
0080h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0081h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0085h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0086h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[135]{0x56,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x8B,0x71,0x08,0x84,0xD2,0x75,0x0F,0x48,0xB9,0x60,0x30,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x11,0xEB,0x46,0x4C,0x8B,0x41,0x10,0x33,0xD2,0x48,0xB9,0x88,0x13,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0xB8,0x40,0x96,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0x4C,0x8D,0x4C,0x24,0x20,0x4D,0x89,0x01,0x49,0x89,0x51,0x08,0x49,0x89,0x51,0x10,0x49,0x89,0x49,0x18,0x4C,0x8D,0x44,0x24,0x20,0x48,0x8B,0xD0,0x33,0xC9,0xE8,0x7B,0x61,0x9E,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0xE8,0x10,0x9C,0x9D,0x5D,0x90,0x48,0x83,0xC4,0x40,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDB83F990h, 7FFDDB83F9B0h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0009h mov rdx,1F96AFE3060h          ; MOV(Mov_r64_imm64) [RDX,1f96afe3060h:imm64]          encoding(10 bytes) = 48 ba 60 30 fe 6a f9 01 00 00
0013h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0016h mov rax,7FFE39219580h         ; MOV(Mov_r64_imm64) [RAX,7ffe39219580h:imm64]         encoding(10 bytes) = 48 b8 80 95 21 39 fe 7f 00 00
0020h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[35]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x49,0x08,0x48,0xBA,0x60,0x30,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0xB8,0x80,0x95,0x21,0x39,0xFE,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_FirstArg()
; location: [7FFDDB83F9D0h, 7FFDDB83F9D9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_FirstArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_SecondArg()
; location: [7FFDDB83F9F0h, 7FFDDB83F9F9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_SecondArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_ThirdArg()
; location: [7FFDDB83FA10h, 7FFDDB83FA19h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+18h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 18
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ThirdArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x18,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOpKind:byte get_OpKind()
; location: [7FFDDB83FA30h, 7FFDDB83FA39h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx+20h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 20
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpKindBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x41,0x20,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83FA50h, 7FFDDB83FAFEh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah movzx esi,byte ptr [rcx+20h]  ; MOVZX(Movzx_r32_rm8) [ESI,mem(8u,RCX:br,DS:sr)]      encoding(5 bytes) = 40 0f b6 71 20
000fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0013h mov rbx,[rcx+10h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 59 10
0017h mov rbp,[rcx+18h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 69 18
001bh mov rcx,7FFDDB1252C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1252c0h:imm64]         encoding(10 bytes) = 48 b9 c0 52 12 db fd 7f 00 00
0025h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
002ah call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F424BF0h:jmp64]                encoding(5 bytes) = e8 c1 4b 42 5f
002fh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0032h movzx esi,sil                 ; MOVZX(Movzx_r32_rm8) [ESI,SIL]                       encoding(4 bytes) = 40 0f b6 f6
0036h mov rcx,7FFDDB997878h         ; MOV(Mov_r64_imm64) [RCX,7ffddb997878h:imm64]         encoding(10 bytes) = 48 b9 78 78 99 db fd 7f 00 00
0040h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424A60h:jmp64]                encoding(5 bytes) = e8 1b 4a 42 5f
0045h mov [rax+8],sil               ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),SIL]           encoding(4 bytes) = 40 88 70 08
0049h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
004ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4FD0h:jmp64]                encoding(5 bytes) = e8 7f 4f 9e 5d
0051h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0054h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0057h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0059h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F423CC0h:jmp64]                encoding(5 bytes) = e8 62 3c 42 5f
005eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0061h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0064h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0069h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F423CC0h:jmp64]                encoding(5 bytes) = e8 52 3c 42 5f
006eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0071h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0074h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0079h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F423CC0h:jmp64]                encoding(5 bytes) = e8 42 3c 42 5f
007eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0081h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0084h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0089h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F423CC0h:jmp64]                encoding(5 bytes) = e8 32 3c 42 5f
008eh mov rcx,1F96B0096A0h          ; MOV(Mov_r64_imm64) [RCX,1f96b0096a0h:imm64]          encoding(10 bytes) = 48 b9 a0 96 00 6b f9 01 00 00
0098h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
009bh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
009eh call 7FFE3925CF40h            ; CALL(Call_rel32_64) [5DA1D4F0h:jmp64]                encoding(5 bytes) = e8 4d d4 a1 5d
00a3h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a4h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
00a8h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a9h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00aah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00abh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00ach pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00aeh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[175]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x40,0x0F,0xB6,0x71,0x20,0x48,0x8B,0x79,0x08,0x48,0x8B,0x59,0x10,0x48,0x8B,0x69,0x18,0x48,0xB9,0xC0,0x52,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0xC1,0x4B,0x42,0x5F,0x4C,0x8B,0xF0,0x40,0x0F,0xB6,0xF6,0x48,0xB9,0x78,0x78,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1B,0x4A,0x42,0x5F,0x40,0x88,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x7F,0x4F,0x9E,0x5D,0x4C,0x8B,0xC0,0x49,0x8B,0xCE,0x33,0xD2,0xE8,0x62,0x3C,0x42,0x5F,0x49,0x8B,0xCE,0x4C,0x8B,0xC7,0xBA,0x01,0x00,0x00,0x00,0xE8,0x52,0x3C,0x42,0x5F,0x49,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x02,0x00,0x00,0x00,0xE8,0x42,0x3C,0x42,0x5F,0x49,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x03,0x00,0x00,0x00,0xE8,0x32,0x3C,0x42,0x5F,0x48,0xB9,0xA0,0x96,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x49,0x8B,0xD6,0xE8,0x4D,0xD4,0xA1,0x5D,0x90,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDB83FB20h, 7FFDDB83FB2Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB83FA50h         ; MOV(Mov_r64_imm64) [RAX,7ffddb83fa50h:imm64]         encoding(10 bytes) = 48 b8 50 fa 83 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x50,0xFA,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Arg()
; location: [7FFDDB83FB50h, 7FFDDB83FB59h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOpKind:uint get_OpKind()
; location: [7FFDDB83FB70h, 7FFDDB83FB78h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 10
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpKindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83FB90h, 7FFDDB83FC3Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,48h                   ; SUB(Sub_rm64_imm8) [RSP,48h:imm64]                   encoding(4 bytes) = 48 83 ec 48
0006h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0008h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000dh mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0012h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0017h mov [rsp+40h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 40
001ch mov esi,[rcx+10h]             ; MOV(Mov_r32_rm32) [ESI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 71 10
001fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0023h mov rcx,7FFDDB998318h         ; MOV(Mov_r64_imm64) [RCX,7ffddb998318h:imm64]         encoding(10 bytes) = 48 b9 18 83 99 db fd 7f 00 00
002dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424920h:jmp64]                encoding(5 bytes) = e8 ee 48 42 5f
0032h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0035h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0038h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4E90h:jmp64]                encoding(5 bytes) = e8 53 4e 9e 5d
003dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0040h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0042h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D5640h:jmp64]                encoding(5 bytes) = e8 f9 55 9d 5d
0047h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
004ah mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
004dh mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0051h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0054h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0057h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005ah mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
005dh mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0061h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0064h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0067h mov rdx,1F96AFE1390h          ; MOV(Mov_r64_imm64) [RDX,1f96afe1390h:imm64]          encoding(10 bytes) = 48 ba 90 13 fe 6a f9 01 00 00
0071h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0074h mov rcx,1F96B0096E0h          ; MOV(Mov_r64_imm64) [RCX,1f96b0096e0h:imm64]          encoding(10 bytes) = 48 b9 e0 96 00 6b f9 01 00 00
007eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0081h lea r9,[rsp+28h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 4c 24 28
0086h mov [r9],rax                  ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RAX]         encoding(3 bytes) = 49 89 01
0089h mov [r9+8],rdi                ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDI]         encoding(4 bytes) = 49 89 79 08
008dh mov [r9+10h],r8               ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),R8]          encoding(4 bytes) = 4d 89 41 10
0091h mov [r9+18h],rdx              ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDX]         encoding(4 bytes) = 49 89 51 18
0095h lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
009ah mov rdx,rcx                   ; MOV(Mov_r64_rm64) [RDX,RCX]                          encoding(3 bytes) = 48 8b d1
009dh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
009fh call 7FFE39225AE0h            ; CALL(Call_rel32_64) [5D9E5F50h:jmp64]                encoding(5 bytes) = e8 ac 5e 9e 5d
00a4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a5h add rsp,48h                   ; ADD(Add_rm64_imm8) [RSP,48h:imm64]                   encoding(4 bytes) = 48 83 c4 48
00a9h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00aah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00abh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[172]{0x57,0x56,0x48,0x83,0xEC,0x48,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x40,0x8B,0x71,0x10,0x48,0x8B,0x79,0x08,0x48,0xB9,0x18,0x83,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEE,0x48,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x53,0x4E,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0xF9,0x55,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x45,0x33,0xC0,0x48,0xBA,0x90,0x13,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0xB9,0xE0,0x96,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x4C,0x8D,0x4C,0x24,0x28,0x49,0x89,0x01,0x49,0x89,0x79,0x08,0x4D,0x89,0x41,0x10,0x49,0x89,0x51,0x18,0x4C,0x8D,0x44,0x24,0x28,0x48,0x8B,0xD1,0x33,0xC9,0xE8,0xAC,0x5E,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x48,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: VariedLogicExpr Define(ILogicExpr baseExpr, ILogicVarExpr[] variables)
; location: [7FFDDB83FC60h, 7FFDDB83FCA1h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9A6838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6838h:imm64]         encoding(10 bytes) = 48 b9 38 68 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424850h:jmp64]                encoding(5 bytes) = e8 34 48 42 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423990h:jmp64]                encoding(5 bytes) = e8 65 39 42 5f
002bh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
002fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423990h:jmp64]                encoding(5 bytes) = e8 59 39 42 5f
0037h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
003eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
003fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0040h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0041h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[66]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x38,0x68,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0x48,0x42,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x65,0x39,0x42,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x59,0x39,0x42,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicExprKind:uint get_ExprKind()
; location: [7FFDDB83FCC0h, 7FFDDB83FCCAh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,4                     ; MOV(Mov_r32_imm32) [EAX,4h:imm32]                    encoding(5 bytes) = b8 04 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ExprKindBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x04,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_BaseExpr()
; location: [7FFDDB83FCE0h, 7FFDDB83FCE9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BaseExprBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicVarExpr[] get_Vars()
; location: [7FFDDB83FD00h, 7FFDDB83FD09h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VarsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(ILogicExpr[] values)
; location: [7FFDDB83FD20h, 7FFDDB83FDEEh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000fh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
0012h mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0016h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0019h mov ebp,[rdi+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RDI:br,DS:sr)]        encoding(3 bytes) = 8b 6f 08
001ch mov r14d,ebp                  ; MOV(Mov_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 8b f5
001fh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0022h jle short 0026h               ; JLE(Jle_rel8_64) [26h:jmp64]                         encoding(2 bytes) = 7e 02
0024h jmp short 0029h               ; JMP(Jmp_rel8_64) [29h:jmp64]                         encoding(2 bytes) = eb 03
0026h mov r14d,ebx                  ; MOV(Mov_r32_rm32) [R14D,EBX]                         encoding(3 bytes) = 44 8b f3
0029h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
002bh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002eh jle near ptr 00bch            ; JLE(Jle_rel32_64) [BCh:jmp64]                        encoding(6 bytes) = 0f 8e 88 00 00 00
0034h cmp ebp,r14d                  ; CMP(Cmp_r32_rm32) [EBP,R14D]                         encoding(3 bytes) = 41 3b ee
0037h setge cl                      ; SETGE(Setge_rm8) [CL]                                encoding(3 bytes) = 0f 9d c1
003ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
003dh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
0040h setge dl                      ; SETGE(Setge_rm8) [DL]                                encoding(3 bytes) = 0f 9d c2
0043h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0046h test ecx,edx                  ; TEST(Test_rm32_r32) [EDX,ECX]                        encoding(2 bytes) = 85 ca
0048h je short 0082h                ; JE(Je_rel8_64) [82h:jmp64]                           encoding(2 bytes) = 74 38
004ah mov r15,[rsi+10h]             ; MOV(Mov_r64_rm64) [R15,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 7e 10
004eh cmp ebx,[r15+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,R15:br,DS:sr)]        encoding(4 bytes) = 41 3b 5f 08
0052h jae short 00c9h               ; JAE(Jae_rel8_64) [C9h:jmp64]                         encoding(2 bytes) = 73 75
0054h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
0057h mov rcx,[r15+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,R15:br,DS:sr)]        encoding(5 bytes) = 49 8b 4c d7 10
005ch mov rdx,[rdi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d7 10
0061h mov r11,7FFDDB030F10h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f10h:imm64]         encoding(10 bytes) = 49 bb 10 0f 03 db fd 7f 00 00
006bh mov rax,7FFDDB030F10h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f10h:imm64]         encoding(10 bytes) = 48 b8 10 0f 03 db fd 7f 00 00
0075h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0077h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0079h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
007bh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
007eh jl short 004ah                ; JL(Jl_rel8_64) [4Ah:jmp64]                           encoding(2 bytes) = 7c ca
0080h jmp short 00bch               ; JMP(Jmp_rel8_64) [BCh:jmp64]                         encoding(2 bytes) = eb 3a
0082h mov r15,[rsi+10h]             ; MOV(Mov_r64_rm64) [R15,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 7e 10
0086h cmp ebx,[r15+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,R15:br,DS:sr)]        encoding(4 bytes) = 41 3b 5f 08
008ah jae short 00c9h               ; JAE(Jae_rel8_64) [C9h:jmp64]                         encoding(2 bytes) = 73 3d
008ch movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
008fh mov rcx,[r15+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,R15:br,DS:sr)]        encoding(5 bytes) = 49 8b 4c d7 10
0094h cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0096h jae short 00c9h               ; JAE(Jae_rel8_64) [C9h:jmp64]                         encoding(2 bytes) = 73 31
0098h mov rdx,[rdi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d7 10
009dh mov r11,7FFDDB030F10h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f10h:imm64]         encoding(10 bytes) = 49 bb 10 0f 03 db fd 7f 00 00
00a7h mov rax,7FFDDB030F10h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f10h:imm64]         encoding(10 bytes) = 48 b8 10 0f 03 db fd 7f 00 00
00b1h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00b3h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
00b5h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
00b7h cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
00bah jl short 0082h                ; JL(Jl_rel8_64) [82h:jmp64]                           encoding(2 bytes) = 7c c6
00bch add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00c0h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00c1h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00c2h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00c3h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00c4h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00c6h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00c8h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00c9h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F1E0h:jmp64]                encoding(5 bytes) = e8 12 f1 54 5f
00ceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[207]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x10,0x8B,0x59,0x08,0x8B,0x6F,0x08,0x44,0x8B,0xF5,0x41,0x3B,0xDE,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xF3,0x33,0xDB,0x45,0x85,0xF6,0x0F,0x8E,0x88,0x00,0x00,0x00,0x41,0x3B,0xEE,0x0F,0x9D,0xC1,0x0F,0xB6,0xC9,0x45,0x85,0xF6,0x0F,0x9D,0xC2,0x0F,0xB6,0xD2,0x85,0xCA,0x74,0x38,0x4C,0x8B,0x7E,0x10,0x41,0x3B,0x5F,0x08,0x73,0x75,0x48,0x63,0xD3,0x49,0x8B,0x4C,0xD7,0x10,0x48,0x8B,0x54,0xD7,0x10,0x49,0xBB,0x10,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x10,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xCA,0xEB,0x3A,0x4C,0x8B,0x7E,0x10,0x41,0x3B,0x5F,0x08,0x73,0x3D,0x48,0x63,0xD3,0x49,0x8B,0x4C,0xD7,0x10,0x3B,0xDD,0x73,0x31,0x48,0x8B,0x54,0xD7,0x10,0x49,0xBB,0x10,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x10,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xC6,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x12,0xF1,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit[] values)
; location: [7FFDDB83FE10h, 7FFDDB83FE86h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
0010h mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0014h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0017h mov ebp,[rdi+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RDI:br,DS:sr)]        encoding(3 bytes) = 8b 6f 08
001ah mov r14d,ebp                  ; MOV(Mov_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 8b f5
001dh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0020h jle short 0024h               ; JLE(Jle_rel8_64) [24h:jmp64]                         encoding(2 bytes) = 7e 02
0022h jmp short 0027h               ; JMP(Jmp_rel8_64) [27h:jmp64]                         encoding(2 bytes) = eb 03
0024h mov r14d,ebx                  ; MOV(Mov_r32_rm32) [R14D,EBX]                         encoding(3 bytes) = 44 8b f3
0027h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0029h test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002ch jle short 0066h               ; JLE(Jle_rel8_64) [66h:jmp64]                         encoding(2 bytes) = 7e 38
002eh mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0032h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0035h jae short 0071h               ; JAE(Jae_rel8_64) [71h:jmp64]                         encoding(2 bytes) = 73 3a
0037h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
003ah mov rcx,[rcx+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c d1 10
003fh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0041h jae short 0071h               ; JAE(Jae_rel8_64) [71h:jmp64]                         encoding(2 bytes) = 73 2e
0043h mov edx,[rdi+rdx*4+10h]       ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDI:br,DS:sr)]        encoding(4 bytes) = 8b 54 97 10
0047h mov r11,7FFDDB030F18h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f18h:imm64]         encoding(10 bytes) = 49 bb 18 0f 03 db fd 7f 00 00
0051h mov rax,7FFDDB030F18h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f18h:imm64]         encoding(10 bytes) = 48 b8 18 0f 03 db fd 7f 00 00
005bh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
005dh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
005fh inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0061h cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0064h jl short 002eh                ; JL(Jl_rel8_64) [2Eh:jmp64]                           encoding(2 bytes) = 7c c8
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
006ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0071h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F0F0h:jmp64]                encoding(5 bytes) = e8 7a f0 54 5f
0076h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[119]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x10,0x8B,0x59,0x08,0x8B,0x6F,0x08,0x44,0x8B,0xF5,0x41,0x3B,0xDE,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xF3,0x33,0xDB,0x45,0x85,0xF6,0x7E,0x38,0x48,0x8B,0x4E,0x10,0x3B,0x59,0x08,0x73,0x3A,0x48,0x63,0xD3,0x48,0x8B,0x4C,0xD1,0x10,0x3B,0xDD,0x73,0x2E,0x8B,0x54,0x97,0x10,0x49,0xBB,0x18,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x18,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xC8,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0x7A,0xF0,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(LiteralLogicSeq values)
; location: [7FFDDB83FEB0h, 7FFDDB83FF28h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rdi,rcx                   ; MOV(Mov_r64_rm64) [RDI,RCX]                          encoding(3 bytes) = 48 8b f9
000bh mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000eh mov rcx,[rdi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4f 10
0012h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0015h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0017h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
001bh mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
001eh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0020h jle short 0024h               ; JLE(Jle_rel8_64) [24h:jmp64]                         encoding(2 bytes) = 7e 02
0022h jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 02
0024h mov ebp,ebx                   ; MOV(Mov_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 8b eb
0026h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0028h test ebp,ebp                  ; TEST(Test_rm32_r32) [EBP,EBP]                        encoding(2 bytes) = 85 ed
002ah jle short 006ah               ; JLE(Jle_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = 7e 3e
002ch mov rcx,[rdi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4f 10
0030h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0033h jae short 0073h               ; JAE(Jae_rel8_64) [73h:jmp64]                         encoding(2 bytes) = 73 3e
0035h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
0038h mov rcx,[rcx+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c d1 10
003dh mov r11,[rsi+8]               ; MOV(Mov_r64_rm64) [R11,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 5e 08
0041h cmp ebx,[r11+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,R11:br,DS:sr)]        encoding(4 bytes) = 41 3b 5b 08
0045h jae short 0073h               ; JAE(Jae_rel8_64) [73h:jmp64]                         encoding(2 bytes) = 73 2c
0047h mov edx,[r11+rdx*4+10h]       ; MOV(Mov_r32_rm32) [EDX,mem(32u,R11:br,DS:sr)]        encoding(5 bytes) = 41 8b 54 93 10
004ch mov r11,7FFDDB030F20h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f20h:imm64]         encoding(10 bytes) = 49 bb 20 0f 03 db fd 7f 00 00
0056h mov rax,7FFDDB030F20h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f20h:imm64]         encoding(10 bytes) = 48 b8 20 0f 03 db fd 7f 00 00
0060h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0062h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0064h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0066h cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0068h jl short 002ch                ; JL(Jl_rel8_64) [2Ch:jmp64]                           encoding(2 bytes) = 7c c2
006ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0070h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0071h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0072h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0073h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F54F050h:jmp64]                encoding(5 bytes) = e8 d8 ef 54 5f
0078h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[121]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF9,0x48,0x8B,0xF2,0x48,0x8B,0x4F,0x10,0x8B,0x59,0x08,0x8B,0x0E,0x48,0x8B,0x4E,0x08,0x8B,0x69,0x08,0x3B,0xDD,0x7E,0x02,0xEB,0x02,0x8B,0xEB,0x33,0xDB,0x85,0xED,0x7E,0x3E,0x48,0x8B,0x4F,0x10,0x3B,0x59,0x08,0x73,0x3E,0x48,0x63,0xD3,0x48,0x8B,0x4C,0xD1,0x10,0x4C,0x8B,0x5E,0x08,0x41,0x3B,0x5B,0x08,0x73,0x2C,0x41,0x8B,0x54,0x93,0x10,0x49,0xBB,0x20,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x20,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0xFF,0xC3,0x3B,0xDD,0x7C,0xC2,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3,0xE8,0xD8,0xEF,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDB83FF50h, 7FFDDB83FF72h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0009h mov r11,7FFDDB030F28h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f28h:imm64]         encoding(10 bytes) = 49 bb 28 0f 03 db fd 7f 00 00
0013h mov rax,7FFDDB030F28h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f28h:imm64]         encoding(10 bytes) = 48 b8 28 0f 03 db fd 7f 00 00
001dh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0020h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0022h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[37]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x49,0x08,0x49,0xBB,0x28,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x28,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x8B,0x00,0x39,0x09,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(UnaryLogicOpKind:uint kind)
; location: [7FFDDB83FF90h, 7FFDDB83FFDEh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB998318h         ; MOV(Mov_r64_imm64) [RCX,7ffddb998318h:imm64]         encoding(10 bytes) = 48 b9 18 83 99 db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424520h:jmp64]                encoding(5 bytes) = e8 0a 45 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4A90h:jmp64]                encoding(5 bytes) = e8 6f 4a 9e 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D5240h:jmp64]                encoding(5 bytes) = e8 15 52 9d 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x18,0x83,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0A,0x45,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x6F,0x4A,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x15,0x52,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(UnaryBitwiseOpKind:uint kind)
; location: [7FFDDB840000h, 7FFDDB84004Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9974E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9974e8h:imm64]         encoding(10 bytes) = 48 b9 e8 74 99 db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4244B0h:jmp64]                encoding(5 bytes) = e8 9a 44 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4A20h:jmp64]                encoding(5 bytes) = e8 ff 49 9e 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D51D0h:jmp64]                encoding(5 bytes) = e8 a5 51 9d 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0xE8,0x74,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9A,0x44,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0xFF,0x49,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0xA5,0x51,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(UnaryArithmeticOpKind:uint kind)
; location: [7FFDDB840070h, 7FFDDB8400E4h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h lea ecx,[rsi-1]               ; LEA(Lea_r32_m) [ECX,mem(Unknown,RSI:br,DS:sr)]       encoding(3 bytes) = 8d 4e ff
000ah cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
000dh ja short 0054h                ; JA(Ja_rel8_64) [54h:jmp64]                           encoding(2 bytes) = 77 45
000fh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
0011h lea rax,[7FFDDB8400E8h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 60 00 00 00
0018h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001bh lea rdx,[7FFDDB840077h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e5 ff ff ff
0022h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0025h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0027h mov rcx,1F96B009750h          ; MOV(Mov_r64_imm64) [RCX,1f96b009750h:imm64]          encoding(10 bytes) = 48 b9 50 97 00 6b f9 01 00 00
0031h mov rax,[rcx]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 01
0034h jmp short 006eh               ; JMP(Jmp_rel8_64) [6Eh:jmp64]                         encoding(2 bytes) = eb 38
0036h mov rax,1F96B009758h          ; MOV(Mov_r64_imm64) [RAX,1f96b009758h:imm64]          encoding(10 bytes) = 48 b8 58 97 00 6b f9 01 00 00
0040h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0043h jmp short 006eh               ; JMP(Jmp_rel8_64) [6Eh:jmp64]                         encoding(2 bytes) = eb 29
0045h mov rax,1F96AFE3140h          ; MOV(Mov_r64_imm64) [RAX,1f96afe3140h:imm64]          encoding(10 bytes) = 48 b8 40 31 fe 6a f9 01 00 00
004fh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0052h jmp short 006eh               ; JMP(Jmp_rel8_64) [6Eh:jmp64]                         encoding(2 bytes) = eb 1a
0054h mov rcx,7FFDDB9981C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9981c8h:imm64]         encoding(10 bytes) = 48 b9 c8 81 99 db fd 7f 00 00
005eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424440h:jmp64]                encoding(5 bytes) = e8 dd 43 42 5f
0063h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0066h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0069h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E49B0h:jmp64]                encoding(5 bytes) = e8 42 49 9e 5d
006eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
006fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0073h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0074h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[117]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8D,0x4E,0xFF,0x83,0xF9,0x03,0x77,0x45,0x8B,0xC9,0x48,0x8D,0x05,0x60,0x00,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE5,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0x50,0x97,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x01,0xEB,0x38,0x48,0xB8,0x58,0x97,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x29,0x48,0xB8,0x40,0x31,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x1A,0x48,0xB9,0xC8,0x81,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDD,0x43,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x42,0x49,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(BinaryArithmeticOpKind:uint kind)
; location: [7FFDDB840110h, 7FFDDB84015Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB996A88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb996a88h:imm64]         encoding(10 bytes) = 48 b9 88 6a 99 db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4243A0h:jmp64]                encoding(5 bytes) = e8 8a 43 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4910h:jmp64]                encoding(5 bytes) = e8 ef 48 9e 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D50C0h:jmp64]                encoding(5 bytes) = e8 95 50 9d 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x88,0x6A,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8A,0x43,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0xEF,0x48,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x95,0x50,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(BinaryLogicOpKind:byte kind)
; location: [7FFDDB840180h, 7FFDDB8401D5h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov [rsp+30h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 30
0009h mov rcx,7FFDDB996D28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb996d28h:imm64]         encoding(10 bytes) = 48 b9 28 6d 99 db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424330h:jmp64]                encoding(5 bytes) = e8 18 43 42 5f
0018h movzx ecx,byte ptr [rsp+30h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 30
001dh mov [rax+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 08
0020h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0023h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E48A0h:jmp64]                encoding(5 bytes) = e8 78 48 9e 5d
0028h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
002bh mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
002dh call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D5050h:jmp64]                encoding(5 bytes) = e8 1e 50 9d 5d
0032h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0035h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0038h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
003ch call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
003fh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0042h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0045h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0048h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
004ch call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
004fh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0050h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0054h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0055h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[86]{0x56,0x48,0x83,0xEC,0x20,0x89,0x4C,0x24,0x30,0x48,0xB9,0x28,0x6D,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x18,0x43,0x42,0x5F,0x0F,0xB6,0x4C,0x24,0x30,0x88,0x48,0x08,0x48,0x8B,0xC8,0xE8,0x78,0x48,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x1E,0x50,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(BinaryBitwiseOpKind:uint kind)
; location: [7FFDDB8401F0h, 7FFDDB84023Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB996BD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb996bd8h:imm64]         encoding(10 bytes) = 48 b9 d8 6b 99 db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4242C0h:jmp64]                encoding(5 bytes) = e8 aa 42 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4830h:jmp64]                encoding(5 bytes) = e8 0f 48 9e 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D4FE0h:jmp64]                encoding(5 bytes) = e8 b5 4f 9d 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0xD8,0x6B,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAA,0x42,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x0F,0x48,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0xB5,0x4F,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(ComparisonKind:uint kind)
; location: [7FFDDB840260h, 7FFDDB8402AEh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB996E78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb996e78h:imm64]         encoding(10 bytes) = 48 b9 78 6e 99 db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424250h:jmp64]                encoding(5 bytes) = e8 3a 42 42 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E47C0h:jmp64]                encoding(5 bytes) = e8 9f 47 9e 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D9D4F70h:jmp64]                encoding(5 bytes) = e8 45 4f 9d 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x78,0x6E,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3A,0x42,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x9F,0x47,0x9E,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x45,0x4F,0x9D,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(TernaryOpKind:byte kind)
; location: [7FFDDB8402D0h, 7FFDDB8402FDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+30h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 30
0009h mov rcx,7FFDDB997878h         ; MOV(Mov_r64_imm64) [RCX,7ffddb997878h:imm64]         encoding(10 bytes) = 48 b9 78 78 99 db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4241E0h:jmp64]                encoding(5 bytes) = e8 c8 41 42 5f
0018h movzx ecx,byte ptr [rsp+30h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 30
001dh mov [rax+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 08
0020h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0023h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4750h:jmp64]                encoding(5 bytes) = e8 28 47 9e 5d
0028h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x4C,0x24,0x30,0x48,0xB9,0x78,0x78,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC8,0x41,0x42,0x5F,0x0F,0xB6,0x4C,0x24,0x30,0x88,0x48,0x08,0x48,0x8B,0xC8,0xE8,0x28,0x47,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(ShiftOpKind:uint kind)
; location: [7FFDDB840320h, 7FFDDB8403AAh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h lea ecx,[rsi-1]               ; LEA(Lea_r32_m) [ECX,mem(Unknown,RSI:br,DS:sr)]       encoding(3 bytes) = 8d 4e ff
000ah cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
000dh ja short 0027h                ; JA(Ja_rel8_64) [27h:jmp64]                           encoding(2 bytes) = 77 18
000fh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0011h lea rcx,[7FFDDB8403B0h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d 78 00 00 00
0018h mov ecx,[rcx+rax*4]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 0c 81
001bh lea rdx,[7FFDDB840327h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e5 ff ff ff
0022h add rcx,rdx                   ; ADD(Add_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 03 ca
0025h jmp rcx                       ; JMP(Jmp_rm64) [RCX]                                  encoding(2 bytes) = ff e1
0027h cmp esi,8                     ; CMP(Cmp_rm32_imm8) [ESI,8h:imm32]                    encoding(3 bytes) = 83 fe 08
002ah je short 005bh                ; JE(Je_rel8_64) [5Bh:jmp64]                           encoding(2 bytes) = 74 2f
002ch jmp short 006ah               ; JMP(Jmp_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = eb 3c
002eh mov rcx,1F96B009760h          ; MOV(Mov_r64_imm64) [RCX,1f96b009760h:imm64]          encoding(10 bytes) = 48 b9 60 97 00 6b f9 01 00 00
0038h mov rax,[rcx]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 01
003bh jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 47
003dh mov rax,1F96B009768h          ; MOV(Mov_r64_imm64) [RAX,1f96b009768h:imm64]          encoding(10 bytes) = 48 b8 68 97 00 6b f9 01 00 00
0047h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
004ah jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 38
004ch mov rax,1F96B009770h          ; MOV(Mov_r64_imm64) [RAX,1f96b009770h:imm64]          encoding(10 bytes) = 48 b8 70 97 00 6b f9 01 00 00
0056h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0059h jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 29
005bh mov rax,1F96B009778h          ; MOV(Mov_r64_imm64) [RAX,1f96b009778h:imm64]          encoding(10 bytes) = 48 b8 78 97 00 6b f9 01 00 00
0065h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0068h jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 1a
006ah mov rcx,7FFDDB997D28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb997d28h:imm64]         encoding(10 bytes) = 48 b9 28 7d 99 db fd 7f 00 00
0074h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F424190h:jmp64]                encoding(5 bytes) = e8 17 41 42 5f
0079h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
007ch mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
007fh call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9E4700h:jmp64]                encoding(5 bytes) = e8 7c 46 9e 5d
0084h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0085h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0089h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
008ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[139]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8D,0x4E,0xFF,0x83,0xF9,0x03,0x77,0x18,0x8B,0xC1,0x48,0x8D,0x0D,0x78,0x00,0x00,0x00,0x8B,0x0C,0x81,0x48,0x8D,0x15,0xE5,0xFF,0xFF,0xFF,0x48,0x03,0xCA,0xFF,0xE1,0x83,0xFE,0x08,0x74,0x2F,0xEB,0x3C,0x48,0xB9,0x60,0x97,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x01,0xEB,0x47,0x48,0xB8,0x68,0x97,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x38,0x48,0xB8,0x70,0x97,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x29,0x48,0xB8,0x78,0x97,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x1A,0x48,0xB9,0x28,0x7D,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x17,0x41,0x42,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x7C,0x46,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string FormatTuple(IEnumerable<IOperator> terms)
; location: [7FFDDB8403E0h, 7FFDDB840573h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rcx,7FFDDB1252C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1252c0h:imm64]         encoding(10 bytes) = 48 b9 c0 52 12 db fd 7f 00 00
0014h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0019h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F424260h:jmp64]                encoding(5 bytes) = e8 42 42 42 5f
001eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0021h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
002bh mov edx,0CBh                  ; MOV(Mov_r32_imm32) [EDX,cbh:imm32]                   encoding(5 bytes) = ba cb 00 00 00
0030h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F4244D0h:jmp64]                encoding(5 bytes) = e8 9b 44 42 5f
0035h mov rcx,1F96AFE7230h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7230h:imm64]          encoding(10 bytes) = 48 b9 30 72 fe 6a f9 01 00 00
003fh mov r8,[rcx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 01
0042h test r8,r8                    ; TEST(Test_rm64_r64) [R8,R8]                          encoding(3 bytes) = 4d 85 c0
0045h jne short 009bh               ; JNE(Jne_rel8_64) [9Bh:jmp64]                         encoding(2 bytes) = 75 54
0047h mov rcx,7FFDDB9CA888h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ca888h:imm64]         encoding(10 bytes) = 48 b9 88 a8 9c db fd 7f 00 00
0051h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4240D0h:jmp64]                encoding(5 bytes) = e8 7a 40 42 5f
0056h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0059h mov rdx,1F96AFE7228h          ; MOV(Mov_r64_imm64) [RDX,1f96afe7228h:imm64]          encoding(10 bytes) = 48 ba 28 72 fe 6a f9 01 00 00
0063h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0066h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0069h je near ptr 0182h             ; JE(Je_rel32_64) [182h:jmp64]                         encoding(6 bytes) = 0f 84 13 01 00 00
006fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0073h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423210h:jmp64]                encoding(5 bytes) = e8 98 31 42 5f
0078h mov rdx,7FFDDB835DE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb835de8h:imm64]         encoding(10 bytes) = 48 ba e8 5d 83 db fd 7f 00 00
0082h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0086h mov rcx,1F96AFE7230h          ; MOV(Mov_r64_imm64) [RCX,1f96afe7230h:imm64]          encoding(10 bytes) = 48 b9 30 72 fe 6a f9 01 00 00
0090h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0093h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4231E0h:jmp64]                encoding(5 bytes) = e8 48 31 42 5f
0098h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
009bh mov dword ptr [rsp+28h],2Ch   ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),2ch:imm32] encoding(8 bytes) = c7 44 24 28 2c 00 00 00
00a3h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00a6h mov rcx,7FFDDB9CA990h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ca990h:imm64]         encoding(10 bytes) = 48 b9 90 a9 9c db fd 7f 00 00
00b0h call 7FFE530D3390h            ; CALL(Call_rel32_64) [77892FB0h:jmp64]                encoding(5 bytes) = e8 fb 2e 89 77
00b5h mov r9,rax                    ; MOV(Mov_r64_rm64) [R9,RAX]                           encoding(3 bytes) = 4c 8b c8
00b8h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
00bdh mov rcx,7FFDDB9CAB60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cab60h:imm64]         encoding(10 bytes) = 48 b9 60 ab 9c db fd 7f 00 00
00c7h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00cdh call 7FFDDB83F0A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFECC8h:jmp64]        encoding(5 bytes) = e8 f6 eb ff ff
00d2h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
00d5h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00d7h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00dah call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F423330h:jmp64]                encoding(5 bytes) = e8 51 32 42 5f
00dfh mov rcx,1F96AFE6270h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6270h:imm64]          encoding(10 bytes) = 48 b9 70 62 fe 6a f9 01 00 00
00e9h mov r8,[rcx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 01
00ech test r8,r8                    ; TEST(Test_rm64_r64) [R8,R8]                          encoding(3 bytes) = 4d 85 c0
00efh jne short 0141h               ; JNE(Jne_rel8_64) [141h:jmp64]                        encoding(2 bytes) = 75 50
00f1h mov rcx,7FFDDB785868h         ; MOV(Mov_r64_imm64) [RCX,7ffddb785868h:imm64]         encoding(10 bytes) = 48 b9 68 58 78 db fd 7f 00 00
00fbh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4240D0h:jmp64]                encoding(5 bytes) = e8 d0 3f 42 5f
0100h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0103h mov rdx,1F96AFE6230h          ; MOV(Mov_r64_imm64) [RDX,1f96afe6230h:imm64]          encoding(10 bytes) = 48 ba 30 62 fe 6a f9 01 00 00
010dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0110h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0113h je short 018bh                ; JE(Je_rel8_64) [18Bh:jmp64]                          encoding(2 bytes) = 74 76
0115h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0119h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F423210h:jmp64]                encoding(5 bytes) = e8 f2 30 42 5f
011eh mov rdx,7FFDDB74C960h         ; MOV(Mov_r64_imm64) [RDX,7ffddb74c960h:imm64]         encoding(10 bytes) = 48 ba 60 c9 74 db fd 7f 00 00
0128h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
012ch mov rcx,1F96AFE6270h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6270h:imm64]          encoding(10 bytes) = 48 b9 70 62 fe 6a f9 01 00 00
0136h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0139h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F4231E0h:jmp64]                encoding(5 bytes) = e8 a2 30 42 5f
013eh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0141h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0144h mov rcx,7FFDDB785970h         ; MOV(Mov_r64_imm64) [RCX,7ffddb785970h:imm64]         encoding(10 bytes) = 48 b9 70 59 78 db fd 7f 00 00
014eh call 7FFE530D3390h            ; CALL(Call_rel32_64) [77892FB0h:jmp64]                encoding(5 bytes) = e8 5d 2e 89 77
0153h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0156h call 7FFE392B0EB0h            ; CALL(Call_rel32_64) [5DA70AD0h:jmp64]                encoding(5 bytes) = e8 75 09 a7 5d
015bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
015eh call 7FFDDB74F3E0h            ; CALL(Call_rel32_64) [FFFFFFFFFFF0F000h:jmp64]        encoding(5 bytes) = e8 9d ee f0 ff
0163h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0166h call 7FFDDB74F410h            ; CALL(Call_rel32_64) [FFFFFFFFFFF0F030h:jmp64]        encoding(5 bytes) = e8 c5 ee f0 ff
016bh mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
016eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0171h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0174h call 7FFE39224DE0h            ; CALL(Call_rel32_64) [5D9E4A00h:jmp64]                encoding(5 bytes) = e8 87 48 9e 5d
0179h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
017ah add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
017eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
017fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0180h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0181h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0182h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0185h call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9137D0h:jmp64]        encoding(5 bytes) = e8 46 36 91 ff
018ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
018bh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
018eh call 7FFDDB153BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF9137D0h:jmp64]        encoding(5 bytes) = e8 3d 36 91 ff
0193h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FormatTupleBytes => new byte[404]{0x57,0x56,0x53,0x48,0x83,0xEC,0x30,0x48,0x8B,0xF1,0x48,0xB9,0xC0,0x52,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x42,0x42,0x42,0x5F,0x48,0x8B,0xF8,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xCB,0x00,0x00,0x00,0xE8,0x9B,0x44,0x42,0x5F,0x48,0xB9,0x30,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x01,0x4D,0x85,0xC0,0x75,0x54,0x48,0xB9,0x88,0xA8,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7A,0x40,0x42,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0x28,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x13,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x98,0x31,0x42,0x5F,0x48,0xBA,0xE8,0x5D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x30,0x72,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x48,0x31,0x42,0x5F,0x4C,0x8B,0xC3,0xC7,0x44,0x24,0x28,0x2C,0x00,0x00,0x00,0x48,0x8B,0xD6,0x48,0xB9,0x90,0xA9,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFB,0x2E,0x89,0x77,0x4C,0x8B,0xC8,0x48,0x8D,0x54,0x24,0x28,0x48,0xB9,0x60,0xAB,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0xE8,0xF6,0xEB,0xFF,0xFF,0x4C,0x8B,0xC0,0x33,0xD2,0x48,0x8B,0xCF,0xE8,0x51,0x32,0x42,0x5F,0x48,0xB9,0x70,0x62,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x01,0x4D,0x85,0xC0,0x75,0x50,0x48,0xB9,0x68,0x58,0x78,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD0,0x3F,0x42,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0x30,0x62,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x74,0x76,0x48,0x8D,0x4E,0x08,0xE8,0xF2,0x30,0x42,0x5F,0x48,0xBA,0x60,0xC9,0x74,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x70,0x62,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xA2,0x30,0x42,0x5F,0x4C,0x8B,0xC6,0x48,0x8B,0xD7,0x48,0xB9,0x70,0x59,0x78,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0x2E,0x89,0x77,0x48,0x8B,0xC8,0xE8,0x75,0x09,0xA7,0x5D,0x48,0x8B,0xD8,0xE8,0x9D,0xEE,0xF0,0xFF,0x48,0x8B,0xF0,0xE8,0xC5,0xEE,0xF0,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0x48,0x8B,0xD3,0xE8,0x87,0x48,0x9E,0x5D,0x90,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3,0x48,0x8B,0xCB,0xE8,0x46,0x36,0x91,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x3D,0x36,0x91,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LookupKey:byte GetKey(in Lut16 table, LookupSlot:byte slot)
; location: [7FFDDB840590h, 7FFDDB84059Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh movzx eax,byte ptr [rax]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RAX:br,DS:sr)]      encoding(3 bytes) = 0f b6 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> GetKeyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x0F,0xB6,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetKey(ref Lut16 table, LookupSlot:byte slot, LookupKey:byte value)
; location: [7FFDDB8405B0h, 7FFDDB8405BEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh mov [rax],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetKeyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x44,0x88,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector128<byte> LoadVector(in Lut16 src)
; location: [7FFDDB8405D0h, 7FFDDB8405E0h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu xmm0,xmmword ptr [rdx] ; VLDDQU(VEX_Vlddqu_xmm_m128) [XMM0,mem(UInt128,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fb f0 02
0009h vmovupd [rcx],xmm0            ; VMOVUPD(VEX_Vmovupd_xmmm128_xmm) [mem(Packed128_Float64,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 f9 11 01
000dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> LoadVectorBytes => new byte[17]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFB,0xF0,0x02,0xC5,0xF9,0x11,0x01,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector256<byte> LoadVector(in Lut32 src)
; location: [7FFDDB840600h, 7FFDDB840613h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu ymm0,ymmword ptr [rdx] ; VLDDQU(VEX_Vlddqu_ymm_m256) [YMM0,mem(UInt256,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 ff f0 02
0009h vmovupd [rcx],ymm0            ; VMOVUPD(VEX_Vmovupd_ymmm256_ymm) [mem(Packed256_Float64,RCX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fd 11 01
000dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0010h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> LoadVectorBytes => new byte[20]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFF,0xF0,0x02,0xC5,0xFD,0x11,0x01,0x48,0x8B,0xC1,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> AsSpan(in Lut16 src)
; location: [7FFDDB840630h, 7FFDDB840642h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
0008h mov dword ptr [rcx+8],10h     ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),10h:imm32] encoding(7 bytes) = c7 41 08 10 00 00 00
000fh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> AsSpanBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x11,0xC7,0x41,0x08,0x10,0x00,0x00,0x00,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> AsSpan(in Lut32 src)
; location: [7FFDDB840660h, 7FFDDB840672h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
0008h mov dword ptr [rcx+8],20h     ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),20h:imm32] encoding(7 bytes) = c7 41 08 20 00 00 00
000fh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> AsSpanBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x11,0xC7,0x41,0x08,0x20,0x00,0x00,0x00,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ref Lut16 From(Vector128<byte> src, ref Lut16 dst)
; location: [7FFDDB840690h, 7FFDDB8406A3h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd xmm0,[rcx]            ; VMOVUPD(VEX_Vmovupd_xmm_xmmm128) [XMM0,mem(Packed128_Float64,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 f9 10 01
0009h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
000ch vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0010h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FromBytes => new byte[20]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xF9,0x10,0x01,0x48,0x8B,0xC2,0xC5,0xFA,0x7F,0x00,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ref Lut32 From(Vector256<byte> src, ref Lut32 dst)
; location: [7FFDDB8406C0h, 7FFDDB8406D6h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd ymm0,[rcx]            ; VMOVUPD(VEX_Vmovupd_ymm_ymmm256) [YMM0,mem(Packed256_Float64,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fd 10 01
0009h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
000ch vmovdqu ymmword ptr [rax],ymm0; VMOVDQU(VEX_Vmovdqu_ymmm256_ymm) [mem(Packed256_Int32,RAX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fe 7f 00
0010h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FromBytes => new byte[23]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFD,0x10,0x01,0x48,0x8B,0xC2,0xC5,0xFE,0x7F,0x00,0x48,0x8B,0xC2,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Lut16 From(N16 n, Span<byte> src)
; location: [7FFDDB840B00h, 7FFDDB840B1Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rax,[r8]                  ; MOV(Mov_r64_rm64) [RAX,mem(64u,R8:br,DS:sr)]         encoding(3 bytes) = 49 8b 00
000ah vmovdqu xmm0,xmmword ptr [rax]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RAX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 00
000eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0012h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0015h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
001ah call 7FFE3AD8ED50h            ; CALL(Call_rel32_64) [5F54E250h:jmp64]                encoding(5 bytes) = e8 31 e2 54 5f
001fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FromBytes => new byte[32]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x49,0x8B,0x00,0xC5,0xFA,0x6F,0x00,0xC5,0xFA,0x7F,0x01,0x48,0x8B,0xC1,0x48,0x83,0xC4,0x28,0xC3,0xE8,0x31,0xE2,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Lut32 From(N32 n, Span<byte> src)
; location: [7FFDDB840F40h, 7FFDDB840F69h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rax,[r8]                  ; MOV(Mov_r64_rm64) [RAX,mem(64u,R8:br,DS:sr)]         encoding(3 bytes) = 49 8b 00
000ah vmovdqu xmm0,xmmword ptr [rax]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RAX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 00
000eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0012h vmovdqu xmm0,xmmword ptr [rax+10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RAX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 40 10
0017h vmovdqu xmmword ptr [rcx+10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 10
001ch mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
001fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0023h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0024h call 7FFE3AD8ED50h            ; CALL(Call_rel32_64) [5F54DE10h:jmp64]                encoding(5 bytes) = e8 e7 dd 54 5f
0029h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FromBytes => new byte[42]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x49,0x8B,0x00,0xC5,0xFA,0x6F,0x00,0xC5,0xFA,0x7F,0x01,0xC5,0xFA,0x6F,0x40,0x10,0xC5,0xFA,0x7F,0x41,0x10,0x48,0x8B,0xC1,0x48,0x83,0xC4,0x28,0xC3,0xE8,0xE7,0xDD,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LookupKey:byte get_Item(LookupSlot:byte key)
; location: [7FFDDB840F90h, 7FFDDB840F9Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh movzx eax,byte ptr [rax]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RAX:br,DS:sr)]      encoding(3 bytes) = 0f b6 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ItemBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x0F,0xB6,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Item(LookupSlot:byte key, LookupKey:byte value)
; location: [7FFDDB840FB0h, 7FFDDB840FBEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh mov [rax],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_ItemBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x44,0x88,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector128<byte> get_Vector()
; location: [7FFDDB840FD0h, 7FFDDB840FE0h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu xmm0,xmmword ptr [rcx] ; VLDDQU(VEX_Vlddqu_xmm_m128) [XMM0,mem(UInt128,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fb f0 01
0009h vmovupd [rdx],xmm0            ; VMOVUPD(VEX_Vmovupd_xmmm128_xmm) [mem(Packed128_Float64,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 f9 11 02
000dh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VectorBytes => new byte[17]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFB,0xF0,0x01,0xC5,0xF9,0x11,0x02,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Vector(Vector128<byte> value)
; location: [7FFDDB841000h, 7FFDDB84100Dh]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd xmm0,[rdx]            ; VMOVUPD(VEX_Vmovupd_xmm_xmmm128) [XMM0,mem(Packed128_Float64,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 f9 10 02
0009h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
000dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_VectorBytes => new byte[14]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xF9,0x10,0x02,0xC5,0xFA,0x7F,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> get_Bytes()
; location: [7FFDDB841020h, 7FFDDB841032h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0008h mov dword ptr [rdx+8],10h     ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),10h:imm32] encoding(7 bytes) = c7 42 08 10 00 00 00
000fh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BytesBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x0A,0xC7,0x42,0x08,0x10,0x00,0x00,0x00,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector256<byte> get_Vector()
; location: [7FFDDB841050h, 7FFDDB841063h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu ymm0,ymmword ptr [rcx] ; VLDDQU(VEX_Vlddqu_ymm_m256) [YMM0,mem(UInt256,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 ff f0 01
0009h vmovupd [rdx],ymm0            ; VMOVUPD(VEX_Vmovupd_ymmm256_ymm) [mem(Packed256_Float64,RDX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fd 11 02
000dh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0010h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VectorBytes => new byte[20]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFF,0xF0,0x01,0xC5,0xFD,0x11,0x02,0x48,0x8B,0xC2,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Vector(Vector256<byte> value)
; location: [7FFDDB841080h, 7FFDDB841090h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd ymm0,[rdx]            ; VMOVUPD(VEX_Vmovupd_ymm_ymmm256) [YMM0,mem(Packed256_Float64,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fd 10 02
0009h vmovdqu ymmword ptr [rcx],ymm0; VMOVDQU(VEX_Vmovdqu_ymmm256_ymm) [mem(Packed256_Int32,RCX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fe 7f 01
000dh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_VectorBytes => new byte[17]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFD,0x10,0x02,0xC5,0xFE,0x7F,0x01,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> get_Bytes()
; location: [7FFDDB8410B0h, 7FFDDB8410C2h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0008h mov dword ptr [rdx+8],20h     ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),20h:imm32] encoding(7 bytes) = c7 42 08 20 00 00 00
000fh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BytesBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x0A,0xC7,0x42,0x08,0x20,0x00,0x00,0x00,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<UnaryBitwiseOpKind:uint> get_UnaryBitwiseKinds()
; location: [7FFDDB8410E0h, 7FFDDB84110Bh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9CCEB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cceb8h:imm64]         encoding(10 bytes) = 48 b9 b8 ce 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F423500h:jmp64]                encoding(5 bytes) = e8 e7 34 42 5f
0019h mov dword ptr [rax+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 10 01 00 00 00
0020h mov dword ptr [rax+14h],2     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),2h:imm32] encoding(7 bytes) = c7 40 14 02 00 00 00
0027h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryBitwiseKindsBytes => new byte[44]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xB8,0xCE,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0x34,0x42,0x5F,0xC7,0x40,0x10,0x01,0x00,0x00,0x00,0xC7,0x40,0x14,0x02,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDB841120h, 7FFDDB84112Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB834378h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834378h:imm64]         encoding(10 bytes) = 48 b8 78 43 83 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x78,0x43,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDB841150h, 7FFDDB84115Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB834378h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834378h:imm64]         encoding(10 bytes) = 48 b8 78 43 83 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x78,0x43,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryBitwiseOpKind[] get_UnaryBitwiseKinds()
; location: [7FFDDB841180h, 7FFDDB8411B9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9CCEB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cceb8h:imm64]         encoding(10 bytes) = 48 b9 b8 ce 9c db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F423460h:jmp64]                encoding(5 bytes) = e8 47 34 42 5f
0019h mov rdx,1F9735FAA1Fh          ; MOV(Mov_r64_imm64) [RDX,1f9735faa1fh:imm64]          encoding(10 bytes) = 48 ba 1f aa 5f 73 f9 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryBitwiseKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xB8,0xCE,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x47,0x34,0x42,0x5F,0x48,0xBA,0x1F,0xAA,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDB8411D0h, 7FFDDB8411DFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB834378h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834378h:imm64]         encoding(10 bytes) = 48 b8 78 43 83 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x78,0x43,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind[] get_ComparisonKinds()
; location: [7FFDDB841200h, 7FFDDB841239h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9CD4A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cd4a8h:imm64]         encoding(10 bytes) = 48 b9 a8 d4 9c db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4233E0h:jmp64]                encoding(5 bytes) = e8 c7 33 42 5f
0019h mov rdx,1F9735FA9BFh          ; MOV(Mov_r64_imm64) [RDX,1f9735fa9bfh:imm64]          encoding(10 bytes) = 48 ba bf a9 5f 73 f9 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xA8,0xD4,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xC7,0x33,0x42,0x5F,0x48,0xBA,0xBF,0xA9,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<TernaryOpKind:byte> get_TernaryBitwiseKinds()
; location: [7FFDDB841250h, 7FFDDB841287h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+1],cl                ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(3 bytes) = 88 4a 01
0015h movsx r8,word ptr [rsp+20h]   ; MOVSX(Movsx_r64_rm16) [R8,mem(16i,RSP:br,SS:sr)]     encoding(6 bytes) = 4c 0f bf 44 24 20
001bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0020h mov edx,18h                   ; MOV(Mov_r32_imm32) [EDX,18h:imm32]                   encoding(5 bytes) = ba 18 00 00 00
0025h call 7FFDDB840CF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFAA0h:jmp64]        encoding(5 bytes) = e8 76 fa ff ff
002ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002dh call 7FFDDB840D00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFAB0h:jmp64]        encoding(5 bytes) = e8 7e fa ff ff
0032h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0033h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TernaryBitwiseKindsBytes => new byte[56]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x88,0x4A,0x01,0x4C,0x0F,0xBF,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x18,0x00,0x00,0x00,0xE8,0x76,0xFA,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x7E,0xFA,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOpKind[] get_UnaryOpKinds()
; location: [7FFDDB8412A0h, 7FFDDB8412D5h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDB9CDA88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cda88h:imm64]         encoding(10 bytes) = 48 b9 88 da 9c db fd 7f 00 00
0011h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F423340h:jmp64]                encoding(5 bytes) = e8 25 33 42 5f
001bh mov rdx,1F9735FA967h          ; MOV(Mov_r64_imm64) [RDX,1f9735fa967h:imm64]          encoding(10 bytes) = 48 ba 67 a9 5f 73 f9 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0035h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryOpKindsBytes => new byte[54]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0x88,0xDA,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0x25,0x33,0x42,0x5F,0x48,0xBA,0x67,0xA9,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ReadOnlySpan<BinaryLogicOpKind:byte> get_BinaryOpKinds()
; location: [7FFDDB8412F0h, 7FFDDB841316h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rax,1F9735FA9AFh          ; MOV(Mov_r64_imm64) [RAX,1f9735fa9afh:imm64]          encoding(10 bytes) = 48 b8 af a9 5f 73 f9 01 00 00
000fh mov [rcx],rax                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RAX]        encoding(3 bytes) = 48 89 01
0012h mov dword ptr [rcx+8],10h     ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),10h:imm32] encoding(7 bytes) = c7 41 08 10 00 00 00
0019h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
001ch add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0020h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0021h call 7FFE3AD8ED50h            ; CALL(Call_rel32_64) [5F54DA60h:jmp64]                encoding(5 bytes) = e8 3a da 54 5f
0026h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> get_BinaryOpKindsBytes => new byte[39]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB8,0xAF,0xA9,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x89,0x01,0xC7,0x41,0x08,0x10,0x00,0x00,0x00,0x48,0x8B,0xC1,0x48,0x83,0xC4,0x28,0xC3,0xE8,0x3A,0xDA,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ReadOnlySpan<byte> get_BinaryOpKindData()
; location: [7FFDDB841330h, 7FFDDB84134Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,1F9735FA9AFh          ; MOV(Mov_r64_imm64) [RAX,1f9735fa9afh:imm64]          encoding(10 bytes) = 48 b8 af a9 5f 73 f9 01 00 00
000fh mov [rcx],rax                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RAX]        encoding(3 bytes) = 48 89 01
0012h mov dword ptr [rcx+8],10h     ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),10h:imm32] encoding(7 bytes) = c7 41 08 10 00 00 00
0019h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
001ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BinaryOpKindDataBytes => new byte[29]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0xAF,0xA9,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x89,0x01,0xC7,0x41,0x08,0x10,0x00,0x00,0x00,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOpKind[] get_TernaryOpKinds()
; location: [7FFDDB841360h, 7FFDDB84139Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+1],cl                ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(3 bytes) = 88 4a 01
0015h movsx r8,word ptr [rsp+20h]   ; MOVSX(Movsx_r64_rm16) [R8,mem(16i,RSP:br,SS:sr)]     encoding(6 bytes) = 4c 0f bf 44 24 20
001bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0020h mov edx,4Fh                   ; MOV(Mov_r32_imm32) [EDX,4fh:imm32]                   encoding(5 bytes) = ba 4f 00 00 00
0025h call 7FFDDB840CF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF990h:jmp64]        encoding(5 bytes) = e8 66 f9 ff ff
002ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002dh call 7FFDDB840D00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF9A0h:jmp64]        encoding(5 bytes) = e8 6e f9 ff ff
0032h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0035h call 7FFDDB840EA8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFB48h:jmp64]        encoding(5 bytes) = e8 0e fb ff ff
003ah nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
003bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TernaryOpKindsBytes => new byte[64]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x88,0x4A,0x01,0x4C,0x0F,0xBF,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x4F,0x00,0x00,0x00,0xE8,0x66,0xF9,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x6E,0xF9,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x0E,0xFB,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(UnaryLogicOpKind:uint kind, bit a)
; location: [7FFDDB8413C0h, 7FFDDB841404h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
0008h ja short 003ah                ; JA(Ja_rel8_64) [3Ah:jmp64]                           encoding(2 bytes) = 77 30
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch lea rcx,[7FFDDB841408h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d 35 00 00 00
0013h mov ecx,[rcx+rax*4]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 0c 81
0016h lea r8,[7FFDDB8413C5h]        ; LEA(Lea_r64_m) [R8,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 05 e8 ff ff ff
001dh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0020h jmp rcx                       ; JMP(Jmp_rm64) [RCX]                                  encoding(2 bytes) = ff e1
0022h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0024h jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 19
0026h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0028h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
002ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
002dh jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 10
002fh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0031h jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 0c
0033h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0038h jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 05
003ah call 7FFDDB840ED8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFB18h:jmp64]        encoding(5 bytes) = e8 d9 fa ff ff
003fh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0040h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0044h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[69]{0x48,0x83,0xEC,0x28,0x90,0x83,0xF9,0x03,0x77,0x30,0x8B,0xC1,0x48,0x8D,0x0D,0x35,0x00,0x00,0x00,0x8B,0x0C,0x81,0x4C,0x8D,0x05,0xE8,0xFF,0xFF,0xFF,0x49,0x03,0xC8,0xFF,0xE1,0x33,0xC0,0xEB,0x19,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x10,0x8B,0xC2,0xEB,0x0C,0xB8,0x01,0x00,0x00,0x00,0xEB,0x05,0xE8,0xD9,0xFA,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(BinaryLogicOpKind:byte kind, bit a, bit b)
; location: [7FFDDB841430h, 7FFDDB841501h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h movzx esi,cl                  ; MOVZX(Movzx_r32_rm8) [ESI,CL]                        encoding(4 bytes) = 40 0f b6 f1
0009h cmp esi,0Fh                   ; CMP(Cmp_rm32_imm8) [ESI,fh:imm32]                    encoding(3 bytes) = 83 fe 0f
000ch ja near ptr 00c3h             ; JA(Ja_rel32_64) [C3h:jmp64]                          encoding(6 bytes) = 0f 87 b1 00 00 00
0012h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
0014h lea rcx,[7FFDDB841508h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d bd 00 00 00
001bh mov ecx,[rcx+rax*4]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 0c 81
001eh lea r9,[7FFDDB841435h]        ; LEA(Lea_r64_m) [R9,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 0d e0 ff ff ff
0025h add rcx,r9                    ; ADD(Add_r64_rm64) [RCX,R9]                           encoding(3 bytes) = 49 03 c9
0028h jmp rcx                       ; JMP(Jmp_rm64) [RCX]                                  encoding(2 bytes) = ff e1
002ah mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
002fh jmp near ptr 00cbh            ; JMP(Jmp_rel32_64) [CBh:jmp64]                        encoding(5 bytes) = e9 97 00 00 00
0034h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0036h jmp near ptr 00cbh            ; JMP(Jmp_rel32_64) [CBh:jmp64]                        encoding(5 bytes) = e9 90 00 00 00
003bh and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
003eh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0040h jmp near ptr 00cbh            ; JMP(Jmp_rel32_64) [CBh:jmp64]                        encoding(5 bytes) = e9 86 00 00 00
0045h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0047h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
004ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
004ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
004fh jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 7a
0051h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0053h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
0056h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 73
0058h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
005ah or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
005dh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
005fh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0062h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 67
0064h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0066h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0069h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 60
006bh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
006dh xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0070h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0072h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0075h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 54
0077h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
007ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
007ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
007fh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0081h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 48
0083h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0085h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0087h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
008ah and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
008dh jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 3c
008fh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0091h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 38
0093h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0096h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 33
0098h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
009ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
009ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
009fh jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 2a
00a1h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
00a4h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
00a6h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
00a9h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 20
00abh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
00adh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
00afh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
00b2h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
00b5h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 14
00b7h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
00bah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
00bch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
00bfh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
00c1h jmp short 00cbh               ; JMP(Jmp_rel8_64) [CBh:jmp64]                         encoding(2 bytes) = eb 08
00c3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00c6h call 7FFDDB840EE8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFAB8h:jmp64]        encoding(5 bytes) = e8 ed f9 ff ff
00cbh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00cch add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
00d0h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00d1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[210]{0x56,0x48,0x83,0xEC,0x20,0x40,0x0F,0xB6,0xF1,0x83,0xFE,0x0F,0x0F,0x87,0xB1,0x00,0x00,0x00,0x8B,0xC6,0x48,0x8D,0x0D,0xBD,0x00,0x00,0x00,0x8B,0x0C,0x81,0x4C,0x8D,0x0D,0xE0,0xFF,0xFF,0xFF,0x49,0x03,0xC9,0xFF,0xE1,0xB8,0x01,0x00,0x00,0x00,0xE9,0x97,0x00,0x00,0x00,0x33,0xC0,0xE9,0x90,0x00,0x00,0x00,0x41,0x23,0xD0,0x8B,0xC2,0xE9,0x86,0x00,0x00,0x00,0x8B,0xC2,0x41,0x23,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x7A,0x8B,0xC2,0x41,0x0B,0xC0,0xEB,0x73,0x8B,0xC2,0x41,0x0B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x67,0x8B,0xC2,0x41,0x33,0xC0,0xEB,0x60,0x8B,0xC2,0x41,0x33,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x54,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0xEB,0x48,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xEB,0x3C,0x8B,0xC2,0xEB,0x38,0x41,0x8B,0xC0,0xEB,0x33,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x2A,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x20,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC0,0xEB,0x14,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xEB,0x08,0x0F,0xB6,0xC9,0xE8,0xED,0xF9,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryOp<bit> lookup(UnaryLogicOpKind:uint kind)
; location: [7FFDDB841970h, 7FFDDB841AA5h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
0008h ja near ptr 0128h             ; JA(Ja_rel32_64) [128h:jmp64]                         encoding(6 bytes) = 0f 87 1a 01 00 00
000eh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
0010h lea rax,[7FFDDB841AA8h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 21 01 00 00
0017h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001ah lea rdx,[7FFDDB841975h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e4 ff ff ff
0021h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0024h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0026h mov rcx,7FFDDB9CE928h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ce928h:imm64]         encoding(10 bytes) = 48 b9 28 e9 9c db fd 7f 00 00
0030h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F422B40h:jmp64]                encoding(5 bytes) = e8 0b 2b 42 5f
0035h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0038h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421C80h:jmp64]                encoding(5 bytes) = e8 3c 1c 42 5f
0044h mov rcx,7FFDDB02DE10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de10h:imm64]         encoding(10 bytes) = 48 b9 10 de 02 db fd 7f 00 00
004eh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0052h mov rcx,7FFDDB834D18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d18h:imm64]         encoding(10 bytes) = 48 b9 18 4d 83 db fd 7f 00 00
005ch mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0060h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0063h jmp near ptr 012fh            ; JMP(Jmp_rel32_64) [12Fh:jmp64]                       encoding(5 bytes) = e9 c7 00 00 00
0068h mov rcx,7FFDDB9CE928h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ce928h:imm64]         encoding(10 bytes) = 48 b9 28 e9 9c db fd 7f 00 00
0072h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F422B40h:jmp64]                encoding(5 bytes) = e8 c9 2a 42 5f
0077h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
007eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0081h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421C80h:jmp64]                encoding(5 bytes) = e8 fa 1b 42 5f
0086h mov rcx,7FFDDB02DE10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de10h:imm64]         encoding(10 bytes) = 48 b9 10 de 02 db fd 7f 00 00
0090h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0094h mov rcx,7FFDDB834D38h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d38h:imm64]         encoding(10 bytes) = 48 b9 38 4d 83 db fd 7f 00 00
009eh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00a2h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a5h jmp near ptr 012fh            ; JMP(Jmp_rel32_64) [12Fh:jmp64]                       encoding(5 bytes) = e9 85 00 00 00
00aah mov rcx,7FFDDB9CE928h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ce928h:imm64]         encoding(10 bytes) = 48 b9 28 e9 9c db fd 7f 00 00
00b4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F422B40h:jmp64]                encoding(5 bytes) = e8 87 2a 42 5f
00b9h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421C80h:jmp64]                encoding(5 bytes) = e8 b8 1b 42 5f
00c8h mov rcx,7FFDDB02DE10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de10h:imm64]         encoding(10 bytes) = 48 b9 10 de 02 db fd 7f 00 00
00d2h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
00d6h mov rcx,7FFDDB834CF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834cf8h:imm64]         encoding(10 bytes) = 48 b9 f8 4c 83 db fd 7f 00 00
00e0h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00e4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00e7h jmp short 012fh               ; JMP(Jmp_rel8_64) [12Fh:jmp64]                        encoding(2 bytes) = eb 46
00e9h mov rcx,7FFDDB9CE928h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ce928h:imm64]         encoding(10 bytes) = 48 b9 28 e9 9c db fd 7f 00 00
00f3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F422B40h:jmp64]                encoding(5 bytes) = e8 48 2a 42 5f
00f8h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00fbh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00ffh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0102h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421C80h:jmp64]                encoding(5 bytes) = e8 79 1b 42 5f
0107h mov rax,7FFDDB02DE10h         ; MOV(Mov_r64_imm64) [RAX,7ffddb02de10h:imm64]         encoding(10 bytes) = 48 b8 10 de 02 db fd 7f 00 00
0111h mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
0115h mov rax,7FFDDB834D20h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834d20h:imm64]         encoding(10 bytes) = 48 b8 20 4d 83 db fd 7f 00 00
011fh mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
0123h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0126h jmp short 012fh               ; JMP(Jmp_rel8_64) [12Fh:jmp64]                        encoding(2 bytes) = eb 07
0128h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
012ah call 7FFDDB840F20h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF5B0h:jmp64]        encoding(5 bytes) = e8 81 f4 ff ff
012fh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0130h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0134h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0135h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lookupBytes => new byte[310]{0x56,0x48,0x83,0xEC,0x20,0x83,0xF9,0x03,0x0F,0x87,0x1A,0x01,0x00,0x00,0x8B,0xC9,0x48,0x8D,0x05,0x21,0x01,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0x28,0xE9,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0B,0x2B,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x3C,0x1C,0x42,0x5F,0x48,0xB9,0x10,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x18,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xC7,0x00,0x00,0x00,0x48,0xB9,0x28,0xE9,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC9,0x2A,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xFA,0x1B,0x42,0x5F,0x48,0xB9,0x10,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x38,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x85,0x00,0x00,0x00,0x48,0xB9,0x28,0xE9,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x87,0x2A,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xB8,0x1B,0x42,0x5F,0x48,0xB9,0x10,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xF8,0x4C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x46,0x48,0xB9,0x28,0xE9,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x48,0x2A,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x79,0x1B,0x42,0x5F,0x48,0xB8,0x10,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0x20,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0xEB,0x07,0x33,0xD2,0xE8,0x81,0xF4,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryOp<bit> lookup(BinaryLogicOpKind:byte kind)
; location: [7FFDDB841AD0h, 7FFDDB841F24h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h movzx esi,cl                  ; MOVZX(Movzx_r32_rm8) [ESI,CL]                        encoding(4 bytes) = 40 0f b6 f1
0009h cmp esi,0Fh                   ; CMP(Cmp_rm32_imm8) [ESI,fh:imm32]                    encoding(3 bytes) = 83 fe 0f
000ch ja near ptr 0444h             ; JA(Ja_rel32_64) [444h:jmp64]                         encoding(6 bytes) = 0f 87 32 04 00 00
0012h mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0014h lea rax,[7FFDDB841F28h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 3d 04 00 00
001bh mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001eh lea rdx,[7FFDDB841AD5h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e0 ff ff ff
0025h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0028h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
002ah mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
0034h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 a7 29 42 5f
0039h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0040h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0043h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 d8 1a 42 5f
0048h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
0052h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0056h mov rcx,7FFDDB834D28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d28h:imm64]         encoding(10 bytes) = 48 b9 28 4d 83 db fd 7f 00 00
0060h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0064h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0067h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 e2 03 00 00
006ch mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
0076h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 65 29 42 5f
007bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0082h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0085h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 96 1a 42 5f
008ah mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
0094h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0098h mov rcx,7FFDDB834D08h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d08h:imm64]         encoding(10 bytes) = 48 b9 08 4d 83 db fd 7f 00 00
00a2h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00a6h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a9h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 a0 03 00 00
00aeh mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
00b8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 23 29 42 5f
00bdh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c0h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c4h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00c7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 54 1a 42 5f
00cch mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
00d6h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
00dah mov rcx,7FFDDB834D40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d40h:imm64]         encoding(10 bytes) = 48 b9 40 4d 83 db fd 7f 00 00
00e4h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00e8h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00ebh jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 5e 03 00 00
00f0h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
00fah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 e1 28 42 5f
00ffh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0102h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0106h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0109h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 12 1a 42 5f
010eh mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
0118h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
011ch mov rcx,7FFDDB834D48h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d48h:imm64]         encoding(10 bytes) = 48 b9 48 4d 83 db fd 7f 00 00
0126h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
012ah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
012dh jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 1c 03 00 00
0132h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
013ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 9f 28 42 5f
0141h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0144h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0148h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
014bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 d0 19 42 5f
0150h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
015ah mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
015eh mov rcx,7FFDDB834D50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d50h:imm64]         encoding(10 bytes) = 48 b9 50 4d 83 db fd 7f 00 00
0168h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
016ch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
016fh jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 da 02 00 00
0174h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
017eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 5d 28 42 5f
0183h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0186h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
018ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
018dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 8e 19 42 5f
0192h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
019ch mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01a0h mov rcx,7FFDDB834D58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d58h:imm64]         encoding(10 bytes) = 48 b9 58 4d 83 db fd 7f 00 00
01aah mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01aeh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01b1h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 98 02 00 00
01b6h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
01c0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 1b 28 42 5f
01c5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
01c8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
01cch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01cfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 4c 19 42 5f
01d4h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
01deh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01e2h mov rcx,7FFDDB834D60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d60h:imm64]         encoding(10 bytes) = 48 b9 60 4d 83 db fd 7f 00 00
01ech mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01f0h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01f3h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 56 02 00 00
01f8h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
0202h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 d9 27 42 5f
0207h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
020ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
020eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0211h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 0a 19 42 5f
0216h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
0220h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0224h mov rcx,7FFDDB834D68h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d68h:imm64]         encoding(10 bytes) = 48 b9 68 4d 83 db fd 7f 00 00
022eh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0232h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0235h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 14 02 00 00
023ah mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
0244h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 97 27 42 5f
0249h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
024ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0250h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0253h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 c8 18 42 5f
0258h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
0262h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0266h mov rcx,7FFDDB834D80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d80h:imm64]         encoding(10 bytes) = 48 b9 80 4d 83 db fd 7f 00 00
0270h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0274h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0277h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 d2 01 00 00
027ch mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
0286h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 55 27 42 5f
028bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
028eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0292h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0295h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 86 18 42 5f
029ah mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
02a4h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
02a8h mov rcx,7FFDDB834D88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d88h:imm64]         encoding(10 bytes) = 48 b9 88 4d 83 db fd 7f 00 00
02b2h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
02b6h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
02b9h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 90 01 00 00
02beh mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
02c8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 13 27 42 5f
02cdh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
02d0h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
02d4h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
02d7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 44 18 42 5f
02dch mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
02e6h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
02eah mov rcx,7FFDDB834D90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d90h:imm64]         encoding(10 bytes) = 48 b9 90 4d 83 db fd 7f 00 00
02f4h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
02f8h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
02fbh jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 4e 01 00 00
0300h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
030ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 d1 26 42 5f
030fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0312h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0316h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0319h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 02 18 42 5f
031eh mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
0328h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
032ch mov rcx,7FFDDB834D98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d98h:imm64]         encoding(10 bytes) = 48 b9 98 4d 83 db fd 7f 00 00
0336h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
033ah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
033dh jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 0c 01 00 00
0342h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
034ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 8f 26 42 5f
0351h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0354h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0358h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
035bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 c0 17 42 5f
0360h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
036ah mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
036eh mov rcx,7FFDDB834D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d70h:imm64]         encoding(10 bytes) = 48 b9 70 4d 83 db fd 7f 00 00
0378h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
037ch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
037fh jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 ca 00 00 00
0384h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
038eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 4d 26 42 5f
0393h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0396h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
039ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
039dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 7e 17 42 5f
03a2h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
03ach mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
03b0h mov rcx,7FFDDB834D78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834d78h:imm64]         encoding(10 bytes) = 48 b9 78 4d 83 db fd 7f 00 00
03bah mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
03beh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
03c1h jmp near ptr 044eh            ; JMP(Jmp_rel32_64) [44Eh:jmp64]                       encoding(5 bytes) = e9 88 00 00 00
03c6h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
03d0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 0b 26 42 5f
03d5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
03d8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
03dch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
03dfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 3c 17 42 5f
03e4h mov rcx,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b9 40 de 02 db fd 7f 00 00
03eeh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
03f2h mov rcx,7FFDDB834DA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834da0h:imm64]         encoding(10 bytes) = 48 b9 a0 4d 83 db fd 7f 00 00
03fch mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0400h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0403h jmp short 044eh               ; JMP(Jmp_rel8_64) [44Eh:jmp64]                        encoding(2 bytes) = eb 49
0405h mov rcx,7FFDDB9CECE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cece8h:imm64]         encoding(10 bytes) = 48 b9 e8 ec 9c db fd 7f 00 00
040fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4229E0h:jmp64]                encoding(5 bytes) = e8 cc 25 42 5f
0414h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0417h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
041bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
041eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F421B20h:jmp64]                encoding(5 bytes) = e8 fd 16 42 5f
0423h mov rax,7FFDDB02DE40h         ; MOV(Mov_r64_imm64) [RAX,7ffddb02de40h:imm64]         encoding(10 bytes) = 48 b8 40 de 02 db fd 7f 00 00
042dh mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
0431h mov rax,7FFDDB834DA8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834da8h:imm64]         encoding(10 bytes) = 48 b8 a8 4d 83 db fd 7f 00 00
043bh mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
043fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0442h jmp short 044eh               ; JMP(Jmp_rel8_64) [44Eh:jmp64]                        encoding(2 bytes) = eb 0a
0444h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0447h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0449h call 7FFDDB8415D8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFB08h:jmp64]        encoding(5 bytes) = e8 ba f6 ff ff
044eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
044fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0453h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0454h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lookupBytes => new byte[1109]{0x56,0x48,0x83,0xEC,0x20,0x40,0x0F,0xB6,0xF1,0x83,0xFE,0x0F,0x0F,0x87,0x32,0x04,0x00,0x00,0x8B,0xCE,0x48,0x8D,0x05,0x3D,0x04,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE0,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA7,0x29,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD8,0x1A,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x28,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xE2,0x03,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x65,0x29,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x96,0x1A,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x08,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xA0,0x03,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x23,0x29,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x54,0x1A,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x40,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x5E,0x03,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x28,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x12,0x1A,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x48,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x1C,0x03,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0x28,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD0,0x19,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x50,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xDA,0x02,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0x28,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x19,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x58,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x98,0x02,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1B,0x28,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x4C,0x19,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x60,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x56,0x02,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD9,0x27,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x0A,0x19,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x68,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x14,0x02,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x97,0x27,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xC8,0x18,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x80,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xD2,0x01,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0x27,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x86,0x18,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x88,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x90,0x01,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x13,0x27,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x44,0x18,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x90,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x4E,0x01,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD1,0x26,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x02,0x18,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x98,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x0C,0x01,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8F,0x26,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xC0,0x17,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x70,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xCA,0x00,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4D,0x26,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x7E,0x17,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x78,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x88,0x00,0x00,0x00,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0B,0x26,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x3C,0x17,0x42,0x5F,0x48,0xB9,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xA0,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x49,0x48,0xB9,0xE8,0xEC,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x25,0x42,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xFD,0x16,0x42,0x5F,0x48,0xB8,0x40,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0xA8,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0xEB,0x0A,0x0F,0xB6,0xC9,0x33,0xD2,0xE8,0xBA,0xF6,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(TernaryOpKind:byte kind, bit a, bit b, bit c)
; location: [7FFDDB841F80h, 7FFDDB844076h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,0C60h                 ; SUB(Sub_rm64_imm32) [RSP,c60h:imm64]                 encoding(7 bytes) = 48 81 ec 60 0c 00 00
0008h mov [rsp+0C78h],rdx           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 78 0c 00 00
0010h mov [rsp+0C80h],r8            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(8 bytes) = 4c 89 84 24 80 0c 00 00
0018h mov [rsp+0C88h],r9            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R9]         encoding(8 bytes) = 4c 89 8c 24 88 0c 00 00
0020h movzx esi,cl                  ; MOVZX(Movzx_r32_rm8) [ESI,CL]                        encoding(4 bytes) = 40 0f b6 f1
0024h cmp esi,5Ah                   ; CMP(Cmp_rm32_imm8) [ESI,5ah:imm32]                   encoding(3 bytes) = 83 fe 5a
0027h ja short 0041h                ; JA(Ja_rel8_64) [41h:jmp64]                           encoding(2 bytes) = 77 18
0029h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
002bh lea rdx,[7FFDDB844078h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 c6 20 00 00
0032h mov edx,[rdx+rax*4]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 14 82
0035h lea rcx,[7FFDDB841FA0h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d e4 ff ff ff
003ch add rdx,rcx                   ; ADD(Add_r64_rm64) [RDX,RCX]                          encoding(3 bytes) = 48 03 d1
003fh jmp rdx                       ; JMP(Jmp_rm64) [RDX]                                  encoding(2 bytes) = ff e2
0041h cmp cl,0FFh                   ; CMP(Cmp_rm8_imm8) [CL,ffh:imm8]                      encoding(3 bytes) = 80 f9 ff
0044h je near ptr 20c8h             ; JE(Je_rel32_64) [20C8h:jmp64]                        encoding(6 bytes) = 0f 84 7e 20 00 00
004ah jmp near ptr 20e5h            ; JMP(Jmp_rel32_64) [20E5h:jmp64]                      encoding(5 bytes) = e9 96 20 00 00
004fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0051h mov [rsp+0C58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0c 00 00
0058h mov eax,[rsp+0C58h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 58 0c 00 00
005fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 89 20 00 00
0064h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
006bh mov [rsp+0C50h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 0c 00 00
0072h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0079h mov [rsp+0C48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0c 00 00
0080h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0087h mov [rsp+0C40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0c 00 00
008eh mov edx,[rsp+0C48h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 0c 00 00
0095h mov [rsp+0C30h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 0c 00 00
009ch mov edx,[rsp+0C40h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 0c 00 00
00a3h mov [rsp+0C28h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 0c 00 00
00aah mov edx,[rsp+0C30h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 0c 00 00
00b1h mov [rsp+0C20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0c 00 00
00b8h mov edx,[rsp+0C28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0c 00 00
00bfh mov [rsp+0C18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0c 00 00
00c6h mov edx,[rsp+0C20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0c 00 00
00cdh or edx,[rsp+0C18h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 18 0c 00 00
00d4h mov [rsp+0C10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0c 00 00
00dbh mov edx,[rsp+0C10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0c 00 00
00e2h mov [rsp+0C38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0c 00 00
00e9h mov edx,[rsp+0C50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0c 00 00
00f0h mov [rsp+0C08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0c 00 00
00f7h mov edx,[rsp+0C38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0c 00 00
00feh mov [rsp+0C00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0c 00 00
0105h mov edx,[rsp+0C08h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 0c 00 00
010ch mov [rsp+0BF8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 0b 00 00
0113h mov edx,[rsp+0C00h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 0c 00 00
011ah mov [rsp+0BF0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 0b 00 00
0121h mov edx,[rsp+0BF8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 0b 00 00
0128h or edx,[rsp+0BF0h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 f0 0b 00 00
012fh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0131h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0134h mov [rsp+0BE8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 0b 00 00
013bh mov eax,[rsp+0BE8h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 0b 00 00
0142h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 a6 1f 00 00
0147h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
014eh mov [rsp+0BD0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d0 0b 00 00
0155h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
015ch mov [rsp+0BD8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 0b 00 00
0163h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
016ah mov [rsp+0BE0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 0b 00 00
0171h mov edx,[rsp+0BD8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 0b 00 00
0178h mov [rsp+0BC0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 0b 00 00
017fh mov edx,[rsp+0BD0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 0b 00 00
0186h mov [rsp+0BB8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 0b 00 00
018dh mov edx,[rsp+0BC0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 0b 00 00
0194h mov [rsp+0BB0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 0b 00 00
019bh mov edx,[rsp+0BB8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 0b 00 00
01a2h mov [rsp+0BA8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 0b 00 00
01a9h mov edx,[rsp+0BB0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 0b 00 00
01b0h or edx,[rsp+0BA8h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a8 0b 00 00
01b7h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
01b9h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
01bch mov [rsp+0BA0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 0b 00 00
01c3h mov edx,[rsp+0BA0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 0b 00 00
01cah mov [rsp+0BC8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 0b 00 00
01d1h mov edx,[rsp+0BE0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 0b 00 00
01d8h mov [rsp+0B98h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 0b 00 00
01dfh mov edx,[rsp+0BC8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 0b 00 00
01e6h mov [rsp+0B90h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 0b 00 00
01edh mov edx,[rsp+0B98h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 0b 00 00
01f4h mov [rsp+0B88h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 0b 00 00
01fbh mov edx,[rsp+0B90h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 0b 00 00
0202h mov [rsp+0B80h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 0b 00 00
0209h mov edx,[rsp+0B88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0b 00 00
0210h and edx,[rsp+0B80h]           ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 80 0b 00 00
0217h mov [rsp+0B78h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 0b 00 00
021eh mov eax,[rsp+0B78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0b 00 00
0225h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 c3 1e 00 00
022ah mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0231h mov [rsp+0B68h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 68 0b 00 00
0238h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
023fh mov [rsp+0B70h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 0b 00 00
0246h mov edx,[rsp+0B70h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 0b 00 00
024dh mov [rsp+0B60h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 0b 00 00
0254h mov edx,[rsp+0B68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0b 00 00
025bh mov [rsp+0B58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0b 00 00
0262h mov edx,[rsp+0B60h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 0b 00 00
0269h mov [rsp+0B50h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 0b 00 00
0270h mov edx,[rsp+0B58h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 0b 00 00
0277h mov [rsp+0B48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0b 00 00
027eh mov edx,[rsp+0B50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0b 00 00
0285h or edx,[rsp+0B48h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 48 0b 00 00
028ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
028eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0291h mov [rsp+0B40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0b 00 00
0298h mov eax,[rsp+0B40h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 40 0b 00 00
029fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 49 1e 00 00
02a4h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
02abh mov [rsp+0B30h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 0b 00 00
02b2h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
02b9h mov [rsp+0B38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0b 00 00
02c0h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
02c7h mov [rsp+0B28h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 0b 00 00
02ceh mov edx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 0b 00 00
02d5h mov [rsp+0B18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0b 00 00
02dch mov edx,[rsp+0B28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0b 00 00
02e3h mov [rsp+0B10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0b 00 00
02eah mov edx,[rsp+0B18h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 0b 00 00
02f1h mov [rsp+0B08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0b 00 00
02f8h mov edx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0b 00 00
02ffh mov [rsp+0B00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0b 00 00
0306h mov edx,[rsp+0B08h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 0b 00 00
030dh or edx,[rsp+0B00h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 00 0b 00 00
0314h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0316h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0319h mov [rsp+0AF8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 0a 00 00
0320h mov edx,[rsp+0AF8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 0a 00 00
0327h mov [rsp+0B20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0b 00 00
032eh mov edx,[rsp+0B38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0b 00 00
0335h mov [rsp+0AF0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 0a 00 00
033ch mov edx,[rsp+0B20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0b 00 00
0343h mov [rsp+0AE8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 0a 00 00
034ah mov edx,[rsp+0AF0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 0a 00 00
0351h mov [rsp+0AE0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 0a 00 00
0358h mov edx,[rsp+0AE8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 0a 00 00
035fh mov [rsp+0AD8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 0a 00 00
0366h mov edx,[rsp+0AE0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 0a 00 00
036dh and edx,[rsp+0AD8h]           ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 d8 0a 00 00
0374h mov [rsp+0AD0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 0a 00 00
037bh mov eax,[rsp+0AD0h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 d0 0a 00 00
0382h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 66 1d 00 00
0387h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
038eh mov [rsp+0AC0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 0a 00 00
0395h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
039ch mov [rsp+0AC8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 0a 00 00
03a3h mov edx,[rsp+0AC8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 0a 00 00
03aah mov [rsp+0AB8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 0a 00 00
03b1h mov edx,[rsp+0AC0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 0a 00 00
03b8h mov [rsp+0AB0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 0a 00 00
03bfh mov edx,[rsp+0AB8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 0a 00 00
03c6h mov [rsp+0AA8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 0a 00 00
03cdh mov edx,[rsp+0AB0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 0a 00 00
03d4h mov [rsp+0AA0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 0a 00 00
03dbh mov edx,[rsp+0AA8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 0a 00 00
03e2h or edx,[rsp+0AA0h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a0 0a 00 00
03e9h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
03ebh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
03eeh mov [rsp+0A98h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 0a 00 00
03f5h mov eax,[rsp+0A98h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 98 0a 00 00
03fch jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 ec 1c 00 00
0401h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0408h mov [rsp+0A90h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 90 0a 00 00
040fh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0416h mov [rsp+0A88h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 0a 00 00
041dh mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0424h mov [rsp+0A80h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 0a 00 00
042bh mov edx,[rsp+0A90h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 0a 00 00
0432h mov [rsp+0A68h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 0a 00 00
0439h mov edx,[rsp+0A68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0a 00 00
0440h mov [rsp+0A60h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 0a 00 00
0447h mov edx,[rsp+0A60h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 0a 00 00
044eh mov [rsp+0A58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0a 00 00
0455h mov edx,[rsp+0A58h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 0a 00 00
045ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
045eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0461h mov [rsp+0A50h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 0a 00 00
0468h mov edx,[rsp+0A50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0a 00 00
046fh mov [rsp+0A78h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 0a 00 00
0476h mov edx,[rsp+0A88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0a 00 00
047dh mov [rsp+0A48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0a 00 00
0484h mov edx,[rsp+0A80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0a 00 00
048bh mov [rsp+0A40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0a 00 00
0492h mov edx,[rsp+0A48h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 0a 00 00
0499h mov [rsp+0A38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0a 00 00
04a0h mov edx,[rsp+0A40h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 0a 00 00
04a7h mov [rsp+0A30h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 0a 00 00
04aeh mov edx,[rsp+0A38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0a 00 00
04b5h xor edx,[rsp+0A30h]           ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 30 0a 00 00
04bch mov [rsp+0A28h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 0a 00 00
04c3h mov edx,[rsp+0A28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0a 00 00
04cah mov [rsp+0A70h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 0a 00 00
04d1h mov edx,[rsp+0A78h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 0a 00 00
04d8h mov [rsp+0A20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0a 00 00
04dfh mov edx,[rsp+0A70h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 0a 00 00
04e6h mov [rsp+0A18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0a 00 00
04edh mov edx,[rsp+0A20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0a 00 00
04f4h mov [rsp+0A10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0a 00 00
04fbh mov edx,[rsp+0A18h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 0a 00 00
0502h mov [rsp+0A08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0a 00 00
0509h mov edx,[rsp+0A10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0a 00 00
0510h and edx,[rsp+0A08h]           ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 08 0a 00 00
0517h mov [rsp+0A00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0a 00 00
051eh mov eax,[rsp+0A00h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 00 0a 00 00
0525h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 c3 1b 00 00
052ah mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0531h mov [rsp+9F8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f8 09 00 00
0538h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
053fh mov [rsp+9F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 09 00 00
0546h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
054dh mov [rsp+9E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 09 00 00
0554h mov edx,[rsp+9F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 09 00 00
055bh mov [rsp+9D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 09 00 00
0562h mov edx,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 09 00 00
0569h mov [rsp+9D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 09 00 00
0570h mov edx,[rsp+9D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 09 00 00
0577h mov [rsp+9C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 09 00 00
057eh mov edx,[rsp+9D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 09 00 00
0585h mov [rsp+9C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 09 00 00
058ch mov edx,[rsp+9C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 09 00 00
0593h and edx,[rsp+9C0h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 c0 09 00 00
059ah mov [rsp+9B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 09 00 00
05a1h mov edx,[rsp+9B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 09 00 00
05a8h mov [rsp+9E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 09 00 00
05afh mov edx,[rsp+9F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 09 00 00
05b6h mov [rsp+9B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 09 00 00
05bdh mov edx,[rsp+9E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 09 00 00
05c4h mov [rsp+9A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 09 00 00
05cbh mov edx,[rsp+9B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 09 00 00
05d2h mov [rsp+9A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 09 00 00
05d9h mov edx,[rsp+9A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 09 00 00
05e0h mov [rsp+998h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 09 00 00
05e7h mov edx,[rsp+9A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 09 00 00
05eeh or edx,[rsp+998h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 98 09 00 00
05f5h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
05f7h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
05fah mov [rsp+990h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 09 00 00
0601h mov eax,[rsp+990h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 09 00 00
0608h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 e0 1a 00 00
060dh mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0614h mov [rsp+988h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 09 00 00
061bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0622h mov [rsp+980h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 09 00 00
0629h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0630h mov [rsp+970h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 09 00 00
0637h mov edx,[rsp+988h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 09 00 00
063eh mov [rsp+960h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 09 00 00
0645h mov edx,[rsp+960h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 09 00 00
064ch mov [rsp+958h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 09 00 00
0653h mov edx,[rsp+958h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 09 00 00
065ah mov [rsp+950h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 09 00 00
0661h mov edx,[rsp+950h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 09 00 00
0668h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
066ah and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
066dh mov [rsp+948h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 09 00 00
0674h mov edx,[rsp+948h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 09 00 00
067bh mov [rsp+978h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 09 00 00
0682h mov edx,[rsp+978h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 09 00 00
0689h mov [rsp+940h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 09 00 00
0690h mov edx,[rsp+980h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 09 00 00
0697h mov [rsp+938h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 09 00 00
069eh mov edx,[rsp+940h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 09 00 00
06a5h mov [rsp+930h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 09 00 00
06ach mov edx,[rsp+938h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 09 00 00
06b3h mov [rsp+928h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 09 00 00
06bah mov edx,[rsp+930h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 09 00 00
06c1h and edx,[rsp+928h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 28 09 00 00
06c8h mov [rsp+920h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 09 00 00
06cfh mov edx,[rsp+920h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 09 00 00
06d6h mov [rsp+968h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 09 00 00
06ddh mov edx,[rsp+968h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 09 00 00
06e4h mov [rsp+918h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 09 00 00
06ebh mov edx,[rsp+970h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 09 00 00
06f2h mov [rsp+910h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 09 00 00
06f9h mov edx,[rsp+918h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 09 00 00
0700h mov [rsp+908h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 09 00 00
0707h mov edx,[rsp+910h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 09 00 00
070eh mov [rsp+900h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 09 00 00
0715h mov edx,[rsp+908h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 09 00 00
071ch and edx,[rsp+900h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 00 09 00 00
0723h mov [rsp+8F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 08 00 00
072ah mov eax,[rsp+8F8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f8 08 00 00
0731h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b7 19 00 00
0736h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
073dh mov [rsp+8F0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f0 08 00 00
0744h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
074bh mov [rsp+8E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 08 00 00
0752h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0759h mov [rsp+8E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 08 00 00
0760h mov edx,[rsp+8E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 08 00 00
0767h mov [rsp+8D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 08 00 00
076eh mov edx,[rsp+8E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 08 00 00
0775h mov [rsp+8C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 08 00 00
077ch mov edx,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 08 00 00
0783h mov [rsp+8C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 08 00 00
078ah mov edx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 08 00 00
0791h mov [rsp+8B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 08 00 00
0798h mov edx,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 08 00 00
079fh xor edx,[rsp+8B8h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 b8 08 00 00
07a6h mov [rsp+8B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 08 00 00
07adh mov edx,[rsp+8B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 08 00 00
07b4h mov [rsp+8D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 08 00 00
07bbh mov edx,[rsp+8F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 08 00 00
07c2h mov [rsp+8A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 08 00 00
07c9h mov edx,[rsp+8D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 08 00 00
07d0h mov [rsp+8A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 08 00 00
07d7h mov edx,[rsp+8A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 08 00 00
07deh mov [rsp+898h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 08 00 00
07e5h mov edx,[rsp+8A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 08 00 00
07ech mov [rsp+890h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 08 00 00
07f3h mov edx,[rsp+898h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 08 00 00
07fah or edx,[rsp+890h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 90 08 00 00
0801h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0803h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0806h mov [rsp+888h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 08 00 00
080dh mov eax,[rsp+888h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 88 08 00 00
0814h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d4 18 00 00
0819h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0820h mov [rsp+878h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 08 00 00
0827h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
082eh mov [rsp+880h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 08 00 00
0835h mov edx,[rsp+878h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 08 00 00
083ch mov [rsp+868h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 08 00 00
0843h mov edx,[rsp+868h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 08 00 00
084ah mov [rsp+860h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 08 00 00
0851h mov edx,[rsp+860h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 08 00 00
0858h mov [rsp+858h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 08 00 00
085fh mov edx,[rsp+858h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 08 00 00
0866h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0868h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
086bh mov [rsp+850h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 08 00 00
0872h mov edx,[rsp+850h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 08 00 00
0879h mov [rsp+870h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 08 00 00
0880h mov edx,[rsp+880h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 08 00 00
0887h mov [rsp+848h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 08 00 00
088eh mov edx,[rsp+870h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 08 00 00
0895h mov [rsp+840h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 08 00 00
089ch mov edx,[rsp+848h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 08 00 00
08a3h mov [rsp+838h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 08 00 00
08aah mov edx,[rsp+840h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 08 00 00
08b1h mov [rsp+830h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 08 00 00
08b8h mov edx,[rsp+838h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 08 00 00
08bfh and edx,[rsp+830h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 30 08 00 00
08c6h mov [rsp+828h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 08 00 00
08cdh mov eax,[rsp+828h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 28 08 00 00
08d4h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 14 18 00 00
08d9h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
08e0h mov [rsp+820h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 20 08 00 00
08e7h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
08eeh mov [rsp+818h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 08 00 00
08f5h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
08fch mov [rsp+800h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 08 00 00
0903h mov edx,[rsp+820h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 08 00 00
090ah mov [rsp+7E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 07 00 00
0911h mov edx,[rsp+7E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 07 00 00
0918h mov [rsp+7E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 07 00 00
091fh mov edx,[rsp+7E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 07 00 00
0926h mov [rsp+7D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 07 00 00
092dh mov edx,[rsp+7D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 07 00 00
0934h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0936h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0939h mov [rsp+7D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 07 00 00
0940h mov edx,[rsp+7D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 07 00 00
0947h mov [rsp+810h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 08 00 00
094eh mov dword ptr [rsp+7C8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c8 07 00 00 01 00 00 00
0959h mov edx,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 07 00 00
0960h mov [rsp+808h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 08 00 00
0967h mov edx,[rsp+818h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 08 00 00
096eh mov [rsp+7C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 07 00 00
0975h mov edx,[rsp+808h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 08 00 00
097ch mov [rsp+7B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 07 00 00
0983h mov edx,[rsp+7C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 07 00 00
098ah mov [rsp+7B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 07 00 00
0991h mov edx,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 07 00 00
0998h mov [rsp+7A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 07 00 00
099fh mov edx,[rsp+7B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 07 00 00
09a6h xor edx,[rsp+7A8h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 a8 07 00 00
09adh mov [rsp+7A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 07 00 00
09b4h mov edx,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 07 00 00
09bbh mov [rsp+7F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 07 00 00
09c2h mov edx,[rsp+7F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 07 00 00
09c9h mov [rsp+798h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 07 00 00
09d0h mov edx,[rsp+800h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 08 00 00
09d7h mov [rsp+790h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 07 00 00
09deh mov edx,[rsp+798h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 07 00 00
09e5h mov [rsp+788h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 07 00 00
09ech mov edx,[rsp+790h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 07 00 00
09f3h mov [rsp+780h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 07 00 00
09fah mov edx,[rsp+788h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 07 00 00
0a01h or edx,[rsp+780h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 80 07 00 00
0a08h mov [rsp+778h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 07 00 00
0a0fh mov edx,[rsp+778h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 07 00 00
0a16h mov [rsp+7F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 07 00 00
0a1dh mov edx,[rsp+810h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 08 00 00
0a24h mov [rsp+770h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 07 00 00
0a2bh mov edx,[rsp+7F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 07 00 00
0a32h mov [rsp+768h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 07 00 00
0a39h mov edx,[rsp+770h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 07 00 00
0a40h mov [rsp+760h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 07 00 00
0a47h mov edx,[rsp+768h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 07 00 00
0a4eh mov [rsp+758h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 07 00 00
0a55h mov edx,[rsp+760h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 07 00 00
0a5ch and edx,[rsp+758h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 58 07 00 00
0a63h mov [rsp+750h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 07 00 00
0a6ah mov eax,[rsp+750h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 50 07 00 00
0a71h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 77 16 00 00
0a76h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0a7dh mov [rsp+740h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 40 07 00 00
0a84h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0a8bh mov [rsp+748h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 07 00 00
0a92h mov edx,[rsp+740h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 07 00 00
0a99h mov [rsp+730h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 07 00 00
0aa0h mov edx,[rsp+730h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 07 00 00
0aa7h mov [rsp+728h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 07 00 00
0aaeh mov edx,[rsp+728h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 07 00 00
0ab5h mov [rsp+720h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 07 00 00
0abch mov edx,[rsp+720h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 07 00 00
0ac3h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0ac5h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0ac8h mov [rsp+718h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 07 00 00
0acfh mov edx,[rsp+718h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 07 00 00
0ad6h mov [rsp+738h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 07 00 00
0addh mov edx,[rsp+748h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 07 00 00
0ae4h mov [rsp+710h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 07 00 00
0aebh mov edx,[rsp+738h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 07 00 00
0af2h mov [rsp+708h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 07 00 00
0af9h mov edx,[rsp+710h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 07 00 00
0b00h mov [rsp+700h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 07 00 00
0b07h mov edx,[rsp+708h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 07 00 00
0b0eh mov [rsp+6F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 06 00 00
0b15h mov edx,[rsp+700h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 07 00 00
0b1ch and edx,[rsp+6F8h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 f8 06 00 00
0b23h mov [rsp+6F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 06 00 00
0b2ah mov eax,[rsp+6F0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f0 06 00 00
0b31h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b7 15 00 00
0b36h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0b3dh mov [rsp+6E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 06 00 00
0b44h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0b4bh mov [rsp+6E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 06 00 00
0b52h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0b59h mov [rsp+6D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 06 00 00
0b60h mov edx,[rsp+6E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 06 00 00
0b67h mov [rsp+6B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 06 00 00
0b6eh mov edx,[rsp+6B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 06 00 00
0b75h mov [rsp+6A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 06 00 00
0b7ch mov edx,[rsp+6A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 06 00 00
0b83h mov [rsp+6A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 06 00 00
0b8ah mov edx,[rsp+6A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 06 00 00
0b91h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0b93h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0b96h mov [rsp+698h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 06 00 00
0b9dh mov edx,[rsp+698h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 06 00 00
0ba4h mov [rsp+6D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 06 00 00
0babh mov dword ptr [rsp+690h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 90 06 00 00 01 00 00 00
0bb6h mov edx,[rsp+690h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 06 00 00
0bbdh mov [rsp+6C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 06 00 00
0bc4h mov edx,[rsp+6D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 06 00 00
0bcbh mov [rsp+688h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 06 00 00
0bd2h mov edx,[rsp+6C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 06 00 00
0bd9h mov [rsp+680h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 06 00 00
0be0h mov edx,[rsp+688h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 06 00 00
0be7h mov [rsp+678h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 06 00 00
0beeh mov edx,[rsp+680h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 06 00 00
0bf5h mov [rsp+670h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 06 00 00
0bfch mov edx,[rsp+678h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 06 00 00
0c03h xor edx,[rsp+670h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 70 06 00 00
0c0ah mov [rsp+668h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 06 00 00
0c11h mov edx,[rsp+668h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 06 00 00
0c18h mov [rsp+6C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 06 00 00
0c1fh mov edx,[rsp+6E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 06 00 00
0c26h mov [rsp+660h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 06 00 00
0c2dh mov edx,[rsp+6C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 06 00 00
0c34h mov [rsp+658h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 06 00 00
0c3bh mov edx,[rsp+660h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 06 00 00
0c42h mov [rsp+650h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 06 00 00
0c49h mov edx,[rsp+658h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 06 00 00
0c50h mov [rsp+648h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 06 00 00
0c57h mov edx,[rsp+650h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 06 00 00
0c5eh or edx,[rsp+648h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 48 06 00 00
0c65h mov [rsp+640h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 06 00 00
0c6ch mov edx,[rsp+640h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 06 00 00
0c73h mov [rsp+6B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 06 00 00
0c7ah mov edx,[rsp+6D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 06 00 00
0c81h mov [rsp+638h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 06 00 00
0c88h mov edx,[rsp+6B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 06 00 00
0c8fh mov [rsp+630h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 06 00 00
0c96h mov edx,[rsp+638h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 06 00 00
0c9dh mov [rsp+628h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 06 00 00
0ca4h mov edx,[rsp+630h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 06 00 00
0cabh mov [rsp+620h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 06 00 00
0cb2h mov edx,[rsp+628h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 06 00 00
0cb9h and edx,[rsp+620h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 20 06 00 00
0cc0h mov [rsp+618h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 06 00 00
0cc7h mov eax,[rsp+618h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 06 00 00
0cceh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 1a 14 00 00
0cd3h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0cdah mov [rsp+610h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 10 06 00 00
0ce1h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0ce8h mov [rsp+608h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 06 00 00
0cefh mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0cf6h mov [rsp+600h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 06 00 00
0cfdh mov edx,[rsp+610h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 06 00 00
0d04h mov [rsp+5E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 05 00 00
0d0bh mov edx,[rsp+5E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 05 00 00
0d12h mov [rsp+5E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 05 00 00
0d19h mov edx,[rsp+5E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 05 00 00
0d20h mov [rsp+5D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 05 00 00
0d27h mov edx,[rsp+5D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 05 00 00
0d2eh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0d30h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0d33h mov [rsp+5D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 05 00 00
0d3ah mov edx,[rsp+5D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 05 00 00
0d41h mov [rsp+5F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 05 00 00
0d48h mov edx,[rsp+608h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 06 00 00
0d4fh mov [rsp+5C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 05 00 00
0d56h mov edx,[rsp+600h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 06 00 00
0d5dh mov [rsp+5C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 05 00 00
0d64h mov edx,[rsp+5C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 05 00 00
0d6bh mov [rsp+5B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 05 00 00
0d72h mov edx,[rsp+5C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 05 00 00
0d79h mov [rsp+5B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 05 00 00
0d80h mov edx,[rsp+5B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 05 00 00
0d87h or edx,[rsp+5B0h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 b0 05 00 00
0d8eh mov [rsp+5A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 05 00 00
0d95h mov edx,[rsp+5A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 05 00 00
0d9ch mov [rsp+5F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 05 00 00
0da3h mov edx,[rsp+5F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 05 00 00
0daah mov [rsp+5A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 05 00 00
0db1h mov edx,[rsp+5F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 05 00 00
0db8h mov [rsp+598h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 05 00 00
0dbfh mov edx,[rsp+5A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 05 00 00
0dc6h mov [rsp+590h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 05 00 00
0dcdh mov edx,[rsp+598h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 05 00 00
0dd4h mov [rsp+588h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 05 00 00
0ddbh mov edx,[rsp+590h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 05 00 00
0de2h and edx,[rsp+588h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 88 05 00 00
0de9h mov [rsp+580h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 05 00 00
0df0h mov eax,[rsp+580h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 80 05 00 00
0df7h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f1 12 00 00
0dfch mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0e03h mov [rsp+578h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 05 00 00
0e0ah mov edx,[rsp+578h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 05 00 00
0e11h mov [rsp+570h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 05 00 00
0e18h mov edx,[rsp+570h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 05 00 00
0e1fh mov [rsp+568h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 05 00 00
0e26h mov edx,[rsp+568h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 05 00 00
0e2dh mov [rsp+560h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 05 00 00
0e34h mov edx,[rsp+560h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 05 00 00
0e3bh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0e3dh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0e40h mov [rsp+558h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 05 00 00
0e47h mov eax,[rsp+558h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 58 05 00 00
0e4eh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 9a 12 00 00
0e53h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0e5ah mov [rsp+550h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 05 00 00
0e61h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0e68h mov [rsp+548h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 05 00 00
0e6fh mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0e76h mov [rsp+540h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 05 00 00
0e7dh mov edx,[rsp+548h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 05 00 00
0e84h mov [rsp+530h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 05 00 00
0e8bh mov edx,[rsp+540h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 05 00 00
0e92h mov [rsp+528h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 05 00 00
0e99h mov edx,[rsp+530h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 05 00 00
0ea0h mov [rsp+520h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 05 00 00
0ea7h mov edx,[rsp+528h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 05 00 00
0eaeh mov [rsp+518h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 05 00 00
0eb5h mov edx,[rsp+520h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 05 00 00
0ebch or edx,[rsp+518h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 18 05 00 00
0ec3h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0ec5h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0ec8h mov [rsp+510h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 05 00 00
0ecfh mov edx,[rsp+510h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 05 00 00
0ed6h mov [rsp+538h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 05 00 00
0eddh mov edx,[rsp+550h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 05 00 00
0ee4h mov [rsp+508h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 05 00 00
0eebh mov edx,[rsp+538h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 05 00 00
0ef2h mov [rsp+500h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 05 00 00
0ef9h mov edx,[rsp+508h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 05 00 00
0f00h mov [rsp+4F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 04 00 00
0f07h mov edx,[rsp+500h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 05 00 00
0f0eh mov [rsp+4F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 04 00 00
0f15h mov edx,[rsp+4F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 04 00 00
0f1ch and edx,[rsp+4F0h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 f0 04 00 00
0f23h mov [rsp+4E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 04 00 00
0f2ah mov eax,[rsp+4E8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 04 00 00
0f31h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b7 11 00 00
0f36h mov eax,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 80 0c 00 00
0f3dh mov [rsp+4D8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d8 04 00 00
0f44h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0f4bh mov [rsp+4E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 04 00 00
0f52h mov edx,[rsp+4E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 04 00 00
0f59h mov [rsp+4D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 04 00 00
0f60h mov edx,[rsp+4D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 04 00 00
0f67h mov [rsp+4C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 04 00 00
0f6eh mov edx,[rsp+4D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 04 00 00
0f75h mov [rsp+4C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 04 00 00
0f7ch mov edx,[rsp+4C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 04 00 00
0f83h mov [rsp+4B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 04 00 00
0f8ah mov edx,[rsp+4C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 04 00 00
0f91h or edx,[rsp+4B8h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 b8 04 00 00
0f98h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0f9ah and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0f9dh mov [rsp+4B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 04 00 00
0fa4h mov eax,[rsp+4B0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 b0 04 00 00
0fabh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 3d 11 00 00
0fb0h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0fb7h mov [rsp+4A0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 a0 04 00 00
0fbeh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0fc5h mov [rsp+4A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 04 00 00
0fcch mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0fd3h mov [rsp+498h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 04 00 00
0fdah mov edx,[rsp+4A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 04 00 00
0fe1h mov [rsp+480h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 04 00 00
0fe8h mov edx,[rsp+480h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 04 00 00
0fefh mov [rsp+478h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 04 00 00
0ff6h mov edx,[rsp+478h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 04 00 00
0ffdh mov [rsp+470h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 04 00 00
1004h mov edx,[rsp+470h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 04 00 00
100bh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
100dh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
1010h mov [rsp+468h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 04 00 00
1017h mov edx,[rsp+468h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 04 00 00
101eh mov [rsp+490h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 04 00 00
1025h mov edx,[rsp+4A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 04 00 00
102ch mov [rsp+460h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 04 00 00
1033h mov edx,[rsp+498h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 04 00 00
103ah mov [rsp+458h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 04 00 00
1041h mov edx,[rsp+460h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 04 00 00
1048h mov [rsp+450h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 04 00 00
104fh mov edx,[rsp+458h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 04 00 00
1056h mov [rsp+448h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 04 00 00
105dh mov edx,[rsp+450h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 04 00 00
1064h xor edx,[rsp+448h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 48 04 00 00
106bh mov [rsp+440h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 04 00 00
1072h mov edx,[rsp+440h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 04 00 00
1079h mov [rsp+488h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 04 00 00
1080h mov edx,[rsp+490h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 04 00 00
1087h mov [rsp+438h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 04 00 00
108eh mov edx,[rsp+488h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 04 00 00
1095h mov [rsp+430h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 04 00 00
109ch mov edx,[rsp+438h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 04 00 00
10a3h mov [rsp+428h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 04 00 00
10aah mov edx,[rsp+430h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 04 00 00
10b1h mov [rsp+420h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 04 00 00
10b8h mov edx,[rsp+428h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 04 00 00
10bfh and edx,[rsp+420h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 20 04 00 00
10c6h mov [rsp+418h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 04 00 00
10cdh mov eax,[rsp+418h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 04 00 00
10d4h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 14 10 00 00
10d9h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
10e0h mov [rsp+408h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 08 04 00 00
10e7h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
10eeh mov [rsp+410h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 04 00 00
10f5h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
10fch mov [rsp+400h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 04 00 00
1103h mov edx,[rsp+408h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 04 00 00
110ah mov [rsp+3F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 03 00 00
1111h mov edx,[rsp+400h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 04 00 00
1118h mov [rsp+3E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 03 00 00
111fh mov edx,[rsp+3F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 03 00 00
1126h mov [rsp+3E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 03 00 00
112dh mov edx,[rsp+3E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 03 00 00
1134h mov [rsp+3D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 03 00 00
113bh mov edx,[rsp+3E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 03 00 00
1142h and edx,[rsp+3D8h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 d8 03 00 00
1149h mov [rsp+3D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 03 00 00
1150h mov edx,[rsp+3D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 03 00 00
1157h mov [rsp+3F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 03 00 00
115eh mov edx,[rsp+410h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 04 00 00
1165h mov [rsp+3C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 03 00 00
116ch mov edx,[rsp+3F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 03 00 00
1173h mov [rsp+3C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 03 00 00
117ah mov edx,[rsp+3C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 03 00 00
1181h mov [rsp+3B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 03 00 00
1188h mov edx,[rsp+3C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 03 00 00
118fh mov [rsp+3B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 03 00 00
1196h mov edx,[rsp+3B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 03 00 00
119dh or edx,[rsp+3B0h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 b0 03 00 00
11a4h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
11a6h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
11a9h mov [rsp+3A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 03 00 00
11b0h mov eax,[rsp+3A8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a8 03 00 00
11b7h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 31 0f 00 00
11bch mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
11c3h mov [rsp+398h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 98 03 00 00
11cah mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
11d1h mov [rsp+390h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 03 00 00
11d8h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
11dfh mov [rsp+3A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 03 00 00
11e6h mov edx,[rsp+3A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 03 00 00
11edh mov [rsp+378h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 03 00 00
11f4h mov edx,[rsp+378h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 03 00 00
11fbh mov [rsp+370h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 03 00 00
1202h mov edx,[rsp+370h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 03 00 00
1209h mov [rsp+368h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 03 00 00
1210h mov edx,[rsp+368h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 03 00 00
1217h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
1219h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
121ch mov [rsp+360h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 03 00 00
1223h mov edx,[rsp+360h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 03 00 00
122ah mov [rsp+388h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 03 00 00
1231h mov edx,[rsp+398h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 03 00 00
1238h mov [rsp+358h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 03 00 00
123fh mov edx,[rsp+390h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 03 00 00
1246h mov [rsp+350h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 03 00 00
124dh mov edx,[rsp+358h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 03 00 00
1254h mov [rsp+348h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 03 00 00
125bh mov edx,[rsp+350h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 03 00 00
1262h mov [rsp+340h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 03 00 00
1269h mov edx,[rsp+348h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 03 00 00
1270h xor edx,[rsp+340h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 40 03 00 00
1277h mov [rsp+338h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 03 00 00
127eh mov edx,[rsp+338h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 03 00 00
1285h mov [rsp+380h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 03 00 00
128ch mov edx,[rsp+388h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 03 00 00
1293h mov [rsp+330h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 03 00 00
129ah mov edx,[rsp+380h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 03 00 00
12a1h mov [rsp+328h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 03 00 00
12a8h mov edx,[rsp+330h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 03 00 00
12afh mov [rsp+320h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 03 00 00
12b6h mov edx,[rsp+328h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 03 00 00
12bdh mov [rsp+318h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 03 00 00
12c4h mov edx,[rsp+320h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 03 00 00
12cbh and edx,[rsp+318h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 18 03 00 00
12d2h mov [rsp+310h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 03 00 00
12d9h mov eax,[rsp+310h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 10 03 00 00
12e0h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 08 0e 00 00
12e5h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
12ech mov [rsp+300h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 00 03 00 00
12f3h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
12fah mov [rsp+2F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 02 00 00
1301h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
1308h mov [rsp+308h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 03 00 00
130fh mov edx,[rsp+300h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 03 00 00
1316h mov [rsp+2E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 02 00 00
131dh mov edx,[rsp+2F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 02 00 00
1324h mov [rsp+2E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 02 00 00
132bh mov edx,[rsp+2E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 02 00 00
1332h mov [rsp+2D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 02 00 00
1339h mov edx,[rsp+2E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 02 00 00
1340h mov [rsp+2D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 02 00 00
1347h mov edx,[rsp+2D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 02 00 00
134eh and edx,[rsp+2D0h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 d0 02 00 00
1355h mov [rsp+2C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 02 00 00
135ch mov edx,[rsp+2C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 02 00 00
1363h mov [rsp+2F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 02 00 00
136ah mov edx,[rsp+308h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 03 00 00
1371h mov [rsp+2C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 02 00 00
1378h mov edx,[rsp+2F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 02 00 00
137fh mov [rsp+2B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 02 00 00
1386h mov edx,[rsp+2C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 02 00 00
138dh mov [rsp+2B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 02 00 00
1394h mov edx,[rsp+2B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 02 00 00
139bh mov [rsp+2A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 02 00 00
13a2h mov edx,[rsp+2B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 02 00 00
13a9h or edx,[rsp+2A8h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a8 02 00 00
13b0h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
13b2h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
13b5h mov [rsp+2A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 02 00 00
13bch mov eax,[rsp+2A0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a0 02 00 00
13c3h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 25 0d 00 00
13c8h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
13cfh mov [rsp+298h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 98 02 00 00
13d6h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
13ddh mov [rsp+290h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 02 00 00
13e4h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
13ebh mov [rsp+288h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 02 00 00
13f2h mov edx,[rsp+290h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 02 00 00
13f9h mov [rsp+270h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 02 00 00
1400h mov edx,[rsp+288h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 02 00 00
1407h mov [rsp+268h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 02 00 00
140eh mov edx,[rsp+270h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 02 00 00
1415h mov [rsp+260h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 02 00 00
141ch mov edx,[rsp+268h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 02 00 00
1423h mov [rsp+258h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 02 00 00
142ah mov edx,[rsp+260h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 02 00 00
1431h or edx,[rsp+258h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 58 02 00 00
1438h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
143ah and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
143dh mov [rsp+250h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 02 00 00
1444h mov edx,[rsp+250h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 02 00 00
144bh mov [rsp+280h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 02 00 00
1452h mov edx,[rsp+290h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 02 00 00
1459h mov [rsp+248h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 02 00 00
1460h mov edx,[rsp+288h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 02 00 00
1467h mov [rsp+240h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 02 00 00
146eh mov edx,[rsp+248h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 02 00 00
1475h mov [rsp+238h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 02 00 00
147ch mov edx,[rsp+240h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 02 00 00
1483h mov [rsp+230h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 02 00 00
148ah mov edx,[rsp+238h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 02 00 00
1491h xor edx,[rsp+230h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 30 02 00 00
1498h mov [rsp+228h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 02 00 00
149fh mov edx,[rsp+228h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 02 00 00
14a6h mov [rsp+278h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 02 00 00
14adh mov edx,[rsp+298h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 02 00 00
14b4h mov [rsp+220h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 02 00 00
14bbh mov edx,[rsp+280h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 02 00 00
14c2h mov [rsp+218h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 02 00 00
14c9h mov edx,[rsp+278h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 02 00 00
14d0h mov [rsp+210h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 02 00 00
14d7h mov edx,[rsp+220h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 02 00 00
14deh mov [rsp+208h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 02 00 00
14e5h mov edx,[rsp+218h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 02 00 00
14ech mov [rsp+200h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 02 00 00
14f3h mov edx,[rsp+210h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 02 00 00
14fah mov [rsp+1F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 01 00 00
1501h mov edx,[rsp+208h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 02 00 00
1508h and edx,[rsp+200h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 00 02 00 00
150fh mov ecx,[rsp+208h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 02 00 00
1516h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
1518h and ecx,[rsp+1F8h]            ; AND(And_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 8c 24 f8 01 00 00
151fh or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
1521h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
1524h mov [rsp+1F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 01 00 00
152bh mov eax,[rsp+1F0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f0 01 00 00
1532h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b6 0b 00 00
1537h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
153eh mov [rsp+1E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 01 00 00
1545h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
154ch mov [rsp+1E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 01 00 00
1553h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
155ah mov [rsp+1D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 01 00 00
1561h mov edx,[rsp+1E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 01 00 00
1568h mov [rsp+1B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 01 00 00
156fh mov edx,[rsp+1D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 01 00 00
1576h mov [rsp+1B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 01 00 00
157dh mov edx,[rsp+1B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 01 00 00
1584h mov [rsp+1A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 01 00 00
158bh mov edx,[rsp+1B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 01 00 00
1592h mov [rsp+1A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 01 00 00
1599h mov edx,[rsp+1A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 01 00 00
15a0h or edx,[rsp+1A0h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a0 01 00 00
15a7h mov [rsp+198h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 01 00 00
15aeh mov edx,[rsp+198h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 01 00 00
15b5h mov [rsp+1D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 01 00 00
15bch mov edx,[rsp+1E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 01 00 00
15c3h mov [rsp+190h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 01 00 00
15cah mov edx,[rsp+1D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 01 00 00
15d1h mov [rsp+188h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 01 00 00
15d8h mov edx,[rsp+190h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 01 00 00
15dfh mov [rsp+180h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 01 00 00
15e6h mov edx,[rsp+188h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 01 00 00
15edh mov [rsp+178h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 01 00 00
15f4h mov edx,[rsp+180h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 01 00 00
15fbh and edx,[rsp+178h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 78 01 00 00
1602h mov [rsp+170h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 01 00 00
1609h mov edx,[rsp+170h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 01 00 00
1610h mov [rsp+1C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 01 00 00
1617h mov edx,[rsp+1E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 01 00 00
161eh mov [rsp+168h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 01 00 00
1625h mov edx,[rsp+1D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 01 00 00
162ch mov [rsp+160h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 01 00 00
1633h mov edx,[rsp+1C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 01 00 00
163ah mov [rsp+158h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 01 00 00
1641h mov edx,[rsp+168h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 01 00 00
1648h mov [rsp+150h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 01 00 00
164fh mov edx,[rsp+160h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 01 00 00
1656h mov [rsp+148h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 01 00 00
165dh mov edx,[rsp+158h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 01 00 00
1664h mov [rsp+140h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 01 00 00
166bh mov edx,[rsp+150h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 01 00 00
1672h and edx,[rsp+148h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 48 01 00 00
1679h mov ecx,[rsp+150h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 01 00 00
1680h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
1682h and ecx,[rsp+140h]            ; AND(And_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 8c 24 40 01 00 00
1689h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
168bh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
168eh mov [rsp+138h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 01 00 00
1695h mov edx,[rsp+138h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 01 00 00
169ch mov [rsp+1C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 01 00 00
16a3h mov edx,[rsp+1C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 01 00 00
16aah mov [rsp+130h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 01 00 00
16b1h mov edx,[rsp+130h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 01 00 00
16b8h mov [rsp+128h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 01 00 00
16bfh mov edx,[rsp+128h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 01 00 00
16c6h mov [rsp+120h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 01 00 00
16cdh mov edx,[rsp+120h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 01 00 00
16d4h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
16d6h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
16d9h mov [rsp+118h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 01 00 00
16e0h mov eax,[rsp+118h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 01 00 00
16e7h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 01 0a 00 00
16ech mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
16f3h mov [rsp+110h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 10 01 00 00
16fah mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1701h mov [rsp+108h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 01 00 00
1708h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
170fh mov [rsp+100h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 01 00 00
1716h mov edx,[rsp+110h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 01 00 00
171dh mov [rsp+0E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 00 00 00
1724h mov edx,[rsp+108h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 01 00 00
172bh mov [rsp+0E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 00 00 00
1732h mov edx,[rsp+0E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 00 00 00
1739h mov [rsp+0D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 00 00 00
1740h mov edx,[rsp+0E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 00 00 00
1747h mov [rsp+0D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 00 00 00
174eh mov edx,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 00 00 00
1755h xor edx,[rsp+0D0h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 d0 00 00 00
175ch mov [rsp+0C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 00 00 00
1763h mov edx,[rsp+0C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 00 00 00
176ah mov [rsp+0F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 00 00 00
1771h mov edx,[rsp+110h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 01 00 00
1778h mov [rsp+0C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 00 00 00
177fh mov edx,[rsp+100h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 01 00 00
1786h mov [rsp+0B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 00 00 00
178dh mov edx,[rsp+0C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 00 00 00
1794h mov [rsp+0B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 00 00 00
179bh mov edx,[rsp+0B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 00 00 00
17a2h mov [rsp+0A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 00 00 00
17a9h mov edx,[rsp+0B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 00 00 00
17b0h xor edx,[rsp+0A8h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 a8 00 00 00
17b7h mov [rsp+0A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 00 00 00
17beh mov edx,[rsp+0A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 00 00 00
17c5h mov [rsp+0F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 00 00 00
17cch mov edx,[rsp+0F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 00 00 00
17d3h mov [rsp+98h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 00 00 00
17dah mov edx,[rsp+0F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 00 00 00
17e1h mov [rsp+90h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 00 00 00
17e8h mov edx,[rsp+98h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 00 00 00
17efh mov [rsp+88h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 00 00 00
17f6h mov edx,[rsp+90h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 00 00 00
17fdh mov [rsp+80h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 00 00 00
1804h mov edx,[rsp+88h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 00 00 00
180bh and edx,[rsp+80h]             ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 80 00 00 00
1812h mov [rsp+78h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 78
1816h mov eax,[rsp+78h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 78
181ah jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 ce 08 00 00
181fh mov edx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 0c 00 00
1826h mov [rsp+60h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 60
182ah mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1831h mov [rsp+70h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 70
1835h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
183ch mov [rsp+68h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 68
1840h mov edx,[rsp+70h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 70
1844h mov [rsp+40h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 40
1848h mov edx,[rsp+68h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 68
184ch mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
1850h mov edx,[rsp+40h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 40
1854h mov [rsp+30h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 30
1858h mov edx,[rsp+38h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 38
185ch mov [rsp+28h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 28
1860h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1862h mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
1866h mov edx,[rsp+30h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 30
186ah xor edx,[rsp+28h]             ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 33 54 24 28
186eh lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
1873h call 7FFDDB8220C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFE0148h:jmp64]        encoding(5 bytes) = e8 d0 e8 fd ff
1878h mov ecx,[rsp+20h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 20
187ch mov [rsp+58h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 58
1880h mov ecx,[rsp+70h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 70
1884h mov edx,[rsp+68h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 68
1888h call 7FFDDB834D40h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2DC0h:jmp64]        encoding(5 bytes) = e8 33 15 ff ff
188dh mov [rsp+50h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 50
1891h mov ecx,[rsp+60h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 60
1895h mov edx,[rsp+50h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 50
1899h call 7FFDDB834D40h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2DC0h:jmp64]        encoding(5 bytes) = e8 22 15 ff ff
189eh mov [rsp+48h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 48
18a2h mov ecx,[rsp+58h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 58
18a6h mov edx,[rsp+48h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 48
18aah call 7FFDDB834D60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2DE0h:jmp64]        encoding(5 bytes) = e8 31 15 ff ff
18afh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 08 00 00
18b4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
18bbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
18c2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
18cah call 7FFDDB834E98h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F18h:jmp64]        encoding(5 bytes) = e8 49 16 ff ff
18cfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 08 00 00
18d4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
18dbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
18e2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
18eah call 7FFDDB834EA0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F20h:jmp64]        encoding(5 bytes) = e8 31 16 ff ff
18efh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 07 00 00
18f4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
18fbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1902h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
190ah call 7FFDDB834EA8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F28h:jmp64]        encoding(5 bytes) = e8 19 16 ff ff
190fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 07 00 00
1914h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
191bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1922h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
192ah call 7FFDDB834EB0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F30h:jmp64]        encoding(5 bytes) = e8 01 16 ff ff
192fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 07 00 00
1934h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
193bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1942h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
194ah call 7FFDDB834EB8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F38h:jmp64]        encoding(5 bytes) = e8 e9 15 ff ff
194fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 07 00 00
1954h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
195bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1962h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
196ah call 7FFDDB834EC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F40h:jmp64]        encoding(5 bytes) = e8 d1 15 ff ff
196fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 07 00 00
1974h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
197bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1982h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
198ah call 7FFDDB834EC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F48h:jmp64]        encoding(5 bytes) = e8 b9 15 ff ff
198fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 07 00 00
1994h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
199bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
19a2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
19aah call 7FFDDB834ED0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F50h:jmp64]        encoding(5 bytes) = e8 a1 15 ff ff
19afh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 07 00 00
19b4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
19bbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
19c2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
19cah call 7FFDDB834ED8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F58h:jmp64]        encoding(5 bytes) = e8 89 15 ff ff
19cfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 07 00 00
19d4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
19dbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
19e2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
19eah call 7FFDDB834EE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F60h:jmp64]        encoding(5 bytes) = e8 71 15 ff ff
19efh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 06 00 00
19f4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
19fbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a0ah call 7FFDDB834EE8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F68h:jmp64]        encoding(5 bytes) = e8 59 15 ff ff
1a0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 06 00 00
1a14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a2ah call 7FFDDB834EF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F70h:jmp64]        encoding(5 bytes) = e8 41 15 ff ff
1a2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 06 00 00
1a34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a4ah call 7FFDDB834EF8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F78h:jmp64]        encoding(5 bytes) = e8 29 15 ff ff
1a4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 06 00 00
1a54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a6ah call 7FFDDB834F00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F80h:jmp64]        encoding(5 bytes) = e8 11 15 ff ff
1a6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 06 00 00
1a74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a8ah call 7FFDDB834F08h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F88h:jmp64]        encoding(5 bytes) = e8 f9 14 ff ff
1a8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 06 00 00
1a94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1aa2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1aaah call 7FFDDB834F10h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F90h:jmp64]        encoding(5 bytes) = e8 e1 14 ff ff
1aafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 06 00 00
1ab4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1abbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ac2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1acah call 7FFDDB834F18h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F98h:jmp64]        encoding(5 bytes) = e8 c9 14 ff ff
1acfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 06 00 00
1ad4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1adbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ae2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1aeah call 7FFDDB834F20h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FA0h:jmp64]        encoding(5 bytes) = e8 b1 14 ff ff
1aefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 05 00 00
1af4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1afbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b0ah call 7FFDDB834F28h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FA8h:jmp64]        encoding(5 bytes) = e8 99 14 ff ff
1b0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 05 00 00
1b14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b2ah call 7FFDDB834F30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FB0h:jmp64]        encoding(5 bytes) = e8 81 14 ff ff
1b2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 05 00 00
1b34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b4ah call 7FFDDB834F38h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FB8h:jmp64]        encoding(5 bytes) = e8 69 14 ff ff
1b4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 05 00 00
1b54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b6ah call 7FFDDB834F40h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FC0h:jmp64]        encoding(5 bytes) = e8 51 14 ff ff
1b6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 05 00 00
1b74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b8ah call 7FFDDB834F48h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FC8h:jmp64]        encoding(5 bytes) = e8 39 14 ff ff
1b8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 05 00 00
1b94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ba2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1baah call 7FFDDB834F50h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FD0h:jmp64]        encoding(5 bytes) = e8 21 14 ff ff
1bafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 05 00 00
1bb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1bbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1bc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1bcah call 7FFDDB834F58h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FD8h:jmp64]        encoding(5 bytes) = e8 09 14 ff ff
1bcfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 05 00 00
1bd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1bdbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1be2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1beah call 7FFDDB834F60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FE0h:jmp64]        encoding(5 bytes) = e8 f1 13 ff ff
1befh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 04 00 00
1bf4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1bfbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c0ah call 7FFDDB834F68h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FE8h:jmp64]        encoding(5 bytes) = e8 d9 13 ff ff
1c0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 04 00 00
1c14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c2ah call 7FFDDB834F70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FF0h:jmp64]        encoding(5 bytes) = e8 c1 13 ff ff
1c2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 04 00 00
1c34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c4ah call 7FFDDB834F78h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2FF8h:jmp64]        encoding(5 bytes) = e8 a9 13 ff ff
1c4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 04 00 00
1c54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c6ah call 7FFDDB834F80h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3000h:jmp64]        encoding(5 bytes) = e8 91 13 ff ff
1c6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 04 00 00
1c74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c8ah call 7FFDDB834F88h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3008h:jmp64]        encoding(5 bytes) = e8 79 13 ff ff
1c8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 04 00 00
1c94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ca2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1caah call 7FFDDB834F90h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3010h:jmp64]        encoding(5 bytes) = e8 61 13 ff ff
1cafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 04 00 00
1cb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1cbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1cc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1ccah call 7FFDDB834F98h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3018h:jmp64]        encoding(5 bytes) = e8 49 13 ff ff
1ccfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 04 00 00
1cd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1cdbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ce2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1ceah call 7FFDDB834FA0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3020h:jmp64]        encoding(5 bytes) = e8 31 13 ff ff
1cefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 03 00 00
1cf4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1cfbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d0ah call 7FFDDB834FA8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3028h:jmp64]        encoding(5 bytes) = e8 19 13 ff ff
1d0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 03 00 00
1d14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d2ah call 7FFDDB834FB0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3030h:jmp64]        encoding(5 bytes) = e8 01 13 ff ff
1d2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 03 00 00
1d34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d4ah call 7FFDDB834FB8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3038h:jmp64]        encoding(5 bytes) = e8 e9 12 ff ff
1d4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 03 00 00
1d54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d6ah call 7FFDDB834FC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3040h:jmp64]        encoding(5 bytes) = e8 d1 12 ff ff
1d6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 03 00 00
1d74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d8ah call 7FFDDB834FC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3048h:jmp64]        encoding(5 bytes) = e8 b9 12 ff ff
1d8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 03 00 00
1d94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1da2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1daah call 7FFDDB834FD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3050h:jmp64]        encoding(5 bytes) = e8 a1 12 ff ff
1dafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 03 00 00
1db4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1dbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1dc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1dcah call 7FFDDB834FD8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3058h:jmp64]        encoding(5 bytes) = e8 89 12 ff ff
1dcfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 03 00 00
1dd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1ddbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1de2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1deah call 7FFDDB834FE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3060h:jmp64]        encoding(5 bytes) = e8 71 12 ff ff
1defh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 02 00 00
1df4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1dfbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e0ah call 7FFDDB834FE8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3068h:jmp64]        encoding(5 bytes) = e8 59 12 ff ff
1e0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 02 00 00
1e14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e2ah call 7FFDDB834FF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3070h:jmp64]        encoding(5 bytes) = e8 41 12 ff ff
1e2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 02 00 00
1e34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e4ah call 7FFDDB834FF8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3078h:jmp64]        encoding(5 bytes) = e8 29 12 ff ff
1e4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 02 00 00
1e54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e6ah call 7FFDDB835000h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3080h:jmp64]        encoding(5 bytes) = e8 11 12 ff ff
1e6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 02 00 00
1e74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e8ah call 7FFDDB835008h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3088h:jmp64]        encoding(5 bytes) = e8 f9 11 ff ff
1e8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 02 00 00
1e94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ea2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1eaah call 7FFDDB835010h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3090h:jmp64]        encoding(5 bytes) = e8 e1 11 ff ff
1eafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 02 00 00
1eb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1ebbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ec2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1ecah call 7FFDDB835018h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3098h:jmp64]        encoding(5 bytes) = e8 c9 11 ff ff
1ecfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 02 00 00
1ed4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1edbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ee2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1eeah call 7FFDDB835020h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30A0h:jmp64]        encoding(5 bytes) = e8 b1 11 ff ff
1eefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 01 00 00
1ef4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1efbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f0ah call 7FFDDB835028h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30A8h:jmp64]        encoding(5 bytes) = e8 99 11 ff ff
1f0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 01 00 00
1f14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f2ah call 7FFDDB835030h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30B0h:jmp64]        encoding(5 bytes) = e8 81 11 ff ff
1f2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 01 00 00
1f34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f4ah call 7FFDDB835038h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30B8h:jmp64]        encoding(5 bytes) = e8 69 11 ff ff
1f4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 01 00 00
1f54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f6ah call 7FFDDB835040h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30C0h:jmp64]        encoding(5 bytes) = e8 51 11 ff ff
1f6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 01 00 00
1f74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f8ah call 7FFDDB835048h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30C8h:jmp64]        encoding(5 bytes) = e8 39 11 ff ff
1f8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 01 00 00
1f94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1fa2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1faah call 7FFDDB835050h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30D0h:jmp64]        encoding(5 bytes) = e8 21 11 ff ff
1fafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 01 00 00
1fb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1fbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1fc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1fcah call 7FFDDB835058h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30D8h:jmp64]        encoding(5 bytes) = e8 09 11 ff ff
1fcfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 01 00 00
1fd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1fdbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1fe2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1feah call 7FFDDB835060h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30E0h:jmp64]        encoding(5 bytes) = e8 f1 10 ff ff
1fefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 00 00 00
1ff4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1ffbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2002h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
200ah call 7FFDDB835068h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30E8h:jmp64]        encoding(5 bytes) = e8 d9 10 ff ff
200fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 00 00 00
2014h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
201bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2022h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
202ah call 7FFDDB835070h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30F0h:jmp64]        encoding(5 bytes) = e8 c1 10 ff ff
202fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 00 00 00
2034h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
203bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2042h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
204ah call 7FFDDB835078h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF30F8h:jmp64]        encoding(5 bytes) = e8 a9 10 ff ff
204fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 00 00 00
2054h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
205bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2062h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
206ah call 7FFDDB835080h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3100h:jmp64]        encoding(5 bytes) = e8 91 10 ff ff
206fh jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 7c
2071h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
2078h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
207fh mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
2087h call 7FFDDB835088h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3108h:jmp64]        encoding(5 bytes) = e8 7c 10 ff ff
208ch jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 5f
208eh mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
2095h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
209ch mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
20a4h call 7FFDDB835090h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3110h:jmp64]        encoding(5 bytes) = e8 67 10 ff ff
20a9h jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 42
20abh mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
20b2h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
20b9h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
20c1h call 7FFDDB835098h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3118h:jmp64]        encoding(5 bytes) = e8 52 10 ff ff
20c6h jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 25
20c8h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
20cfh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
20d6h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
20deh call 7FFDDB835098h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3118h:jmp64]        encoding(5 bytes) = e8 35 10 ff ff
20e3h jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 08
20e5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
20e8h call 7FFDDB8415E8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF668h:jmp64]        encoding(5 bytes) = e8 7b d5 ff ff
20edh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
20eeh add rsp,0C60h                 ; ADD(Add_rm64_imm32) [RSP,c60h:imm64]                 encoding(7 bytes) = 48 81 c4 60 0c 00 00
20f5h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
20f6h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[8439]{0x56,0x48,0x81,0xEC,0x60,0x0C,0x00,0x00,0x48,0x89,0x94,0x24,0x78,0x0C,0x00,0x00,0x4C,0x89,0x84,0x24,0x80,0x0C,0x00,0x00,0x4C,0x89,0x8C,0x24,0x88,0x0C,0x00,0x00,0x40,0x0F,0xB6,0xF1,0x83,0xFE,0x5A,0x77,0x18,0x8B,0xC6,0x48,0x8D,0x15,0xC6,0x20,0x00,0x00,0x8B,0x14,0x82,0x48,0x8D,0x0D,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xD1,0xFF,0xE2,0x80,0xF9,0xFF,0x0F,0x84,0x7E,0x20,0x00,0x00,0xE9,0x96,0x20,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x58,0x0C,0x00,0x00,0x8B,0x84,0x24,0x58,0x0C,0x00,0x00,0xE9,0x89,0x20,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x50,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x48,0x0C,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x40,0x0C,0x00,0x00,0x8B,0x94,0x24,0x48,0x0C,0x00,0x00,0x89,0x94,0x24,0x30,0x0C,0x00,0x00,0x8B,0x94,0x24,0x40,0x0C,0x00,0x00,0x89,0x94,0x24,0x28,0x0C,0x00,0x00,0x8B,0x94,0x24,0x30,0x0C,0x00,0x00,0x89,0x94,0x24,0x20,0x0C,0x00,0x00,0x8B,0x94,0x24,0x28,0x0C,0x00,0x00,0x89,0x94,0x24,0x18,0x0C,0x00,0x00,0x8B,0x94,0x24,0x20,0x0C,0x00,0x00,0x0B,0x94,0x24,0x18,0x0C,0x00,0x00,0x89,0x94,0x24,0x10,0x0C,0x00,0x00,0x8B,0x94,0x24,0x10,0x0C,0x00,0x00,0x89,0x94,0x24,0x38,0x0C,0x00,0x00,0x8B,0x94,0x24,0x50,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x0C,0x00,0x00,0x8B,0x94,0x24,0x38,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x0C,0x00,0x00,0x8B,0x94,0x24,0x08,0x0C,0x00,0x00,0x89,0x94,0x24,0xF8,0x0B,0x00,0x00,0x8B,0x94,0x24,0x00,0x0C,0x00,0x00,0x89,0x94,0x24,0xF0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xF8,0x0B,0x00,0x00,0x0B,0x94,0x24,0xF0,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xE8,0x0B,0x00,0x00,0x8B,0x84,0x24,0xE8,0x0B,0x00,0x00,0xE9,0xA6,0x1F,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xD0,0x0B,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xD8,0x0B,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xD8,0x0B,0x00,0x00,0x89,0x94,0x24,0xC0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xD0,0x0B,0x00,0x00,0x89,0x94,0x24,0xB8,0x0B,0x00,0x00,0x8B,0x94,0x24,0xC0,0x0B,0x00,0x00,0x89,0x94,0x24,0xB0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xB8,0x0B,0x00,0x00,0x89,0x94,0x24,0xA8,0x0B,0x00,0x00,0x8B,0x94,0x24,0xB0,0x0B,0x00,0x00,0x0B,0x94,0x24,0xA8,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xA0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xA0,0x0B,0x00,0x00,0x89,0x94,0x24,0xC8,0x0B,0x00,0x00,0x8B,0x94,0x24,0xE0,0x0B,0x00,0x00,0x89,0x94,0x24,0x98,0x0B,0x00,0x00,0x8B,0x94,0x24,0xC8,0x0B,0x00,0x00,0x89,0x94,0x24,0x90,0x0B,0x00,0x00,0x8B,0x94,0x24,0x98,0x0B,0x00,0x00,0x89,0x94,0x24,0x88,0x0B,0x00,0x00,0x8B,0x94,0x24,0x90,0x0B,0x00,0x00,0x89,0x94,0x24,0x80,0x0B,0x00,0x00,0x8B,0x94,0x24,0x88,0x0B,0x00,0x00,0x23,0x94,0x24,0x80,0x0B,0x00,0x00,0x89,0x94,0x24,0x78,0x0B,0x00,0x00,0x8B,0x84,0x24,0x78,0x0B,0x00,0x00,0xE9,0xC3,0x1E,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x68,0x0B,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x70,0x0B,0x00,0x00,0x8B,0x94,0x24,0x70,0x0B,0x00,0x00,0x89,0x94,0x24,0x60,0x0B,0x00,0x00,0x8B,0x94,0x24,0x68,0x0B,0x00,0x00,0x89,0x94,0x24,0x58,0x0B,0x00,0x00,0x8B,0x94,0x24,0x60,0x0B,0x00,0x00,0x89,0x94,0x24,0x50,0x0B,0x00,0x00,0x8B,0x94,0x24,0x58,0x0B,0x00,0x00,0x89,0x94,0x24,0x48,0x0B,0x00,0x00,0x8B,0x94,0x24,0x50,0x0B,0x00,0x00,0x0B,0x94,0x24,0x48,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x40,0x0B,0x00,0x00,0x8B,0x84,0x24,0x40,0x0B,0x00,0x00,0xE9,0x49,0x1E,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x30,0x0B,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x38,0x0B,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x28,0x0B,0x00,0x00,0x8B,0x94,0x24,0x30,0x0B,0x00,0x00,0x89,0x94,0x24,0x18,0x0B,0x00,0x00,0x8B,0x94,0x24,0x28,0x0B,0x00,0x00,0x89,0x94,0x24,0x10,0x0B,0x00,0x00,0x8B,0x94,0x24,0x18,0x0B,0x00,0x00,0x89,0x94,0x24,0x08,0x0B,0x00,0x00,0x8B,0x94,0x24,0x10,0x0B,0x00,0x00,0x89,0x94,0x24,0x00,0x0B,0x00,0x00,0x8B,0x94,0x24,0x08,0x0B,0x00,0x00,0x0B,0x94,0x24,0x00,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xF8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xF8,0x0A,0x00,0x00,0x89,0x94,0x24,0x20,0x0B,0x00,0x00,0x8B,0x94,0x24,0x38,0x0B,0x00,0x00,0x89,0x94,0x24,0xF0,0x0A,0x00,0x00,0x8B,0x94,0x24,0x20,0x0B,0x00,0x00,0x89,0x94,0x24,0xE8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xF0,0x0A,0x00,0x00,0x89,0x94,0x24,0xE0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xE8,0x0A,0x00,0x00,0x89,0x94,0x24,0xD8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xE0,0x0A,0x00,0x00,0x23,0x94,0x24,0xD8,0x0A,0x00,0x00,0x89,0x94,0x24,0xD0,0x0A,0x00,0x00,0x8B,0x84,0x24,0xD0,0x0A,0x00,0x00,0xE9,0x66,0x1D,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xC0,0x0A,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xC8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xC8,0x0A,0x00,0x00,0x89,0x94,0x24,0xB8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xC0,0x0A,0x00,0x00,0x89,0x94,0x24,0xB0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xB8,0x0A,0x00,0x00,0x89,0x94,0x24,0xA8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xB0,0x0A,0x00,0x00,0x89,0x94,0x24,0xA0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xA8,0x0A,0x00,0x00,0x0B,0x94,0x24,0xA0,0x0A,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x98,0x0A,0x00,0x00,0x8B,0x84,0x24,0x98,0x0A,0x00,0x00,0xE9,0xEC,0x1C,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x90,0x0A,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x88,0x0A,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x80,0x0A,0x00,0x00,0x8B,0x94,0x24,0x90,0x0A,0x00,0x00,0x89,0x94,0x24,0x68,0x0A,0x00,0x00,0x8B,0x94,0x24,0x68,0x0A,0x00,0x00,0x89,0x94,0x24,0x60,0x0A,0x00,0x00,0x8B,0x94,0x24,0x60,0x0A,0x00,0x00,0x89,0x94,0x24,0x58,0x0A,0x00,0x00,0x8B,0x94,0x24,0x58,0x0A,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x50,0x0A,0x00,0x00,0x8B,0x94,0x24,0x50,0x0A,0x00,0x00,0x89,0x94,0x24,0x78,0x0A,0x00,0x00,0x8B,0x94,0x24,0x88,0x0A,0x00,0x00,0x89,0x94,0x24,0x48,0x0A,0x00,0x00,0x8B,0x94,0x24,0x80,0x0A,0x00,0x00,0x89,0x94,0x24,0x40,0x0A,0x00,0x00,0x8B,0x94,0x24,0x48,0x0A,0x00,0x00,0x89,0x94,0x24,0x38,0x0A,0x00,0x00,0x8B,0x94,0x24,0x40,0x0A,0x00,0x00,0x89,0x94,0x24,0x30,0x0A,0x00,0x00,0x8B,0x94,0x24,0x38,0x0A,0x00,0x00,0x33,0x94,0x24,0x30,0x0A,0x00,0x00,0x89,0x94,0x24,0x28,0x0A,0x00,0x00,0x8B,0x94,0x24,0x28,0x0A,0x00,0x00,0x89,0x94,0x24,0x70,0x0A,0x00,0x00,0x8B,0x94,0x24,0x78,0x0A,0x00,0x00,0x89,0x94,0x24,0x20,0x0A,0x00,0x00,0x8B,0x94,0x24,0x70,0x0A,0x00,0x00,0x89,0x94,0x24,0x18,0x0A,0x00,0x00,0x8B,0x94,0x24,0x20,0x0A,0x00,0x00,0x89,0x94,0x24,0x10,0x0A,0x00,0x00,0x8B,0x94,0x24,0x18,0x0A,0x00,0x00,0x89,0x94,0x24,0x08,0x0A,0x00,0x00,0x8B,0x94,0x24,0x10,0x0A,0x00,0x00,0x23,0x94,0x24,0x08,0x0A,0x00,0x00,0x89,0x94,0x24,0x00,0x0A,0x00,0x00,0x8B,0x84,0x24,0x00,0x0A,0x00,0x00,0xE9,0xC3,0x1B,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xF8,0x09,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xF0,0x09,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE8,0x09,0x00,0x00,0x8B,0x94,0x24,0xF0,0x09,0x00,0x00,0x89,0x94,0x24,0xD8,0x09,0x00,0x00,0x8B,0x94,0x24,0xE8,0x09,0x00,0x00,0x89,0x94,0x24,0xD0,0x09,0x00,0x00,0x8B,0x94,0x24,0xD8,0x09,0x00,0x00,0x89,0x94,0x24,0xC8,0x09,0x00,0x00,0x8B,0x94,0x24,0xD0,0x09,0x00,0x00,0x89,0x94,0x24,0xC0,0x09,0x00,0x00,0x8B,0x94,0x24,0xC8,0x09,0x00,0x00,0x23,0x94,0x24,0xC0,0x09,0x00,0x00,0x89,0x94,0x24,0xB8,0x09,0x00,0x00,0x8B,0x94,0x24,0xB8,0x09,0x00,0x00,0x89,0x94,0x24,0xE0,0x09,0x00,0x00,0x8B,0x94,0x24,0xF8,0x09,0x00,0x00,0x89,0x94,0x24,0xB0,0x09,0x00,0x00,0x8B,0x94,0x24,0xE0,0x09,0x00,0x00,0x89,0x94,0x24,0xA8,0x09,0x00,0x00,0x8B,0x94,0x24,0xB0,0x09,0x00,0x00,0x89,0x94,0x24,0xA0,0x09,0x00,0x00,0x8B,0x94,0x24,0xA8,0x09,0x00,0x00,0x89,0x94,0x24,0x98,0x09,0x00,0x00,0x8B,0x94,0x24,0xA0,0x09,0x00,0x00,0x0B,0x94,0x24,0x98,0x09,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x90,0x09,0x00,0x00,0x8B,0x84,0x24,0x90,0x09,0x00,0x00,0xE9,0xE0,0x1A,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x88,0x09,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x80,0x09,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x70,0x09,0x00,0x00,0x8B,0x94,0x24,0x88,0x09,0x00,0x00,0x89,0x94,0x24,0x60,0x09,0x00,0x00,0x8B,0x94,0x24,0x60,0x09,0x00,0x00,0x89,0x94,0x24,0x58,0x09,0x00,0x00,0x8B,0x94,0x24,0x58,0x09,0x00,0x00,0x89,0x94,0x24,0x50,0x09,0x00,0x00,0x8B,0x94,0x24,0x50,0x09,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x48,0x09,0x00,0x00,0x8B,0x94,0x24,0x48,0x09,0x00,0x00,0x89,0x94,0x24,0x78,0x09,0x00,0x00,0x8B,0x94,0x24,0x78,0x09,0x00,0x00,0x89,0x94,0x24,0x40,0x09,0x00,0x00,0x8B,0x94,0x24,0x80,0x09,0x00,0x00,0x89,0x94,0x24,0x38,0x09,0x00,0x00,0x8B,0x94,0x24,0x40,0x09,0x00,0x00,0x89,0x94,0x24,0x30,0x09,0x00,0x00,0x8B,0x94,0x24,0x38,0x09,0x00,0x00,0x89,0x94,0x24,0x28,0x09,0x00,0x00,0x8B,0x94,0x24,0x30,0x09,0x00,0x00,0x23,0x94,0x24,0x28,0x09,0x00,0x00,0x89,0x94,0x24,0x20,0x09,0x00,0x00,0x8B,0x94,0x24,0x20,0x09,0x00,0x00,0x89,0x94,0x24,0x68,0x09,0x00,0x00,0x8B,0x94,0x24,0x68,0x09,0x00,0x00,0x89,0x94,0x24,0x18,0x09,0x00,0x00,0x8B,0x94,0x24,0x70,0x09,0x00,0x00,0x89,0x94,0x24,0x10,0x09,0x00,0x00,0x8B,0x94,0x24,0x18,0x09,0x00,0x00,0x89,0x94,0x24,0x08,0x09,0x00,0x00,0x8B,0x94,0x24,0x10,0x09,0x00,0x00,0x89,0x94,0x24,0x00,0x09,0x00,0x00,0x8B,0x94,0x24,0x08,0x09,0x00,0x00,0x23,0x94,0x24,0x00,0x09,0x00,0x00,0x89,0x94,0x24,0xF8,0x08,0x00,0x00,0x8B,0x84,0x24,0xF8,0x08,0x00,0x00,0xE9,0xB7,0x19,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xF0,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xE8,0x08,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x08,0x00,0x00,0x8B,0x94,0x24,0xE8,0x08,0x00,0x00,0x89,0x94,0x24,0xD0,0x08,0x00,0x00,0x8B,0x94,0x24,0xE0,0x08,0x00,0x00,0x89,0x94,0x24,0xC8,0x08,0x00,0x00,0x8B,0x94,0x24,0xD0,0x08,0x00,0x00,0x89,0x94,0x24,0xC0,0x08,0x00,0x00,0x8B,0x94,0x24,0xC8,0x08,0x00,0x00,0x89,0x94,0x24,0xB8,0x08,0x00,0x00,0x8B,0x94,0x24,0xC0,0x08,0x00,0x00,0x33,0x94,0x24,0xB8,0x08,0x00,0x00,0x89,0x94,0x24,0xB0,0x08,0x00,0x00,0x8B,0x94,0x24,0xB0,0x08,0x00,0x00,0x89,0x94,0x24,0xD8,0x08,0x00,0x00,0x8B,0x94,0x24,0xF0,0x08,0x00,0x00,0x89,0x94,0x24,0xA8,0x08,0x00,0x00,0x8B,0x94,0x24,0xD8,0x08,0x00,0x00,0x89,0x94,0x24,0xA0,0x08,0x00,0x00,0x8B,0x94,0x24,0xA8,0x08,0x00,0x00,0x89,0x94,0x24,0x98,0x08,0x00,0x00,0x8B,0x94,0x24,0xA0,0x08,0x00,0x00,0x89,0x94,0x24,0x90,0x08,0x00,0x00,0x8B,0x94,0x24,0x98,0x08,0x00,0x00,0x0B,0x94,0x24,0x90,0x08,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x88,0x08,0x00,0x00,0x8B,0x84,0x24,0x88,0x08,0x00,0x00,0xE9,0xD4,0x18,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x78,0x08,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x80,0x08,0x00,0x00,0x8B,0x94,0x24,0x78,0x08,0x00,0x00,0x89,0x94,0x24,0x68,0x08,0x00,0x00,0x8B,0x94,0x24,0x68,0x08,0x00,0x00,0x89,0x94,0x24,0x60,0x08,0x00,0x00,0x8B,0x94,0x24,0x60,0x08,0x00,0x00,0x89,0x94,0x24,0x58,0x08,0x00,0x00,0x8B,0x94,0x24,0x58,0x08,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x50,0x08,0x00,0x00,0x8B,0x94,0x24,0x50,0x08,0x00,0x00,0x89,0x94,0x24,0x70,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x08,0x00,0x00,0x89,0x94,0x24,0x48,0x08,0x00,0x00,0x8B,0x94,0x24,0x70,0x08,0x00,0x00,0x89,0x94,0x24,0x40,0x08,0x00,0x00,0x8B,0x94,0x24,0x48,0x08,0x00,0x00,0x89,0x94,0x24,0x38,0x08,0x00,0x00,0x8B,0x94,0x24,0x40,0x08,0x00,0x00,0x89,0x94,0x24,0x30,0x08,0x00,0x00,0x8B,0x94,0x24,0x38,0x08,0x00,0x00,0x23,0x94,0x24,0x30,0x08,0x00,0x00,0x89,0x94,0x24,0x28,0x08,0x00,0x00,0x8B,0x84,0x24,0x28,0x08,0x00,0x00,0xE9,0x14,0x18,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x20,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x18,0x08,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x08,0x00,0x00,0x8B,0x94,0x24,0x20,0x08,0x00,0x00,0x89,0x94,0x24,0xE8,0x07,0x00,0x00,0x8B,0x94,0x24,0xE8,0x07,0x00,0x00,0x89,0x94,0x24,0xE0,0x07,0x00,0x00,0x8B,0x94,0x24,0xE0,0x07,0x00,0x00,0x89,0x94,0x24,0xD8,0x07,0x00,0x00,0x8B,0x94,0x24,0xD8,0x07,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xD0,0x07,0x00,0x00,0x8B,0x94,0x24,0xD0,0x07,0x00,0x00,0x89,0x94,0x24,0x10,0x08,0x00,0x00,0xC7,0x84,0x24,0xC8,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xC8,0x07,0x00,0x00,0x89,0x94,0x24,0x08,0x08,0x00,0x00,0x8B,0x94,0x24,0x18,0x08,0x00,0x00,0x89,0x94,0x24,0xC0,0x07,0x00,0x00,0x8B,0x94,0x24,0x08,0x08,0x00,0x00,0x89,0x94,0x24,0xB8,0x07,0x00,0x00,0x8B,0x94,0x24,0xC0,0x07,0x00,0x00,0x89,0x94,0x24,0xB0,0x07,0x00,0x00,0x8B,0x94,0x24,0xB8,0x07,0x00,0x00,0x89,0x94,0x24,0xA8,0x07,0x00,0x00,0x8B,0x94,0x24,0xB0,0x07,0x00,0x00,0x33,0x94,0x24,0xA8,0x07,0x00,0x00,0x89,0x94,0x24,0xA0,0x07,0x00,0x00,0x8B,0x94,0x24,0xA0,0x07,0x00,0x00,0x89,0x94,0x24,0xF8,0x07,0x00,0x00,0x8B,0x94,0x24,0xF8,0x07,0x00,0x00,0x89,0x94,0x24,0x98,0x07,0x00,0x00,0x8B,0x94,0x24,0x00,0x08,0x00,0x00,0x89,0x94,0x24,0x90,0x07,0x00,0x00,0x8B,0x94,0x24,0x98,0x07,0x00,0x00,0x89,0x94,0x24,0x88,0x07,0x00,0x00,0x8B,0x94,0x24,0x90,0x07,0x00,0x00,0x89,0x94,0x24,0x80,0x07,0x00,0x00,0x8B,0x94,0x24,0x88,0x07,0x00,0x00,0x0B,0x94,0x24,0x80,0x07,0x00,0x00,0x89,0x94,0x24,0x78,0x07,0x00,0x00,0x8B,0x94,0x24,0x78,0x07,0x00,0x00,0x89,0x94,0x24,0xF0,0x07,0x00,0x00,0x8B,0x94,0x24,0x10,0x08,0x00,0x00,0x89,0x94,0x24,0x70,0x07,0x00,0x00,0x8B,0x94,0x24,0xF0,0x07,0x00,0x00,0x89,0x94,0x24,0x68,0x07,0x00,0x00,0x8B,0x94,0x24,0x70,0x07,0x00,0x00,0x89,0x94,0x24,0x60,0x07,0x00,0x00,0x8B,0x94,0x24,0x68,0x07,0x00,0x00,0x89,0x94,0x24,0x58,0x07,0x00,0x00,0x8B,0x94,0x24,0x60,0x07,0x00,0x00,0x23,0x94,0x24,0x58,0x07,0x00,0x00,0x89,0x94,0x24,0x50,0x07,0x00,0x00,0x8B,0x84,0x24,0x50,0x07,0x00,0x00,0xE9,0x77,0x16,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x40,0x07,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x48,0x07,0x00,0x00,0x8B,0x94,0x24,0x40,0x07,0x00,0x00,0x89,0x94,0x24,0x30,0x07,0x00,0x00,0x8B,0x94,0x24,0x30,0x07,0x00,0x00,0x89,0x94,0x24,0x28,0x07,0x00,0x00,0x8B,0x94,0x24,0x28,0x07,0x00,0x00,0x89,0x94,0x24,0x20,0x07,0x00,0x00,0x8B,0x94,0x24,0x20,0x07,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x18,0x07,0x00,0x00,0x8B,0x94,0x24,0x18,0x07,0x00,0x00,0x89,0x94,0x24,0x38,0x07,0x00,0x00,0x8B,0x94,0x24,0x48,0x07,0x00,0x00,0x89,0x94,0x24,0x10,0x07,0x00,0x00,0x8B,0x94,0x24,0x38,0x07,0x00,0x00,0x89,0x94,0x24,0x08,0x07,0x00,0x00,0x8B,0x94,0x24,0x10,0x07,0x00,0x00,0x89,0x94,0x24,0x00,0x07,0x00,0x00,0x8B,0x94,0x24,0x08,0x07,0x00,0x00,0x89,0x94,0x24,0xF8,0x06,0x00,0x00,0x8B,0x94,0x24,0x00,0x07,0x00,0x00,0x23,0x94,0x24,0xF8,0x06,0x00,0x00,0x89,0x94,0x24,0xF0,0x06,0x00,0x00,0x8B,0x84,0x24,0xF0,0x06,0x00,0x00,0xE9,0xB7,0x15,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xE8,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x06,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xD8,0x06,0x00,0x00,0x8B,0x94,0x24,0xE8,0x06,0x00,0x00,0x89,0x94,0x24,0xB0,0x06,0x00,0x00,0x8B,0x94,0x24,0xB0,0x06,0x00,0x00,0x89,0x94,0x24,0xA8,0x06,0x00,0x00,0x8B,0x94,0x24,0xA8,0x06,0x00,0x00,0x89,0x94,0x24,0xA0,0x06,0x00,0x00,0x8B,0x94,0x24,0xA0,0x06,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x98,0x06,0x00,0x00,0x8B,0x94,0x24,0x98,0x06,0x00,0x00,0x89,0x94,0x24,0xD0,0x06,0x00,0x00,0xC7,0x84,0x24,0x90,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x90,0x06,0x00,0x00,0x89,0x94,0x24,0xC8,0x06,0x00,0x00,0x8B,0x94,0x24,0xD8,0x06,0x00,0x00,0x89,0x94,0x24,0x88,0x06,0x00,0x00,0x8B,0x94,0x24,0xC8,0x06,0x00,0x00,0x89,0x94,0x24,0x80,0x06,0x00,0x00,0x8B,0x94,0x24,0x88,0x06,0x00,0x00,0x89,0x94,0x24,0x78,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x06,0x00,0x00,0x89,0x94,0x24,0x70,0x06,0x00,0x00,0x8B,0x94,0x24,0x78,0x06,0x00,0x00,0x33,0x94,0x24,0x70,0x06,0x00,0x00,0x89,0x94,0x24,0x68,0x06,0x00,0x00,0x8B,0x94,0x24,0x68,0x06,0x00,0x00,0x89,0x94,0x24,0xC0,0x06,0x00,0x00,0x8B,0x94,0x24,0xE0,0x06,0x00,0x00,0x89,0x94,0x24,0x60,0x06,0x00,0x00,0x8B,0x94,0x24,0xC0,0x06,0x00,0x00,0x89,0x94,0x24,0x58,0x06,0x00,0x00,0x8B,0x94,0x24,0x60,0x06,0x00,0x00,0x89,0x94,0x24,0x50,0x06,0x00,0x00,0x8B,0x94,0x24,0x58,0x06,0x00,0x00,0x89,0x94,0x24,0x48,0x06,0x00,0x00,0x8B,0x94,0x24,0x50,0x06,0x00,0x00,0x0B,0x94,0x24,0x48,0x06,0x00,0x00,0x89,0x94,0x24,0x40,0x06,0x00,0x00,0x8B,0x94,0x24,0x40,0x06,0x00,0x00,0x89,0x94,0x24,0xB8,0x06,0x00,0x00,0x8B,0x94,0x24,0xD0,0x06,0x00,0x00,0x89,0x94,0x24,0x38,0x06,0x00,0x00,0x8B,0x94,0x24,0xB8,0x06,0x00,0x00,0x89,0x94,0x24,0x30,0x06,0x00,0x00,0x8B,0x94,0x24,0x38,0x06,0x00,0x00,0x89,0x94,0x24,0x28,0x06,0x00,0x00,0x8B,0x94,0x24,0x30,0x06,0x00,0x00,0x89,0x94,0x24,0x20,0x06,0x00,0x00,0x8B,0x94,0x24,0x28,0x06,0x00,0x00,0x23,0x94,0x24,0x20,0x06,0x00,0x00,0x89,0x94,0x24,0x18,0x06,0x00,0x00,0x8B,0x84,0x24,0x18,0x06,0x00,0x00,0xE9,0x1A,0x14,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x10,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x06,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x06,0x00,0x00,0x8B,0x94,0x24,0x10,0x06,0x00,0x00,0x89,0x94,0x24,0xE8,0x05,0x00,0x00,0x8B,0x94,0x24,0xE8,0x05,0x00,0x00,0x89,0x94,0x24,0xE0,0x05,0x00,0x00,0x8B,0x94,0x24,0xE0,0x05,0x00,0x00,0x89,0x94,0x24,0xD8,0x05,0x00,0x00,0x8B,0x94,0x24,0xD8,0x05,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xD0,0x05,0x00,0x00,0x8B,0x94,0x24,0xD0,0x05,0x00,0x00,0x89,0x94,0x24,0xF8,0x05,0x00,0x00,0x8B,0x94,0x24,0x08,0x06,0x00,0x00,0x89,0x94,0x24,0xC8,0x05,0x00,0x00,0x8B,0x94,0x24,0x00,0x06,0x00,0x00,0x89,0x94,0x24,0xC0,0x05,0x00,0x00,0x8B,0x94,0x24,0xC8,0x05,0x00,0x00,0x89,0x94,0x24,0xB8,0x05,0x00,0x00,0x8B,0x94,0x24,0xC0,0x05,0x00,0x00,0x89,0x94,0x24,0xB0,0x05,0x00,0x00,0x8B,0x94,0x24,0xB8,0x05,0x00,0x00,0x0B,0x94,0x24,0xB0,0x05,0x00,0x00,0x89,0x94,0x24,0xA8,0x05,0x00,0x00,0x8B,0x94,0x24,0xA8,0x05,0x00,0x00,0x89,0x94,0x24,0xF0,0x05,0x00,0x00,0x8B,0x94,0x24,0xF8,0x05,0x00,0x00,0x89,0x94,0x24,0xA0,0x05,0x00,0x00,0x8B,0x94,0x24,0xF0,0x05,0x00,0x00,0x89,0x94,0x24,0x98,0x05,0x00,0x00,0x8B,0x94,0x24,0xA0,0x05,0x00,0x00,0x89,0x94,0x24,0x90,0x05,0x00,0x00,0x8B,0x94,0x24,0x98,0x05,0x00,0x00,0x89,0x94,0x24,0x88,0x05,0x00,0x00,0x8B,0x94,0x24,0x90,0x05,0x00,0x00,0x23,0x94,0x24,0x88,0x05,0x00,0x00,0x89,0x94,0x24,0x80,0x05,0x00,0x00,0x8B,0x84,0x24,0x80,0x05,0x00,0x00,0xE9,0xF1,0x12,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x78,0x05,0x00,0x00,0x8B,0x94,0x24,0x78,0x05,0x00,0x00,0x89,0x94,0x24,0x70,0x05,0x00,0x00,0x8B,0x94,0x24,0x70,0x05,0x00,0x00,0x89,0x94,0x24,0x68,0x05,0x00,0x00,0x8B,0x94,0x24,0x68,0x05,0x00,0x00,0x89,0x94,0x24,0x60,0x05,0x00,0x00,0x8B,0x94,0x24,0x60,0x05,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x58,0x05,0x00,0x00,0x8B,0x84,0x24,0x58,0x05,0x00,0x00,0xE9,0x9A,0x12,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x50,0x05,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x48,0x05,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x40,0x05,0x00,0x00,0x8B,0x94,0x24,0x48,0x05,0x00,0x00,0x89,0x94,0x24,0x30,0x05,0x00,0x00,0x8B,0x94,0x24,0x40,0x05,0x00,0x00,0x89,0x94,0x24,0x28,0x05,0x00,0x00,0x8B,0x94,0x24,0x30,0x05,0x00,0x00,0x89,0x94,0x24,0x20,0x05,0x00,0x00,0x8B,0x94,0x24,0x28,0x05,0x00,0x00,0x89,0x94,0x24,0x18,0x05,0x00,0x00,0x8B,0x94,0x24,0x20,0x05,0x00,0x00,0x0B,0x94,0x24,0x18,0x05,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x10,0x05,0x00,0x00,0x8B,0x94,0x24,0x10,0x05,0x00,0x00,0x89,0x94,0x24,0x38,0x05,0x00,0x00,0x8B,0x94,0x24,0x50,0x05,0x00,0x00,0x89,0x94,0x24,0x08,0x05,0x00,0x00,0x8B,0x94,0x24,0x38,0x05,0x00,0x00,0x89,0x94,0x24,0x00,0x05,0x00,0x00,0x8B,0x94,0x24,0x08,0x05,0x00,0x00,0x89,0x94,0x24,0xF8,0x04,0x00,0x00,0x8B,0x94,0x24,0x00,0x05,0x00,0x00,0x89,0x94,0x24,0xF0,0x04,0x00,0x00,0x8B,0x94,0x24,0xF8,0x04,0x00,0x00,0x23,0x94,0x24,0xF0,0x04,0x00,0x00,0x89,0x94,0x24,0xE8,0x04,0x00,0x00,0x8B,0x84,0x24,0xE8,0x04,0x00,0x00,0xE9,0xB7,0x11,0x00,0x00,0x8B,0x84,0x24,0x80,0x0C,0x00,0x00,0x89,0x84,0x24,0xD8,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x04,0x00,0x00,0x8B,0x94,0x24,0xE0,0x04,0x00,0x00,0x89,0x94,0x24,0xD0,0x04,0x00,0x00,0x8B,0x94,0x24,0xD8,0x04,0x00,0x00,0x89,0x94,0x24,0xC8,0x04,0x00,0x00,0x8B,0x94,0x24,0xD0,0x04,0x00,0x00,0x89,0x94,0x24,0xC0,0x04,0x00,0x00,0x8B,0x94,0x24,0xC8,0x04,0x00,0x00,0x89,0x94,0x24,0xB8,0x04,0x00,0x00,0x8B,0x94,0x24,0xC0,0x04,0x00,0x00,0x0B,0x94,0x24,0xB8,0x04,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xB0,0x04,0x00,0x00,0x8B,0x84,0x24,0xB0,0x04,0x00,0x00,0xE9,0x3D,0x11,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xA0,0x04,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xA8,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x98,0x04,0x00,0x00,0x8B,0x94,0x24,0xA8,0x04,0x00,0x00,0x89,0x94,0x24,0x80,0x04,0x00,0x00,0x8B,0x94,0x24,0x80,0x04,0x00,0x00,0x89,0x94,0x24,0x78,0x04,0x00,0x00,0x8B,0x94,0x24,0x78,0x04,0x00,0x00,0x89,0x94,0x24,0x70,0x04,0x00,0x00,0x8B,0x94,0x24,0x70,0x04,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x68,0x04,0x00,0x00,0x8B,0x94,0x24,0x68,0x04,0x00,0x00,0x89,0x94,0x24,0x90,0x04,0x00,0x00,0x8B,0x94,0x24,0xA0,0x04,0x00,0x00,0x89,0x94,0x24,0x60,0x04,0x00,0x00,0x8B,0x94,0x24,0x98,0x04,0x00,0x00,0x89,0x94,0x24,0x58,0x04,0x00,0x00,0x8B,0x94,0x24,0x60,0x04,0x00,0x00,0x89,0x94,0x24,0x50,0x04,0x00,0x00,0x8B,0x94,0x24,0x58,0x04,0x00,0x00,0x89,0x94,0x24,0x48,0x04,0x00,0x00,0x8B,0x94,0x24,0x50,0x04,0x00,0x00,0x33,0x94,0x24,0x48,0x04,0x00,0x00,0x89,0x94,0x24,0x40,0x04,0x00,0x00,0x8B,0x94,0x24,0x40,0x04,0x00,0x00,0x89,0x94,0x24,0x88,0x04,0x00,0x00,0x8B,0x94,0x24,0x90,0x04,0x00,0x00,0x89,0x94,0x24,0x38,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x04,0x00,0x00,0x89,0x94,0x24,0x30,0x04,0x00,0x00,0x8B,0x94,0x24,0x38,0x04,0x00,0x00,0x89,0x94,0x24,0x28,0x04,0x00,0x00,0x8B,0x94,0x24,0x30,0x04,0x00,0x00,0x89,0x94,0x24,0x20,0x04,0x00,0x00,0x8B,0x94,0x24,0x28,0x04,0x00,0x00,0x23,0x94,0x24,0x20,0x04,0x00,0x00,0x89,0x94,0x24,0x18,0x04,0x00,0x00,0x8B,0x84,0x24,0x18,0x04,0x00,0x00,0xE9,0x14,0x10,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x08,0x04,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x10,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x04,0x00,0x00,0x8B,0x94,0x24,0x08,0x04,0x00,0x00,0x89,0x94,0x24,0xF0,0x03,0x00,0x00,0x8B,0x94,0x24,0x00,0x04,0x00,0x00,0x89,0x94,0x24,0xE8,0x03,0x00,0x00,0x8B,0x94,0x24,0xF0,0x03,0x00,0x00,0x89,0x94,0x24,0xE0,0x03,0x00,0x00,0x8B,0x94,0x24,0xE8,0x03,0x00,0x00,0x89,0x94,0x24,0xD8,0x03,0x00,0x00,0x8B,0x94,0x24,0xE0,0x03,0x00,0x00,0x23,0x94,0x24,0xD8,0x03,0x00,0x00,0x89,0x94,0x24,0xD0,0x03,0x00,0x00,0x8B,0x94,0x24,0xD0,0x03,0x00,0x00,0x89,0x94,0x24,0xF8,0x03,0x00,0x00,0x8B,0x94,0x24,0x10,0x04,0x00,0x00,0x89,0x94,0x24,0xC8,0x03,0x00,0x00,0x8B,0x94,0x24,0xF8,0x03,0x00,0x00,0x89,0x94,0x24,0xC0,0x03,0x00,0x00,0x8B,0x94,0x24,0xC8,0x03,0x00,0x00,0x89,0x94,0x24,0xB8,0x03,0x00,0x00,0x8B,0x94,0x24,0xC0,0x03,0x00,0x00,0x89,0x94,0x24,0xB0,0x03,0x00,0x00,0x8B,0x94,0x24,0xB8,0x03,0x00,0x00,0x0B,0x94,0x24,0xB0,0x03,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xA8,0x03,0x00,0x00,0x8B,0x84,0x24,0xA8,0x03,0x00,0x00,0xE9,0x31,0x0F,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x98,0x03,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x90,0x03,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xA0,0x03,0x00,0x00,0x8B,0x94,0x24,0xA0,0x03,0x00,0x00,0x89,0x94,0x24,0x78,0x03,0x00,0x00,0x8B,0x94,0x24,0x78,0x03,0x00,0x00,0x89,0x94,0x24,0x70,0x03,0x00,0x00,0x8B,0x94,0x24,0x70,0x03,0x00,0x00,0x89,0x94,0x24,0x68,0x03,0x00,0x00,0x8B,0x94,0x24,0x68,0x03,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x60,0x03,0x00,0x00,0x8B,0x94,0x24,0x60,0x03,0x00,0x00,0x89,0x94,0x24,0x88,0x03,0x00,0x00,0x8B,0x94,0x24,0x98,0x03,0x00,0x00,0x89,0x94,0x24,0x58,0x03,0x00,0x00,0x8B,0x94,0x24,0x90,0x03,0x00,0x00,0x89,0x94,0x24,0x50,0x03,0x00,0x00,0x8B,0x94,0x24,0x58,0x03,0x00,0x00,0x89,0x94,0x24,0x48,0x03,0x00,0x00,0x8B,0x94,0x24,0x50,0x03,0x00,0x00,0x89,0x94,0x24,0x40,0x03,0x00,0x00,0x8B,0x94,0x24,0x48,0x03,0x00,0x00,0x33,0x94,0x24,0x40,0x03,0x00,0x00,0x89,0x94,0x24,0x38,0x03,0x00,0x00,0x8B,0x94,0x24,0x38,0x03,0x00,0x00,0x89,0x94,0x24,0x80,0x03,0x00,0x00,0x8B,0x94,0x24,0x88,0x03,0x00,0x00,0x89,0x94,0x24,0x30,0x03,0x00,0x00,0x8B,0x94,0x24,0x80,0x03,0x00,0x00,0x89,0x94,0x24,0x28,0x03,0x00,0x00,0x8B,0x94,0x24,0x30,0x03,0x00,0x00,0x89,0x94,0x24,0x20,0x03,0x00,0x00,0x8B,0x94,0x24,0x28,0x03,0x00,0x00,0x89,0x94,0x24,0x18,0x03,0x00,0x00,0x8B,0x94,0x24,0x20,0x03,0x00,0x00,0x23,0x94,0x24,0x18,0x03,0x00,0x00,0x89,0x94,0x24,0x10,0x03,0x00,0x00,0x8B,0x84,0x24,0x10,0x03,0x00,0x00,0xE9,0x08,0x0E,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x00,0x03,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xF8,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x03,0x00,0x00,0x8B,0x94,0x24,0x00,0x03,0x00,0x00,0x89,0x94,0x24,0xE8,0x02,0x00,0x00,0x8B,0x94,0x24,0xF8,0x02,0x00,0x00,0x89,0x94,0x24,0xE0,0x02,0x00,0x00,0x8B,0x94,0x24,0xE8,0x02,0x00,0x00,0x89,0x94,0x24,0xD8,0x02,0x00,0x00,0x8B,0x94,0x24,0xE0,0x02,0x00,0x00,0x89,0x94,0x24,0xD0,0x02,0x00,0x00,0x8B,0x94,0x24,0xD8,0x02,0x00,0x00,0x23,0x94,0x24,0xD0,0x02,0x00,0x00,0x89,0x94,0x24,0xC8,0x02,0x00,0x00,0x8B,0x94,0x24,0xC8,0x02,0x00,0x00,0x89,0x94,0x24,0xF0,0x02,0x00,0x00,0x8B,0x94,0x24,0x08,0x03,0x00,0x00,0x89,0x94,0x24,0xC0,0x02,0x00,0x00,0x8B,0x94,0x24,0xF0,0x02,0x00,0x00,0x89,0x94,0x24,0xB8,0x02,0x00,0x00,0x8B,0x94,0x24,0xC0,0x02,0x00,0x00,0x89,0x94,0x24,0xB0,0x02,0x00,0x00,0x8B,0x94,0x24,0xB8,0x02,0x00,0x00,0x89,0x94,0x24,0xA8,0x02,0x00,0x00,0x8B,0x94,0x24,0xB0,0x02,0x00,0x00,0x0B,0x94,0x24,0xA8,0x02,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xA0,0x02,0x00,0x00,0x8B,0x84,0x24,0xA0,0x02,0x00,0x00,0xE9,0x25,0x0D,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x98,0x02,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x90,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x88,0x02,0x00,0x00,0x8B,0x94,0x24,0x90,0x02,0x00,0x00,0x89,0x94,0x24,0x70,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x02,0x00,0x00,0x89,0x94,0x24,0x68,0x02,0x00,0x00,0x8B,0x94,0x24,0x70,0x02,0x00,0x00,0x89,0x94,0x24,0x60,0x02,0x00,0x00,0x8B,0x94,0x24,0x68,0x02,0x00,0x00,0x89,0x94,0x24,0x58,0x02,0x00,0x00,0x8B,0x94,0x24,0x60,0x02,0x00,0x00,0x0B,0x94,0x24,0x58,0x02,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x50,0x02,0x00,0x00,0x8B,0x94,0x24,0x50,0x02,0x00,0x00,0x89,0x94,0x24,0x80,0x02,0x00,0x00,0x8B,0x94,0x24,0x90,0x02,0x00,0x00,0x89,0x94,0x24,0x48,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x02,0x00,0x00,0x89,0x94,0x24,0x40,0x02,0x00,0x00,0x8B,0x94,0x24,0x48,0x02,0x00,0x00,0x89,0x94,0x24,0x38,0x02,0x00,0x00,0x8B,0x94,0x24,0x40,0x02,0x00,0x00,0x89,0x94,0x24,0x30,0x02,0x00,0x00,0x8B,0x94,0x24,0x38,0x02,0x00,0x00,0x33,0x94,0x24,0x30,0x02,0x00,0x00,0x89,0x94,0x24,0x28,0x02,0x00,0x00,0x8B,0x94,0x24,0x28,0x02,0x00,0x00,0x89,0x94,0x24,0x78,0x02,0x00,0x00,0x8B,0x94,0x24,0x98,0x02,0x00,0x00,0x89,0x94,0x24,0x20,0x02,0x00,0x00,0x8B,0x94,0x24,0x80,0x02,0x00,0x00,0x89,0x94,0x24,0x18,0x02,0x00,0x00,0x8B,0x94,0x24,0x78,0x02,0x00,0x00,0x89,0x94,0x24,0x10,0x02,0x00,0x00,0x8B,0x94,0x24,0x20,0x02,0x00,0x00,0x89,0x94,0x24,0x08,0x02,0x00,0x00,0x8B,0x94,0x24,0x18,0x02,0x00,0x00,0x89,0x94,0x24,0x00,0x02,0x00,0x00,0x8B,0x94,0x24,0x10,0x02,0x00,0x00,0x89,0x94,0x24,0xF8,0x01,0x00,0x00,0x8B,0x94,0x24,0x08,0x02,0x00,0x00,0x23,0x94,0x24,0x00,0x02,0x00,0x00,0x8B,0x8C,0x24,0x08,0x02,0x00,0x00,0xF7,0xD1,0x23,0x8C,0x24,0xF8,0x01,0x00,0x00,0x0B,0xD1,0x83,0xE2,0x01,0x89,0x94,0x24,0xF0,0x01,0x00,0x00,0x8B,0x84,0x24,0xF0,0x01,0x00,0x00,0xE9,0xB6,0x0B,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xE8,0x01,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xD8,0x01,0x00,0x00,0x8B,0x94,0x24,0xE0,0x01,0x00,0x00,0x89,0x94,0x24,0xB8,0x01,0x00,0x00,0x8B,0x94,0x24,0xD8,0x01,0x00,0x00,0x89,0x94,0x24,0xB0,0x01,0x00,0x00,0x8B,0x94,0x24,0xB8,0x01,0x00,0x00,0x89,0x94,0x24,0xA8,0x01,0x00,0x00,0x8B,0x94,0x24,0xB0,0x01,0x00,0x00,0x89,0x94,0x24,0xA0,0x01,0x00,0x00,0x8B,0x94,0x24,0xA8,0x01,0x00,0x00,0x0B,0x94,0x24,0xA0,0x01,0x00,0x00,0x89,0x94,0x24,0x98,0x01,0x00,0x00,0x8B,0x94,0x24,0x98,0x01,0x00,0x00,0x89,0x94,0x24,0xD0,0x01,0x00,0x00,0x8B,0x94,0x24,0xE0,0x01,0x00,0x00,0x89,0x94,0x24,0x90,0x01,0x00,0x00,0x8B,0x94,0x24,0xD8,0x01,0x00,0x00,0x89,0x94,0x24,0x88,0x01,0x00,0x00,0x8B,0x94,0x24,0x90,0x01,0x00,0x00,0x89,0x94,0x24,0x80,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x01,0x00,0x00,0x89,0x94,0x24,0x78,0x01,0x00,0x00,0x8B,0x94,0x24,0x80,0x01,0x00,0x00,0x23,0x94,0x24,0x78,0x01,0x00,0x00,0x89,0x94,0x24,0x70,0x01,0x00,0x00,0x8B,0x94,0x24,0x70,0x01,0x00,0x00,0x89,0x94,0x24,0xC8,0x01,0x00,0x00,0x8B,0x94,0x24,0xE8,0x01,0x00,0x00,0x89,0x94,0x24,0x68,0x01,0x00,0x00,0x8B,0x94,0x24,0xD0,0x01,0x00,0x00,0x89,0x94,0x24,0x60,0x01,0x00,0x00,0x8B,0x94,0x24,0xC8,0x01,0x00,0x00,0x89,0x94,0x24,0x58,0x01,0x00,0x00,0x8B,0x94,0x24,0x68,0x01,0x00,0x00,0x89,0x94,0x24,0x50,0x01,0x00,0x00,0x8B,0x94,0x24,0x60,0x01,0x00,0x00,0x89,0x94,0x24,0x48,0x01,0x00,0x00,0x8B,0x94,0x24,0x58,0x01,0x00,0x00,0x89,0x94,0x24,0x40,0x01,0x00,0x00,0x8B,0x94,0x24,0x50,0x01,0x00,0x00,0x23,0x94,0x24,0x48,0x01,0x00,0x00,0x8B,0x8C,0x24,0x50,0x01,0x00,0x00,0xF7,0xD1,0x23,0x8C,0x24,0x40,0x01,0x00,0x00,0x0B,0xD1,0x83,0xE2,0x01,0x89,0x94,0x24,0x38,0x01,0x00,0x00,0x8B,0x94,0x24,0x38,0x01,0x00,0x00,0x89,0x94,0x24,0xC0,0x01,0x00,0x00,0x8B,0x94,0x24,0xC0,0x01,0x00,0x00,0x89,0x94,0x24,0x30,0x01,0x00,0x00,0x8B,0x94,0x24,0x30,0x01,0x00,0x00,0x89,0x94,0x24,0x28,0x01,0x00,0x00,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x89,0x94,0x24,0x20,0x01,0x00,0x00,0x8B,0x94,0x24,0x20,0x01,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x18,0x01,0x00,0x00,0x8B,0x84,0x24,0x18,0x01,0x00,0x00,0xE9,0x01,0x0A,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x10,0x01,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x01,0x00,0x00,0x8B,0x94,0x24,0x10,0x01,0x00,0x00,0x89,0x94,0x24,0xE8,0x00,0x00,0x00,0x8B,0x94,0x24,0x08,0x01,0x00,0x00,0x89,0x94,0x24,0xE0,0x00,0x00,0x00,0x8B,0x94,0x24,0xE8,0x00,0x00,0x00,0x89,0x94,0x24,0xD8,0x00,0x00,0x00,0x8B,0x94,0x24,0xE0,0x00,0x00,0x00,0x89,0x94,0x24,0xD0,0x00,0x00,0x00,0x8B,0x94,0x24,0xD8,0x00,0x00,0x00,0x33,0x94,0x24,0xD0,0x00,0x00,0x00,0x89,0x94,0x24,0xC8,0x00,0x00,0x00,0x8B,0x94,0x24,0xC8,0x00,0x00,0x00,0x89,0x94,0x24,0xF8,0x00,0x00,0x00,0x8B,0x94,0x24,0x10,0x01,0x00,0x00,0x89,0x94,0x24,0xC0,0x00,0x00,0x00,0x8B,0x94,0x24,0x00,0x01,0x00,0x00,0x89,0x94,0x24,0xB8,0x00,0x00,0x00,0x8B,0x94,0x24,0xC0,0x00,0x00,0x00,0x89,0x94,0x24,0xB0,0x00,0x00,0x00,0x8B,0x94,0x24,0xB8,0x00,0x00,0x00,0x89,0x94,0x24,0xA8,0x00,0x00,0x00,0x8B,0x94,0x24,0xB0,0x00,0x00,0x00,0x33,0x94,0x24,0xA8,0x00,0x00,0x00,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x8B,0x94,0x24,0xA0,0x00,0x00,0x00,0x89,0x94,0x24,0xF0,0x00,0x00,0x00,0x8B,0x94,0x24,0xF8,0x00,0x00,0x00,0x89,0x94,0x24,0x98,0x00,0x00,0x00,0x8B,0x94,0x24,0xF0,0x00,0x00,0x00,0x89,0x94,0x24,0x90,0x00,0x00,0x00,0x8B,0x94,0x24,0x98,0x00,0x00,0x00,0x89,0x94,0x24,0x88,0x00,0x00,0x00,0x8B,0x94,0x24,0x90,0x00,0x00,0x00,0x89,0x94,0x24,0x80,0x00,0x00,0x00,0x8B,0x94,0x24,0x88,0x00,0x00,0x00,0x23,0x94,0x24,0x80,0x00,0x00,0x00,0x89,0x54,0x24,0x78,0x8B,0x44,0x24,0x78,0xE9,0xCE,0x08,0x00,0x00,0x8B,0x94,0x24,0x78,0x0C,0x00,0x00,0x89,0x54,0x24,0x60,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x54,0x24,0x70,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x54,0x24,0x68,0x8B,0x54,0x24,0x70,0x89,0x54,0x24,0x40,0x8B,0x54,0x24,0x68,0x89,0x54,0x24,0x38,0x8B,0x54,0x24,0x40,0x89,0x54,0x24,0x30,0x8B,0x54,0x24,0x38,0x89,0x54,0x24,0x28,0x33,0xD2,0x89,0x54,0x24,0x20,0x8B,0x54,0x24,0x30,0x33,0x54,0x24,0x28,0x48,0x8D,0x4C,0x24,0x20,0xE8,0xD0,0xE8,0xFD,0xFF,0x8B,0x4C,0x24,0x20,0x89,0x4C,0x24,0x58,0x8B,0x4C,0x24,0x70,0x8B,0x54,0x24,0x68,0xE8,0x33,0x15,0xFF,0xFF,0x89,0x44,0x24,0x50,0x8B,0x4C,0x24,0x60,0x8B,0x54,0x24,0x50,0xE8,0x22,0x15,0xFF,0xFF,0x89,0x44,0x24,0x48,0x8B,0x4C,0x24,0x58,0x8B,0x54,0x24,0x48,0xE8,0x31,0x15,0xFF,0xFF,0xE9,0x39,0x08,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x49,0x16,0xFF,0xFF,0xE9,0x19,0x08,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x31,0x16,0xFF,0xFF,0xE9,0xF9,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x19,0x16,0xFF,0xFF,0xE9,0xD9,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x01,0x16,0xFF,0xFF,0xE9,0xB9,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE9,0x15,0xFF,0xFF,0xE9,0x99,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD1,0x15,0xFF,0xFF,0xE9,0x79,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB9,0x15,0xFF,0xFF,0xE9,0x59,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA1,0x15,0xFF,0xFF,0xE9,0x39,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x89,0x15,0xFF,0xFF,0xE9,0x19,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x71,0x15,0xFF,0xFF,0xE9,0xF9,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x59,0x15,0xFF,0xFF,0xE9,0xD9,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x41,0x15,0xFF,0xFF,0xE9,0xB9,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x29,0x15,0xFF,0xFF,0xE9,0x99,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x11,0x15,0xFF,0xFF,0xE9,0x79,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF9,0x14,0xFF,0xFF,0xE9,0x59,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE1,0x14,0xFF,0xFF,0xE9,0x39,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC9,0x14,0xFF,0xFF,0xE9,0x19,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB1,0x14,0xFF,0xFF,0xE9,0xF9,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x99,0x14,0xFF,0xFF,0xE9,0xD9,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x81,0x14,0xFF,0xFF,0xE9,0xB9,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x69,0x14,0xFF,0xFF,0xE9,0x99,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x51,0x14,0xFF,0xFF,0xE9,0x79,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x39,0x14,0xFF,0xFF,0xE9,0x59,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x21,0x14,0xFF,0xFF,0xE9,0x39,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x09,0x14,0xFF,0xFF,0xE9,0x19,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF1,0x13,0xFF,0xFF,0xE9,0xF9,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD9,0x13,0xFF,0xFF,0xE9,0xD9,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC1,0x13,0xFF,0xFF,0xE9,0xB9,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA9,0x13,0xFF,0xFF,0xE9,0x99,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x91,0x13,0xFF,0xFF,0xE9,0x79,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x79,0x13,0xFF,0xFF,0xE9,0x59,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x61,0x13,0xFF,0xFF,0xE9,0x39,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x49,0x13,0xFF,0xFF,0xE9,0x19,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x31,0x13,0xFF,0xFF,0xE9,0xF9,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x19,0x13,0xFF,0xFF,0xE9,0xD9,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x01,0x13,0xFF,0xFF,0xE9,0xB9,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE9,0x12,0xFF,0xFF,0xE9,0x99,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD1,0x12,0xFF,0xFF,0xE9,0x79,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB9,0x12,0xFF,0xFF,0xE9,0x59,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA1,0x12,0xFF,0xFF,0xE9,0x39,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x89,0x12,0xFF,0xFF,0xE9,0x19,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x71,0x12,0xFF,0xFF,0xE9,0xF9,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x59,0x12,0xFF,0xFF,0xE9,0xD9,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x41,0x12,0xFF,0xFF,0xE9,0xB9,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x29,0x12,0xFF,0xFF,0xE9,0x99,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x11,0x12,0xFF,0xFF,0xE9,0x79,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF9,0x11,0xFF,0xFF,0xE9,0x59,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE1,0x11,0xFF,0xFF,0xE9,0x39,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC9,0x11,0xFF,0xFF,0xE9,0x19,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB1,0x11,0xFF,0xFF,0xE9,0xF9,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x99,0x11,0xFF,0xFF,0xE9,0xD9,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x81,0x11,0xFF,0xFF,0xE9,0xB9,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x69,0x11,0xFF,0xFF,0xE9,0x99,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x51,0x11,0xFF,0xFF,0xE9,0x79,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x39,0x11,0xFF,0xFF,0xE9,0x59,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x21,0x11,0xFF,0xFF,0xE9,0x39,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x09,0x11,0xFF,0xFF,0xE9,0x19,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF1,0x10,0xFF,0xFF,0xE9,0xF9,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD9,0x10,0xFF,0xFF,0xE9,0xD9,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC1,0x10,0xFF,0xFF,0xE9,0xB9,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA9,0x10,0xFF,0xFF,0xE9,0x99,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x91,0x10,0xFF,0xFF,0xEB,0x7C,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x7C,0x10,0xFF,0xFF,0xEB,0x5F,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x67,0x10,0xFF,0xFF,0xEB,0x42,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x52,0x10,0xFF,0xFF,0xEB,0x25,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x35,0x10,0xFF,0xFF,0xEB,0x08,0x0F,0xB6,0xC9,0xE8,0x7B,0xD5,0xFF,0xFF,0x90,0x48,0x81,0xC4,0x60,0x0C,0x00,0x00,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOp<bit> lookup(TernaryOpKind:byte kind)
; location: [7FFDDB844200h, 7FFDDB8458E9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h movzx esi,cl                  ; MOVZX(Movzx_r32_rm8) [ESI,CL]                        encoding(4 bytes) = 40 0f b6 f1
000ah cmp esi,5Ah                   ; CMP(Cmp_rm32_imm8) [ESI,5ah:imm32]                   encoding(3 bytes) = 83 fe 5a
000dh ja short 0027h                ; JA(Ja_rel8_64) [27h:jmp64]                           encoding(2 bytes) = 77 18
000fh mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0011h lea rax,[7FFDDB8458F0h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 d8 16 00 00
0018h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001bh lea rdx,[7FFDDB844206h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e4 ff ff ff
0022h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0025h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0027h cmp cl,0FFh                   ; CMP(Cmp_rm8_imm8) [CL,ffh:imm8]                      encoding(3 bytes) = 80 f9 ff
002ah je near ptr 1697h             ; JE(Je_rel32_64) [1697h:jmp64]                        encoding(6 bytes) = 0f 84 67 16 00 00
0030h jmp near ptr 16d3h            ; JMP(Jmp_rel32_64) [16D3h:jmp64]                      encoding(5 bytes) = e9 9e 16 00 00
0035h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 6c 02 42 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
004eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 9d f3 41 5f
0053h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
005dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0061h mov rcx,7FFDDB834DC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834dc8h:imm64]         encoding(10 bytes) = 48 b9 c8 4d 83 db fd 7f 00 00
006bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
006fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 6c 16 00 00
0074h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
007eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 2d 02 42 5f
0083h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0086h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
008ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
008dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 5e f3 41 5f
0092h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
009ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
00a0h mov rcx,7FFDDB834DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 4d 83 db fd 7f 00 00
00aah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
00aeh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 2d 16 00 00
00b3h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
00bdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 ee 01 42 5f
00c2h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00c5h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
00c9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00cch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 1f f3 41 5f
00d1h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
00dbh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
00dfh mov rcx,7FFDDB834DD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834dd8h:imm64]         encoding(10 bytes) = 48 b9 d8 4d 83 db fd 7f 00 00
00e9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
00edh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ee 15 00 00
00f2h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
00fch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 af 01 42 5f
0101h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0104h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0108h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
010bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 e0 f2 41 5f
0110h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
011ah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
011eh mov rcx,7FFDDB834DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834de0h:imm64]         encoding(10 bytes) = 48 b9 e0 4d 83 db fd 7f 00 00
0128h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
012ch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 af 15 00 00
0131h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
013bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 70 01 42 5f
0140h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0143h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0147h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
014ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 a1 f2 41 5f
014fh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0159h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
015dh mov rcx,7FFDDB834DE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834de8h:imm64]         encoding(10 bytes) = 48 b9 e8 4d 83 db fd 7f 00 00
0167h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
016bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 70 15 00 00
0170h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
017ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 31 01 42 5f
017fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0182h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0186h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0189h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 62 f2 41 5f
018eh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0198h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
019ch mov rcx,7FFDDB834DF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834df0h:imm64]         encoding(10 bytes) = 48 b9 f0 4d 83 db fd 7f 00 00
01a6h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
01aah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 31 15 00 00
01afh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
01b9h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 f2 00 42 5f
01beh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
01c1h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
01c5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01c8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 23 f2 41 5f
01cdh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
01d7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
01dbh mov rcx,7FFDDB834DF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834df8h:imm64]         encoding(10 bytes) = 48 b9 f8 4d 83 db fd 7f 00 00
01e5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
01e9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f2 14 00 00
01eeh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
01f8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 b3 00 42 5f
01fdh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0200h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0204h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0207h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 e4 f1 41 5f
020ch mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0216h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
021ah mov rcx,7FFDDB834E00h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e00h:imm64]         encoding(10 bytes) = 48 b9 00 4e 83 db fd 7f 00 00
0224h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0228h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b3 14 00 00
022dh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0237h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 74 00 42 5f
023ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
023fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0243h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0246h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 a5 f1 41 5f
024bh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0255h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0259h mov rcx,7FFDDB834E08h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e08h:imm64]         encoding(10 bytes) = 48 b9 08 4e 83 db fd 7f 00 00
0263h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0267h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 74 14 00 00
026ch mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0276h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 35 00 42 5f
027bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
027eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0282h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0285h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 66 f1 41 5f
028ah mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0294h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0298h mov rcx,7FFDDB834E10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e10h:imm64]         encoding(10 bytes) = 48 b9 10 4e 83 db fd 7f 00 00
02a2h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
02a6h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 35 14 00 00
02abh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
02b5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 f6 ff 41 5f
02bah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
02bdh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
02c1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
02c4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 27 f1 41 5f
02c9h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
02d3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
02d7h mov rcx,7FFDDB834E18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e18h:imm64]         encoding(10 bytes) = 48 b9 18 4e 83 db fd 7f 00 00
02e1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
02e5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f6 13 00 00
02eah mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
02f4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 b7 ff 41 5f
02f9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
02fch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0300h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0303h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 e8 f0 41 5f
0308h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0312h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0316h mov rcx,7FFDDB834E20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e20h:imm64]         encoding(10 bytes) = 48 b9 20 4e 83 db fd 7f 00 00
0320h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0324h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b7 13 00 00
0329h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0333h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 78 ff 41 5f
0338h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
033bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
033fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0342h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 a9 f0 41 5f
0347h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0351h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0355h mov rcx,7FFDDB834E28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e28h:imm64]         encoding(10 bytes) = 48 b9 28 4e 83 db fd 7f 00 00
035fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0363h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 78 13 00 00
0368h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0372h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 39 ff 41 5f
0377h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
037ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
037eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0381h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 6a f0 41 5f
0386h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0390h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0394h mov rcx,7FFDDB834E30h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e30h:imm64]         encoding(10 bytes) = 48 b9 30 4e 83 db fd 7f 00 00
039eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
03a2h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 39 13 00 00
03a7h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
03b1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 fa fe 41 5f
03b6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
03b9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
03bdh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
03c0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 2b f0 41 5f
03c5h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
03cfh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
03d3h mov rcx,7FFDDB834E38h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e38h:imm64]         encoding(10 bytes) = 48 b9 38 4e 83 db fd 7f 00 00
03ddh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
03e1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 fa 12 00 00
03e6h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
03f0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 bb fe 41 5f
03f5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
03f8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
03fch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
03ffh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 ec ef 41 5f
0404h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
040eh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0412h mov rcx,7FFDDB834E40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e40h:imm64]         encoding(10 bytes) = 48 b9 40 4e 83 db fd 7f 00 00
041ch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0420h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 bb 12 00 00
0425h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
042fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 7c fe 41 5f
0434h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0437h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
043bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
043eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 ad ef 41 5f
0443h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
044dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0451h mov rcx,7FFDDB834E48h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e48h:imm64]         encoding(10 bytes) = 48 b9 48 4e 83 db fd 7f 00 00
045bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
045fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 7c 12 00 00
0464h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
046eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 3d fe 41 5f
0473h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0476h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
047ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
047dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 6e ef 41 5f
0482h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
048ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0490h mov rcx,7FFDDB834E50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e50h:imm64]         encoding(10 bytes) = 48 b9 50 4e 83 db fd 7f 00 00
049ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
049eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 3d 12 00 00
04a3h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
04adh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 fe fd 41 5f
04b2h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04b5h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
04b9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
04bch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 2f ef 41 5f
04c1h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
04cbh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
04cfh mov rcx,7FFDDB834E58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e58h:imm64]         encoding(10 bytes) = 48 b9 58 4e 83 db fd 7f 00 00
04d9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
04ddh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 fe 11 00 00
04e2h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
04ech call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 bf fd 41 5f
04f1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
04f8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
04fbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 f0 ee 41 5f
0500h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
050ah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
050eh mov rcx,7FFDDB834E60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e60h:imm64]         encoding(10 bytes) = 48 b9 60 4e 83 db fd 7f 00 00
0518h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
051ch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 bf 11 00 00
0521h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
052bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 80 fd 41 5f
0530h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0533h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0537h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
053ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 b1 ee 41 5f
053fh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0549h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
054dh mov rcx,7FFDDB834E68h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e68h:imm64]         encoding(10 bytes) = 48 b9 68 4e 83 db fd 7f 00 00
0557h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
055bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 80 11 00 00
0560h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
056ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 41 fd 41 5f
056fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0572h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0576h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0579h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 72 ee 41 5f
057eh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0588h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
058ch mov rcx,7FFDDB834E70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e70h:imm64]         encoding(10 bytes) = 48 b9 70 4e 83 db fd 7f 00 00
0596h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
059ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 41 11 00 00
059fh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
05a9h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 02 fd 41 5f
05aeh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
05b1h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
05b5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
05b8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 33 ee 41 5f
05bdh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
05c7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
05cbh mov rcx,7FFDDB834E78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e78h:imm64]         encoding(10 bytes) = 48 b9 78 4e 83 db fd 7f 00 00
05d5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
05d9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 02 11 00 00
05deh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
05e8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 c3 fc 41 5f
05edh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
05f0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
05f4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
05f7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 f4 ed 41 5f
05fch mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0606h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
060ah mov rcx,7FFDDB834E80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e80h:imm64]         encoding(10 bytes) = 48 b9 80 4e 83 db fd 7f 00 00
0614h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0618h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c3 10 00 00
061dh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0627h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 84 fc 41 5f
062ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
062fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0633h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0636h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 b5 ed 41 5f
063bh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0645h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0649h mov rcx,7FFDDB834E88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e88h:imm64]         encoding(10 bytes) = 48 b9 88 4e 83 db fd 7f 00 00
0653h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0657h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 84 10 00 00
065ch mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0666h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 45 fc 41 5f
066bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
066eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0672h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0675h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 76 ed 41 5f
067ah mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0684h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0688h mov rcx,7FFDDB834E90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e90h:imm64]         encoding(10 bytes) = 48 b9 90 4e 83 db fd 7f 00 00
0692h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0696h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 45 10 00 00
069bh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
06a5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 06 fc 41 5f
06aah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
06adh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
06b1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
06b4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 37 ed 41 5f
06b9h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
06c3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
06c7h mov rcx,7FFDDB834E98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834e98h:imm64]         encoding(10 bytes) = 48 b9 98 4e 83 db fd 7f 00 00
06d1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
06d5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 06 10 00 00
06dah mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
06e4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 c7 fb 41 5f
06e9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
06ech lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
06f0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
06f3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 f8 ec 41 5f
06f8h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0702h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0706h mov rcx,7FFDDB834EA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ea0h:imm64]         encoding(10 bytes) = 48 b9 a0 4e 83 db fd 7f 00 00
0710h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0714h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c7 0f 00 00
0719h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0723h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 88 fb 41 5f
0728h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
072bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
072fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0732h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 b9 ec 41 5f
0737h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0741h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0745h mov rcx,7FFDDB834EA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ea8h:imm64]         encoding(10 bytes) = 48 b9 a8 4e 83 db fd 7f 00 00
074fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0753h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 88 0f 00 00
0758h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0762h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 49 fb 41 5f
0767h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
076ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
076eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0771h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 7a ec 41 5f
0776h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0780h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0784h mov rcx,7FFDDB834EB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834eb0h:imm64]         encoding(10 bytes) = 48 b9 b0 4e 83 db fd 7f 00 00
078eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0792h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 49 0f 00 00
0797h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
07a1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 0a fb 41 5f
07a6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
07a9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
07adh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
07b0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 3b ec 41 5f
07b5h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
07bfh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
07c3h mov rcx,7FFDDB834EB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834eb8h:imm64]         encoding(10 bytes) = 48 b9 b8 4e 83 db fd 7f 00 00
07cdh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
07d1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 0a 0f 00 00
07d6h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
07e0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 cb fa 41 5f
07e5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
07e8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
07ech mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
07efh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 fc eb 41 5f
07f4h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
07feh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0802h mov rcx,7FFDDB834EC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ec0h:imm64]         encoding(10 bytes) = 48 b9 c0 4e 83 db fd 7f 00 00
080ch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0810h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 cb 0e 00 00
0815h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
081fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 8c fa 41 5f
0824h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0827h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
082bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
082eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 bd eb 41 5f
0833h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
083dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0841h mov rcx,7FFDDB834EC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ec8h:imm64]         encoding(10 bytes) = 48 b9 c8 4e 83 db fd 7f 00 00
084bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
084fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 8c 0e 00 00
0854h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
085eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 4d fa 41 5f
0863h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0866h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
086ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
086dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 7e eb 41 5f
0872h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
087ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0880h mov rcx,7FFDDB834ED0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ed0h:imm64]         encoding(10 bytes) = 48 b9 d0 4e 83 db fd 7f 00 00
088ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
088eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 4d 0e 00 00
0893h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
089dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 0e fa 41 5f
08a2h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
08a5h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
08a9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
08ach call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 3f eb 41 5f
08b1h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
08bbh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
08bfh mov rcx,7FFDDB834ED8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ed8h:imm64]         encoding(10 bytes) = 48 b9 d8 4e 83 db fd 7f 00 00
08c9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
08cdh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 0e 0e 00 00
08d2h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
08dch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 cf f9 41 5f
08e1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
08e4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
08e8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
08ebh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 00 eb 41 5f
08f0h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
08fah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
08feh mov rcx,7FFDDB834EE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ee0h:imm64]         encoding(10 bytes) = 48 b9 e0 4e 83 db fd 7f 00 00
0908h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
090ch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 cf 0d 00 00
0911h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
091bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 90 f9 41 5f
0920h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0923h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0927h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
092ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 c1 ea 41 5f
092fh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0939h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
093dh mov rcx,7FFDDB834EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 83 db fd 7f 00 00
0947h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
094bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 90 0d 00 00
0950h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
095ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 51 f9 41 5f
095fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0962h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0966h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0969h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 82 ea 41 5f
096eh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0978h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
097ch mov rcx,7FFDDB834EF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ef0h:imm64]         encoding(10 bytes) = 48 b9 f0 4e 83 db fd 7f 00 00
0986h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
098ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 51 0d 00 00
098fh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0999h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 12 f9 41 5f
099eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
09a1h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
09a5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
09a8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 43 ea 41 5f
09adh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
09b7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
09bbh mov rcx,7FFDDB834EF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ef8h:imm64]         encoding(10 bytes) = 48 b9 f8 4e 83 db fd 7f 00 00
09c5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
09c9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 12 0d 00 00
09ceh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
09d8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 d3 f8 41 5f
09ddh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
09e0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
09e4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
09e7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 04 ea 41 5f
09ech mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
09f6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
09fah mov rcx,7FFDDB834F00h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f00h:imm64]         encoding(10 bytes) = 48 b9 00 4f 83 db fd 7f 00 00
0a04h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0a08h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 d3 0c 00 00
0a0dh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0a17h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 94 f8 41 5f
0a1ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a1fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0a23h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0a26h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 c5 e9 41 5f
0a2bh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0a35h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0a39h mov rcx,7FFDDB834F08h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f08h:imm64]         encoding(10 bytes) = 48 b9 08 4f 83 db fd 7f 00 00
0a43h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0a47h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 94 0c 00 00
0a4ch mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0a56h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 55 f8 41 5f
0a5bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a5eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0a62h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0a65h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 86 e9 41 5f
0a6ah mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0a74h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0a78h mov rcx,7FFDDB834F10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f10h:imm64]         encoding(10 bytes) = 48 b9 10 4f 83 db fd 7f 00 00
0a82h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0a86h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 55 0c 00 00
0a8bh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0a95h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 16 f8 41 5f
0a9ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a9dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0aa1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0aa4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 47 e9 41 5f
0aa9h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0ab3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ab7h mov rcx,7FFDDB834F18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f18h:imm64]         encoding(10 bytes) = 48 b9 18 4f 83 db fd 7f 00 00
0ac1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0ac5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 16 0c 00 00
0acah mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0ad4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 d7 f7 41 5f
0ad9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0adch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0ae0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ae3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 08 e9 41 5f
0ae8h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0af2h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0af6h mov rcx,7FFDDB834F20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f20h:imm64]         encoding(10 bytes) = 48 b9 20 4f 83 db fd 7f 00 00
0b00h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0b04h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 d7 0b 00 00
0b09h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0b13h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 98 f7 41 5f
0b18h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0b1bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0b1fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0b22h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 c9 e8 41 5f
0b27h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0b31h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0b35h mov rcx,7FFDDB834F28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f28h:imm64]         encoding(10 bytes) = 48 b9 28 4f 83 db fd 7f 00 00
0b3fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0b43h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 98 0b 00 00
0b48h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0b52h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 59 f7 41 5f
0b57h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0b5ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0b5eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0b61h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 8a e8 41 5f
0b66h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0b70h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0b74h mov rcx,7FFDDB834F30h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f30h:imm64]         encoding(10 bytes) = 48 b9 30 4f 83 db fd 7f 00 00
0b7eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0b82h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 59 0b 00 00
0b87h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0b91h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 1a f7 41 5f
0b96h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0b99h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0b9dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ba0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 4b e8 41 5f
0ba5h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0bafh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0bb3h mov rcx,7FFDDB834F38h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f38h:imm64]         encoding(10 bytes) = 48 b9 38 4f 83 db fd 7f 00 00
0bbdh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0bc1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 1a 0b 00 00
0bc6h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0bd0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 db f6 41 5f
0bd5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0bd8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0bdch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0bdfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 0c e8 41 5f
0be4h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0beeh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0bf2h mov rcx,7FFDDB834F40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f40h:imm64]         encoding(10 bytes) = 48 b9 40 4f 83 db fd 7f 00 00
0bfch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0c00h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 db 0a 00 00
0c05h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0c0fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 9c f6 41 5f
0c14h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c17h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0c1bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0c1eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 cd e7 41 5f
0c23h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0c2dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0c31h mov rcx,7FFDDB834F48h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f48h:imm64]         encoding(10 bytes) = 48 b9 48 4f 83 db fd 7f 00 00
0c3bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0c3fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 9c 0a 00 00
0c44h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0c4eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 5d f6 41 5f
0c53h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c56h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0c5ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0c5dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 8e e7 41 5f
0c62h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0c6ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0c70h mov rcx,7FFDDB834F50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f50h:imm64]         encoding(10 bytes) = 48 b9 50 4f 83 db fd 7f 00 00
0c7ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0c7eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 5d 0a 00 00
0c83h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0c8dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 1e f6 41 5f
0c92h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c95h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0c99h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0c9ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 4f e7 41 5f
0ca1h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0cabh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0cafh mov rcx,7FFDDB834F58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f58h:imm64]         encoding(10 bytes) = 48 b9 58 4f 83 db fd 7f 00 00
0cb9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0cbdh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 1e 0a 00 00
0cc2h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0ccch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 df f5 41 5f
0cd1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0cd4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0cd8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0cdbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 10 e7 41 5f
0ce0h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0ceah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ceeh mov rcx,7FFDDB834F60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f60h:imm64]         encoding(10 bytes) = 48 b9 60 4f 83 db fd 7f 00 00
0cf8h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0cfch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 df 09 00 00
0d01h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0d0bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 a0 f5 41 5f
0d10h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d13h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d17h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0d1ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 d1 e6 41 5f
0d1fh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0d29h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0d2dh mov rcx,7FFDDB834F68h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f68h:imm64]         encoding(10 bytes) = 48 b9 68 4f 83 db fd 7f 00 00
0d37h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0d3bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 a0 09 00 00
0d40h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0d4ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 61 f5 41 5f
0d4fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d52h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d56h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0d59h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 92 e6 41 5f
0d5eh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0d68h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0d6ch mov rcx,7FFDDB834F70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f70h:imm64]         encoding(10 bytes) = 48 b9 70 4f 83 db fd 7f 00 00
0d76h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0d7ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 61 09 00 00
0d7fh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0d89h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 22 f5 41 5f
0d8eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d91h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d95h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0d98h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 53 e6 41 5f
0d9dh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0da7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0dabh mov rcx,7FFDDB834F78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f78h:imm64]         encoding(10 bytes) = 48 b9 78 4f 83 db fd 7f 00 00
0db5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0db9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 22 09 00 00
0dbeh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0dc8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 e3 f4 41 5f
0dcdh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0dd0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0dd4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0dd7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 14 e6 41 5f
0ddch mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0de6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0deah mov rcx,7FFDDB834F80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f80h:imm64]         encoding(10 bytes) = 48 b9 80 4f 83 db fd 7f 00 00
0df4h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0df8h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 e3 08 00 00
0dfdh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0e07h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 a4 f4 41 5f
0e0ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0e0fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0e13h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0e16h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 d5 e5 41 5f
0e1bh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0e25h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0e29h mov rcx,7FFDDB834F88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f88h:imm64]         encoding(10 bytes) = 48 b9 88 4f 83 db fd 7f 00 00
0e33h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0e37h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 a4 08 00 00
0e3ch mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0e46h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 65 f4 41 5f
0e4bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0e4eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0e52h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0e55h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 96 e5 41 5f
0e5ah mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0e64h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0e68h mov rcx,7FFDDB834F90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f90h:imm64]         encoding(10 bytes) = 48 b9 90 4f 83 db fd 7f 00 00
0e72h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0e76h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 65 08 00 00
0e7bh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0e85h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 26 f4 41 5f
0e8ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0e8dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0e91h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0e94h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 57 e5 41 5f
0e99h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0ea3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ea7h mov rcx,7FFDDB834F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834f98h:imm64]         encoding(10 bytes) = 48 b9 98 4f 83 db fd 7f 00 00
0eb1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0eb5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 26 08 00 00
0ebah mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0ec4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 e7 f3 41 5f
0ec9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0ecch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0ed0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ed3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 18 e5 41 5f
0ed8h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0ee2h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ee6h mov rcx,7FFDDB834FA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fa0h:imm64]         encoding(10 bytes) = 48 b9 a0 4f 83 db fd 7f 00 00
0ef0h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0ef4h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 e7 07 00 00
0ef9h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0f03h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 a8 f3 41 5f
0f08h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f0bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f0fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f12h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 d9 e4 41 5f
0f17h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0f21h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0f25h mov rcx,7FFDDB834FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 4f 83 db fd 7f 00 00
0f2fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0f33h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 a8 07 00 00
0f38h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0f42h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 69 f3 41 5f
0f47h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f4ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f4eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f51h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 9a e4 41 5f
0f56h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0f60h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0f64h mov rcx,7FFDDB834FB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fb0h:imm64]         encoding(10 bytes) = 48 b9 b0 4f 83 db fd 7f 00 00
0f6eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0f72h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 69 07 00 00
0f77h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0f81h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 2a f3 41 5f
0f86h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f89h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f8dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f90h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 5b e4 41 5f
0f95h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0f9fh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0fa3h mov rcx,7FFDDB834FB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fb8h:imm64]         encoding(10 bytes) = 48 b9 b8 4f 83 db fd 7f 00 00
0fadh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0fb1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 2a 07 00 00
0fb6h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0fc0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 eb f2 41 5f
0fc5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0fc8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0fcch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0fcfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 1c e4 41 5f
0fd4h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
0fdeh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0fe2h mov rcx,7FFDDB834FC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fc0h:imm64]         encoding(10 bytes) = 48 b9 c0 4f 83 db fd 7f 00 00
0fech mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0ff0h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 eb 06 00 00
0ff5h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
0fffh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 ac f2 41 5f
1004h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1007h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
100bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
100eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 dd e3 41 5f
1013h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
101dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1021h mov rcx,7FFDDB834FC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fc8h:imm64]         encoding(10 bytes) = 48 b9 c8 4f 83 db fd 7f 00 00
102bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
102fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ac 06 00 00
1034h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
103eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 6d f2 41 5f
1043h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1046h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
104ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
104dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 9e e3 41 5f
1052h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
105ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1060h mov rcx,7FFDDB834FD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fd0h:imm64]         encoding(10 bytes) = 48 b9 d0 4f 83 db fd 7f 00 00
106ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
106eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 6d 06 00 00
1073h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
107dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 2e f2 41 5f
1082h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1085h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1089h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
108ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 5f e3 41 5f
1091h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
109bh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
109fh mov rcx,7FFDDB834FD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fd8h:imm64]         encoding(10 bytes) = 48 b9 d8 4f 83 db fd 7f 00 00
10a9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
10adh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 2e 06 00 00
10b2h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
10bch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 ef f1 41 5f
10c1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
10c4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
10c8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
10cbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 20 e3 41 5f
10d0h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
10dah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
10deh mov rcx,7FFDDB834FE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fe0h:imm64]         encoding(10 bytes) = 48 b9 e0 4f 83 db fd 7f 00 00
10e8h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
10ech jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ef 05 00 00
10f1h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
10fbh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 b0 f1 41 5f
1100h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1103h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1107h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
110ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 e1 e2 41 5f
110fh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1119h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
111dh mov rcx,7FFDDB834FE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834fe8h:imm64]         encoding(10 bytes) = 48 b9 e8 4f 83 db fd 7f 00 00
1127h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
112bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b0 05 00 00
1130h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
113ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 71 f1 41 5f
113fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1142h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1146h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1149h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 a2 e2 41 5f
114eh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1158h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
115ch mov rcx,7FFDDB834FF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ff0h:imm64]         encoding(10 bytes) = 48 b9 f0 4f 83 db fd 7f 00 00
1166h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
116ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 71 05 00 00
116fh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1179h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 32 f1 41 5f
117eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1181h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1185h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1188h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 63 e2 41 5f
118dh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1197h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
119bh mov rcx,7FFDDB834FF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb834ff8h:imm64]         encoding(10 bytes) = 48 b9 f8 4f 83 db fd 7f 00 00
11a5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
11a9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 32 05 00 00
11aeh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
11b8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 f3 f0 41 5f
11bdh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
11c0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
11c4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
11c7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 24 e2 41 5f
11cch mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
11d6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
11dah mov rcx,7FFDDB835000h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835000h:imm64]         encoding(10 bytes) = 48 b9 00 50 83 db fd 7f 00 00
11e4h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
11e8h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f3 04 00 00
11edh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
11f7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 b4 f0 41 5f
11fch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
11ffh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1203h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1206h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 e5 e1 41 5f
120bh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1215h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1219h mov rcx,7FFDDB835008h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835008h:imm64]         encoding(10 bytes) = 48 b9 08 50 83 db fd 7f 00 00
1223h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1227h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b4 04 00 00
122ch mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1236h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 75 f0 41 5f
123bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
123eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1242h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1245h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 a6 e1 41 5f
124ah mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1254h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1258h mov rcx,7FFDDB835010h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835010h:imm64]         encoding(10 bytes) = 48 b9 10 50 83 db fd 7f 00 00
1262h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1266h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 75 04 00 00
126bh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1275h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 36 f0 41 5f
127ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
127dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1281h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1284h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 67 e1 41 5f
1289h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1293h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1297h mov rcx,7FFDDB835018h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835018h:imm64]         encoding(10 bytes) = 48 b9 18 50 83 db fd 7f 00 00
12a1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
12a5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 36 04 00 00
12aah mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
12b4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 f7 ef 41 5f
12b9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
12bch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
12c0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
12c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 28 e1 41 5f
12c8h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
12d2h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
12d6h mov rcx,7FFDDB835020h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835020h:imm64]         encoding(10 bytes) = 48 b9 20 50 83 db fd 7f 00 00
12e0h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
12e4h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f7 03 00 00
12e9h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
12f3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 b8 ef 41 5f
12f8h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
12fbh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
12ffh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1302h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 e9 e0 41 5f
1307h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1311h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1315h mov rcx,7FFDDB835028h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835028h:imm64]         encoding(10 bytes) = 48 b9 28 50 83 db fd 7f 00 00
131fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1323h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b8 03 00 00
1328h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1332h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 79 ef 41 5f
1337h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
133ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
133eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1341h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 aa e0 41 5f
1346h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1350h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1354h mov rcx,7FFDDB835030h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835030h:imm64]         encoding(10 bytes) = 48 b9 30 50 83 db fd 7f 00 00
135eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1362h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 79 03 00 00
1367h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1371h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 3a ef 41 5f
1376h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1379h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
137dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1380h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 6b e0 41 5f
1385h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
138fh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1393h mov rcx,7FFDDB835038h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835038h:imm64]         encoding(10 bytes) = 48 b9 38 50 83 db fd 7f 00 00
139dh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
13a1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 3a 03 00 00
13a6h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
13b0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 fb ee 41 5f
13b5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
13b8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
13bch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
13bfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 2c e0 41 5f
13c4h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
13ceh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
13d2h mov rcx,7FFDDB835040h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835040h:imm64]         encoding(10 bytes) = 48 b9 40 50 83 db fd 7f 00 00
13dch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
13e0h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 fb 02 00 00
13e5h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
13efh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 bc ee 41 5f
13f4h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
13f7h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
13fbh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
13feh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 ed df 41 5f
1403h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
140dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1411h mov rcx,7FFDDB835048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835048h:imm64]         encoding(10 bytes) = 48 b9 48 50 83 db fd 7f 00 00
141bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
141fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 bc 02 00 00
1424h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
142eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 7d ee 41 5f
1433h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1436h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
143ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
143dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 ae df 41 5f
1442h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
144ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1450h mov rcx,7FFDDB835050h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835050h:imm64]         encoding(10 bytes) = 48 b9 50 50 83 db fd 7f 00 00
145ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
145eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 7d 02 00 00
1463h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
146dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 3e ee 41 5f
1472h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1475h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1479h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
147ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 6f df 41 5f
1481h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
148bh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
148fh mov rcx,7FFDDB835058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835058h:imm64]         encoding(10 bytes) = 48 b9 58 50 83 db fd 7f 00 00
1499h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
149dh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 3e 02 00 00
14a2h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
14ach call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 ff ed 41 5f
14b1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
14b4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
14b8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
14bbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 30 df 41 5f
14c0h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
14cah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
14ceh mov rcx,7FFDDB835060h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835060h:imm64]         encoding(10 bytes) = 48 b9 60 50 83 db fd 7f 00 00
14d8h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
14dch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ff 01 00 00
14e1h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
14ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 c0 ed 41 5f
14f0h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
14f3h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
14f7h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
14fah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 f1 de 41 5f
14ffh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1509h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
150dh mov rcx,7FFDDB835068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835068h:imm64]         encoding(10 bytes) = 48 b9 68 50 83 db fd 7f 00 00
1517h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
151bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c0 01 00 00
1520h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
152ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 81 ed 41 5f
152fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1532h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1536h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1539h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 b2 de 41 5f
153eh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1548h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
154ch mov rcx,7FFDDB835070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835070h:imm64]         encoding(10 bytes) = 48 b9 70 50 83 db fd 7f 00 00
1556h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
155ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 81 01 00 00
155fh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1569h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 42 ed 41 5f
156eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1571h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1575h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1578h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 73 de 41 5f
157dh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1587h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
158bh mov rcx,7FFDDB835078h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835078h:imm64]         encoding(10 bytes) = 48 b9 78 50 83 db fd 7f 00 00
1595h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1599h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 42 01 00 00
159eh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
15a8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 03 ed 41 5f
15adh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
15b0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
15b4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
15b7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 34 de 41 5f
15bch mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
15c6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
15cah mov rcx,7FFDDB835080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835080h:imm64]         encoding(10 bytes) = 48 b9 80 50 83 db fd 7f 00 00
15d4h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
15d8h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 03 01 00 00
15ddh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
15e7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 c4 ec 41 5f
15ech mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
15efh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
15f3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
15f6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 f5 dd 41 5f
15fbh mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1605h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1609h mov rcx,7FFDDB835088h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835088h:imm64]         encoding(10 bytes) = 48 b9 88 50 83 db fd 7f 00 00
1613h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1617h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c4 00 00 00
161ch mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1626h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 85 ec 41 5f
162bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
162eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1632h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1635h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 b6 dd 41 5f
163ah mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
1644h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1648h mov rcx,7FFDDB835090h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835090h:imm64]         encoding(10 bytes) = 48 b9 90 50 83 db fd 7f 00 00
1652h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1656h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 85 00 00 00
165bh mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
1665h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 46 ec 41 5f
166ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
166dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1671h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1674h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 77 dd 41 5f
1679h mov rax,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RAX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b8 80 de 02 db fd 7f 00 00
1683h mov [rdi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 47 18
1687h mov rax,7FFDDB835098h         ; MOV(Mov_r64_imm64) [RAX,7ffddb835098h:imm64]         encoding(10 bytes) = 48 b8 98 50 83 db fd 7f 00 00
1691h mov [rdi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 47 20
1695h jmp short 16e0h               ; JMP(Jmp_rel8_64) [16E0h:jmp64]                       encoding(2 bytes) = eb 49
1697h mov rcx,7FFDDB9CF108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf108h:imm64]         encoding(10 bytes) = 48 b9 08 f1 9c db fd 7f 00 00
16a1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4202B0h:jmp64]                encoding(5 bytes) = e8 0a ec 41 5f
16a6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16a9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
16adh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
16b0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F41F3F0h:jmp64]                encoding(5 bytes) = e8 3b dd 41 5f
16b5h mov rcx,7FFDDB02DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb02de80h:imm64]         encoding(10 bytes) = 48 b9 80 de 02 db fd 7f 00 00
16bfh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
16c3h mov rcx,7FFDDB8350D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8350d0h:imm64]         encoding(10 bytes) = 48 b9 d0 50 83 db fd 7f 00 00
16cdh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
16d1h jmp short 16e0h               ; JMP(Jmp_rel8_64) [16E0h:jmp64]                       encoding(2 bytes) = eb 0d
16d3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
16d6h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
16d8h call 7FFDDB841648h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD448h:jmp64]        encoding(5 bytes) = e8 6b bd ff ff
16ddh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16e0h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
16e3h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
16e7h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
16e8h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
16e9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lookupBytes => new byte[5866]{0x57,0x56,0x48,0x83,0xEC,0x28,0x40,0x0F,0xB6,0xF1,0x83,0xFE,0x5A,0x77,0x18,0x8B,0xCE,0x48,0x8D,0x05,0xD8,0x16,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x80,0xF9,0xFF,0x0F,0x84,0x67,0x16,0x00,0x00,0xE9,0x9E,0x16,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6C,0x02,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x9D,0xF3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC8,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x6C,0x16,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2D,0x02,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x5E,0xF3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x2D,0x16,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEE,0x01,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x1F,0xF3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD8,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xEE,0x15,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAF,0x01,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE0,0xF2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE0,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xAF,0x15,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x70,0x01,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA1,0xF2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE8,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x70,0x15,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x31,0x01,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x62,0xF2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF0,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x31,0x15,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF2,0x00,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x23,0xF2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF8,0x4D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF2,0x14,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB3,0x00,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE4,0xF1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x00,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB3,0x14,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x00,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA5,0xF1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x08,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x74,0x14,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x35,0x00,0x42,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x66,0xF1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x10,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x35,0x14,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0xFF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x27,0xF1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x18,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF6,0x13,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB7,0xFF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE8,0xF0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x20,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB7,0x13,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x78,0xFF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA9,0xF0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x28,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x78,0x13,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x39,0xFF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6A,0xF0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x30,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x39,0x13,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFA,0xFE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x2B,0xF0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x38,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFA,0x12,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0xFE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xEC,0xEF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x40,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xBB,0x12,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0xFE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xAD,0xEF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x48,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x7C,0x12,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0xFE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6E,0xEF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x50,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x3D,0x12,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0xFD,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x2F,0xEF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x58,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFE,0x11,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBF,0xFD,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF0,0xEE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xBF,0x11,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0xFD,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB1,0xEE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x68,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x80,0x11,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x41,0xFD,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x72,0xEE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x70,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x41,0x11,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x02,0xFD,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x33,0xEE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x78,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x02,0x11,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC3,0xFC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF4,0xED,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x80,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC3,0x10,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0xFC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB5,0xED,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x88,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x84,0x10,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x45,0xFC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x76,0xED,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x90,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x45,0x10,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0xFC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x37,0xED,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x98,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x06,0x10,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC7,0xFB,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF8,0xEC,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA0,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC7,0x0F,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x88,0xFB,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB9,0xEC,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA8,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x88,0x0F,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x49,0xFB,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x7A,0xEC,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB0,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x49,0x0F,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0A,0xFB,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3B,0xEC,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB8,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x0A,0x0F,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCB,0xFA,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xFC,0xEB,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC0,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xCB,0x0E,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8C,0xFA,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xBD,0xEB,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC8,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x8C,0x0E,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4D,0xFA,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x7E,0xEB,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x4D,0x0E,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0E,0xFA,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3F,0xEB,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD8,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x0E,0x0E,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCF,0xF9,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x00,0xEB,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE0,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xCF,0x0D,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x90,0xF9,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC1,0xEA,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE8,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x90,0x0D,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0xF9,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x82,0xEA,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF0,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x51,0x0D,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x12,0xF9,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x43,0xEA,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF8,0x4E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x12,0x0D,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD3,0xF8,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x04,0xEA,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x00,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xD3,0x0C,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0xF8,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC5,0xE9,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x08,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x94,0x0C,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0xF8,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x86,0xE9,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x10,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x55,0x0C,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x16,0xF8,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x47,0xE9,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x18,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x16,0x0C,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD7,0xF7,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x08,0xE9,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x20,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xD7,0x0B,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x98,0xF7,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC9,0xE8,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x28,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x98,0x0B,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x59,0xF7,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x8A,0xE8,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x30,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x59,0x0B,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1A,0xF7,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x4B,0xE8,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x38,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x1A,0x0B,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDB,0xF6,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x0C,0xE8,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x40,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xDB,0x0A,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0xF6,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xCD,0xE7,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x48,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x9C,0x0A,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0xF6,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x8E,0xE7,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x50,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x5D,0x0A,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1E,0xF6,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x4F,0xE7,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x58,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x1E,0x0A,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDF,0xF5,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x10,0xE7,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xDF,0x09,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA0,0xF5,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xD1,0xE6,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x68,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xA0,0x09,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x61,0xF5,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x92,0xE6,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x70,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x61,0x09,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x22,0xF5,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x53,0xE6,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x78,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x22,0x09,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE3,0xF4,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x14,0xE6,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x80,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xE3,0x08,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0xF4,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xD5,0xE5,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x88,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xA4,0x08,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x65,0xF4,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x96,0xE5,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x90,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x65,0x08,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x26,0xF4,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x57,0xE5,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x98,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x26,0x08,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE7,0xF3,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x18,0xE5,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA0,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xE7,0x07,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA8,0xF3,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xD9,0xE4,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA8,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xA8,0x07,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x69,0xF3,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x9A,0xE4,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB0,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x69,0x07,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2A,0xF3,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x5B,0xE4,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB8,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x2A,0x07,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEB,0xF2,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x1C,0xE4,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC0,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xEB,0x06,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAC,0xF2,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xDD,0xE3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC8,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xAC,0x06,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6D,0xF2,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x9E,0xE3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x6D,0x06,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2E,0xF2,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x5F,0xE3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD8,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x2E,0x06,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEF,0xF1,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x20,0xE3,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE0,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xEF,0x05,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB0,0xF1,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE1,0xE2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE8,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB0,0x05,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x71,0xF1,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA2,0xE2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF0,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x71,0x05,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x32,0xF1,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x63,0xE2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF8,0x4F,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x32,0x05,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF3,0xF0,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x24,0xE2,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x00,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF3,0x04,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0xF0,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE5,0xE1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x08,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB4,0x04,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x75,0xF0,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA6,0xE1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x10,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x75,0x04,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x36,0xF0,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x67,0xE1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x18,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x36,0x04,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF7,0xEF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x28,0xE1,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x20,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF7,0x03,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0xEF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE9,0xE0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x28,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB8,0x03,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x79,0xEF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xAA,0xE0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x30,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x79,0x03,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3A,0xEF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6B,0xE0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x38,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x3A,0x03,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFB,0xEE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x2C,0xE0,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x40,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFB,0x02,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBC,0xEE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xED,0xDF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x48,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xBC,0x02,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7D,0xEE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xAE,0xDF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x50,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x7D,0x02,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0xEE,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6F,0xDF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x58,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x3E,0x02,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFF,0xED,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x30,0xDF,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFF,0x01,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0xED,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF1,0xDE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x68,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC0,0x01,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x81,0xED,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB2,0xDE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x70,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x81,0x01,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x42,0xED,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x73,0xDE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x78,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x42,0x01,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x03,0xED,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x34,0xDE,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x80,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x03,0x01,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0xEC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF5,0xDD,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x88,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC4,0x00,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x85,0xEC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB6,0xDD,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x90,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x85,0x00,0x00,0x00,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x46,0xEC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x77,0xDD,0x41,0x5F,0x48,0xB8,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x47,0x18,0x48,0xB8,0x98,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x47,0x20,0xEB,0x49,0x48,0xB9,0x08,0xF1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0A,0xEC,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3B,0xDD,0x41,0x5F,0x48,0xB9,0x80,0xDE,0x02,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0x50,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xEB,0x0D,0x0F,0xB6,0xC9,0x33,0xD2,0xE8,0x6B,0xBD,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicOpSvc get_Factory()
; location: [7FFDDB845A80h, 7FFDDB845AACh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0006h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000bh mov byte ptr [rsp+20h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 20 00
0010h mov rcx,7FFDDB9A7BA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a7ba0h:imm64]         encoding(10 bytes) = 48 b9 a0 7b 9a db fd 7f 00 00
001ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F41EA30h:jmp64]                encoding(5 bytes) = e8 11 ea 41 5f
001fh movsx rdx,byte ptr [rsp+20h]  ; MOVSX(Movsx_r64_rm8) [RDX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 54 24 20
0025h mov [rax+8],dl                ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),DL]            encoding(3 bytes) = 88 50 08
0028h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_FactoryBytes => new byte[45]{0x48,0x83,0xEC,0x28,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0xC6,0x44,0x24,0x20,0x00,0x48,0xB9,0xA0,0x7B,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0xEA,0x41,0x5F,0x48,0x0F,0xBE,0x54,0x24,0x20,0x88,0x50,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind[] get_ComparisonKinds()
; location: [7FFDDB845CA0h, 7FFDDB845CDDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDB9CD4A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cd4a8h:imm64]         encoding(10 bytes) = 48 b9 a8 d4 9c db fd 7f 00 00
0011h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41E940h:jmp64]                encoding(5 bytes) = e8 25 e9 41 5f
001bh mov rdx,1F9735FAA2Fh          ; MOV(Mov_r64_imm64) [RDX,1f9735faa2fh:imm64]          encoding(10 bytes) = 48 ba 2f aa 5f 73 f9 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h mov r8,[rdx+10h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(4 bytes) = 4c 8b 42 10
0035h mov [rcx+10h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 41 10
0039h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindsBytes => new byte[62]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0xA8,0xD4,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x25,0xE9,0x41,0x5F,0x48,0xBA,0x2F,0xAA,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0x4C,0x8B,0x42,0x10,0x4C,0x89,0x41,0x10,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<UnaryBitwiseOpKind:uint> get_UnaryBitwiseKinds()
; location: [7FFDDB845D00h, 7FFDDB845D39h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9CCEB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cceb8h:imm64]         encoding(10 bytes) = 48 b9 b8 ce 9c db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41E8E0h:jmp64]                encoding(5 bytes) = e8 c7 e8 41 5f
0019h mov rdx,1F9735FAA1Fh          ; MOV(Mov_r64_imm64) [RDX,1f9735faa1fh:imm64]          encoding(10 bytes) = 48 ba 1f aa 5f 73 f9 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryBitwiseKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xB8,0xCE,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xC7,0xE8,0x41,0x5F,0x48,0xBA,0x1F,0xAA,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDB845D50h, 7FFDDB845DA3h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDB9CD1E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cd1e0h:imm64]         encoding(10 bytes) = 48 b9 e0 d1 9c db fd 7f 00 00
0011h mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41E890h:jmp64]                encoding(5 bytes) = e8 75 e8 41 5f
001bh mov rdx,1F9735FA9DFh          ; MOV(Mov_r64_imm64) [RDX,1f9735fa9dfh:imm64]          encoding(10 bytes) = 48 ba df a9 5f 73 f9 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h vmovdqu xmm0,xmmword ptr [rdx+10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 10
0036h vmovdqu xmmword ptr [rcx+10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 10
003bh vmovdqu xmm0,xmmword ptr [rdx+20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 20
0040h vmovdqu xmmword ptr [rcx+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 20
0045h vmovdqu xmm0,xmmword ptr [rdx+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 30
004ah vmovdqu xmmword ptr [rcx+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 30
004fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0053h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[84]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0xE0,0xD1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0x75,0xE8,0x41,0x5F,0x48,0xBA,0xDF,0xA9,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0xC5,0xFA,0x6F,0x42,0x10,0xC5,0xFA,0x7F,0x41,0x10,0xC5,0xFA,0x6F,0x42,0x20,0xC5,0xFA,0x7F,0x41,0x20,0xC5,0xFA,0x6F,0x42,0x30,0xC5,0xFA,0x7F,0x41,0x30,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryArithmeticOpKind[] get_UnaryAritmeticKinds()
; location: [7FFDDB845DC0h, 7FFDDB845DF9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9CF3C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf3c8h:imm64]         encoding(10 bytes) = 48 b9 c8 f3 9c db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41E820h:jmp64]                encoding(5 bytes) = e8 07 e8 41 5f
0019h mov rdx,1F9735FA9CFh          ; MOV(Mov_r64_imm64) [RDX,1f9735fa9cfh:imm64]          encoding(10 bytes) = 48 ba cf a9 5f 73 f9 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryAritmeticKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xC8,0xF3,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x07,0xE8,0x41,0x5F,0x48,0xBA,0xCF,0xA9,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryArithmeticOpKind[] get_BinaryArithmeticKinds()
; location: [7FFDDB845E10h, 7FFDDB845E3Bh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9CF690h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cf690h:imm64]         encoding(10 bytes) = 48 b9 90 f6 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41E7D0h:jmp64]                encoding(5 bytes) = e8 b7 e7 41 5f
0019h mov dword ptr [rax+10h],400h  ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),400h:imm32] encoding(7 bytes) = c7 40 10 00 04 00 00
0020h mov dword ptr [rax+14h],800h  ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),800h:imm32] encoding(7 bytes) = c7 40 14 00 08 00 00
0027h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BinaryArithmeticKindsBytes => new byte[44]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x90,0xF6,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB7,0xE7,0x41,0x5F,0xC7,0x40,0x10,0x00,0x04,0x00,0x00,0xC7,0x40,0x14,0x00,0x08,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind[] get_ComparisonKinds()
; location: [7FFDDB845E50h, 7FFDDB845E8Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDB9CD4A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cd4a8h:imm64]         encoding(10 bytes) = 48 b9 a8 d4 9c db fd 7f 00 00
0011h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41E790h:jmp64]                encoding(5 bytes) = e8 75 e7 41 5f
001bh mov rdx,1F9735FAA2Fh          ; MOV(Mov_r64_imm64) [RDX,1f9735faa2fh:imm64]          encoding(10 bytes) = 48 ba 2f aa 5f 73 f9 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h mov r8,[rdx+10h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(4 bytes) = 4c 8b 42 10
0035h mov [rcx+10h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 41 10
0039h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindsBytes => new byte[62]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0xA8,0xD4,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x75,0xE7,0x41,0x5F,0x48,0xBA,0x2F,0xAA,0x5F,0x73,0xF9,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0x4C,0x8B,0x42,0x10,0x4C,0x89,0x41,0x10,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<TernaryOpKind:byte> get_TernaryBitwiseKinds()
; location: [7FFDDB845EB0h, 7FFDDB845EE7h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+1],cl                ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(3 bytes) = 88 4a 01
0015h movsx r8,word ptr [rsp+20h]   ; MOVSX(Movsx_r64_rm16) [R8,mem(16i,RSP:br,SS:sr)]     encoding(6 bytes) = 4c 0f bf 44 24 20
001bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0020h mov edx,4Fh                   ; MOV(Mov_r32_imm32) [EDX,4fh:imm32]                   encoding(5 bytes) = ba 4f 00 00 00
0025h call 7FFDDB840CF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAE40h:jmp64]        encoding(5 bytes) = e8 16 ae ff ff
002ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002dh call 7FFDDB840D00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAE50h:jmp64]        encoding(5 bytes) = e8 1e ae ff ff
0032h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0033h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TernaryBitwiseKindsBytes => new byte[56]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x88,0x4A,0x01,0x4C,0x0F,0xBF,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x4F,0x00,0x00,0x00,0xE8,0x16,0xAE,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x1E,0xAE,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector4 Signature(UnaryLogicOpKind:uint id)
; location: [7FFDDB845F00h, 7FFDDB845FA4h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000ch call 7FFDDB841970h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBA70h:jmp64]        encoding(5 bytes) = e8 5f ba ff ff
0011h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0014h mov byte ptr [rsp+28h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 28 00
0019h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
001ch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0020h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0022h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0025h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0028h jne short 003dh               ; JNE(Jne_rel8_64) [3Dh:jmp64]                         encoding(2 bytes) = 75 13
002ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
002eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0031h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0034h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0037h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
003bh jmp short 004eh               ; JMP(Jmp_rel8_64) [4Eh:jmp64]                         encoding(2 bytes) = eb 11
003dh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0041h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0044h and ecx,0FEh                  ; AND(And_rm32_imm32) [ECX,feh:imm32]                  encoding(6 bytes) = 81 e1 fe 00 00 00
004ah mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
004eh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0052h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0055h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0059h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
005dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0062h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
0065h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0068h jne short 007dh               ; JNE(Jne_rel8_64) [7Dh:jmp64]                         encoding(2 bytes) = 75 13
006ah mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
006eh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0071h or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
0074h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0077h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
007bh jmp short 008dh               ; JMP(Jmp_rel8_64) [8Dh:jmp64]                         encoding(2 bytes) = eb 10
007dh mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0081h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0084h and eax,0FDh                  ; AND(And_EAX_imm32) [EAX,fdh:imm32]                   encoding(5 bytes) = 25 fd 00 00 00
0089h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
008dh mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0091h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0094h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0098h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
009ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
009fh add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
00a3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a4h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SignatureBytes => new byte[165]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0xE8,0x5F,0xBA,0xFF,0xFF,0x48,0x8B,0xF0,0xC6,0x44,0x24,0x28,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x01,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFE,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x83,0xC8,0x02,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0xEB,0x10,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x25,0xFD,0x00,0x00,0x00,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x30,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector4 Signature(BinaryLogicOpKind:byte id)
; location: [7FFDDB845FC0h, 7FFDDB8460FCh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
000fh call 7FFDDB841AD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBB10h:jmp64]        encoding(5 bytes) = e8 fc ba ff ff
0014h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0017h mov byte ptr [rsp+28h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 28 00
001ch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
001fh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0023h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0025h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0028h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
002bh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
002eh jne short 0043h               ; JNE(Jne_rel8_64) [43h:jmp64]                         encoding(2 bytes) = 75 13
0030h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0034h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0037h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
003ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
003dh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0041h jmp short 0054h               ; JMP(Jmp_rel8_64) [54h:jmp64]                         encoding(2 bytes) = eb 11
0043h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0047h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
004ah and ecx,0FEh                  ; AND(And_rm32_imm32) [ECX,feh:imm32]                  encoding(6 bytes) = 81 e1 fe 00 00 00
0050h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0054h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0058h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
005bh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
005fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0062h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0066h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
006bh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
006eh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0071h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0074h jne short 0089h               ; JNE(Jne_rel8_64) [89h:jmp64]                         encoding(2 bytes) = 75 13
0076h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
007ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
007dh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0080h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0083h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0087h jmp short 009ah               ; JMP(Jmp_rel8_64) [9Ah:jmp64]                         encoding(2 bytes) = eb 11
0089h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
008dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0090h and ecx,0FDh                  ; AND(And_rm32_imm32) [ECX,fdh:imm32]                  encoding(6 bytes) = 81 e1 fd 00 00 00
0096h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
009ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
009eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00a1h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00a5h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a8h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00ach xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00aeh mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00b4h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00b7h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00bah jne short 00cfh               ; JNE(Jne_rel8_64) [CFh:jmp64]                         encoding(2 bytes) = 75 13
00bch mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00c0h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00c3h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
00c6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00c9h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00cdh jmp short 00e0h               ; JMP(Jmp_rel8_64) [E0h:jmp64]                         encoding(2 bytes) = eb 11
00cfh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00d3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00d6h and ecx,0FBh                  ; AND(And_rm32_imm32) [ECX,fbh:imm32]                  encoding(6 bytes) = 81 e1 fb 00 00 00
00dch mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00e0h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00e4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00e7h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00ebh mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
00efh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00f4h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00fah call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
00fdh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0100h jne short 0115h               ; JNE(Jne_rel8_64) [115h:jmp64]                        encoding(2 bytes) = 75 13
0102h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0106h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0109h or eax,8                      ; OR(Or_rm32_imm8) [EAX,8h:imm32]                      encoding(3 bytes) = 83 c8 08
010ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
010fh mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0113h jmp short 0125h               ; JMP(Jmp_rel8_64) [125h:jmp64]                        encoding(2 bytes) = eb 10
0115h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0119h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
011ch and eax,0F7h                  ; AND(And_EAX_imm32) [EAX,f7h:imm32]                   encoding(5 bytes) = 25 f7 00 00 00
0121h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0125h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0129h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
012ch mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0130h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0134h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0137h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
013bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
013ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SignatureBytes => new byte[317]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x0F,0xB6,0xC9,0xE8,0xFC,0xBA,0xFF,0xFF,0x48,0x8B,0xF0,0xC6,0x44,0x24,0x28,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x01,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFE,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x02,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFD,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x04,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFB,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x83,0xC8,0x08,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0xEB,0x10,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x25,0xF7,0x00,0x00,0x00,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x30,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector8 Signature(TernaryOpKind:byte id)
; location: [7FFDDB846410h, 7FFDDB8466ACh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
000fh call 7FFDDB844200h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFDDF0h:jmp64]        encoding(5 bytes) = e8 dc dd ff ff
0014h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0017h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0021h mov edx,22h                   ; MOV(Mov_r32_imm32) [EDX,22h:imm32]                   encoding(5 bytes) = ba 22 00 00 00
0026h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F41E4A0h:jmp64]                encoding(5 bytes) = e8 75 e4 41 5f
002bh mov rcx,1F96AFE6CA8h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6ca8h:imm64]          encoding(10 bytes) = 48 b9 a8 6c fe 6a f9 01 00 00
0035h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0038h movzx ecx,byte ptr [rcx+8]    ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 49 08
003ch mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0040h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0043h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0047h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0049h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
004ch xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
004fh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0052h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0055h jne short 006ah               ; JNE(Jne_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = 75 13
0057h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
005bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
005eh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0061h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0064h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0068h jmp short 007bh               ; JMP(Jmp_rel8_64) [7Bh:jmp64]                         encoding(2 bytes) = eb 11
006ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
006eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0071h and ecx,0FEh                  ; AND(And_rm32_imm32) [ECX,feh:imm32]                  encoding(6 bytes) = 81 e1 fe 00 00 00
0077h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
007bh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
007fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0082h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0086h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0089h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
008dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
008fh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0092h mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
0098h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
009bh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
009eh jne short 00b3h               ; JNE(Jne_rel8_64) [B3h:jmp64]                         encoding(2 bytes) = 75 13
00a0h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00a4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00a7h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
00aah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00adh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00b1h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 11
00b3h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00b7h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00bah and ecx,0FDh                  ; AND(And_rm32_imm32) [ECX,fdh:imm32]                  encoding(6 bytes) = 81 e1 fd 00 00 00
00c0h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00c4h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00c8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00cbh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00cfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00d2h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00d6h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00d8h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00deh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
00e1h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00e4h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00e7h jne short 00fch               ; JNE(Jne_rel8_64) [FCh:jmp64]                         encoding(2 bytes) = 75 13
00e9h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00edh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00f0h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
00f3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00f6h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00fah jmp short 010dh               ; JMP(Jmp_rel8_64) [10Dh:jmp64]                        encoding(2 bytes) = eb 11
00fch mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0100h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0103h and ecx,0FBh                  ; AND(And_rm32_imm32) [ECX,fbh:imm32]                  encoding(6 bytes) = 81 e1 fb 00 00 00
0109h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
010dh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0111h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0114h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0118h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
011bh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
011fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0121h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
0127h mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
012dh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0130h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0133h jne short 0148h               ; JNE(Jne_rel8_64) [148h:jmp64]                        encoding(2 bytes) = 75 13
0135h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0139h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
013ch or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
013fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0142h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0146h jmp short 0159h               ; JMP(Jmp_rel8_64) [159h:jmp64]                        encoding(2 bytes) = eb 11
0148h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
014ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
014fh and ecx,0F7h                  ; AND(And_rm32_imm32) [ECX,f7h:imm32]                  encoding(6 bytes) = 81 e1 f7 00 00 00
0155h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0159h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
015dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0160h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0164h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0167h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
016bh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0170h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0173h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0176h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0179h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
017ch jne short 0191h               ; JNE(Jne_rel8_64) [191h:jmp64]                        encoding(2 bytes) = 75 13
017eh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0182h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0185h or ecx,10h                    ; OR(Or_rm32_imm8) [ECX,10h:imm32]                     encoding(3 bytes) = 83 c9 10
0188h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
018bh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
018fh jmp short 01a2h               ; JMP(Jmp_rel8_64) [1A2h:jmp64]                        encoding(2 bytes) = eb 11
0191h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0195h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0198h and ecx,0EFh                  ; AND(And_rm32_imm32) [ECX,efh:imm32]                  encoding(6 bytes) = 81 e1 ef 00 00 00
019eh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01a2h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01a6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01a9h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01adh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01b0h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
01b4h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01b9h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
01bch mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
01c2h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
01c5h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
01c8h jne short 01ddh               ; JNE(Jne_rel8_64) [1DDh:jmp64]                        encoding(2 bytes) = 75 13
01cah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01ceh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01d1h or ecx,20h                    ; OR(Or_rm32_imm8) [ECX,20h:imm32]                     encoding(3 bytes) = 83 c9 20
01d4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01d7h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01dbh jmp short 01eeh               ; JMP(Jmp_rel8_64) [1EEh:jmp64]                        encoding(2 bytes) = eb 11
01ddh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01e1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01e4h and ecx,0DFh                  ; AND(And_rm32_imm32) [ECX,dfh:imm32]                  encoding(6 bytes) = 81 e1 df 00 00 00
01eah mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01eeh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01f2h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01f5h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01f9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01fch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0200h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0205h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
020bh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
020eh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0211h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0214h jne short 0229h               ; JNE(Jne_rel8_64) [229h:jmp64]                        encoding(2 bytes) = 75 13
0216h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
021ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
021dh or ecx,40h                    ; OR(Or_rm32_imm8) [ECX,40h:imm32]                     encoding(3 bytes) = 83 c9 40
0220h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0223h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0227h jmp short 023ah               ; JMP(Jmp_rel8_64) [23Ah:jmp64]                        encoding(2 bytes) = eb 11
0229h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
022dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0230h and ecx,0BFh                  ; AND(And_rm32_imm32) [ECX,bfh:imm32]                  encoding(6 bytes) = 81 e1 bf 00 00 00
0236h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
023ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
023eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0241h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0245h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0249h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
024eh mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
0254h mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
025ah call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
025dh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0260h jne short 0277h               ; JNE(Jne_rel8_64) [277h:jmp64]                        encoding(2 bytes) = 75 15
0262h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0266h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0269h or eax,80h                    ; OR(Or_EAX_imm32) [EAX,80h:imm32]                     encoding(5 bytes) = 0d 80 00 00 00
026eh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0271h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0275h jmp short 0285h               ; JMP(Jmp_rel8_64) [285h:jmp64]                        encoding(2 bytes) = eb 0e
0277h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
027bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
027eh and eax,7Fh                   ; AND(And_rm32_imm8) [EAX,7fh:imm32]                   encoding(3 bytes) = 83 e0 7f
0281h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0285h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0289h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
028ch mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0290h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0294h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0297h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
029bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
029ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SignatureBytes => new byte[669]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x0F,0xB6,0xC9,0xE8,0xDC,0xDD,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x22,0x00,0x00,0x00,0xE8,0x75,0xE4,0x41,0x5F,0x48,0xB9,0xA8,0x6C,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x0F,0xB6,0x49,0x08,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x01,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFE,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x02,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFD,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x04,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFB,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x08,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xF7,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x10,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xEF,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x20,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xDF,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x40,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xBF,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x75,0x15,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x0D,0x80,0x00,0x00,0x00,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0xEB,0x0E,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x83,0xE0,0x7F,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x30,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N2,N2,byte> Build(UnaryLogicOpKind:uint kind)
; location: [7FFDDB847D00h, 7FFDDB848031h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,0D8h                  ; SUB(Sub_rm64_imm32) [RSP,d8h:imm64]                  encoding(7 bytes) = 48 81 ec d8 00 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,2Ch                   ; MOV(Mov_r32_imm32) [ECX,2ch:imm32]                   encoding(5 bytes) = b9 2c 00 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0029h mov ecx,edx                   ; MOV(Mov_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 8b ca
002bh call 7FFDDB841970h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C70h:jmp64]        encoding(5 bytes) = e8 40 9c ff ff
0030h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0033h lea rcx,[rsp+98h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 00 00 00
003bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
003fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0043h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
004dh mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0052h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E76E0h:jmp64]                encoding(5 bytes) = e8 89 76 3e 5f
0057h mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
0061h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0064h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
0067h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
006ah mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0074h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C8E0h:jmp64]                encoding(5 bytes) = e8 67 c8 41 5f
0079h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
007dh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0080h lea rax,[rsp+98h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 00 00 00
0088h mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
008bh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
008eh vmovdqu xmm0,xmmword ptr [rsp+98h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 00 00 00
0097h vmovdqu xmmword ptr [rsp+0C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 00 00 00
00a0h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
00aah mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00afh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C8E0h:jmp64]                encoding(5 bytes) = e8 2c c8 41 5f
00b4h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00b7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00bah mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00beh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c0h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00c3h movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
00c6h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
00c9h lea rcx,[rsp+88h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 00 00 00
00d1h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
00d5h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
00d9h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
00ddh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00e2h lea rdx,[rsp+88h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 88 00 00 00
00eah lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
00efh mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
00f2h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
00f5h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
00f8h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
00fdh call 7FFDDB846E08h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF108h:jmp64]        encoding(5 bytes) = e8 06 f0 ff ff
0102h vmovdqu xmm0,xmmword ptr [rsp+88h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 00 00 00
010bh vmovdqu xmmword ptr [rsp+0B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 00 00 00
0114h vmovdqu xmm0,xmmword ptr [rsp+0B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 00 00 00
011dh vmovdqu xmmword ptr [rsp+78h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 78
0123h vmovdqu xmm0,xmmword ptr [rsp+78h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 78
0129h vmovdqu xmmword ptr [rsp+68h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 68
012fh lea rcx,[rsp+68h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 68
0134h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0137h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
013ah lea rcx,[rsp+0C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 00 00 00
0142h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
0145h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
0149h mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
0153h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0156h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
015ah mov r11,7FFDDB030F30h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f30h:imm64]         encoding(10 bytes) = 49 bb 30 0f 03 db fd 7f 00 00
0164h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0166h mov rax,7FFDDB030F30h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f30h:imm64]         encoding(10 bytes) = 48 b8 30 0f 03 db fd 7f 00 00
0170h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0172h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0174h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0177h jne short 017fh               ; JNE(Jne_rel8_64) [17Fh:jmp64]                        encoding(2 bytes) = 75 06
0179h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
017bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
017dh jmp short 0186h               ; JMP(Jmp_rel8_64) [186h:jmp64]                        encoding(2 bytes) = eb 07
017fh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0183h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0186h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0189h jbe near ptr 032ch            ; JBE(Jbe_rel32_64) [32Ch:jmp64]                       encoding(6 bytes) = 0f 86 9d 01 00 00
018fh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0192h mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
019ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
019fh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
01a2h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
01a5h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
01a7h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
01aah mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
01adh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
01b0h ja near ptr 0314h             ; JA(Ja_rel32_64) [314h:jmp64]                         encoding(6 bytes) = 0f 87 5e 01 00 00
01b6h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
01b9h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
01bch cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
01beh ja near ptr 031ah             ; JA(Ja_rel32_64) [31Ah:jmp64]                         encoding(6 bytes) = 0f 87 56 01 00 00
01c4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01c7h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
01cah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D1200h:jmp64]                encoding(5 bytes) = e8 31 10 9d 5d
01cfh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
01d9h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01deh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C8E0h:jmp64]                encoding(5 bytes) = e8 fd c6 41 5f
01e3h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
01e6h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
01eah mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01efh call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
01f2h or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
01f5h movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
01f8h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
01fbh lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
0200h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0204h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0208h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
020ch mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0211h lea rdx,[rsp+58h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 58
0216h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
021bh mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
021eh mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0221h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0224h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0229h call 7FFDDB846E08h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF108h:jmp64]        encoding(5 bytes) = e8 da ee ff ff
022eh vmovdqu xmm0,xmmword ptr [rsp+58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 58
0234h vmovdqu xmmword ptr [rsp+0A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 00 00 00
023dh vmovdqu xmm0,xmmword ptr [rsp+0A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 00 00 00
0246h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
024ch vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
0252h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
0258h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
025dh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0260h mov edi,[rcx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 79 08
0263h lea rcx,[rsp+0C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 00 00 00
026bh mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
026eh mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0272h mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
027ch mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
027fh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0283h mov r11,7FFDDB030F38h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f38h:imm64]         encoding(10 bytes) = 49 bb 38 0f 03 db fd 7f 00 00
028dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0292h mov rax,7FFDDB030F38h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f38h:imm64]         encoding(10 bytes) = 48 b8 38 0f 03 db fd 7f 00 00
029ch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
029eh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
02a0h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
02a3h jne short 02abh               ; JNE(Jne_rel8_64) [2ABh:jmp64]                        encoding(2 bytes) = 75 06
02a5h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
02a7h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
02a9h jmp short 02b2h               ; JMP(Jmp_rel8_64) [2B2h:jmp64]                        encoding(2 bytes) = eb 07
02abh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
02afh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
02b2h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
02b5h jbe short 032ch               ; JBE(Jbe_rel8_64) [32Ch:jmp64]                        encoding(2 bytes) = 76 75
02b7h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
02bah mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
02c4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02c7h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
02cah mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
02cdh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
02cfh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
02d2h mov eax,r14d                  ; MOV(Mov_r32_rm32) [EAX,R14D]                         encoding(3 bytes) = 41 8b c6
02d5h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
02d8h ja short 0320h                ; JA(Ja_rel8_64) [320h:jmp64]                          encoding(2 bytes) = 77 46
02dah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
02ddh add rcx,rbp                   ; ADD(Add_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 03 cd
02e0h cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
02e2h ja short 0326h                ; JA(Ja_rel8_64) [326h:jmp64]                          encoding(2 bytes) = 77 42
02e4h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
02e7h movsxd r8,edi                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDI]                     encoding(3 bytes) = 4c 63 c7
02eah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D1200h:jmp64]                encoding(5 bytes) = e8 11 0f 9d 5d
02efh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
02f2h lea rsi,[rsp+0C8h]            ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 c8 00 00 00
02fah call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F41B990h:jmp64]                encoding(5 bytes) = e8 91 b6 41 5f
02ffh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0301h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0304h add rsp,0D8h                  ; ADD(Add_rm64_imm32) [RSP,d8h:imm64]                  encoding(7 bytes) = 48 81 c4 d8 00 00 00
030bh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
030ch pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
030dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
030eh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
030fh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0311h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0313h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0314h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF925820h:jmp64]        encoding(5 bytes) = e8 07 55 92 ff
0319h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
031ah call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF925828h:jmp64]        encoding(5 bytes) = e8 09 55 92 ff
031fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0320h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF925820h:jmp64]        encoding(5 bytes) = e8 fb 54 92 ff
0325h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0326h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF925828h:jmp64]        encoding(5 bytes) = e8 fd 54 92 ff
032bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
032ch call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F547200h:jmp64]                encoding(5 bytes) = e8 cf 6e 54 5f
0331h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> BuildBytes => new byte[818]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0xD8,0x00,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x2C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xCA,0xE8,0x40,0x9C,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0x8D,0x8C,0x24,0x98,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0x89,0x76,0x3E,0x5F,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x67,0xC8,0x41,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x48,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0x48,0x89,0x08,0x89,0x50,0x08,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x00,0x00,0x00,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x2C,0xC8,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0xFF,0x50,0x18,0x0F,0xB6,0xC8,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x88,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x88,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x06,0xF0,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x78,0xC5,0xFA,0x6F,0x44,0x24,0x78,0xC5,0xFA,0x7F,0x44,0x24,0x68,0x48,0x8D,0x4C,0x24,0x68,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0xC8,0x00,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x30,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x48,0xB8,0x30,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x9D,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x5E,0x01,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x56,0x01,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0x31,0x10,0x9D,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xFD,0xC6,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xC8,0x02,0x0F,0xB6,0xC8,0x88,0x4F,0x10,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x58,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xDA,0xEE,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x58,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x4C,0x24,0x38,0x48,0x8B,0x31,0x8B,0x79,0x08,0x48,0x8D,0x8C,0x24,0xC8,0x00,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x38,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x48,0xB8,0x38,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x76,0x75,0x0F,0xB7,0x09,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC6,0x4C,0x3B,0xC0,0x77,0x46,0x48,0x63,0xC9,0x48,0x03,0xCD,0x3B,0xFA,0x77,0x42,0x48,0x8B,0xD6,0x4C,0x63,0xC7,0xE8,0x11,0x0F,0x9D,0x5D,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0xC8,0x00,0x00,0x00,0xE8,0x91,0xB6,0x41,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0xD8,0x00,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x07,0x55,0x92,0xFF,0xCC,0xE8,0x09,0x55,0x92,0xFF,0xCC,0xE8,0xFB,0x54,0x92,0xFF,0xCC,0xE8,0xFD,0x54,0x92,0xFF,0xCC,0xE8,0xCF,0x6E,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N4,N3,byte> Build(BinaryLogicOpKind:byte kind)
; location: [7FFDDB848220h, 7FFDDB84880Bh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,158h                  ; SUB(Sub_rm64_imm32) [RSP,158h:imm64]                 encoding(7 bytes) = 48 81 ec 58 01 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,4Ch                   ; MOV(Mov_r32_imm32) [ECX,4ch:imm32]                   encoding(5 bytes) = b9 4c 00 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0029h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
002bh lea rcx,[rsp+0F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 00 00 00
0033h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0037h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
003bh mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0045h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
004ah call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E71C0h:jmp64]                encoding(5 bytes) = e8 71 71 3e 5f
004fh mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
0059h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
005ch mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
005fh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0062h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
006ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C3C0h:jmp64]                encoding(5 bytes) = e8 4f c3 41 5f
0071h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0075h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
0078h lea rdx,[rsp+0F8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 00 00 00
0080h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0083h mov [rdx+8],eax               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(3 bytes) = 89 42 08
0086h vmovdqu xmm0,xmmword ptr [rsp+0F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 00 00 00
008fh vmovdqu xmmword ptr [rsp+148h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 01 00 00
0098h movzx ecx,sil                 ; MOVZX(Movzx_r32_rm8) [ECX,SIL]                       encoding(4 bytes) = 40 0f b6 ce
009ch call 7FFDDB841AD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF98B0h:jmp64]        encoding(5 bytes) = e8 0f 98 ff ff
00a1h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00a4h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
00aeh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00b3h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C3C0h:jmp64]                encoding(5 bytes) = e8 08 c3 41 5f
00b8h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00bbh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00beh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00c2h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c4h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
00c7h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00cah movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
00cdh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
00d0h lea rcx,[rsp+0E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 00 00 00
00d8h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
00dch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
00e0h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
00e4h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00e9h lea rdx,[rsp+0E8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e8 00 00 00
00f1h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
00f6h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
00f9h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
00fch mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
00ffh lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0104h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 c7 fd ff ff
0109h vmovdqu xmm0,xmmword ptr [rsp+0E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 00 00 00
0112h vmovdqu xmmword ptr [rsp+138h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 01 00 00
011bh vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
0124h vmovdqu xmmword ptr [rsp+0D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 00 00 00
012dh vmovdqu xmm0,xmmword ptr [rsp+0D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 00 00 00
0136h vmovdqu xmmword ptr [rsp+0C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 00 00 00
013fh lea rcx,[rsp+0C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 00 00 00
0147h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014ah mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
014dh lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
0155h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
0158h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
015ch mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0166h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0169h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
016dh mov r11,7FFDDB030F40h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f40h:imm64]         encoding(10 bytes) = 49 bb 40 0f 03 db fd 7f 00 00
0177h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0179h mov rax,7FFDDB030F40h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f40h:imm64]         encoding(10 bytes) = 48 b8 40 0f 03 db fd 7f 00 00
0183h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0185h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0187h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
018ah jne short 0192h               ; JNE(Jne_rel8_64) [192h:jmp64]                        encoding(2 bytes) = 75 06
018ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
018eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0190h jmp short 0199h               ; JMP(Jmp_rel8_64) [199h:jmp64]                        encoding(2 bytes) = eb 07
0192h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0196h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0199h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
019ch jbe near ptr 05e6h            ; JBE(Jbe_rel32_64) [5E6h:jmp64]                       encoding(6 bytes) = 0f 86 44 04 00 00
01a2h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
01a5h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
01afh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01b2h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
01b5h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
01b8h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
01bah add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
01bdh mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
01c0h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
01c3h ja near ptr 05b6h             ; JA(Ja_rel32_64) [5B6h:jmp64]                         encoding(6 bytes) = 0f 87 ed 03 00 00
01c9h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
01cch add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
01cfh cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
01d1h ja near ptr 05bch             ; JA(Ja_rel32_64) [5BCh:jmp64]                         encoding(6 bytes) = 0f 87 e5 03 00 00
01d7h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01dah movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
01ddh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D0CE0h:jmp64]                encoding(5 bytes) = e8 fe 0a 9d 5d
01e2h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
01ech mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01f1h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C3C0h:jmp64]                encoding(5 bytes) = e8 ca c1 41 5f
01f6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
01f9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01fch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0200h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0205h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0208h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
020bh or eax,4                      ; OR(Or_rm32_imm8) [EAX,4h:imm32]                      encoding(3 bytes) = 83 c8 04
020eh movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
0211h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0214h lea rcx,[rsp+0B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 00 00 00
021ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0220h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0224h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0228h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
022dh lea rdx,[rsp+0B8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b8 00 00 00
0235h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
023ah mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
023dh mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0240h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0243h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0248h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 83 fc ff ff
024dh vmovdqu xmm0,xmmword ptr [rsp+0B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 00 00 00
0256h vmovdqu xmmword ptr [rsp+128h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 01 00 00
025fh vmovdqu xmm0,xmmword ptr [rsp+128h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 01 00 00
0268h vmovdqu xmmword ptr [rsp+0A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 00 00 00
0271h vmovdqu xmm0,xmmword ptr [rsp+0A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 00 00 00
027ah vmovdqu xmmword ptr [rsp+98h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 00 00 00
0283h lea rcx,[rsp+98h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 00 00 00
028bh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
028eh mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
0291h lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
0299h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
029ch mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
02a0h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
02aah mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
02adh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
02b1h mov r11,7FFDDB030F48h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f48h:imm64]         encoding(10 bytes) = 49 bb 48 0f 03 db fd 7f 00 00
02bbh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
02c0h mov rax,7FFDDB030F48h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f48h:imm64]         encoding(10 bytes) = 48 b8 48 0f 03 db fd 7f 00 00
02cah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
02cch call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
02ceh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
02d1h jne short 02d9h               ; JNE(Jne_rel8_64) [2D9h:jmp64]                        encoding(2 bytes) = 75 06
02d3h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
02d5h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
02d7h jmp short 02e0h               ; JMP(Jmp_rel8_64) [2E0h:jmp64]                        encoding(2 bytes) = eb 07
02d9h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
02ddh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
02e0h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
02e3h jbe near ptr 05e6h            ; JBE(Jbe_rel32_64) [5E6h:jmp64]                       encoding(6 bytes) = 0f 86 fd 02 00 00
02e9h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
02ech mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
02f6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02f9h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
02fch mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
02ffh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0301h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0304h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
0307h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
030ah ja near ptr 05c2h             ; JA(Ja_rel32_64) [5C2h:jmp64]                         encoding(6 bytes) = 0f 87 b2 02 00 00
0310h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0313h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
0316h cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
0318h ja near ptr 05c8h             ; JA(Ja_rel32_64) [5C8h:jmp64]                         encoding(6 bytes) = 0f 87 aa 02 00 00
031eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0321h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
0324h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D0CE0h:jmp64]                encoding(5 bytes) = e8 b7 09 9d 5d
0329h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0333h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0338h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C3C0h:jmp64]                encoding(5 bytes) = e8 83 c0 41 5f
033dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0340h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0343h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0347h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0349h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
034fh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0352h or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
0355h movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
0358h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
035bh lea rcx,[rsp+88h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 00 00 00
0363h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0367h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
036bh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
036fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0374h lea rdx,[rsp+88h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 88 00 00 00
037ch lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
0381h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0384h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0387h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
038ah lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
038fh call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 3c fb ff ff
0394h vmovdqu xmm0,xmmword ptr [rsp+88h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 00 00 00
039dh vmovdqu xmmword ptr [rsp+118h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 01 00 00
03a6h vmovdqu xmm0,xmmword ptr [rsp+118h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 01 00 00
03afh vmovdqu xmmword ptr [rsp+78h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 78
03b5h vmovdqu xmm0,xmmword ptr [rsp+78h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 78
03bbh vmovdqu xmmword ptr [rsp+68h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 68
03c1h lea rcx,[rsp+68h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 68
03c6h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03c9h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
03cch lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
03d4h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
03d7h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
03dbh mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
03e5h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
03e8h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
03ech mov r11,7FFDDB030F50h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f50h:imm64]         encoding(10 bytes) = 49 bb 50 0f 03 db fd 7f 00 00
03f6h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
03fbh mov rax,7FFDDB030F50h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f50h:imm64]         encoding(10 bytes) = 48 b8 50 0f 03 db fd 7f 00 00
0405h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0407h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0409h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
040ch jne short 0414h               ; JNE(Jne_rel8_64) [414h:jmp64]                        encoding(2 bytes) = 75 06
040eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0410h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0412h jmp short 041bh               ; JMP(Jmp_rel8_64) [41Bh:jmp64]                        encoding(2 bytes) = eb 07
0414h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0418h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
041bh cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
041eh jbe near ptr 05e6h            ; JBE(Jbe_rel32_64) [5E6h:jmp64]                       encoding(6 bytes) = 0f 86 c2 01 00 00
0424h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0427h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
0431h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0434h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0437h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
043ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
043ch add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
043fh mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
0442h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0445h ja near ptr 05ceh             ; JA(Ja_rel32_64) [5CEh:jmp64]                         encoding(6 bytes) = 0f 87 83 01 00 00
044bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
044eh add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
0451h cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
0453h ja near ptr 05d4h             ; JA(Ja_rel32_64) [5D4h:jmp64]                         encoding(6 bytes) = 0f 87 7b 01 00 00
0459h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
045ch movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
045fh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D0CE0h:jmp64]                encoding(5 bytes) = e8 7c 08 9d 5d
0464h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
046eh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0473h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41C3C0h:jmp64]                encoding(5 bytes) = e8 48 bf 41 5f
0478h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
047bh mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
047fh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0484h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
048ah call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
048dh or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
0490h or eax,4                      ; OR(Or_rm32_imm8) [EAX,4h:imm32]                      encoding(3 bytes) = 83 c8 04
0493h movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
0496h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0499h lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
049eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
04a2h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
04a6h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
04aah mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
04afh lea rdx,[rsp+58h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 58
04b4h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
04b9h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
04bch mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
04bfh mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
04c2h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
04c7h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 04 fa ff ff
04cch vmovdqu xmm0,xmmword ptr [rsp+58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 58
04d2h vmovdqu xmmword ptr [rsp+108h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 01 00 00
04dbh vmovdqu xmm0,xmmword ptr [rsp+108h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 01 00 00
04e4h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
04eah vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
04f0h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
04f6h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
04fbh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
04feh mov edi,[rcx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 79 08
0501h lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
0509h mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
050ch mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0510h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
051ah mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
051dh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0521h mov r11,7FFDDB030F58h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f58h:imm64]         encoding(10 bytes) = 49 bb 58 0f 03 db fd 7f 00 00
052bh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0530h mov rax,7FFDDB030F58h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f58h:imm64]         encoding(10 bytes) = 48 b8 58 0f 03 db fd 7f 00 00
053ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
053ch call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
053eh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0541h jne short 0549h               ; JNE(Jne_rel8_64) [549h:jmp64]                        encoding(2 bytes) = 75 06
0543h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0545h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0547h jmp short 0550h               ; JMP(Jmp_rel8_64) [550h:jmp64]                        encoding(2 bytes) = eb 07
0549h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
054dh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0550h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0553h jbe near ptr 05e6h            ; JBE(Jbe_rel32_64) [5E6h:jmp64]                       encoding(6 bytes) = 0f 86 8d 00 00 00
0559h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
055ch mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
0566h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0569h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
056ch mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
056fh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0571h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0574h mov eax,r14d                  ; MOV(Mov_r32_rm32) [EAX,R14D]                         encoding(3 bytes) = 41 8b c6
0577h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
057ah ja short 05dah                ; JA(Ja_rel8_64) [5DAh:jmp64]                          encoding(2 bytes) = 77 5e
057ch movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
057fh add rcx,rbp                   ; ADD(Add_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 03 cd
0582h cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
0584h ja short 05e0h                ; JA(Ja_rel8_64) [5E0h:jmp64]                          encoding(2 bytes) = 77 5a
0586h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0589h movsxd r8,edi                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDI]                     encoding(3 bytes) = 4c 63 c7
058ch call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D0CE0h:jmp64]                encoding(5 bytes) = e8 4f 07 9d 5d
0591h mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0594h lea rsi,[rsp+148h]            ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 48 01 00 00
059ch call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F41B470h:jmp64]                encoding(5 bytes) = e8 cf ae 41 5f
05a1h movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
05a3h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
05a6h add rsp,158h                  ; ADD(Add_rm64_imm32) [RSP,158h:imm64]                 encoding(7 bytes) = 48 81 c4 58 01 00 00
05adh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
05aeh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
05afh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
05b0h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
05b1h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
05b3h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
05b5h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
05b6h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF925300h:jmp64]        encoding(5 bytes) = e8 45 4d 92 ff
05bbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05bch call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF925308h:jmp64]        encoding(5 bytes) = e8 47 4d 92 ff
05c1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05c2h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF925300h:jmp64]        encoding(5 bytes) = e8 39 4d 92 ff
05c7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05c8h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF925308h:jmp64]        encoding(5 bytes) = e8 3b 4d 92 ff
05cdh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05ceh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF925300h:jmp64]        encoding(5 bytes) = e8 2d 4d 92 ff
05d3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05d4h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF925308h:jmp64]        encoding(5 bytes) = e8 2f 4d 92 ff
05d9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05dah call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF925300h:jmp64]        encoding(5 bytes) = e8 21 4d 92 ff
05dfh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05e0h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF925308h:jmp64]        encoding(5 bytes) = e8 23 4d 92 ff
05e5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05e6h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F546CE0h:jmp64]                encoding(5 bytes) = e8 f5 66 54 5f
05ebh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> BuildBytes => new byte[1516]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x58,0x01,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x4C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xF2,0x48,0x8D,0x8C,0x24,0xF8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x71,0x71,0x3E,0x5F,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4F,0xC3,0x41,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x40,0x08,0x48,0x8D,0x94,0x24,0xF8,0x00,0x00,0x00,0x48,0x89,0x0A,0x89,0x42,0x08,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x01,0x00,0x00,0x40,0x0F,0xB6,0xCE,0xE8,0x0F,0x98,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x08,0xC3,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0xFF,0x50,0x18,0x0F,0xB6,0xC8,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xE8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xE8,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xC7,0xFD,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC8,0x00,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x40,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x48,0xB8,0x40,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x44,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0xED,0x03,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0xE5,0x03,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0xFE,0x0A,0x9D,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xCA,0xC1,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xC8,0x04,0x0F,0xB6,0xC8,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xB8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xB8,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x83,0xFC,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0x98,0x00,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x48,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x48,0xB8,0x48,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xFD,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0xB2,0x02,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0xAA,0x02,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0xB7,0x09,0x9D,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x83,0xC0,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xC8,0x02,0x0F,0xB6,0xC8,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x88,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x88,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x3C,0xFB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x78,0xC5,0xFA,0x6F,0x44,0x24,0x78,0xC5,0xFA,0x7F,0x44,0x24,0x68,0x48,0x8D,0x4C,0x24,0x68,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x50,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x48,0xB8,0x50,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xC2,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x83,0x01,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x7B,0x01,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0x7C,0x08,0x9D,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x48,0xBF,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xC8,0x02,0x83,0xC8,0x04,0x0F,0xB6,0xC8,0x88,0x4F,0x10,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x58,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x04,0xFA,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x58,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x4C,0x24,0x38,0x48,0x8B,0x31,0x8B,0x79,0x08,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x58,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x48,0xB8,0x58,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x8D,0x00,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC6,0x4C,0x3B,0xC0,0x77,0x5E,0x48,0x63,0xC9,0x48,0x03,0xCD,0x3B,0xFA,0x77,0x5A,0x48,0x8B,0xD6,0x4C,0x63,0xC7,0xE8,0x4F,0x07,0x9D,0x5D,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0x48,0x01,0x00,0x00,0xE8,0xCF,0xAE,0x41,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0x58,0x01,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x45,0x4D,0x92,0xFF,0xCC,0xE8,0x47,0x4D,0x92,0xFF,0xCC,0xE8,0x39,0x4D,0x92,0xFF,0xCC,0xE8,0x3B,0x4D,0x92,0xFF,0xCC,0xE8,0x2D,0x4D,0x92,0xFF,0xCC,0xE8,0x2F,0x4D,0x92,0xFF,0xCC,0xE8,0x21,0x4D,0x92,0xFF,0xCC,0xE8,0x23,0x4D,0x92,0xFF,0xCC,0xE8,0xF5,0x66,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N8,N4,byte> Build(TernaryOpKind:byte kind)
; location: [7FFDDB848B60h, 7FFDDB84A8B3h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,0C50h                 ; SUB(Sub_rm64_imm32) [RSP,c50h:imm64]                 encoding(7 bytes) = 48 81 ec 50 0c 00 00
000dh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0010h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0013h lea rdi,[rsp+20h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 20
0018h mov ecx,30Ch                  ; MOV(Mov_r32_imm32) [ECX,30ch:imm32]                  encoding(5 bytes) = b9 0c 03 00 00
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0021h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0024h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0027h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0029h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0033h mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
0038h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E6880h:jmp64]                encoding(5 bytes) = e8 43 68 3e 5f
003dh mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
0047h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
004ah mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
004dh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0050h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
005ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 21 ba 41 5f
005fh lea rcx,[rsp+0A78h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 0a 00 00
0067h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
006bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
006fh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0073h mov [rsp+0A70h],rcx           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 0a 00 00
007bh mov rcx,[rsp+0A70h]           ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 0a 00 00
0083h lea rdx,[rsp+0A78h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 78 0a 00 00
008bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
008eh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0091h mov [rsp+0A80h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 0a 00 00
0098h vmovdqu xmm0,xmmword ptr [rsp+0A78h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 0a 00 00
00a1h vmovdqu xmmword ptr [rsp+0A88h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 0a 00 00
00aah vmovdqu xmm0,xmmword ptr [rsp+0A88h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 0a 00 00
00b3h vmovdqu xmmword ptr [rsp+0C40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 0c 00 00
00bch movzx ecx,sil                 ; MOVZX(Movzx_r32_rm8) [ECX,SIL]                       encoding(4 bytes) = 40 0f b6 ce
00c0h call 7FFDDB844200h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB6A0h:jmp64]        encoding(5 bytes) = e8 db b5 ff ff
00c5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c8h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
00d2h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00d7h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 a4 b9 41 5f
00dch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00dfh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00e1h mov [rsp+0A68h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 0a 00 00
00e8h mov edx,[rsp+0A68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0a 00 00
00efh mov [rsp+0A60h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 0a 00 00
00f6h mov r8d,[rsp+0A60h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 60 0a 00 00
00feh mov [rsp+0A58h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 0a 00 00
0105h mov r9d,[rsp+0A58h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 58 0a 00 00
010dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0110h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0114h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0117h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0119h mov [rsp+0A50h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 0a 00 00
0120h mov ecx,[rsp+0A50h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 0a 00 00
0127h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0129h mov [rsp+0A48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0a 00 00
0130h mov edx,[rsp+0A48h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 0a 00 00
0137h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
013ah mov [rsp+0A40h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 40 0a 00 00
0142h mov r8d,[rsp+0A40h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 40 0a 00 00
014ah lea r9,[rsp+0A38h]            ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 38 0a 00 00
0152h mov [r9],eax                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),EAX]         encoding(3 bytes) = 41 89 01
0155h lea rax,[rsp+0A30h]           ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 30 0a 00 00
015dh mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
015fh lea rcx,[rsp+0A28h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 0a 00 00
0167h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0169h lea rcx,[rsp+0A20h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 0a 00 00
0171h mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
0174h mov ecx,[rsp+0A38h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 0a 00 00
017bh mov [rsp+0A18h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 0a 00 00
0182h mov ecx,[rsp+0A18h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 0a 00 00
0189h mov edx,[rsp+0A30h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 0a 00 00
0190h mov [rsp+0A10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0a 00 00
0197h mov edx,[rsp+0A10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0a 00 00
019eh shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
01a0h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
01a2h mov edx,[rsp+0A28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0a 00 00
01a9h mov [rsp+0A08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0a 00 00
01b0h mov edx,[rsp+0A08h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 0a 00 00
01b7h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
01bah or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
01bch mov edx,[rsp+0A20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0a 00 00
01c3h mov [rsp+0A00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0a 00 00
01cah mov edx,[rsp+0A00h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 0a 00 00
01d1h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
01d4h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
01d6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01d9h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
01dch lea rcx,[rsp+9F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 09 00 00
01e4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
01e8h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
01ech lea rcx,[rsp+9D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 09 00 00
01f4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
01f8h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
01fch add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0200h mov [rsp+9C8h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 c8 09 00 00
0208h mov rcx,[rsp+9C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 09 00 00
0210h lea rdx,[rsp+9D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 09 00 00
0218h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
021bh mov dword ptr [rsp+9D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 09 00 00 01 00 00 00
0226h vmovdqu xmm0,xmmword ptr [rsp+9D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 09 00 00
022fh vmovdqu xmmword ptr [rsp+9E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 09 00 00
0238h lea rcx,[rsp+9F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 09 00 00
0240h vmovdqu xmm0,xmmword ptr [rsp+9E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 09 00 00
0249h vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
024fh lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
0254h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 77 fc ff ff
0259h vmovdqu xmm0,xmmword ptr [rsp+9F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 09 00 00
0262h vmovdqu xmmword ptr [rsp+0C30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 0c 00 00
026bh vmovdqu xmm0,xmmword ptr [rsp+0C30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 0c 00 00
0274h vmovdqu xmmword ptr [rsp+9B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 09 00 00
027dh vmovdqu xmm0,xmmword ptr [rsp+9B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 09 00 00
0286h vmovdqu xmmword ptr [rsp+9A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 09 00 00
028fh vmovdqu xmm0,xmmword ptr [rsp+9A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 09 00 00
0298h vmovdqu xmmword ptr [rsp+998h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 09 00 00
02a1h vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
02aah vmovdqu xmmword ptr [rsp+988h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 09 00 00
02b3h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
02bdh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
02c0h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
02c4h mov r11,7FFDDB030F60h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f60h:imm64]         encoding(10 bytes) = 49 bb 60 0f 03 db fd 7f 00 00
02ceh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
02d0h mov rax,7FFDDB030F60h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f60h:imm64]         encoding(10 bytes) = 48 b8 60 0f 03 db fd 7f 00 00
02dah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
02dch call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
02deh lea rcx,[rsp+958h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 09 00 00
02e6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02eah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
02eeh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
02f1h jne short 0305h               ; JNE(Jne_rel8_64) [305h:jmp64]                        encoding(2 bytes) = 75 12
02f3h lea rax,[rsp+958h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 09 00 00
02fbh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02ffh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0303h jmp short 032eh               ; JMP(Jmp_rel8_64) [32Eh:jmp64]                        encoding(2 bytes) = eb 29
0305h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0309h mov [rsp+950h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 50 09 00 00
0311h mov rcx,[rsp+950h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 09 00 00
0319h lea rdx,[rsp+958h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 09 00 00
0321h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0324h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0327h mov [rsp+960h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 09 00 00
032eh vmovdqu xmm0,xmmword ptr [rsp+958h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 09 00 00
0337h vmovdqu xmmword ptr [rsp+968h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 09 00 00
0340h cmp dword ptr [rsp+970h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 70 09 00 00 00
0348h jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 00 1a 00 00
034eh mov rcx,[rsp+968h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 68 09 00 00
0356h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0359h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
0363h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0366h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0369h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
036ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
036eh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0371h mov eax,[rsp+990h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 09 00 00
0378h mov edi,eax                   ; MOV(Mov_r32_rm32) [EDI,EAX]                          encoding(2 bytes) = 8b f8
037ah cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
037dh ja near ptr 1ceeh             ; JA(Ja_rel32_64) [1CEEh:jmp64]                        encoding(6 bytes) = 0f 87 6b 19 00 00
0383h mov rbp,[rsp+988h]            ; MOV(Mov_r64_rm64) [RBP,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b ac 24 88 09 00 00
038bh mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
038eh lea rax,[rsp+940h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 09 00 00
0396h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
039ah vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
039eh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
03a1h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
03a4h mov [rsp+938h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 38 09 00 00
03ach mov rcx,[rsp+938h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 09 00 00
03b4h lea r8,[rsp+940h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 40 09 00 00
03bch mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
03bfh mov [rsp+948h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 09 00 00
03c6h vmovdqu xmm0,xmmword ptr [rsp+940h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 09 00 00
03cfh vmovdqu xmmword ptr [rsp+978h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 09 00 00
03d8h vmovdqu xmm0,xmmword ptr [rsp+978h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 09 00 00
03e1h vmovdqu xmmword ptr [rsp+928h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 09 00 00
03eah mov ecx,[rsp+9A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 09 00 00
03f1h cmp ecx,[rsp+930h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 30 09 00 00
03f8h ja near ptr 1cf4h             ; JA(Ja_rel32_64) [1CF4h:jmp64]                        encoding(6 bytes) = 0f 87 f6 18 00 00
03feh mov rcx,[rsp+928h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 09 00 00
0406h mov rdx,[rsp+998h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 09 00 00
040eh mov r8d,[rsp+9A0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a0 09 00 00
0416h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0419h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 82 ff 9c 5d
041eh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0428h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
042dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 4e b6 41 5f
0432h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0435h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0437h mov [rsp+920h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 09 00 00
043eh mov edx,[rsp+920h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 09 00 00
0445h mov [rsp+918h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 09 00 00
044ch mov r8d,[rsp+918h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 18 09 00 00
0454h mov dword ptr [rsp+910h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 10 09 00 00 01 00 00 00
045fh mov r9d,[rsp+910h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 10 09 00 00
0467h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
046ah mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
046eh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0471h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0473h mov [rsp+908h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 09 00 00
047ah mov ecx,[rsp+908h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 09 00 00
0481h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0483h mov [rsp+900h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 09 00 00
048ah mov edx,[rsp+900h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 09 00 00
0491h mov dword ptr [rsp+8F8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 f8 08 00 00 01 00 00 00
049ch mov r8d,[rsp+8F8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 f8 08 00 00
04a4h lea r9,[rsp+8F0h]             ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 f0 08 00 00
04ach mov [r9],eax                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),EAX]         encoding(3 bytes) = 41 89 01
04afh lea rax,[rsp+8E8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 e8 08 00 00
04b7h mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
04b9h lea rcx,[rsp+8E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 08 00 00
04c1h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
04c3h lea rcx,[rsp+8D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 08 00 00
04cbh mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
04ceh mov ecx,[rsp+8F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 08 00 00
04d5h mov [rsp+8D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 08 00 00
04dch mov ecx,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 08 00 00
04e3h mov edx,[rsp+8E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 08 00 00
04eah mov [rsp+8C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 08 00 00
04f1h mov edx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 08 00 00
04f8h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
04fah or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
04fch mov edx,[rsp+8E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 08 00 00
0503h mov [rsp+8C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 08 00 00
050ah mov edx,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 08 00 00
0511h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0514h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0516h mov edx,[rsp+8D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 08 00 00
051dh mov [rsp+8B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 08 00 00
0524h mov edx,[rsp+8B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 08 00 00
052bh shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
052eh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0530h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0533h mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
0537h lea rcx,[rsp+8A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 08 00 00
053fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0543h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0547h lea rcx,[rsp+888h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 08 00 00
054fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0553h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0557h add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
055bh mov [rsp+880h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 80 08 00 00
0563h mov rcx,[rsp+880h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 80 08 00 00
056bh lea rdx,[rsp+888h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 88 08 00 00
0573h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0576h mov dword ptr [rsp+890h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 90 08 00 00 01 00 00 00
0581h vmovdqu xmm0,xmmword ptr [rsp+888h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 08 00 00
058ah vmovdqu xmmword ptr [rsp+898h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 08 00 00
0593h lea rcx,[rsp+8A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 08 00 00
059bh vmovdqu xmm0,xmmword ptr [rsp+898h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 08 00 00
05a4h vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
05aah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
05afh call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 1c f9 ff ff
05b4h vmovdqu xmm0,xmmword ptr [rsp+8A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 08 00 00
05bdh vmovdqu xmmword ptr [rsp+0C20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 0c 00 00
05c6h vmovdqu xmm0,xmmword ptr [rsp+0C20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0c 00 00
05cfh vmovdqu xmmword ptr [rsp+870h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 08 00 00
05d8h vmovdqu xmm0,xmmword ptr [rsp+870h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 08 00 00
05e1h vmovdqu xmmword ptr [rsp+860h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 08 00 00
05eah vmovdqu xmm0,xmmword ptr [rsp+860h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 08 00 00
05f3h vmovdqu xmmword ptr [rsp+850h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 08 00 00
05fch vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
0605h vmovdqu xmmword ptr [rsp+840h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 08 00 00
060eh mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
0618h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
061bh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
061fh mov r11,7FFDDB030F68h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f68h:imm64]         encoding(10 bytes) = 49 bb 68 0f 03 db fd 7f 00 00
0629h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
062eh mov rax,7FFDDB030F68h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f68h:imm64]         encoding(10 bytes) = 48 b8 68 0f 03 db fd 7f 00 00
0638h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
063ah call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
063ch lea rcx,[rsp+810h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 10 08 00 00
0644h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0648h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
064ch test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
064fh jne short 0663h               ; JNE(Jne_rel8_64) [663h:jmp64]                        encoding(2 bytes) = 75 12
0651h lea rax,[rsp+810h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 10 08 00 00
0659h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
065dh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0661h jmp short 068ch               ; JMP(Jmp_rel8_64) [68Ch:jmp64]                        encoding(2 bytes) = eb 29
0663h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0667h mov [rsp+808h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 08 08 00 00
066fh mov rcx,[rsp+808h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 08 08 00 00
0677h lea rdx,[rsp+810h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 10 08 00 00
067fh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0682h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0685h mov [rsp+818h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 08 00 00
068ch vmovdqu xmm0,xmmword ptr [rsp+810h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 08 00 00
0695h vmovdqu xmmword ptr [rsp+820h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 08 00 00
069eh cmp dword ptr [rsp+828h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 28 08 00 00 00
06a6h jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 a2 16 00 00
06ach mov rcx,[rsp+820h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 20 08 00 00
06b4h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
06b7h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
06c1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06c4h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
06c7h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
06cah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
06cch add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
06cfh cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
06d2h ja near ptr 1cfah             ; JA(Ja_rel32_64) [1CFAh:jmp64]                        encoding(6 bytes) = 0f 87 22 16 00 00
06d8h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
06dbh lea rax,[rsp+7F8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 f8 07 00 00
06e3h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
06e7h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
06ebh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
06eeh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
06f1h mov [rsp+7F0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 f0 07 00 00
06f9h mov rcx,[rsp+7F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 07 00 00
0701h lea r8,[rsp+7F8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 f8 07 00 00
0709h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
070ch mov [rsp+800h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 08 00 00
0713h vmovdqu xmm0,xmmword ptr [rsp+7F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 07 00 00
071ch vmovdqu xmmword ptr [rsp+830h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 08 00 00
0725h vmovdqu xmm0,xmmword ptr [rsp+830h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 08 00 00
072eh vmovdqu xmmword ptr [rsp+7E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 07 00 00
0737h mov ecx,[rsp+858h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 08 00 00
073eh cmp ecx,[rsp+7E8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 e8 07 00 00
0745h ja near ptr 1d00h             ; JA(Ja_rel32_64) [1D00h:jmp64]                        encoding(6 bytes) = 0f 87 b5 15 00 00
074bh mov rcx,[rsp+7E0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e0 07 00 00
0753h mov rdx,[rsp+850h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 50 08 00 00
075bh mov r8d,[rsp+858h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 58 08 00 00
0763h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0766h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 35 fc 9c 5d
076bh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0775h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
077ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 01 b3 41 5f
077fh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0782h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0784h mov [rsp+7D8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 07 00 00
078bh mov edx,[rsp+7D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 07 00 00
0792h mov dword ptr [rsp+7D0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d0 07 00 00 01 00 00 00
079dh mov r8d,[rsp+7D0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d0 07 00 00
07a5h mov [rsp+7C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 07 00 00
07ach mov r9d,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 c8 07 00 00
07b4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
07b7h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
07bbh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
07beh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
07c0h mov [rsp+7C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 07 00 00
07c7h mov ecx,[rsp+7C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 07 00 00
07ceh mov dword ptr [rsp+7B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 07 00 00 01 00 00 00
07d9h mov edx,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 07 00 00
07e0h mov [rsp+0C18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0c 00 00
07e7h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
07e9h mov [rsp+7B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 07 00 00
07f0h mov edx,[rsp+7B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 07 00 00
07f7h mov [rsp+0C10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0c 00 00
07feh lea rdx,[rsp+7A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 07 00 00
0806h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0808h lea rdx,[rsp+7A0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a0 07 00 00
0810h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0812h mov ecx,[rsp+0C18h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 0c 00 00
0819h mov [rsp+798h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 07 00 00
0820h mov ecx,[rsp+0C10h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 0c 00 00
0827h mov [rsp+790h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 07 00 00
082eh mov ecx,[rsp+7A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 07 00 00
0835h mov [rsp+788h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 07 00 00
083ch mov ecx,[rsp+788h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 07 00 00
0843h mov edx,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 07 00 00
084ah mov [rsp+780h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 07 00 00
0851h mov edx,[rsp+780h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 07 00 00
0858h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
085ah or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
085ch mov edx,[rsp+798h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 07 00 00
0863h mov [rsp+778h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 07 00 00
086ah mov edx,[rsp+778h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 07 00 00
0871h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0874h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0876h mov edx,[rsp+790h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 07 00 00
087dh mov [rsp+770h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 07 00 00
0884h mov edx,[rsp+770h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 07 00 00
088bh shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
088eh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0890h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0893h mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
0897h lea rcx,[rsp+760h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 07 00 00
089fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08a3h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
08a7h lea rcx,[rsp+740h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 07 00 00
08afh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08b3h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
08b7h add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
08bbh mov [rsp+738h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 38 07 00 00
08c3h mov rcx,[rsp+738h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 07 00 00
08cbh lea rdx,[rsp+740h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 07 00 00
08d3h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
08d6h mov dword ptr [rsp+748h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 48 07 00 00 01 00 00 00
08e1h vmovdqu xmm0,xmmword ptr [rsp+740h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 07 00 00
08eah vmovdqu xmmword ptr [rsp+750h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 07 00 00
08f3h lea rcx,[rsp+760h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 07 00 00
08fbh vmovdqu xmm0,xmmword ptr [rsp+750h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 07 00 00
0904h vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
090ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
090fh call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 bc f5 ff ff
0914h vmovdqu xmm0,xmmword ptr [rsp+760h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 07 00 00
091dh vmovdqu xmmword ptr [rsp+0C00h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 0c 00 00
0926h vmovdqu xmm0,xmmword ptr [rsp+0C00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0c 00 00
092fh vmovdqu xmmword ptr [rsp+728h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 07 00 00
0938h vmovdqu xmm0,xmmword ptr [rsp+728h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 07 00 00
0941h vmovdqu xmmword ptr [rsp+718h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 07 00 00
094ah vmovdqu xmm0,xmmword ptr [rsp+718h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 07 00 00
0953h vmovdqu xmmword ptr [rsp+708h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 07 00 00
095ch vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
0965h vmovdqu xmmword ptr [rsp+6F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 06 00 00
096eh mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
0978h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
097bh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
097fh mov r11,7FFDDB030F70h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f70h:imm64]         encoding(10 bytes) = 49 bb 70 0f 03 db fd 7f 00 00
0989h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
098eh mov rax,7FFDDB030F70h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f70h:imm64]         encoding(10 bytes) = 48 b8 70 0f 03 db fd 7f 00 00
0998h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
099ah call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
099ch lea rcx,[rsp+6C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 06 00 00
09a4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
09a8h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
09ach test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
09afh jne short 09c3h               ; JNE(Jne_rel8_64) [9C3h:jmp64]                        encoding(2 bytes) = 75 12
09b1h lea rax,[rsp+6C8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c8 06 00 00
09b9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
09bdh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
09c1h jmp short 09ech               ; JMP(Jmp_rel8_64) [9ECh:jmp64]                        encoding(2 bytes) = eb 29
09c3h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
09c7h mov [rsp+6C0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 c0 06 00 00
09cfh mov rcx,[rsp+6C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 06 00 00
09d7h lea rdx,[rsp+6C8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c8 06 00 00
09dfh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
09e2h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
09e5h mov [rsp+6D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 06 00 00
09ech vmovdqu xmm0,xmmword ptr [rsp+6C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 06 00 00
09f5h vmovdqu xmmword ptr [rsp+6D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 06 00 00
09feh cmp dword ptr [rsp+6E0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 e0 06 00 00 00
0a06h jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 42 13 00 00
0a0ch mov rcx,[rsp+6D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 06 00 00
0a14h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0a17h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
0a21h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a24h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0a27h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0a2ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0a2ch add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0a2fh cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
0a32h ja near ptr 1d06h             ; JA(Ja_rel32_64) [1D06h:jmp64]                        encoding(6 bytes) = 0f 87 ce 12 00 00
0a38h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0a3bh lea rax,[rsp+6B0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b0 06 00 00
0a43h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a47h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0a4bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0a4eh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0a51h mov [rsp+6A8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a8 06 00 00
0a59h mov rcx,[rsp+6A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 06 00 00
0a61h lea r8,[rsp+6B0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 b0 06 00 00
0a69h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0a6ch mov [rsp+6B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 06 00 00
0a73h vmovdqu xmm0,xmmword ptr [rsp+6B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 06 00 00
0a7ch vmovdqu xmmword ptr [rsp+6E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 06 00 00
0a85h vmovdqu xmm0,xmmword ptr [rsp+6E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 06 00 00
0a8eh vmovdqu xmmword ptr [rsp+698h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 06 00 00
0a97h mov ecx,[rsp+710h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 07 00 00
0a9eh cmp ecx,[rsp+6A0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 a0 06 00 00
0aa5h ja near ptr 1d0ch             ; JA(Ja_rel32_64) [1D0Ch:jmp64]                        encoding(6 bytes) = 0f 87 61 12 00 00
0aabh mov rcx,[rsp+698h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 06 00 00
0ab3h mov rdx,[rsp+708h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 08 07 00 00
0abbh mov r8d,[rsp+710h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 10 07 00 00
0ac3h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0ac6h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 d5 f8 9c 5d
0acbh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0ad5h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0adah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 a1 af 41 5f
0adfh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0ae2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0ae4h mov [rsp+690h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 06 00 00
0aebh mov ecx,[rsp+690h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 06 00 00
0af2h mov [rsp+0BF8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 0b 00 00
0af9h mov dword ptr [rsp+688h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 88 06 00 00 01 00 00 00
0b04h mov ecx,[rsp+688h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 06 00 00
0b0bh mov [rsp+0BF0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 0b 00 00
0b12h mov dword ptr [rsp+680h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 80 06 00 00 01 00 00 00
0b1dh mov ecx,[rsp+680h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 06 00 00
0b24h mov [rsp+0BE8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 0b 00 00
0b2bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0b2eh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0b32h mov edx,[rsp+0BF8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 0b 00 00
0b39h mov r8d,[rsp+0BF0h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 f0 0b 00 00
0b41h mov r9d,[rsp+0BE8h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 e8 0b 00 00
0b49h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0b4ch mov [rsp+0BE0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e0 0b 00 00
0b53h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0b55h mov [rsp+678h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 06 00 00
0b5ch mov ecx,[rsp+678h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 06 00 00
0b63h mov [rsp+0BD8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 0b 00 00
0b6ah mov dword ptr [rsp+670h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 70 06 00 00 01 00 00 00
0b75h mov ecx,[rsp+670h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 06 00 00
0b7ch mov [rsp+0BD0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 0b 00 00
0b83h mov dword ptr [rsp+668h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 68 06 00 00 01 00 00 00
0b8eh mov ecx,[rsp+668h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 06 00 00
0b95h mov [rsp+0BC8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 0b 00 00
0b9ch mov ecx,[rsp+0BE0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 0b 00 00
0ba3h mov [rsp+660h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 06 00 00
0baah mov ecx,[rsp+0BD8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 0b 00 00
0bb1h mov [rsp+658h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 06 00 00
0bb8h mov ecx,[rsp+0BD0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 0b 00 00
0bbfh mov [rsp+650h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 06 00 00
0bc6h mov ecx,[rsp+0BC8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 0b 00 00
0bcdh mov [rsp+648h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 06 00 00
0bd4h mov ecx,[rsp+660h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 06 00 00
0bdbh mov [rsp+640h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 06 00 00
0be2h mov ecx,[rsp+640h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 06 00 00
0be9h mov edx,[rsp+658h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 06 00 00
0bf0h mov [rsp+638h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 06 00 00
0bf7h mov edx,[rsp+638h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 06 00 00
0bfeh shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0c00h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0c02h mov edx,[rsp+650h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 06 00 00
0c09h mov [rsp+630h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 06 00 00
0c10h mov edx,[rsp+630h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 06 00 00
0c17h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0c1ah or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0c1ch mov edx,[rsp+648h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 06 00 00
0c23h mov [rsp+628h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 06 00 00
0c2ah mov edx,[rsp+628h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 06 00 00
0c31h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
0c34h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0c36h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0c39h mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
0c3dh lea rcx,[rsp+618h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 06 00 00
0c45h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c49h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0c4dh lea rcx,[rsp+5F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 05 00 00
0c55h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c59h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0c5dh add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
0c61h mov [rsp+5F0h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 f0 05 00 00
0c69h mov rcx,[rsp+5F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 05 00 00
0c71h lea rdx,[rsp+5F8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 05 00 00
0c79h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0c7ch mov dword ptr [rsp+600h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 00 06 00 00 01 00 00 00
0c87h vmovdqu xmm0,xmmword ptr [rsp+5F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 05 00 00
0c90h vmovdqu xmmword ptr [rsp+608h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 06 00 00
0c99h lea rcx,[rsp+618h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 06 00 00
0ca1h vmovdqu xmm0,xmmword ptr [rsp+608h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 06 00 00
0caah vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0cb0h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
0cb5h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 16 f2 ff ff
0cbah vmovdqu xmm0,xmmword ptr [rsp+618h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 06 00 00
0cc3h vmovdqu xmmword ptr [rsp+0BB8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 0b 00 00
0ccch vmovdqu xmm0,xmmword ptr [rsp+0BB8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 0b 00 00
0cd5h vmovdqu xmmword ptr [rsp+5E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 05 00 00
0cdeh vmovdqu xmm0,xmmword ptr [rsp+5E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 05 00 00
0ce7h vmovdqu xmmword ptr [rsp+5D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 05 00 00
0cf0h vmovdqu xmm0,xmmword ptr [rsp+5D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 05 00 00
0cf9h vmovdqu xmmword ptr [rsp+5C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 05 00 00
0d02h vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
0d0bh vmovdqu xmmword ptr [rsp+5B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 05 00 00
0d14h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
0d1eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0d21h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0d25h mov r11,7FFDDB030F78h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f78h:imm64]         encoding(10 bytes) = 49 bb 78 0f 03 db fd 7f 00 00
0d2fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0d34h mov rax,7FFDDB030F78h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f78h:imm64]         encoding(10 bytes) = 48 b8 78 0f 03 db fd 7f 00 00
0d3eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0d40h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0d42h lea rcx,[rsp+580h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 05 00 00
0d4ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d4eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0d52h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0d55h jne short 0d69h               ; JNE(Jne_rel8_64) [D69h:jmp64]                        encoding(2 bytes) = 75 12
0d57h lea rax,[rsp+580h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 80 05 00 00
0d5fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d63h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0d67h jmp short 0d92h               ; JMP(Jmp_rel8_64) [D92h:jmp64]                        encoding(2 bytes) = eb 29
0d69h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0d6dh mov [rsp+578h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 78 05 00 00
0d75h mov rcx,[rsp+578h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 05 00 00
0d7dh lea rdx,[rsp+580h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 05 00 00
0d85h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0d88h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0d8bh mov [rsp+588h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 05 00 00
0d92h vmovdqu xmm0,xmmword ptr [rsp+580h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 05 00 00
0d9bh vmovdqu xmmword ptr [rsp+590h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 05 00 00
0da4h cmp dword ptr [rsp+598h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 98 05 00 00 00
0dach jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 9c 0f 00 00
0db2h mov rcx,[rsp+590h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 05 00 00
0dbah movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0dbdh mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
0dc7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0dcah mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0dcdh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0dd0h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0dd2h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0dd5h cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
0dd8h ja near ptr 1d12h             ; JA(Ja_rel32_64) [1D12h:jmp64]                        encoding(6 bytes) = 0f 87 34 0f 00 00
0ddeh mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0de1h lea rax,[rsp+568h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 68 05 00 00
0de9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0dedh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0df1h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0df4h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0df7h mov [rsp+560h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 60 05 00 00
0dffh mov rcx,[rsp+560h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 05 00 00
0e07h lea r8,[rsp+568h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 68 05 00 00
0e0fh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0e12h mov [rsp+570h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 05 00 00
0e19h vmovdqu xmm0,xmmword ptr [rsp+568h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 05 00 00
0e22h vmovdqu xmmword ptr [rsp+5A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 05 00 00
0e2bh vmovdqu xmm0,xmmword ptr [rsp+5A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 05 00 00
0e34h vmovdqu xmmword ptr [rsp+550h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 05 00 00
0e3dh mov ecx,[rsp+5C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 05 00 00
0e44h cmp ecx,[rsp+558h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 58 05 00 00
0e4bh ja near ptr 1d18h             ; JA(Ja_rel32_64) [1D18h:jmp64]                        encoding(6 bytes) = 0f 87 c7 0e 00 00
0e51h mov rcx,[rsp+550h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 05 00 00
0e59h mov rdx,[rsp+5C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 05 00 00
0e61h mov r8d,[rsp+5C8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c8 05 00 00
0e69h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0e6ch call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 2f f5 9c 5d
0e71h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0e7bh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0e80h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 fb ab 41 5f
0e85h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0e88h mov dword ptr [rsp+548h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 48 05 00 00 01 00 00 00
0e93h mov ecx,[rsp+548h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 05 00 00
0e9ah mov [rsp+0BB0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 0b 00 00
0ea1h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0ea3h mov [rsp+540h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 05 00 00
0eaah mov ecx,[rsp+540h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 05 00 00
0eb1h mov [rsp+0BA8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 0b 00 00
0eb8h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0ebah mov [rsp+538h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 05 00 00
0ec1h mov ecx,[rsp+538h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 05 00 00
0ec8h mov [rsp+0BA0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 0b 00 00
0ecfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0ed2h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0ed6h mov edx,[rsp+0BB0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 0b 00 00
0eddh mov r8d,[rsp+0BA8h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a8 0b 00 00
0ee5h mov r9d,[rsp+0BA0h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 a0 0b 00 00
0eedh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0ef0h mov [rsp+0B98h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 98 0b 00 00
0ef7h mov dword ptr [rsp+530h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 30 05 00 00 01 00 00 00
0f02h mov ecx,[rsp+530h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 05 00 00
0f09h mov [rsp+0B90h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 0b 00 00
0f10h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0f12h mov [rsp+528h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 05 00 00
0f19h mov ecx,[rsp+528h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 05 00 00
0f20h mov [rsp+0B88h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 0b 00 00
0f27h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0f29h mov [rsp+520h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 05 00 00
0f30h mov ecx,[rsp+520h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 05 00 00
0f37h mov [rsp+0B80h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 0b 00 00
0f3eh mov ecx,[rsp+0B98h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 0b 00 00
0f45h mov [rsp+518h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 05 00 00
0f4ch mov ecx,[rsp+0B90h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 0b 00 00
0f53h mov [rsp+510h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 05 00 00
0f5ah mov ecx,[rsp+0B88h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 0b 00 00
0f61h mov [rsp+508h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 05 00 00
0f68h mov ecx,[rsp+0B80h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 0b 00 00
0f6fh mov [rsp+500h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 05 00 00
0f76h mov ecx,[rsp+518h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 05 00 00
0f7dh mov [rsp+4F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 04 00 00
0f84h mov ecx,[rsp+4F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 04 00 00
0f8bh mov edx,[rsp+510h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 05 00 00
0f92h mov [rsp+4F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 04 00 00
0f99h mov edx,[rsp+4F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 04 00 00
0fa0h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0fa2h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0fa4h mov edx,[rsp+508h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 05 00 00
0fabh mov [rsp+4E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 04 00 00
0fb2h mov edx,[rsp+4E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 04 00 00
0fb9h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0fbch or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0fbeh mov edx,[rsp+500h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 05 00 00
0fc5h mov [rsp+4E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 04 00 00
0fcch mov edx,[rsp+4E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 04 00 00
0fd3h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
0fd6h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0fd8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0fdbh mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
0fdfh lea rcx,[rsp+4D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 04 00 00
0fe7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0febh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0fefh lea rcx,[rsp+4B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 04 00 00
0ff7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0ffbh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0fffh add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
1003h mov [rsp+4A8h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 a8 04 00 00
100bh mov rcx,[rsp+4A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 04 00 00
1013h lea rdx,[rsp+4B0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b0 04 00 00
101bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
101eh mov dword ptr [rsp+4B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 04 00 00 01 00 00 00
1029h vmovdqu xmm0,xmmword ptr [rsp+4B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 04 00 00
1032h vmovdqu xmmword ptr [rsp+4C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 04 00 00
103bh lea rcx,[rsp+4D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 04 00 00
1043h vmovdqu xmm0,xmmword ptr [rsp+4C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 04 00 00
104ch vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
1052h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
1057h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 74 ee ff ff
105ch vmovdqu xmm0,xmmword ptr [rsp+4D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 04 00 00
1065h vmovdqu xmmword ptr [rsp+0B70h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 0b 00 00
106eh vmovdqu xmm0,xmmword ptr [rsp+0B70h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 0b 00 00
1077h vmovdqu xmmword ptr [rsp+498h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 04 00 00
1080h vmovdqu xmm0,xmmword ptr [rsp+498h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 04 00 00
1089h vmovdqu xmmword ptr [rsp+488h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 04 00 00
1092h vmovdqu xmm0,xmmword ptr [rsp+488h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 04 00 00
109bh vmovdqu xmmword ptr [rsp+478h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 04 00 00
10a4h vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
10adh vmovdqu xmmword ptr [rsp+468h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 04 00 00
10b6h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
10c0h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
10c3h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
10c7h mov r11,7FFDDB030F80h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f80h:imm64]         encoding(10 bytes) = 49 bb 80 0f 03 db fd 7f 00 00
10d1h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
10d6h mov rax,7FFDDB030F80h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f80h:imm64]         encoding(10 bytes) = 48 b8 80 0f 03 db fd 7f 00 00
10e0h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
10e2h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
10e4h lea rcx,[rsp+438h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 04 00 00
10ech vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
10f0h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
10f4h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
10f7h jne short 110bh               ; JNE(Jne_rel8_64) [110Bh:jmp64]                       encoding(2 bytes) = 75 12
10f9h lea rax,[rsp+438h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 38 04 00 00
1101h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1105h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1109h jmp short 1134h               ; JMP(Jmp_rel8_64) [1134h:jmp64]                       encoding(2 bytes) = eb 29
110bh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
110fh mov [rsp+430h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 30 04 00 00
1117h mov rcx,[rsp+430h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 04 00 00
111fh lea rdx,[rsp+438h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 04 00 00
1127h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
112ah mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
112dh mov [rsp+440h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 04 00 00
1134h vmovdqu xmm0,xmmword ptr [rsp+438h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 04 00 00
113dh vmovdqu xmmword ptr [rsp+448h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 04 00 00
1146h cmp dword ptr [rsp+450h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 50 04 00 00 00
114eh jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 fa 0b 00 00
1154h mov rcx,[rsp+448h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 04 00 00
115ch movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
115fh mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
1169h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
116ch mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
116fh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1172h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
1174h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1177h cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
117ah ja near ptr 1d1eh             ; JA(Ja_rel32_64) [1D1Eh:jmp64]                        encoding(6 bytes) = 0f 87 9e 0b 00 00
1180h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
1183h lea rax,[rsp+420h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 20 04 00 00
118bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
118fh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1193h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1196h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1199h mov [rsp+418h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 18 04 00 00
11a1h mov rcx,[rsp+418h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 04 00 00
11a9h lea r8,[rsp+420h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 20 04 00 00
11b1h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
11b4h mov [rsp+428h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 04 00 00
11bbh vmovdqu xmm0,xmmword ptr [rsp+420h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 04 00 00
11c4h vmovdqu xmmword ptr [rsp+458h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 04 00 00
11cdh vmovdqu xmm0,xmmword ptr [rsp+458h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 04 00 00
11d6h vmovdqu xmmword ptr [rsp+408h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 04 00 00
11dfh mov ecx,[rsp+480h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 04 00 00
11e6h cmp ecx,[rsp+410h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 10 04 00 00
11edh ja near ptr 1d24h             ; JA(Ja_rel32_64) [1D24h:jmp64]                        encoding(6 bytes) = 0f 87 31 0b 00 00
11f3h mov rcx,[rsp+408h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 08 04 00 00
11fbh mov rdx,[rsp+478h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 78 04 00 00
1203h mov r8d,[rsp+480h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 80 04 00 00
120bh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
120eh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 8d f1 9c 5d
1213h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
121dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1222h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 59 a8 41 5f
1227h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
122ah mov dword ptr [rsp+400h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 00 04 00 00 01 00 00 00
1235h mov ecx,[rsp+400h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 04 00 00
123ch mov [rsp+0B68h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 0b 00 00
1243h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1245h mov [rsp+3F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 03 00 00
124ch mov ecx,[rsp+3F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 03 00 00
1253h mov [rsp+0B60h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 0b 00 00
125ah mov dword ptr [rsp+3F0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 f0 03 00 00 01 00 00 00
1265h mov ecx,[rsp+3F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 03 00 00
126ch mov [rsp+0B58h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 0b 00 00
1273h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
1276h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
127ah mov edx,[rsp+0B68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0b 00 00
1281h mov r8d,[rsp+0B60h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 60 0b 00 00
1289h mov r9d,[rsp+0B58h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 58 0b 00 00
1291h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
1294h mov [rsp+0B50h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 0b 00 00
129bh mov dword ptr [rsp+3E8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e8 03 00 00 01 00 00 00
12a6h mov ecx,[rsp+3E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 03 00 00
12adh mov [rsp+0B48h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 0b 00 00
12b4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
12b6h mov [rsp+3E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 03 00 00
12bdh mov ecx,[rsp+3E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 03 00 00
12c4h mov [rsp+0B40h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 0b 00 00
12cbh mov dword ptr [rsp+3D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 03 00 00 01 00 00 00
12d6h mov ecx,[rsp+3D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 03 00 00
12ddh mov [rsp+0B38h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 0b 00 00
12e4h mov ecx,[rsp+0B50h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 0b 00 00
12ebh mov [rsp+3D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 03 00 00
12f2h mov ecx,[rsp+0B48h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 0b 00 00
12f9h mov [rsp+3C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 03 00 00
1300h mov ecx,[rsp+0B40h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 0b 00 00
1307h mov [rsp+3C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 03 00 00
130eh mov ecx,[rsp+0B38h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 0b 00 00
1315h mov [rsp+3B8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 03 00 00
131ch mov ecx,[rsp+3D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 03 00 00
1323h mov [rsp+3B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 03 00 00
132ah mov ecx,[rsp+3B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 03 00 00
1331h mov edx,[rsp+3C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 03 00 00
1338h mov [rsp+3A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 03 00 00
133fh mov edx,[rsp+3A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 03 00 00
1346h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
1348h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
134ah mov edx,[rsp+3C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 03 00 00
1351h mov [rsp+3A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 03 00 00
1358h mov edx,[rsp+3A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 03 00 00
135fh shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
1362h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1364h mov edx,[rsp+3B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 03 00 00
136bh mov [rsp+398h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 03 00 00
1372h mov edx,[rsp+398h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 03 00 00
1379h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
137ch or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
137eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1381h mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
1385h lea rcx,[rsp+388h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 03 00 00
138dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1391h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1395h lea rcx,[rsp+368h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 03 00 00
139dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
13a1h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
13a5h add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
13a9h mov [rsp+360h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 60 03 00 00
13b1h mov rcx,[rsp+360h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 03 00 00
13b9h lea rdx,[rsp+368h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 68 03 00 00
13c1h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
13c4h mov dword ptr [rsp+370h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 70 03 00 00 01 00 00 00
13cfh vmovdqu xmm0,xmmword ptr [rsp+368h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 03 00 00
13d8h vmovdqu xmmword ptr [rsp+378h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 03 00 00
13e1h lea rcx,[rsp+388h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 03 00 00
13e9h vmovdqu xmm0,xmmword ptr [rsp+378h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 03 00 00
13f2h vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
13f8h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
13fdh call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 ce ea ff ff
1402h vmovdqu xmm0,xmmword ptr [rsp+388h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 03 00 00
140bh vmovdqu xmmword ptr [rsp+0B28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 0b 00 00
1414h vmovdqu xmm0,xmmword ptr [rsp+0B28h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 0b 00 00
141dh vmovdqu xmmword ptr [rsp+350h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 03 00 00
1426h vmovdqu xmm0,xmmword ptr [rsp+350h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 03 00 00
142fh vmovdqu xmmword ptr [rsp+340h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 03 00 00
1438h vmovdqu xmm0,xmmword ptr [rsp+340h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 03 00 00
1441h vmovdqu xmmword ptr [rsp+330h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 03 00 00
144ah vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
1453h vmovdqu xmmword ptr [rsp+320h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 03 00 00
145ch mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
1466h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1469h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
146dh mov r11,7FFDDB030F88h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f88h:imm64]         encoding(10 bytes) = 49 bb 88 0f 03 db fd 7f 00 00
1477h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
147ch mov rax,7FFDDB030F88h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f88h:imm64]         encoding(10 bytes) = 48 b8 88 0f 03 db fd 7f 00 00
1486h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1488h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
148ah lea rcx,[rsp+2F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 02 00 00
1492h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1496h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
149ah test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
149dh jne short 14b1h               ; JNE(Jne_rel8_64) [14B1h:jmp64]                       encoding(2 bytes) = 75 12
149fh lea rax,[rsp+2F0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 f0 02 00 00
14a7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
14abh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
14afh jmp short 14dah               ; JMP(Jmp_rel8_64) [14DAh:jmp64]                       encoding(2 bytes) = eb 29
14b1h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
14b5h mov [rsp+2E8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e8 02 00 00
14bdh mov rcx,[rsp+2E8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e8 02 00 00
14c5h lea rdx,[rsp+2F0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f0 02 00 00
14cdh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
14d0h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
14d3h mov [rsp+2F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 02 00 00
14dah vmovdqu xmm0,xmmword ptr [rsp+2F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 02 00 00
14e3h vmovdqu xmmword ptr [rsp+300h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 03 00 00
14ech cmp dword ptr [rsp+308h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 08 03 00 00 00
14f4h jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 54 08 00 00
14fah mov rcx,[rsp+300h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 03 00 00
1502h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1505h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
150fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1512h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1515h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1518h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
151ah add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
151dh cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
1520h ja near ptr 1d2ah             ; JA(Ja_rel32_64) [1D2Ah:jmp64]                        encoding(6 bytes) = 0f 87 04 08 00 00
1526h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
1529h lea rax,[rsp+2D8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 d8 02 00 00
1531h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1535h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1539h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
153ch add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
153fh mov [rsp+2D0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 d0 02 00 00
1547h mov rcx,[rsp+2D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 02 00 00
154fh lea r8,[rsp+2D8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 d8 02 00 00
1557h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
155ah mov [rsp+2E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 02 00 00
1561h vmovdqu xmm0,xmmword ptr [rsp+2D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 02 00 00
156ah vmovdqu xmmword ptr [rsp+310h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 03 00 00
1573h vmovdqu xmm0,xmmword ptr [rsp+310h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 03 00 00
157ch vmovdqu xmmword ptr [rsp+2C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 02 00 00
1585h mov ecx,[rsp+338h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 03 00 00
158ch cmp ecx,[rsp+2C8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 c8 02 00 00
1593h ja near ptr 1d30h             ; JA(Ja_rel32_64) [1D30h:jmp64]                        encoding(6 bytes) = 0f 87 97 07 00 00
1599h mov rcx,[rsp+2C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 02 00 00
15a1h mov rdx,[rsp+330h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 30 03 00 00
15a9h mov r8d,[rsp+338h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 38 03 00 00
15b1h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
15b4h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 e7 ed 9c 5d
15b9h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
15c3h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
15c8h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 b3 a4 41 5f
15cdh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
15d0h mov dword ptr [rsp+2B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 02 00 00 01 00 00 00
15dbh mov ecx,[rsp+2B8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 02 00 00
15e2h mov [rsp+0B20h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 0b 00 00
15e9h mov dword ptr [rsp+2B0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b0 02 00 00 01 00 00 00
15f4h mov ecx,[rsp+2B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 02 00 00
15fbh mov [rsp+0B18h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 0b 00 00
1602h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1604h mov [rsp+2A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 02 00 00
160bh mov ecx,[rsp+2A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 02 00 00
1612h mov [rsp+0B10h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 0b 00 00
1619h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
161ch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
1620h mov edx,[rsp+0B20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0b 00 00
1627h mov r8d,[rsp+0B18h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 18 0b 00 00
162fh mov r9d,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 10 0b 00 00
1637h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
163ah mov [rsp+0B08h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 08 0b 00 00
1641h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1643h mov [rsp+2A0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 02 00 00
164ah mov ecx,[rsp+2A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 02 00 00
1651h mov [rsp+0B00h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 0b 00 00
1658h mov dword ptr [rsp+298h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 98 02 00 00 01 00 00 00
1663h mov ecx,[rsp+298h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 02 00 00
166ah mov [rsp+0AF8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 0a 00 00
1671h mov dword ptr [rsp+290h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 90 02 00 00 01 00 00 00
167ch mov ecx,[rsp+290h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 02 00 00
1683h mov [rsp+0AF0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 0a 00 00
168ah mov ecx,[rsp+0B08h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 0b 00 00
1691h mov [rsp+288h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 02 00 00
1698h mov ecx,[rsp+0B00h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 0b 00 00
169fh mov [rsp+280h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 02 00 00
16a6h mov ecx,[rsp+0AF8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 0a 00 00
16adh mov [rsp+278h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 02 00 00
16b4h mov ecx,[rsp+0AF0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 0a 00 00
16bbh mov [rsp+270h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 02 00 00
16c2h mov ecx,[rsp+288h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 02 00 00
16c9h mov [rsp+268h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 02 00 00
16d0h mov ecx,[rsp+268h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 02 00 00
16d7h mov edx,[rsp+280h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 02 00 00
16deh mov [rsp+260h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 02 00 00
16e5h mov edx,[rsp+260h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 02 00 00
16ech shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
16eeh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
16f0h mov edx,[rsp+278h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 02 00 00
16f7h mov [rsp+258h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 02 00 00
16feh mov edx,[rsp+258h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 02 00 00
1705h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
1708h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
170ah mov edx,[rsp+270h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 02 00 00
1711h mov [rsp+250h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 02 00 00
1718h mov edx,[rsp+250h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 02 00 00
171fh shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
1722h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1724h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1727h mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
172bh lea rcx,[rsp+240h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 02 00 00
1733h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1737h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
173bh lea rcx,[rsp+220h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 02 00 00
1743h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1747h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
174bh add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
174fh mov [rsp+218h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 18 02 00 00
1757h mov rcx,[rsp+218h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 02 00 00
175fh lea rdx,[rsp+220h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 02 00 00
1767h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
176ah mov dword ptr [rsp+228h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 28 02 00 00 01 00 00 00
1775h vmovdqu xmm0,xmmword ptr [rsp+220h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 02 00 00
177eh vmovdqu xmmword ptr [rsp+230h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 02 00 00
1787h lea rcx,[rsp+240h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 02 00 00
178fh vmovdqu xmm0,xmmword ptr [rsp+230h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 02 00 00
1798h vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
179eh lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
17a3h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 28 e7 ff ff
17a8h vmovdqu xmm0,xmmword ptr [rsp+240h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 02 00 00
17b1h vmovdqu xmmword ptr [rsp+0AE0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 0a 00 00
17bah vmovdqu xmm0,xmmword ptr [rsp+0AE0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 0a 00 00
17c3h vmovdqu xmmword ptr [rsp+208h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 02 00 00
17cch vmovdqu xmm0,xmmword ptr [rsp+208h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 02 00 00
17d5h vmovdqu xmmword ptr [rsp+1F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 01 00 00
17deh vmovdqu xmm0,xmmword ptr [rsp+1F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 01 00 00
17e7h vmovdqu xmmword ptr [rsp+1E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 01 00 00
17f0h vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
17f9h vmovdqu xmmword ptr [rsp+1D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 01 00 00
1802h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
180ch mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
180fh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1813h mov r11,7FFDDB030F90h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f90h:imm64]         encoding(10 bytes) = 49 bb 90 0f 03 db fd 7f 00 00
181dh mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
1822h mov rax,7FFDDB030F90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f90h:imm64]         encoding(10 bytes) = 48 b8 90 0f 03 db fd 7f 00 00
182ch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
182eh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
1830h lea rcx,[rsp+1A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 01 00 00
1838h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
183ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1840h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1843h jne short 1857h               ; JNE(Jne_rel8_64) [1857h:jmp64]                       encoding(2 bytes) = 75 12
1845h lea rax,[rsp+1A8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a8 01 00 00
184dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1851h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1855h jmp short 1880h               ; JMP(Jmp_rel8_64) [1880h:jmp64]                       encoding(2 bytes) = eb 29
1857h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
185bh mov [rsp+1A0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a0 01 00 00
1863h mov rcx,[rsp+1A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 01 00 00
186bh lea rdx,[rsp+1A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 01 00 00
1873h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1876h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1879h mov [rsp+1B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 01 00 00
1880h vmovdqu xmm0,xmmword ptr [rsp+1A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 01 00 00
1889h vmovdqu xmmword ptr [rsp+1B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 01 00 00
1892h cmp dword ptr [rsp+1C0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 c0 01 00 00 00
189ah jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 ae 04 00 00
18a0h mov rcx,[rsp+1B8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b8 01 00 00
18a8h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
18abh mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
18b5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
18b8h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
18bbh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
18beh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
18c0h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
18c3h cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
18c6h ja near ptr 1d36h             ; JA(Ja_rel32_64) [1D36h:jmp64]                        encoding(6 bytes) = 0f 87 6a 04 00 00
18cch mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
18cfh lea rax,[rsp+190h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 90 01 00 00
18d7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
18dbh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
18dfh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
18e2h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
18e5h mov [rsp+188h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 88 01 00 00
18edh mov rcx,[rsp+188h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 88 01 00 00
18f5h lea r8,[rsp+190h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 90 01 00 00
18fdh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1900h mov [rsp+198h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 01 00 00
1907h vmovdqu xmm0,xmmword ptr [rsp+190h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 01 00 00
1910h vmovdqu xmmword ptr [rsp+1C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 01 00 00
1919h vmovdqu xmm0,xmmword ptr [rsp+1C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 01 00 00
1922h vmovdqu xmmword ptr [rsp+178h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 01 00 00
192bh mov ecx,[rsp+1F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 01 00 00
1932h cmp ecx,[rsp+180h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 80 01 00 00
1939h ja near ptr 1d3ch             ; JA(Ja_rel32_64) [1D3Ch:jmp64]                        encoding(6 bytes) = 0f 87 fd 03 00 00
193fh mov rcx,[rsp+178h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 01 00 00
1947h mov rdx,[rsp+1E8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e8 01 00 00
194fh mov r8d,[rsp+1F0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 f0 01 00 00
1957h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
195ah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 41 ea 9c 5d
195fh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
1969h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
196eh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F41BA80h:jmp64]                encoding(5 bytes) = e8 0d a1 41 5f
1973h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
1976h mov dword ptr [rsp+170h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 70 01 00 00 01 00 00 00
1981h mov ecx,[rsp+170h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 01 00 00
1988h mov [rsp+0AD8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 0a 00 00
198fh mov dword ptr [rsp+168h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 68 01 00 00 01 00 00 00
199ah mov ecx,[rsp+168h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 01 00 00
19a1h mov [rsp+0AD0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 0a 00 00
19a8h mov dword ptr [rsp+160h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 60 01 00 00 01 00 00 00
19b3h mov ecx,[rsp+160h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 01 00 00
19bah mov [rsp+0AC8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 0a 00 00
19c1h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
19c5h mov edx,[rsp+0AD8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 0a 00 00
19cch mov r8d,[rsp+0AD0h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d0 0a 00 00
19d4h mov r9d,[rsp+0AC8h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 c8 0a 00 00
19dch call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
19dfh mov [rsp+0AC0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 0a 00 00
19e6h mov dword ptr [rsp+158h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 58 01 00 00 01 00 00 00
19f1h mov ecx,[rsp+158h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 01 00 00
19f8h mov [rsp+0AB8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 0a 00 00
19ffh mov dword ptr [rsp+150h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 50 01 00 00 01 00 00 00
1a0ah mov ecx,[rsp+150h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 01 00 00
1a11h mov [rsp+0AB0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 0a 00 00
1a18h mov dword ptr [rsp+148h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 48 01 00 00 01 00 00 00
1a23h mov ecx,[rsp+148h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 01 00 00
1a2ah mov [rsp+0AA8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 0a 00 00
1a31h mov ecx,[rsp+0AC0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 0a 00 00
1a38h mov [rsp+140h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 01 00 00
1a3fh mov ecx,[rsp+0AB8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 0a 00 00
1a46h mov [rsp+138h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 01 00 00
1a4dh mov ecx,[rsp+0AB0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 0a 00 00
1a54h mov [rsp+130h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 01 00 00
1a5bh mov ecx,[rsp+0AA8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 0a 00 00
1a62h mov [rsp+128h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 01 00 00
1a69h mov ecx,[rsp+140h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 01 00 00
1a70h mov [rsp+120h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 01 00 00
1a77h mov ecx,[rsp+120h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 01 00 00
1a7eh mov edx,[rsp+138h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 01 00 00
1a85h mov [rsp+118h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 01 00 00
1a8ch mov edx,[rsp+118h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 01 00 00
1a93h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
1a95h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1a97h mov edx,[rsp+130h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 01 00 00
1a9eh mov [rsp+110h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 01 00 00
1aa5h mov edx,[rsp+110h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 01 00 00
1aach shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
1aafh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1ab1h mov edx,[rsp+128h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 01 00 00
1ab8h mov [rsp+108h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 01 00 00
1abfh mov edx,[rsp+108h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 01 00 00
1ac6h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
1ac9h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1acbh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1aceh mov [r14+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),CL]            encoding(4 bytes) = 41 88 4e 10
1ad2h lea rcx,[rsp+0F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 00 00 00
1adah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1adeh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1ae2h lea rcx,[rsp+0D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 00 00 00
1aeah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1aeeh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1af2h add r14,10h                   ; ADD(Add_rm64_imm8) [R14,10h:imm64]                   encoding(4 bytes) = 49 83 c6 10
1af6h mov [rsp+0D0h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 d0 00 00 00
1afeh mov rcx,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 00 00 00
1b06h lea rdx,[rsp+0D8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d8 00 00 00
1b0eh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1b11h mov dword ptr [rsp+0E0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e0 00 00 00 01 00 00 00
1b1ch vmovdqu xmm0,xmmword ptr [rsp+0D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 00 00 00
1b25h vmovdqu xmmword ptr [rsp+0E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 00 00 00
1b2eh lea rcx,[rsp+0F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 00 00 00
1b36h vmovdqu xmm0,xmmword ptr [rsp+0E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 00 00 00
1b3fh vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
1b45h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
1b4ah call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 81 e3 ff ff
1b4fh vmovdqu xmm0,xmmword ptr [rsp+0F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 00 00 00
1b58h vmovdqu xmmword ptr [rsp+0A98h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 0a 00 00
1b61h vmovdqu xmm0,xmmword ptr [rsp+0A98h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 0a 00 00
1b6ah vmovdqu xmmword ptr [rsp+0C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 00 00 00
1b73h vmovdqu xmm0,xmmword ptr [rsp+0C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 00 00 00
1b7ch vmovdqu xmmword ptr [rsp+0B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 00 00 00
1b85h vmovdqu xmm0,xmmword ptr [rsp+0B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 00 00 00
1b8eh vmovdqu xmmword ptr [rsp+0A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 00 00 00
1b97h vmovdqu xmm0,xmmword ptr [rsp+0C40h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 0c 00 00
1ba0h vmovdqu xmmword ptr [rsp+90h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 00 00 00
1ba9h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
1bb3h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1bb6h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1bbah mov r11,7FFDDB030F98h         ; MOV(Mov_r64_imm64) [R11,7ffddb030f98h:imm64]         encoding(10 bytes) = 49 bb 98 0f 03 db fd 7f 00 00
1bc4h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1bc9h mov rax,7FFDDB030F98h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030f98h:imm64]         encoding(10 bytes) = 48 b8 98 0f 03 db fd 7f 00 00
1bd3h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1bd5h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
1bd7h lea rcx,[rsp+60h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 60
1bdch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1be0h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1be4h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1be7h jne short 1bf8h               ; JNE(Jne_rel8_64) [1BF8h:jmp64]                       encoding(2 bytes) = 75 0f
1be9h lea rax,[rsp+60h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 60
1beeh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1bf2h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1bf6h jmp short 1c15h               ; JMP(Jmp_rel8_64) [1C15h:jmp64]                       encoding(2 bytes) = eb 1d
1bf8h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1bfch mov [rsp+58h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 58
1c01h mov rcx,[rsp+58h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 58
1c06h lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
1c0bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1c0eh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1c11h mov [rsp+68h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 68
1c15h vmovdqu xmm0,xmmword ptr [rsp+60h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 60
1c1bh vmovdqu xmmword ptr [rsp+70h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 70
1c21h cmp dword ptr [rsp+78h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(5 bytes) = 83 7c 24 78 00
1c26h jbe near ptr 1d4eh            ; JBE(Jbe_rel32_64) [1D4Eh:jmp64]                      encoding(6 bytes) = 0f 86 22 01 00 00
1c2ch mov rcx,[rsp+70h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 70
1c31h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1c34h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
1c3eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1c41h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1c44h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1c47h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
1c49h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1c4ch cmp r8,rdi                    ; CMP(Cmp_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 3b c7
1c4fh ja near ptr 1d42h             ; JA(Ja_rel32_64) [1D42h:jmp64]                        encoding(6 bytes) = 0f 87 ed 00 00 00
1c55h lea r8,[rsp+48h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 48
1c5ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c5eh vmovdqu xmmword ptr [r8],xmm0 ; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,R8:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c4 c1 7a 7f 00
1c63h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1c66h add rcx,rbp                   ; ADD(Add_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 03 cd
1c69h mov [rsp+40h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 40
1c6eh mov rcx,[rsp+40h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 40
1c73h lea r8,[rsp+48h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 48
1c78h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1c7bh mov [rsp+50h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 50
1c7fh vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
1c85h vmovdqu xmmword ptr [rsp+80h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 00 00 00
1c8eh vmovdqu xmm0,xmmword ptr [rsp+80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 00 00 00
1c97h vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
1c9dh mov ecx,[rsp+0A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 00 00 00
1ca4h cmp ecx,[rsp+38h]             ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 3b 4c 24 38
1ca8h ja near ptr 1d48h             ; JA(Ja_rel32_64) [1D48h:jmp64]                        encoding(6 bytes) = 0f 87 9a 00 00 00
1caeh mov rcx,[rsp+30h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 30
1cb3h mov rdx,[rsp+0A0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a0 00 00 00
1cbbh mov r8d,[rsp+0A8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a8 00 00 00
1cc3h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1cc6h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9D03A0h:jmp64]                encoding(5 bytes) = e8 d5 e6 9c 5d
1ccbh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
1cceh lea rsi,[rsp+0C40h]           ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 40 0c 00 00
1cd6h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F41AB30h:jmp64]                encoding(5 bytes) = e8 55 8e 41 5f
1cdbh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
1cddh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
1ce0h add rsp,0C50h                 ; ADD(Add_rm64_imm32) [RSP,c50h:imm64]                 encoding(7 bytes) = 48 81 c4 50 0c 00 00
1ce7h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1ce8h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1ce9h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1ceah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1cebh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1cedh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1ceeh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 cd 2c 92 ff
1cf3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cf4h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 cf 2c 92 ff
1cf9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cfah call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 c1 2c 92 ff
1cffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d00h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 c3 2c 92 ff
1d05h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d06h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 b5 2c 92 ff
1d0bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d0ch call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 b7 2c 92 ff
1d11h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d12h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 a9 2c 92 ff
1d17h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d18h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 ab 2c 92 ff
1d1dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d1eh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 9d 2c 92 ff
1d23h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d24h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 9f 2c 92 ff
1d29h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d2ah call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 91 2c 92 ff
1d2fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d30h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 93 2c 92 ff
1d35h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d36h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 85 2c 92 ff
1d3bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d3ch call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 87 2c 92 ff
1d41h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d42h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C0h:jmp64]        encoding(5 bytes) = e8 79 2c 92 ff
1d47h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d48h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9249C8h:jmp64]        encoding(5 bytes) = e8 7b 2c 92 ff
1d4dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d4eh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F5463A0h:jmp64]                encoding(5 bytes) = e8 4d 46 54 5f
1d53h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> BuildBytes => new byte[7508]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x50,0x0C,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x20,0xB9,0x0C,0x03,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xF2,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x43,0x68,0x3E,0x5F,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0xBA,0x41,0x5F,0x48,0x8D,0x8C,0x24,0x78,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x70,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x78,0x0A,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x80,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x0C,0x00,0x00,0x40,0x0F,0xB6,0xCE,0xE8,0xDB,0xB5,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xA4,0xB9,0x41,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x68,0x0A,0x00,0x00,0x8B,0x94,0x24,0x68,0x0A,0x00,0x00,0x89,0x8C,0x24,0x60,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x60,0x0A,0x00,0x00,0x89,0x8C,0x24,0x58,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0x58,0x0A,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xFF,0x50,0x18,0x33,0xC9,0x89,0x8C,0x24,0x50,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x50,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x48,0x0A,0x00,0x00,0x8B,0x94,0x24,0x48,0x0A,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x40,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x40,0x0A,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x38,0x0A,0x00,0x00,0x41,0x89,0x01,0x48,0x8D,0x84,0x24,0x30,0x0A,0x00,0x00,0x89,0x08,0x48,0x8D,0x8C,0x24,0x28,0x0A,0x00,0x00,0x89,0x11,0x48,0x8D,0x8C,0x24,0x20,0x0A,0x00,0x00,0x44,0x89,0x01,0x8B,0x8C,0x24,0x38,0x0A,0x00,0x00,0x89,0x8C,0x24,0x18,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x18,0x0A,0x00,0x00,0x8B,0x94,0x24,0x30,0x0A,0x00,0x00,0x89,0x94,0x24,0x10,0x0A,0x00,0x00,0x8B,0x94,0x24,0x10,0x0A,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x28,0x0A,0x00,0x00,0x89,0x94,0x24,0x08,0x0A,0x00,0x00,0x8B,0x94,0x24,0x08,0x0A,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x20,0x0A,0x00,0x00,0x89,0x94,0x24,0x00,0x0A,0x00,0x00,0x8B,0x94,0x24,0x00,0x0A,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xF0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0xC8,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x09,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xD8,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x09,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0x77,0xFC,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x0C,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x09,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x60,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x48,0xB8,0x60,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x58,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x58,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x50,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x09,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x60,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x09,0x00,0x00,0x83,0xBC,0x24,0x70,0x09,0x00,0x00,0x00,0x0F,0x86,0x00,0x1A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x68,0x09,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x90,0x09,0x00,0x00,0x8B,0xF8,0x4C,0x3B,0xC7,0x0F,0x87,0x6B,0x19,0x00,0x00,0x48,0x8B,0xAC,0x24,0x88,0x09,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0x40,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x38,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x09,0x00,0x00,0x4C,0x8D,0x84,0x24,0x40,0x09,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x48,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x09,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x09,0x00,0x00,0x3B,0x8C,0x24,0x30,0x09,0x00,0x00,0x0F,0x87,0xF6,0x18,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x09,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xA0,0x09,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x82,0xFF,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x4E,0xB6,0x41,0x5F,0x4C,0x8B,0xF0,0x33,0xC9,0x89,0x8C,0x24,0x20,0x09,0x00,0x00,0x8B,0x94,0x24,0x20,0x09,0x00,0x00,0x89,0x8C,0x24,0x18,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x18,0x09,0x00,0x00,0xC7,0x84,0x24,0x10,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x8C,0x24,0x10,0x09,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xFF,0x50,0x18,0x33,0xC9,0x89,0x8C,0x24,0x08,0x09,0x00,0x00,0x8B,0x8C,0x24,0x08,0x09,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x00,0x09,0x00,0x00,0x8B,0x94,0x24,0x00,0x09,0x00,0x00,0xC7,0x84,0x24,0xF8,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xF8,0x08,0x00,0x00,0x4C,0x8D,0x8C,0x24,0xF0,0x08,0x00,0x00,0x41,0x89,0x01,0x48,0x8D,0x84,0x24,0xE8,0x08,0x00,0x00,0x89,0x08,0x48,0x8D,0x8C,0x24,0xE0,0x08,0x00,0x00,0x89,0x11,0x48,0x8D,0x8C,0x24,0xD8,0x08,0x00,0x00,0x44,0x89,0x01,0x8B,0x8C,0x24,0xF0,0x08,0x00,0x00,0x89,0x8C,0x24,0xD0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x08,0x00,0x00,0x8B,0x94,0x24,0xE8,0x08,0x00,0x00,0x89,0x94,0x24,0xC8,0x08,0x00,0x00,0x8B,0x94,0x24,0xC8,0x08,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0xE0,0x08,0x00,0x00,0x89,0x94,0x24,0xC0,0x08,0x00,0x00,0x8B,0x94,0x24,0xC0,0x08,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0xD8,0x08,0x00,0x00,0x89,0x94,0x24,0xB8,0x08,0x00,0x00,0x8B,0x94,0x24,0xB8,0x08,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0xA8,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x88,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0x80,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x80,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x88,0x08,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x90,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x08,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0x1C,0xF9,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x0C,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x08,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x68,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x48,0xB8,0x68,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x10,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x10,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x08,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x08,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x10,0x08,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x18,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x08,0x00,0x00,0x83,0xBC,0x24,0x28,0x08,0x00,0x00,0x00,0x0F,0x86,0xA2,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0x20,0x08,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0x22,0x16,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0xF8,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xF0,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x07,0x00,0x00,0x4C,0x8D,0x84,0x24,0xF8,0x07,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x00,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x07,0x00,0x00,0x8B,0x8C,0x24,0x58,0x08,0x00,0x00,0x3B,0x8C,0x24,0xE8,0x07,0x00,0x00,0x0F,0x87,0xB5,0x15,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE0,0x07,0x00,0x00,0x48,0x8B,0x94,0x24,0x50,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x58,0x08,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x35,0xFC,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x01,0xB3,0x41,0x5F,0x4C,0x8B,0xF0,0x33,0xC9,0x89,0x8C,0x24,0xD8,0x07,0x00,0x00,0x8B,0x94,0x24,0xD8,0x07,0x00,0x00,0xC7,0x84,0x24,0xD0,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xD0,0x07,0x00,0x00,0x89,0x8C,0x24,0xC8,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0xC8,0x07,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xFF,0x50,0x18,0x33,0xC9,0x89,0x8C,0x24,0xC0,0x07,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x07,0x00,0x00,0xC7,0x84,0x24,0xB8,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xB8,0x07,0x00,0x00,0x89,0x94,0x24,0x18,0x0C,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0xB0,0x07,0x00,0x00,0x8B,0x94,0x24,0xB0,0x07,0x00,0x00,0x89,0x94,0x24,0x10,0x0C,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x07,0x00,0x00,0x89,0x02,0x48,0x8D,0x94,0x24,0xA0,0x07,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x18,0x0C,0x00,0x00,0x89,0x8C,0x24,0x98,0x07,0x00,0x00,0x8B,0x8C,0x24,0x10,0x0C,0x00,0x00,0x89,0x8C,0x24,0x90,0x07,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x07,0x00,0x00,0x89,0x8C,0x24,0x88,0x07,0x00,0x00,0x8B,0x8C,0x24,0x88,0x07,0x00,0x00,0x8B,0x94,0x24,0xA0,0x07,0x00,0x00,0x89,0x94,0x24,0x80,0x07,0x00,0x00,0x8B,0x94,0x24,0x80,0x07,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x98,0x07,0x00,0x00,0x89,0x94,0x24,0x78,0x07,0x00,0x00,0x8B,0x94,0x24,0x78,0x07,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x90,0x07,0x00,0x00,0x89,0x94,0x24,0x70,0x07,0x00,0x00,0x8B,0x94,0x24,0x70,0x07,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0x60,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x40,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0x38,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x07,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x48,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x07,0x00,0x00,0x48,0x8D,0x8C,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0xBC,0xF5,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x0C,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x06,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x70,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x48,0xB8,0x70,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xC8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xC8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xC0,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xC8,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xD0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x06,0x00,0x00,0x83,0xBC,0x24,0xE0,0x06,0x00,0x00,0x00,0x0F,0x86,0x42,0x13,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0xCE,0x12,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0xB0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xA8,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0xB0,0x06,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xB8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x06,0x00,0x00,0x8B,0x8C,0x24,0x10,0x07,0x00,0x00,0x3B,0x8C,0x24,0xA0,0x06,0x00,0x00,0x0F,0x87,0x61,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x06,0x00,0x00,0x48,0x8B,0x94,0x24,0x08,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0x10,0x07,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xD5,0xF8,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xA1,0xAF,0x41,0x5F,0x4C,0x8B,0xF0,0x33,0xC9,0x89,0x8C,0x24,0x90,0x06,0x00,0x00,0x8B,0x8C,0x24,0x90,0x06,0x00,0x00,0x89,0x8C,0x24,0xF8,0x0B,0x00,0x00,0xC7,0x84,0x24,0x88,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x88,0x06,0x00,0x00,0x89,0x8C,0x24,0xF0,0x0B,0x00,0x00,0xC7,0x84,0x24,0x80,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x80,0x06,0x00,0x00,0x89,0x8C,0x24,0xE8,0x0B,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xF8,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0xF0,0x0B,0x00,0x00,0x44,0x8B,0x8C,0x24,0xE8,0x0B,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xE0,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x78,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x06,0x00,0x00,0x89,0x8C,0x24,0xD8,0x0B,0x00,0x00,0xC7,0x84,0x24,0x70,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x70,0x06,0x00,0x00,0x89,0x8C,0x24,0xD0,0x0B,0x00,0x00,0xC7,0x84,0x24,0x68,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x68,0x06,0x00,0x00,0x89,0x8C,0x24,0xC8,0x0B,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x0B,0x00,0x00,0x89,0x8C,0x24,0x60,0x06,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x0B,0x00,0x00,0x89,0x8C,0x24,0x58,0x06,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x0B,0x00,0x00,0x89,0x8C,0x24,0x50,0x06,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x0B,0x00,0x00,0x89,0x8C,0x24,0x48,0x06,0x00,0x00,0x8B,0x8C,0x24,0x60,0x06,0x00,0x00,0x89,0x8C,0x24,0x40,0x06,0x00,0x00,0x8B,0x8C,0x24,0x40,0x06,0x00,0x00,0x8B,0x94,0x24,0x58,0x06,0x00,0x00,0x89,0x94,0x24,0x38,0x06,0x00,0x00,0x8B,0x94,0x24,0x38,0x06,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x50,0x06,0x00,0x00,0x89,0x94,0x24,0x30,0x06,0x00,0x00,0x8B,0x94,0x24,0x30,0x06,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x48,0x06,0x00,0x00,0x89,0x94,0x24,0x28,0x06,0x00,0x00,0x8B,0x94,0x24,0x28,0x06,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0x18,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xF8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0xF0,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0xF8,0x05,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x00,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0x18,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0x16,0xF2,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x05,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x78,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x48,0xB8,0x78,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x80,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x80,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x78,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x88,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x05,0x00,0x00,0x83,0xBC,0x24,0x98,0x05,0x00,0x00,0x00,0x0F,0x86,0x9C,0x0F,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0x34,0x0F,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0x68,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x60,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x05,0x00,0x00,0x4C,0x8D,0x84,0x24,0x68,0x05,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x70,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x05,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x05,0x00,0x00,0x3B,0x8C,0x24,0x58,0x05,0x00,0x00,0x0F,0x87,0xC7,0x0E,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x05,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x05,0x00,0x00,0x44,0x8B,0x84,0x24,0xC8,0x05,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x2F,0xF5,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xFB,0xAB,0x41,0x5F,0x4C,0x8B,0xF0,0xC7,0x84,0x24,0x48,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x48,0x05,0x00,0x00,0x89,0x8C,0x24,0xB0,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x40,0x05,0x00,0x00,0x8B,0x8C,0x24,0x40,0x05,0x00,0x00,0x89,0x8C,0x24,0xA8,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x38,0x05,0x00,0x00,0x8B,0x8C,0x24,0x38,0x05,0x00,0x00,0x89,0x8C,0x24,0xA0,0x0B,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xB0,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0xA8,0x0B,0x00,0x00,0x44,0x8B,0x8C,0x24,0xA0,0x0B,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x98,0x0B,0x00,0x00,0xC7,0x84,0x24,0x30,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x30,0x05,0x00,0x00,0x89,0x8C,0x24,0x90,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x28,0x05,0x00,0x00,0x8B,0x8C,0x24,0x28,0x05,0x00,0x00,0x89,0x8C,0x24,0x88,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x20,0x05,0x00,0x00,0x8B,0x8C,0x24,0x20,0x05,0x00,0x00,0x89,0x8C,0x24,0x80,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x98,0x0B,0x00,0x00,0x89,0x8C,0x24,0x18,0x05,0x00,0x00,0x8B,0x8C,0x24,0x90,0x0B,0x00,0x00,0x89,0x8C,0x24,0x10,0x05,0x00,0x00,0x8B,0x8C,0x24,0x88,0x0B,0x00,0x00,0x89,0x8C,0x24,0x08,0x05,0x00,0x00,0x8B,0x8C,0x24,0x80,0x0B,0x00,0x00,0x89,0x8C,0x24,0x00,0x05,0x00,0x00,0x8B,0x8C,0x24,0x18,0x05,0x00,0x00,0x89,0x8C,0x24,0xF8,0x04,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x04,0x00,0x00,0x8B,0x94,0x24,0x10,0x05,0x00,0x00,0x89,0x94,0x24,0xF0,0x04,0x00,0x00,0x8B,0x94,0x24,0xF0,0x04,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x08,0x05,0x00,0x00,0x89,0x94,0x24,0xE8,0x04,0x00,0x00,0x8B,0x94,0x24,0xE8,0x04,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x00,0x05,0x00,0x00,0x89,0x94,0x24,0xE0,0x04,0x00,0x00,0x8B,0x94,0x24,0xE0,0x04,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0xD0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xB0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0xA8,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0xB0,0x04,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xB8,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0x74,0xEE,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x04,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x80,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0x48,0xB8,0x80,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x38,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x38,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x30,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x30,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x04,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x40,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x04,0x00,0x00,0x83,0xBC,0x24,0x50,0x04,0x00,0x00,0x00,0x0F,0x86,0xFA,0x0B,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0x9E,0x0B,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0x20,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x18,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x04,0x00,0x00,0x4C,0x8D,0x84,0x24,0x20,0x04,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x28,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x04,0x00,0x00,0x8B,0x8C,0x24,0x80,0x04,0x00,0x00,0x3B,0x8C,0x24,0x10,0x04,0x00,0x00,0x0F,0x87,0x31,0x0B,0x00,0x00,0x48,0x8B,0x8C,0x24,0x08,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x78,0x04,0x00,0x00,0x44,0x8B,0x84,0x24,0x80,0x04,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x8D,0xF1,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x59,0xA8,0x41,0x5F,0x4C,0x8B,0xF0,0xC7,0x84,0x24,0x00,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x00,0x04,0x00,0x00,0x89,0x8C,0x24,0x68,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xF8,0x03,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x03,0x00,0x00,0x89,0x8C,0x24,0x60,0x0B,0x00,0x00,0xC7,0x84,0x24,0xF0,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x03,0x00,0x00,0x89,0x8C,0x24,0x58,0x0B,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x68,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0x60,0x0B,0x00,0x00,0x44,0x8B,0x8C,0x24,0x58,0x0B,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x50,0x0B,0x00,0x00,0xC7,0x84,0x24,0xE8,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x03,0x00,0x00,0x89,0x8C,0x24,0x48,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xE0,0x03,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x03,0x00,0x00,0x89,0x8C,0x24,0x40,0x0B,0x00,0x00,0xC7,0x84,0x24,0xD8,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x03,0x00,0x00,0x89,0x8C,0x24,0x38,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x50,0x0B,0x00,0x00,0x89,0x8C,0x24,0xD0,0x03,0x00,0x00,0x8B,0x8C,0x24,0x48,0x0B,0x00,0x00,0x89,0x8C,0x24,0xC8,0x03,0x00,0x00,0x8B,0x8C,0x24,0x40,0x0B,0x00,0x00,0x89,0x8C,0x24,0xC0,0x03,0x00,0x00,0x8B,0x8C,0x24,0x38,0x0B,0x00,0x00,0x89,0x8C,0x24,0xB8,0x03,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x03,0x00,0x00,0x89,0x8C,0x24,0xB0,0x03,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x03,0x00,0x00,0x8B,0x94,0x24,0xC8,0x03,0x00,0x00,0x89,0x94,0x24,0xA8,0x03,0x00,0x00,0x8B,0x94,0x24,0xA8,0x03,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0xC0,0x03,0x00,0x00,0x89,0x94,0x24,0xA0,0x03,0x00,0x00,0x8B,0x94,0x24,0xA0,0x03,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0xB8,0x03,0x00,0x00,0x89,0x94,0x24,0x98,0x03,0x00,0x00,0x8B,0x94,0x24,0x98,0x03,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0x88,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x68,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0x60,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x68,0x03,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x70,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x88,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0xCE,0xEA,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x03,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x88,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0x48,0xB8,0x88,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xF0,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xF0,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xE8,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE8,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0xF0,0x02,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xF8,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x03,0x00,0x00,0x83,0xBC,0x24,0x08,0x03,0x00,0x00,0x00,0x0F,0x86,0x54,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x03,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0x04,0x08,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0xD8,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xD0,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x02,0x00,0x00,0x4C,0x8D,0x84,0x24,0xD8,0x02,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xE0,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x02,0x00,0x00,0x8B,0x8C,0x24,0x38,0x03,0x00,0x00,0x3B,0x8C,0x24,0xC8,0x02,0x00,0x00,0x0F,0x87,0x97,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x30,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0x38,0x03,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xE7,0xED,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xB3,0xA4,0x41,0x5F,0x4C,0x8B,0xF0,0xC7,0x84,0x24,0xB8,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x02,0x00,0x00,0x89,0x8C,0x24,0x20,0x0B,0x00,0x00,0xC7,0x84,0x24,0xB0,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x02,0x00,0x00,0x89,0x8C,0x24,0x18,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xA8,0x02,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x02,0x00,0x00,0x89,0x8C,0x24,0x10,0x0B,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x20,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0x18,0x0B,0x00,0x00,0x44,0x8B,0x8C,0x24,0x10,0x0B,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x08,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xA0,0x02,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x02,0x00,0x00,0x89,0x8C,0x24,0x00,0x0B,0x00,0x00,0xC7,0x84,0x24,0x98,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x98,0x02,0x00,0x00,0x89,0x8C,0x24,0xF8,0x0A,0x00,0x00,0xC7,0x84,0x24,0x90,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x90,0x02,0x00,0x00,0x89,0x8C,0x24,0xF0,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x08,0x0B,0x00,0x00,0x89,0x8C,0x24,0x88,0x02,0x00,0x00,0x8B,0x8C,0x24,0x00,0x0B,0x00,0x00,0x89,0x8C,0x24,0x80,0x02,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x0A,0x00,0x00,0x89,0x8C,0x24,0x78,0x02,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x0A,0x00,0x00,0x89,0x8C,0x24,0x70,0x02,0x00,0x00,0x8B,0x8C,0x24,0x88,0x02,0x00,0x00,0x89,0x8C,0x24,0x68,0x02,0x00,0x00,0x8B,0x8C,0x24,0x68,0x02,0x00,0x00,0x8B,0x94,0x24,0x80,0x02,0x00,0x00,0x89,0x94,0x24,0x60,0x02,0x00,0x00,0x8B,0x94,0x24,0x60,0x02,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x78,0x02,0x00,0x00,0x89,0x94,0x24,0x58,0x02,0x00,0x00,0x8B,0x94,0x24,0x58,0x02,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x70,0x02,0x00,0x00,0x89,0x94,0x24,0x50,0x02,0x00,0x00,0x8B,0x94,0x24,0x50,0x02,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0x40,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x20,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0x18,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x02,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x28,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x02,0x00,0x00,0x48,0x8D,0x8C,0x24,0x40,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0x28,0xE7,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x01,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x90,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0x48,0xB8,0x90,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xA8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xA8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xA0,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x01,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xB0,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x01,0x00,0x00,0x83,0xBC,0x24,0xC0,0x01,0x00,0x00,0x00,0x0F,0x86,0xAE,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB8,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0x6A,0x04,0x00,0x00,0x4C,0x8B,0xC5,0x48,0x8D,0x84,0x24,0x90,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x88,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x88,0x01,0x00,0x00,0x4C,0x8D,0x84,0x24,0x90,0x01,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x98,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x01,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x01,0x00,0x00,0x3B,0x8C,0x24,0x80,0x01,0x00,0x00,0x0F,0x87,0xFD,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0xE8,0x01,0x00,0x00,0x44,0x8B,0x84,0x24,0xF0,0x01,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x41,0xEA,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x0D,0xA1,0x41,0x5F,0x4C,0x8B,0xF0,0xC7,0x84,0x24,0x70,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x70,0x01,0x00,0x00,0x89,0x8C,0x24,0xD8,0x0A,0x00,0x00,0xC7,0x84,0x24,0x68,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x68,0x01,0x00,0x00,0x89,0x8C,0x24,0xD0,0x0A,0x00,0x00,0xC7,0x84,0x24,0x60,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x60,0x01,0x00,0x00,0x89,0x8C,0x24,0xC8,0x0A,0x00,0x00,0x48,0x8B,0x4E,0x08,0x8B,0x94,0x24,0xD8,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0xD0,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0xC8,0x0A,0x00,0x00,0xFF,0x56,0x18,0x89,0x84,0x24,0xC0,0x0A,0x00,0x00,0xC7,0x84,0x24,0x58,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x58,0x01,0x00,0x00,0x89,0x8C,0x24,0xB8,0x0A,0x00,0x00,0xC7,0x84,0x24,0x50,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x50,0x01,0x00,0x00,0x89,0x8C,0x24,0xB0,0x0A,0x00,0x00,0xC7,0x84,0x24,0x48,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x48,0x01,0x00,0x00,0x89,0x8C,0x24,0xA8,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x0A,0x00,0x00,0x89,0x8C,0x24,0x40,0x01,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x0A,0x00,0x00,0x89,0x8C,0x24,0x38,0x01,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x0A,0x00,0x00,0x89,0x8C,0x24,0x30,0x01,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x0A,0x00,0x00,0x89,0x8C,0x24,0x28,0x01,0x00,0x00,0x8B,0x8C,0x24,0x40,0x01,0x00,0x00,0x89,0x8C,0x24,0x20,0x01,0x00,0x00,0x8B,0x8C,0x24,0x20,0x01,0x00,0x00,0x8B,0x94,0x24,0x38,0x01,0x00,0x00,0x89,0x94,0x24,0x18,0x01,0x00,0x00,0x8B,0x94,0x24,0x18,0x01,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x30,0x01,0x00,0x00,0x89,0x94,0x24,0x10,0x01,0x00,0x00,0x8B,0x94,0x24,0x10,0x01,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x89,0x94,0x24,0x08,0x01,0x00,0x00,0x8B,0x94,0x24,0x08,0x01,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x41,0x88,0x4E,0x10,0x48,0x8D,0x8C,0x24,0xF8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x49,0x83,0xC6,0x10,0x4C,0x89,0xB4,0x24,0xD0,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xD8,0x00,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xE0,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x54,0x24,0x20,0xE8,0x81,0xE3,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x00,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x98,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0x48,0xB8,0x98,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x4C,0x24,0x60,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x0F,0x48,0x8D,0x44,0x24,0x60,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x1D,0x48,0x8D,0x48,0x10,0x48,0x89,0x4C,0x24,0x58,0x48,0x8B,0x4C,0x24,0x58,0x48,0x8D,0x54,0x24,0x60,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x4C,0x24,0x68,0xC5,0xFA,0x6F,0x44,0x24,0x60,0xC5,0xFA,0x7F,0x44,0x24,0x70,0x83,0x7C,0x24,0x78,0x00,0x0F,0x86,0x22,0x01,0x00,0x00,0x48,0x8B,0x4C,0x24,0x70,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC7,0x0F,0x87,0xED,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x48,0xC5,0xF8,0x57,0xC0,0xC4,0xC1,0x7A,0x7F,0x00,0x48,0x63,0xC9,0x48,0x03,0xCD,0x48,0x89,0x4C,0x24,0x40,0x48,0x8B,0x4C,0x24,0x40,0x4C,0x8D,0x44,0x24,0x48,0x49,0x89,0x08,0x89,0x54,0x24,0x50,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x8B,0x8C,0x24,0xA8,0x00,0x00,0x00,0x3B,0x4C,0x24,0x38,0x0F,0x87,0x9A,0x00,0x00,0x00,0x48,0x8B,0x4C,0x24,0x30,0x48,0x8B,0x94,0x24,0xA0,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xA8,0x00,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xD5,0xE6,0x9C,0x5D,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0x40,0x0C,0x00,0x00,0xE8,0x55,0x8E,0x41,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0x50,0x0C,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0xCD,0x2C,0x92,0xFF,0xCC,0xE8,0xCF,0x2C,0x92,0xFF,0xCC,0xE8,0xC1,0x2C,0x92,0xFF,0xCC,0xE8,0xC3,0x2C,0x92,0xFF,0xCC,0xE8,0xB5,0x2C,0x92,0xFF,0xCC,0xE8,0xB7,0x2C,0x92,0xFF,0xCC,0xE8,0xA9,0x2C,0x92,0xFF,0xCC,0xE8,0xAB,0x2C,0x92,0xFF,0xCC,0xE8,0x9D,0x2C,0x92,0xFF,0xCC,0xE8,0x9F,0x2C,0x92,0xFF,0xCC,0xE8,0x91,0x2C,0x92,0xFF,0xCC,0xE8,0x93,0x2C,0x92,0xFF,0xCC,0xE8,0x85,0x2C,0x92,0xFF,0xCC,0xE8,0x87,0x2C,0x92,0xFF,0xCC,0xE8,0x79,0x2C,0x92,0xFF,0xCC,0xE8,0x7B,0x2C,0x92,0xFF,0xCC,0xE8,0x4D,0x46,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, UnaryLogicOpKind[] kinds)
; location: [7FFDDB84A9D0h, 7FFDDB84AA41h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9AF500h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9af500h:imm64]         encoding(10 bytes) = 48 b9 00 f5 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F419AE0h:jmp64]                encoding(5 bytes) = e8 c4 9a 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F418C20h:jmp64]                encoding(5 bytes) = e8 f5 8b 41 5f
002bh mov rcx,7FFDDB9E6B98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e6b98h:imm64]         encoding(10 bytes) = 48 b9 98 6b 9e db fd 7f 00 00
0035h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F419AE0h:jmp64]                encoding(5 bytes) = e8 a6 9a 41 5f
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0041h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0044h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F418C20h:jmp64]                encoding(5 bytes) = e8 d7 8b 41 5f
0049h mov rcx,7FFDDB835E00h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835e00h:imm64]         encoding(10 bytes) = 48 b9 00 5e 83 db fd 7f 00 00
0053h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0057h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
005ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0060h mov rax,7FFDDB847C88h         ; MOV(Mov_r64_imm64) [RAX,7ffddb847c88h:imm64]         encoding(10 bytes) = 48 b8 88 7c 84 db fd 7f 00 00
006ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0070h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0071h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> EmitBytes => new byte[116]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0x00,0xF5,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0x9A,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xF5,0x8B,0x41,0x5F,0x48,0xB9,0x98,0x6B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0x9A,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xD7,0x8B,0x41,0x5F,0x48,0xB9,0x00,0x5E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0x45,0x33,0xC0,0x48,0xB8,0x88,0x7C,0x84,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, ReadOnlySpan<BinaryLogicOpKind:byte> kinds)
; location: [7FFDDB84B270h, 7FFDDB84B721h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,108h                  ; SUB(Sub_rm64_imm32) [RSP,108h:imm64]                 encoding(7 bytes) = 48 81 ec 08 01 00 00
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0019h lea rdi,[rsp+58h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 58
001eh mov ecx,2Ah                   ; MOV(Mov_r32_imm32) [ECX,2ah:imm32]                   encoding(5 bytes) = b9 2a 00 00 00
0023h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0025h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0027h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
002ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
002dh mov rdi,[rdx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 3a
0030h mov ebx,[rdx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 5a 08
0033h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
0035h test ebx,ebx                  ; TEST(Test_rm32_r32) [EBX,EBX]                        encoding(2 bytes) = 85 db
0037h jle near ptr 0492h            ; JLE(Jle_rel32_64) [492h:jmp64]                       encoding(6 bytes) = 0f 8e 55 04 00 00
003dh movsxd rcx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBP]                    encoding(3 bytes) = 48 63 cd
0040h movzx r14d,byte ptr [rdi+rcx] ; MOVZX(Movzx_r32_rm8) [R14D,mem(8u,RDI:br,DS:sr)]     encoding(5 bytes) = 44 0f b6 34 0f
0045h lea rcx,[rsp+0E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 00 00 00
004dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0051h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0055h lea rcx,[rsp+0E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 00 00 00
005dh mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
0060h call 7FFDDB848220h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCFB0h:jmp64]        encoding(5 bytes) = e8 4b cf ff ff
0065h vmovdqu xmm0,xmmword ptr [rsp+0E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 00 00 00
006eh vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
0077h vmovdqu xmm0,xmmword ptr [rsp+0D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 00 00 00
0080h vmovdqu xmmword ptr [rsp+0C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 00 00 00
0089h mov rcx,7FFDDB996D28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb996d28h:imm64]         encoding(10 bytes) = 48 b9 28 6d 99 db fd 7f 00 00
0093h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F419240h:jmp64]                encoding(5 bytes) = e8 a8 91 41 5f
0098h mov [rax+8],r14b              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R14L]          encoding(4 bytes) = 44 88 70 08
009ch mov r14,rsi                   ; MOV(Mov_r64_rm64) [R14,RSI]                          encoding(3 bytes) = 4c 8b f6
009fh vmovdqu xmm0,xmmword ptr [rsp+0C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 00 00 00
00a8h vmovdqu xmmword ptr [rsp+68h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 68
00aeh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00b1h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D9D97B0h:jmp64]                encoding(5 bytes) = e8 fa 96 9d 5d
00b6h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00b9h lea rcx,[rsp+68h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 68
00beh call 7FFDDB847CE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCA70h:jmp64]        encoding(5 bytes) = e8 ad c9 ff ff
00c3h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00c6h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
00c9h mov rax,[r14]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,R14:br,DS:sr)]        encoding(3 bytes) = 49 8b 06
00cch mov rax,[rax+58h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 58
00d0h call qword ptr [rax+10h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 10
00d3h lea rcx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 00 00 00
00dbh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
00dfh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
00e3h mov rcx,7FFDDB39C168h         ; MOV(Mov_r64_imm64) [RCX,7ffddb39c168h:imm64]         encoding(10 bytes) = 48 b9 68 c1 39 db fd 7f 00 00
00edh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F419240h:jmp64]                encoding(5 bytes) = e8 4e 91 41 5f
00f2h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
00f5h mov dword ptr [r14+20h],7FFFFFFFh; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),7fffffffh:imm32] encoding(8 bytes) = 41 c7 46 20 ff ff ff 7f
00fdh mov rcx,7FFDDB39A9F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb39a9f8h:imm64]         encoding(10 bytes) = 48 b9 f8 a9 39 db fd 7f 00 00
0107h mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
010ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F419370h:jmp64]                encoding(5 bytes) = e8 5f 92 41 5f
0111h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0115h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0118h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F418380h:jmp64]                encoding(5 bytes) = e8 63 82 41 5f
011dh xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
0120h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
012ah mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
012fh call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E4170h:jmp64]                encoding(5 bytes) = e8 3c 40 3e 5f
0134h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
013eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0141h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
0145h jle near ptr 045eh            ; JLE(Jle_rel32_64) [45Eh:jmp64]                       encoding(6 bytes) = 0f 8e 13 03 00 00
014bh mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0155h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0158h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
015ch mov edx,r15d                  ; MOV(Mov_r32_rm32) [EDX,R15D]                         encoding(3 bytes) = 41 8b d7
015fh mov r11,7FFDDB030FA0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fa0h:imm64]         encoding(10 bytes) = 49 bb a0 0f 03 db fd 7f 00 00
0169h mov rax,7FFDDB030FA0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fa0h:imm64]         encoding(10 bytes) = 48 b8 a0 0f 03 db fd 7f 00 00
0173h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0175h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0177h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
017ah jne short 0182h               ; JNE(Jne_rel8_64) [182h:jmp64]                        encoding(2 bytes) = 75 06
017ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
017eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0180h jmp short 0189h               ; JMP(Jmp_rel8_64) [189h:jmp64]                        encoding(2 bytes) = eb 07
0182h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0186h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0189h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
018ch jbe near ptr 04ach            ; JBE(Jbe_rel32_64) [4ACh:jmp64]                       encoding(6 bytes) = 0f 86 1a 03 00 00
0192h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0195h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
019fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01a2h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
01a5h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
01a7h mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
01aah add rax,r8                    ; ADD(Add_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 03 c0
01adh mov r8d,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 00 00 00
01b5h cmp rax,r8                    ; CMP(Cmp_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 3b c0
01b8h ja near ptr 04a6h             ; JA(Ja_rel32_64) [4A6h:jmp64]                         encoding(6 bytes) = 0f 87 e8 02 00 00
01beh mov rax,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 d0 00 00 00
01c6h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
01c9h add rcx,rax                   ; ADD(Add_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 03 c8
01cch lea rax,[rsp+0A0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a0 00 00 00
01d4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
01d8h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
01dch lea rax,[rsp+0A0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a0 00 00 00
01e4h lea r8,[rsp+58h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 58
01e9h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
01ech mov [r8+8],edx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(4 bytes) = 41 89 50 08
01f0h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
01f3h lea rdx,[rsp+58h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 58
01f8h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCE80h:jmp64]        encoding(5 bytes) = e8 83 cc ff ff
01fdh vmovdqu xmm0,xmmword ptr [rsp+0A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 00 00 00
0206h vmovdqu xmmword ptr [rsp+0B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 00 00 00
020fh mov r12d,1                    ; MOV(Mov_r32_imm32) [R12D,1h:imm32]                   encoding(6 bytes) = 41 bc 01 00 00 00
0215h mov r13d,1                    ; MOV(Mov_r32_imm32) [R13D,1h:imm32]                   encoding(6 bytes) = 41 bd 01 00 00 00
021bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
021dh mov [rsp+98h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 00 00 00
0225h lea rcx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 00 00 00
022dh mov rax,[rcx]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 01
0230h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0235h mov r8d,[rcx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RCX:br,DS:sr)]        encoding(4 bytes) = 44 8b 41 08
0239h mov [rsp+88h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 88 00 00 00
0241h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
024bh mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
0250h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E4170h:jmp64]                encoding(5 bytes) = e8 1b 3f 3e 5f
0255h mov rdx,1F96B011F38h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f38h:imm64]          encoding(10 bytes) = 48 ba 38 1f 01 6b f9 01 00 00
025fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0262h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0266h mov rax,[rsp+38h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 44 24 38
026bh mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0270h mov r8d,[rsp+88h]             ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 00 00 00
0278h mov [rsp+7Ch],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 7c
027dh mov [rsp+80h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 80 00 00 00
0285h xor r10d,r10d                 ; XOR(Xor_r32_rm32) [R10D,R10D]                        encoding(3 bytes) = 45 33 d2
0288h mov [rsp+94h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R10D]       encoding(8 bytes) = 44 89 94 24 94 00 00 00
0290h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0293h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
029dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F419370h:jmp64]                encoding(5 bytes) = e8 ce 90 41 5f
02a2h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
02a5h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
02a7h mov [rsp+90h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 90 00 00 00
02aeh cmp dword ptr [rsp+7Ch],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(5 bytes) = 83 7c 24 7c 00
02b3h jle near ptr 03e1h            ; JLE(Jle_rel32_64) [3E1h:jmp64]                       encoding(6 bytes) = 0f 8e 28 01 00 00
02b9h mov [rsp+40h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 40
02beh mov rcx,7FFDDB218080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb218080h:imm64]         encoding(10 bytes) = 48 b9 80 80 21 db fd 7f 00 00
02c8h mov edx,17Dh                  ; MOV(Mov_r32_imm32) [EDX,17dh:imm32]                  encoding(5 bytes) = ba 7d 01 00 00
02cdh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F419640h:jmp64]                encoding(5 bytes) = e8 6e 93 41 5f
02d2h mov eax,[rsp+90h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 00 00 00
02d9h movsxd rdx,eax                ; MOVSXD(Movsxd_r64_rm32) [RDX,EAX]                    encoding(3 bytes) = 48 63 d0
02dch mov rcx,[rsp+30h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 30
02e1h add rdx,rcx                   ; ADD(Add_r64_rm64) [RDX,RCX]                          encoding(3 bytes) = 48 03 d1
02e4h movzx edx,byte ptr [rdx]      ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(3 bytes) = 0f b6 12
02e7h mov r8,1F96AFE57C0h           ; MOV(Mov_r64_imm64) [R8,1f96afe57c0h:imm64]           encoding(10 bytes) = 49 b8 c0 57 fe 6a f9 01 00 00
02f1h mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
02f4h cmp edx,[r8+8]                ; CMP(Cmp_r32_rm32) [EDX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 50 08
02f8h jae near ptr 04ach            ; JAE(Jae_rel32_64) [4ACh:jmp64]                       encoding(6 bytes) = 0f 83 ae 01 00 00
02feh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0301h shl rdx,5                     ; SHL(Shl_rm64_imm8) [RDX,5h:imm8]                     encoding(4 bytes) = 48 c1 e2 05
0305h mov rdx,[r8+rdx+10h]          ; MOV(Mov_r64_rm64) [RDX,mem(64u,R8:br,DS:sr)]         encoding(5 bytes) = 49 8b 54 10 10
030ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
030dh jne short 0317h               ; JNE(Jne_rel8_64) [317h:jmp64]                        encoding(2 bytes) = 75 08
030fh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0312h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0315h jmp short 031fh               ; JMP(Jmp_rel8_64) [31Fh:jmp64]                        encoding(2 bytes) = eb 08
0317h lea r8,[rdx+10h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RDX:br,DS:sr)]        encoding(4 bytes) = 4c 8d 42 10
031bh mov r9d,[rdx+8]               ; MOV(Mov_r32_rm32) [R9D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 4a 08
031fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0321h jmp short 0390h               ; JMP(Jmp_rel8_64) [390h:jmp64]                        encoding(2 bytes) = eb 6d
0323h mov [rsp+104h],ebp            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EBP]        encoding(7 bytes) = 89 ac 24 04 01 00 00
032ah mov [rsp+150h],rsi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RSI]        encoding(8 bytes) = 48 89 b4 24 50 01 00 00
0332h mov [rsp+8Ch],ebx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EBX]        encoding(7 bytes) = 89 9c 24 8c 00 00 00
0339h cmp edx,r9d                   ; CMP(Cmp_r32_rm32) [EDX,R9D]                          encoding(3 bytes) = 41 3b d1
033ch jae near ptr 04ach            ; JAE(Jae_rel32_64) [4ACh:jmp64]                       encoding(6 bytes) = 0f 83 6a 01 00 00
0342h movsxd rbx,edx                ; MOVSXD(Movsxd_r64_rm32) [RBX,EDX]                    encoding(3 bytes) = 48 63 da
0345h movzx ebx,byte ptr [r8+rbx]   ; MOVZX(Movzx_r32_rm8) [EBX,mem(8u,R8:br,DS:sr)]       encoding(5 bytes) = 41 0f b6 1c 18
034ah mov rbp,[rsp+40h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 6c 24 40
034fh cmp r10d,[rbp+8]              ; CMP(Cmp_r32_rm32) [R10D,mem(32u,RBP:br,SS:sr)]       encoding(4 bytes) = 44 3b 55 08
0353h jae near ptr 04ach            ; JAE(Jae_rel32_64) [4ACh:jmp64]                       encoding(6 bytes) = 0f 83 53 01 00 00
0359h movsxd rsi,r10d               ; MOVSXD(Movsxd_r64_rm32) [RSI,R10D]                   encoding(3 bytes) = 49 63 f2
035ch mov [rbp+rsi+10h],bl          ; MOV(Mov_rm8_r8) [mem(8u,RBP:br,SS:sr),BL]            encoding(4 bytes) = 88 5c 35 10
0360h inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
0362h inc r10d                      ; INC(Inc_rm32) [R10D]                                 encoding(3 bytes) = 41 ff c2
0365h mov [rsp+94h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R10D]       encoding(8 bytes) = 44 89 94 24 94 00 00 00
036dh mov [rsp+40h],rbp             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RBP]        encoding(5 bytes) = 48 89 6c 24 40
0372h mov [rsp+80h],r11             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R11]        encoding(8 bytes) = 4c 89 9c 24 80 00 00 00
037ah mov ebx,[rsp+8Ch]             ; MOV(Mov_r32_rm32) [EBX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 9c 24 8c 00 00 00
0381h mov ebp,[rsp+104h]            ; MOV(Mov_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b ac 24 04 01 00 00
0388h mov rsi,[rsp+150h]            ; MOV(Mov_r64_rm64) [RSI,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b b4 24 50 01 00 00
0390h cmp edx,8                     ; CMP(Cmp_rm32_imm8) [EDX,8h:imm32]                    encoding(3 bytes) = 83 fa 08
0393h jge short 03beh               ; JGE(Jge_rel8_64) [3BEh:jmp64]                        encoding(2 bytes) = 7d 29
0395h mov r10d,[rsp+94h]            ; MOV(Mov_r32_rm32) [R10D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 8b 94 24 94 00 00 00
039dh mov r11,[rsp+80h]             ; MOV(Mov_r64_rm64) [R11,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8b 9c 24 80 00 00 00
03a5h cmp r10d,r11d                 ; CMP(Cmp_r32_rm32) [R10D,R11D]                        encoding(3 bytes) = 45 3b d3
03a8h jl near ptr 0323h             ; JL(Jl_rel32_64) [323h:jmp64]                         encoding(6 bytes) = 0f 8c 75 ff ff ff
03aeh mov [rsp+94h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R10D]       encoding(8 bytes) = 44 89 94 24 94 00 00 00
03b6h mov [rsp+80h],r11             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R11]        encoding(8 bytes) = 4c 89 9c 24 80 00 00 00
03beh inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
03c0h mov edx,[rsp+7Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 7c
03c4h cmp eax,edx                   ; CMP(Cmp_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 3b c2
03c6h mov [rsp+90h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 90 00 00 00
03cdh mov [rsp+7Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 7c
03d1h mov [rsp+30h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 30
03d6h jl near ptr 02d2h             ; JL(Jl_rel32_64) [2D2h:jmp64]                         encoding(6 bytes) = 0f 8c f6 fe ff ff
03dch mov rcx,[rsp+40h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 40
03e1h mov [rsp+98h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 00 00 00
03e9h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
03ebh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
03eeh lea rdx,[rsp+98h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 98 00 00 00
03f6h lea r8,[rsp+50h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 50
03fbh mov [r8],r13b                 ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),R13L]           encoding(3 bytes) = 45 88 28
03feh mov [r8+4],r12d               ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R12D]        encoding(4 bytes) = 45 89 60 04
0402h lea r8,[rsp+48h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 48
0407h mov [r8],cl                   ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),CL]             encoding(3 bytes) = 41 88 08
040ah mov [r8+2],r9w                ; MOV(Mov_rm16_r16) [mem(16u,R8:br,DS:sr),R9W]         encoding(5 bytes) = 66 45 89 48 02
040fh mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0412h mov r9,[rsp+50h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 50
0417h mov edx,[rsp+48h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 48
041bh mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
041fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0421h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0424h call 7FFDDB83EDC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF3B50h:jmp64]        encoding(5 bytes) = e8 27 37 ff ff
0429h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
042ch mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
042fh call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D9CE9F0h:jmp64]                encoding(5 bytes) = e8 bc e5 9c 5d
0434h call 7FFE3925E500h            ; CALL(Call_rel32_64) [5DA13290h:jmp64]                encoding(5 bytes) = e8 57 2e a1 5d
0439h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
043ch mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
043fh call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D9CE9F0h:jmp64]                encoding(5 bytes) = e8 ac e5 9c 5d
0444h inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
0447h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0451h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0454h cmp r15d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 79 10
0458h jl near ptr 014bh             ; JL(Jl_rel32_64) [14Bh:jmp64]                         encoding(6 bytes) = 0f 8c ed fc ff ff
045eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0461h call 7FFE39219B10h            ; CALL(Call_rel32_64) [5D9CE8A0h:jmp64]                encoding(5 bytes) = e8 3a e4 9c 5d
0466h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0469h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
046ch mov rax,[rsi]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSI:br,DS:sr)]        encoding(3 bytes) = 48 8b 06
046fh mov rax,[rax+68h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 68
0473h call qword ptr [rax+30h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 30
0476h vmovdqu xmm0,xmmword ptr [rsp+0E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 00 00 00
047fh vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
0488h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
048ah cmp ebp,ebx                   ; CMP(Cmp_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 3b eb
048ch jl near ptr 003dh             ; JL(Jl_rel32_64) [3Dh:jmp64]                          encoding(6 bytes) = 0f 8c ab fb ff ff
0492h add rsp,108h                  ; ADD(Add_rm64_imm32) [RSP,108h:imm64]                 encoding(7 bytes) = 48 81 c4 08 01 00 00
0499h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
049ah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
049bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
049ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
049dh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
049fh pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
04a1h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
04a3h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
04a5h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
04a6h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9222B0h:jmp64]        encoding(5 bytes) = e8 05 1e 92 ff
04abh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04ach call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F543C90h:jmp64]                encoding(5 bytes) = e8 df 37 54 5f
04b1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitBytes => new byte[1202]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x08,0x01,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x58,0xB9,0x2A,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0x48,0x8B,0x3A,0x8B,0x5A,0x08,0x33,0xED,0x85,0xDB,0x0F,0x8E,0x55,0x04,0x00,0x00,0x48,0x63,0xCD,0x44,0x0F,0xB6,0x34,0x0F,0x48,0x8D,0x8C,0x24,0xE0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xE0,0x00,0x00,0x00,0x41,0x8B,0xD6,0xE8,0x4B,0xCF,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x00,0x00,0x00,0x48,0xB9,0x28,0x6D,0x99,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA8,0x91,0x41,0x5F,0x44,0x88,0x70,0x08,0x4C,0x8B,0xF6,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x68,0x48,0x8B,0xC8,0xE8,0xFA,0x96,0x9D,0x5D,0x48,0x8B,0xD0,0x48,0x8D,0x4C,0x24,0x68,0xE8,0xAD,0xC9,0xFF,0xFF,0x48,0x8B,0xD0,0x49,0x8B,0xCE,0x49,0x8B,0x06,0x48,0x8B,0x40,0x58,0xFF,0x50,0x10,0x48,0x8D,0x8C,0x24,0xB0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0x68,0xC1,0x39,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4E,0x91,0x41,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x20,0xFF,0xFF,0xFF,0x7F,0x48,0xB9,0xF8,0xA9,0x39,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0x5F,0x92,0x41,0x5F,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD0,0xE8,0x63,0x82,0x41,0x5F,0x45,0x33,0xFF,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x3C,0x40,0x3E,0x5F,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0x13,0x03,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD7,0x49,0xBB,0xA0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xA0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x1A,0x03,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x8B,0xC1,0x44,0x8B,0xC2,0x49,0x03,0xC0,0x44,0x8B,0x84,0x24,0xD8,0x00,0x00,0x00,0x49,0x3B,0xC0,0x0F,0x87,0xE8,0x02,0x00,0x00,0x48,0x8B,0x84,0x24,0xD0,0x00,0x00,0x00,0x48,0x63,0xC9,0x48,0x03,0xC8,0x48,0x8D,0x84,0x24,0xA0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x8D,0x84,0x24,0xA0,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x58,0x49,0x89,0x08,0x41,0x89,0x50,0x08,0x48,0x8B,0xC8,0x48,0x8D,0x54,0x24,0x58,0xE8,0x83,0xCC,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x00,0x00,0x00,0x41,0xBC,0x01,0x00,0x00,0x00,0x41,0xBD,0x01,0x00,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0x98,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB0,0x00,0x00,0x00,0x48,0x8B,0x01,0x48,0x89,0x44,0x24,0x38,0x44,0x8B,0x41,0x08,0x44,0x89,0x84,0x24,0x88,0x00,0x00,0x00,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0x1B,0x3F,0x3E,0x5F,0x48,0xBA,0x38,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x8B,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x30,0x44,0x8B,0x84,0x24,0x88,0x00,0x00,0x00,0x44,0x89,0x44,0x24,0x7C,0x48,0x89,0x94,0x24,0x80,0x00,0x00,0x00,0x45,0x33,0xD2,0x44,0x89,0x94,0x24,0x94,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCE,0x90,0x41,0x5F,0x48,0x8B,0xC8,0x33,0xC0,0x89,0x84,0x24,0x90,0x00,0x00,0x00,0x83,0x7C,0x24,0x7C,0x00,0x0F,0x8E,0x28,0x01,0x00,0x00,0x48,0x89,0x4C,0x24,0x40,0x48,0xB9,0x80,0x80,0x21,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7D,0x01,0x00,0x00,0xE8,0x6E,0x93,0x41,0x5F,0x8B,0x84,0x24,0x90,0x00,0x00,0x00,0x48,0x63,0xD0,0x48,0x8B,0x4C,0x24,0x30,0x48,0x03,0xD1,0x0F,0xB6,0x12,0x49,0xB8,0xC0,0x57,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4D,0x8B,0x00,0x41,0x3B,0x50,0x08,0x0F,0x83,0xAE,0x01,0x00,0x00,0x48,0x63,0xD2,0x48,0xC1,0xE2,0x05,0x49,0x8B,0x54,0x10,0x10,0x48,0x85,0xD2,0x75,0x08,0x45,0x33,0xC0,0x45,0x33,0xC9,0xEB,0x08,0x4C,0x8D,0x42,0x10,0x44,0x8B,0x4A,0x08,0x33,0xD2,0xEB,0x6D,0x89,0xAC,0x24,0x04,0x01,0x00,0x00,0x48,0x89,0xB4,0x24,0x50,0x01,0x00,0x00,0x89,0x9C,0x24,0x8C,0x00,0x00,0x00,0x41,0x3B,0xD1,0x0F,0x83,0x6A,0x01,0x00,0x00,0x48,0x63,0xDA,0x41,0x0F,0xB6,0x1C,0x18,0x48,0x8B,0x6C,0x24,0x40,0x44,0x3B,0x55,0x08,0x0F,0x83,0x53,0x01,0x00,0x00,0x49,0x63,0xF2,0x88,0x5C,0x35,0x10,0xFF,0xC2,0x41,0xFF,0xC2,0x44,0x89,0x94,0x24,0x94,0x00,0x00,0x00,0x48,0x89,0x6C,0x24,0x40,0x4C,0x89,0x9C,0x24,0x80,0x00,0x00,0x00,0x8B,0x9C,0x24,0x8C,0x00,0x00,0x00,0x8B,0xAC,0x24,0x04,0x01,0x00,0x00,0x48,0x8B,0xB4,0x24,0x50,0x01,0x00,0x00,0x83,0xFA,0x08,0x7D,0x29,0x44,0x8B,0x94,0x24,0x94,0x00,0x00,0x00,0x4C,0x8B,0x9C,0x24,0x80,0x00,0x00,0x00,0x45,0x3B,0xD3,0x0F,0x8C,0x75,0xFF,0xFF,0xFF,0x44,0x89,0x94,0x24,0x94,0x00,0x00,0x00,0x4C,0x89,0x9C,0x24,0x80,0x00,0x00,0x00,0xFF,0xC0,0x8B,0x54,0x24,0x7C,0x3B,0xC2,0x89,0x84,0x24,0x90,0x00,0x00,0x00,0x89,0x54,0x24,0x7C,0x48,0x89,0x4C,0x24,0x30,0x0F,0x8C,0xF6,0xFE,0xFF,0xFF,0x48,0x8B,0x4C,0x24,0x40,0x48,0x89,0x8C,0x24,0x98,0x00,0x00,0x00,0x33,0xC9,0x45,0x33,0xC9,0x48,0x8D,0x94,0x24,0x98,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x50,0x45,0x88,0x28,0x45,0x89,0x60,0x04,0x4C,0x8D,0x44,0x24,0x48,0x41,0x88,0x08,0x66,0x45,0x89,0x48,0x02,0x48,0x8B,0xCA,0x4C,0x8B,0x4C,0x24,0x50,0x8B,0x54,0x24,0x48,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x27,0x37,0xFF,0xFF,0x48,0x8B,0xD0,0x49,0x8B,0xCE,0xE8,0xBC,0xE5,0x9C,0x5D,0xE8,0x57,0x2E,0xA1,0x5D,0x48,0x8B,0xD0,0x49,0x8B,0xCE,0xE8,0xAC,0xE5,0x9C,0x5D,0x41,0xFF,0xC7,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x79,0x10,0x0F,0x8C,0xED,0xFC,0xFF,0xFF,0x49,0x8B,0xCE,0xE8,0x3A,0xE4,0x9C,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0x48,0x8B,0x06,0x48,0x8B,0x40,0x68,0xFF,0x50,0x30,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0xFF,0xC5,0x3B,0xEB,0x0F,0x8C,0xAB,0xFB,0xFF,0xFF,0x48,0x81,0xC4,0x08,0x01,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x05,0x1E,0x92,0xFF,0xCC,0xE8,0xDF,0x37,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, TernaryOpKind[] kinds)
; location: [7FFDDB84B760h, 7FFDDB84B7D1h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9AF5D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9af5d8h:imm64]         encoding(10 bytes) = 48 b9 d8 f5 9a db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F418D50h:jmp64]                encoding(5 bytes) = e8 34 8d 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F417E90h:jmp64]                encoding(5 bytes) = e8 65 7e 41 5f
002bh mov rcx,7FFDDB9E7F80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e7f80h:imm64]         encoding(10 bytes) = 48 b9 80 7f 9e db fd 7f 00 00
0035h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F418D50h:jmp64]                encoding(5 bytes) = e8 16 8d 41 5f
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0041h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0044h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F417E90h:jmp64]                encoding(5 bytes) = e8 47 7e 41 5f
0049h mov rcx,7FFDDB835E18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb835e18h:imm64]         encoding(10 bytes) = 48 b9 18 5e 83 db fd 7f 00 00
0053h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0057h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
005ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0060h mov rax,7FFDDB84AE00h         ; MOV(Mov_r64_imm64) [RAX,7ffddb84ae00h:imm64]         encoding(10 bytes) = 48 b8 00 ae 84 db fd 7f 00 00
006ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0070h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0071h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> EmitBytes => new byte[116]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xD8,0xF5,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0x8D,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x65,0x7E,0x41,0x5F,0x48,0xB9,0x80,0x7F,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x16,0x8D,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x47,0x7E,0x41,0x5F,0x48,0xB9,0x18,0x5E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0x45,0x33,0xC0,0x48,0xB8,0x00,0xAE,0x84,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, OpArityKind:uint arity)
; location: [7FFDDB84B7F0h, 7FFDDB84B8D5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h lea eax,[rdx-1]               ; LEA(Lea_r32_m) [EAX,mem(Unknown,RDX:br,DS:sr)]       encoding(3 bytes) = 8d 42 ff
000bh cmp eax,3                     ; CMP(Cmp_rm32_imm8) [EAX,3h:imm32]                    encoding(3 bytes) = 83 f8 03
000eh ja short 0069h                ; JA(Ja_rel8_64) [69h:jmp64]                           encoding(2 bytes) = 77 59
0010h mov eax,eax                   ; MOV(Mov_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 8b c0
0012h lea r8,[7FFDDB84B8D8h]        ; LEA(Lea_r64_m) [R8,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 05 cf 00 00 00
0019h mov r8d,[r8+rax*4]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 04 80
001dh lea r9,[7FFDDB84B7F8h]        ; LEA(Lea_r64_m) [R9,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 0d e4 ff ff ff
0024h add r8,r9                     ; ADD(Add_r64_rm64) [R8,R9]                            encoding(3 bytes) = 4d 03 c1
0027h jmp r8                        ; JMP(Jmp_rm64) [R8]                                   encoding(3 bytes) = 41 ff e0
002ah mov rax,7FFDDB834460h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834460h:imm64]         encoding(10 bytes) = 48 b8 60 44 83 db fd 7f 00 00
0034h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0038h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0039h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
003ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
003bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
003ch jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
003fh mov rax,7FFDDB834468h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834468h:imm64]         encoding(10 bytes) = 48 b8 68 44 83 db fd 7f 00 00
0049h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
004dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
004eh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
004fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0050h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0051h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0054h mov rax,7FFDDB834470h         ; MOV(Mov_r64_imm64) [RAX,7ffddb834470h:imm64]         encoding(10 bytes) = 48 b8 70 44 83 db fd 7f 00 00
005eh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0062h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0063h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0064h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0065h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0066h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0069h mov esi,6Ch                   ; MOV(Mov_r32_imm32) [ESI,6ch:imm32]                   encoding(5 bytes) = be 6c 00 00 00
006eh mov edi,1                     ; MOV(Mov_r32_imm32) [EDI,1h:imm32]                    encoding(5 bytes) = bf 01 00 00 00
0073h mov ebx,edx                   ; MOV(Mov_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 8b da
0075h mov ecx,492h                  ; MOV(Mov_r32_imm32) [ECX,492h:imm32]                  encoding(5 bytes) = b9 92 04 00 00
007ah mov rdx,7FFDDB27A670h         ; MOV(Mov_r64_imm64) [RDX,7ffddb27a670h:imm64]         encoding(10 bytes) = 48 ba 70 a6 27 db fd 7f 00 00
0084h call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F543EF0h:jmp64]                encoding(5 bytes) = e8 67 3e 54 5f
0089h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
008ch mov ecx,492h                  ; MOV(Mov_r32_imm32) [ECX,492h:imm32]                  encoding(5 bytes) = b9 92 04 00 00
0091h mov rdx,7FFDDB27A670h         ; MOV(Mov_r64_imm64) [RDX,7ffddb27a670h:imm64]         encoding(10 bytes) = 48 ba 70 a6 27 db fd 7f 00 00
009bh call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F543EF0h:jmp64]                encoding(5 bytes) = e8 50 3e 54 5f
00a0h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
00a3h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
00a8h mov [rdx],dil                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),DIL]           encoding(3 bytes) = 40 88 3a
00abh mov [rdx+4],esi               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ESI]        encoding(3 bytes) = 89 72 04
00aeh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
00b1h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
00b3h mov r9,[rsp+20h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 20
00b8h call 7FFDDB84AE40h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF650h:jmp64]        encoding(5 bytes) = e8 93 f5 ff ff
00bdh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c0h mov rcx,7FFDDB552B78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb552b78h:imm64]         encoding(10 bytes) = 48 b9 78 2b 55 db fd 7f 00 00
00cah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F418CC0h:jmp64]                encoding(5 bytes) = e8 f1 8b 41 5f
00cfh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00d2h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00d5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00d8h call 7FFDDB471D68h            ; CALL(Call_rel32_64) [FFFFFFFFFFC26578h:jmp64]        encoding(5 bytes) = e8 9b 64 c2 ff
00ddh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00e0h call 7FFE3AC1A4F0h            ; CALL(Call_rel32_64) [5F3CED00h:jmp64]                encoding(5 bytes) = e8 1b ec 3c 5f
00e5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitBytes => new byte[230]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x8D,0x42,0xFF,0x83,0xF8,0x03,0x77,0x59,0x8B,0xC0,0x4C,0x8D,0x05,0xCF,0x00,0x00,0x00,0x45,0x8B,0x04,0x80,0x4C,0x8D,0x0D,0xE4,0xFF,0xFF,0xFF,0x4D,0x03,0xC1,0x41,0xFF,0xE0,0x48,0xB8,0x60,0x44,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0xB8,0x68,0x44,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0xB8,0x70,0x44,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0xBE,0x6C,0x00,0x00,0x00,0xBF,0x01,0x00,0x00,0x00,0x8B,0xDA,0xB9,0x92,0x04,0x00,0x00,0x48,0xBA,0x70,0xA6,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x67,0x3E,0x54,0x5F,0x48,0x8B,0xE8,0xB9,0x92,0x04,0x00,0x00,0x48,0xBA,0x70,0xA6,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x50,0x3E,0x54,0x5F,0x4C,0x8B,0xC0,0x48,0x8D,0x54,0x24,0x20,0x40,0x88,0x3A,0x89,0x72,0x04,0x48,0x8B,0xD5,0x8B,0xCB,0x4C,0x8B,0x4C,0x24,0x20,0xE8,0x93,0xF5,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x78,0x2B,0x55,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF1,0x8B,0x41,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0xE8,0x9B,0x64,0xC2,0xFF,0x48,0x8B,0xCF,0xE8,0x1B,0xEC,0x3C,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N2,N2,byte> Emit(UnaryLogicOpKind:uint kind, TextWriter dst)
; location: [7FFDDB84B910h, 7FFDDB84B978h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000ch mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0011h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0016h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
001bh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0020h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0023h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0025h mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0028h lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
002dh mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
002fh call 7FFDDB847D00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC3F0h:jmp64]        encoding(5 bytes) = e8 bc c3 ff ff
0034h vmovdqu xmm0,xmmword ptr [rsp+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 30
003ah vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0040h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0045h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0047h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
004ah call 7FFDDB84AF50h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF640h:jmp64]        encoding(5 bytes) = e8 f1 f5 ff ff
004fh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0052h lea rsi,[rsp+30h]             ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 74 24 30
0057h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F417D80h:jmp64]                encoding(5 bytes) = e8 24 7d 41 5f
005ch movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
005eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0061h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0065h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0066h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0067h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0068h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> EmitBytes => new byte[105]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x33,0xC0,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x8B,0xD9,0x8B,0xF2,0x49,0x8B,0xF8,0x48,0x8D,0x4C,0x24,0x30,0x8B,0xD6,0xE8,0xBC,0xC3,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x30,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x8B,0xD6,0x4C,0x8B,0xC7,0xE8,0xF1,0xF5,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0x74,0x24,0x30,0xE8,0x24,0x7D,0x41,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N4,N3,byte> Emit(BinaryLogicOpKind:byte kind, TextWriter dst)
; location: [7FFDDB84B9A0h, 7FFDDB84BA0Ah]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000ch mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0011h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0016h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
001bh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0020h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0023h mov rsi,r8                    ; MOV(Mov_r64_rm64) [RSI,R8]                           encoding(3 bytes) = 49 8b f0
0026h movzx edi,dl                  ; MOVZX(Movzx_r32_rm8) [EDI,DL]                        encoding(4 bytes) = 40 0f b6 fa
002ah mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
002ch lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
0031h call 7FFDDB848220h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC880h:jmp64]        encoding(5 bytes) = e8 4a c8 ff ff
0036h vmovdqu xmm0,xmmword ptr [rsp+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 30
003ch vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0042h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0047h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0049h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
004ch call 7FFDDB847C98h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC2F8h:jmp64]        encoding(5 bytes) = e8 a7 c2 ff ff
0051h mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0054h lea rsi,[rsp+30h]             ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 74 24 30
0059h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F417CF0h:jmp64]                encoding(5 bytes) = e8 92 7c 41 5f
005eh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0060h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0063h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0067h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0068h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0069h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> EmitBytes => new byte[107]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x33,0xC0,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x8B,0xD9,0x49,0x8B,0xF0,0x40,0x0F,0xB6,0xFA,0x8B,0xD7,0x48,0x8D,0x4C,0x24,0x30,0xE8,0x4A,0xC8,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x30,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x8B,0xD7,0x4C,0x8B,0xC6,0xE8,0xA7,0xC2,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0x74,0x24,0x30,0xE8,0x92,0x7C,0x41,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N8,N4,byte> Emit(TernaryOpKind:byte kind, TextWriter dst)
; location: [7FFDDB84BA30h, 7FFDDB84BA9Ah]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000ch mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0011h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0016h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
001bh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0020h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0023h mov rsi,r8                    ; MOV(Mov_r64_rm64) [RSI,R8]                           encoding(3 bytes) = 49 8b f0
0026h movzx edi,dl                  ; MOVZX(Movzx_r32_rm8) [EDI,DL]                        encoding(4 bytes) = 40 0f b6 fa
002ah mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
002ch lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
0031h call 7FFDDB848B60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD130h:jmp64]        encoding(5 bytes) = e8 fa d0 ff ff
0036h vmovdqu xmm0,xmmword ptr [rsp+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 30
003ch vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0042h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0047h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0049h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
004ch call 7FFDDB84AF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF530h:jmp64]        encoding(5 bytes) = e8 df f4 ff ff
0051h mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0054h lea rsi,[rsp+30h]             ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 74 24 30
0059h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F417C60h:jmp64]                encoding(5 bytes) = e8 02 7c 41 5f
005eh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0060h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0063h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0067h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0068h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0069h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> EmitBytes => new byte[107]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x33,0xC0,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x8B,0xD9,0x49,0x8B,0xF0,0x40,0x0F,0xB6,0xFA,0x8B,0xD7,0x48,0x8D,0x4C,0x24,0x30,0xE8,0xFA,0xD0,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x30,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x8B,0xD7,0x4C,0x8B,0xC6,0xE8,0xDF,0xF4,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0x74,0x24,0x30,0xE8,0x02,0x7C,0x41,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void EmitUnaryOps(TextWriter dst)
; location: [7FFDDB84BEC0h, 7FFDDB84C656h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,198h                  ; SUB(Sub_rm64_imm32) [RSP,198h:imm64]                 encoding(7 bytes) = 48 81 ec 98 01 00 00
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0019h lea rdi,[rsp+50h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 50
001eh mov ecx,52h                   ; MOV(Mov_r32_imm32) [ECX,52h:imm32]                   encoding(5 bytes) = b9 52 00 00 00
0023h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0025h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0027h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
002ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
002dh call 7FFDDB8412A0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF53E0h:jmp64]        encoding(5 bytes) = e8 ae 53 ff ff
0032h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0035h call 7FFDDB84AF70h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF0B0h:jmp64]        encoding(5 bytes) = e8 76 f0 ff ff
003ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003dh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
003fh cmp dword ptr [rdi+8],0       ; CMP(Cmp_rm32_imm8) [mem(32u,RDI:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 7f 08 00
0043h jle near ptr 075fh            ; JLE(Jle_rel32_64) [75Fh:jmp64]                       encoding(6 bytes) = 0f 8e 16 07 00 00
0049h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0053h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0058h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E3520h:jmp64]                encoding(5 bytes) = e8 c3 34 3e 5f
005dh movzx edx,bl                  ; MOVZX(Movzx_r32_rm8) [EDX,BL]                        encoding(3 bytes) = 0f b6 d3
0060h and edx,0Fh                   ; AND(And_rm32_imm8) [EDX,fh:imm32]                    encoding(3 bytes) = 83 e2 0f
0063h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0066h mov [rsp+190h],dl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 90 01 00 00
006dh lea rdx,[rsp+150h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 50 01 00 00
0075h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0079h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
007dh mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
0087h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
008ah mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
008dh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0090h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
009ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F418720h:jmp64]                encoding(5 bytes) = e8 81 86 41 5f
009fh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
00a3h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
00a6h lea rax,[rsp+150h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 50 01 00 00
00aeh mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
00b1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00b4h vmovdqu xmm0,xmmword ptr [rsp+150h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 01 00 00
00bdh vmovdqu xmmword ptr [rsp+180h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 01 00 00
00c6h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
00d0h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00d5h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F418720h:jmp64]                encoding(5 bytes) = e8 46 86 41 5f
00dah mov ecx,[rsp+190h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 01 00 00
00e1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00e4h test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
00e7h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
00eah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00edh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00efh mov [rsp+148h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 01 00 00
00f6h lea rdx,[rsp+148h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 48 01 00 00
00feh test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0100h jne short 0106h               ; JNE(Jne_rel8_64) [106h:jmp64]                        encoding(2 bytes) = 75 04
0102h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0104h jmp short 010bh               ; JMP(Jmp_rel8_64) [10Bh:jmp64]                        encoding(2 bytes) = eb 05
0106h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
010bh mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
010dh mov ecx,[rsp+148h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 01 00 00
0114h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0117h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
011ah lea rcx,[rsp+138h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 01 00 00
0122h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0126h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
012ah add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
012eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0133h lea rdx,[rsp+138h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 01 00 00
013bh lea r8,[rsp+60h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 60
0140h mov [r8],rax                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RAX]         encoding(3 bytes) = 49 89 00
0143h mov [r8+8],ecx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),ECX]         encoding(4 bytes) = 41 89 48 08
0147h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
014ah lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
014fh call 7FFDDB846E08h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAF48h:jmp64]        encoding(5 bytes) = e8 f4 ad ff ff
0154h vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
015dh vmovdqu xmmword ptr [rsp+170h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 01 00 00
0166h vmovdqu xmm0,xmmword ptr [rsp+170h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 01 00 00
016fh vmovdqu xmmword ptr [rsp+128h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 01 00 00
0178h vmovdqu xmm0,xmmword ptr [rsp+128h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 01 00 00
0181h vmovdqu xmmword ptr [rsp+118h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 01 00 00
018ah lea rcx,[rsp+118h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 01 00 00
0192h mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
0195h mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0199h lea rcx,[rsp+180h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 01 00 00
01a1h mov r15,[rcx]                 ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 39
01a4h mov r12d,[rcx+8]              ; MOV(Mov_r32_rm32) [R12D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 61 08
01a8h mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
01b2h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
01b5h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
01b9h mov r11,7FFDDB030FA8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fa8h:imm64]         encoding(10 bytes) = 49 bb a8 0f 03 db fd 7f 00 00
01c3h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01c5h mov rax,7FFDDB030FA8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fa8h:imm64]         encoding(10 bytes) = 48 b8 a8 0f 03 db fd 7f 00 00
01cfh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
01d1h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
01d3h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
01d6h jne short 01deh               ; JNE(Jne_rel8_64) [1DEh:jmp64]                        encoding(2 bytes) = 75 06
01d8h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
01dah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01dch jmp short 01e5h               ; JMP(Jmp_rel8_64) [1E5h:jmp64]                        encoding(2 bytes) = eb 07
01deh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
01e2h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
01e5h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
01e8h jbe near ptr 0791h            ; JBE(Jbe_rel32_64) [791h:jmp64]                       encoding(6 bytes) = 0f 86 a3 05 00 00
01eeh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
01f1h mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
01fbh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01feh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0201h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0204h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0206h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0209h mov eax,r12d                  ; MOV(Mov_r32_rm32) [EAX,R12D]                         encoding(3 bytes) = 41 8b c4
020ch cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
020fh ja near ptr 0773h             ; JA(Ja_rel32_64) [773h:jmp64]                         encoding(6 bytes) = 0f 87 5e 05 00 00
0215h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0218h add rcx,r15                   ; ADD(Add_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 03 cf
021bh cmp r14d,edx                  ; CMP(Cmp_r32_rm32) [R14D,EDX]                         encoding(3 bytes) = 44 3b f2
021eh ja near ptr 0779h             ; JA(Ja_rel32_64) [779h:jmp64]                         encoding(6 bytes) = 0f 87 55 05 00 00
0224h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0227h movsxd r8,r14d                ; MOVSXD(Movsxd_r64_rm32) [R8,R14D]                    encoding(3 bytes) = 4d 63 c6
022ah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9CD040h:jmp64]                encoding(5 bytes) = e8 11 ce 9c 5d
022fh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0239h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
023eh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F418720h:jmp64]                encoding(5 bytes) = e8 dd 84 41 5f
0243h mov ecx,[rsp+190h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 01 00 00
024ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
024dh test cl,2                     ; TEST(Test_rm8_imm8) [CL,2h:imm8]                     encoding(3 bytes) = f6 c1 02
0250h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
0253h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0256h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0258h mov [rsp+110h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 01 00 00
025fh lea rdx,[rsp+110h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 10 01 00 00
0267h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0269h jne short 026fh               ; JNE(Jne_rel8_64) [26Fh:jmp64]                        encoding(2 bytes) = 75 04
026bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
026dh jmp short 0274h               ; JMP(Jmp_rel8_64) [274h:jmp64]                        encoding(2 bytes) = eb 05
026fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0274h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0276h mov ecx,[rsp+110h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 01 00 00
027dh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0280h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0283h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0286h lea rcx,[rsp+100h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 01 00 00
028eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0292h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0296h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
029ah mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
029fh lea rdx,[rsp+100h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 00 01 00 00
02a7h lea r8,[rsp+60h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 60
02ach mov [r8],rax                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RAX]         encoding(3 bytes) = 49 89 00
02afh mov [r8+8],ecx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),ECX]         encoding(4 bytes) = 41 89 48 08
02b3h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
02b6h lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
02bbh call 7FFDDB846E08h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAF48h:jmp64]        encoding(5 bytes) = e8 88 ac ff ff
02c0h vmovdqu xmm0,xmmword ptr [rsp+100h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 01 00 00
02c9h vmovdqu xmmword ptr [rsp+160h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 01 00 00
02d2h vmovdqu xmm0,xmmword ptr [rsp+160h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 01 00 00
02dbh vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
02e4h vmovdqu xmm0,xmmword ptr [rsp+0F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 00 00 00
02edh vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
02f6h lea rcx,[rsp+0E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 00 00 00
02feh mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
0301h mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0305h lea rcx,[rsp+180h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 01 00 00
030dh mov r15,[rcx]                 ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 39
0310h mov r12d,[rcx+8]              ; MOV(Mov_r32_rm32) [R12D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 61 08
0314h mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
031eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0321h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0325h mov r11,7FFDDB030FB0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fb0h:imm64]         encoding(10 bytes) = 49 bb b0 0f 03 db fd 7f 00 00
032fh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0334h mov rax,7FFDDB030FB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fb0h:imm64]         encoding(10 bytes) = 48 b8 b0 0f 03 db fd 7f 00 00
033eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0340h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0342h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0345h jne short 034dh               ; JNE(Jne_rel8_64) [34Dh:jmp64]                        encoding(2 bytes) = 75 06
0347h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0349h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
034bh jmp short 0354h               ; JMP(Jmp_rel8_64) [354h:jmp64]                        encoding(2 bytes) = eb 07
034dh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0351h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0354h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0357h jbe near ptr 0791h            ; JBE(Jbe_rel32_64) [791h:jmp64]                       encoding(6 bytes) = 0f 86 34 04 00 00
035dh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0360h mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
036ah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
036dh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0370h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0373h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0375h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0378h mov eax,r12d                  ; MOV(Mov_r32_rm32) [EAX,R12D]                         encoding(3 bytes) = 41 8b c4
037bh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
037eh ja near ptr 077fh             ; JA(Ja_rel32_64) [77Fh:jmp64]                         encoding(6 bytes) = 0f 87 fb 03 00 00
0384h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0387h add rcx,r15                   ; ADD(Add_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 03 cf
038ah cmp r14d,edx                  ; CMP(Cmp_r32_rm32) [R14D,EDX]                         encoding(3 bytes) = 44 3b f2
038dh ja near ptr 0785h             ; JA(Ja_rel32_64) [785h:jmp64]                         encoding(6 bytes) = 0f 87 f2 03 00 00
0393h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0396h movsxd r8,r14d                ; MOVSXD(Movsxd_r64_rm32) [R8,R14D]                    encoding(3 bytes) = 4d 63 c6
0399h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9CD040h:jmp64]                encoding(5 bytes) = e8 a2 cc 9c 5d
039eh vmovdqu xmm0,xmmword ptr [rsp+180h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 01 00 00
03a7h vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
03b0h vmovdqu xmm0,xmmword ptr [rsp+0D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 00 00 00
03b9h vmovdqu xmmword ptr [rsp+0C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 00 00 00
03c2h mov rbp,rsi                   ; MOV(Mov_r64_rm64) [RBP,RSI]                          encoding(3 bytes) = 48 8b ee
03c5h vmovdqu xmm0,xmmword ptr [rsp+0C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 00 00 00
03ceh vmovdqu xmmword ptr [rsp+50h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 50
03d4h lea rcx,[rsp+50h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 50
03d9h mov rdx,1F96B009B10h          ; MOV(Mov_r64_imm64) [RDX,1f96b009b10h:imm64]          encoding(10 bytes) = 48 ba 10 9b 00 6b f9 01 00 00
03e3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
03e6h call 7FFDDB84B258h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF398h:jmp64]        encoding(5 bytes) = e8 ad ef ff ff
03ebh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
03eeh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
03f1h mov rax,[rbp]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 45 00
03f5h mov rax,[rax+58h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 58
03f9h call qword ptr [rax+10h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 10
03fch lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
0404h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0408h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
040ch mov rcx,7FFDDB39C168h         ; MOV(Mov_r64_imm64) [RCX,7ffddb39c168h:imm64]         encoding(10 bytes) = 48 b9 68 c1 39 db fd 7f 00 00
0416h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4185F0h:jmp64]                encoding(5 bytes) = e8 d5 81 41 5f
041bh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
041eh mov dword ptr [rbp+20h],7FFFFFFFh; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),7fffffffh:imm32] encoding(7 bytes) = c7 45 20 ff ff ff 7f
0425h mov rcx,7FFDDB39A9F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb39a9f8h:imm64]         encoding(10 bytes) = 48 b9 f8 a9 39 db fd 7f 00 00
042fh mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
0434h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F418720h:jmp64]                encoding(5 bytes) = e8 e7 82 41 5f
0439h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
043dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0440h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F417730h:jmp64]                encoding(5 bytes) = e8 eb 72 41 5f
0445h xor r14d,r14d                 ; XOR(Xor_r32_rm32) [R14D,R14D]                        encoding(3 bytes) = 45 33 f6
0448h mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
0452h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0455h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
0459h jle near ptr 0732h            ; JLE(Jle_rel32_64) [732h:jmp64]                       encoding(6 bytes) = 0f 8e d3 02 00 00
045fh mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
0469h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
046ch mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0470h mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
0473h mov r11,7FFDDB030FB8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fb8h:imm64]         encoding(10 bytes) = 49 bb b8 0f 03 db fd 7f 00 00
047dh mov rax,7FFDDB030FB8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fb8h:imm64]         encoding(10 bytes) = 48 b8 b8 0f 03 db fd 7f 00 00
0487h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0489h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
048bh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
048eh jne short 0496h               ; JNE(Jne_rel8_64) [496h:jmp64]                        encoding(2 bytes) = 75 06
0490h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0492h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0494h jmp short 049dh               ; JMP(Jmp_rel8_64) [49Dh:jmp64]                        encoding(2 bytes) = eb 07
0496h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
049ah mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
049dh cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
04a0h jbe near ptr 0791h            ; JBE(Jbe_rel32_64) [791h:jmp64]                       encoding(6 bytes) = 0f 86 eb 02 00 00
04a6h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
04a9h mov rdx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 ba a0 1e 01 6b f9 01 00 00
04b3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
04b6h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
04b9h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
04bbh mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
04beh add rax,r8                    ; ADD(Add_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 03 c0
04c1h mov r8d,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 00 00 00
04c9h cmp rax,r8                    ; CMP(Cmp_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 3b c0
04cch ja near ptr 078bh             ; JA(Ja_rel32_64) [78Bh:jmp64]                         encoding(6 bytes) = 0f 87 b9 02 00 00
04d2h mov rax,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 d0 00 00 00
04dah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
04ddh add rcx,rax                   ; ADD(Add_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 03 c8
04e0h lea rax,[rsp+98h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 00 00 00
04e8h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
04ech vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
04f0h lea rax,[rsp+98h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 00 00 00
04f8h lea r8,[rsp+60h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 60
04fdh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0500h mov [r8+8],edx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(4 bytes) = 41 89 50 08
0504h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0507h lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
050ch call 7FFDDB846E08h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAF48h:jmp64]        encoding(5 bytes) = e8 37 aa ff ff
0511h vmovdqu xmm0,xmmword ptr [rsp+98h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 00 00 00
051ah vmovdqu xmmword ptr [rsp+0A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 00 00 00
0523h mov r15d,1                    ; MOV(Mov_r32_imm32) [R15D,1h:imm32]                   encoding(6 bytes) = 41 bf 01 00 00 00
0529h mov r12d,1                    ; MOV(Mov_r32_imm32) [R12D,1h:imm32]                   encoding(6 bytes) = 41 bc 01 00 00 00
052fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0531h mov [rsp+90h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 90 00 00 00
0539h lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
0541h mov r13,[rcx]                 ; MOV(Mov_r64_rm64) [R13,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 29
0544h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0547h mov [rsp+84h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 84 00 00 00
054eh mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0558h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
055dh call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E3520h:jmp64]                encoding(5 bytes) = e8 be 2f 3e 5f
0562h mov rdx,1F96B011EB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011eb0h:imm64]          encoding(10 bytes) = 48 ba b0 1e 01 6b f9 01 00 00
056ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
056fh mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0573h mov eax,[rsp+84h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 84 00 00 00
057ah mov [rsp+74h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 74
057eh mov [rsp+78h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 78
0583h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0586h mov [rsp+8Ch],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 00 00 00
058eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0591h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
059bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F418720h:jmp64]                encoding(5 bytes) = e8 80 81 41 5f
05a0h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
05a3h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
05a5h mov [rsp+88h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 00 00 00
05ach cmp dword ptr [rsp+74h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(5 bytes) = 83 7c 24 74 00
05b1h jle near ptr 06b5h            ; JLE(Jle_rel32_64) [6B5h:jmp64]                       encoding(6 bytes) = 0f 8e fe 00 00 00
05b7h mov [rsp+30h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 30
05bch mov rcx,7FFDDB218080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb218080h:imm64]         encoding(10 bytes) = 48 b9 80 80 21 db fd 7f 00 00
05c6h mov edx,17Dh                  ; MOV(Mov_r32_imm32) [EDX,17dh:imm32]                  encoding(5 bytes) = ba 7d 01 00 00
05cbh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F4189F0h:jmp64]                encoding(5 bytes) = e8 20 84 41 5f
05d0h mov eax,[rsp+88h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 88 00 00 00
05d7h movsxd rdx,eax                ; MOVSXD(Movsxd_r64_rm32) [RDX,EAX]                    encoding(3 bytes) = 48 63 d0
05dah add rdx,r13                   ; ADD(Add_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 03 d5
05ddh movzx edx,byte ptr [rdx]      ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(3 bytes) = 0f b6 12
05e0h mov rcx,1F96AFE57C0h          ; MOV(Mov_r64_imm64) [RCX,1f96afe57c0h:imm64]          encoding(10 bytes) = 48 b9 c0 57 fe 6a f9 01 00 00
05eah mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
05edh cmp edx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 51 08
05f0h jae near ptr 0791h            ; JAE(Jae_rel32_64) [791h:jmp64]                       encoding(6 bytes) = 0f 83 9b 01 00 00
05f6h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
05f9h shl rdx,5                     ; SHL(Shl_rm64_imm8) [RDX,5h:imm8]                     encoding(4 bytes) = 48 c1 e2 05
05fdh mov rdx,[rcx+rdx+10h]         ; MOV(Mov_r64_rm64) [RDX,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 11 10
0602h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0605h jne short 060eh               ; JNE(Jne_rel8_64) [60Eh:jmp64]                        encoding(2 bytes) = 75 07
0607h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0609h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
060ch jmp short 0616h               ; JMP(Jmp_rel8_64) [616h:jmp64]                        encoding(2 bytes) = eb 08
060eh lea rcx,[rdx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4a 10
0612h mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0616h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0618h jmp short 0673h               ; JMP(Jmp_rel8_64) [673h:jmp64]                        encoding(2 bytes) = eb 59
061ah mov [rsp+0BCh],r14d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R14D]       encoding(8 bytes) = 44 89 b4 24 bc 00 00 00
0622h mov [rsp+38h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(5 bytes) = 48 89 7c 24 38
0627h cmp edx,r8d                   ; CMP(Cmp_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 3b d0
062ah jae near ptr 0791h            ; JAE(Jae_rel32_64) [791h:jmp64]                       encoding(6 bytes) = 0f 83 61 01 00 00
0630h movsxd r11,edx                ; MOVSXD(Movsxd_r64_rm32) [R11,EDX]                    encoding(3 bytes) = 4c 63 da
0633h movzx r11d,byte ptr [rcx+r11] ; MOVZX(Movzx_r32_rm8) [R11D,mem(8u,RCX:br,DS:sr)]     encoding(5 bytes) = 46 0f b6 1c 19
0638h mov rdi,[rsp+30h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 7c 24 30
063dh cmp r9d,[rdi+8]               ; CMP(Cmp_r32_rm32) [R9D,mem(32u,RDI:br,DS:sr)]        encoding(4 bytes) = 44 3b 4f 08
0641h jae near ptr 0791h            ; JAE(Jae_rel32_64) [791h:jmp64]                       encoding(6 bytes) = 0f 83 4a 01 00 00
0647h movsxd r14,r9d                ; MOVSXD(Movsxd_r64_rm32) [R14,R9D]                    encoding(3 bytes) = 4d 63 f1
064ah mov [rdi+r14+10h],r11b        ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),R11L]          encoding(5 bytes) = 46 88 5c 37 10
064fh inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
0651h inc r9d                       ; INC(Inc_rm32) [R9D]                                  encoding(3 bytes) = 41 ff c1
0654h mov [rsp+8Ch],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 00 00 00
065ch mov [rsp+30h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(5 bytes) = 48 89 7c 24 30
0661h mov [rsp+78h],r10             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R10]        encoding(5 bytes) = 4c 89 54 24 78
0666h mov rdi,[rsp+38h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 7c 24 38
066bh mov r14d,[rsp+0BCh]           ; MOV(Mov_r32_rm32) [R14D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 8b b4 24 bc 00 00 00
0673h cmp edx,8                     ; CMP(Cmp_rm32_imm8) [EDX,8h:imm32]                    encoding(3 bytes) = 83 fa 08
0676h jge short 0697h               ; JGE(Jge_rel8_64) [697h:jmp64]                        encoding(2 bytes) = 7d 1f
0678h mov r9d,[rsp+8Ch]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 8c 00 00 00
0680h mov r10,[rsp+78h]             ; MOV(Mov_r64_rm64) [R10,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8b 54 24 78
0685h cmp r9d,r10d                  ; CMP(Cmp_r32_rm32) [R9D,R10D]                         encoding(3 bytes) = 45 3b ca
0688h jl short 061ah                ; JL(Jl_rel8_64) [61Ah:jmp64]                          encoding(2 bytes) = 7c 90
068ah mov [rsp+8Ch],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 00 00 00
0692h mov [rsp+78h],r10             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R10]        encoding(5 bytes) = 4c 89 54 24 78
0697h inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
0699h mov edx,[rsp+74h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 74
069dh cmp eax,edx                   ; CMP(Cmp_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 3b c2
069fh mov [rsp+88h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 00 00 00
06a6h mov [rsp+74h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 74
06aah jl near ptr 05d0h             ; JL(Jl_rel32_64) [5D0h:jmp64]                         encoding(6 bytes) = 0f 8c 20 ff ff ff
06b0h mov rcx,[rsp+30h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 30
06b5h mov [rsp+90h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 90 00 00 00
06bdh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
06bfh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
06c2h lea rdx,[rsp+90h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 00 00 00
06cah lea r8,[rsp+48h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 48
06cfh mov [r8],r12b                 ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),R12L]           encoding(3 bytes) = 45 88 20
06d2h mov [r8+4],r15d               ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R15D]        encoding(4 bytes) = 45 89 78 04
06d6h lea r8,[rsp+40h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 40
06dbh mov [r8],cl                   ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),CL]             encoding(3 bytes) = 41 88 08
06deh mov [r8+2],r9w                ; MOV(Mov_rm16_r16) [mem(16u,R8:br,DS:sr),R9W]         encoding(5 bytes) = 66 45 89 48 02
06e3h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
06e6h mov r9,[rsp+48h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 48
06ebh mov edx,[rsp+40h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 40
06efh mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
06f3h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
06f5h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
06f8h call 7FFDDB83EDC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2F00h:jmp64]        encoding(5 bytes) = e8 03 28 ff ff
06fdh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0700h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0703h call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D9CDDA0h:jmp64]                encoding(5 bytes) = e8 98 d6 9c 5d
0708h call 7FFE3925E500h            ; CALL(Call_rel32_64) [5DA12640h:jmp64]                encoding(5 bytes) = e8 33 1f a1 5d
070dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0710h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0713h call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D9CDDA0h:jmp64]                encoding(5 bytes) = e8 88 d6 9c 5d
0718h inc r14d                      ; INC(Inc_rm32) [R14D]                                 encoding(3 bytes) = 41 ff c6
071bh mov rcx,1F96B011EA0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011ea0h:imm64]          encoding(10 bytes) = 48 b9 a0 1e 01 6b f9 01 00 00
0725h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0728h cmp r14d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 71 10
072ch jl near ptr 045fh             ; JL(Jl_rel32_64) [45Fh:jmp64]                         encoding(6 bytes) = 0f 8c 2d fd ff ff
0732h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0735h call 7FFE39219B10h            ; CALL(Call_rel32_64) [5D9CDC50h:jmp64]                encoding(5 bytes) = e8 16 d5 9c 5d
073ah mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
073dh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0740h mov rax,[rsi]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSI:br,DS:sr)]        encoding(3 bytes) = 48 8b 06
0743h mov rax,[rax+68h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 68
0747h call qword ptr [rax+30h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 30
074ah inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
074ch mov [rsp+38h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(5 bytes) = 48 89 7c 24 38
0751h cmp [rdi+8],ebx               ; CMP(Cmp_rm32_r32) [mem(32u,RDI:br,DS:sr),EBX]        encoding(3 bytes) = 39 5f 08
0754h mov rdi,[rsp+38h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 7c 24 38
0759h jg near ptr 005dh             ; JG(Jg_rel32_64) [5Dh:jmp64]                          encoding(6 bytes) = 0f 8f fe f8 ff ff
075fh add rsp,198h                  ; ADD(Add_rm64_imm32) [RSP,198h:imm64]                 encoding(7 bytes) = 48 81 c4 98 01 00 00
0766h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0767h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0768h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0769h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
076ah pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
076ch pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
076eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0770h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0772h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0773h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF921660h:jmp64]        encoding(5 bytes) = e8 e8 0e 92 ff
0778h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0779h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF921668h:jmp64]        encoding(5 bytes) = e8 ea 0e 92 ff
077eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
077fh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF921660h:jmp64]        encoding(5 bytes) = e8 dc 0e 92 ff
0784h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0785h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF921668h:jmp64]        encoding(5 bytes) = e8 de 0e 92 ff
078ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
078bh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF921660h:jmp64]        encoding(5 bytes) = e8 d0 0e 92 ff
0790h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0791h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F543040h:jmp64]                encoding(5 bytes) = e8 aa 28 54 5f
0796h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitUnaryOpsBytes => new byte[1943]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x98,0x01,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x50,0xB9,0x52,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0xE8,0xAE,0x53,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x76,0xF0,0xFF,0xFF,0x48,0x8B,0xF8,0x33,0xDB,0x83,0x7F,0x08,0x00,0x0F,0x8E,0x16,0x07,0x00,0x00,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0xC3,0x34,0x3E,0x5F,0x0F,0xB6,0xD3,0x83,0xE2,0x0F,0x0F,0xB6,0xD2,0x88,0x94,0x24,0x90,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x50,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x81,0x86,0x41,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x48,0x8D,0x84,0x24,0x50,0x01,0x00,0x00,0x48,0x89,0x08,0x89,0x50,0x08,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x01,0x00,0x00,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x46,0x86,0x41,0x5F,0x8B,0x8C,0x24,0x90,0x01,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x01,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x48,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x48,0x01,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x48,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x38,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x01,0x00,0x00,0x4C,0x8D,0x44,0x24,0x60,0x49,0x89,0x00,0x41,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x60,0xE8,0xF4,0xAD,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x18,0x01,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0x8D,0x8C,0x24,0x80,0x01,0x00,0x00,0x4C,0x8B,0x39,0x44,0x8B,0x61,0x08,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xA8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x48,0xB8,0xA8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xA3,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC4,0x4C,0x3B,0xC0,0x0F,0x87,0x5E,0x05,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCF,0x44,0x3B,0xF2,0x0F,0x87,0x55,0x05,0x00,0x00,0x48,0x8B,0xD5,0x4D,0x63,0xC6,0xE8,0x11,0xCE,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xDD,0x84,0x41,0x5F,0x8B,0x8C,0x24,0x90,0x01,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x02,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x10,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x10,0x01,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x10,0x01,0x00,0x00,0x83,0xC9,0x02,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x00,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x00,0x01,0x00,0x00,0x4C,0x8D,0x44,0x24,0x60,0x49,0x89,0x00,0x41,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x60,0xE8,0x88,0xAC,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE0,0x00,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0x8D,0x8C,0x24,0x80,0x01,0x00,0x00,0x4C,0x8B,0x39,0x44,0x8B,0x61,0x08,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xB0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x48,0xB8,0xB0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x34,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC4,0x4C,0x3B,0xC0,0x0F,0x87,0xFB,0x03,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCF,0x44,0x3B,0xF2,0x0F,0x87,0xF2,0x03,0x00,0x00,0x48,0x8B,0xD5,0x4D,0x63,0xC6,0xE8,0xA2,0xCC,0x9C,0x5D,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x00,0x00,0x00,0x48,0x8B,0xEE,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x50,0x48,0x8D,0x4C,0x24,0x50,0x48,0xBA,0x10,0x9B,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0xE8,0xAD,0xEF,0xFF,0xFF,0x48,0x8B,0xD0,0x48,0x8B,0xCD,0x48,0x8B,0x45,0x00,0x48,0x8B,0x40,0x58,0xFF,0x50,0x10,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0x68,0xC1,0x39,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD5,0x81,0x41,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x20,0xFF,0xFF,0xFF,0x7F,0x48,0xB9,0xF8,0xA9,0x39,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0xE7,0x82,0x41,0x5F,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD0,0xE8,0xEB,0x72,0x41,0x5F,0x45,0x33,0xF6,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0xD3,0x02,0x00,0x00,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD6,0x49,0xBB,0xB8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xB8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xEB,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x8B,0xC1,0x44,0x8B,0xC2,0x49,0x03,0xC0,0x44,0x8B,0x84,0x24,0xD8,0x00,0x00,0x00,0x49,0x3B,0xC0,0x0F,0x87,0xB9,0x02,0x00,0x00,0x48,0x8B,0x84,0x24,0xD0,0x00,0x00,0x00,0x48,0x63,0xC9,0x48,0x03,0xC8,0x48,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x60,0x49,0x89,0x08,0x41,0x89,0x50,0x08,0x48,0x8B,0xC8,0x48,0x8D,0x54,0x24,0x60,0xE8,0x37,0xAA,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x00,0x00,0x00,0x41,0xBF,0x01,0x00,0x00,0x00,0x41,0xBC,0x01,0x00,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0x90,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0x4C,0x8B,0x29,0x8B,0x41,0x08,0x89,0x84,0x24,0x84,0x00,0x00,0x00,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0xBE,0x2F,0x3E,0x5F,0x48,0xBA,0xB0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x8B,0x84,0x24,0x84,0x00,0x00,0x00,0x89,0x44,0x24,0x74,0x48,0x89,0x54,0x24,0x78,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x8C,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0x81,0x41,0x5F,0x48,0x8B,0xC8,0x33,0xC0,0x89,0x84,0x24,0x88,0x00,0x00,0x00,0x83,0x7C,0x24,0x74,0x00,0x0F,0x8E,0xFE,0x00,0x00,0x00,0x48,0x89,0x4C,0x24,0x30,0x48,0xB9,0x80,0x80,0x21,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7D,0x01,0x00,0x00,0xE8,0x20,0x84,0x41,0x5F,0x8B,0x84,0x24,0x88,0x00,0x00,0x00,0x48,0x63,0xD0,0x49,0x03,0xD5,0x0F,0xB6,0x12,0x48,0xB9,0xC0,0x57,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x3B,0x51,0x08,0x0F,0x83,0x9B,0x01,0x00,0x00,0x48,0x63,0xD2,0x48,0xC1,0xE2,0x05,0x48,0x8B,0x54,0x11,0x10,0x48,0x85,0xD2,0x75,0x07,0x33,0xC9,0x45,0x33,0xC0,0xEB,0x08,0x48,0x8D,0x4A,0x10,0x44,0x8B,0x42,0x08,0x33,0xD2,0xEB,0x59,0x44,0x89,0xB4,0x24,0xBC,0x00,0x00,0x00,0x48,0x89,0x7C,0x24,0x38,0x41,0x3B,0xD0,0x0F,0x83,0x61,0x01,0x00,0x00,0x4C,0x63,0xDA,0x46,0x0F,0xB6,0x1C,0x19,0x48,0x8B,0x7C,0x24,0x30,0x44,0x3B,0x4F,0x08,0x0F,0x83,0x4A,0x01,0x00,0x00,0x4D,0x63,0xF1,0x46,0x88,0x5C,0x37,0x10,0xFF,0xC2,0x41,0xFF,0xC1,0x44,0x89,0x8C,0x24,0x8C,0x00,0x00,0x00,0x48,0x89,0x7C,0x24,0x30,0x4C,0x89,0x54,0x24,0x78,0x48,0x8B,0x7C,0x24,0x38,0x44,0x8B,0xB4,0x24,0xBC,0x00,0x00,0x00,0x83,0xFA,0x08,0x7D,0x1F,0x44,0x8B,0x8C,0x24,0x8C,0x00,0x00,0x00,0x4C,0x8B,0x54,0x24,0x78,0x45,0x3B,0xCA,0x7C,0x90,0x44,0x89,0x8C,0x24,0x8C,0x00,0x00,0x00,0x4C,0x89,0x54,0x24,0x78,0xFF,0xC0,0x8B,0x54,0x24,0x74,0x3B,0xC2,0x89,0x84,0x24,0x88,0x00,0x00,0x00,0x89,0x54,0x24,0x74,0x0F,0x8C,0x20,0xFF,0xFF,0xFF,0x48,0x8B,0x4C,0x24,0x30,0x48,0x89,0x8C,0x24,0x90,0x00,0x00,0x00,0x33,0xC9,0x45,0x33,0xC9,0x48,0x8D,0x94,0x24,0x90,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x48,0x45,0x88,0x20,0x45,0x89,0x78,0x04,0x4C,0x8D,0x44,0x24,0x40,0x41,0x88,0x08,0x66,0x45,0x89,0x48,0x02,0x48,0x8B,0xCA,0x4C,0x8B,0x4C,0x24,0x48,0x8B,0x54,0x24,0x40,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x03,0x28,0xFF,0xFF,0x48,0x8B,0xD0,0x48,0x8B,0xCD,0xE8,0x98,0xD6,0x9C,0x5D,0xE8,0x33,0x1F,0xA1,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCD,0xE8,0x88,0xD6,0x9C,0x5D,0x41,0xFF,0xC6,0x48,0xB9,0xA0,0x1E,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x71,0x10,0x0F,0x8C,0x2D,0xFD,0xFF,0xFF,0x48,0x8B,0xCD,0xE8,0x16,0xD5,0x9C,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0x48,0x8B,0x06,0x48,0x8B,0x40,0x68,0xFF,0x50,0x30,0xFF,0xC3,0x48,0x89,0x7C,0x24,0x38,0x39,0x5F,0x08,0x48,0x8B,0x7C,0x24,0x38,0x0F,0x8F,0xFE,0xF8,0xFF,0xFF,0x48,0x81,0xC4,0x98,0x01,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xE8,0x0E,0x92,0xFF,0xCC,0xE8,0xEA,0x0E,0x92,0xFF,0xCC,0xE8,0xDC,0x0E,0x92,0xFF,0xCC,0xE8,0xDE,0x0E,0x92,0xFF,0xCC,0xE8,0xD0,0x0E,0x92,0xFF,0xCC,0xE8,0xAA,0x28,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void EmitBinaryOps(TextWriter dst)
; location: [7FFDDB84CD80h, 7FFDDB84ED4Ah]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,0B18h                 ; SUB(Sub_rm64_imm32) [RSP,b18h:imm64]                 encoding(7 bytes) = 48 81 ec 18 0b 00 00
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0019h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001eh mov ecx,2BCh                  ; MOV(Mov_r32_imm32) [ECX,2bch:imm32]                  encoding(5 bytes) = b9 bc 02 00 00
0023h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0025h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0027h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
002ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
002dh xor edi,edi                   ; XOR(Xor_r32_rm32) [EDI,EDI]                          encoding(2 bytes) = 33 ff
002fh mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0039h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
003eh call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E2660h:jmp64]                encoding(5 bytes) = e8 1d 26 3e 5f
0043h movzx edx,dil                 ; MOVZX(Movzx_r32_rm8) [EDX,DIL]                       encoding(4 bytes) = 40 0f b6 d7
0047h and edx,0Fh                   ; AND(And_rm32_imm8) [EDX,fh:imm32]                    encoding(3 bytes) = 83 e2 0f
004ah movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
004dh mov [rsp+0B10h],dl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 10 0b 00 00
0054h lea rdx,[rsp+0A90h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 0a 00 00
005ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0060h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
0064h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
006eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0071h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
0074h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0077h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0081h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 da 77 41 5f
0086h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
008ah mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
008dh lea rax,[rsp+0A90h]           ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 90 0a 00 00
0095h mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
0098h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
009bh vmovdqu xmm0,xmmword ptr [rsp+0A90h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 0a 00 00
00a4h vmovdqu xmmword ptr [rsp+0B00h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 0b 00 00
00adh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
00b7h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00bch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 9f 77 41 5f
00c1h mov ecx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 0b 00 00
00c8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00cbh test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
00ceh setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
00d1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00d4h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00d6h mov [rsp+0A88h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 0a 00 00
00ddh lea rdx,[rsp+0A88h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 88 0a 00 00
00e5h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
00e7h jne short 00edh               ; JNE(Jne_rel8_64) [EDh:jmp64]                         encoding(2 bytes) = 75 04
00e9h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00ebh jmp short 00f2h               ; JMP(Jmp_rel8_64) [F2h:jmp64]                         encoding(2 bytes) = eb 05
00edh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00f2h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
00f4h mov ecx,[rsp+0A88h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 0a 00 00
00fbh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00fdh mov [rsp+0A80h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 0a 00 00
0104h mov edx,[rsp+0A80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0a 00 00
010bh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
010eh mov [rsp+0A78h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 78 0a 00 00
0116h mov r8d,[rsp+0A78h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 78 0a 00 00
011eh lea r9,[rsp+0A70h]            ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 70 0a 00 00
0126h mov [r9],ecx                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),ECX]         encoding(3 bytes) = 41 89 09
0129h lea rcx,[rsp+0A68h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 0a 00 00
0131h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0133h lea rcx,[rsp+0A60h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 0a 00 00
013bh mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
013eh mov ecx,[rsp+0A70h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 0a 00 00
0145h mov [rsp+0A58h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 0a 00 00
014ch mov ecx,[rsp+0A58h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 0a 00 00
0153h mov edx,[rsp+0A68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0a 00 00
015ah mov [rsp+0A50h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 0a 00 00
0161h mov edx,[rsp+0A50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0a 00 00
0168h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
016ah or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
016ch mov edx,[rsp+0A60h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 0a 00 00
0173h mov [rsp+0A48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0a 00 00
017ah mov edx,[rsp+0A48h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 0a 00 00
0181h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0184h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0186h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0189h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
018ch lea rcx,[rsp+0A38h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 0a 00 00
0194h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0198h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
019ch lea rcx,[rsp+0A18h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 0a 00 00
01a4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
01a8h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
01ach add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
01b0h mov [rsp+0A10h],rax           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 10 0a 00 00
01b8h mov rcx,[rsp+0A10h]           ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 10 0a 00 00
01c0h lea rdx,[rsp+0A18h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 18 0a 00 00
01c8h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
01cbh mov dword ptr [rsp+0A20h],1   ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 20 0a 00 00 01 00 00 00
01d6h vmovdqu xmm0,xmmword ptr [rsp+0A18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0a 00 00
01dfh vmovdqu xmmword ptr [rsp+0A28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 0a 00 00
01e8h lea rcx,[rsp+0A38h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 0a 00 00
01f0h vmovdqu xmm0,xmmword ptr [rsp+0A28h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 0a 00 00
01f9h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
01ffh lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
0204h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB370h:jmp64]        encoding(5 bytes) = e8 67 b1 ff ff
0209h vmovdqu xmm0,xmmword ptr [rsp+0A38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 0a 00 00
0212h vmovdqu xmmword ptr [rsp+0AD0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 0a 00 00
021bh vmovdqu xmm0,xmmword ptr [rsp+0AD0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 0a 00 00
0224h vmovdqu xmmword ptr [rsp+0A00h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 0a 00 00
022dh vmovdqu xmm0,xmmword ptr [rsp+0A00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0a 00 00
0236h vmovdqu xmmword ptr [rsp+9F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 09 00 00
023fh vmovdqu xmm0,xmmword ptr [rsp+9F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 09 00 00
0248h vmovdqu xmmword ptr [rsp+9E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 09 00 00
0251h vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
025ah vmovdqu xmmword ptr [rsp+9D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 09 00 00
0263h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
026dh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0270h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0274h mov r11,7FFDDB030FC0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fc0h:imm64]         encoding(10 bytes) = 49 bb c0 0f 03 db fd 7f 00 00
027eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0280h mov rax,7FFDDB030FC0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fc0h:imm64]         encoding(10 bytes) = 48 b8 c0 0f 03 db fd 7f 00 00
028ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
028ch call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
028eh lea rcx,[rsp+9A0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a0 09 00 00
0296h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
029ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
029eh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
02a1h jne short 02b5h               ; JNE(Jne_rel8_64) [2B5h:jmp64]                        encoding(2 bytes) = 75 12
02a3h lea rax,[rsp+9A0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a0 09 00 00
02abh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02afh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
02b3h jmp short 02deh               ; JMP(Jmp_rel8_64) [2DEh:jmp64]                        encoding(2 bytes) = eb 29
02b5h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
02b9h mov [rsp+998h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 09 00 00
02c1h mov rcx,[rsp+998h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 09 00 00
02c9h lea rdx,[rsp+9A0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a0 09 00 00
02d1h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
02d4h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
02d7h mov [rsp+9A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 09 00 00
02deh vmovdqu xmm0,xmmword ptr [rsp+9A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 09 00 00
02e7h vmovdqu xmmword ptr [rsp+9B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 09 00 00
02f0h cmp dword ptr [rsp+9B8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 b8 09 00 00 00
02f8h jbe near ptr 1fc5h            ; JBE(Jbe_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 86 c7 1c 00 00
02feh mov rcx,[rsp+9B0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b0 09 00 00
0306h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0309h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
0313h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0316h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0319h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
031ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
031eh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0321h mov eax,[rsp+9D8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 d8 09 00 00
0328h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
032ah cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
032dh ja near ptr 1f89h             ; JA(Ja_rel32_64) [1F89h:jmp64]                        encoding(6 bytes) = 0f 87 56 1c 00 00
0333h mov r8,[rsp+9D0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 d0 09 00 00
033bh lea rax,[rsp+988h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 88 09 00 00
0343h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0347h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
034bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
034eh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0351h mov [rsp+980h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 80 09 00 00
0359h mov rcx,[rsp+980h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 80 09 00 00
0361h lea r8,[rsp+988h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 88 09 00 00
0369h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
036ch mov [rsp+990h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 09 00 00
0373h vmovdqu xmm0,xmmword ptr [rsp+988h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 09 00 00
037ch vmovdqu xmmword ptr [rsp+9C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 09 00 00
0385h vmovdqu xmm0,xmmword ptr [rsp+9C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 09 00 00
038eh vmovdqu xmmword ptr [rsp+970h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 09 00 00
0397h mov ecx,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 09 00 00
039eh cmp ecx,[rsp+978h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 78 09 00 00
03a5h ja near ptr 1f8fh             ; JA(Ja_rel32_64) [1F8Fh:jmp64]                        encoding(6 bytes) = 0f 87 e4 1b 00 00
03abh mov rcx,[rsp+970h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 09 00 00
03b3h mov rdx,[rsp+9E0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e0 09 00 00
03bbh mov r8d,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e8 09 00 00
03c3h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
03c6h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9CC180h:jmp64]                encoding(5 bytes) = e8 b5 bd 9c 5d
03cbh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
03d5h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
03dah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 81 74 41 5f
03dfh mov ecx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 0b 00 00
03e6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
03e9h test cl,2                     ; TEST(Test_rm8_imm8) [CL,2h:imm8]                     encoding(3 bytes) = f6 c1 02
03ech setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
03efh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
03f2h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
03f4h mov [rsp+968h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 09 00 00
03fbh lea rdx,[rsp+968h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 68 09 00 00
0403h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0405h jne short 040bh               ; JNE(Jne_rel8_64) [40Bh:jmp64]                        encoding(2 bytes) = 75 04
0407h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0409h jmp short 0410h               ; JMP(Jmp_rel8_64) [410h:jmp64]                        encoding(2 bytes) = eb 05
040bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0410h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0412h mov ecx,[rsp+968h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 09 00 00
0419h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
041bh mov [rsp+960h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 09 00 00
0422h mov edx,[rsp+960h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 09 00 00
0429h mov dword ptr [rsp+958h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 58 09 00 00 01 00 00 00
0434h mov r8d,[rsp+958h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 58 09 00 00
043ch lea r9,[rsp+950h]             ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 50 09 00 00
0444h mov [r9],ecx                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),ECX]         encoding(3 bytes) = 41 89 09
0447h lea rcx,[rsp+948h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 09 00 00
044fh mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0451h lea rcx,[rsp+940h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 09 00 00
0459h mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
045ch mov ecx,[rsp+950h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 09 00 00
0463h mov [rsp+938h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 09 00 00
046ah mov ecx,[rsp+938h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 09 00 00
0471h mov edx,[rsp+948h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 09 00 00
0478h mov [rsp+930h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 09 00 00
047fh mov edx,[rsp+930h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 09 00 00
0486h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0488h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
048ah mov edx,[rsp+940h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 09 00 00
0491h mov [rsp+928h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 09 00 00
0498h mov edx,[rsp+928h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 09 00 00
049fh shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
04a2h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
04a4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
04a7h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
04aah lea rcx,[rsp+918h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 09 00 00
04b2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
04b6h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
04bah lea rcx,[rsp+8F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 08 00 00
04c2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
04c6h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
04cah add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
04ceh mov [rsp+8F0h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 f0 08 00 00
04d6h mov rcx,[rsp+8F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 08 00 00
04deh lea rdx,[rsp+8F8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 08 00 00
04e6h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
04e9h mov dword ptr [rsp+900h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 00 09 00 00 01 00 00 00
04f4h vmovdqu xmm0,xmmword ptr [rsp+8F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 08 00 00
04fdh vmovdqu xmmword ptr [rsp+908h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 09 00 00
0506h lea rcx,[rsp+918h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 09 00 00
050eh vmovdqu xmm0,xmmword ptr [rsp+908h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 09 00 00
0517h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
051dh lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
0522h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB370h:jmp64]        encoding(5 bytes) = e8 49 ae ff ff
0527h vmovdqu xmm0,xmmword ptr [rsp+918h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 09 00 00
0530h vmovdqu xmmword ptr [rsp+0AC0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 0a 00 00
0539h vmovdqu xmm0,xmmword ptr [rsp+0AC0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 0a 00 00
0542h vmovdqu xmmword ptr [rsp+8E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 08 00 00
054bh vmovdqu xmm0,xmmword ptr [rsp+8E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 08 00 00
0554h vmovdqu xmmword ptr [rsp+8D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 08 00 00
055dh vmovdqu xmm0,xmmword ptr [rsp+8D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 08 00 00
0566h vmovdqu xmmword ptr [rsp+8C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 08 00 00
056fh vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
0578h vmovdqu xmmword ptr [rsp+8B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 08 00 00
0581h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
058bh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
058eh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0592h mov r11,7FFDDB030FC8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fc8h:imm64]         encoding(10 bytes) = 49 bb c8 0f 03 db fd 7f 00 00
059ch mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
05a1h mov rax,7FFDDB030FC8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fc8h:imm64]         encoding(10 bytes) = 48 b8 c8 0f 03 db fd 7f 00 00
05abh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
05adh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
05afh lea rcx,[rsp+880h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 08 00 00
05b7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
05bbh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
05bfh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
05c2h jne short 05d6h               ; JNE(Jne_rel8_64) [5D6h:jmp64]                        encoding(2 bytes) = 75 12
05c4h lea rax,[rsp+880h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 80 08 00 00
05cch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
05d0h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
05d4h jmp short 05ffh               ; JMP(Jmp_rel8_64) [5FFh:jmp64]                        encoding(2 bytes) = eb 29
05d6h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
05dah mov [rsp+878h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 78 08 00 00
05e2h mov rcx,[rsp+878h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 08 00 00
05eah lea rdx,[rsp+880h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 08 00 00
05f2h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
05f5h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
05f8h mov [rsp+888h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 08 00 00
05ffh vmovdqu xmm0,xmmword ptr [rsp+880h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 08 00 00
0608h vmovdqu xmmword ptr [rsp+890h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 08 00 00
0611h cmp dword ptr [rsp+898h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 98 08 00 00 00
0619h jbe near ptr 1fc5h            ; JBE(Jbe_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 86 a6 19 00 00
061fh mov rcx,[rsp+890h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 08 00 00
0627h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
062ah mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
0634h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0637h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
063ah mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
063dh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
063fh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0642h cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
0645h ja near ptr 1f95h             ; JA(Ja_rel32_64) [1F95h:jmp64]                        encoding(6 bytes) = 0f 87 4a 19 00 00
064bh mov r8,[rsp+8B0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 b0 08 00 00
0653h lea rax,[rsp+868h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 68 08 00 00
065bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
065fh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0663h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0666h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0669h mov [rsp+860h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 60 08 00 00
0671h mov rcx,[rsp+860h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 08 00 00
0679h lea r8,[rsp+868h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 68 08 00 00
0681h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0684h mov [rsp+870h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 08 00 00
068bh vmovdqu xmm0,xmmword ptr [rsp+868h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 08 00 00
0694h vmovdqu xmmword ptr [rsp+8A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 08 00 00
069dh vmovdqu xmm0,xmmword ptr [rsp+8A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 08 00 00
06a6h vmovdqu xmmword ptr [rsp+850h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 08 00 00
06afh mov ecx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 08 00 00
06b6h cmp ecx,[rsp+858h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 58 08 00 00
06bdh ja near ptr 1f9bh             ; JA(Ja_rel32_64) [1F9Bh:jmp64]                        encoding(6 bytes) = 0f 87 d8 18 00 00
06c3h mov rcx,[rsp+850h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 08 00 00
06cbh mov rdx,[rsp+8C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 08 00 00
06d3h mov r8d,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c8 08 00 00
06dbh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
06deh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9CC180h:jmp64]                encoding(5 bytes) = e8 9d ba 9c 5d
06e3h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
06edh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
06f2h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 69 71 41 5f
06f7h mov ecx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 0b 00 00
06feh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0701h test cl,4                     ; TEST(Test_rm8_imm8) [CL,4h:imm8]                     encoding(3 bytes) = f6 c1 04
0704h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
0707h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
070ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
070ch mov [rsp+848h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 08 00 00
0713h lea rdx,[rsp+848h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 48 08 00 00
071bh test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
071dh jne short 0723h               ; JNE(Jne_rel8_64) [723h:jmp64]                        encoding(2 bytes) = 75 04
071fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0721h jmp short 0728h               ; JMP(Jmp_rel8_64) [728h:jmp64]                        encoding(2 bytes) = eb 05
0723h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0728h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
072ah mov ecx,[rsp+848h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 08 00 00
0731h mov dword ptr [rsp+840h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 40 08 00 00 01 00 00 00
073ch mov edx,[rsp+840h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 08 00 00
0743h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0746h mov [rsp+838h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 38 08 00 00
074eh mov r8d,[rsp+838h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 38 08 00 00
0756h lea r9,[rsp+830h]             ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 30 08 00 00
075eh mov [r9],ecx                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),ECX]         encoding(3 bytes) = 41 89 09
0761h lea rcx,[rsp+828h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 08 00 00
0769h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
076bh lea rcx,[rsp+820h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 08 00 00
0773h mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
0776h mov ecx,[rsp+830h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 08 00 00
077dh mov [rsp+818h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 08 00 00
0784h mov ecx,[rsp+818h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 08 00 00
078bh mov edx,[rsp+828h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 08 00 00
0792h mov [rsp+810h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 08 00 00
0799h mov edx,[rsp+810h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 08 00 00
07a0h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
07a2h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
07a4h mov edx,[rsp+820h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 08 00 00
07abh mov [rsp+808h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 08 00 00
07b2h mov edx,[rsp+808h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 08 00 00
07b9h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
07bch or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
07beh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
07c1h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
07c4h lea rcx,[rsp+7F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 07 00 00
07cch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
07d0h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
07d4h lea rcx,[rsp+7D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 07 00 00
07dch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
07e0h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
07e4h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
07e8h mov [rsp+7D0h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 d0 07 00 00
07f0h mov rcx,[rsp+7D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 07 00 00
07f8h lea rdx,[rsp+7D8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d8 07 00 00
0800h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0803h mov dword ptr [rsp+7E0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e0 07 00 00 01 00 00 00
080eh vmovdqu xmm0,xmmword ptr [rsp+7D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 07 00 00
0817h vmovdqu xmmword ptr [rsp+7E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 07 00 00
0820h lea rcx,[rsp+7F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 07 00 00
0828h vmovdqu xmm0,xmmword ptr [rsp+7E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 07 00 00
0831h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
0837h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
083ch call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB370h:jmp64]        encoding(5 bytes) = e8 2f ab ff ff
0841h vmovdqu xmm0,xmmword ptr [rsp+7F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 07 00 00
084ah vmovdqu xmmword ptr [rsp+0AB0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 0a 00 00
0853h vmovdqu xmm0,xmmword ptr [rsp+0AB0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 0a 00 00
085ch vmovdqu xmmword ptr [rsp+7C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 07 00 00
0865h vmovdqu xmm0,xmmword ptr [rsp+7C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 07 00 00
086eh vmovdqu xmmword ptr [rsp+7B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 07 00 00
0877h vmovdqu xmm0,xmmword ptr [rsp+7B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 07 00 00
0880h vmovdqu xmmword ptr [rsp+7A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 07 00 00
0889h vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
0892h vmovdqu xmmword ptr [rsp+790h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 07 00 00
089bh mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
08a5h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
08a8h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
08ach mov r11,7FFDDB030FD0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fd0h:imm64]         encoding(10 bytes) = 49 bb d0 0f 03 db fd 7f 00 00
08b6h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
08bbh mov rax,7FFDDB030FD0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fd0h:imm64]         encoding(10 bytes) = 48 b8 d0 0f 03 db fd 7f 00 00
08c5h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
08c7h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
08c9h lea rcx,[rsp+760h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 07 00 00
08d1h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08d5h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
08d9h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
08dch jne short 08f0h               ; JNE(Jne_rel8_64) [8F0h:jmp64]                        encoding(2 bytes) = 75 12
08deh lea rax,[rsp+760h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 60 07 00 00
08e6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08eah vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
08eeh jmp short 0919h               ; JMP(Jmp_rel8_64) [919h:jmp64]                        encoding(2 bytes) = eb 29
08f0h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
08f4h mov [rsp+758h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 58 07 00 00
08fch mov rcx,[rsp+758h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 58 07 00 00
0904h lea rdx,[rsp+760h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 07 00 00
090ch mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
090fh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0912h mov [rsp+768h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 07 00 00
0919h vmovdqu xmm0,xmmword ptr [rsp+760h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 07 00 00
0922h vmovdqu xmmword ptr [rsp+770h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 07 00 00
092bh cmp dword ptr [rsp+778h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 78 07 00 00 00
0933h jbe near ptr 1fc5h            ; JBE(Jbe_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 86 8c 16 00 00
0939h mov rcx,[rsp+770h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 07 00 00
0941h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0944h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
094eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0951h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0954h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0957h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0959h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
095ch cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
095fh ja near ptr 1fa1h             ; JA(Ja_rel32_64) [1FA1h:jmp64]                        encoding(6 bytes) = 0f 87 3c 16 00 00
0965h mov r8,[rsp+790h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 90 07 00 00
096dh lea rax,[rsp+748h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 48 07 00 00
0975h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0979h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
097dh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0980h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0983h mov [rsp+740h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 40 07 00 00
098bh mov rcx,[rsp+740h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 40 07 00 00
0993h lea r8,[rsp+748h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 48 07 00 00
099bh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
099eh mov [rsp+750h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 07 00 00
09a5h vmovdqu xmm0,xmmword ptr [rsp+748h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 07 00 00
09aeh vmovdqu xmmword ptr [rsp+780h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 07 00 00
09b7h vmovdqu xmm0,xmmword ptr [rsp+780h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 07 00 00
09c0h vmovdqu xmmword ptr [rsp+730h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 07 00 00
09c9h mov ecx,[rsp+7A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 07 00 00
09d0h cmp ecx,[rsp+738h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 38 07 00 00
09d7h ja near ptr 1fa7h             ; JA(Ja_rel32_64) [1FA7h:jmp64]                        encoding(6 bytes) = 0f 87 ca 15 00 00
09ddh mov rcx,[rsp+730h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 07 00 00
09e5h mov rdx,[rsp+7A0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a0 07 00 00
09edh mov r8d,[rsp+7A8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a8 07 00 00
09f5h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
09f8h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9CC180h:jmp64]                encoding(5 bytes) = e8 83 b7 9c 5d
09fdh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0a07h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0a0ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 4f 6e 41 5f
0a11h mov ecx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 0b 00 00
0a18h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a1bh test cl,8                     ; TEST(Test_rm8_imm8) [CL,8h:imm8]                     encoding(3 bytes) = f6 c1 08
0a1eh setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
0a21h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a24h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0a26h mov [rsp+728h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 07 00 00
0a2dh lea rdx,[rsp+728h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 28 07 00 00
0a35h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0a37h jne short 0a3dh               ; JNE(Jne_rel8_64) [A3Dh:jmp64]                        encoding(2 bytes) = 75 04
0a39h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0a3bh jmp short 0a42h               ; JMP(Jmp_rel8_64) [A42h:jmp64]                        encoding(2 bytes) = eb 05
0a3dh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0a42h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0a44h mov ecx,[rsp+728h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 07 00 00
0a4bh mov dword ptr [rsp+720h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 20 07 00 00 01 00 00 00
0a56h mov edx,[rsp+720h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 07 00 00
0a5dh mov dword ptr [rsp+718h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 18 07 00 00 01 00 00 00
0a68h mov r8d,[rsp+718h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 18 07 00 00
0a70h lea r9,[rsp+710h]             ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 10 07 00 00
0a78h mov [r9],ecx                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),ECX]         encoding(3 bytes) = 41 89 09
0a7bh lea rcx,[rsp+708h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 07 00 00
0a83h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0a85h lea rcx,[rsp+700h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 07 00 00
0a8dh mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
0a90h mov ecx,[rsp+710h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 07 00 00
0a97h mov [rsp+6F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 06 00 00
0a9eh mov ecx,[rsp+6F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 06 00 00
0aa5h mov edx,[rsp+708h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 07 00 00
0aach mov [rsp+6F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 06 00 00
0ab3h mov edx,[rsp+6F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 06 00 00
0abah shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0abch or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0abeh mov edx,[rsp+700h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 07 00 00
0ac5h mov [rsp+6E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 06 00 00
0acch mov edx,[rsp+6E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 06 00 00
0ad3h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0ad6h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0ad8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0adbh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0adeh lea rcx,[rsp+6D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 06 00 00
0ae6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0aeah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0aeeh lea rcx,[rsp+6B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 06 00 00
0af6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0afah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0afeh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0b02h mov [rsp+6B0h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 b0 06 00 00
0b0ah mov rcx,[rsp+6B0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b0 06 00 00
0b12h lea rdx,[rsp+6B8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b8 06 00 00
0b1ah mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0b1dh mov dword ptr [rsp+6C0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c0 06 00 00 01 00 00 00
0b28h vmovdqu xmm0,xmmword ptr [rsp+6B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 06 00 00
0b31h vmovdqu xmmword ptr [rsp+6C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 06 00 00
0b3ah lea rcx,[rsp+6D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 06 00 00
0b42h vmovdqu xmm0,xmmword ptr [rsp+6C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 06 00 00
0b4bh vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
0b51h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
0b56h call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB370h:jmp64]        encoding(5 bytes) = e8 15 a8 ff ff
0b5bh vmovdqu xmm0,xmmword ptr [rsp+6D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 06 00 00
0b64h vmovdqu xmmword ptr [rsp+0AA0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 0a 00 00
0b6dh vmovdqu xmm0,xmmword ptr [rsp+0AA0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 0a 00 00
0b76h vmovdqu xmmword ptr [rsp+6A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 06 00 00
0b7fh vmovdqu xmm0,xmmword ptr [rsp+6A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 06 00 00
0b88h vmovdqu xmmword ptr [rsp+690h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 06 00 00
0b91h vmovdqu xmm0,xmmword ptr [rsp+690h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 06 00 00
0b9ah vmovdqu xmmword ptr [rsp+680h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 06 00 00
0ba3h vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
0bach vmovdqu xmmword ptr [rsp+670h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 06 00 00
0bb5h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0bbfh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0bc2h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0bc6h mov r11,7FFDDB030FD8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fd8h:imm64]         encoding(10 bytes) = 49 bb d8 0f 03 db fd 7f 00 00
0bd0h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0bd5h mov rax,7FFDDB030FD8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fd8h:imm64]         encoding(10 bytes) = 48 b8 d8 0f 03 db fd 7f 00 00
0bdfh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0be1h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0be3h lea rcx,[rsp+640h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 06 00 00
0bebh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0befh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0bf3h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0bf6h jne short 0c0ah               ; JNE(Jne_rel8_64) [C0Ah:jmp64]                        encoding(2 bytes) = 75 12
0bf8h lea rax,[rsp+640h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 06 00 00
0c00h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c04h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0c08h jmp short 0c33h               ; JMP(Jmp_rel8_64) [C33h:jmp64]                        encoding(2 bytes) = eb 29
0c0ah lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0c0eh mov [rsp+638h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 38 06 00 00
0c16h mov rcx,[rsp+638h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 06 00 00
0c1eh lea rdx,[rsp+640h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 06 00 00
0c26h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0c29h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0c2ch mov [rsp+648h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 06 00 00
0c33h vmovdqu xmm0,xmmword ptr [rsp+640h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 06 00 00
0c3ch vmovdqu xmmword ptr [rsp+650h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 06 00 00
0c45h cmp dword ptr [rsp+658h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 58 06 00 00 00
0c4dh jbe near ptr 1fc5h            ; JBE(Jbe_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 86 72 13 00 00
0c53h mov rcx,[rsp+650h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 06 00 00
0c5bh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0c5eh mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
0c68h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0c6bh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0c6eh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0c71h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0c73h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0c76h cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
0c79h ja near ptr 1fadh             ; JA(Ja_rel32_64) [1FADh:jmp64]                        encoding(6 bytes) = 0f 87 2e 13 00 00
0c7fh mov r8,[rsp+670h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 70 06 00 00
0c87h lea rax,[rsp+628h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 28 06 00 00
0c8fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c93h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0c97h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0c9ah add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0c9dh mov [rsp+620h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 20 06 00 00
0ca5h mov rcx,[rsp+620h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 20 06 00 00
0cadh lea r8,[rsp+628h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 28 06 00 00
0cb5h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0cb8h mov [rsp+630h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 06 00 00
0cbfh vmovdqu xmm0,xmmword ptr [rsp+628h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 06 00 00
0cc8h vmovdqu xmmword ptr [rsp+660h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 06 00 00
0cd1h vmovdqu xmm0,xmmword ptr [rsp+660h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 06 00 00
0cdah vmovdqu xmmword ptr [rsp+610h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 06 00 00
0ce3h mov ecx,[rsp+688h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 06 00 00
0ceah cmp ecx,[rsp+618h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 18 06 00 00
0cf1h ja near ptr 1fb3h             ; JA(Ja_rel32_64) [1FB3h:jmp64]                        encoding(6 bytes) = 0f 87 bc 12 00 00
0cf7h mov rcx,[rsp+610h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 10 06 00 00
0cffh mov rdx,[rsp+680h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 80 06 00 00
0d07h mov r8d,[rsp+688h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 06 00 00
0d0fh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0d12h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9CC180h:jmp64]                encoding(5 bytes) = e8 69 b4 9c 5d
0d17h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0d21h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0d24h mov ebp,[rcx+14h]             ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 14
0d27h add ebp,0FFFFFFFDh            ; ADD(Add_rm32_imm8) [EBP,fffffffffffffffdh:imm32]     encoding(3 bytes) = 83 c5 fd
0d2ah mov word ptr [rsp+608h],0     ; MOV(Mov_rm16_imm16) [mem(16u,RSP:br,SS:sr),0h:imm16] encoding(10 bytes) = 66 c7 84 24 08 06 00 00 00 00
0d34h movsx rcx,word ptr [rsp+608h] ; MOVSX(Movsx_r64_rm16) [RCX,mem(16i,RSP:br,SS:sr)]    encoding(9 bytes) = 48 0f bf 8c 24 08 06 00 00
0d3dh mov [rsp+5D8h],cx             ; MOV(Mov_rm16_r16) [mem(16u,RSP:br,SS:sr),CX]         encoding(8 bytes) = 66 89 8c 24 d8 05 00 00
0d45h movsx rcx,word ptr [rsp+5D8h] ; MOVSX(Movsx_r64_rm16) [RCX,mem(16i,RSP:br,SS:sr)]    encoding(9 bytes) = 48 0f bf 8c 24 d8 05 00 00
0d4eh mov [rsp+5C0h],cx             ; MOV(Mov_rm16_r16) [mem(16u,RSP:br,SS:sr),CX]         encoding(8 bytes) = 66 89 8c 24 c0 05 00 00
0d56h lea rcx,[rsp+5C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 05 00 00
0d5eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d62h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0d66h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0d70h mov edx,9                     ; MOV(Mov_r32_imm32) [EDX,9h:imm32]                    encoding(5 bytes) = ba 09 00 00 00
0d75h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E2660h:jmp64]                encoding(5 bytes) = e8 e6 18 3e 5f
0d7ah mov rdx,7FFDDB9E6AE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb9e6ae0h:imm64]         encoding(10 bytes) = 48 ba e0 6a 9e db fd 7f 00 00
0d84h mov edx,[rdx]                 ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(2 bytes) = 8b 12
0d86h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0d89h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0d93h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 c8 6a 41 5f
0d98h lea rcx,[rsp+5A0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a0 05 00 00
0da0h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0da4h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0da8h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0dach mov [rsp+598h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 05 00 00
0db4h mov rcx,[rsp+598h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 05 00 00
0dbch lea rdx,[rsp+5A0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a0 05 00 00
0dc4h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0dc7h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0dcah mov [rsp+5A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 05 00 00
0dd1h vmovdqu xmm0,xmmword ptr [rsp+5A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 05 00 00
0ddah vmovdqu xmmword ptr [rsp+5C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 05 00 00
0de3h cmp byte ptr [rsp+5C0h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 c0 05 00 00 00
0debh je short 0e10h                ; JE(Je_rel8_64) [E10h:jmp64]                          encoding(2 bytes) = 74 23
0dedh cmp byte ptr [rsp+5C0h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 c0 05 00 00 00
0df5h je near ptr 1fb9h             ; JE(Je_rel32_64) [1FB9h:jmp64]                        encoding(6 bytes) = 0f 84 be 11 00 00
0dfbh lea rcx,[rsp+5C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 05 00 00
0e03h movzx edx,byte ptr [rsp+5C1h] ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 94 24 c1 05 00 00
0e0bh call 7FFDDB17F550h            ; CALL(Call_rel32_64) [FFFFFFFFFF9327D0h:jmp64]        encoding(5 bytes) = e8 c0 19 93 ff
0e10h lea rcx,[rsp+5B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 05 00 00
0e18h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0e1ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0e20h lea rcx,[rsp+5B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 05 00 00
0e28h vmovdqu xmm0,xmmword ptr [rsp+5C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 05 00 00
0e31h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
0e37h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
0e3ch call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBCB0h:jmp64]        encoding(5 bytes) = e8 6f ae ff ff
0e41h vmovdqu xmm0,xmmword ptr [rsp+5B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 05 00 00
0e4ah vmovdqu xmmword ptr [rsp+5F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 05 00 00
0e53h xor r14d,r14d                 ; XOR(Xor_r32_rm32) [R14D,R14D]                        encoding(3 bytes) = 45 33 f6
0e56h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0e60h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0e63h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
0e67h jle near ptr 1150h            ; JLE(Jle_rel32_64) [1150h:jmp64]                      encoding(6 bytes) = 0f 8e e3 02 00 00
0e6dh movzx ecx,r14b                ; MOVZX(Movzx_r32_rm8) [ECX,R14L]                      encoding(4 bytes) = 41 0f b6 ce
0e71h mov [rsp+590h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 05 00 00
0e78h mov ecx,[rsp+590h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 05 00 00
0e7fh mov [rsp+5F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 05 00 00
0e86h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
0e90h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0e93h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0e97h mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
0e9ah mov r11,7FFDDB030FE0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fe0h:imm64]         encoding(10 bytes) = 49 bb e0 0f 03 db fd 7f 00 00
0ea4h mov rax,7FFDDB030FE0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fe0h:imm64]         encoding(10 bytes) = 48 b8 e0 0f 03 db fd 7f 00 00
0eaeh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0eb0h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0eb2h lea rcx,[rsp+550h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 05 00 00
0ebah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0ebeh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0ec2h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0ec5h jne short 0ed9h               ; JNE(Jne_rel8_64) [ED9h:jmp64]                        encoding(2 bytes) = 75 12
0ec7h lea rax,[rsp+550h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 50 05 00 00
0ecfh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0ed3h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0ed7h jmp short 0f02h               ; JMP(Jmp_rel8_64) [F02h:jmp64]                        encoding(2 bytes) = eb 29
0ed9h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0eddh mov [rsp+548h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 48 05 00 00
0ee5h mov rcx,[rsp+548h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 05 00 00
0eedh lea rdx,[rsp+550h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 50 05 00 00
0ef5h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0ef8h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0efbh mov [rsp+558h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 05 00 00
0f02h vmovdqu xmm0,xmmword ptr [rsp+550h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 05 00 00
0f0bh vmovdqu xmmword ptr [rsp+580h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 05 00 00
0f14h cmp ebp,[rsp+588h]            ; CMP(Cmp_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b ac 24 88 05 00 00
0f1bh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 a4 10 00 00
0f21h movsxd rcx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBP]                    encoding(3 bytes) = 48 63 cd
0f24h shl rcx,4                     ; SHL(Shl_rm64_imm8) [RCX,4h:imm8]                     encoding(4 bytes) = 48 c1 e1 04
0f28h add rcx,[rsp+580h]            ; ADD(Add_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 8c 24 80 05 00 00
0f30h vmovdqu xmm0,xmmword ptr [rcx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 01
0f34h vmovdqu xmmword ptr [rsp+570h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 05 00 00
0f3dh vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
0f46h vmovdqu xmmword ptr [rsp+560h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 05 00 00
0f4fh movzx ecx,word ptr [rsp+570h] ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RSP:br,SS:sr)]    encoding(8 bytes) = 0f b7 8c 24 70 05 00 00
0f57h cmp ecx,[rsp+568h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 68 05 00 00
0f5eh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 61 10 00 00
0f64h mov rax,[rsp+560h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 60 05 00 00
0f6ch movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0f6fh movzx ecx,byte ptr [rax+rcx]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RAX:br,DS:sr)]      encoding(4 bytes) = 0f b6 0c 08
0f73h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0f75h mov [rsp+538h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 38 05 00 00
0f7ch lea rax,[rsp+538h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 38 05 00 00
0f84h movzx edx,byte ptr [rsp+572h] ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 94 24 72 05 00 00
0f8ch bt ecx,edx                    ; BT(Bt_rm32_r32) [ECX,EDX]                            encoding(3 bytes) = 0f a3 d1
0f8fh jb short 0f95h                ; JB(Jb_rel8_64) [F95h:jmp64]                          encoding(2 bytes) = 72 04
0f91h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0f93h jmp short 0f9ah               ; JMP(Jmp_rel8_64) [F9Ah:jmp64]                        encoding(2 bytes) = eb 05
0f95h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0f9ah mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
0f9ch mov ecx,[rsp+538h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 05 00 00
0fa3h mov [rsp+540h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 05 00 00
0faah mov ecx,[rsp+540h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 05 00 00
0fb1h mov [rsp+530h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 05 00 00
0fb8h cmp dword ptr [rsp+530h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 30 05 00 00 01
0fc0h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0fc3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0fc6h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0fc8h mov [rsp+528h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 28 05 00 00
0fcfh lea rax,[rsp+528h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 28 05 00 00
0fd7h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0fd9h jne short 0fdfh               ; JNE(Jne_rel8_64) [FDFh:jmp64]                        encoding(2 bytes) = 75 04
0fdbh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0fddh jmp short 0fe4h               ; JMP(Jmp_rel8_64) [FE4h:jmp64]                        encoding(2 bytes) = eb 05
0fdfh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0fe4h mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
0fe6h mov ecx,[rsp+528h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 05 00 00
0fedh mov [rsp+5E8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 05 00 00
0ff4h mov ecx,[rsp+5E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 05 00 00
0ffbh mov [rsp+520h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 05 00 00
1002h mov ecx,[rsp+520h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 05 00 00
1009h mov [rsp+518h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 05 00 00
1010h cmp dword ptr [rsp+518h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 18 05 00 00 01
1018h je short 102dh                ; JE(Je_rel8_64) [102Dh:jmp64]                         encoding(2 bytes) = 74 13
101ah mov byte ptr [rsp+510h],0     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = c6 84 24 10 05 00 00 00
1022h movsx rcx,byte ptr [rsp+510h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 10 05 00 00
102bh jmp short 103eh               ; JMP(Jmp_rel8_64) [103Eh:jmp64]                       encoding(2 bytes) = eb 11
102dh mov byte ptr [rsp+508h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 08 05 00 00 01
1035h movsx rcx,byte ptr [rsp+508h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 08 05 00 00
103eh mov [rsp+5E0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e0 05 00 00
1045h mov ecx,[rsp+5F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 05 00 00
104ch mov [rsp+500h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 05 00 00
1053h movsx rcx,byte ptr [rsp+5E0h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 e0 05 00 00
105ch mov [rsp+4F8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 f8 04 00 00
1063h mov ecx,[rsp+500h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 05 00 00
106ah mov [rsp+4F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 04 00 00
1071h movsx rcx,byte ptr [rsp+4F8h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 f8 04 00 00
107ah mov [rsp+4D8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 d8 04 00 00
1081h mov rcx,1F96B011FE8h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fe8h:imm64]          encoding(10 bytes) = 48 b9 e8 1f 01 6b f9 01 00 00
108bh mov r15,[rcx]                 ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 39
108eh mov ecx,[rsp+4F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 04 00 00
1095h call 7FFDDB848B00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBD80h:jmp64]        encoding(5 bytes) = e8 e6 ac ff ff
109ah cmp eax,[r15+8]               ; CMP(Cmp_r32_rm32) [EAX,mem(32u,R15:br,DS:sr)]        encoding(4 bytes) = 41 3b 47 08
109eh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 21 0f 00 00
10a4h movsxd rcx,eax                ; MOVSXD(Movsxd_r64_rm32) [RCX,EAX]                    encoding(3 bytes) = 48 63 c8
10a7h lea rcx,[r15+rcx*4+10h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 8f 10
10ach vmovdqu xmm0,xmmword ptr [rsp+5F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 05 00 00
10b5h vmovdqu xmmword ptr [rsp+4E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 04 00 00
10beh movzx edx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [EDX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 11
10c1h cmp edx,[rsp+4E8h]            ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 94 24 e8 04 00 00
10c8h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 f7 0e 00 00
10ceh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
10d1h add rdx,[rsp+4E0h]            ; ADD(Add_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 94 24 e0 04 00 00
10d9h movzx ecx,byte ptr [rcx+2]    ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 49 02
10ddh movsx rax,byte ptr [rsp+4D8h] ; MOVSX(Movsx_r64_rm8) [RAX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 84 24 d8 04 00 00
10e6h mov [rsp+4D0h],al             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(7 bytes) = 88 84 24 d0 04 00 00
10edh movsx rax,byte ptr [rsp+4D0h] ; MOVSX(Movsx_r64_rm8) [RAX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 84 24 d0 04 00 00
10f6h mov [rsp+4C8h],al             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(7 bytes) = 88 84 24 c8 04 00 00
10fdh movsx rax,byte ptr [rsp+4C8h] ; MOVSX(Movsx_r64_rm8) [RAX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 84 24 c8 04 00 00
1106h mov [rsp+4C0h],al             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(7 bytes) = 88 84 24 c0 04 00 00
110dh cmp byte ptr [rsp+4C0h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 c0 04 00 00 00
1115h je short 1125h                ; JE(Je_rel8_64) [1125h:jmp64]                         encoding(2 bytes) = 74 0e
1117h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
111ch shl eax,cl                    ; SHL(Shl_rm32_CL) [EAX,CL]                            encoding(2 bytes) = d3 e0
111eh movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
1121h or [rdx],cl                   ; OR(Or_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]              encoding(2 bytes) = 08 0a
1123h jmp short 1136h               ; JMP(Jmp_rel8_64) [1136h:jmp64]                       encoding(2 bytes) = eb 11
1125h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
112ah shl eax,cl                    ; SHL(Shl_rm32_CL) [EAX,CL]                            encoding(2 bytes) = d3 e0
112ch movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
112fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
1131h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1134h and [rdx],cl                  ; AND(And_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(2 bytes) = 20 0a
1136h inc r14d                      ; INC(Inc_rm32) [R14D]                                 encoding(3 bytes) = 41 ff c6
1139h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
1143h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1146h cmp r14d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 71 10
114ah jl near ptr 0e6dh             ; JL(Jl_rel32_64) [E6Dh:jmp64]                         encoding(6 bytes) = 0f 8c 1d fd ff ff
1150h vmovdqu xmm0,xmmword ptr [rsp+5F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 05 00 00
1159h vmovdqu xmmword ptr [rsp+0AF0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 0a 00 00
1162h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
116ch mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1171h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 ea 66 41 5f
1176h mov ecx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 0b 00 00
117dh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1180h lea rcx,[rsp+4B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 04 00 00
1188h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
118ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1190h lea rcx,[rsp+490h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 04 00 00
1198h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
119ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
11a0h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
11a4h mov [rsp+488h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 88 04 00 00
11ach mov rcx,[rsp+488h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 88 04 00 00
11b4h lea rdx,[rsp+490h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 04 00 00
11bch mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
11bfh mov dword ptr [rsp+498h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 98 04 00 00 01 00 00 00
11cah vmovdqu xmm0,xmmword ptr [rsp+490h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 04 00 00
11d3h vmovdqu xmmword ptr [rsp+4A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 04 00 00
11dch lea rcx,[rsp+4B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 04 00 00
11e4h vmovdqu xmm0,xmmword ptr [rsp+4A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 04 00 00
11edh vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
11f3h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
11f8h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBCB0h:jmp64]        encoding(5 bytes) = e8 b3 aa ff ff
11fdh vmovdqu xmm0,xmmword ptr [rsp+4B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 04 00 00
1206h vmovdqu xmmword ptr [rsp+0AE0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 0a 00 00
120fh vmovdqu xmm0,xmmword ptr [rsp+0AF0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 0a 00 00
1218h vmovdqu xmmword ptr [rsp+478h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 04 00 00
1221h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1223h mov [rsp+470h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 70 04 00 00
122bh vmovdqu xmm0,xmmword ptr [rsp+478h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 04 00 00
1234h vmovdqu xmmword ptr [rsp+448h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 04 00 00
123dh lea rdx,[rsp+438h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 04 00 00
1245h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1249h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
124dh mov rdx,1F96B011FC0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fc0h:imm64]          encoding(10 bytes) = 48 ba c0 1f 01 6b f9 01 00 00
1257h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
125ah mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
125eh mov [rsp+430h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 30 04 00 00
1266h mov rdx,[rsp+430h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 30 04 00 00
126eh mov [rsp+428h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 28 04 00 00
1276h mov rdx,[rsp+428h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 04 00 00
127eh lea rcx,[rsp+440h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 04 00 00
1286h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1289h mov byte ptr [rsp+438h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 38 04 00 00 01
1291h vmovdqu xmm0,xmmword ptr [rsp+448h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 04 00 00
129ah vmovdqu xmmword ptr [rsp+3E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 03 00 00
12a3h vmovdqu xmm0,xmmword ptr [rsp+438h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 04 00 00
12ach vmovdqu xmmword ptr [rsp+410h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 04 00 00
12b5h mov qword ptr [rsp+3B8h],8    ; MOV(Mov_rm64_imm32) [mem(64u,RSP:br,SS:sr),8h:imm64] encoding(12 bytes) = 48 c7 84 24 b8 03 00 00 08 00 00 00
12c1h mov rdx,[rsp+3B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 03 00 00
12c9h mov [rsp+420h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 20 04 00 00
12d1h vmovdqu xmm0,xmmword ptr [rsp+410h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 04 00 00
12dah vmovdqu xmmword ptr [rsp+400h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 04 00 00
12e3h cmp byte ptr [rsp+400h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 00 04 00 00 00
12ebh jne short 135ah               ; JNE(Jne_rel8_64) [135Ah:jmp64]                       encoding(2 bytes) = 75 6d
12edh mov edx,[rsp+3E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 03 00 00
12f4h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
12f7h mov [rsp+3B0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b0 03 00 00
12ffh mov rdx,[rsp+3B0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b0 03 00 00
1307h mov [rsp+3C0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 c0 03 00 00
130fh mov rdx,[rsp+420h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 04 00 00
1317h mov [rsp+3A8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a8 03 00 00
131fh mov rdx,[rsp+3C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 03 00 00
1327h mov [rsp+3A0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a0 03 00 00
132fh mov rdx,[rsp+3A8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a8 03 00 00
1337h imul rdx,[rsp+3A0h]           ; IMUL(Imul_r64_rm64) [RDX,mem(64i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f af 94 24 a0 03 00 00
1340h mov [rsp+398h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 98 03 00 00
1348h mov rdx,[rsp+398h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 03 00 00
1350h mov [rsp+3F8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f8 03 00 00
1358h jmp short 136ah               ; JMP(Jmp_rel8_64) [136Ah:jmp64]                       encoding(2 bytes) = eb 10
135ah mov rdx,[rsp+408h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 08 04 00 00
1362h mov [rsp+3F8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f8 03 00 00
136ah mov rdx,[rsp+3F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 03 00 00
1372h mov [rsp+3F0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f0 03 00 00
137ah xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
137ch mov rdx,[rsp+3F0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f0 03 00 00
1384h mov [rsp+390h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 90 03 00 00
138ch mov edx,[rsp+390h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 03 00 00
1393h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1396h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
13a0h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 bb 64 41 5f
13a5h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
13a8h xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
13abh cmp dword ptr [rsp+3E8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 e8 03 00 00 00
13b3h jle near ptr 150ch            ; JLE(Jle_rel32_64) [150Ch:jmp64]                      encoding(6 bytes) = 0f 8e 53 01 00 00
13b9h mov rcx,7FFDDB218080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb218080h:imm64]         encoding(10 bytes) = 48 b9 80 80 21 db fd 7f 00 00
13c3h mov edx,17Dh                  ; MOV(Mov_r32_imm32) [EDX,17dh:imm32]                  encoding(5 bytes) = ba 7d 01 00 00
13c8h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F417B30h:jmp64]                encoding(5 bytes) = e8 63 67 41 5f
13cdh cmp r15d,[rsp+3E8h]           ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b bc 24 e8 03 00 00
13d5h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 ea 0b 00 00
13dbh movsxd rax,r15d               ; MOVSXD(Movsxd_r64_rm32) [RAX,R15D]                   encoding(3 bytes) = 49 63 c7
13deh add rax,[rsp+3E0h]            ; ADD(Add_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 84 24 e0 03 00 00
13e6h movzx eax,byte ptr [rax]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RAX:br,DS:sr)]      encoding(3 bytes) = 0f b6 00
13e9h mov rdx,1F96AFE57C0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe57c0h:imm64]          encoding(10 bytes) = 48 ba c0 57 fe 6a f9 01 00 00
13f3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
13f6h cmp eax,[rdx+8]               ; CMP(Cmp_r32_rm32) [EAX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 3b 42 08
13f9h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 c6 0b 00 00
13ffh movsxd rax,eax                ; MOVSXD(Movsxd_r64_rm32) [RAX,EAX]                    encoding(3 bytes) = 48 63 c0
1402h shl rax,5                     ; SHL(Shl_rm64_imm8) [RAX,5h:imm8]                     encoding(4 bytes) = 48 c1 e0 05
1406h mov rax,[rdx+rax+10h]         ; MOV(Mov_r64_rm64) [RAX,mem(64u,RDX:br,DS:sr)]        encoding(5 bytes) = 48 8b 44 02 10
140bh lea rdx,[rsp+360h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 03 00 00
1413h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1417h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
141bh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
141eh jne short 1432h               ; JNE(Jne_rel8_64) [1432h:jmp64]                       encoding(2 bytes) = 75 12
1420h lea rax,[rsp+360h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 60 03 00 00
1428h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
142ch vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1430h jmp short 145dh               ; JMP(Jmp_rel8_64) [145Dh:jmp64]                       encoding(2 bytes) = eb 2b
1432h cmp [rax],eax                 ; CMP(Cmp_rm32_r32) [mem(32u,RAX:br,DS:sr),EAX]        encoding(2 bytes) = 39 00
1434h lea rdx,[rax+10h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 50 10
1438h mov [rsp+358h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 58 03 00 00
1440h mov rdx,[rsp+358h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 58 03 00 00
1448h lea rcx,[rsp+360h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 03 00 00
1450h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1453h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
1456h mov [rsp+368h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 68 03 00 00
145dh vmovdqu xmm0,xmmword ptr [rsp+360h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 03 00 00
1466h vmovdqu xmmword ptr [rsp+370h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 03 00 00
146fh vmovdqu xmm0,xmmword ptr [rsp+370h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 03 00 00
1478h vmovdqu xmmword ptr [rsp+380h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 03 00 00
1481h vmovdqu xmm0,xmmword ptr [rsp+380h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 03 00 00
148ah vmovdqu xmmword ptr [rsp+3D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 03 00 00
1493h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1495h jmp short 14c9h               ; JMP(Jmp_rel8_64) [14C9h:jmp64]                       encoding(2 bytes) = eb 32
1497h cmp eax,[rsp+3D8h]            ; CMP(Cmp_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 84 24 d8 03 00 00
149eh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 21 0b 00 00
14a4h mov rdx,[rsp+3D0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d0 03 00 00
14ach movsxd rcx,eax                ; MOVSXD(Movsxd_r64_rm32) [RCX,EAX]                    encoding(3 bytes) = 48 63 c8
14afh movzx edx,byte ptr [rdx+rcx]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(4 bytes) = 0f b6 14 0a
14b3h cmp ebp,[r14+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R14:br,DS:sr)]        encoding(4 bytes) = 41 3b 6e 08
14b7h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 08 0b 00 00
14bdh movsxd rcx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBP]                    encoding(3 bytes) = 48 63 cd
14c0h mov [r14+rcx+10h],dl          ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),DL]            encoding(5 bytes) = 41 88 54 0e 10
14c5h inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
14c7h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
14c9h mov rdx,[rsp+420h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 04 00 00
14d1h mov [rsp+350h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 50 03 00 00
14d9h cmp eax,[rsp+350h]            ; CMP(Cmp_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 84 24 50 03 00 00
14e0h jge short 14fbh               ; JGE(Jge_rel8_64) [14FBh:jmp64]                       encoding(2 bytes) = 7d 19
14e2h mov rdx,[rsp+3F0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f0 03 00 00
14eah mov [rsp+348h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 48 03 00 00
14f2h cmp ebp,[rsp+348h]            ; CMP(Cmp_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b ac 24 48 03 00 00
14f9h jl short 1497h                ; JL(Jl_rel8_64) [1497h:jmp64]                         encoding(2 bytes) = 7c 9c
14fbh inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
14feh cmp r15d,[rsp+3E8h]           ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b bc 24 e8 03 00 00
1506h jl near ptr 13cdh             ; JL(Jl_rel32_64) [13CDh:jmp64]                        encoding(6 bytes) = 0f 8c c1 fe ff ff
150ch mov [rsp+3C8h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 c8 03 00 00
1514h mov rdx,[rsp+3C8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c8 03 00 00
151ch mov [rsp+470h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 70 04 00 00
1524h vmovdqu xmm0,xmmword ptr [rsp+0AE0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 0a 00 00
152dh vmovdqu xmmword ptr [rsp+460h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 04 00 00
1536h vmovdqu xmm0,xmmword ptr [rsp+460h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 04 00 00
153fh vmovdqu xmmword ptr [rsp+338h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 03 00 00
1548h lea rdx,[rsp+328h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 28 03 00 00
1550h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1554h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
1558h mov rdx,1F96B011FC0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fc0h:imm64]          encoding(10 bytes) = 48 ba c0 1f 01 6b f9 01 00 00
1562h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1565h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
1569h mov [rsp+320h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 20 03 00 00
1571h mov rdx,[rsp+320h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 03 00 00
1579h mov [rsp+318h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 18 03 00 00
1581h mov rdx,[rsp+318h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 18 03 00 00
1589h lea rcx,[rsp+330h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 03 00 00
1591h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1594h mov byte ptr [rsp+328h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 28 03 00 00 01
159ch vmovdqu xmm0,xmmword ptr [rsp+338h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 03 00 00
15a5h vmovdqu xmmword ptr [rsp+2D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 02 00 00
15aeh vmovdqu xmm0,xmmword ptr [rsp+328h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 03 00 00
15b7h vmovdqu xmmword ptr [rsp+300h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 03 00 00
15c0h mov qword ptr [rsp+2A8h],8    ; MOV(Mov_rm64_imm32) [mem(64u,RSP:br,SS:sr),8h:imm64] encoding(12 bytes) = 48 c7 84 24 a8 02 00 00 08 00 00 00
15cch mov rdx,[rsp+2A8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a8 02 00 00
15d4h mov [rsp+310h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 10 03 00 00
15dch vmovdqu xmm0,xmmword ptr [rsp+300h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 03 00 00
15e5h vmovdqu xmmword ptr [rsp+2F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 02 00 00
15eeh cmp byte ptr [rsp+2F0h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 f0 02 00 00 00
15f6h jne short 1665h               ; JNE(Jne_rel8_64) [1665h:jmp64]                       encoding(2 bytes) = 75 6d
15f8h mov edx,[rsp+2D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 02 00 00
15ffh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1602h mov [rsp+2A0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a0 02 00 00
160ah mov rdx,[rsp+2A0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a0 02 00 00
1612h mov [rsp+2B0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b0 02 00 00
161ah mov rdx,[rsp+310h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 10 03 00 00
1622h mov [rsp+298h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 98 02 00 00
162ah mov rdx,[rsp+2B0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b0 02 00 00
1632h mov [rsp+290h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 90 02 00 00
163ah mov rdx,[rsp+298h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 02 00 00
1642h imul rdx,[rsp+290h]           ; IMUL(Imul_r64_rm64) [RDX,mem(64i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f af 94 24 90 02 00 00
164bh mov [rsp+288h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 88 02 00 00
1653h mov rdx,[rsp+288h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 88 02 00 00
165bh mov [rsp+2E8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 e8 02 00 00
1663h jmp short 1675h               ; JMP(Jmp_rel8_64) [1675h:jmp64]                       encoding(2 bytes) = eb 10
1665h mov rdx,[rsp+2F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 02 00 00
166dh mov [rsp+2E8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 e8 02 00 00
1675h mov rdx,[rsp+2E8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e8 02 00 00
167dh mov [rsp+2E0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 e0 02 00 00
1685h xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
1688h mov rdx,[rsp+2E0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e0 02 00 00
1690h mov [rsp+280h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 80 02 00 00
1698h mov edx,[rsp+280h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 02 00 00
169fh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
16a2h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
16ach call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 af 61 41 5f
16b1h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
16b4h xor r14d,r14d                 ; XOR(Xor_r32_rm32) [R14D,R14D]                        encoding(3 bytes) = 45 33 f6
16b7h cmp dword ptr [rsp+2D8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 d8 02 00 00 00
16bfh jle near ptr 1819h            ; JLE(Jle_rel32_64) [1819h:jmp64]                      encoding(6 bytes) = 0f 8e 54 01 00 00
16c5h mov rcx,7FFDDB218080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb218080h:imm64]         encoding(10 bytes) = 48 b9 80 80 21 db fd 7f 00 00
16cfh mov edx,17Dh                  ; MOV(Mov_r32_imm32) [EDX,17dh:imm32]                  encoding(5 bytes) = ba 7d 01 00 00
16d4h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F417B30h:jmp64]                encoding(5 bytes) = e8 57 64 41 5f
16d9h cmp r14d,[rsp+2D8h]           ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b b4 24 d8 02 00 00
16e1h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 de 08 00 00
16e7h movsxd rcx,r14d               ; MOVSXD(Movsxd_r64_rm32) [RCX,R14D]                   encoding(3 bytes) = 49 63 ce
16eah add rcx,[rsp+2D0h]            ; ADD(Add_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 8c 24 d0 02 00 00
16f2h movzx ecx,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 09
16f5h mov rdx,1F96AFE57C0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe57c0h:imm64]          encoding(10 bytes) = 48 ba c0 57 fe 6a f9 01 00 00
16ffh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1702h cmp ecx,[rdx+8]               ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 3b 4a 08
1705h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 ba 08 00 00
170bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
170eh shl rcx,5                     ; SHL(Shl_rm64_imm8) [RCX,5h:imm8]                     encoding(4 bytes) = 48 c1 e1 05
1712h mov rcx,[rdx+rcx+10h]         ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c 0a 10
1717h lea rdx,[rsp+250h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 50 02 00 00
171fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1723h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
1727h test rcx,rcx                  ; TEST(Test_rm64_r64) [RCX,RCX]                        encoding(3 bytes) = 48 85 c9
172ah jne short 173eh               ; JNE(Jne_rel8_64) [173Eh:jmp64]                       encoding(2 bytes) = 75 12
172ch lea rcx,[rsp+250h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 02 00 00
1734h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1738h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
173ch jmp short 1769h               ; JMP(Jmp_rel8_64) [1769h:jmp64]                       encoding(2 bytes) = eb 2b
173eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1740h lea rdx,[rcx+10h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 51 10
1744h mov [rsp+248h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 48 02 00 00
174ch mov rdx,[rsp+248h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 48 02 00 00
1754h lea rax,[rsp+250h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 50 02 00 00
175ch mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
175fh mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
1762h mov [rsp+258h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 02 00 00
1769h vmovdqu xmm0,xmmword ptr [rsp+250h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 02 00 00
1772h vmovdqu xmmword ptr [rsp+260h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 02 00 00
177bh vmovdqu xmm0,xmmword ptr [rsp+260h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 02 00 00
1784h vmovdqu xmmword ptr [rsp+270h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 02 00 00
178dh vmovdqu xmm0,xmmword ptr [rsp+270h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 02 00 00
1796h vmovdqu xmmword ptr [rsp+2C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 02 00 00
179fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
17a1h jmp short 17d5h               ; JMP(Jmp_rel8_64) [17D5h:jmp64]                       encoding(2 bytes) = eb 32
17a3h cmp ecx,[rsp+2C8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 c8 02 00 00
17aah jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 15 08 00 00
17b0h mov rdx,[rsp+2C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 02 00 00
17b8h movsxd rax,ecx                ; MOVSXD(Movsxd_r64_rm32) [RAX,ECX]                    encoding(3 bytes) = 48 63 c1
17bbh movzx edx,byte ptr [rdx+rax]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(4 bytes) = 0f b6 14 02
17bfh cmp r15d,[rbp+8]              ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RBP:br,SS:sr)]       encoding(4 bytes) = 44 3b 7d 08
17c3h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 fc 07 00 00
17c9h movsxd rax,r15d               ; MOVSXD(Movsxd_r64_rm32) [RAX,R15D]                   encoding(3 bytes) = 49 63 c7
17cch mov [rbp+rax+10h],dl          ; MOV(Mov_rm8_r8) [mem(8u,RBP:br,SS:sr),DL]            encoding(4 bytes) = 88 54 05 10
17d0h inc ecx                       ; INC(Inc_rm32) [ECX]                                  encoding(2 bytes) = ff c1
17d2h inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
17d5h mov rdx,[rsp+310h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 10 03 00 00
17ddh mov [rsp+240h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 40 02 00 00
17e5h cmp ecx,[rsp+240h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 40 02 00 00
17ech jge short 1808h               ; JGE(Jge_rel8_64) [1808h:jmp64]                       encoding(2 bytes) = 7d 1a
17eeh mov rdx,[rsp+2E0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e0 02 00 00
17f6h mov [rsp+238h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 38 02 00 00
17feh cmp r15d,[rsp+238h]           ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b bc 24 38 02 00 00
1806h jl short 17a3h                ; JL(Jl_rel8_64) [17A3h:jmp64]                         encoding(2 bytes) = 7c 9b
1808h inc r14d                      ; INC(Inc_rm32) [R14D]                                 encoding(3 bytes) = 41 ff c6
180bh cmp r14d,[rsp+2D8h]           ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b b4 24 d8 02 00 00
1813h jl near ptr 16d9h             ; JL(Jl_rel32_64) [16D9h:jmp64]                        encoding(6 bytes) = 0f 8c c0 fe ff ff
1819h mov [rsp+2B8h],rbp            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RBP]        encoding(8 bytes) = 48 89 ac 24 b8 02 00 00
1821h mov rdx,[rsp+2B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 02 00 00
1829h mov [rsp+458h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 58 04 00 00
1831h mov rdx,[rsp+458h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 58 04 00 00
1839h mov [rsp+228h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 28 02 00 00
1841h mov rdx,[rsp+470h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 70 04 00 00
1849h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
184ch mov rcx,[rsp+470h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 04 00 00
1854h mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
1857h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
1859h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
185bh test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
185dh jl short 1884h                ; JL(Jl_rel8_64) [1884h:jmp64]                         encoding(2 bytes) = 7c 25
185fh mov r8,[rsp+470h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 70 04 00 00
1867h cmp ecx,[r8+8]                ; CMP(Cmp_r32_rm32) [ECX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 48 08
186bh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 54 07 00 00
1871h movsxd r9,ecx                 ; MOVSXD(Movsxd_r64_rm32) [R9,ECX]                     encoding(3 bytes) = 4c 63 c9
1874h cmp byte ptr [r8+r9+10h],0    ; CMP(Cmp_rm8_imm8) [mem(8u,R8:br,DS:sr),0h:imm8]      encoding(6 bytes) = 43 80 7c 08 10 00
187ah jne short 1884h               ; JNE(Jne_rel8_64) [1884h:jmp64]                       encoding(2 bytes) = 75 08
187ch inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
187eh dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
1880h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
1882h jge short 185fh               ; JGE(Jge_rel8_64) [185Fh:jmp64]                       encoding(2 bytes) = 7d db
1884h sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
1886h lea rcx,[rsp+470h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 04 00 00
188eh call 7FFDDB83ED80h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2000h:jmp64]        encoding(5 bytes) = e8 6d 07 ff ff
1893h mov [rsp+230h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 30 02 00 00
189bh mov rdx,[rsp+228h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 02 00 00
18a3h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
18a6h mov rcx,[rsp+228h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 02 00 00
18aeh mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
18b1h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
18b3h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
18b5h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
18b7h jl short 18deh                ; JL(Jl_rel8_64) [18DEh:jmp64]                         encoding(2 bytes) = 7c 25
18b9h mov r8,[rsp+228h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 28 02 00 00
18c1h cmp ecx,[r8+8]                ; CMP(Cmp_r32_rm32) [ECX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 48 08
18c5h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 fa 06 00 00
18cbh movsxd r9,ecx                 ; MOVSXD(Movsxd_r64_rm32) [R9,ECX]                     encoding(3 bytes) = 4c 63 c9
18ceh cmp byte ptr [r8+r9+10h],0    ; CMP(Cmp_rm8_imm8) [mem(8u,R8:br,DS:sr),0h:imm8]      encoding(6 bytes) = 43 80 7c 08 10 00
18d4h jne short 18deh               ; JNE(Jne_rel8_64) [18DEh:jmp64]                       encoding(2 bytes) = 75 08
18d6h inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
18d8h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
18dah test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
18dch jge short 18b9h               ; JGE(Jge_rel8_64) [18B9h:jmp64]                       encoding(2 bytes) = 7d db
18deh sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
18e0h lea rcx,[rsp+228h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 02 00 00
18e8h call 7FFDDB83ED80h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2000h:jmp64]        encoding(5 bytes) = e8 13 07 ff ff
18edh mov [rsp+220h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 20 02 00 00
18f5h mov r8,[rsp+230h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 30 02 00 00
18fdh mov r14d,[r8+8]               ; MOV(Mov_r32_rm32) [R14D,mem(32u,R8:br,DS:sr)]        encoding(4 bytes) = 45 8b 70 08
1901h mov r8d,r14d                  ; MOV(Mov_r32_rm32) [R8D,R14D]                         encoding(3 bytes) = 45 8b c6
1904h mov rdx,[rsp+220h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 02 00 00
190ch mov r15d,[rdx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RDX:br,DS:sr)]       encoding(4 bytes) = 44 8b 7a 08
1910h cmp r15d,r8d                  ; CMP(Cmp_r32_rm32) [R15D,R8D]                         encoding(3 bytes) = 45 3b f8
1913h je short 1919h                ; JE(Je_rel8_64) [1919h:jmp64]                         encoding(2 bytes) = 74 04
1915h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
1917h jmp short 1965h               ; JMP(Jmp_rel8_64) [1965h:jmp64]                       encoding(2 bytes) = eb 4c
1919h xor r12d,r12d                 ; XOR(Xor_r32_rm32) [R12D,R12D]                        encoding(3 bytes) = 45 33 e4
191ch test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
191fh jle short 195ch               ; JLE(Jle_rel8_64) [195Ch:jmp64]                       encoding(2 bytes) = 7e 3b
1921h mov rcx,[rsp+230h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 02 00 00
1929h cmp r12d,r14d                 ; CMP(Cmp_r32_rm32) [R12D,R14D]                        encoding(3 bytes) = 45 3b e6
192ch jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 93 06 00 00
1932h movsxd rdx,r12d               ; MOVSXD(Movsxd_r64_rm32) [RDX,R12D]                   encoding(3 bytes) = 49 63 d4
1935h movzx ecx,byte ptr [rcx+rdx+10h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]    encoding(5 bytes) = 0f b6 4c 11 10
193ah mov rdx,[rsp+220h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 02 00 00
1942h cmp r12d,r15d                 ; CMP(Cmp_r32_rm32) [R12D,R15D]                        encoding(3 bytes) = 45 3b e7
1945h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 7a 06 00 00
194bh movsxd rax,r12d               ; MOVSXD(Movsxd_r64_rm32) [RAX,R12D]                   encoding(3 bytes) = 49 63 c4
194eh cmp cl,[rdx+rax+10h]          ; CMP(Cmp_r8_rm8) [CL,mem(8u,RDX:br,DS:sr)]            encoding(4 bytes) = 3a 4c 02 10
1952h jne short 1963h               ; JNE(Jne_rel8_64) [1963h:jmp64]                       encoding(2 bytes) = 75 0f
1954h inc r12d                      ; INC(Inc_rm32) [R12D]                                 encoding(3 bytes) = 41 ff c4
1957h cmp r14d,r12d                 ; CMP(Cmp_r32_rm32) [R14D,R12D]                        encoding(3 bytes) = 45 3b f4
195ah jg short 1921h                ; JG(Jg_rel8_64) [1921h:jmp64]                         encoding(2 bytes) = 7f c5
195ch mov ebp,1                     ; MOV(Mov_r32_imm32) [EBP,1h:imm32]                    encoding(5 bytes) = bd 01 00 00 00
1961h jmp short 1965h               ; JMP(Jmp_rel8_64) [1965h:jmp64]                       encoding(2 bytes) = eb 02
1963h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
1965h mov r8d,9Eh                   ; MOV(Mov_r32_imm32) [R8D,9eh:imm32]                   encoding(6 bytes) = 41 b8 9e 00 00 00
196bh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1970h lea r9,[rsp+218h]             ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 18 02 00 00
1978h mov [r9],dl                   ; MOV(Mov_rm8_r8) [mem(8u,R9:br,DS:sr),DL]             encoding(3 bytes) = 41 88 11
197bh mov [r9+4],r8d                ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),R8D]         encoding(4 bytes) = 45 89 41 04
197fh test bpl,bpl                  ; TEST(Test_rm8_r8) [BPL,BPL]                          encoding(3 bytes) = 40 84 ed
1982h jne short 19adh               ; JNE(Jne_rel8_64) [19ADh:jmp64]                       encoding(2 bytes) = 75 29
1984h mov r8,1F96B009B18h           ; MOV(Mov_r64_imm64) [R8,1f96b009b18h:imm64]           encoding(10 bytes) = 49 b8 18 9b 00 6b f9 01 00 00
198eh mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
1991h mov rdx,1F96B009B18h          ; MOV(Mov_r64_imm64) [RDX,1f96b009b18h:imm64]          encoding(10 bytes) = 48 ba 18 9b 00 6b f9 01 00 00
199bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
199eh mov r9,[rsp+218h]             ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 8c 24 18 02 00 00
19a6h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
19a8h call 7FFDDB160F70h            ; CALL(Call_rel32_64) [FFFFFFFFFF9141F0h:jmp64]        encoding(5 bytes) = e8 43 28 91 ff
19adh vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
19b6h vmovdqu xmmword ptr [rsp+208h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 02 00 00
19bfh vmovdqu xmm0,xmmword ptr [rsp+208h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 02 00 00
19c8h vmovdqu xmmword ptr [rsp+1F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 01 00 00
19d1h mov r14,rsi                   ; MOV(Mov_r64_rm64) [R14,RSI]                          encoding(3 bytes) = 4c 8b f6
19d4h vmovdqu xmm0,xmmword ptr [rsp+1F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 01 00 00
19ddh vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
19e3h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
19e8h mov rdx,1F96B009B10h          ; MOV(Mov_r64_imm64) [RDX,1f96b009b10h:imm64]          encoding(10 bytes) = 48 ba 10 9b 00 6b f9 01 00 00
19f2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
19f5h call 7FFDDB847CE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAF60h:jmp64]        encoding(5 bytes) = e8 66 95 ff ff
19fah mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
19fdh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
1a00h mov rax,[r14]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,R14:br,DS:sr)]        encoding(3 bytes) = 49 8b 06
1a03h mov rax,[rax+58h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 58
1a07h call qword ptr [rax+10h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 10
1a0ah mov rcx,7FFDDB39C168h         ; MOV(Mov_r64_imm64) [RCX,7ffddb39c168h:imm64]         encoding(10 bytes) = 48 b9 68 c1 39 db fd 7f 00 00
1a14h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F417730h:jmp64]                encoding(5 bytes) = e8 17 5d 41 5f
1a19h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
1a1ch mov dword ptr [r12+20h],7FFFFFFFh; MOV(Mov_rm32_imm32) [mem(32u,R12:br,DS:sr),7fffffffh:imm32] encoding(9 bytes) = 41 c7 44 24 20 ff ff ff 7f
1a25h mov rcx,7FFDDB39A9F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb39a9f8h:imm64]         encoding(10 bytes) = 48 b9 f8 a9 39 db fd 7f 00 00
1a2fh mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
1a34h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 27 5e 41 5f
1a39h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
1a3eh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1a41h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F416870h:jmp64]                encoding(5 bytes) = e8 2a 4e 41 5f
1a46h xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
1a49h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
1a53h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1a56h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
1a5ah jle near ptr 1f52h            ; JLE(Jle_rel32_64) [1F52h:jmp64]                      encoding(6 bytes) = 0f 8e f2 04 00 00
1a60h mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
1a6ah mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1a6dh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1a71h mov edx,r15d                  ; MOV(Mov_r32_rm32) [EDX,R15D]                         encoding(3 bytes) = 41 8b d7
1a74h mov r11,7FFDDB030FE8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030fe8h:imm64]         encoding(10 bytes) = 49 bb e8 0f 03 db fd 7f 00 00
1a7eh mov rax,7FFDDB030FE8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030fe8h:imm64]         encoding(10 bytes) = 48 b8 e8 0f 03 db fd 7f 00 00
1a88h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1a8ah call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
1a8ch lea rcx,[rsp+1B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 01 00 00
1a94h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1a98h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1a9ch test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1a9fh jne short 1ab3h               ; JNE(Jne_rel8_64) [1AB3h:jmp64]                       encoding(2 bytes) = 75 12
1aa1h lea rax,[rsp+1B0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b0 01 00 00
1aa9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1aadh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1ab1h jmp short 1adeh               ; JMP(Jmp_rel8_64) [1ADEh:jmp64]                       encoding(2 bytes) = eb 2b
1ab3h cmp [rax],eax                 ; CMP(Cmp_rm32_r32) [mem(32u,RAX:br,DS:sr),EAX]        encoding(2 bytes) = 39 00
1ab5h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1ab9h mov [rsp+1A8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a8 01 00 00
1ac1h mov rcx,[rsp+1A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 01 00 00
1ac9h lea rdx,[rsp+1B0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b0 01 00 00
1ad1h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1ad4h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1ad7h mov [rsp+1B8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 01 00 00
1adeh vmovdqu xmm0,xmmword ptr [rsp+1B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 01 00 00
1ae7h vmovdqu xmmword ptr [rsp+1C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 01 00 00
1af0h cmp dword ptr [rsp+1C8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 c8 01 00 00 00
1af8h jbe near ptr 1fc5h            ; JBE(Jbe_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 86 c7 04 00 00
1afeh mov rcx,[rsp+1C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 01 00 00
1b06h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1b09h mov rdx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 ba 28 1f 01 6b f9 01 00 00
1b13h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1b16h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1b19h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
1b1bh mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
1b1eh add rax,r8                    ; ADD(Add_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 03 c0
1b21h cmp rax,rbx                   ; CMP(Cmp_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 3b c3
1b24h ja near ptr 1fbfh             ; JA(Ja_rel32_64) [1FBFh:jmp64]                        encoding(6 bytes) = 0f 87 95 04 00 00
1b2ah mov rax,[rsp+208h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 08 02 00 00
1b32h lea r8,[rsp+198h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 98 01 00 00
1b3ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b3eh vmovdqu xmmword ptr [r8],xmm0 ; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,R8:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c4 c1 7a 7f 00
1b43h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1b46h add rcx,rax                   ; ADD(Add_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 03 c8
1b49h mov [rsp+190h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 90 01 00 00
1b51h mov rcx,[rsp+190h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 01 00 00
1b59h lea rax,[rsp+198h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 01 00 00
1b61h mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
1b64h mov [rsp+1A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 01 00 00
1b6bh vmovdqu xmm0,xmmword ptr [rsp+198h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 01 00 00
1b74h vmovdqu xmmword ptr [rsp+1D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 01 00 00
1b7dh vmovdqu xmm0,xmmword ptr [rsp+1D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 01 00 00
1b86h vmovdqu xmmword ptr [rsp+180h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 01 00 00
1b8fh lea rcx,[rsp+170h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 01 00 00
1b97h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b9bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1b9fh lea rcx,[rsp+170h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 01 00 00
1ba7h vmovdqu xmm0,xmmword ptr [rsp+180h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 01 00 00
1bb0h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
1bb6h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
1bbbh call 7FFDDB8480F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB370h:jmp64]        encoding(5 bytes) = e8 b0 97 ff ff
1bc0h vmovdqu xmm0,xmmword ptr [rsp+170h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 01 00 00
1bc9h vmovdqu xmmword ptr [rsp+1E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 01 00 00
1bd2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1bd4h mov [rsp+1E0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e0 01 00 00
1bdch mov dword ptr [rsp+1E4h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e4 01 00 00 01 00 00 00
1be7h mov byte ptr [rsp+1E0h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 e0 01 00 00 01
1befh mov rcx,[rsp+1E0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e0 01 00 00
1bf7h mov [rsp+160h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 60 01 00 00
1bffh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1c01h mov [rsp+168h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 68 01 00 00
1c09h vmovdqu xmm0,xmmword ptr [rsp+1E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 01 00 00
1c12h vmovdqu xmmword ptr [rsp+148h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 01 00 00
1c1bh lea rcx,[rsp+138h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 01 00 00
1c23h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c27h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1c2bh mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
1c35h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1c3ah call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E2660h:jmp64]                encoding(5 bytes) = e8 21 0a 3e 5f
1c3fh mov rdx,1F96B011F38h          ; MOV(Mov_r64_imm64) [RDX,1f96b011f38h:imm64]          encoding(10 bytes) = 48 ba 38 1f 01 6b f9 01 00 00
1c49h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1c4ch mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
1c50h mov [rsp+130h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 30 01 00 00
1c58h mov rdx,[rsp+130h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 30 01 00 00
1c60h mov [rsp+128h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 28 01 00 00
1c68h mov rdx,[rsp+128h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 01 00 00
1c70h lea rcx,[rsp+140h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 01 00 00
1c78h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1c7bh mov byte ptr [rsp+138h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 38 01 00 00 01
1c83h vmovdqu xmm0,xmmword ptr [rsp+148h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 01 00 00
1c8ch vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
1c95h vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
1c9eh vmovdqu xmmword ptr [rsp+110h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 01 00 00
1ca7h mov qword ptr [rsp+0B8h],8    ; MOV(Mov_rm64_imm32) [mem(64u,RSP:br,SS:sr),8h:imm64] encoding(12 bytes) = 48 c7 84 24 b8 00 00 00 08 00 00 00
1cb3h mov rdx,[rsp+0B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 00 00 00
1cbbh mov [rsp+120h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 20 01 00 00
1cc3h vmovdqu xmm0,xmmword ptr [rsp+110h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 01 00 00
1ccch vmovdqu xmmword ptr [rsp+100h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 01 00 00
1cd5h cmp byte ptr [rsp+100h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 00 01 00 00 00
1cddh jne short 1d4ch               ; JNE(Jne_rel8_64) [1D4Ch:jmp64]                       encoding(2 bytes) = 75 6d
1cdfh mov edx,[rsp+0E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 00 00 00
1ce6h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1ce9h mov [rsp+0B0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b0 00 00 00
1cf1h mov rdx,[rsp+0B0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b0 00 00 00
1cf9h mov [rsp+0C0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 c0 00 00 00
1d01h mov rdx,[rsp+120h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 01 00 00
1d09h mov [rsp+0A8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a8 00 00 00
1d11h mov rdx,[rsp+0C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 00 00 00
1d19h mov [rsp+0A0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a0 00 00 00
1d21h mov rdx,[rsp+0A8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a8 00 00 00
1d29h imul rdx,[rsp+0A0h]           ; IMUL(Imul_r64_rm64) [RDX,mem(64i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f af 94 24 a0 00 00 00
1d32h mov [rsp+98h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 98 00 00 00
1d3ah mov rdx,[rsp+98h]             ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 00 00 00
1d42h mov [rsp+0F8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f8 00 00 00
1d4ah jmp short 1d5ch               ; JMP(Jmp_rel8_64) [1D5Ch:jmp64]                       encoding(2 bytes) = eb 10
1d4ch mov rdx,[rsp+108h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 08 01 00 00
1d54h mov [rsp+0F8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f8 00 00 00
1d5ch mov rdx,[rsp+0F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 00 00 00
1d64h mov [rsp+0F0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f0 00 00 00
1d6ch xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
1d6eh mov rdx,[rsp+0F0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f0 00 00 00
1d76h mov [rsp+90h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 90 00 00 00
1d7eh mov edx,[rsp+90h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 00 00 00
1d85h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1d88h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
1d92h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F417860h:jmp64]                encoding(5 bytes) = e8 c9 5a 41 5f
1d97h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
1d9ah xor r13d,r13d                 ; XOR(Xor_r32_rm32) [R13D,R13D]                        encoding(3 bytes) = 45 33 ed
1d9dh cmp dword ptr [rsp+0E8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 e8 00 00 00 00
1da5h jle near ptr 1ed7h            ; JLE(Jle_rel32_64) [1ED7h:jmp64]                      encoding(6 bytes) = 0f 8e 2c 01 00 00
1dabh mov rcx,7FFDDB218080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb218080h:imm64]         encoding(10 bytes) = 48 b9 80 80 21 db fd 7f 00 00
1db5h mov edx,17Dh                  ; MOV(Mov_r32_imm32) [EDX,17dh:imm32]                  encoding(5 bytes) = ba 7d 01 00 00
1dbah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F417B30h:jmp64]                encoding(5 bytes) = e8 71 5d 41 5f
1dbfh cmp r13d,[rsp+0E8h]           ; CMP(Cmp_r32_rm32) [R13D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b ac 24 e8 00 00 00
1dc7h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 f8 01 00 00
1dcdh movsxd rcx,r13d               ; MOVSXD(Movsxd_r64_rm32) [RCX,R13D]                   encoding(3 bytes) = 49 63 cd
1dd0h add rcx,[rsp+0E0h]            ; ADD(Add_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 8c 24 e0 00 00 00
1dd8h movzx ecx,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 09
1ddbh mov rdx,1F96AFE57C0h          ; MOV(Mov_r64_imm64) [RDX,1f96afe57c0h:imm64]          encoding(10 bytes) = 48 ba c0 57 fe 6a f9 01 00 00
1de5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1de8h cmp ecx,[rdx+8]               ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 3b 4a 08
1debh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 d4 01 00 00
1df1h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1df4h shl rcx,5                     ; SHL(Shl_rm64_imm8) [RCX,5h:imm8]                     encoding(4 bytes) = 48 c1 e1 05
1df8h mov rcx,[rdx+rcx+10h]         ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c 0a 10
1dfdh lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
1e02h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1e06h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
1e0ah test rcx,rcx                  ; TEST(Test_rm64_r64) [RCX,RCX]                        encoding(3 bytes) = 48 85 c9
1e0dh jne short 1e1eh               ; JNE(Jne_rel8_64) [1E1Eh:jmp64]                       encoding(2 bytes) = 75 0f
1e0fh lea rcx,[rsp+60h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 60
1e14h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1e18h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1e1ch jmp short 1e3dh               ; JMP(Jmp_rel8_64) [1E3Dh:jmp64]                       encoding(2 bytes) = eb 1f
1e1eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1e20h lea rdx,[rcx+10h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 51 10
1e24h mov [rsp+58h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 58
1e29h mov rdx,[rsp+58h]             ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 54 24 58
1e2eh lea rax,[rsp+60h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 60
1e33h mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
1e36h mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
1e39h mov [rsp+68h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 68
1e3dh vmovdqu xmm0,xmmword ptr [rsp+60h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 60
1e43h vmovdqu xmmword ptr [rsp+70h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 70
1e49h vmovdqu xmm0,xmmword ptr [rsp+70h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 70
1e4fh vmovdqu xmmword ptr [rsp+80h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 00 00 00
1e58h vmovdqu xmm0,xmmword ptr [rsp+80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 00 00 00
1e61h vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
1e6ah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1e6ch jmp short 1ea0h               ; JMP(Jmp_rel8_64) [1EA0h:jmp64]                       encoding(2 bytes) = eb 32
1e6eh cmp ecx,[rsp+0D8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 d8 00 00 00
1e75h jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 4a 01 00 00
1e7bh mov rdx,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d0 00 00 00
1e83h movsxd rax,ecx                ; MOVSXD(Movsxd_r64_rm32) [RAX,ECX]                    encoding(3 bytes) = 48 63 c1
1e86h movzx edx,byte ptr [rdx+rax]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(4 bytes) = 0f b6 14 02
1e8ah cmp ebp,[r14+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R14:br,DS:sr)]        encoding(4 bytes) = 41 3b 6e 08
1e8eh jae near ptr 1fc5h            ; JAE(Jae_rel32_64) [1FC5h:jmp64]                      encoding(6 bytes) = 0f 83 31 01 00 00
1e94h movsxd rax,ebp                ; MOVSXD(Movsxd_r64_rm32) [RAX,EBP]                    encoding(3 bytes) = 48 63 c5
1e97h mov [r14+rax+10h],dl          ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),DL]            encoding(5 bytes) = 41 88 54 06 10
1e9ch inc ecx                       ; INC(Inc_rm32) [ECX]                                  encoding(2 bytes) = ff c1
1e9eh inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
1ea0h mov rdx,[rsp+120h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 01 00 00
1ea8h mov [rsp+50h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 50
1eadh cmp ecx,[rsp+50h]             ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 3b 4c 24 50
1eb1h jge short 1ec6h               ; JGE(Jge_rel8_64) [1EC6h:jmp64]                       encoding(2 bytes) = 7d 13
1eb3h mov rdx,[rsp+0F0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f0 00 00 00
1ebbh mov [rsp+48h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 48
1ec0h cmp ebp,[rsp+48h]             ; CMP(Cmp_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 3b 6c 24 48
1ec4h jl short 1e6eh                ; JL(Jl_rel8_64) [1E6Eh:jmp64]                         encoding(2 bytes) = 7c a8
1ec6h inc r13d                      ; INC(Inc_rm32) [R13D]                                 encoding(3 bytes) = 41 ff c5
1ec9h cmp r13d,[rsp+0E8h]           ; CMP(Cmp_r32_rm32) [R13D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b ac 24 e8 00 00 00
1ed1h jl near ptr 1dbfh             ; JL(Jl_rel32_64) [1DBFh:jmp64]                        encoding(6 bytes) = 0f 8c e8 fe ff ff
1ed7h mov [rsp+0C8h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 c8 00 00 00
1edfh mov rcx,[rsp+0C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 00 00 00
1ee7h mov [rsp+168h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 68 01 00 00
1eefh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1ef1h mov [rsp+158h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 01 00 00
1ef8h mov ecx,[rsp+158h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 01 00 00
1effh mov [rsp+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 20
1f03h lea rcx,[rsp+168h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 01 00 00
1f0bh mov r9,[rsp+160h]             ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 8c 24 60 01 00 00
1f13h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1f15h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1f18h call 7FFDDB83EDC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2040h:jmp64]        encoding(5 bytes) = e8 23 01 ff ff
1f1dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1f20h mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
1f23h call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D9CCEE0h:jmp64]                encoding(5 bytes) = e8 b8 af 9c 5d
1f28h call 7FFE3925E500h            ; CALL(Call_rel32_64) [5DA11780h:jmp64]                encoding(5 bytes) = e8 53 f8 a0 5d
1f2dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1f30h mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
1f33h call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D9CCEE0h:jmp64]                encoding(5 bytes) = e8 a8 af 9c 5d
1f38h inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
1f3bh mov rcx,1F96B011F28h          ; MOV(Mov_r64_imm64) [RCX,1f96b011f28h:imm64]          encoding(10 bytes) = 48 b9 28 1f 01 6b f9 01 00 00
1f45h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1f48h cmp r15d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 79 10
1f4ch jl near ptr 1a60h             ; JL(Jl_rel32_64) [1A60h:jmp64]                        encoding(6 bytes) = 0f 8c 0e fb ff ff
1f52h mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
1f55h call 7FFE39219B10h            ; CALL(Call_rel32_64) [5D9CCD90h:jmp64]                encoding(5 bytes) = e8 36 ae 9c 5d
1f5ah mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1f5dh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1f60h mov rax,[rsi]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSI:br,DS:sr)]        encoding(3 bytes) = 48 8b 06
1f63h mov rax,[rax+68h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 68
1f67h call qword ptr [rax+30h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 30
1f6ah inc edi                       ; INC(Inc_rm32) [EDI]                                  encoding(2 bytes) = ff c7
1f6ch cmp edi,10h                   ; CMP(Cmp_rm32_imm8) [EDI,10h:imm32]                   encoding(3 bytes) = 83 ff 10
1f6fh jl near ptr 0043h             ; JL(Jl_rel32_64) [43h:jmp64]                          encoding(6 bytes) = 0f 8c ce e0 ff ff
1f75h add rsp,0B18h                 ; ADD(Add_rm64_imm32) [RSP,b18h:imm64]                 encoding(7 bytes) = 48 81 c4 18 0b 00 00
1f7ch pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1f7dh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1f7eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1f7fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1f80h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1f82h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1f84h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1f86h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1f88h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1f89h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A0h:jmp64]        encoding(5 bytes) = e8 12 e8 91 ff
1f8eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f8fh call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A8h:jmp64]        encoding(5 bytes) = e8 14 e8 91 ff
1f94h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f95h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A0h:jmp64]        encoding(5 bytes) = e8 06 e8 91 ff
1f9ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f9bh call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A8h:jmp64]        encoding(5 bytes) = e8 08 e8 91 ff
1fa0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fa1h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A0h:jmp64]        encoding(5 bytes) = e8 fa e7 91 ff
1fa6h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fa7h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A8h:jmp64]        encoding(5 bytes) = e8 fc e7 91 ff
1fach int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fadh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A0h:jmp64]        encoding(5 bytes) = e8 ee e7 91 ff
1fb2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fb3h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A8h:jmp64]        encoding(5 bytes) = e8 f0 e7 91 ff
1fb8h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fb9h call 7FFDDB16D650h            ; CALL(Call_rel32_64) [FFFFFFFFFF9208D0h:jmp64]        encoding(5 bytes) = e8 12 e9 91 ff
1fbeh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fbfh call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF9207A0h:jmp64]        encoding(5 bytes) = e8 dc e7 91 ff
1fc4h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1fc5h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F542180h:jmp64]                encoding(5 bytes) = e8 b6 01 54 5f
1fcah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitBinaryOpsBytes => new byte[8139]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x18,0x0B,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0xBC,0x02,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0x33,0xFF,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x1D,0x26,0x3E,0x5F,0x40,0x0F,0xB6,0xD7,0x83,0xE2,0x0F,0x0F,0xB6,0xD2,0x88,0x94,0x24,0x10,0x0B,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0x77,0x41,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x48,0x8D,0x84,0x24,0x90,0x0A,0x00,0x00,0x48,0x89,0x08,0x89,0x50,0x08,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x0B,0x00,0x00,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x9F,0x77,0x41,0x5F,0x8B,0x8C,0x24,0x10,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x01,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x88,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x88,0x0A,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x88,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x80,0x0A,0x00,0x00,0x8B,0x94,0x24,0x80,0x0A,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x78,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x78,0x0A,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x70,0x0A,0x00,0x00,0x41,0x89,0x09,0x48,0x8D,0x8C,0x24,0x68,0x0A,0x00,0x00,0x89,0x11,0x48,0x8D,0x8C,0x24,0x60,0x0A,0x00,0x00,0x44,0x89,0x01,0x8B,0x8C,0x24,0x70,0x0A,0x00,0x00,0x89,0x8C,0x24,0x58,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x58,0x0A,0x00,0x00,0x8B,0x94,0x24,0x68,0x0A,0x00,0x00,0x89,0x94,0x24,0x50,0x0A,0x00,0x00,0x8B,0x94,0x24,0x50,0x0A,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x60,0x0A,0x00,0x00,0x89,0x94,0x24,0x48,0x0A,0x00,0x00,0x8B,0x94,0x24,0x48,0x0A,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x38,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x18,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x10,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x10,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x18,0x0A,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x20,0x0A,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x0A,0x00,0x00,0x48,0x8D,0x8C,0x24,0x38,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x67,0xB1,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x09,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xC0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x48,0xB8,0xC0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xA0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xA0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x98,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0xA0,0x09,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xA8,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x09,0x00,0x00,0x83,0xBC,0x24,0xB8,0x09,0x00,0x00,0x00,0x0F,0x86,0xC7,0x1C,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB0,0x09,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xD8,0x09,0x00,0x00,0x8B,0xD8,0x4C,0x3B,0xC3,0x0F,0x87,0x56,0x1C,0x00,0x00,0x4C,0x8B,0x84,0x24,0xD0,0x09,0x00,0x00,0x48,0x8D,0x84,0x24,0x88,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x80,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x80,0x09,0x00,0x00,0x4C,0x8D,0x84,0x24,0x88,0x09,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x90,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x09,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x09,0x00,0x00,0x3B,0x8C,0x24,0x78,0x09,0x00,0x00,0x0F,0x87,0xE4,0x1B,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x09,0x00,0x00,0x48,0x8B,0x94,0x24,0xE0,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xE8,0x09,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xB5,0xBD,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x81,0x74,0x41,0x5F,0x8B,0x8C,0x24,0x10,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x02,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x68,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x68,0x09,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x68,0x09,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x60,0x09,0x00,0x00,0x8B,0x94,0x24,0x60,0x09,0x00,0x00,0xC7,0x84,0x24,0x58,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x58,0x09,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x50,0x09,0x00,0x00,0x41,0x89,0x09,0x48,0x8D,0x8C,0x24,0x48,0x09,0x00,0x00,0x89,0x11,0x48,0x8D,0x8C,0x24,0x40,0x09,0x00,0x00,0x44,0x89,0x01,0x8B,0x8C,0x24,0x50,0x09,0x00,0x00,0x89,0x8C,0x24,0x38,0x09,0x00,0x00,0x8B,0x8C,0x24,0x38,0x09,0x00,0x00,0x8B,0x94,0x24,0x48,0x09,0x00,0x00,0x89,0x94,0x24,0x30,0x09,0x00,0x00,0x8B,0x94,0x24,0x30,0x09,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x40,0x09,0x00,0x00,0x89,0x94,0x24,0x28,0x09,0x00,0x00,0x8B,0x94,0x24,0x28,0x09,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x18,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xF8,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xF0,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0xF8,0x08,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x00,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x09,0x00,0x00,0x48,0x8D,0x8C,0x24,0x18,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x49,0xAE,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x08,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xC8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x48,0xB8,0xC8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x80,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x80,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x78,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x08,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x08,0x00,0x00,0x83,0xBC,0x24,0x98,0x08,0x00,0x00,0x00,0x0F,0x86,0xA6,0x19,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x08,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC3,0x0F,0x87,0x4A,0x19,0x00,0x00,0x4C,0x8B,0x84,0x24,0xB0,0x08,0x00,0x00,0x48,0x8D,0x84,0x24,0x68,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x60,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x08,0x00,0x00,0x4C,0x8D,0x84,0x24,0x68,0x08,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x70,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x08,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x08,0x00,0x00,0x3B,0x8C,0x24,0x58,0x08,0x00,0x00,0x0F,0x87,0xD8,0x18,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x08,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0xC8,0x08,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x9D,0xBA,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x69,0x71,0x41,0x5F,0x8B,0x8C,0x24,0x10,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x04,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x48,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x48,0x08,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x48,0x08,0x00,0x00,0xC7,0x84,0x24,0x40,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x40,0x08,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x38,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x38,0x08,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x30,0x08,0x00,0x00,0x41,0x89,0x09,0x48,0x8D,0x8C,0x24,0x28,0x08,0x00,0x00,0x89,0x11,0x48,0x8D,0x8C,0x24,0x20,0x08,0x00,0x00,0x44,0x89,0x01,0x8B,0x8C,0x24,0x30,0x08,0x00,0x00,0x89,0x8C,0x24,0x18,0x08,0x00,0x00,0x8B,0x8C,0x24,0x18,0x08,0x00,0x00,0x8B,0x94,0x24,0x28,0x08,0x00,0x00,0x89,0x94,0x24,0x10,0x08,0x00,0x00,0x8B,0x94,0x24,0x10,0x08,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x20,0x08,0x00,0x00,0x89,0x94,0x24,0x08,0x08,0x00,0x00,0x8B,0x94,0x24,0x08,0x08,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xF8,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD8,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xD0,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0xD8,0x07,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xE0,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x07,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF8,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x2F,0xAB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x07,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xD0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x48,0xB8,0xD0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x60,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x60,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x58,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x58,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x07,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x68,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x07,0x00,0x00,0x83,0xBC,0x24,0x78,0x07,0x00,0x00,0x00,0x0F,0x86,0x8C,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x07,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC3,0x0F,0x87,0x3C,0x16,0x00,0x00,0x4C,0x8B,0x84,0x24,0x90,0x07,0x00,0x00,0x48,0x8D,0x84,0x24,0x48,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x40,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x40,0x07,0x00,0x00,0x4C,0x8D,0x84,0x24,0x48,0x07,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x50,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x07,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x07,0x00,0x00,0x3B,0x8C,0x24,0x38,0x07,0x00,0x00,0x0F,0x87,0xCA,0x15,0x00,0x00,0x48,0x8B,0x8C,0x24,0x30,0x07,0x00,0x00,0x48,0x8B,0x94,0x24,0xA0,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0xA8,0x07,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x83,0xB7,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x4F,0x6E,0x41,0x5F,0x8B,0x8C,0x24,0x10,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x08,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x28,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x28,0x07,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x28,0x07,0x00,0x00,0xC7,0x84,0x24,0x20,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x20,0x07,0x00,0x00,0xC7,0x84,0x24,0x18,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x18,0x07,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x10,0x07,0x00,0x00,0x41,0x89,0x09,0x48,0x8D,0x8C,0x24,0x08,0x07,0x00,0x00,0x89,0x11,0x48,0x8D,0x8C,0x24,0x00,0x07,0x00,0x00,0x44,0x89,0x01,0x8B,0x8C,0x24,0x10,0x07,0x00,0x00,0x89,0x8C,0x24,0xF8,0x06,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x06,0x00,0x00,0x8B,0x94,0x24,0x08,0x07,0x00,0x00,0x89,0x94,0x24,0xF0,0x06,0x00,0x00,0x8B,0x94,0x24,0xF0,0x06,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x00,0x07,0x00,0x00,0x89,0x94,0x24,0xE8,0x06,0x00,0x00,0x8B,0x94,0x24,0xE8,0x06,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xD8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xB8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xB0,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB0,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xB8,0x06,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xC0,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x15,0xA8,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x06,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xD8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x48,0xB8,0xD8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x40,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x40,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x38,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x48,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x06,0x00,0x00,0x83,0xBC,0x24,0x58,0x06,0x00,0x00,0x00,0x0F,0x86,0x72,0x13,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC3,0x0F,0x87,0x2E,0x13,0x00,0x00,0x4C,0x8B,0x84,0x24,0x70,0x06,0x00,0x00,0x48,0x8D,0x84,0x24,0x28,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x20,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x20,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0x28,0x06,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x30,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x06,0x00,0x00,0x8B,0x8C,0x24,0x88,0x06,0x00,0x00,0x3B,0x8C,0x24,0x18,0x06,0x00,0x00,0x0F,0x87,0xBC,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0x10,0x06,0x00,0x00,0x48,0x8B,0x94,0x24,0x80,0x06,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x06,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x69,0xB4,0x9C,0x5D,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x8B,0x69,0x14,0x83,0xC5,0xFD,0x66,0xC7,0x84,0x24,0x08,0x06,0x00,0x00,0x00,0x00,0x48,0x0F,0xBF,0x8C,0x24,0x08,0x06,0x00,0x00,0x66,0x89,0x8C,0x24,0xD8,0x05,0x00,0x00,0x48,0x0F,0xBF,0x8C,0x24,0xD8,0x05,0x00,0x00,0x66,0x89,0x8C,0x24,0xC0,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x09,0x00,0x00,0x00,0xE8,0xE6,0x18,0x3E,0x5F,0x48,0xBA,0xE0,0x6A,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0x8B,0x12,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC8,0x6A,0x41,0x5F,0x48,0x8D,0x8C,0x24,0xA0,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x98,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0xA0,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xA8,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x05,0x00,0x00,0x80,0xBC,0x24,0xC0,0x05,0x00,0x00,0x00,0x74,0x23,0x80,0xBC,0x24,0xC0,0x05,0x00,0x00,0x00,0x0F,0x84,0xBE,0x11,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC8,0x05,0x00,0x00,0x0F,0xB6,0x94,0x24,0xC1,0x05,0x00,0x00,0xE8,0xC0,0x19,0x93,0xFF,0x48,0x8D,0x8C,0x24,0xB0,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xB0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x6F,0xAE,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x05,0x00,0x00,0x45,0x33,0xF6,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0xE3,0x02,0x00,0x00,0x41,0x0F,0xB6,0xCE,0x89,0x8C,0x24,0x90,0x05,0x00,0x00,0x8B,0x8C,0x24,0x90,0x05,0x00,0x00,0x89,0x8C,0x24,0xF0,0x05,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD6,0x49,0xBB,0xE0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xE0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x50,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x50,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x48,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x50,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x58,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x05,0x00,0x00,0x3B,0xAC,0x24,0x88,0x05,0x00,0x00,0x0F,0x83,0xA4,0x10,0x00,0x00,0x48,0x63,0xCD,0x48,0xC1,0xE1,0x04,0x48,0x03,0x8C,0x24,0x80,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x01,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x05,0x00,0x00,0x0F,0xB7,0x8C,0x24,0x70,0x05,0x00,0x00,0x3B,0x8C,0x24,0x68,0x05,0x00,0x00,0x0F,0x83,0x61,0x10,0x00,0x00,0x48,0x8B,0x84,0x24,0x60,0x05,0x00,0x00,0x48,0x63,0xC9,0x0F,0xB6,0x0C,0x08,0x33,0xC0,0x89,0x84,0x24,0x38,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x38,0x05,0x00,0x00,0x0F,0xB6,0x94,0x24,0x72,0x05,0x00,0x00,0x0F,0xA3,0xD1,0x72,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x08,0x8B,0x8C,0x24,0x38,0x05,0x00,0x00,0x89,0x8C,0x24,0x40,0x05,0x00,0x00,0x8B,0x8C,0x24,0x40,0x05,0x00,0x00,0x89,0x8C,0x24,0x30,0x05,0x00,0x00,0x83,0xBC,0x24,0x30,0x05,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xC0,0x89,0x84,0x24,0x28,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x28,0x05,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x08,0x8B,0x8C,0x24,0x28,0x05,0x00,0x00,0x89,0x8C,0x24,0xE8,0x05,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x05,0x00,0x00,0x89,0x8C,0x24,0x20,0x05,0x00,0x00,0x8B,0x8C,0x24,0x20,0x05,0x00,0x00,0x89,0x8C,0x24,0x18,0x05,0x00,0x00,0x83,0xBC,0x24,0x18,0x05,0x00,0x00,0x01,0x74,0x13,0xC6,0x84,0x24,0x10,0x05,0x00,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0x10,0x05,0x00,0x00,0xEB,0x11,0xC6,0x84,0x24,0x08,0x05,0x00,0x00,0x01,0x48,0x0F,0xBE,0x8C,0x24,0x08,0x05,0x00,0x00,0x88,0x8C,0x24,0xE0,0x05,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x05,0x00,0x00,0x89,0x8C,0x24,0x00,0x05,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0xE0,0x05,0x00,0x00,0x88,0x8C,0x24,0xF8,0x04,0x00,0x00,0x8B,0x8C,0x24,0x00,0x05,0x00,0x00,0x89,0x8C,0x24,0xF0,0x04,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0xF8,0x04,0x00,0x00,0x88,0x8C,0x24,0xD8,0x04,0x00,0x00,0x48,0xB9,0xE8,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x39,0x8B,0x8C,0x24,0xF0,0x04,0x00,0x00,0xE8,0xE6,0xAC,0xFF,0xFF,0x41,0x3B,0x47,0x08,0x0F,0x83,0x21,0x0F,0x00,0x00,0x48,0x63,0xC8,0x49,0x8D,0x4C,0x8F,0x10,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x04,0x00,0x00,0x0F,0xB7,0x11,0x3B,0x94,0x24,0xE8,0x04,0x00,0x00,0x0F,0x83,0xF7,0x0E,0x00,0x00,0x48,0x63,0xD2,0x48,0x03,0x94,0x24,0xE0,0x04,0x00,0x00,0x0F,0xB6,0x49,0x02,0x48,0x0F,0xBE,0x84,0x24,0xD8,0x04,0x00,0x00,0x88,0x84,0x24,0xD0,0x04,0x00,0x00,0x48,0x0F,0xBE,0x84,0x24,0xD0,0x04,0x00,0x00,0x88,0x84,0x24,0xC8,0x04,0x00,0x00,0x48,0x0F,0xBE,0x84,0x24,0xC8,0x04,0x00,0x00,0x88,0x84,0x24,0xC0,0x04,0x00,0x00,0x80,0xBC,0x24,0xC0,0x04,0x00,0x00,0x00,0x74,0x0E,0xB8,0x01,0x00,0x00,0x00,0xD3,0xE0,0x0F,0xB6,0xC8,0x08,0x0A,0xEB,0x11,0xB8,0x01,0x00,0x00,0x00,0xD3,0xE0,0x0F,0xB6,0xC8,0xF7,0xD1,0x0F,0xB6,0xC9,0x20,0x0A,0x41,0xFF,0xC6,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x71,0x10,0x0F,0x8C,0x1D,0xFD,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x0A,0x00,0x00,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xEA,0x66,0x41,0x5F,0x8B,0x8C,0x24,0x10,0x0B,0x00,0x00,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xB0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x90,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x88,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x88,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x04,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x98,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0xB3,0xAA,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x04,0x00,0x00,0x33,0xD2,0x48,0x89,0x94,0x24,0x70,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0xC0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x89,0x94,0x24,0x30,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x30,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x28,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0x40,0x04,0x00,0x00,0x48,0x89,0x11,0xC6,0x84,0x24,0x38,0x04,0x00,0x00,0x01,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x04,0x00,0x00,0x48,0xC7,0x84,0x24,0xB8,0x03,0x00,0x00,0x08,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x20,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x04,0x00,0x00,0x80,0xBC,0x24,0x00,0x04,0x00,0x00,0x00,0x75,0x6D,0x8B,0x94,0x24,0xE8,0x03,0x00,0x00,0x48,0x63,0xD2,0x48,0x89,0x94,0x24,0xB0,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xB0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xC0,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x20,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0xA8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xA0,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xA8,0x03,0x00,0x00,0x48,0x0F,0xAF,0x94,0x24,0xA0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x98,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xF8,0x03,0x00,0x00,0xEB,0x10,0x48,0x8B,0x94,0x24,0x08,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0xF8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xF8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xF0,0x03,0x00,0x00,0x33,0xED,0x48,0x8B,0x94,0x24,0xF0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x90,0x03,0x00,0x00,0x8B,0x94,0x24,0x90,0x03,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0x64,0x41,0x5F,0x4C,0x8B,0xF0,0x45,0x33,0xFF,0x83,0xBC,0x24,0xE8,0x03,0x00,0x00,0x00,0x0F,0x8E,0x53,0x01,0x00,0x00,0x48,0xB9,0x80,0x80,0x21,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7D,0x01,0x00,0x00,0xE8,0x63,0x67,0x41,0x5F,0x44,0x3B,0xBC,0x24,0xE8,0x03,0x00,0x00,0x0F,0x83,0xEA,0x0B,0x00,0x00,0x49,0x63,0xC7,0x48,0x03,0x84,0x24,0xE0,0x03,0x00,0x00,0x0F,0xB6,0x00,0x48,0xBA,0xC0,0x57,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x3B,0x42,0x08,0x0F,0x83,0xC6,0x0B,0x00,0x00,0x48,0x63,0xC0,0x48,0xC1,0xE0,0x05,0x48,0x8B,0x44,0x02,0x10,0x48,0x8D,0x94,0x24,0x60,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x60,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x2B,0x39,0x00,0x48,0x8D,0x50,0x10,0x48,0x89,0x94,0x24,0x58,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x58,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x60,0x03,0x00,0x00,0x48,0x89,0x11,0x8B,0x40,0x08,0x89,0x84,0x24,0x68,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x03,0x00,0x00,0x33,0xC0,0xEB,0x32,0x3B,0x84,0x24,0xD8,0x03,0x00,0x00,0x0F,0x83,0x21,0x0B,0x00,0x00,0x48,0x8B,0x94,0x24,0xD0,0x03,0x00,0x00,0x48,0x63,0xC8,0x0F,0xB6,0x14,0x0A,0x41,0x3B,0x6E,0x08,0x0F,0x83,0x08,0x0B,0x00,0x00,0x48,0x63,0xCD,0x41,0x88,0x54,0x0E,0x10,0xFF,0xC0,0xFF,0xC5,0x48,0x8B,0x94,0x24,0x20,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x50,0x03,0x00,0x00,0x3B,0x84,0x24,0x50,0x03,0x00,0x00,0x7D,0x19,0x48,0x8B,0x94,0x24,0xF0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x48,0x03,0x00,0x00,0x3B,0xAC,0x24,0x48,0x03,0x00,0x00,0x7C,0x9C,0x41,0xFF,0xC7,0x44,0x3B,0xBC,0x24,0xE8,0x03,0x00,0x00,0x0F,0x8C,0xC1,0xFE,0xFF,0xFF,0x4C,0x89,0xB4,0x24,0xC8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xC8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x70,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x28,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0xC0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x89,0x94,0x24,0x20,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x20,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x18,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x18,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x30,0x03,0x00,0x00,0x48,0x89,0x11,0xC6,0x84,0x24,0x28,0x03,0x00,0x00,0x01,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x03,0x00,0x00,0x48,0xC7,0x84,0x24,0xA8,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xA8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x10,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x02,0x00,0x00,0x80,0xBC,0x24,0xF0,0x02,0x00,0x00,0x00,0x75,0x6D,0x8B,0x94,0x24,0xD8,0x02,0x00,0x00,0x48,0x63,0xD2,0x48,0x89,0x94,0x24,0xA0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xA0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xB0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x10,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x98,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xB0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x90,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x02,0x00,0x00,0x48,0x0F,0xAF,0x94,0x24,0x90,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x88,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x88,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xE8,0x02,0x00,0x00,0xEB,0x10,0x48,0x8B,0x94,0x24,0xF8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xE8,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xE8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xE0,0x02,0x00,0x00,0x45,0x33,0xFF,0x48,0x8B,0x94,0x24,0xE0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x80,0x02,0x00,0x00,0x8B,0x94,0x24,0x80,0x02,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAF,0x61,0x41,0x5F,0x48,0x8B,0xE8,0x45,0x33,0xF6,0x83,0xBC,0x24,0xD8,0x02,0x00,0x00,0x00,0x0F,0x8E,0x54,0x01,0x00,0x00,0x48,0xB9,0x80,0x80,0x21,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7D,0x01,0x00,0x00,0xE8,0x57,0x64,0x41,0x5F,0x44,0x3B,0xB4,0x24,0xD8,0x02,0x00,0x00,0x0F,0x83,0xDE,0x08,0x00,0x00,0x49,0x63,0xCE,0x48,0x03,0x8C,0x24,0xD0,0x02,0x00,0x00,0x0F,0xB6,0x09,0x48,0xBA,0xC0,0x57,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x3B,0x4A,0x08,0x0F,0x83,0xBA,0x08,0x00,0x00,0x48,0x63,0xC9,0x48,0xC1,0xE1,0x05,0x48,0x8B,0x4C,0x0A,0x10,0x48,0x8D,0x94,0x24,0x50,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0x85,0xC9,0x75,0x12,0x48,0x8D,0x8C,0x24,0x50,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0xEB,0x2B,0x39,0x09,0x48,0x8D,0x51,0x10,0x48,0x89,0x94,0x24,0x48,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x48,0x02,0x00,0x00,0x48,0x8D,0x84,0x24,0x50,0x02,0x00,0x00,0x48,0x89,0x10,0x8B,0x49,0x08,0x89,0x8C,0x24,0x58,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x02,0x00,0x00,0x33,0xC9,0xEB,0x32,0x3B,0x8C,0x24,0xC8,0x02,0x00,0x00,0x0F,0x83,0x15,0x08,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x02,0x00,0x00,0x48,0x63,0xC1,0x0F,0xB6,0x14,0x02,0x44,0x3B,0x7D,0x08,0x0F,0x83,0xFC,0x07,0x00,0x00,0x49,0x63,0xC7,0x88,0x54,0x05,0x10,0xFF,0xC1,0x41,0xFF,0xC7,0x48,0x8B,0x94,0x24,0x10,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x40,0x02,0x00,0x00,0x3B,0x8C,0x24,0x40,0x02,0x00,0x00,0x7D,0x1A,0x48,0x8B,0x94,0x24,0xE0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x38,0x02,0x00,0x00,0x44,0x3B,0xBC,0x24,0x38,0x02,0x00,0x00,0x7C,0x9B,0x41,0xFF,0xC6,0x44,0x3B,0xB4,0x24,0xD8,0x02,0x00,0x00,0x0F,0x8C,0xC0,0xFE,0xFF,0xFF,0x48,0x89,0xAC,0x24,0xB8,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x58,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x58,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x28,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x70,0x04,0x00,0x00,0x8B,0x52,0x08,0x48,0x8B,0x8C,0x24,0x70,0x04,0x00,0x00,0x8B,0x49,0x08,0xFF,0xC9,0x33,0xC0,0x85,0xC9,0x7C,0x25,0x4C,0x8B,0x84,0x24,0x70,0x04,0x00,0x00,0x41,0x3B,0x48,0x08,0x0F,0x83,0x54,0x07,0x00,0x00,0x4C,0x63,0xC9,0x43,0x80,0x7C,0x08,0x10,0x00,0x75,0x08,0xFF,0xC0,0xFF,0xC9,0x85,0xC9,0x7D,0xDB,0x2B,0xD0,0x48,0x8D,0x8C,0x24,0x70,0x04,0x00,0x00,0xE8,0x6D,0x07,0xFF,0xFF,0x48,0x89,0x84,0x24,0x30,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x02,0x00,0x00,0x8B,0x52,0x08,0x48,0x8B,0x8C,0x24,0x28,0x02,0x00,0x00,0x8B,0x49,0x08,0xFF,0xC9,0x33,0xC0,0x85,0xC9,0x7C,0x25,0x4C,0x8B,0x84,0x24,0x28,0x02,0x00,0x00,0x41,0x3B,0x48,0x08,0x0F,0x83,0xFA,0x06,0x00,0x00,0x4C,0x63,0xC9,0x43,0x80,0x7C,0x08,0x10,0x00,0x75,0x08,0xFF,0xC0,0xFF,0xC9,0x85,0xC9,0x7D,0xDB,0x2B,0xD0,0x48,0x8D,0x8C,0x24,0x28,0x02,0x00,0x00,0xE8,0x13,0x07,0xFF,0xFF,0x48,0x89,0x84,0x24,0x20,0x02,0x00,0x00,0x4C,0x8B,0x84,0x24,0x30,0x02,0x00,0x00,0x45,0x8B,0x70,0x08,0x45,0x8B,0xC6,0x48,0x8B,0x94,0x24,0x20,0x02,0x00,0x00,0x44,0x8B,0x7A,0x08,0x45,0x3B,0xF8,0x74,0x04,0x33,0xED,0xEB,0x4C,0x45,0x33,0xE4,0x45,0x85,0xF6,0x7E,0x3B,0x48,0x8B,0x8C,0x24,0x30,0x02,0x00,0x00,0x45,0x3B,0xE6,0x0F,0x83,0x93,0x06,0x00,0x00,0x49,0x63,0xD4,0x0F,0xB6,0x4C,0x11,0x10,0x48,0x8B,0x94,0x24,0x20,0x02,0x00,0x00,0x45,0x3B,0xE7,0x0F,0x83,0x7A,0x06,0x00,0x00,0x49,0x63,0xC4,0x3A,0x4C,0x02,0x10,0x75,0x0F,0x41,0xFF,0xC4,0x45,0x3B,0xF4,0x7F,0xC5,0xBD,0x01,0x00,0x00,0x00,0xEB,0x02,0x33,0xED,0x41,0xB8,0x9E,0x00,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x18,0x02,0x00,0x00,0x41,0x88,0x11,0x45,0x89,0x41,0x04,0x40,0x84,0xED,0x75,0x29,0x49,0xB8,0x18,0x9B,0x00,0x6B,0xF9,0x01,0x00,0x00,0x4D,0x8B,0x00,0x48,0xBA,0x18,0x9B,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x4C,0x8B,0x8C,0x24,0x18,0x02,0x00,0x00,0x33,0xC9,0xE8,0x43,0x28,0x91,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x01,0x00,0x00,0x4C,0x8B,0xF6,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x48,0xBA,0x10,0x9B,0x00,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0xE8,0x66,0x95,0xFF,0xFF,0x48,0x8B,0xD0,0x49,0x8B,0xCE,0x49,0x8B,0x06,0x48,0x8B,0x40,0x58,0xFF,0x50,0x10,0x48,0xB9,0x68,0xC1,0x39,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x17,0x5D,0x41,0x5F,0x4C,0x8B,0xE0,0x41,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0x7F,0x48,0xB9,0xF8,0xA9,0x39,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0x27,0x5E,0x41,0x5F,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD0,0xE8,0x2A,0x4E,0x41,0x5F,0x45,0x33,0xFF,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0xF2,0x04,0x00,0x00,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD7,0x49,0xBB,0xE8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0xE8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xB0,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xB0,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x2B,0x39,0x00,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xA8,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xB0,0x01,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xB8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x01,0x00,0x00,0x83,0xBC,0x24,0xC8,0x01,0x00,0x00,0x00,0x0F,0x86,0xC7,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x8B,0xC1,0x44,0x8B,0xC2,0x49,0x03,0xC0,0x48,0x3B,0xC3,0x0F,0x87,0x95,0x04,0x00,0x00,0x48,0x8B,0x84,0x24,0x08,0x02,0x00,0x00,0x4C,0x8D,0x84,0x24,0x98,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC4,0xC1,0x7A,0x7F,0x00,0x48,0x63,0xC9,0x48,0x03,0xC8,0x48,0x89,0x8C,0x24,0x90,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0x98,0x01,0x00,0x00,0x48,0x89,0x08,0x89,0x94,0x24,0xA0,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x70,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0xB0,0x97,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x01,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0xE0,0x01,0x00,0x00,0xC7,0x84,0x24,0xE4,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0xC6,0x84,0x24,0xE0,0x01,0x00,0x00,0x01,0x48,0x8B,0x8C,0x24,0xE0,0x01,0x00,0x00,0x48,0x89,0x8C,0x24,0x60,0x01,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0x68,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x38,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0x21,0x0A,0x3E,0x5F,0x48,0xBA,0x38,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x89,0x94,0x24,0x30,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x30,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0x28,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x40,0x01,0x00,0x00,0x48,0x89,0x11,0xC6,0x84,0x24,0x38,0x01,0x00,0x00,0x01,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x01,0x00,0x00,0x48,0xC7,0x84,0x24,0xB8,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x20,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x01,0x00,0x00,0x80,0xBC,0x24,0x00,0x01,0x00,0x00,0x00,0x75,0x6D,0x8B,0x94,0x24,0xE8,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0x89,0x94,0x24,0xB0,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xB0,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xC0,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0x20,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0xA8,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xA8,0x00,0x00,0x00,0x48,0x0F,0xAF,0x94,0x24,0xA0,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x98,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xF8,0x00,0x00,0x00,0xEB,0x10,0x48,0x8B,0x94,0x24,0x08,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0xF8,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xF8,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xF0,0x00,0x00,0x00,0x33,0xED,0x48,0x8B,0x94,0x24,0xF0,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x90,0x00,0x00,0x00,0x8B,0x94,0x24,0x90,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC9,0x5A,0x41,0x5F,0x4C,0x8B,0xF0,0x45,0x33,0xED,0x83,0xBC,0x24,0xE8,0x00,0x00,0x00,0x00,0x0F,0x8E,0x2C,0x01,0x00,0x00,0x48,0xB9,0x80,0x80,0x21,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7D,0x01,0x00,0x00,0xE8,0x71,0x5D,0x41,0x5F,0x44,0x3B,0xAC,0x24,0xE8,0x00,0x00,0x00,0x0F,0x83,0xF8,0x01,0x00,0x00,0x49,0x63,0xCD,0x48,0x03,0x8C,0x24,0xE0,0x00,0x00,0x00,0x0F,0xB6,0x09,0x48,0xBA,0xC0,0x57,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x3B,0x4A,0x08,0x0F,0x83,0xD4,0x01,0x00,0x00,0x48,0x63,0xC9,0x48,0xC1,0xE1,0x05,0x48,0x8B,0x4C,0x0A,0x10,0x48,0x8D,0x54,0x24,0x60,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0x85,0xC9,0x75,0x0F,0x48,0x8D,0x4C,0x24,0x60,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0xEB,0x1F,0x39,0x09,0x48,0x8D,0x51,0x10,0x48,0x89,0x54,0x24,0x58,0x48,0x8B,0x54,0x24,0x58,0x48,0x8D,0x44,0x24,0x60,0x48,0x89,0x10,0x8B,0x49,0x08,0x89,0x4C,0x24,0x68,0xC5,0xFA,0x6F,0x44,0x24,0x60,0xC5,0xFA,0x7F,0x44,0x24,0x70,0xC5,0xFA,0x6F,0x44,0x24,0x70,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0x33,0xC9,0xEB,0x32,0x3B,0x8C,0x24,0xD8,0x00,0x00,0x00,0x0F,0x83,0x4A,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0xD0,0x00,0x00,0x00,0x48,0x63,0xC1,0x0F,0xB6,0x14,0x02,0x41,0x3B,0x6E,0x08,0x0F,0x83,0x31,0x01,0x00,0x00,0x48,0x63,0xC5,0x41,0x88,0x54,0x06,0x10,0xFF,0xC1,0xFF,0xC5,0x48,0x8B,0x94,0x24,0x20,0x01,0x00,0x00,0x48,0x89,0x54,0x24,0x50,0x3B,0x4C,0x24,0x50,0x7D,0x13,0x48,0x8B,0x94,0x24,0xF0,0x00,0x00,0x00,0x48,0x89,0x54,0x24,0x48,0x3B,0x6C,0x24,0x48,0x7C,0xA8,0x41,0xFF,0xC5,0x44,0x3B,0xAC,0x24,0xE8,0x00,0x00,0x00,0x0F,0x8C,0xE8,0xFE,0xFF,0xFF,0x4C,0x89,0xB4,0x24,0xC8,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x00,0x00,0x00,0x48,0x89,0x8C,0x24,0x68,0x01,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x58,0x01,0x00,0x00,0x8B,0x8C,0x24,0x58,0x01,0x00,0x00,0x89,0x4C,0x24,0x20,0x48,0x8D,0x8C,0x24,0x68,0x01,0x00,0x00,0x4C,0x8B,0x8C,0x24,0x60,0x01,0x00,0x00,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x23,0x01,0xFF,0xFF,0x48,0x8B,0xD0,0x49,0x8B,0xCC,0xE8,0xB8,0xAF,0x9C,0x5D,0xE8,0x53,0xF8,0xA0,0x5D,0x48,0x8B,0xD0,0x49,0x8B,0xCC,0xE8,0xA8,0xAF,0x9C,0x5D,0x41,0xFF,0xC7,0x48,0xB9,0x28,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x79,0x10,0x0F,0x8C,0x0E,0xFB,0xFF,0xFF,0x49,0x8B,0xCC,0xE8,0x36,0xAE,0x9C,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0x48,0x8B,0x06,0x48,0x8B,0x40,0x68,0xFF,0x50,0x30,0xFF,0xC7,0x83,0xFF,0x10,0x0F,0x8C,0xCE,0xE0,0xFF,0xFF,0x48,0x81,0xC4,0x18,0x0B,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x12,0xE8,0x91,0xFF,0xCC,0xE8,0x14,0xE8,0x91,0xFF,0xCC,0xE8,0x06,0xE8,0x91,0xFF,0xCC,0xE8,0x08,0xE8,0x91,0xFF,0xCC,0xE8,0xFA,0xE7,0x91,0xFF,0xCC,0xE8,0xFC,0xE7,0x91,0xFF,0xCC,0xE8,0xEE,0xE7,0x91,0xFF,0xCC,0xE8,0xF0,0xE7,0x91,0xFF,0xCC,0xE8,0x12,0xE9,0x91,0xFF,0xCC,0xE8,0xDC,0xE7,0x91,0xFF,0xCC,0xE8,0xB6,0x01,0x54,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void EmitTernaryOps(TextWriter dst)
; location: [7FFDDB84F020h, 7FFDDB850DEDh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,0C30h                 ; SUB(Sub_rm64_imm32) [RSP,c30h:imm64]                 encoding(7 bytes) = 48 81 ec 30 0c 00 00
000ah vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000dh mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0010h lea rdi,[rsp+30h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 30
0015h mov ecx,300h                  ; MOV(Mov_r32_imm32) [ECX,300h:imm32]                  encoding(5 bytes) = b9 00 03 00 00
001ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001ch rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0021h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0024h xor edi,edi                   ; XOR(Xor_r32_rm32) [EDI,EDI]                          encoding(2 bytes) = 33 ff
0026h mov rcx,7FFDDB2787C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2787c8h:imm64]         encoding(10 bytes) = 48 b9 c8 87 27 db fd 7f 00 00
0030h mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
0035h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F3E03C0h:jmp64]                encoding(5 bytes) = e8 86 03 3e 5f
003ah movzx edx,dil                 ; MOVZX(Movzx_r32_rm8) [EDX,DIL]                       encoding(4 bytes) = 40 0f b6 d7
003eh mov [rsp+0A68h],dl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 68 0a 00 00
0045h movsx rdx,byte ptr [rsp+0A68h]; MOVSX(Movsx_r64_rm8) [RDX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 94 24 68 0a 00 00
004eh mov [rsp+0C28h],dl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 28 0c 00 00
0055h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
005fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0062h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
0065h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0068h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0072h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 49 55 41 5f
0077h lea rcx,[rsp+0A48h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 0a 00 00
007fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0083h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0087h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
008bh mov [rsp+0A40h],rcx           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 40 0a 00 00
0093h mov rcx,[rsp+0A40h]           ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 40 0a 00 00
009bh lea rdx,[rsp+0A48h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 48 0a 00 00
00a3h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
00a6h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
00a9h mov [rsp+0A50h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 0a 00 00
00b0h vmovdqu xmm0,xmmword ptr [rsp+0A48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 0a 00 00
00b9h vmovdqu xmmword ptr [rsp+0A58h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 0a 00 00
00c2h vmovdqu xmm0,xmmword ptr [rsp+0A58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 0a 00 00
00cbh vmovdqu xmmword ptr [rsp+0C18h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 0c 00 00
00d4h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
00deh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00e3h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 d8 54 41 5f
00e8h movzx ebx,byte ptr [rsp+0C28h]; MOVZX(Movzx_r32_rm8) [EBX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 9c 24 28 0c 00 00
00f0h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
00f2h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f4h mov [rsp+0A38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0a 00 00
00fbh lea rdx,[rsp+0A38h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 0a 00 00
0103h test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
0106h jne short 010ch               ; JNE(Jne_rel8_64) [10Ch:jmp64]                        encoding(2 bytes) = 75 04
0108h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
010ah jmp short 0111h               ; JMP(Jmp_rel8_64) [111h:jmp64]                        encoding(2 bytes) = eb 05
010ch mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0111h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0113h mov ecx,[rsp+0A38h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 0a 00 00
011ah mov [rsp+0BF0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 0b 00 00
0121h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0123h mov [rsp+0A30h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 0a 00 00
012ah mov ecx,[rsp+0A30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0a 00 00
0131h mov [rsp+0BE8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 0b 00 00
0138h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
013ah mov [rsp+0A28h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 0a 00 00
0141h mov ecx,[rsp+0A28h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 0a 00 00
0148h mov [rsp+0BE0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 0b 00 00
014fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0151h mov [rsp+0A20h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 0a 00 00
0158h mov ecx,[rsp+0A20h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 0a 00 00
015fh mov [rsp+0BD8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 0b 00 00
0166h mov ecx,[rsp+0BF0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 0b 00 00
016dh mov [rsp+0A18h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 0a 00 00
0174h mov ecx,[rsp+0BE8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 0b 00 00
017bh mov [rsp+0A10h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 0a 00 00
0182h mov ecx,[rsp+0BE0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 0b 00 00
0189h mov [rsp+0A08h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 0a 00 00
0190h mov ecx,[rsp+0BD8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 0b 00 00
0197h mov [rsp+0A00h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 0a 00 00
019eh mov ecx,[rsp+0A18h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 0a 00 00
01a5h mov [rsp+9F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 09 00 00
01ach mov ecx,[rsp+9F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 09 00 00
01b3h mov edx,[rsp+0A10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0a 00 00
01bah mov [rsp+9F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 09 00 00
01c1h mov edx,[rsp+9F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 09 00 00
01c8h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
01cah or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
01cch mov edx,[rsp+0A08h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 0a 00 00
01d3h mov [rsp+9E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 09 00 00
01dah mov edx,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 09 00 00
01e1h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
01e4h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
01e6h mov edx,[rsp+0A00h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 0a 00 00
01edh mov [rsp+9E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 09 00 00
01f4h mov edx,[rsp+9E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 09 00 00
01fbh shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
01feh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0200h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0203h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0206h lea rcx,[rsp+9D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 09 00 00
020eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0212h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0216h lea rcx,[rsp+9B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 09 00 00
021eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0222h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0226h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
022ah mov [rsp+9A8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 a8 09 00 00
0232h mov rcx,[rsp+9A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 09 00 00
023ah lea rdx,[rsp+9B0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b0 09 00 00
0242h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0245h mov dword ptr [rsp+9B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 09 00 00 01 00 00 00
0250h vmovdqu xmm0,xmmword ptr [rsp+9B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 09 00 00
0259h vmovdqu xmmword ptr [rsp+9C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 09 00 00
0262h lea rcx,[rsp+9D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 09 00 00
026ah vmovdqu xmm0,xmmword ptr [rsp+9C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 09 00 00
0273h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
0279h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
027eh call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 8d 97 ff ff
0283h vmovdqu xmm0,xmmword ptr [rsp+9D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 09 00 00
028ch vmovdqu xmmword ptr [rsp+0BC8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 0b 00 00
0295h vmovdqu xmm0,xmmword ptr [rsp+0BC8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 0b 00 00
029eh vmovdqu xmmword ptr [rsp+998h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 09 00 00
02a7h vmovdqu xmm0,xmmword ptr [rsp+998h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 09 00 00
02b0h vmovdqu xmmword ptr [rsp+988h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 09 00 00
02b9h vmovdqu xmm0,xmmword ptr [rsp+988h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 09 00 00
02c2h vmovdqu xmmword ptr [rsp+978h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 09 00 00
02cbh vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
02d4h vmovdqu xmmword ptr [rsp+968h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 09 00 00
02ddh mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
02e7h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
02eah mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
02eeh mov r11,7FFDDB030FF0h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ff0h:imm64]         encoding(10 bytes) = 49 bb f0 0f 03 db fd 7f 00 00
02f8h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
02fah mov rax,7FFDDB030FF0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ff0h:imm64]         encoding(10 bytes) = 48 b8 f0 0f 03 db fd 7f 00 00
0304h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0306h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0308h lea rcx,[rsp+938h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 09 00 00
0310h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0314h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0318h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
031bh jne short 032fh               ; JNE(Jne_rel8_64) [32Fh:jmp64]                        encoding(2 bytes) = 75 12
031dh lea rax,[rsp+938h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 38 09 00 00
0325h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0329h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
032dh jmp short 0358h               ; JMP(Jmp_rel8_64) [358h:jmp64]                        encoding(2 bytes) = eb 29
032fh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0333h mov [rsp+930h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 30 09 00 00
033bh mov rcx,[rsp+930h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 09 00 00
0343h lea rdx,[rsp+938h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 09 00 00
034bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
034eh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0351h mov [rsp+940h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 09 00 00
0358h vmovdqu xmm0,xmmword ptr [rsp+938h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 09 00 00
0361h vmovdqu xmmword ptr [rsp+948h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 09 00 00
036ah cmp dword ptr [rsp+950h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 50 09 00 00 00
0372h jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 50 1a 00 00
0378h mov rcx,[rsp+948h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 09 00 00
0380h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0383h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
038dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0390h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0393h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0396h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0398h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
039bh mov eax,[rsp+970h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 70 09 00 00
03a2h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
03a5h ja near ptr 1d68h             ; JA(Ja_rel32_64) [1D68h:jmp64]                        encoding(6 bytes) = 0f 87 bd 19 00 00
03abh mov r8,[rsp+968h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 68 09 00 00
03b3h lea rax,[rsp+920h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 20 09 00 00
03bbh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03bfh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
03c3h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
03c6h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
03c9h mov [rsp+918h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 18 09 00 00
03d1h mov rcx,[rsp+918h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 09 00 00
03d9h lea r8,[rsp+920h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 20 09 00 00
03e1h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
03e4h mov [rsp+928h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 09 00 00
03ebh vmovdqu xmm0,xmmword ptr [rsp+920h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 09 00 00
03f4h vmovdqu xmmword ptr [rsp+958h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 09 00 00
03fdh vmovdqu xmm0,xmmword ptr [rsp+958h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 09 00 00
0406h vmovdqu xmmword ptr [rsp+908h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 09 00 00
040fh mov ecx,[rsp+980h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 09 00 00
0416h cmp ecx,[rsp+910h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 10 09 00 00
041dh ja near ptr 1d6eh             ; JA(Ja_rel32_64) [1D6Eh:jmp64]                        encoding(6 bytes) = 0f 87 4b 19 00 00
0423h mov rcx,[rsp+908h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 08 09 00 00
042bh mov rdx,[rsp+978h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 78 09 00 00
0433h mov r8d,[rsp+980h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 80 09 00 00
043bh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
043eh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 9d 9a 9c 5d
0443h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
044dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0452h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 69 51 41 5f
0457h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
0459h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
045bh mov [rsp+900h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 09 00 00
0462h lea rdx,[rsp+900h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 00 09 00 00
046ah test cl,2                     ; TEST(Test_rm8_imm8) [CL,2h:imm8]                     encoding(3 bytes) = f6 c1 02
046dh jne short 0473h               ; JNE(Jne_rel8_64) [473h:jmp64]                        encoding(2 bytes) = 75 04
046fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0471h jmp short 0478h               ; JMP(Jmp_rel8_64) [478h:jmp64]                        encoding(2 bytes) = eb 05
0473h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0478h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
047ah mov ecx,[rsp+900h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 09 00 00
0481h mov [rsp+0BC0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 0b 00 00
0488h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
048ah mov [rsp+8F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 08 00 00
0491h mov ecx,[rsp+8F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 08 00 00
0498h mov [rsp+0BB8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 0b 00 00
049fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
04a1h mov [rsp+8F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 08 00 00
04a8h mov ecx,[rsp+8F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 08 00 00
04afh mov [rsp+0BB0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 0b 00 00
04b6h mov dword ptr [rsp+8E8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e8 08 00 00 01 00 00 00
04c1h mov ecx,[rsp+8E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 08 00 00
04c8h mov [rsp+0BA8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 0b 00 00
04cfh mov ecx,[rsp+0BC0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 0b 00 00
04d6h mov [rsp+8E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 08 00 00
04ddh mov ecx,[rsp+0BB8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 0b 00 00
04e4h mov [rsp+8D8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 08 00 00
04ebh mov ecx,[rsp+0BB0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 0b 00 00
04f2h mov [rsp+8D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 08 00 00
04f9h mov ecx,[rsp+0BA8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 0b 00 00
0500h mov [rsp+8C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 08 00 00
0507h mov ecx,[rsp+8E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 08 00 00
050eh mov [rsp+8C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 08 00 00
0515h mov ecx,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 08 00 00
051ch mov edx,[rsp+8D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 08 00 00
0523h mov [rsp+8B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 08 00 00
052ah mov edx,[rsp+8B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 08 00 00
0531h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0533h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0535h mov edx,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 08 00 00
053ch mov [rsp+8B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 08 00 00
0543h mov edx,[rsp+8B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 08 00 00
054ah shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
054dh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
054fh mov edx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 08 00 00
0556h mov [rsp+8A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 08 00 00
055dh mov edx,[rsp+8A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 08 00 00
0564h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
0567h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0569h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
056ch mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
056fh lea rcx,[rsp+898h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 08 00 00
0577h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
057bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
057fh lea rcx,[rsp+878h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 08 00 00
0587h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
058bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
058fh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0593h mov [rsp+870h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 70 08 00 00
059bh mov rcx,[rsp+870h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 08 00 00
05a3h lea rdx,[rsp+878h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 78 08 00 00
05abh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
05aeh mov dword ptr [rsp+880h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 80 08 00 00 01 00 00 00
05b9h vmovdqu xmm0,xmmword ptr [rsp+878h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 08 00 00
05c2h vmovdqu xmmword ptr [rsp+888h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 08 00 00
05cbh lea rcx,[rsp+898h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 08 00 00
05d3h vmovdqu xmm0,xmmword ptr [rsp+888h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 08 00 00
05dch vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
05e2h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
05e7h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 24 94 ff ff
05ech vmovdqu xmm0,xmmword ptr [rsp+898h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 08 00 00
05f5h vmovdqu xmmword ptr [rsp+0B98h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 0b 00 00
05feh vmovdqu xmm0,xmmword ptr [rsp+0B98h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 0b 00 00
0607h vmovdqu xmmword ptr [rsp+860h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 08 00 00
0610h vmovdqu xmm0,xmmword ptr [rsp+860h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 08 00 00
0619h vmovdqu xmmword ptr [rsp+850h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 08 00 00
0622h vmovdqu xmm0,xmmword ptr [rsp+850h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 08 00 00
062bh vmovdqu xmmword ptr [rsp+840h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 08 00 00
0634h vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
063dh vmovdqu xmmword ptr [rsp+830h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 08 00 00
0646h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
0650h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0653h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0657h mov r11,7FFDDB030FF8h         ; MOV(Mov_r64_imm64) [R11,7ffddb030ff8h:imm64]         encoding(10 bytes) = 49 bb f8 0f 03 db fd 7f 00 00
0661h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0666h mov rax,7FFDDB030FF8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb030ff8h:imm64]         encoding(10 bytes) = 48 b8 f8 0f 03 db fd 7f 00 00
0670h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0672h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0674h lea rcx,[rsp+800h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 08 00 00
067ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0680h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0684h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0687h jne short 069bh               ; JNE(Jne_rel8_64) [69Bh:jmp64]                        encoding(2 bytes) = 75 12
0689h lea rax,[rsp+800h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 00 08 00 00
0691h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0695h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0699h jmp short 06c4h               ; JMP(Jmp_rel8_64) [6C4h:jmp64]                        encoding(2 bytes) = eb 29
069bh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
069fh mov [rsp+7F8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 f8 07 00 00
06a7h mov rcx,[rsp+7F8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f8 07 00 00
06afh lea rdx,[rsp+800h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 00 08 00 00
06b7h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
06bah mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
06bdh mov [rsp+808h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 08 00 00
06c4h vmovdqu xmm0,xmmword ptr [rsp+800h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 08 00 00
06cdh vmovdqu xmmword ptr [rsp+810h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 08 00 00
06d6h cmp dword ptr [rsp+818h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 18 08 00 00 00
06deh jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 e4 16 00 00
06e4h mov rcx,[rsp+810h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 10 08 00 00
06ech movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
06efh mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
06f9h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06fch mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
06ffh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0702h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0704h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0707h mov eax,[rsp+838h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 38 08 00 00
070eh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0711h ja near ptr 1d74h             ; JA(Ja_rel32_64) [1D74h:jmp64]                        encoding(6 bytes) = 0f 87 5d 16 00 00
0717h mov r8,[rsp+830h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 30 08 00 00
071fh lea rax,[rsp+7E8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 e8 07 00 00
0727h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
072bh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
072fh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0732h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0735h mov [rsp+7E0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e0 07 00 00
073dh mov rcx,[rsp+7E0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e0 07 00 00
0745h lea r8,[rsp+7E8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 e8 07 00 00
074dh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0750h mov [rsp+7F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 07 00 00
0757h vmovdqu xmm0,xmmword ptr [rsp+7E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 07 00 00
0760h vmovdqu xmmword ptr [rsp+820h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 08 00 00
0769h vmovdqu xmm0,xmmword ptr [rsp+820h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 08 00 00
0772h vmovdqu xmmword ptr [rsp+7D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 07 00 00
077bh mov ecx,[rsp+848h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 08 00 00
0782h cmp ecx,[rsp+7D8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 d8 07 00 00
0789h ja near ptr 1d7ah             ; JA(Ja_rel32_64) [1D7Ah:jmp64]                        encoding(6 bytes) = 0f 87 eb 15 00 00
078fh mov rcx,[rsp+7D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 07 00 00
0797h mov rdx,[rsp+840h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 40 08 00 00
079fh mov r8d,[rsp+848h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 48 08 00 00
07a7h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
07aah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 31 97 9c 5d
07afh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
07b9h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
07beh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 fd 4d 41 5f
07c3h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
07c5h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
07c7h mov [rsp+7C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 07 00 00
07ceh lea rdx,[rsp+7C8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c8 07 00 00
07d6h test cl,4                     ; TEST(Test_rm8_imm8) [CL,4h:imm8]                     encoding(3 bytes) = f6 c1 04
07d9h jne short 07dfh               ; JNE(Jne_rel8_64) [7DFh:jmp64]                        encoding(2 bytes) = 75 04
07dbh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
07ddh jmp short 07e4h               ; JMP(Jmp_rel8_64) [7E4h:jmp64]                        encoding(2 bytes) = eb 05
07dfh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
07e4h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
07e6h mov ecx,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 07 00 00
07edh mov [rsp+0B90h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 0b 00 00
07f4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
07f6h mov [rsp+7C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 07 00 00
07fdh mov ecx,[rsp+7C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 07 00 00
0804h mov [rsp+0B88h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 0b 00 00
080bh mov dword ptr [rsp+7B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 07 00 00 01 00 00 00
0816h mov ecx,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 07 00 00
081dh mov [rsp+0B80h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 0b 00 00
0824h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0826h mov [rsp+7B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 07 00 00
082dh mov ecx,[rsp+7B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 07 00 00
0834h mov [rsp+0B78h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 0b 00 00
083bh mov ecx,[rsp+0B90h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 0b 00 00
0842h mov [rsp+7A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 07 00 00
0849h mov ecx,[rsp+0B88h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 0b 00 00
0850h mov [rsp+7A0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 07 00 00
0857h mov ecx,[rsp+0B80h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 0b 00 00
085eh mov [rsp+798h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 07 00 00
0865h mov ecx,[rsp+0B78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0b 00 00
086ch mov [rsp+790h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 07 00 00
0873h mov ecx,[rsp+7A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 07 00 00
087ah mov [rsp+788h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 07 00 00
0881h mov ecx,[rsp+788h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 07 00 00
0888h mov edx,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 07 00 00
088fh mov [rsp+780h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 07 00 00
0896h mov edx,[rsp+780h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 07 00 00
089dh shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
089fh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
08a1h mov edx,[rsp+798h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 07 00 00
08a8h mov [rsp+778h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 07 00 00
08afh mov edx,[rsp+778h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 07 00 00
08b6h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
08b9h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
08bbh mov edx,[rsp+790h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 07 00 00
08c2h mov [rsp+770h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 07 00 00
08c9h mov edx,[rsp+770h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 07 00 00
08d0h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
08d3h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
08d5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
08d8h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
08dbh lea rcx,[rsp+760h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 07 00 00
08e3h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08e7h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
08ebh lea rcx,[rsp+740h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 07 00 00
08f3h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08f7h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
08fbh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
08ffh mov [rsp+738h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 38 07 00 00
0907h mov rcx,[rsp+738h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 07 00 00
090fh lea rdx,[rsp+740h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 07 00 00
0917h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
091ah mov dword ptr [rsp+748h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 48 07 00 00 01 00 00 00
0925h vmovdqu xmm0,xmmword ptr [rsp+740h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 07 00 00
092eh vmovdqu xmmword ptr [rsp+750h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 07 00 00
0937h lea rcx,[rsp+760h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 07 00 00
093fh vmovdqu xmm0,xmmword ptr [rsp+750h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 07 00 00
0948h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
094eh lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
0953h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 b8 90 ff ff
0958h vmovdqu xmm0,xmmword ptr [rsp+760h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 07 00 00
0961h vmovdqu xmmword ptr [rsp+0B68h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 0b 00 00
096ah vmovdqu xmm0,xmmword ptr [rsp+0B68h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 0b 00 00
0973h vmovdqu xmmword ptr [rsp+728h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 07 00 00
097ch vmovdqu xmm0,xmmword ptr [rsp+728h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 07 00 00
0985h vmovdqu xmmword ptr [rsp+718h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 07 00 00
098eh vmovdqu xmm0,xmmword ptr [rsp+718h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 07 00 00
0997h vmovdqu xmmword ptr [rsp+708h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 07 00 00
09a0h vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
09a9h vmovdqu xmmword ptr [rsp+6F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 06 00 00
09b2h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
09bch mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
09bfh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
09c3h mov r11,7FFDDB031000h         ; MOV(Mov_r64_imm64) [R11,7ffddb031000h:imm64]         encoding(10 bytes) = 49 bb 00 10 03 db fd 7f 00 00
09cdh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
09d2h mov rax,7FFDDB031000h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031000h:imm64]         encoding(10 bytes) = 48 b8 00 10 03 db fd 7f 00 00
09dch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
09deh call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
09e0h lea rcx,[rsp+6C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 06 00 00
09e8h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
09ech vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
09f0h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
09f3h jne short 0a07h               ; JNE(Jne_rel8_64) [A07h:jmp64]                        encoding(2 bytes) = 75 12
09f5h lea rax,[rsp+6C8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c8 06 00 00
09fdh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a01h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0a05h jmp short 0a30h               ; JMP(Jmp_rel8_64) [A30h:jmp64]                        encoding(2 bytes) = eb 29
0a07h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0a0bh mov [rsp+6C0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 c0 06 00 00
0a13h mov rcx,[rsp+6C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 06 00 00
0a1bh lea rdx,[rsp+6C8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c8 06 00 00
0a23h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0a26h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0a29h mov [rsp+6D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 06 00 00
0a30h vmovdqu xmm0,xmmword ptr [rsp+6C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 06 00 00
0a39h vmovdqu xmmword ptr [rsp+6D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 06 00 00
0a42h cmp dword ptr [rsp+6E0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 e0 06 00 00 00
0a4ah jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 78 13 00 00
0a50h mov rcx,[rsp+6D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 06 00 00
0a58h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0a5bh mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
0a65h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a68h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0a6bh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0a6eh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0a70h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0a73h mov eax,[rsp+700h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 00 07 00 00
0a7ah cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0a7dh ja near ptr 1d80h             ; JA(Ja_rel32_64) [1D80h:jmp64]                        encoding(6 bytes) = 0f 87 fd 12 00 00
0a83h mov r8,[rsp+6F8h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 f8 06 00 00
0a8bh lea rax,[rsp+6B0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b0 06 00 00
0a93h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a97h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0a9bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0a9eh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0aa1h mov [rsp+6A8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a8 06 00 00
0aa9h mov rcx,[rsp+6A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 06 00 00
0ab1h lea r8,[rsp+6B0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 b0 06 00 00
0ab9h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0abch mov [rsp+6B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 06 00 00
0ac3h vmovdqu xmm0,xmmword ptr [rsp+6B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 06 00 00
0acch vmovdqu xmmword ptr [rsp+6E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 06 00 00
0ad5h vmovdqu xmm0,xmmword ptr [rsp+6E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 06 00 00
0adeh vmovdqu xmmword ptr [rsp+698h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 06 00 00
0ae7h mov ecx,[rsp+710h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 07 00 00
0aeeh cmp ecx,[rsp+6A0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 a0 06 00 00
0af5h ja near ptr 1d86h             ; JA(Ja_rel32_64) [1D86h:jmp64]                        encoding(6 bytes) = 0f 87 8b 12 00 00
0afbh mov rcx,[rsp+698h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 06 00 00
0b03h mov rdx,[rsp+708h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 08 07 00 00
0b0bh mov r8d,[rsp+710h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 10 07 00 00
0b13h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0b16h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 c5 93 9c 5d
0b1bh mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0b25h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0b2ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 91 4a 41 5f
0b2fh mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
0b31h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0b33h mov [rsp+690h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 06 00 00
0b3ah lea rdx,[rsp+690h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 06 00 00
0b42h test cl,8                     ; TEST(Test_rm8_imm8) [CL,8h:imm8]                     encoding(3 bytes) = f6 c1 08
0b45h jne short 0b4bh               ; JNE(Jne_rel8_64) [B4Bh:jmp64]                        encoding(2 bytes) = 75 04
0b47h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0b49h jmp short 0b50h               ; JMP(Jmp_rel8_64) [B50h:jmp64]                        encoding(2 bytes) = eb 05
0b4bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0b50h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0b52h mov ecx,[rsp+690h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 06 00 00
0b59h mov [rsp+0B60h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 0b 00 00
0b60h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0b62h mov [rsp+688h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 06 00 00
0b69h mov ecx,[rsp+688h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 06 00 00
0b70h mov [rsp+0B58h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 0b 00 00
0b77h mov dword ptr [rsp+680h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 80 06 00 00 01 00 00 00
0b82h mov ecx,[rsp+680h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 06 00 00
0b89h mov [rsp+0B50h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 0b 00 00
0b90h mov dword ptr [rsp+678h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 78 06 00 00 01 00 00 00
0b9bh mov ecx,[rsp+678h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 06 00 00
0ba2h mov [rsp+0B48h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 0b 00 00
0ba9h mov ecx,[rsp+0B60h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 0b 00 00
0bb0h mov [rsp+670h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 06 00 00
0bb7h mov ecx,[rsp+0B58h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 0b 00 00
0bbeh mov [rsp+668h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 06 00 00
0bc5h mov ecx,[rsp+0B50h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 0b 00 00
0bcch mov [rsp+660h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 06 00 00
0bd3h mov ecx,[rsp+0B48h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 0b 00 00
0bdah mov [rsp+658h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 06 00 00
0be1h mov ecx,[rsp+670h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 06 00 00
0be8h mov [rsp+650h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 06 00 00
0befh mov ecx,[rsp+650h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 06 00 00
0bf6h mov edx,[rsp+668h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 06 00 00
0bfdh mov [rsp+648h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 06 00 00
0c04h mov edx,[rsp+648h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 06 00 00
0c0bh shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0c0dh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0c0fh mov edx,[rsp+660h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 06 00 00
0c16h mov [rsp+640h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 06 00 00
0c1dh mov edx,[rsp+640h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 06 00 00
0c24h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0c27h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0c29h mov edx,[rsp+658h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 06 00 00
0c30h mov [rsp+638h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 06 00 00
0c37h mov edx,[rsp+638h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 06 00 00
0c3eh shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
0c41h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0c43h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0c46h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0c49h lea rcx,[rsp+628h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 06 00 00
0c51h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c55h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0c59h lea rcx,[rsp+608h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 06 00 00
0c61h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c65h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0c69h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0c6dh mov [rsp+600h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 00 06 00 00
0c75h mov rcx,[rsp+600h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 06 00 00
0c7dh lea rdx,[rsp+608h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 08 06 00 00
0c85h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0c88h mov dword ptr [rsp+610h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 10 06 00 00 01 00 00 00
0c93h vmovdqu xmm0,xmmword ptr [rsp+608h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 06 00 00
0c9ch vmovdqu xmmword ptr [rsp+618h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 06 00 00
0ca5h lea rcx,[rsp+628h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 06 00 00
0cadh vmovdqu xmm0,xmmword ptr [rsp+618h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 06 00 00
0cb6h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
0cbch lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
0cc1h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 4a 8d ff ff
0cc6h vmovdqu xmm0,xmmword ptr [rsp+628h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 06 00 00
0ccfh vmovdqu xmmword ptr [rsp+0B38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 0b 00 00
0cd8h vmovdqu xmm0,xmmword ptr [rsp+0B38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 0b 00 00
0ce1h vmovdqu xmmword ptr [rsp+5F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 05 00 00
0ceah vmovdqu xmm0,xmmword ptr [rsp+5F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 05 00 00
0cf3h vmovdqu xmmword ptr [rsp+5E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 05 00 00
0cfch vmovdqu xmm0,xmmword ptr [rsp+5E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 05 00 00
0d05h vmovdqu xmmword ptr [rsp+5D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 05 00 00
0d0eh vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
0d17h vmovdqu xmmword ptr [rsp+5C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 05 00 00
0d20h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
0d2ah mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0d2dh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0d31h mov r11,7FFDDB031008h         ; MOV(Mov_r64_imm64) [R11,7ffddb031008h:imm64]         encoding(10 bytes) = 49 bb 08 10 03 db fd 7f 00 00
0d3bh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0d40h mov rax,7FFDDB031008h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031008h:imm64]         encoding(10 bytes) = 48 b8 08 10 03 db fd 7f 00 00
0d4ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0d4ch call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
0d4eh lea rcx,[rsp+590h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 05 00 00
0d56h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d5ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0d5eh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0d61h jne short 0d75h               ; JNE(Jne_rel8_64) [D75h:jmp64]                        encoding(2 bytes) = 75 12
0d63h lea rax,[rsp+590h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 90 05 00 00
0d6bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d6fh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0d73h jmp short 0d9eh               ; JMP(Jmp_rel8_64) [D9Eh:jmp64]                        encoding(2 bytes) = eb 29
0d75h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0d79h mov [rsp+588h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 88 05 00 00
0d81h mov rcx,[rsp+588h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 88 05 00 00
0d89h lea rdx,[rsp+590h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 05 00 00
0d91h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0d94h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0d97h mov [rsp+598h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 05 00 00
0d9eh vmovdqu xmm0,xmmword ptr [rsp+590h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 05 00 00
0da7h vmovdqu xmmword ptr [rsp+5A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 05 00 00
0db0h cmp dword ptr [rsp+5A8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 a8 05 00 00 00
0db8h jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 0a 10 00 00
0dbeh mov rcx,[rsp+5A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 05 00 00
0dc6h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0dc9h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
0dd3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0dd6h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0dd9h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0ddch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0ddeh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0de1h mov eax,[rsp+5C8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c8 05 00 00
0de8h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0debh ja near ptr 1d8ch             ; JA(Ja_rel32_64) [1D8Ch:jmp64]                        encoding(6 bytes) = 0f 87 9b 0f 00 00
0df1h mov r8,[rsp+5C0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 c0 05 00 00
0df9h lea rax,[rsp+578h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 78 05 00 00
0e01h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0e05h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0e09h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0e0ch add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0e0fh mov [rsp+570h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 05 00 00
0e17h mov rcx,[rsp+570h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 05 00 00
0e1fh lea r8,[rsp+578h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 78 05 00 00
0e27h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0e2ah mov [rsp+580h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 05 00 00
0e31h vmovdqu xmm0,xmmword ptr [rsp+578h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 05 00 00
0e3ah vmovdqu xmmword ptr [rsp+5B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 05 00 00
0e43h vmovdqu xmm0,xmmword ptr [rsp+5B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 05 00 00
0e4ch vmovdqu xmmword ptr [rsp+560h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 05 00 00
0e55h mov ecx,[rsp+5D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 05 00 00
0e5ch cmp ecx,[rsp+568h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 68 05 00 00
0e63h ja near ptr 1d92h             ; JA(Ja_rel32_64) [1D92h:jmp64]                        encoding(6 bytes) = 0f 87 29 0f 00 00
0e69h mov rcx,[rsp+560h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 05 00 00
0e71h mov rdx,[rsp+5D0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d0 05 00 00
0e79h mov r8d,[rsp+5D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 05 00 00
0e81h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0e84h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 57 90 9c 5d
0e89h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
0e93h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0e98h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 23 47 41 5f
0e9dh mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
0e9fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0ea1h mov [rsp+558h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 05 00 00
0ea8h lea rdx,[rsp+558h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 05 00 00
0eb0h test cl,10h                   ; TEST(Test_rm8_imm8) [CL,10h:imm8]                    encoding(3 bytes) = f6 c1 10
0eb3h jne short 0eb9h               ; JNE(Jne_rel8_64) [EB9h:jmp64]                        encoding(2 bytes) = 75 04
0eb5h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0eb7h jmp short 0ebeh               ; JMP(Jmp_rel8_64) [EBEh:jmp64]                        encoding(2 bytes) = eb 05
0eb9h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0ebeh mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0ec0h mov ecx,[rsp+558h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 05 00 00
0ec7h mov [rsp+0B30h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 0b 00 00
0eceh mov dword ptr [rsp+550h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 50 05 00 00 01 00 00 00
0ed9h mov ecx,[rsp+550h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 05 00 00
0ee0h mov [rsp+0B28h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 0b 00 00
0ee7h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0ee9h mov [rsp+548h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 05 00 00
0ef0h mov ecx,[rsp+548h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 05 00 00
0ef7h mov [rsp+0B20h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 0b 00 00
0efeh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0f00h mov [rsp+540h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 05 00 00
0f07h mov ecx,[rsp+540h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 05 00 00
0f0eh mov [rsp+0B18h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 0b 00 00
0f15h mov ecx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0b 00 00
0f1ch mov [rsp+538h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 05 00 00
0f23h mov ecx,[rsp+0B28h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 0b 00 00
0f2ah mov [rsp+530h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 05 00 00
0f31h mov ecx,[rsp+0B20h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 0b 00 00
0f38h mov [rsp+528h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 05 00 00
0f3fh mov ecx,[rsp+0B18h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 0b 00 00
0f46h mov [rsp+520h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 05 00 00
0f4dh mov ecx,[rsp+538h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 05 00 00
0f54h mov [rsp+518h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 05 00 00
0f5bh mov ecx,[rsp+518h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 05 00 00
0f62h mov edx,[rsp+530h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 05 00 00
0f69h mov [rsp+510h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 05 00 00
0f70h mov edx,[rsp+510h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 05 00 00
0f77h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
0f79h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0f7bh mov edx,[rsp+528h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 05 00 00
0f82h mov [rsp+508h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 05 00 00
0f89h mov edx,[rsp+508h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 05 00 00
0f90h shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
0f93h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0f95h mov edx,[rsp+520h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 05 00 00
0f9ch mov [rsp+500h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 05 00 00
0fa3h mov edx,[rsp+500h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 05 00 00
0faah shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
0fadh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
0fafh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0fb2h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0fb5h lea rcx,[rsp+4F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 04 00 00
0fbdh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0fc1h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0fc5h lea rcx,[rsp+4D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 04 00 00
0fcdh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0fd1h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0fd5h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0fd9h mov [rsp+4C8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 c8 04 00 00
0fe1h mov rcx,[rsp+4C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 04 00 00
0fe9h lea rdx,[rsp+4D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 04 00 00
0ff1h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0ff4h mov dword ptr [rsp+4D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 04 00 00 01 00 00 00
0fffh vmovdqu xmm0,xmmword ptr [rsp+4D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 04 00 00
1008h vmovdqu xmmword ptr [rsp+4E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 04 00 00
1011h lea rcx,[rsp+4F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 04 00 00
1019h vmovdqu xmm0,xmmword ptr [rsp+4E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 04 00 00
1022h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1028h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
102dh call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 de 89 ff ff
1032h vmovdqu xmm0,xmmword ptr [rsp+4F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 04 00 00
103bh vmovdqu xmmword ptr [rsp+0B08h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 0b 00 00
1044h vmovdqu xmm0,xmmword ptr [rsp+0B08h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 0b 00 00
104dh vmovdqu xmmword ptr [rsp+4B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 04 00 00
1056h vmovdqu xmm0,xmmword ptr [rsp+4B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 04 00 00
105fh vmovdqu xmmword ptr [rsp+4A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 04 00 00
1068h vmovdqu xmm0,xmmword ptr [rsp+4A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 04 00 00
1071h vmovdqu xmmword ptr [rsp+498h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 04 00 00
107ah vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
1083h vmovdqu xmmword ptr [rsp+488h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 04 00 00
108ch mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
1096h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1099h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
109dh mov r11,7FFDDB031010h         ; MOV(Mov_r64_imm64) [R11,7ffddb031010h:imm64]         encoding(10 bytes) = 49 bb 10 10 03 db fd 7f 00 00
10a7h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
10ach mov rax,7FFDDB031010h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031010h:imm64]         encoding(10 bytes) = 48 b8 10 10 03 db fd 7f 00 00
10b6h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
10b8h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
10bah lea rcx,[rsp+458h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 04 00 00
10c2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
10c6h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
10cah test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
10cdh jne short 10e1h               ; JNE(Jne_rel8_64) [10E1h:jmp64]                       encoding(2 bytes) = 75 12
10cfh lea rax,[rsp+458h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 04 00 00
10d7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
10dbh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
10dfh jmp short 110ah               ; JMP(Jmp_rel8_64) [110Ah:jmp64]                       encoding(2 bytes) = eb 29
10e1h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
10e5h mov [rsp+450h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 50 04 00 00
10edh mov rcx,[rsp+450h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 04 00 00
10f5h lea rdx,[rsp+458h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 04 00 00
10fdh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1100h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1103h mov [rsp+460h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 04 00 00
110ah vmovdqu xmm0,xmmword ptr [rsp+458h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 04 00 00
1113h vmovdqu xmmword ptr [rsp+468h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 04 00 00
111ch cmp dword ptr [rsp+470h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 70 04 00 00 00
1124h jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 9e 0c 00 00
112ah mov rcx,[rsp+468h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 68 04 00 00
1132h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1135h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
113fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1142h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1145h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1148h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
114ah add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
114dh mov eax,[rsp+490h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 04 00 00
1154h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
1157h ja near ptr 1d98h             ; JA(Ja_rel32_64) [1D98h:jmp64]                        encoding(6 bytes) = 0f 87 3b 0c 00 00
115dh mov r8,[rsp+488h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 88 04 00 00
1165h lea rax,[rsp+440h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 04 00 00
116dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1171h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1175h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1178h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
117bh mov [rsp+438h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 38 04 00 00
1183h mov rcx,[rsp+438h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 04 00 00
118bh lea r8,[rsp+440h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 40 04 00 00
1193h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1196h mov [rsp+448h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 04 00 00
119dh vmovdqu xmm0,xmmword ptr [rsp+440h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 04 00 00
11a6h vmovdqu xmmword ptr [rsp+478h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 04 00 00
11afh vmovdqu xmm0,xmmword ptr [rsp+478h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 04 00 00
11b8h vmovdqu xmmword ptr [rsp+428h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 04 00 00
11c1h mov ecx,[rsp+4A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 04 00 00
11c8h cmp ecx,[rsp+430h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 30 04 00 00
11cfh ja near ptr 1d9eh             ; JA(Ja_rel32_64) [1D9Eh:jmp64]                        encoding(6 bytes) = 0f 87 c9 0b 00 00
11d5h mov rcx,[rsp+428h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 04 00 00
11ddh mov rdx,[rsp+498h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 04 00 00
11e5h mov r8d,[rsp+4A0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a0 04 00 00
11edh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
11f0h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 eb 8c 9c 5d
11f5h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
11ffh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1204h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 b7 43 41 5f
1209h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
120bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
120dh mov [rsp+420h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 04 00 00
1214h lea rdx,[rsp+420h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 04 00 00
121ch test cl,20h                   ; TEST(Test_rm8_imm8) [CL,20h:imm8]                    encoding(3 bytes) = f6 c1 20
121fh jne short 1225h               ; JNE(Jne_rel8_64) [1225h:jmp64]                       encoding(2 bytes) = 75 04
1221h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1223h jmp short 122ah               ; JMP(Jmp_rel8_64) [122Ah:jmp64]                       encoding(2 bytes) = eb 05
1225h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
122ah mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
122ch mov ecx,[rsp+420h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 04 00 00
1233h mov [rsp+0B00h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 0b 00 00
123ah mov dword ptr [rsp+418h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 18 04 00 00 01 00 00 00
1245h mov ecx,[rsp+418h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 04 00 00
124ch mov [rsp+0AF8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 0a 00 00
1253h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1255h mov [rsp+410h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 04 00 00
125ch mov ecx,[rsp+410h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 04 00 00
1263h mov [rsp+0AF0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 0a 00 00
126ah mov dword ptr [rsp+408h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 08 04 00 00 01 00 00 00
1275h mov ecx,[rsp+408h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 04 00 00
127ch mov [rsp+0AE8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 0a 00 00
1283h mov ecx,[rsp+0B00h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 0b 00 00
128ah mov [rsp+400h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 04 00 00
1291h mov ecx,[rsp+0AF8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 0a 00 00
1298h mov [rsp+3F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 03 00 00
129fh mov ecx,[rsp+0AF0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 0a 00 00
12a6h mov [rsp+3F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 03 00 00
12adh mov ecx,[rsp+0AE8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 0a 00 00
12b4h mov [rsp+3E8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 03 00 00
12bbh mov ecx,[rsp+400h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 04 00 00
12c2h mov [rsp+3E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 03 00 00
12c9h mov ecx,[rsp+3E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 03 00 00
12d0h mov edx,[rsp+3F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 03 00 00
12d7h mov [rsp+3D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 03 00 00
12deh mov edx,[rsp+3D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 03 00 00
12e5h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
12e7h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
12e9h mov edx,[rsp+3F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 03 00 00
12f0h mov [rsp+3D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 03 00 00
12f7h mov edx,[rsp+3D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 03 00 00
12feh shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
1301h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1303h mov edx,[rsp+3E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 03 00 00
130ah mov [rsp+3C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 03 00 00
1311h mov edx,[rsp+3C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 03 00 00
1318h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
131bh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
131dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1320h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1323h lea rcx,[rsp+3B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 03 00 00
132bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
132fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1333h lea rcx,[rsp+398h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 03 00 00
133bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
133fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1343h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
1347h mov [rsp+390h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 90 03 00 00
134fh mov rcx,[rsp+390h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 03 00 00
1357h lea rdx,[rsp+398h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 98 03 00 00
135fh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1362h mov dword ptr [rsp+3A0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 a0 03 00 00 01 00 00 00
136dh vmovdqu xmm0,xmmword ptr [rsp+398h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 03 00 00
1376h vmovdqu xmmword ptr [rsp+3A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 03 00 00
137fh lea rcx,[rsp+3B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 03 00 00
1387h vmovdqu xmm0,xmmword ptr [rsp+3A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 03 00 00
1390h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1396h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
139bh call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 70 86 ff ff
13a0h vmovdqu xmm0,xmmword ptr [rsp+3B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 03 00 00
13a9h vmovdqu xmmword ptr [rsp+0AD8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 0a 00 00
13b2h vmovdqu xmm0,xmmword ptr [rsp+0AD8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 0a 00 00
13bbh vmovdqu xmmword ptr [rsp+380h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 03 00 00
13c4h vmovdqu xmm0,xmmword ptr [rsp+380h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 03 00 00
13cdh vmovdqu xmmword ptr [rsp+370h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 03 00 00
13d6h vmovdqu xmm0,xmmword ptr [rsp+370h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 03 00 00
13dfh vmovdqu xmmword ptr [rsp+360h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 03 00 00
13e8h vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
13f1h vmovdqu xmmword ptr [rsp+350h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 03 00 00
13fah mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
1404h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1407h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
140bh mov r11,7FFDDB031018h         ; MOV(Mov_r64_imm64) [R11,7ffddb031018h:imm64]         encoding(10 bytes) = 49 bb 18 10 03 db fd 7f 00 00
1415h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
141ah mov rax,7FFDDB031018h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031018h:imm64]         encoding(10 bytes) = 48 b8 18 10 03 db fd 7f 00 00
1424h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1426h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
1428h lea rcx,[rsp+320h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 03 00 00
1430h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1434h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1438h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
143bh jne short 144fh               ; JNE(Jne_rel8_64) [144Fh:jmp64]                       encoding(2 bytes) = 75 12
143dh lea rax,[rsp+320h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 20 03 00 00
1445h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1449h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
144dh jmp short 1478h               ; JMP(Jmp_rel8_64) [1478h:jmp64]                       encoding(2 bytes) = eb 29
144fh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1453h mov [rsp+318h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 18 03 00 00
145bh mov rcx,[rsp+318h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 03 00 00
1463h lea rdx,[rsp+320h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 03 00 00
146bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
146eh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1471h mov [rsp+328h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 03 00 00
1478h vmovdqu xmm0,xmmword ptr [rsp+320h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 03 00 00
1481h vmovdqu xmmword ptr [rsp+330h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 03 00 00
148ah cmp dword ptr [rsp+338h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 38 03 00 00 00
1492h jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 30 09 00 00
1498h mov rcx,[rsp+330h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 03 00 00
14a0h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
14a3h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
14adh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
14b0h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
14b3h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
14b6h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
14b8h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
14bbh mov eax,[rsp+358h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 58 03 00 00
14c2h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
14c5h ja near ptr 1da4h             ; JA(Ja_rel32_64) [1DA4h:jmp64]                        encoding(6 bytes) = 0f 87 d9 08 00 00
14cbh mov r8,[rsp+350h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 50 03 00 00
14d3h lea rax,[rsp+308h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 08 03 00 00
14dbh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
14dfh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
14e3h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
14e6h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
14e9h mov [rsp+300h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 00 03 00 00
14f1h mov rcx,[rsp+300h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 03 00 00
14f9h lea r8,[rsp+308h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 08 03 00 00
1501h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1504h mov [rsp+310h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 03 00 00
150bh vmovdqu xmm0,xmmword ptr [rsp+308h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 03 00 00
1514h vmovdqu xmmword ptr [rsp+340h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 03 00 00
151dh vmovdqu xmm0,xmmword ptr [rsp+340h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 03 00 00
1526h vmovdqu xmmword ptr [rsp+2F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 02 00 00
152fh mov ecx,[rsp+368h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 03 00 00
1536h cmp ecx,[rsp+2F8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 f8 02 00 00
153dh ja near ptr 1daah             ; JA(Ja_rel32_64) [1DAAh:jmp64]                        encoding(6 bytes) = 0f 87 67 08 00 00
1543h mov rcx,[rsp+2F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 02 00 00
154bh mov rdx,[rsp+360h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 60 03 00 00
1553h mov r8d,[rsp+368h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 68 03 00 00
155bh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
155eh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 7d 89 9c 5d
1563h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
156dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1572h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 49 40 41 5f
1577h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
1579h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
157bh mov [rsp+2E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 02 00 00
1582h lea rdx,[rsp+2E8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e8 02 00 00
158ah test cl,40h                   ; TEST(Test_rm8_imm8) [CL,40h:imm8]                    encoding(3 bytes) = f6 c1 40
158dh jne short 1593h               ; JNE(Jne_rel8_64) [1593h:jmp64]                       encoding(2 bytes) = 75 04
158fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1591h jmp short 1598h               ; JMP(Jmp_rel8_64) [1598h:jmp64]                       encoding(2 bytes) = eb 05
1593h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
1598h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
159ah mov ecx,[rsp+2E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 02 00 00
15a1h mov [rsp+0AD0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 0a 00 00
15a8h mov dword ptr [rsp+2E0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e0 02 00 00 01 00 00 00
15b3h mov ecx,[rsp+2E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 02 00 00
15bah mov [rsp+0AC8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 0a 00 00
15c1h mov dword ptr [rsp+2D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 02 00 00 01 00 00 00
15cch mov ecx,[rsp+2D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 02 00 00
15d3h mov [rsp+0AC0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 0a 00 00
15dah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
15dch mov [rsp+2D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 02 00 00
15e3h mov ecx,[rsp+2D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 02 00 00
15eah mov [rsp+0AB8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 0a 00 00
15f1h mov ecx,[rsp+0AD0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 0a 00 00
15f8h mov [rsp+2C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 02 00 00
15ffh mov ecx,[rsp+0AC8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 0a 00 00
1606h mov [rsp+2C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 02 00 00
160dh mov ecx,[rsp+0AC0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 0a 00 00
1614h mov [rsp+2B8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 02 00 00
161bh mov ecx,[rsp+0AB8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 0a 00 00
1622h mov [rsp+2B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 02 00 00
1629h mov ecx,[rsp+2C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 02 00 00
1630h mov [rsp+2A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 02 00 00
1637h mov ecx,[rsp+2A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 02 00 00
163eh mov edx,[rsp+2C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 02 00 00
1645h mov [rsp+2A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 02 00 00
164ch mov edx,[rsp+2A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 02 00 00
1653h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
1655h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1657h mov edx,[rsp+2B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 02 00 00
165eh mov [rsp+298h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 02 00 00
1665h mov edx,[rsp+298h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 02 00 00
166ch shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
166fh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
1671h mov edx,[rsp+2B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 02 00 00
1678h mov [rsp+290h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 02 00 00
167fh mov edx,[rsp+290h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 02 00 00
1686h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
1689h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
168bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
168eh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1691h lea rcx,[rsp+280h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 02 00 00
1699h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
169dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
16a1h lea rcx,[rsp+260h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 02 00 00
16a9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
16adh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
16b1h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
16b5h mov [rsp+258h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 58 02 00 00
16bdh mov rcx,[rsp+258h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 58 02 00 00
16c5h lea rdx,[rsp+260h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 02 00 00
16cdh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
16d0h mov dword ptr [rsp+268h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 68 02 00 00 01 00 00 00
16dbh vmovdqu xmm0,xmmword ptr [rsp+260h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 02 00 00
16e4h vmovdqu xmmword ptr [rsp+270h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 02 00 00
16edh lea rcx,[rsp+280h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 02 00 00
16f5h vmovdqu xmm0,xmmword ptr [rsp+270h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 02 00 00
16feh vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1704h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
1709h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 02 83 ff ff
170eh vmovdqu xmm0,xmmword ptr [rsp+280h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 02 00 00
1717h vmovdqu xmmword ptr [rsp+0AA8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 0a 00 00
1720h vmovdqu xmm0,xmmword ptr [rsp+0AA8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 0a 00 00
1729h vmovdqu xmmword ptr [rsp+248h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 02 00 00
1732h vmovdqu xmm0,xmmword ptr [rsp+248h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 02 00 00
173bh vmovdqu xmmword ptr [rsp+238h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 02 00 00
1744h vmovdqu xmm0,xmmword ptr [rsp+238h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 02 00 00
174dh vmovdqu xmmword ptr [rsp+228h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 02 00 00
1756h vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
175fh vmovdqu xmmword ptr [rsp+218h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 02 00 00
1768h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
1772h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1775h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1779h mov r11,7FFDDB031020h         ; MOV(Mov_r64_imm64) [R11,7ffddb031020h:imm64]         encoding(10 bytes) = 49 bb 20 10 03 db fd 7f 00 00
1783h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
1788h mov rax,7FFDDB031020h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031020h:imm64]         encoding(10 bytes) = 48 b8 20 10 03 db fd 7f 00 00
1792h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1794h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
1796h lea rcx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 01 00 00
179eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
17a2h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
17a6h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
17a9h jne short 17bdh               ; JNE(Jne_rel8_64) [17BDh:jmp64]                       encoding(2 bytes) = 75 12
17abh lea rax,[rsp+1E8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 e8 01 00 00
17b3h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
17b7h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
17bbh jmp short 17e6h               ; JMP(Jmp_rel8_64) [17E6h:jmp64]                       encoding(2 bytes) = eb 29
17bdh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
17c1h mov [rsp+1E0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e0 01 00 00
17c9h mov rcx,[rsp+1E0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e0 01 00 00
17d1h lea rdx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e8 01 00 00
17d9h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
17dch mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
17dfh mov [rsp+1F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 01 00 00
17e6h vmovdqu xmm0,xmmword ptr [rsp+1E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 01 00 00
17efh vmovdqu xmmword ptr [rsp+1F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 01 00 00
17f8h cmp dword ptr [rsp+200h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 00 02 00 00 00
1800h jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 c2 05 00 00
1806h mov rcx,[rsp+1F8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f8 01 00 00
180eh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1811h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
181bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
181eh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1821h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1824h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
1826h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1829h mov eax,[rsp+220h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 20 02 00 00
1830h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
1833h ja near ptr 1db0h             ; JA(Ja_rel32_64) [1DB0h:jmp64]                        encoding(6 bytes) = 0f 87 77 05 00 00
1839h mov r8,[rsp+218h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 18 02 00 00
1841h lea rax,[rsp+1D0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 d0 01 00 00
1849h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
184dh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1851h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1854h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1857h mov [rsp+1C8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 c8 01 00 00
185fh mov rcx,[rsp+1C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 01 00 00
1867h lea r8,[rsp+1D0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 d0 01 00 00
186fh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1872h mov [rsp+1D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 01 00 00
1879h vmovdqu xmm0,xmmword ptr [rsp+1D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 01 00 00
1882h vmovdqu xmmword ptr [rsp+208h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 02 00 00
188bh vmovdqu xmm0,xmmword ptr [rsp+208h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 02 00 00
1894h vmovdqu xmmword ptr [rsp+1B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 01 00 00
189dh mov ecx,[rsp+230h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 02 00 00
18a4h cmp ecx,[rsp+1C0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 c0 01 00 00
18abh ja near ptr 1db6h             ; JA(Ja_rel32_64) [1DB6h:jmp64]                        encoding(6 bytes) = 0f 87 05 05 00 00
18b1h mov rcx,[rsp+1B8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b8 01 00 00
18b9h mov rdx,[rsp+228h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 02 00 00
18c1h mov r8d,[rsp+230h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 30 02 00 00
18c9h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
18cch call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 0f 86 9c 5d
18d1h mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
18dbh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
18e0h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 db 3c 41 5f
18e5h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
18e7h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
18e9h mov [rsp+1B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 01 00 00
18f0h lea rdx,[rsp+1B0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b0 01 00 00
18f8h test cl,80h                   ; TEST(Test_rm8_imm8) [CL,80h:imm8]                    encoding(3 bytes) = f6 c1 80
18fbh jne short 1901h               ; JNE(Jne_rel8_64) [1901h:jmp64]                       encoding(2 bytes) = 75 04
18fdh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
18ffh jmp short 1906h               ; JMP(Jmp_rel8_64) [1906h:jmp64]                       encoding(2 bytes) = eb 05
1901h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
1906h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
1908h mov ecx,[rsp+1B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 01 00 00
190fh mov [rsp+0AA0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 0a 00 00
1916h mov dword ptr [rsp+1A8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 a8 01 00 00 01 00 00 00
1921h mov ecx,[rsp+1A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 01 00 00
1928h mov [rsp+0A98h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 0a 00 00
192fh mov dword ptr [rsp+1A0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 a0 01 00 00 01 00 00 00
193ah mov ecx,[rsp+1A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 01 00 00
1941h mov [rsp+0A90h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 0a 00 00
1948h mov dword ptr [rsp+198h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 98 01 00 00 01 00 00 00
1953h mov ecx,[rsp+198h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 01 00 00
195ah mov [rsp+0A88h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 0a 00 00
1961h mov ecx,[rsp+0AA0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 0a 00 00
1968h mov [rsp+190h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 01 00 00
196fh mov ecx,[rsp+0A98h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 0a 00 00
1976h mov [rsp+188h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 01 00 00
197dh mov ecx,[rsp+0A90h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 0a 00 00
1984h mov [rsp+180h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 01 00 00
198bh mov ecx,[rsp+0A88h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 0a 00 00
1992h mov [rsp+178h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 01 00 00
1999h mov ecx,[rsp+190h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 01 00 00
19a0h mov [rsp+170h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 01 00 00
19a7h mov ecx,[rsp+170h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 01 00 00
19aeh mov edx,[rsp+188h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 01 00 00
19b5h mov [rsp+168h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 01 00 00
19bch mov edx,[rsp+168h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 01 00 00
19c3h shl edx,1                     ; SHL(Shl_rm32_1) [EDX,1h:imm8]                        encoding(2 bytes) = d1 e2
19c5h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
19c7h mov edx,[rsp+180h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 01 00 00
19ceh mov [rsp+160h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 01 00 00
19d5h mov edx,[rsp+160h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 01 00 00
19dch shl edx,2                     ; SHL(Shl_rm32_imm8) [EDX,2h:imm8]                     encoding(3 bytes) = c1 e2 02
19dfh or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
19e1h mov edx,[rsp+178h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 01 00 00
19e8h mov [rsp+158h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 01 00 00
19efh mov edx,[rsp+158h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 01 00 00
19f6h shl edx,3                     ; SHL(Shl_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 e2 03
19f9h or ecx,edx                    ; OR(Or_r32_rm32) [ECX,EDX]                            encoding(2 bytes) = 0b ca
19fbh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
19feh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1a01h lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
1a09h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1a0dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1a11h lea rcx,[rsp+128h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 01 00 00
1a19h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1a1dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1a21h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
1a25h mov [rsp+120h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 20 01 00 00
1a2dh mov rcx,[rsp+120h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 20 01 00 00
1a35h lea rdx,[rsp+128h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 28 01 00 00
1a3dh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1a40h mov dword ptr [rsp+130h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 30 01 00 00 01 00 00 00
1a4bh vmovdqu xmm0,xmmword ptr [rsp+128h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 01 00 00
1a54h vmovdqu xmmword ptr [rsp+138h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 01 00 00
1a5dh lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
1a65h vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
1a6eh vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1a74h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
1a79h call 7FFDDB848A30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9A10h:jmp64]        encoding(5 bytes) = e8 92 7f ff ff
1a7eh vmovdqu xmm0,xmmword ptr [rsp+148h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 01 00 00
1a87h vmovdqu xmmword ptr [rsp+0A78h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 0a 00 00
1a90h vmovdqu xmm0,xmmword ptr [rsp+0A78h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 0a 00 00
1a99h vmovdqu xmmword ptr [rsp+110h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 01 00 00
1aa2h vmovdqu xmm0,xmmword ptr [rsp+110h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 01 00 00
1aabh vmovdqu xmmword ptr [rsp+100h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 01 00 00
1ab4h vmovdqu xmm0,xmmword ptr [rsp+100h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 01 00 00
1abdh vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
1ac6h vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
1acfh vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
1ad8h mov rcx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RCX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 1f 01 6b f9 01 00 00
1ae2h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1ae5h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1ae9h mov r11,7FFDDB031028h         ; MOV(Mov_r64_imm64) [R11,7ffddb031028h:imm64]         encoding(10 bytes) = 49 bb 28 10 03 db fd 7f 00 00
1af3h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1af8h mov rax,7FFDDB031028h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031028h:imm64]         encoding(10 bytes) = 48 b8 28 10 03 db fd 7f 00 00
1b02h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1b04h call qword ptr [rax]          ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(2 bytes) = ff 10
1b06h lea rcx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 00 00 00
1b0eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b12h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1b16h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1b19h jne short 1b2dh               ; JNE(Jne_rel8_64) [1B2Dh:jmp64]                       encoding(2 bytes) = 75 12
1b1bh lea rax,[rsp+0B0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b0 00 00 00
1b23h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b27h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1b2bh jmp short 1b56h               ; JMP(Jmp_rel8_64) [1B56h:jmp64]                       encoding(2 bytes) = eb 29
1b2dh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1b31h mov [rsp+0A8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a8 00 00 00
1b39h mov rcx,[rsp+0A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 00 00 00
1b41h lea rdx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b0 00 00 00
1b49h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1b4ch mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1b4fh mov [rsp+0B8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 00 00 00
1b56h vmovdqu xmm0,xmmword ptr [rsp+0B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 00 00 00
1b5fh vmovdqu xmmword ptr [rsp+0C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 00 00 00
1b68h cmp dword ptr [rsp+0C8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 c8 00 00 00 00
1b70h jbe near ptr 1dc8h            ; JBE(Jbe_rel32_64) [1DC8h:jmp64]                      encoding(6 bytes) = 0f 86 52 02 00 00
1b76h mov rcx,[rsp+0C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 00 00 00
1b7eh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1b81h mov rdx,1F96B011FB0h          ; MOV(Mov_r64_imm64) [RDX,1f96b011fb0h:imm64]          encoding(10 bytes) = 48 ba b0 1f 01 6b f9 01 00 00
1b8bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1b8eh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1b91h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1b94h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
1b96h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1b99h mov eax,[rsp+0E8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 00 00 00
1ba0h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
1ba3h ja near ptr 1dbch             ; JA(Ja_rel32_64) [1DBCh:jmp64]                        encoding(6 bytes) = 0f 87 13 02 00 00
1ba9h mov r8,[rsp+0E0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 e0 00 00 00
1bb1h lea rax,[rsp+98h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 00 00 00
1bb9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1bbdh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1bc1h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1bc4h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1bc7h mov [rsp+90h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 90 00 00 00
1bcfh mov rcx,[rsp+90h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 00 00 00
1bd7h lea r8,[rsp+98h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 98 00 00 00
1bdfh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1be2h mov [rsp+0A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 00 00 00
1be9h vmovdqu xmm0,xmmword ptr [rsp+98h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 00 00 00
1bf2h vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
1bfbh vmovdqu xmm0,xmmword ptr [rsp+0D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 00 00 00
1c04h vmovdqu xmmword ptr [rsp+80h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 00 00 00
1c0dh mov ecx,[rsp+0F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 00 00 00
1c14h cmp ecx,[rsp+88h]             ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 88 00 00 00
1c1bh ja near ptr 1dc2h             ; JA(Ja_rel32_64) [1DC2h:jmp64]                        encoding(6 bytes) = 0f 87 a1 01 00 00
1c21h mov rcx,[rsp+80h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 80 00 00 00
1c29h mov rdx,[rsp+0F0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f0 00 00 00
1c31h mov r8d,[rsp+0F8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 f8 00 00 00
1c39h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1c3ch call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D9C9EE0h:jmp64]                encoding(5 bytes) = e8 9f 82 9c 5d
1c41h lea rcx,[rsp+0C18h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 0c 00 00
1c49h lea rdx,[rsp+0C08h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 08 0c 00 00
1c51h mov r8d,3                     ; MOV(Mov_r32_imm32) [R8D,3h:imm32]                    encoding(6 bytes) = 41 b8 03 00 00 00
1c57h call 7FFDDB848920h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9900h:jmp64]        encoding(5 bytes) = e8 a4 7c ff ff
1c5ch mov rcx,7FFDDB12EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb12ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 12 db fd 7f 00 00
1c66h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1c6bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4155C0h:jmp64]                encoding(5 bytes) = e8 50 39 41 5f
1c70h mov [rax+10h],bl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),BL]            encoding(3 bytes) = 88 58 10
1c73h lea rcx,[rsp+70h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 70
1c78h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c7ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1c80h lea rcx,[rsp+50h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 50
1c85h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c89h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1c8dh lea rcx,[rsp+50h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 50
1c92h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1c95h call 7FFDDB17F518h            ; CALL(Call_rel32_64) [FFFFFFFFFF9304F8h:jmp64]        encoding(5 bytes) = e8 5e e8 92 ff
1c9ah vmovdqu xmm0,xmmword ptr [rsp+50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 50
1ca0h vmovdqu xmmword ptr [rsp+60h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 60
1ca6h lea rcx,[rsp+70h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 70
1cabh vmovdqu xmm0,xmmword ptr [rsp+60h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 60
1cb1h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1cb7h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
1cbch call 7FFDDB84EEF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 0f e2 ff ff
1cc1h vmovdqu xmm0,xmmword ptr [rsp+70h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 70
1cc7h vmovdqu xmmword ptr [rsp+0BF8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 0b 00 00
1cd0h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1cd2h mov [rsp+0A70h],rcx           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 0a 00 00
1cdah lea rcx,[rsp+0C08h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 0c 00 00
1ce2h lea rdx,[rsp+0BF8h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 0b 00 00
1ceah call 7FFDDB84EEE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFEC0h:jmp64]        encoding(5 bytes) = e8 d1 e1 ff ff
1cefh mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
1cf1h lea rcx,[rsp+0A70h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 0a 00 00
1cf9h mov edx,0B1h                  ; MOV(Mov_r32_imm32) [EDX,b1h:imm32]                   encoding(5 bytes) = ba b1 00 00 00
1cfeh call 7FFE3952AFD0h            ; CALL(Call_rel32_64) [5DCDBFB0h:jmp64]                encoding(5 bytes) = e8 ad a2 cd 5d
1d03h mov r8,[rsp+0A70h]            ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 70 0a 00 00
1d0bh mov [rsp+20h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(5 bytes) = 4c 89 44 24 20
1d10h mov r8,1F96B009B18h           ; MOV(Mov_r64_imm64) [R8,1f96b009b18h:imm64]           encoding(10 bytes) = 49 b8 18 9b 00 6b f9 01 00 00
1d1ah mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
1d1dh mov r9,1F96B009B18h           ; MOV(Mov_r64_imm64) [R9,1f96b009b18h:imm64]           encoding(10 bytes) = 49 b9 18 9b 00 6b f9 01 00 00
1d27h mov r9,[r9]                   ; MOV(Mov_r64_rm64) [R9,mem(64u,R9:br,DS:sr)]          encoding(3 bytes) = 4d 8b 09
1d2ah mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
1d2ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1d2eh call 7FFDDB160F78h            ; CALL(Call_rel32_64) [FFFFFFFFFF911F58h:jmp64]        encoding(5 bytes) = e8 25 02 91 ff
1d33h vmovdqu xmm0,xmmword ptr [rsp+0C18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0c 00 00
1d3ch vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
1d42h lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
1d47h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1d4ah call 7FFDDB84CBB8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFDB98h:jmp64]        encoding(5 bytes) = e8 49 be ff ff
1d4fh inc edi                       ; INC(Inc_rm32) [EDI]                                  encoding(2 bytes) = ff c7
1d51h cmp edi,100h                  ; CMP(Cmp_rm32_imm32) [EDI,100h:imm32]                 encoding(6 bytes) = 81 ff 00 01 00 00
1d57h jl near ptr 003ah             ; JL(Jl_rel32_64) [3Ah:jmp64]                          encoding(6 bytes) = 0f 8c dd e2 ff ff
1d5dh add rsp,0C30h                 ; ADD(Add_rm64_imm32) [RSP,c30h:imm64]                 encoding(7 bytes) = 48 81 c4 30 0c 00 00
1d64h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1d65h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1d66h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1d67h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1d68h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 93 c7 91 ff
1d6dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d6eh call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 95 c7 91 ff
1d73h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d74h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 87 c7 91 ff
1d79h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d7ah call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 89 c7 91 ff
1d7fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d80h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 7b c7 91 ff
1d85h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d86h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 7d c7 91 ff
1d8bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d8ch call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 6f c7 91 ff
1d91h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d92h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 71 c7 91 ff
1d97h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d98h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 63 c7 91 ff
1d9dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d9eh call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 65 c7 91 ff
1da3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1da4h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 57 c7 91 ff
1da9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1daah call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 59 c7 91 ff
1dafh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1db0h call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 4b c7 91 ff
1db5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1db6h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 4d c7 91 ff
1dbbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dbch call 7FFDDB16D520h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E500h:jmp64]        encoding(5 bytes) = e8 3f c7 91 ff
1dc1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dc2h call 7FFDDB16D528h            ; CALL(Call_rel32_64) [FFFFFFFFFF91E508h:jmp64]        encoding(5 bytes) = e8 41 c7 91 ff
1dc7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dc8h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F53FEE0h:jmp64]                encoding(5 bytes) = e8 13 e1 53 5f
1dcdh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitTernaryOpsBytes => new byte[7630]{0x57,0x56,0x53,0x48,0x81,0xEC,0x30,0x0C,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x30,0xB9,0x00,0x03,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0x33,0xFF,0x48,0xB9,0xC8,0x87,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x86,0x03,0x3E,0x5F,0x40,0x0F,0xB6,0xD7,0x88,0x94,0x24,0x68,0x0A,0x00,0x00,0x48,0x0F,0xBE,0x94,0x24,0x68,0x0A,0x00,0x00,0x88,0x94,0x24,0x28,0x0C,0x00,0x00,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x49,0x55,0x41,0x5F,0x48,0x8D,0x8C,0x24,0x48,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x40,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x40,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x48,0x0A,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x0C,0x00,0x00,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xD8,0x54,0x41,0x5F,0x0F,0xB6,0x9C,0x24,0x28,0x0C,0x00,0x00,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0x38,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x0A,0x00,0x00,0xF6,0xC1,0x01,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x38,0x0A,0x00,0x00,0x89,0x8C,0x24,0xF0,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x30,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x30,0x0A,0x00,0x00,0x89,0x8C,0x24,0xE8,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x28,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x28,0x0A,0x00,0x00,0x89,0x8C,0x24,0xE0,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x20,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x20,0x0A,0x00,0x00,0x89,0x8C,0x24,0xD8,0x0B,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x0B,0x00,0x00,0x89,0x8C,0x24,0x18,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x0B,0x00,0x00,0x89,0x8C,0x24,0x10,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x0B,0x00,0x00,0x89,0x8C,0x24,0x08,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x0B,0x00,0x00,0x89,0x8C,0x24,0x00,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x18,0x0A,0x00,0x00,0x89,0x8C,0x24,0xF8,0x09,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x09,0x00,0x00,0x8B,0x94,0x24,0x10,0x0A,0x00,0x00,0x89,0x94,0x24,0xF0,0x09,0x00,0x00,0x8B,0x94,0x24,0xF0,0x09,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x08,0x0A,0x00,0x00,0x89,0x94,0x24,0xE8,0x09,0x00,0x00,0x8B,0x94,0x24,0xE8,0x09,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x00,0x0A,0x00,0x00,0x89,0x94,0x24,0xE0,0x09,0x00,0x00,0x8B,0x94,0x24,0xE0,0x09,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xD0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xB0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xA8,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0xB0,0x09,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xB8,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x09,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x8D,0x97,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x09,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xF0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x48,0xB8,0xF0,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x38,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x30,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x30,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x09,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x40,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x09,0x00,0x00,0x83,0xBC,0x24,0x50,0x09,0x00,0x00,0x00,0x0F,0x86,0x50,0x1A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x09,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x70,0x09,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xBD,0x19,0x00,0x00,0x4C,0x8B,0x84,0x24,0x68,0x09,0x00,0x00,0x48,0x8D,0x84,0x24,0x20,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x18,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x09,0x00,0x00,0x4C,0x8D,0x84,0x24,0x20,0x09,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x28,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x09,0x00,0x00,0x8B,0x8C,0x24,0x80,0x09,0x00,0x00,0x3B,0x8C,0x24,0x10,0x09,0x00,0x00,0x0F,0x87,0x4B,0x19,0x00,0x00,0x48,0x8B,0x8C,0x24,0x08,0x09,0x00,0x00,0x48,0x8B,0x94,0x24,0x78,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x80,0x09,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x9D,0x9A,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x69,0x51,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0x00,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x00,0x09,0x00,0x00,0xF6,0xC1,0x02,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x00,0x09,0x00,0x00,0x89,0x8C,0x24,0xC0,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xF8,0x08,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x08,0x00,0x00,0x89,0x8C,0x24,0xB8,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xF0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x08,0x00,0x00,0x89,0x8C,0x24,0xB0,0x0B,0x00,0x00,0xC7,0x84,0x24,0xE8,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x08,0x00,0x00,0x89,0x8C,0x24,0xA8,0x0B,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x0B,0x00,0x00,0x89,0x8C,0x24,0xE0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x0B,0x00,0x00,0x89,0x8C,0x24,0xD8,0x08,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x0B,0x00,0x00,0x89,0x8C,0x24,0xD0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x0B,0x00,0x00,0x89,0x8C,0x24,0xC8,0x08,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x08,0x00,0x00,0x89,0x8C,0x24,0xC0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x08,0x00,0x00,0x8B,0x94,0x24,0xD8,0x08,0x00,0x00,0x89,0x94,0x24,0xB8,0x08,0x00,0x00,0x8B,0x94,0x24,0xB8,0x08,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0xD0,0x08,0x00,0x00,0x89,0x94,0x24,0xB0,0x08,0x00,0x00,0x8B,0x94,0x24,0xB0,0x08,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0xC8,0x08,0x00,0x00,0x89,0x94,0x24,0xA8,0x08,0x00,0x00,0x8B,0x94,0x24,0xA8,0x08,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x98,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x78,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x70,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x78,0x08,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x80,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x08,0x00,0x00,0x48,0x8D,0x8C,0x24,0x98,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x24,0x94,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x08,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xF8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x48,0xB8,0xF8,0x0F,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x00,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x00,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xF8,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF8,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x00,0x08,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x08,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x08,0x00,0x00,0x83,0xBC,0x24,0x18,0x08,0x00,0x00,0x00,0x0F,0x86,0xE4,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0x10,0x08,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x38,0x08,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x5D,0x16,0x00,0x00,0x4C,0x8B,0x84,0x24,0x30,0x08,0x00,0x00,0x48,0x8D,0x84,0x24,0xE8,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xE0,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE0,0x07,0x00,0x00,0x4C,0x8D,0x84,0x24,0xE8,0x07,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xF0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x07,0x00,0x00,0x8B,0x8C,0x24,0x48,0x08,0x00,0x00,0x3B,0x8C,0x24,0xD8,0x07,0x00,0x00,0x0F,0x87,0xEB,0x15,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x07,0x00,0x00,0x48,0x8B,0x94,0x24,0x40,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x48,0x08,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x31,0x97,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xFD,0x4D,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0xC8,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0xC8,0x07,0x00,0x00,0xF6,0xC1,0x04,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0xC8,0x07,0x00,0x00,0x89,0x8C,0x24,0x90,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xC0,0x07,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x07,0x00,0x00,0x89,0x8C,0x24,0x88,0x0B,0x00,0x00,0xC7,0x84,0x24,0xB8,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x07,0x00,0x00,0x89,0x8C,0x24,0x80,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xB0,0x07,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x07,0x00,0x00,0x89,0x8C,0x24,0x78,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x90,0x0B,0x00,0x00,0x89,0x8C,0x24,0xA8,0x07,0x00,0x00,0x8B,0x8C,0x24,0x88,0x0B,0x00,0x00,0x89,0x8C,0x24,0xA0,0x07,0x00,0x00,0x8B,0x8C,0x24,0x80,0x0B,0x00,0x00,0x89,0x8C,0x24,0x98,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0B,0x00,0x00,0x89,0x8C,0x24,0x90,0x07,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x07,0x00,0x00,0x89,0x8C,0x24,0x88,0x07,0x00,0x00,0x8B,0x8C,0x24,0x88,0x07,0x00,0x00,0x8B,0x94,0x24,0xA0,0x07,0x00,0x00,0x89,0x94,0x24,0x80,0x07,0x00,0x00,0x8B,0x94,0x24,0x80,0x07,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x98,0x07,0x00,0x00,0x89,0x94,0x24,0x78,0x07,0x00,0x00,0x8B,0x94,0x24,0x78,0x07,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x90,0x07,0x00,0x00,0x89,0x94,0x24,0x70,0x07,0x00,0x00,0x8B,0x94,0x24,0x70,0x07,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x60,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x40,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x38,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x07,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x48,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x07,0x00,0x00,0x48,0x8D,0x8C,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0xB8,0x90,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x06,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x00,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x48,0xB8,0x00,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xC8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xC8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xC0,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xC8,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xD0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x06,0x00,0x00,0x83,0xBC,0x24,0xE0,0x06,0x00,0x00,0x00,0x0F,0x86,0x78,0x13,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x00,0x07,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xFD,0x12,0x00,0x00,0x4C,0x8B,0x84,0x24,0xF8,0x06,0x00,0x00,0x48,0x8D,0x84,0x24,0xB0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xA8,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0xB0,0x06,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xB8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x06,0x00,0x00,0x8B,0x8C,0x24,0x10,0x07,0x00,0x00,0x3B,0x8C,0x24,0xA0,0x06,0x00,0x00,0x0F,0x87,0x8B,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x06,0x00,0x00,0x48,0x8B,0x94,0x24,0x08,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0x10,0x07,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xC5,0x93,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x91,0x4A,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0x90,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x06,0x00,0x00,0xF6,0xC1,0x08,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x90,0x06,0x00,0x00,0x89,0x8C,0x24,0x60,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x88,0x06,0x00,0x00,0x8B,0x8C,0x24,0x88,0x06,0x00,0x00,0x89,0x8C,0x24,0x58,0x0B,0x00,0x00,0xC7,0x84,0x24,0x80,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x80,0x06,0x00,0x00,0x89,0x8C,0x24,0x50,0x0B,0x00,0x00,0xC7,0x84,0x24,0x78,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x06,0x00,0x00,0x89,0x8C,0x24,0x48,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x60,0x0B,0x00,0x00,0x89,0x8C,0x24,0x70,0x06,0x00,0x00,0x8B,0x8C,0x24,0x58,0x0B,0x00,0x00,0x89,0x8C,0x24,0x68,0x06,0x00,0x00,0x8B,0x8C,0x24,0x50,0x0B,0x00,0x00,0x89,0x8C,0x24,0x60,0x06,0x00,0x00,0x8B,0x8C,0x24,0x48,0x0B,0x00,0x00,0x89,0x8C,0x24,0x58,0x06,0x00,0x00,0x8B,0x8C,0x24,0x70,0x06,0x00,0x00,0x89,0x8C,0x24,0x50,0x06,0x00,0x00,0x8B,0x8C,0x24,0x50,0x06,0x00,0x00,0x8B,0x94,0x24,0x68,0x06,0x00,0x00,0x89,0x94,0x24,0x48,0x06,0x00,0x00,0x8B,0x94,0x24,0x48,0x06,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x60,0x06,0x00,0x00,0x89,0x94,0x24,0x40,0x06,0x00,0x00,0x8B,0x94,0x24,0x40,0x06,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x58,0x06,0x00,0x00,0x89,0x94,0x24,0x38,0x06,0x00,0x00,0x8B,0x94,0x24,0x38,0x06,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x28,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x08,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x00,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x08,0x06,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x10,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0x28,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x4A,0x8D,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x05,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x08,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x48,0xB8,0x08,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x90,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x90,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x88,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x88,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x98,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x05,0x00,0x00,0x83,0xBC,0x24,0xA8,0x05,0x00,0x00,0x00,0x0F,0x86,0x0A,0x10,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xC8,0x05,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x9B,0x0F,0x00,0x00,0x4C,0x8B,0x84,0x24,0xC0,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x78,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x70,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x05,0x00,0x00,0x4C,0x8D,0x84,0x24,0x78,0x05,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x80,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x05,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x05,0x00,0x00,0x3B,0x8C,0x24,0x68,0x05,0x00,0x00,0x0F,0x87,0x29,0x0F,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x05,0x00,0x00,0x48,0x8B,0x94,0x24,0xD0,0x05,0x00,0x00,0x44,0x8B,0x84,0x24,0xD8,0x05,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x57,0x90,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x23,0x47,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0x58,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x05,0x00,0x00,0xF6,0xC1,0x10,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x58,0x05,0x00,0x00,0x89,0x8C,0x24,0x30,0x0B,0x00,0x00,0xC7,0x84,0x24,0x50,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x50,0x05,0x00,0x00,0x89,0x8C,0x24,0x28,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x48,0x05,0x00,0x00,0x8B,0x8C,0x24,0x48,0x05,0x00,0x00,0x89,0x8C,0x24,0x20,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x40,0x05,0x00,0x00,0x8B,0x8C,0x24,0x40,0x05,0x00,0x00,0x89,0x8C,0x24,0x18,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x30,0x0B,0x00,0x00,0x89,0x8C,0x24,0x38,0x05,0x00,0x00,0x8B,0x8C,0x24,0x28,0x0B,0x00,0x00,0x89,0x8C,0x24,0x30,0x05,0x00,0x00,0x8B,0x8C,0x24,0x20,0x0B,0x00,0x00,0x89,0x8C,0x24,0x28,0x05,0x00,0x00,0x8B,0x8C,0x24,0x18,0x0B,0x00,0x00,0x89,0x8C,0x24,0x20,0x05,0x00,0x00,0x8B,0x8C,0x24,0x38,0x05,0x00,0x00,0x89,0x8C,0x24,0x18,0x05,0x00,0x00,0x8B,0x8C,0x24,0x18,0x05,0x00,0x00,0x8B,0x94,0x24,0x30,0x05,0x00,0x00,0x89,0x94,0x24,0x10,0x05,0x00,0x00,0x8B,0x94,0x24,0x10,0x05,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x28,0x05,0x00,0x00,0x89,0x94,0x24,0x08,0x05,0x00,0x00,0x8B,0x94,0x24,0x08,0x05,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x20,0x05,0x00,0x00,0x89,0x94,0x24,0x00,0x05,0x00,0x00,0x8B,0x94,0x24,0x00,0x05,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xF0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xC8,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x04,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xD8,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0xDE,0x89,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x04,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x10,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0x48,0xB8,0x10,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x58,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x58,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x50,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x04,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x60,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x04,0x00,0x00,0x83,0xBC,0x24,0x70,0x04,0x00,0x00,0x00,0x0F,0x86,0x9E,0x0C,0x00,0x00,0x48,0x8B,0x8C,0x24,0x68,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x90,0x04,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x3B,0x0C,0x00,0x00,0x4C,0x8B,0x84,0x24,0x88,0x04,0x00,0x00,0x48,0x8D,0x84,0x24,0x40,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x38,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x04,0x00,0x00,0x4C,0x8D,0x84,0x24,0x40,0x04,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x48,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x04,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x04,0x00,0x00,0x3B,0x8C,0x24,0x30,0x04,0x00,0x00,0x0F,0x87,0xC9,0x0B,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x04,0x00,0x00,0x44,0x8B,0x84,0x24,0xA0,0x04,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xEB,0x8C,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xB7,0x43,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0x20,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x04,0x00,0x00,0xF6,0xC1,0x20,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x20,0x04,0x00,0x00,0x89,0x8C,0x24,0x00,0x0B,0x00,0x00,0xC7,0x84,0x24,0x18,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x18,0x04,0x00,0x00,0x89,0x8C,0x24,0xF8,0x0A,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x10,0x04,0x00,0x00,0x8B,0x8C,0x24,0x10,0x04,0x00,0x00,0x89,0x8C,0x24,0xF0,0x0A,0x00,0x00,0xC7,0x84,0x24,0x08,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x08,0x04,0x00,0x00,0x89,0x8C,0x24,0xE8,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x00,0x0B,0x00,0x00,0x89,0x8C,0x24,0x00,0x04,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x0A,0x00,0x00,0x89,0x8C,0x24,0xF8,0x03,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x0A,0x00,0x00,0x89,0x8C,0x24,0xF0,0x03,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x0A,0x00,0x00,0x89,0x8C,0x24,0xE8,0x03,0x00,0x00,0x8B,0x8C,0x24,0x00,0x04,0x00,0x00,0x89,0x8C,0x24,0xE0,0x03,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x03,0x00,0x00,0x8B,0x94,0x24,0xF8,0x03,0x00,0x00,0x89,0x94,0x24,0xD8,0x03,0x00,0x00,0x8B,0x94,0x24,0xD8,0x03,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0xF0,0x03,0x00,0x00,0x89,0x94,0x24,0xD0,0x03,0x00,0x00,0x8B,0x94,0x24,0xD0,0x03,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0xE8,0x03,0x00,0x00,0x89,0x94,0x24,0xC8,0x03,0x00,0x00,0x8B,0x94,0x24,0xC8,0x03,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xB8,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x98,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x90,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x98,0x03,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xA0,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB8,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x70,0x86,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x03,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x18,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0x48,0xB8,0x18,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0x20,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x20,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x18,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x03,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x28,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x03,0x00,0x00,0x83,0xBC,0x24,0x38,0x03,0x00,0x00,0x00,0x0F,0x86,0x30,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x30,0x03,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x58,0x03,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xD9,0x08,0x00,0x00,0x4C,0x8B,0x84,0x24,0x50,0x03,0x00,0x00,0x48,0x8D,0x84,0x24,0x08,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x00,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x03,0x00,0x00,0x4C,0x8D,0x84,0x24,0x08,0x03,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x10,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x02,0x00,0x00,0x8B,0x8C,0x24,0x68,0x03,0x00,0x00,0x3B,0x8C,0x24,0xF8,0x02,0x00,0x00,0x0F,0x87,0x67,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x60,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0x68,0x03,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x7D,0x89,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x49,0x40,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0xE8,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0xE8,0x02,0x00,0x00,0xF6,0xC1,0x40,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0xE8,0x02,0x00,0x00,0x89,0x8C,0x24,0xD0,0x0A,0x00,0x00,0xC7,0x84,0x24,0xE0,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x02,0x00,0x00,0x89,0x8C,0x24,0xC8,0x0A,0x00,0x00,0xC7,0x84,0x24,0xD8,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x02,0x00,0x00,0x89,0x8C,0x24,0xC0,0x0A,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xD0,0x02,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x02,0x00,0x00,0x89,0x8C,0x24,0xB8,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x0A,0x00,0x00,0x89,0x8C,0x24,0xC8,0x02,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x0A,0x00,0x00,0x89,0x8C,0x24,0xC0,0x02,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x0A,0x00,0x00,0x89,0x8C,0x24,0xB8,0x02,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x0A,0x00,0x00,0x89,0x8C,0x24,0xB0,0x02,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x02,0x00,0x00,0x89,0x8C,0x24,0xA8,0x02,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x02,0x00,0x00,0x8B,0x94,0x24,0xC0,0x02,0x00,0x00,0x89,0x94,0x24,0xA0,0x02,0x00,0x00,0x8B,0x94,0x24,0xA0,0x02,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0xB8,0x02,0x00,0x00,0x89,0x94,0x24,0x98,0x02,0x00,0x00,0x8B,0x94,0x24,0x98,0x02,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0xB0,0x02,0x00,0x00,0x89,0x94,0x24,0x90,0x02,0x00,0x00,0x8B,0x94,0x24,0x90,0x02,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x80,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x60,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x58,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x58,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x02,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x68,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x02,0x00,0x00,0x48,0x8D,0x8C,0x24,0x80,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x02,0x83,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x02,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x20,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0x48,0xB8,0x20,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xE8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xE8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xE0,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xE8,0x01,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xF0,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x01,0x00,0x00,0x83,0xBC,0x24,0x00,0x02,0x00,0x00,0x00,0x0F,0x86,0xC2,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF8,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x20,0x02,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x77,0x05,0x00,0x00,0x4C,0x8B,0x84,0x24,0x18,0x02,0x00,0x00,0x48,0x8D,0x84,0x24,0xD0,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xC8,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x01,0x00,0x00,0x4C,0x8D,0x84,0x24,0xD0,0x01,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x01,0x00,0x00,0x8B,0x8C,0x24,0x30,0x02,0x00,0x00,0x3B,0x8C,0x24,0xC0,0x01,0x00,0x00,0x0F,0x87,0x05,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB8,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x02,0x00,0x00,0x44,0x8B,0x84,0x24,0x30,0x02,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x0F,0x86,0x9C,0x5D,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xDB,0x3C,0x41,0x5F,0x8B,0xCB,0x33,0xD2,0x89,0x94,0x24,0xB0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xB0,0x01,0x00,0x00,0xF6,0xC1,0x80,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0xB0,0x01,0x00,0x00,0x89,0x8C,0x24,0xA0,0x0A,0x00,0x00,0xC7,0x84,0x24,0xA8,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x01,0x00,0x00,0x89,0x8C,0x24,0x98,0x0A,0x00,0x00,0xC7,0x84,0x24,0xA0,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x01,0x00,0x00,0x89,0x8C,0x24,0x90,0x0A,0x00,0x00,0xC7,0x84,0x24,0x98,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x98,0x01,0x00,0x00,0x89,0x8C,0x24,0x88,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x0A,0x00,0x00,0x89,0x8C,0x24,0x90,0x01,0x00,0x00,0x8B,0x8C,0x24,0x98,0x0A,0x00,0x00,0x89,0x8C,0x24,0x88,0x01,0x00,0x00,0x8B,0x8C,0x24,0x90,0x0A,0x00,0x00,0x89,0x8C,0x24,0x80,0x01,0x00,0x00,0x8B,0x8C,0x24,0x88,0x0A,0x00,0x00,0x89,0x8C,0x24,0x78,0x01,0x00,0x00,0x8B,0x8C,0x24,0x90,0x01,0x00,0x00,0x89,0x8C,0x24,0x70,0x01,0x00,0x00,0x8B,0x8C,0x24,0x70,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x01,0x00,0x00,0x89,0x94,0x24,0x68,0x01,0x00,0x00,0x8B,0x94,0x24,0x68,0x01,0x00,0x00,0xD1,0xE2,0x0B,0xCA,0x8B,0x94,0x24,0x80,0x01,0x00,0x00,0x89,0x94,0x24,0x60,0x01,0x00,0x00,0x8B,0x94,0x24,0x60,0x01,0x00,0x00,0xC1,0xE2,0x02,0x0B,0xCA,0x8B,0x94,0x24,0x78,0x01,0x00,0x00,0x89,0x94,0x24,0x58,0x01,0x00,0x00,0x8B,0x94,0x24,0x58,0x01,0x00,0x00,0xC1,0xE2,0x03,0x0B,0xCA,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x28,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x20,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x20,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x28,0x01,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x30,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x92,0x7F,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0x48,0xB9,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x28,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0x48,0xB8,0x28,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x10,0x48,0x8D,0x8C,0x24,0xB0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xA8,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xB0,0x00,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x00,0x00,0x00,0x83,0xBC,0x24,0xC8,0x00,0x00,0x00,0x00,0x0F,0x86,0x52,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x00,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0x1F,0x01,0x6B,0xF9,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xE8,0x00,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x13,0x02,0x00,0x00,0x4C,0x8B,0x84,0x24,0xE0,0x00,0x00,0x00,0x48,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x90,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x00,0x00,0x00,0x4C,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x00,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x00,0x00,0x00,0x3B,0x8C,0x24,0x88,0x00,0x00,0x00,0x0F,0x87,0xA1,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x80,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xF0,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xF8,0x00,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x9F,0x82,0x9C,0x5D,0x48,0x8D,0x8C,0x24,0x18,0x0C,0x00,0x00,0x48,0x8D,0x94,0x24,0x08,0x0C,0x00,0x00,0x41,0xB8,0x03,0x00,0x00,0x00,0xE8,0xA4,0x7C,0xFF,0xFF,0x48,0xB9,0x10,0xEA,0x12,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x50,0x39,0x41,0x5F,0x88,0x58,0x10,0x48,0x8D,0x4C,0x24,0x70,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x4C,0x24,0x50,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x4C,0x24,0x50,0x48,0x8B,0xD0,0xE8,0x5E,0xE8,0x92,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x50,0xC5,0xFA,0x7F,0x44,0x24,0x60,0x48,0x8D,0x4C,0x24,0x70,0xC5,0xFA,0x6F,0x44,0x24,0x60,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x0F,0xE2,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x70,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x0B,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0x70,0x0A,0x00,0x00,0x48,0x8D,0x8C,0x24,0x08,0x0C,0x00,0x00,0x48,0x8D,0x94,0x24,0xF8,0x0B,0x00,0x00,0xE8,0xD1,0xE1,0xFF,0xFF,0x8B,0xD8,0x48,0x8D,0x8C,0x24,0x70,0x0A,0x00,0x00,0xBA,0xB1,0x00,0x00,0x00,0xE8,0xAD,0xA2,0xCD,0x5D,0x4C,0x8B,0x84,0x24,0x70,0x0A,0x00,0x00,0x4C,0x89,0x44,0x24,0x20,0x49,0xB8,0x18,0x9B,0x00,0x6B,0xF9,0x01,0x00,0x00,0x4D,0x8B,0x00,0x49,0xB9,0x18,0x9B,0x00,0x6B,0xF9,0x01,0x00,0x00,0x4D,0x8B,0x09,0x8B,0xCB,0x33,0xD2,0xE8,0x25,0x02,0x91,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0C,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x4C,0x24,0x30,0x48,0x8B,0xD6,0xE8,0x49,0xBE,0xFF,0xFF,0xFF,0xC7,0x81,0xFF,0x00,0x01,0x00,0x00,0x0F,0x8C,0xDD,0xE2,0xFF,0xFF,0x48,0x81,0xC4,0x30,0x0C,0x00,0x00,0x5B,0x5E,0x5F,0xC3,0xE8,0x93,0xC7,0x91,0xFF,0xCC,0xE8,0x95,0xC7,0x91,0xFF,0xCC,0xE8,0x87,0xC7,0x91,0xFF,0xCC,0xE8,0x89,0xC7,0x91,0xFF,0xCC,0xE8,0x7B,0xC7,0x91,0xFF,0xCC,0xE8,0x7D,0xC7,0x91,0xFF,0xCC,0xE8,0x6F,0xC7,0x91,0xFF,0xCC,0xE8,0x71,0xC7,0x91,0xFF,0xCC,0xE8,0x63,0xC7,0x91,0xFF,0xCC,0xE8,0x65,0xC7,0x91,0xFF,0xCC,0xE8,0x57,0xC7,0x91,0xFF,0xCC,0xE8,0x59,0xC7,0x91,0xFF,0xCC,0xE8,0x4B,0xC7,0x91,0xFF,0xCC,0xE8,0x4D,0xC7,0x91,0xFF,0xCC,0xE8,0x3F,0xC7,0x91,0xFF,0xCC,0xE8,0x41,0xC7,0x91,0xFF,0xCC,0xE8,0x13,0xE1,0x53,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit zero()
; location: [7FFDDB850FE0h, 7FFDDB850FE7h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> zeroBytes => new byte[8]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit identity(bit a)
; location: [7FFDDB851000h, 7FFDDB851007h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> identityBytes => new byte[8]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit one()
; location: [7FFDDB851020h, 7FFDDB85102Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> oneBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit false(bit a, bit b)
; location: [7FFDDB851040h, 7FFDDB85104Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> falseBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit false(bit a, bit b, bit c)
; location: [7FFDDB851060h, 7FFDDB851074h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> falseBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit false(bit a)
; location: [7FFDDB851090h, 7FFDDB85109Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> falseBytes => new byte[12]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit true(bit a)
; location: [7FFDDB8510B0h, 7FFDDB8510BEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> trueBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit true(bit a, bit b)
; location: [7FFDDB8510D0h, 7FFDDB8510E2h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> trueBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit true(bit a, bit b, bit c)
; location: [7FFDDB851100h, 7FFDDB851117h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0017h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> trueBytes => new byte[24]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit not(bit a)
; location: [7FFDDB851130h, 7FFDDB85113Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit and(bit a, bit b)
; location: [7FFDDB851150h, 7FFDDB851159h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit nand(bit a, bit b)
; location: [7FFDDB851170h, 7FFDDB85117Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> nandBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit or(bit a, bit b)
; location: [7FFDDB851190h, 7FFDDB851199h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> orBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit nor(bit a, bit b)
; location: [7FFDDB8511B0h, 7FFDDB8511BEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> norBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit xor(bit a, bit b)
; location: [7FFDDB8511D0h, 7FFDDB8511D9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit xnor(bit a, bit b)
; location: [7FFDDB8511F0h, 7FFDDB8511FEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xnorBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit imply(bit a, bit b)
; location: [7FFDDB851210h, 7FFDDB85121Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or eax,ecx                    ; OR(Or_r32_rm32) [EAX,ECX]                            encoding(2 bytes) = 0b c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> implyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit notimply(bit a, bit b)
; location: [7FFDDB851230h, 7FFDDB85123Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notimplyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit left(bit a, bit b)
; location: [7FFDDB851250h, 7FFDDB85125Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> leftBytes => new byte[12]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit right(bit a, bit b)
; location: [7FFDDB851270h, 7FFDDB85127Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rightBytes => new byte[12]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit lnot(bit a, bit b)
; location: [7FFDDB851290h, 7FFDDB8512A0h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lnotBytes => new byte[17]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit rnot(bit a, bit b)
; location: [7FFDDB8512C0h, 7FFDDB8512D0h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rnotBytes => new byte[17]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit cimply(bit a, bit b)
; location: [7FFDDB8512F0h, 7FFDDB8512FEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cimplyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit cnotimply(bit a, bit b)
; location: [7FFDDB851310h, 7FFDDB85131Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cnotimplyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit same(bit a, bit b)
; location: [7FFDDB851330h, 7FFDDB851354h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
000ah lea rax,[rsp]                 ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 04 24
000eh cmp ecx,edx                   ; CMP(Cmp_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 3b ca
0010h je short 0016h                ; JE(Je_rel8_64) [16h:jmp64]                           encoding(2 bytes) = 74 04
0012h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0014h jmp short 001bh               ; JMP(Jmp_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = eb 05
0016h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
001bh mov [rax],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(2 bytes) = 89 10
001dh mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0020h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> sameBytes => new byte[37]{0x50,0x0F,0x1F,0x40,0x00,0x33,0xC0,0x89,0x04,0x24,0x48,0x8D,0x04,0x24,0x3B,0xCA,0x74,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x89,0x10,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit xor1(bit a)
; location: [7FFDDB851370h, 7FFDDB85137Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,1                     ; XOR(Xor_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f1 01
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xor1Bytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF1,0x01,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit select(bit a, bit b, bit c)
; location: [7FFDDB851390h, 7FFDDB8513A3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000eh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> selectBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC1,0xF7,0xD0,0x41,0x23,0xC0,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f00(bit a, bit b, bit c)
; location: [7FFDDB8513C0h, 7FFDDB8513D4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f00Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f01(bit a, bit b, bit c)
; location: [7FFDDB8513F0h, 7FFDDB851401h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f01Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f02(bit a, bit b, bit c)
; location: [7FFDDB851420h, 7FFDDB851431h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f02Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f03(bit a, bit b, bit c)
; location: [7FFDDB851450h, 7FFDDB851463h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f03Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f04(bit a, bit b, bit c)
; location: [7FFDDB851480h, 7FFDDB851491h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f04Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f05(bit a, bit b, bit c)
; location: [7FFDDB8514B0h, 7FFDDB8514C3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000ch mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f05Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f06(bit a, bit b, bit c)
; location: [7FFDDB8514E0h, 7FFDDB8514F1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f06Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f07(bit a, bit b, bit c)
; location: [7FFDDB851510h, 7FFDDB851521h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f07Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f08(bit a, bit b, bit c)
; location: [7FFDDB851540h, 7FFDDB851551h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f08Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f09(bit a, bit b, bit c)
; location: [7FFDDB851570h, 7FFDDB851581h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f09Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0a(bit a, bit b, bit c)
; location: [7FFDDB8515A0h, 7FFDDB8515B3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0aBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0b(bit a, bit b, bit c)
; location: [7FFDDB8515D0h, 7FFDDB8515E4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
000fh or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0bBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF2,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0c(bit a, bit b, bit c)
; location: [7FFDDB851600h, 7FFDDB851613h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0cBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0d(bit a, bit b, bit c)
; location: [7FFDDB851630h, 7FFDDB851645h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0010h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0013h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0dBytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x83,0xF0,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0e(bit a, bit b, bit c)
; location: [7FFDDB851660h, 7FFDDB851671h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0eBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0f(bit a, bit b, bit c)
; location: [7FFDDB851690h, 7FFDDB8516A5h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000eh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0fBytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f10(bit a, bit b, bit c)
; location: [7FFDDB8516C0h, 7FFDDB8516D1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f10Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f11(bit a, bit b, bit c)
; location: [7FFDDB8516F0h, 7FFDDB851703h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f11Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f12(bit a, bit b, bit c)
; location: [7FFDDB851720h, 7FFDDB851731h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f12Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f13(bit a, bit b, bit c)
; location: [7FFDDB851750h, 7FFDDB851761h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f13Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f14(bit a, bit b, bit c)
; location: [7FFDDB851780h, 7FFDDB851791h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f14Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f15(bit a, bit b, bit c)
; location: [7FFDDB8517B0h, 7FFDDB8517C1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f15Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f16(bit a, bit b, bit c)
; location: [7FFDDB8517E0h, 7FFDDB8517FDh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0012h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0014h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f16Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x0B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f17(bit a, bit b, bit c)
; location: [7FFDDB851810h, 7FFDDB85182Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000ah and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000dh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0013h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0015h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0018h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f17Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x0B,0xC0,0x41,0x23,0xD0,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f18(bit a, bit b, bit c)
; location: [7FFDDB851840h, 7FFDDB85184Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f18Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f19(bit a, bit b, bit c)
; location: [7FFDDB851860h, 7FFDDB851871h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
000ah and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000fh xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f19Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x33,0xC0,0x41,0x23,0xD0,0x23,0xD1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1a(bit a, bit b, bit c)
; location: [7FFDDB851890h, 7FFDDB8518A3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1aBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x41,0x33,0xC8,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1b(bit a, bit b, bit c)
; location: [7FFDDB8518C0h, 7FFDDB8518E0h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0011h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0014h mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
0017h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0019h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001bh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0020h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1bBytes => new byte[33]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1c(bit a, bit b, bit c)
; location: [7FFDDB851900h, 7FFDDB851914h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,ecx                   ; AND(And_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 23 c1
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1cBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC1,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1d(bit a, bit b, bit c)
; location: [7FFDDB851930h, 7FFDDB85194Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0014h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0016h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0018h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001ah or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1dBytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1e(bit a, bit b, bit c)
; location: [7FFDDB851960h, 7FFDDB85196Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1eBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x8B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1f(bit a, bit b, bit c)
; location: [7FFDDB851980h, 7FFDDB851991h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1fBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f20(bit a, bit b, bit c)
; location: [7FFDDB8519B0h, 7FFDDB8519C1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f20Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f21(bit a, bit b, bit c)
; location: [7FFDDB8519E0h, 7FFDDB8519F1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f21Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f22(bit a, bit b, bit c)
; location: [7FFDDB851A10h, 7FFDDB851A23h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f22Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f23(bit a, bit b, bit c)
; location: [7FFDDB851A40h, 7FFDDB851A5Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,1                     ; XOR(Xor_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f1 01
000fh mov edx,ecx                   ; MOV(Mov_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 8b d1
0011h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0013h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0016h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0019h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f23Bytes => new byte[28]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF1,0x01,0x8B,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f24(bit a, bit b, bit c)
; location: [7FFDDB851A70h, 7FFDDB851A7Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,edx                   ; XOR(Xor_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 33 ca
0007h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f24Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xCA,0x41,0x33,0xD0,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f25(bit a, bit b, bit c)
; location: [7FFDDB851A90h, 7FFDDB851AAEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0012h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0015h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0017h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
001ah xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
001ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f25Bytes => new byte[31]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x83,0xF0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f26(bit a, bit b, bit c)
; location: [7FFDDB851AC0h, 7FFDDB851AD3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,edx                   ; AND(And_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 23 ca
0007h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f26Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xCA,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f27(bit a, bit b, bit c)
; location: [7FFDDB851AF0h, 7FFDDB851B14h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0013h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0015h mov ecx,edx                   ; MOV(Mov_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 8b ca
0017h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
001ah and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
001dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001fh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0021h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f27Bytes => new byte[37]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x8B,0xCA,0x83,0xE1,0x01,0x41,0x23,0xC0,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f28(bit a, bit b, bit c)
; location: [7FFDDB851B30h, 7FFDDB851B3Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f28Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x8B,0xC0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f29(bit a, bit b, bit c)
; location: [7FFDDB851B50h, 7FFDDB851B6Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
0009h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000bh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000dh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
0016h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0018h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001ah or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f29Bytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x33,0xC1,0x0B,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2a(bit a, bit b, bit c)
; location: [7FFDDB851B80h, 7FFDDB851B91h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2aBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2b(bit a, bit b, bit c)
; location: [7FFDDB851BB0h, 7FFDDB851BD4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0010h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0012h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0015h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0018h mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
001bh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
001dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001fh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0021h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2bBytes => new byte[37]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x23,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2c(bit a, bit b, bit c)
; location: [7FFDDB851BF0h, 7FFDDB851BFFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or r8d,edx                    ; OR(Or_r32_rm32) [R8D,EDX]                            encoding(3 bytes) = 44 0b c2
0008h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000ah mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000dh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2cBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x0B,0xC2,0x33,0xD1,0x41,0x8B,0xC0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2d(bit a, bit b, bit c)
; location: [7FFDDB851C10h, 7FFDDB851C21h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
000fh xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2dBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2e(bit a, bit b, bit c)
; location: [7FFDDB851C40h, 7FFDDB851C4Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or r8d,edx                    ; OR(Or_r32_rm32) [R8D,EDX]                            encoding(3 bytes) = 44 0b c2
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000dh xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2eBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x0B,0xC2,0x0B,0xD1,0x41,0x8B,0xC0,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2f(bit a, bit b, bit c)
; location: [7FFDDB851C60h, 7FFDDB851C76h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0011h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0014h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0016h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2fBytes => new byte[23]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xD0,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f30(bit a, bit b, bit c)
; location: [7FFDDB851C90h, 7FFDDB851CA3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f30Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f31(bit a, bit b, bit c)
; location: [7FFDDB851CC0h, 7FFDDB851CDCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0010h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0013h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0015h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0018h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
001ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f31Bytes => new byte[29]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x83,0xF0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f32(bit a, bit b, bit c)
; location: [7FFDDB851CF0h, 7FFDDB851D01h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f32Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f33(bit a, bit b, bit c)
; location: [7FFDDB851D20h, 7FFDDB851D35h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000eh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f33Bytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x44,0x89,0x44,0x24,0x18,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f34(bit a, bit b, bit c)
; location: [7FFDDB851D50h, 7FFDDB851D64h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,edx                   ; AND(And_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 23 c2
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f34Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC2,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f35(bit a, bit b, bit c)
; location: [7FFDDB851D80h, 7FFDDB851D9Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
000fh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0011h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0014h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0016h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0018h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001ah or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f35Bytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f36(bit a, bit b, bit c)
; location: [7FFDDB851DB0h, 7FFDDB851DBCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f36Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x8B,0xC2,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f37(bit a, bit b, bit c)
; location: [7FFDDB851DD0h, 7FFDDB851DE1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f37Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f38(bit a, bit b, bit c)
; location: [7FFDDB851E00h, 7FFDDB851E0Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or r8d,ecx                    ; OR(Or_r32_rm32) [R8D,ECX]                            encoding(3 bytes) = 44 0b c1
0008h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000ah mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000dh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f38Bytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x0B,0xC1,0x33,0xD1,0x41,0x8B,0xC0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f39(bit a, bit b, bit c)
; location: [7FFDDB851E20h, 7FFDDB851E35h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h or eax,ecx                    ; OR(Or_r32_rm32) [EAX,ECX]                            encoding(2 bytes) = 0b c1
0013h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f39Bytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x83,0xF0,0x01,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3a(bit a, bit b, bit c)
; location: [7FFDDB851E50h, 7FFDDB851E6Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh mov edx,ecx                   ; MOV(Mov_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 8b d1
0010h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0012h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0015h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0017h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3aBytes => new byte[27]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0x8B,0xD1,0xF7,0xD2,0x41,0x23,0xD0,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3b(bit a, bit b, bit c)
; location: [7FFDDB851E80h, 7FFDDB851E99h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000fh xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0012h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0014h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0017h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3bBytes => new byte[26]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0x83,0xF2,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3c(bit a, bit b, bit c)
; location: [7FFDDB851EB0h, 7FFDDB851EBEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3cBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC2,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3d(bit a, bit b, bit c)
; location: [7FFDDB851ED0h, 7FFDDB851EE3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3dBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3e(bit a, bit b, bit c)
; location: [7FFDDB851F00h, 7FFDDB851F13h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000fh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0011h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3eBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0x33,0xD1,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3f(bit a, bit b, bit c)
; location: [7FFDDB851F30h, 7FFDDB851F43h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3fBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f40(bit a, bit b, bit c)
; location: [7FFDDB851F60h, 7FFDDB851F71h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f40Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f41(bit a, bit b, bit c)
; location: [7FFDDB851F90h, 7FFDDB851FA1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f41Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f42(bit a, bit b, bit c)
; location: [7FFDDB851FC0h, 7FFDDB851FCFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000bh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000dh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f42Bytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x41,0x33,0xD0,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f43(bit a, bit b, bit c)
; location: [7FFDDB851FE0h, 7FFDDB851FFCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,ecx                   ; AND(And_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 23 c1
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0013h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0015h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0018h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
001ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f43Bytes => new byte[29]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC1,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF2,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f44(bit a, bit b, bit c)
; location: [7FFDDB852010h, 7FFDDB852023h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f44Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f45(bit a, bit b, bit c)
; location: [7FFDDB852040h, 7FFDDB852059h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor ecx,1                     ; XOR(Xor_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f1 01
0010h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0012h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0015h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0017h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f45Bytes => new byte[26]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF1,0x01,0xF7,0xD1,0x83,0xE1,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f46(bit a, bit b, bit c)
; location: [7FFDDB852070h, 7FFDDB852084h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f46Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f47(bit a, bit b, bit c)
; location: [7FFDDB8520A0h, 7FFDDB8520BDh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
000fh and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f47Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f48(bit a, bit b, bit c)
; location: [7FFDDB8520D0h, 7FFDDB8520DCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f48Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f49(bit a, bit b, bit c)
; location: [7FFDDB8520F0h, 7FFDDB85210Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
000ah or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000dh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
000fh and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f49Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x41,0x33,0xC0,0x41,0x0B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4a(bit a, bit b, bit c)
; location: [7FFDDB852120h, 7FFDDB85212Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000bh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000dh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4aBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4b(bit a, bit b, bit c)
; location: [7FFDDB852140h, 7FFDDB852151h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000fh xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4bBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC0,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4c(bit a, bit b, bit c)
; location: [7FFDDB852170h, 7FFDDB852181h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4cBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4d(bit a, bit b, bit c)
; location: [7FFDDB8521A0h, 7FFDDB8521C2h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0012h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0014h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0017h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0019h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
001bh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001dh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001fh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0022h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4dBytes => new byte[35]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x41,0x23,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4e(bit a, bit b, bit c)
; location: [7FFDDB8521E0h, 7FFDDB8521FBh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000fh mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
0012h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0014h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0016h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0018h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4eBytes => new byte[28]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4f(bit a, bit b, bit c)
; location: [7FFDDB852210h, 7FFDDB852228h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0014h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0016h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0018h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4fBytes => new byte[25]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xD1,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f50(bit a, bit b, bit c)
; location: [7FFDDB852240h, 7FFDDB852253h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f50Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f51(bit a, bit b, bit c)
; location: [7FFDDB852270h, 7FFDDB852289h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0010h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0012h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0015h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0017h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f51Bytes => new byte[26]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF2,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f52(bit a, bit b, bit c)
; location: [7FFDDB8522A0h, 7FFDDB8522B4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0012h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f52Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f53(bit a, bit b, bit c)
; location: [7FFDDB8522D0h, 7FFDDB8522EDh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000fh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0012h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0014h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f53Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f54(bit a, bit b, bit c)
; location: [7FFDDB852300h, 7FFDDB852311h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f54Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f55(bit a, bit b, bit c)
; location: [7FFDDB852330h, 7FFDDB852345h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f55Bytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f56(bit a, bit b, bit c)
; location: [7FFDDB852360h, 7FFDDB85236Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ah xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f56Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x41,0x8B,0xC0,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f57(bit a, bit b, bit c)
; location: [7FFDDB852380h, 7FFDDB852391h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f57Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x41,0x23,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f58(bit a, bit b, bit c)
; location: [7FFDDB8523B0h, 7FFDDB8523BEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f58Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f59(bit a, bit b, bit c)
; location: [7FFDDB8523D0h, 7FFDDB8523E4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh or eax,ecx                    ; OR(Or_r32_rm32) [EAX,ECX]                            encoding(2 bytes) = 0b c1
0011h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f59Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF2,0x01,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC1,0x41,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5a(bit a, bit b, bit c)
; location: [7FFDDB852400h, 7FFDDB85240Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5aBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5b(bit a, bit b, bit c)
; location: [7FFDDB852420h, 7FFDDB852434h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5bBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5c(bit a, bit b, bit c)
; location: [7FFDDB852450h, 7FFDDB852464h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5cBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5d(bit a, bit b, bit c)
; location: [7FFDDB852480h, 7FFDDB852494h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5dBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5e(bit a, bit b, bit c)
; location: [7FFDDB8524B0h, 7FFDDB8524C4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5eBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5f(bit a, bit b, bit c)
; location: [7FFDDB8524E0h, 7FFDDB8524F4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5fBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit faa(bit a, bit b, bit c)
; location: [7FFDDB852510h, 7FFDDB852520h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> faaBytes => new byte[17]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit fff(bit a, bit b, bit c)
; location: [7FFDDB852540h, 7FFDDB852557h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0017h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> fffBytes => new byte[24]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(bit c0, bit i0, bit i1)
; location: [7FFDDB852570h, 7FFDDB852587h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
000fh je short 0015h                ; JE(Je_rel8_64) [15h:jmp64]                           encoding(2 bytes) = 74 04
0011h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0015h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0017h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[24]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF8,0x01,0x74,0x04,0x41,0x8B,0xC0,0xC3,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(bit c0, bit c1, bit i0, bit i1, bit i2, bit i3)
; location: [7FFDDB8525A0h, 7FFDDB852605h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
000eh je short 001fh                ; JE(Je_rel8_64) [1Fh:jmp64]                           encoding(2 bytes) = 74 0f
0010h mov r10d,edx                  ; MOV(Mov_r32_rm32) [R10D,EDX]                         encoding(3 bytes) = 44 8b d2
0013h not r10d                      ; NOT(Not_rm32) [R10D]                                 encoding(3 bytes) = 41 f7 d2
0016h and r10d,1                    ; AND(And_rm32_imm8) [R10D,1h:imm32]                   encoding(4 bytes) = 41 83 e2 01
001ah and eax,r10d                  ; AND(And_r32_rm32) [EAX,R10D]                         encoding(3 bytes) = 41 23 c2
001dh jmp short 0021h               ; JMP(Jmp_rel8_64) [21h:jmp64]                         encoding(2 bytes) = eb 02
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0024h jne short 002ah               ; JNE(Jne_rel8_64) [2Ah:jmp64]                         encoding(2 bytes) = 75 04
0026h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
002ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
002ch test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
002eh je short 003bh                ; JE(Je_rel8_64) [3Bh:jmp64]                           encoding(2 bytes) = 74 0b
0030h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0032h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0034h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0037h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0039h jmp short 003dh               ; JMP(Jmp_rel8_64) [3Dh:jmp64]                         encoding(2 bytes) = eb 02
003bh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
003dh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0040h jne short 0046h               ; JNE(Jne_rel8_64) [46h:jmp64]                         encoding(2 bytes) = 75 04
0042h mov eax,r9d                   ; MOV(Mov_r32_rm32) [EAX,R9D]                          encoding(3 bytes) = 41 8b c1
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0046h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0048h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
004ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
004dh test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
004fh je short 0055h                ; JE(Je_rel8_64) [55h:jmp64]                           encoding(2 bytes) = 74 04
0051h and edx,eax                   ; AND(And_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 23 d0
0053h jmp short 0057h               ; JMP(Jmp_rel8_64) [57h:jmp64]                         encoding(2 bytes) = eb 02
0055h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0057h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
005ah jne short 0061h               ; JNE(Jne_rel8_64) [61h:jmp64]                         encoding(2 bytes) = 75 05
005ch mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0060h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0061h mov eax,[rsp+30h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 30
0065h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[102]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x85,0xC0,0x74,0x0F,0x44,0x8B,0xD2,0x41,0xF7,0xD2,0x41,0x83,0xE2,0x01,0x41,0x23,0xC2,0xEB,0x02,0x33,0xC0,0x83,0xF8,0x01,0x75,0x04,0x41,0x8B,0xC0,0xC3,0x8B,0xC1,0x85,0xC0,0x74,0x0B,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xEB,0x02,0x8B,0xC1,0x83,0xF8,0x01,0x75,0x04,0x41,0x8B,0xC1,0xC3,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x85,0xC0,0x74,0x04,0x23,0xD0,0xEB,0x02,0x33,0xD2,0x83,0xFA,0x01,0x75,0x05,0x8B,0x44,0x24,0x28,0xC3,0x8B,0x44,0x24,0x30,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(BitVector4 control, BitVector8 input)
; location: [7FFDDB852620h, 7FFDDB85264Bh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
000bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000dh mov [rsp],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(3 bytes) = 89 0c 24
0010h lea rcx,[rsp]                 ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 0c 24
0014h bt edx,eax                    ; BT(Bt_rm32_r32) [EDX,EAX]                            encoding(3 bytes) = 0f a3 c2
0017h jb short 001dh                ; JB(Jb_rel8_64) [1Dh:jmp64]                           encoding(2 bytes) = 72 04
0019h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001bh jmp short 0022h               ; JMP(Jmp_rel8_64) [22h:jmp64]                         encoding(2 bytes) = eb 05
001dh mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0022h mov [rcx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(2 bytes) = 89 01
0024h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0027h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[44]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0xC1,0x0F,0xB6,0xD2,0x33,0xC9,0x89,0x0C,0x24,0x48,0x8D,0x0C,0x24,0x0F,0xA3,0xC2,0x72,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x01,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(Mux8Control control, BitVector8 input)
; location: [7FFDDB852980h, 7FFDDB8529ABh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
000bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000dh mov [rsp],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(3 bytes) = 89 0c 24
0010h lea rcx,[rsp]                 ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 0c 24
0014h bt edx,eax                    ; BT(Bt_rm32_r32) [EDX,EAX]                            encoding(3 bytes) = 0f a3 c2
0017h jb short 001dh                ; JB(Jb_rel8_64) [1Dh:jmp64]                           encoding(2 bytes) = 72 04
0019h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001bh jmp short 0022h               ; JMP(Jmp_rel8_64) [22h:jmp64]                         encoding(2 bytes) = eb 05
001dh mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0022h mov [rcx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(2 bytes) = 89 01
0024h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0027h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[44]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0xC1,0x0F,0xB6,0xD2,0x33,0xC9,0x89,0x0C,0x24,0x48,0x8D,0x0C,0x24,0x0F,0xA3,0xC2,0x72,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x01,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Mux8Control Define(bit c0, bit c1, bit c2)
; location: [7FFDDB8529C0h, 7FFDDB852A49h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov byte ptr [rsp+20h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 20 00
000ah mov byte ptr [rsp+18h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 18 00
000fh mov byte ptr [rsp+10h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 10 00
0014h mov byte ptr [rsp+8],0        ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 08 00
0019h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001bh cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
001eh jne short 0025h               ; JNE(Jne_rel8_64) [25h:jmp64]                         encoding(2 bytes) = 75 05
0020h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0025h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
0028h jne short 002dh               ; JNE(Jne_rel8_64) [2Dh:jmp64]                         encoding(2 bytes) = 75 03
002ah or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
002dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0030h and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
0033h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0036h mov [rsp+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 10
003ah cmp r8d,1                     ; CMP(Cmp_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f8 01
003eh jne short 0062h               ; JNE(Jne_rel8_64) [62h:jmp64]                         encoding(2 bytes) = 75 22
0040h mov byte ptr [rsp+8],4        ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),4h:imm8]     encoding(5 bytes) = c6 44 24 08 04
0045h mov eax,[rsp+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 10
0049h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
004ch mov edx,[rsp+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 08
0050h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0053h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0055h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0058h and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
005bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
005eh mov [rsp+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 10
0062h mov eax,[rsp+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 10
0066h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0069h and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
006ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
006fh mov [rsp+20h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 20
0073h mov eax,[rsp+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 20
0077h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
007ah mov [rsp+4],al                ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 04
007eh mov eax,[rsp+4]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 04
0082h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0085h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0089h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[138]{0x48,0x83,0xEC,0x28,0x90,0xC6,0x44,0x24,0x20,0x00,0xC6,0x44,0x24,0x18,0x00,0xC6,0x44,0x24,0x10,0x00,0xC6,0x44,0x24,0x08,0x00,0x33,0xC0,0x83,0xF9,0x01,0x75,0x05,0xB8,0x01,0x00,0x00,0x00,0x83,0xFA,0x01,0x75,0x03,0x83,0xC8,0x02,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x10,0x41,0x83,0xF8,0x01,0x75,0x22,0xC6,0x44,0x24,0x08,0x04,0x8B,0x44,0x24,0x10,0x0F,0xB6,0xC0,0x8B,0x54,0x24,0x08,0x0F,0xB6,0xD2,0x0B,0xC2,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x10,0x8B,0x44,0x24,0x10,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x20,0x8B,0x44,0x24,0x20,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x04,0x8B,0x44,0x24,0x04,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Mux8Control Define(BitVector4 selector)
; location: [7FFDDB852E70h, 7FFDDB852EB1h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
000ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
000fh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0012h sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
0014h inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
0016h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0019h shl edx,8                     ; SHL(Shl_rm32_imm8) [EDX,8h:imm8]                     encoding(3 bytes) = c1 e2 08
001ch or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001eh movzx eax,ax                  ; MOVZX(Movzx_r32_rm16) [EAX,AX]                       encoding(3 bytes) = 0f b7 c0
0021h movzx edx,cl                  ; MOVZX(Movzx_r32_rm8) [EDX,CL]                        encoding(3 bytes) = 0f b6 d1
0024h bextr eax,edx,eax             ; BEXTR(VEX_Bextr_r32_rm32_r32) [EAX,EDX,EAX]          encoding(VEX, 5 bytes) = c4 e2 78 f7 c2
0029h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
002ch and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
002fh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0032h mov [rsp+4],al                ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 04
0036h mov eax,[rsp+4]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 04
003ah movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
003dh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0041h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[66]{0x50,0x0F,0x1F,0x40,0x00,0x33,0xC0,0xBA,0x02,0x00,0x00,0x00,0x0F,0xB6,0xC0,0x0F,0xB6,0xD2,0x2B,0xD0,0xFF,0xC2,0x0F,0xB6,0xD2,0xC1,0xE2,0x08,0x0B,0xC2,0x0F,0xB7,0xC0,0x0F,0xB6,0xD1,0xC4,0xE2,0x78,0xF7,0xC2,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x04,0x8B,0x44,0x24,0x04,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: byte get_Scalar()
; location: [7FFDDB852ED0h, 7FFDDB852ED8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ScalarBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_C0()
; location: [7FFDDB852EF0h, 7FFDDB852F1Fh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h test al,1                     ; TEST(Test_AL_imm8) [AL,1h:imm8]                      encoding(2 bytes) = a8 01
000ah setne al                      ; SETNE(Setne_rm8) [AL]                                encoding(3 bytes) = 0f 95 c0
000dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0015h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0019h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
001bh jne short 0021h               ; JNE(Jne_rel8_64) [21h:jmp64]                         encoding(2 bytes) = 75 04
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 05
0021h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0026h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0028h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
002bh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_C0Bytes => new byte[48]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0x01,0xA8,0x01,0x0F,0x95,0xC0,0x0F,0xB6,0xC0,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0x85,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x02,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_C1()
; location: [7FFDDB852F40h, 7FFDDB852F6Fh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h test al,2                     ; TEST(Test_AL_imm8) [AL,2h:imm8]                      encoding(2 bytes) = a8 02
000ah setne al                      ; SETNE(Setne_rm8) [AL]                                encoding(3 bytes) = 0f 95 c0
000dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0015h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0019h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
001bh jne short 0021h               ; JNE(Jne_rel8_64) [21h:jmp64]                         encoding(2 bytes) = 75 04
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 05
0021h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0026h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0028h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
002bh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_C1Bytes => new byte[48]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0x01,0xA8,0x02,0x0F,0x95,0xC0,0x0F,0xB6,0xC0,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0x85,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x02,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_C2()
; location: [7FFDDB852F90h, 7FFDDB852FBFh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h test al,4                     ; TEST(Test_AL_imm8) [AL,4h:imm8]                      encoding(2 bytes) = a8 04
000ah setne al                      ; SETNE(Setne_rm8) [AL]                                encoding(3 bytes) = 0f 95 c0
000dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0015h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0019h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
001bh jne short 0021h               ; JNE(Jne_rel8_64) [21h:jmp64]                         encoding(2 bytes) = 75 04
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 05
0021h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0026h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0028h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
002bh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_C2Bytes => new byte[48]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0x01,0xA8,0x04,0x0F,0x95,0xC0,0x0F,0xB6,0xC0,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0x85,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x02,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ChoiceLabel(uint index)
; location: [7FFDDB852FE0h, 7FFDDB8530D0h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000ch mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
000eh cmp esi,1Ah                   ; CMP(Cmp_rm32_imm8) [ESI,1ah:imm32]                   encoding(3 bytes) = 83 fe 1a
0011h jae short 005ch               ; JAE(Jae_rel8_64) [5Ch:jmp64]                         encoding(2 bytes) = 73 49
0013h mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
001dh mov edx,0BCh                  ; MOV(Mov_r32_imm32) [EDX,bch:imm32]                   encoding(5 bytes) = ba bc 00 00 00
0022h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F4118D0h:jmp64]                encoding(5 bytes) = e8 a9 18 41 5f
0027h mov rcx,1F96AFE6E88h          ; MOV(Mov_r64_imm64) [RCX,1f96afe6e88h:imm64]          encoding(10 bytes) = 48 b9 88 6e fe 6a f9 01 00 00
0031h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0034h cmp esi,[rcx+8]               ; CMP(Cmp_r32_rm32) [ESI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 71 08
0037h jae near ptr 00ebh            ; JAE(Jae_rel32_64) [EBh:jmp64]                        encoding(6 bytes) = 0f 83 ae 00 00 00
003dh movsxd rax,esi                ; MOVSXD(Movsxd_r64_rm32) [RAX,ESI]                    encoding(3 bytes) = 48 63 c6
0040h lea rcx,[rcx+rax*2+10h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RCX:br,DS:sr)]       encoding(5 bytes) = 48 8d 4c 41 10
0045h movzx esi,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ESI,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 31
0048h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
004dh call 7FFDDB1544A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF9014C8h:jmp64]        encoding(5 bytes) = e8 76 14 90 ff
0052h mov [rax+0Ch],si              ; MOV(Mov_rm16_r16) [mem(16u,RAX:br,DS:sr),SI]         encoding(4 bytes) = 66 89 70 0c
0056h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
005ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
005ch mov rcx,7FFDDB27B0D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb27b0d0h:imm64]         encoding(10 bytes) = 48 b9 d0 b0 27 db fd 7f 00 00
0066h mov edx,0BCh                  ; MOV(Mov_r32_imm32) [EDX,bch:imm32]                   encoding(5 bytes) = ba bc 00 00 00
006bh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F4118D0h:jmp64]                encoding(5 bytes) = e8 60 18 41 5f
0070h mov rax,1F96AFE6E88h          ; MOV(Mov_r64_imm64) [RAX,1f96afe6e88h:imm64]          encoding(10 bytes) = 48 b8 88 6e fe 6a f9 01 00 00
007ah mov r8,[rax]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RAX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 00
007dh mov edx,4EC4EC4Fh             ; MOV(Mov_r32_imm32) [EDX,4ec4ec4fh:imm32]             encoding(5 bytes) = ba 4f ec c4 4e
0082h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
0084h mul edx                       ; MUL(Mul_rm32) [EDX]                                  encoding(2 bytes) = f7 e2
0086h shr edx,3                     ; SHR(Shr_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 ea 03
0089h imul eax,edx,1Ah              ; IMUL(Imul_r32_rm32_imm8) [EAX,EDX,1ah:imm32]         encoding(3 bytes) = 6b c2 1a
008ch mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
008eh sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
0090h cmp edx,[r8+8]                ; CMP(Cmp_r32_rm32) [EDX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 50 08
0094h jae short 00ebh               ; JAE(Jae_rel8_64) [EBh:jmp64]                         encoding(2 bytes) = 73 55
0096h movsxd rax,edx                ; MOVSXD(Movsxd_r64_rm32) [RAX,EDX]                    encoding(3 bytes) = 48 63 c2
0099h movzx ecx,word ptr [r8+rax*2+10h]; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,R8:br,DS:sr)]  encoding(6 bytes) = 41 0f b7 4c 40 10
009fh mov edx,4EC4EC4Fh             ; MOV(Mov_r32_imm32) [EDX,4ec4ec4fh:imm32]             encoding(5 bytes) = ba 4f ec c4 4e
00a4h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
00a6h mul edx                       ; MUL(Mul_rm32) [EDX]                                  encoding(2 bytes) = f7 e2
00a8h mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
00abh shr r8d,3                     ; SHR(Shr_rm32_imm8) [R8D,3h:imm8]                     encoding(4 bytes) = 41 c1 e8 03
00afh inc r8d                       ; INC(Inc_rm32) [R8D]                                  encoding(3 bytes) = 41 ff c0
00b2h mov edx,ecx                   ; MOV(Mov_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 8b d1
00b4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00b6h call 7FFDDB154568h            ; CALL(Call_rel32_64) [FFFFFFFFFF901588h:jmp64]        encoding(5 bytes) = e8 cd 14 90 ff
00bbh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
00beh jne short 00c6h               ; JNE(Jne_rel8_64) [C6h:jmp64]                         encoding(2 bytes) = 75 06
00c0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00c4h jmp short 00cdh               ; JMP(Jmp_rel8_64) [CDh:jmp64]                         encoding(2 bytes) = eb 07
00c6h lea rdx,[rax+0Ch]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 50 0c
00cah mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
00cdh lea rax,[rsp+20h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 20
00d2h mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
00d5h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
00d8h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
00ddh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00dfh call 7FFDDB154578h            ; CALL(Call_rel32_64) [FFFFFFFFFF901598h:jmp64]        encoding(5 bytes) = e8 b4 14 90 ff
00e4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00e5h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
00e9h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00eah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00ebh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F53BF20h:jmp64]                encoding(5 bytes) = e8 30 be 53 5f
00f0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> ChoiceLabelBytes => new byte[241]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x8B,0xF1,0x83,0xFE,0x1A,0x73,0x49,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xBC,0x00,0x00,0x00,0xE8,0xA9,0x18,0x41,0x5F,0x48,0xB9,0x88,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x48,0x8B,0x09,0x3B,0x71,0x08,0x0F,0x83,0xAE,0x00,0x00,0x00,0x48,0x63,0xC6,0x48,0x8D,0x4C,0x41,0x10,0x0F,0xB7,0x31,0xB9,0x01,0x00,0x00,0x00,0xE8,0x76,0x14,0x90,0xFF,0x66,0x89,0x70,0x0C,0x48,0x83,0xC4,0x30,0x5E,0xC3,0x48,0xB9,0xD0,0xB0,0x27,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xBC,0x00,0x00,0x00,0xE8,0x60,0x18,0x41,0x5F,0x48,0xB8,0x88,0x6E,0xFE,0x6A,0xF9,0x01,0x00,0x00,0x4C,0x8B,0x00,0xBA,0x4F,0xEC,0xC4,0x4E,0x8B,0xC6,0xF7,0xE2,0xC1,0xEA,0x03,0x6B,0xC2,0x1A,0x8B,0xD6,0x2B,0xD0,0x41,0x3B,0x50,0x08,0x73,0x55,0x48,0x63,0xC2,0x41,0x0F,0xB7,0x4C,0x40,0x10,0xBA,0x4F,0xEC,0xC4,0x4E,0x8B,0xC6,0xF7,0xE2,0x44,0x8B,0xC2,0x41,0xC1,0xE8,0x03,0x41,0xFF,0xC0,0x8B,0xD1,0x33,0xC9,0xE8,0xCD,0x14,0x90,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xD2,0x33,0xC9,0xEB,0x07,0x48,0x8D,0x50,0x0C,0x8B,0x48,0x08,0x48,0x8D,0x44,0x24,0x20,0x48,0x89,0x10,0x89,0x48,0x08,0x48,0x8D,0x54,0x24,0x20,0x33,0xC9,0xE8,0xB4,0x14,0x90,0xFF,0x90,0x48,0x83,0xC4,0x30,0x5E,0xC3,0xE8,0x30,0xBE,0x53,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_0(bit a)
; location: [7FFDDB853300h, 7FFDDB853349h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0012h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0017h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4112E0h:jmp64]                encoding(5 bytes) = e8 c4 12 41 5f
001ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001fh mov [rdi+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 10
0022h mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
002ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4111B0h:jmp64]                encoding(5 bytes) = e8 7f 11 41 5f
0031h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0034h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0038h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4102F0h:jmp64]                encoding(5 bytes) = e8 b0 02 41 5f
0040h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0043h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0047h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0048h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0049h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_0Bytes => new byte[74]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xC4,0x12,0x41,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x10,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7F,0x11,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xB0,0x02,0x41,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_1(bit a)
; location: [7FFDDB853370h, 7FFDDB85339Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F411270h:jmp64]                encoding(5 bytes) = e8 53 12 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_1Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x53,0x12,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_2(bit a, bit b)
; location: [7FFDDB8533C0h, 7FFDDB853411h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0009h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000ch mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0016h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
001bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F411220h:jmp64]                encoding(5 bytes) = e8 00 12 41 5f
0020h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0023h mov [rbx+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 10
0026h mov [rbx+14h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 14
0029h mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0033h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4110F0h:jmp64]                encoding(5 bytes) = e8 b8 10 41 5f
0038h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0042h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F410230h:jmp64]                encoding(5 bytes) = e8 e9 01 41 5f
0047h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
004ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
004fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0050h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0051h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_2Bytes => new byte[82]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x00,0x12,0x41,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x10,0x89,0x7B,0x14,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0x10,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xE9,0x01,0x41,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_3(bit a)
; location: [7FFDDB853430h, 7FFDDB85345Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4111B0h:jmp64]                encoding(5 bytes) = e8 93 11 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_3Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x93,0x11,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_4(bit a, bit b)
; location: [7FFDDB853480h, 7FFDDB8534A6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F411030h:jmp64]                encoding(5 bytes) = e8 16 10 41 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_4Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x16,0x10,0x41,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_5(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB8534C0h, 7FFDDB8534E9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F411120h:jmp64]                encoding(5 bytes) = e8 07 11 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_5Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x07,0x11,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_6(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB853500h, 7FFDDB85355Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4110E0h:jmp64]                encoding(5 bytes) = e8 bf 10 41 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov ecx,[rsi+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 08
0027h mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
002ah mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
002dh mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
0030h mov [rbx+18h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 18
0033h mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
003dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410FB0h:jmp64]                encoding(5 bytes) = e8 6e 0f 41 5f
0042h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0045h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0049h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4100F0h:jmp64]                encoding(5 bytes) = e8 9f 00 41 5f
0051h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0054h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0058h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0059h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_6Bytes => new byte[92]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xBF,0x10,0x41,0x5F,0x48,0x8B,0xD8,0x8B,0x4E,0x08,0x89,0x4B,0x10,0x8B,0x4E,0x10,0x89,0x4B,0x14,0x89,0x7B,0x18,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6E,0x0F,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x9F,0x00,0x41,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_7(bit a)
; location: [7FFDDB853580h, 7FFDDB8535ADh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F411060h:jmp64]                encoding(5 bytes) = e8 43 10 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_7Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x43,0x10,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_8(bit a, bit b)
; location: [7FFDDB8535D0h, 7FFDDB8535F6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410EE0h:jmp64]                encoding(5 bytes) = e8 c6 0e 41 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_8Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x0E,0x41,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_9(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB853610h, 7FFDDB853639h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410FD0h:jmp64]                encoding(5 bytes) = e8 b7 0f 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_9Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB7,0x0F,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_10(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB853650h, 7FFDDB853688h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410E60h:jmp64]                encoding(5 bytes) = e8 44 0e 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FFA0h:jmp64]                encoding(5 bytes) = e8 75 ff 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_10Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x0E,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x75,0xFF,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_11(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB8536B0h, 7FFDDB8536D9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410F30h:jmp64]                encoding(5 bytes) = e8 17 0f 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_11Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x17,0x0F,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_12(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB8536F0h, 7FFDDB853758h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410EF0h:jmp64]                encoding(5 bytes) = e8 cf 0e 41 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
002eh mov [rbx+10h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 10
0031h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0034h mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
0037h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
003ah mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
003dh mov [rbx+1Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 1c
0040h mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
004ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410DC0h:jmp64]                encoding(5 bytes) = e8 71 0d 41 5f
004fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0052h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0056h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0059h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FF00h:jmp64]                encoding(5 bytes) = e8 a2 fe 40 5f
005eh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0061h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0065h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0066h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0067h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0068h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_12Bytes => new byte[105]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0xCF,0x0E,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x8B,0x40,0x08,0x89,0x43,0x10,0x8B,0x49,0x10,0x89,0x4B,0x14,0x8B,0x4E,0x10,0x89,0x4B,0x18,0x89,0x7B,0x1C,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x71,0x0D,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xA2,0xFE,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_13(bit a)
; location: [7FFDDB853780h, 7FFDDB8537ADh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410E60h:jmp64]                encoding(5 bytes) = e8 43 0e 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_13Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x43,0x0E,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_14(bit a, bit b)
; location: [7FFDDB8537D0h, 7FFDDB8537F6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410CE0h:jmp64]                encoding(5 bytes) = e8 c6 0c 41 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_14Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x0C,0x41,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_15(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB853810h, 7FFDDB853839h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410DD0h:jmp64]                encoding(5 bytes) = e8 b7 0d 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_15Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB7,0x0D,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_16(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB853850h, 7FFDDB853888h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410C60h:jmp64]                encoding(5 bytes) = e8 44 0c 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FDA0h:jmp64]                encoding(5 bytes) = e8 75 fd 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_16Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x0C,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x75,0xFD,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_17(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB8538B0h, 7FFDDB8538D9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410D30h:jmp64]                encoding(5 bytes) = e8 17 0d 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_17Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x17,0x0D,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_18(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB8538F0h, 7FFDDB853928h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410BC0h:jmp64]                encoding(5 bytes) = e8 a4 0b 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FD00h:jmp64]                encoding(5 bytes) = e8 d5 fc 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_18Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0x0B,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD5,0xFC,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_19(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB853950h, 7FFDDB853979h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410C90h:jmp64]                encoding(5 bytes) = e8 77 0c 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_19Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0x0C,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_20(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB853990h, 7FFDDB853A05h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410C50h:jmp64]                encoding(5 bytes) = e8 2f 0c 41 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
0035h mov [rbx+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 10
0038h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
003bh mov [rbx+14h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 14
003eh mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0041h mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
0044h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0047h mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
004ah mov [rbx+20h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 20
004dh mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0057h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410B20h:jmp64]                encoding(5 bytes) = e8 c4 0a 41 5f
005ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
005fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0063h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0066h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FC60h:jmp64]                encoding(5 bytes) = e8 f5 fb 40 5f
006bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
006eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0072h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0073h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0074h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0075h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_20Bytes => new byte[118]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0x2F,0x0C,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x8B,0x52,0x08,0x89,0x53,0x10,0x8B,0x40,0x10,0x89,0x43,0x14,0x8B,0x49,0x10,0x89,0x4B,0x18,0x8B,0x4E,0x10,0x89,0x4B,0x1C,0x89,0x7B,0x20,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0x0A,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xF5,0xFB,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_21(bit a)
; location: [7FFDDB853A20h, 7FFDDB853A4Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410BC0h:jmp64]                encoding(5 bytes) = e8 a3 0b 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_21Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA3,0x0B,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_22(bit a, bit b)
; location: [7FFDDB853A70h, 7FFDDB853A96h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410A40h:jmp64]                encoding(5 bytes) = e8 26 0a 41 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_22Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x26,0x0A,0x41,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_23(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB853AB0h, 7FFDDB853AD9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410B30h:jmp64]                encoding(5 bytes) = e8 17 0b 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_23Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x17,0x0B,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_24(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB853AF0h, 7FFDDB853B28h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4109C0h:jmp64]                encoding(5 bytes) = e8 a4 09 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FB00h:jmp64]                encoding(5 bytes) = e8 d5 fa 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_24Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0x09,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD5,0xFA,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_25(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB853B50h, 7FFDDB853B79h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410A90h:jmp64]                encoding(5 bytes) = e8 77 0a 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_25Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0x0A,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_26(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB853B90h, 7FFDDB853BC8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410920h:jmp64]                encoding(5 bytes) = e8 04 09 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40FA60h:jmp64]                encoding(5 bytes) = e8 35 fa 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_26Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0x09,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x35,0xFA,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_27(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB853BF0h, 7FFDDB853C19h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4109F0h:jmp64]                encoding(5 bytes) = e8 d7 09 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_27Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xD7,0x09,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__32_28(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB853C30h, 7FFDDB853C68h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3f98h:imm64]         encoding(10 bytes) = 48 b9 98 3f 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410880h:jmp64]                encoding(5 bytes) = e8 64 08 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F9C0h:jmp64]                encoding(5 bytes) = e8 95 f9 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_28Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x98,0x3F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x08,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x95,0xF9,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_29(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDB853C90h, 7FFDDB853CB9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410950h:jmp64]                encoding(5 bytes) = e8 37 09 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_29Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x37,0x09,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_30(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDB853CD0h, 7FFDDB853D54h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410910h:jmp64]                encoding(5 bytes) = e8 ef 08 41 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0036h mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
0039h mov r8d,[r8+8]                ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 08
003dh mov [rbx+10h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 10
0041h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0044h mov [rbx+14h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 14
0047h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
004ah mov [rbx+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 18
004dh mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0050h mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
0053h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0056h mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
0059h mov [rbx+24h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 24
005ch mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0066h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4107E0h:jmp64]                encoding(5 bytes) = e8 75 07 41 5f
006bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0072h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0075h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F920h:jmp64]                encoding(5 bytes) = e8 a6 f8 40 5f
007ah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
007dh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0081h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0082h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0083h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0084h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_30Bytes => new byte[133]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0xEF,0x08,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x45,0x8B,0x40,0x08,0x44,0x89,0x43,0x10,0x8B,0x52,0x10,0x89,0x53,0x14,0x8B,0x40,0x10,0x89,0x43,0x18,0x8B,0x49,0x10,0x89,0x4B,0x1C,0x8B,0x4E,0x10,0x89,0x4B,0x20,0x89,0x7B,0x24,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x75,0x07,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xA6,0xF8,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_31(bit a)
; location: [7FFDDB853D70h, 7FFDDB853D9Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410870h:jmp64]                encoding(5 bytes) = e8 53 08 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_31Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x53,0x08,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_32(bit a, bit b)
; location: [7FFDDB853DC0h, 7FFDDB853DE6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4106F0h:jmp64]                encoding(5 bytes) = e8 d6 06 41 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_32Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0x06,0x41,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_33(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB853E00h, 7FFDDB853E29h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4107E0h:jmp64]                encoding(5 bytes) = e8 c7 07 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_33Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC7,0x07,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_34(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB853E40h, 7FFDDB853E78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410670h:jmp64]                encoding(5 bytes) = e8 54 06 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F7B0h:jmp64]                encoding(5 bytes) = e8 85 f7 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_34Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0x06,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x85,0xF7,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_35(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB853EA0h, 7FFDDB853EC9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410740h:jmp64]                encoding(5 bytes) = e8 27 07 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_35Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x27,0x07,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_36(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB853EE0h, 7FFDDB853F18h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4105D0h:jmp64]                encoding(5 bytes) = e8 b4 05 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F710h:jmp64]                encoding(5 bytes) = e8 e5 f6 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_36Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x05,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE5,0xF6,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_37(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB853F40h, 7FFDDB853F69h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4106A0h:jmp64]                encoding(5 bytes) = e8 87 06 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_37Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x87,0x06,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__32_38(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB853F80h, 7FFDDB853FB8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3f98h:imm64]         encoding(10 bytes) = 48 b9 98 3f 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410530h:jmp64]                encoding(5 bytes) = e8 14 05 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F670h:jmp64]                encoding(5 bytes) = e8 45 f6 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_38Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x98,0x3F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0x05,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x45,0xF6,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_39(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDB853FE0h, 7FFDDB854009h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410600h:jmp64]                encoding(5 bytes) = e8 e7 05 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_39Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0x05,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__32_40(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDB854020h, 7FFDDB854058h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C4408h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4408h:imm64]         encoding(10 bytes) = 48 b9 08 44 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410490h:jmp64]                encoding(5 bytes) = e8 74 04 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F5D0h:jmp64]                encoding(5 bytes) = e8 a5 f5 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_40Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x08,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x04,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0xF5,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_41(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDB854080h, 7FFDDB8540A9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410560h:jmp64]                encoding(5 bytes) = e8 47 05 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_41Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0x05,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_42(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDB8540C0h, 7FFDDB854153h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410520h:jmp64]                encoding(5 bytes) = e8 ff 04 41 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0036h mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
0039h mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
003dh mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0040h mov r9d,[r9+8]                ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 08
0044h mov [rbx+10h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 10
0048h mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
004ch mov [rbx+14h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 14
0050h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0053h mov [rbx+18h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 18
0056h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
0059h mov [rbx+1Ch],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 1c
005ch mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
005fh mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
0062h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0065h mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
0068h mov [rbx+28h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 28
006bh mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0075h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4103F0h:jmp64]                encoding(5 bytes) = e8 76 03 41 5f
007ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0081h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0084h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F530h:jmp64]                encoding(5 bytes) = e8 a7 f4 40 5f
0089h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
008ch add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0090h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0091h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0092h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0093h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_42Bytes => new byte[148]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0xFF,0x04,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x45,0x8B,0x49,0x08,0x44,0x89,0x4B,0x10,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x14,0x8B,0x52,0x10,0x89,0x53,0x18,0x8B,0x40,0x10,0x89,0x43,0x1C,0x8B,0x49,0x10,0x89,0x4B,0x20,0x8B,0x4E,0x10,0x89,0x4B,0x24,0x89,0x7B,0x28,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0x03,0x41,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xA7,0xF4,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_43(bit a)
; location: [7FFDDB854170h, 7FFDDB85419Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410470h:jmp64]                encoding(5 bytes) = e8 53 04 41 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_43Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x53,0x04,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_44(bit a, bit b)
; location: [7FFDDB8541C0h, 7FFDDB8541E6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4102F0h:jmp64]                encoding(5 bytes) = e8 d6 02 41 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_44Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0x02,0x41,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_45(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB854200h, 7FFDDB854229h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4103E0h:jmp64]                encoding(5 bytes) = e8 c7 03 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_45Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC7,0x03,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_46(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB854240h, 7FFDDB854278h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410270h:jmp64]                encoding(5 bytes) = e8 54 02 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F3B0h:jmp64]                encoding(5 bytes) = e8 85 f3 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_46Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0x02,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x85,0xF3,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_47(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB8542A0h, 7FFDDB8542C9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410340h:jmp64]                encoding(5 bytes) = e8 27 03 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_47Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x27,0x03,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_48(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB8542E0h, 7FFDDB854318h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F4101D0h:jmp64]                encoding(5 bytes) = e8 b4 01 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F310h:jmp64]                encoding(5 bytes) = e8 e5 f2 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_48Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x01,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE5,0xF2,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_49(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB854340h, 7FFDDB854369h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4102A0h:jmp64]                encoding(5 bytes) = e8 87 02 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_49Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x87,0x02,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__32_50(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB854380h, 7FFDDB8543B8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3f98h:imm64]         encoding(10 bytes) = 48 b9 98 3f 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410130h:jmp64]                encoding(5 bytes) = e8 14 01 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F270h:jmp64]                encoding(5 bytes) = e8 45 f2 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_50Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x98,0x3F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0x01,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x45,0xF2,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_51(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDB8543E0h, 7FFDDB854409h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410200h:jmp64]                encoding(5 bytes) = e8 e7 01 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_51Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0x01,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__32_52(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDB854420h, 7FFDDB854458h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C4408h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4408h:imm64]         encoding(10 bytes) = 48 b9 08 44 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F410090h:jmp64]                encoding(5 bytes) = e8 74 00 41 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F1D0h:jmp64]                encoding(5 bytes) = e8 a5 f1 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_52Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x08,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x00,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0xF1,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_53(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDB854480h, 7FFDDB8544A9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410160h:jmp64]                encoding(5 bytes) = e8 47 01 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_53Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0x01,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <bitcombo>b__32_54(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDB8544C0h, 7FFDDB8544F8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C4878h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4878h:imm64]         encoding(10 bytes) = 48 b9 78 48 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FFF0h:jmp64]                encoding(5 bytes) = e8 d4 ff 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F130h:jmp64]                encoding(5 bytes) = e8 05 f1 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_54Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x78,0x48,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0xFF,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x05,0xF1,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_55(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5)
; location: [7FFDDB854520h, 7FFDDB854549h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F4100C0h:jmp64]                encoding(5 bytes) = e8 a7 00 41 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_55Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA7,0x00,0x41,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_56(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5, bit h)
; location: [7FFDDB854560h, 7FFDDB854602h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F410080h:jmp64]                encoding(5 bytes) = e8 5f 00 41 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0036h mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
0039h mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
003dh mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0040h mov r9,[r9+8]                 ; MOV(Mov_r64_rm64) [R9,mem(64u,R9:br,DS:sr)]          encoding(4 bytes) = 4d 8b 49 08
0044h mov r10,r9                    ; MOV(Mov_r64_rm64) [R10,R9]                           encoding(3 bytes) = 4d 8b d1
0047h mov r10d,[r10+8]              ; MOV(Mov_r32_rm32) [R10D,mem(32u,R10:br,DS:sr)]       encoding(4 bytes) = 45 8b 52 08
004bh mov [rbx+10h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R10D]       encoding(4 bytes) = 44 89 53 10
004fh mov r9d,[r9+10h]              ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 10
0053h mov [rbx+14h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 14
0057h mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
005bh mov [rbx+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 18
005fh mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0062h mov [rbx+1Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 1c
0065h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
0068h mov [rbx+20h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 20
006bh mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
006eh mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
0071h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0074h mov [rbx+28h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 28
0077h mov [rbx+2Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 2c
007ah mov rcx,7FFDDB9A5558h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a5558h:imm64]         encoding(10 bytes) = 48 b9 58 55 9a db fd 7f 00 00
0084h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FF50h:jmp64]                encoding(5 bytes) = e8 c7 fe 40 5f
0089h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
008ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0090h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0093h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40F090h:jmp64]                encoding(5 bytes) = e8 f8 ef 40 5f
0098h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
009bh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
009fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a0h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a1h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00a2h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_56Bytes => new byte[163]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x5F,0x00,0x41,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x4D,0x8B,0x49,0x08,0x4D,0x8B,0xD1,0x45,0x8B,0x52,0x08,0x44,0x89,0x53,0x10,0x45,0x8B,0x49,0x10,0x44,0x89,0x4B,0x14,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x18,0x8B,0x52,0x10,0x89,0x53,0x1C,0x8B,0x40,0x10,0x89,0x43,0x20,0x8B,0x49,0x10,0x89,0x4B,0x24,0x8B,0x4E,0x10,0x89,0x4B,0x28,0x89,0x7B,0x2C,0x48,0xB9,0x58,0x55,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC7,0xFE,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xF8,0xEF,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__34_0(bit a)
; location: [7FFDDB854620h, 7FFDDB85464Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FFC0h:jmp64]                encoding(5 bytes) = e8 a3 ff 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__34_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA3,0xFF,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__35_0(bit a)
; location: [7FFDDB854670h, 7FFDDB85469Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FF70h:jmp64]                encoding(5 bytes) = e8 53 ff 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__35_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x53,0xFF,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__35_1(bit a, bit b)
; location: [7FFDDB8546C0h, 7FFDDB8546E6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FDF0h:jmp64]                encoding(5 bytes) = e8 d6 fd 40 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__35_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0xFD,0x40,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__35_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB854700h, 7FFDDB854729h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FEE0h:jmp64]                encoding(5 bytes) = e8 c7 fe 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__35_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC7,0xFE,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__36_0(bit a)
; location: [7FFDDB854740h, 7FFDDB85476Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FEA0h:jmp64]                encoding(5 bytes) = e8 83 fe 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x83,0xFE,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__36_1(bit a, bit b)
; location: [7FFDDB854790h, 7FFDDB8547B6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FD20h:jmp64]                encoding(5 bytes) = e8 06 fd 40 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0xFD,0x40,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__36_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB8547D0h, 7FFDDB8547F9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FE10h:jmp64]                encoding(5 bytes) = e8 f7 fd 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xF7,0xFD,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__36_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB854810h, 7FFDDB854848h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FCA0h:jmp64]                encoding(5 bytes) = e8 84 fc 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40EDE0h:jmp64]                encoding(5 bytes) = e8 b5 ed 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0xFC,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB5,0xED,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__36_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB854870h, 7FFDDB854899h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FD70h:jmp64]                encoding(5 bytes) = e8 57 fd 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x57,0xFD,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_0(bit a)
; location: [7FFDDB8548B0h, 7FFDDB8548DDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FD30h:jmp64]                encoding(5 bytes) = e8 13 fd 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x13,0xFD,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__37_1(bit a, bit b)
; location: [7FFDDB854900h, 7FFDDB854926h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FBB0h:jmp64]                encoding(5 bytes) = e8 96 fb 40 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0xFB,0x40,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB854940h, 7FFDDB854969h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FCA0h:jmp64]                encoding(5 bytes) = e8 87 fc 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x87,0xFC,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__37_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB854980h, 7FFDDB8549B8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FB30h:jmp64]                encoding(5 bytes) = e8 14 fb 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40EC70h:jmp64]                encoding(5 bytes) = e8 45 ec 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xFB,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x45,0xEC,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB8549E0h, 7FFDDB854A09h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FC00h:jmp64]                encoding(5 bytes) = e8 e7 fb 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0xFB,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__37_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB854A20h, 7FFDDB854A58h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40FA90h:jmp64]                encoding(5 bytes) = e8 74 fa 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40EBD0h:jmp64]                encoding(5 bytes) = e8 a5 eb 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0xFA,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0xEB,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB854A80h, 7FFDDB854AA9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FB60h:jmp64]                encoding(5 bytes) = e8 47 fb 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0xFB,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_0(bit a)
; location: [7FFDDB854AC0h, 7FFDDB854AEDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FB20h:jmp64]                encoding(5 bytes) = e8 03 fb 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x03,0xFB,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__38_1(bit a, bit b)
; location: [7FFDDB854B10h, 7FFDDB854B36h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F9A0h:jmp64]                encoding(5 bytes) = e8 86 f9 40 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x86,0xF9,0x40,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB854B50h, 7FFDDB854B79h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40FA90h:jmp64]                encoding(5 bytes) = e8 77 fa 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0xFA,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__38_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB854B90h, 7FFDDB854BC8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F920h:jmp64]                encoding(5 bytes) = e8 04 f9 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40EA60h:jmp64]                encoding(5 bytes) = e8 35 ea 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0xF9,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x35,0xEA,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB854BF0h, 7FFDDB854C19h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F9F0h:jmp64]                encoding(5 bytes) = e8 d7 f9 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xD7,0xF9,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__38_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB854C30h, 7FFDDB854C68h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F880h:jmp64]                encoding(5 bytes) = e8 64 f8 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E9C0h:jmp64]                encoding(5 bytes) = e8 95 e9 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xF8,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x95,0xE9,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB854C90h, 7FFDDB854CB9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F950h:jmp64]                encoding(5 bytes) = e8 37 f9 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x37,0xF9,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__38_7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB854CD0h, 7FFDDB854D08h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3f98h:imm64]         encoding(10 bytes) = 48 b9 98 3f 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F7E0h:jmp64]                encoding(5 bytes) = e8 c4 f7 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E920h:jmp64]                encoding(5 bytes) = e8 f5 e8 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_7Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x98,0x3F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0xF7,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xF5,0xE8,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_8(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDB854D30h, 7FFDDB854D59h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F8B0h:jmp64]                encoding(5 bytes) = e8 97 f8 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_8Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0xF8,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_0(bit a)
; location: [7FFDDB854D70h, 7FFDDB854D9Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F870h:jmp64]                encoding(5 bytes) = e8 53 f8 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x53,0xF8,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__39_1(bit a, bit b)
; location: [7FFDDB854DC0h, 7FFDDB854DE6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F6F0h:jmp64]                encoding(5 bytes) = e8 d6 f6 40 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0xF6,0x40,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB854E00h, 7FFDDB854E29h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F7E0h:jmp64]                encoding(5 bytes) = e8 c7 f7 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC7,0xF7,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__39_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB854E40h, 7FFDDB854E78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F670h:jmp64]                encoding(5 bytes) = e8 54 f6 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E7B0h:jmp64]                encoding(5 bytes) = e8 85 e7 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0xF6,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x85,0xE7,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB854EA0h, 7FFDDB854EC9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F740h:jmp64]                encoding(5 bytes) = e8 27 f7 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x27,0xF7,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__39_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB854EE0h, 7FFDDB854F18h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F5D0h:jmp64]                encoding(5 bytes) = e8 b4 f5 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E710h:jmp64]                encoding(5 bytes) = e8 e5 e6 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0xF5,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE5,0xE6,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB854F40h, 7FFDDB854F69h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F6A0h:jmp64]                encoding(5 bytes) = e8 87 f6 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x87,0xF6,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__39_7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB854F80h, 7FFDDB854FB8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3f98h:imm64]         encoding(10 bytes) = 48 b9 98 3f 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F530h:jmp64]                encoding(5 bytes) = e8 14 f5 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E670h:jmp64]                encoding(5 bytes) = e8 45 e6 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_7Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x98,0x3F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xF5,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x45,0xE6,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_8(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDB854FE0h, 7FFDDB855009h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F600h:jmp64]                encoding(5 bytes) = e8 e7 f5 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_8Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0xF5,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__39_9(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDB855020h, 7FFDDB855058h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C4408h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4408h:imm64]         encoding(10 bytes) = 48 b9 08 44 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F490h:jmp64]                encoding(5 bytes) = e8 74 f4 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E5D0h:jmp64]                encoding(5 bytes) = e8 a5 e5 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_9Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x08,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0xF4,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0xE5,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_10(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDB855080h, 7FFDDB8550A9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F560h:jmp64]                encoding(5 bytes) = e8 47 f5 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_10Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0xF5,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_0(bit a)
; location: [7FFDDB8550C0h, 7FFDDB8550EDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F520h:jmp64]                encoding(5 bytes) = e8 03 f5 40 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x03,0xF5,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__40_1(bit a, bit b)
; location: [7FFDDB855110h, 7FFDDB855136h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDB9C2DD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2dd0h:imm64]         encoding(10 bytes) = 48 b9 d0 2d 9c db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F3A0h:jmp64]                encoding(5 bytes) = e8 86 f3 40 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xD0,0x2D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x86,0xF3,0x40,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDB855150h, 7FFDDB855179h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F490h:jmp64]                encoding(5 bytes) = e8 77 f4 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0xF4,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__40_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB855190h, 7FFDDB8551C8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3480h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3480h:imm64]         encoding(10 bytes) = 48 b9 80 34 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F320h:jmp64]                encoding(5 bytes) = e8 04 f3 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E460h:jmp64]                encoding(5 bytes) = e8 35 e4 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x80,0x34,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0xF3,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x35,0xE4,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDB8551F0h, 7FFDDB855219h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F3F0h:jmp64]                encoding(5 bytes) = e8 d7 f3 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xD7,0xF3,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__40_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB855230h, 7FFDDB855268h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3B28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3b28h:imm64]         encoding(10 bytes) = 48 b9 28 3b 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F280h:jmp64]                encoding(5 bytes) = e8 64 f2 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E3C0h:jmp64]                encoding(5 bytes) = e8 95 e3 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x28,0x3B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xF2,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x95,0xE3,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDB855290h, 7FFDDB8552B9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F350h:jmp64]                encoding(5 bytes) = e8 37 f3 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x37,0xF3,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__40_7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB8552D0h, 7FFDDB855308h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C3F98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c3f98h:imm64]         encoding(10 bytes) = 48 b9 98 3f 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F1E0h:jmp64]                encoding(5 bytes) = e8 c4 f1 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E320h:jmp64]                encoding(5 bytes) = e8 f5 e2 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_7Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x98,0x3F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0xF1,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xF5,0xE2,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_8(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDB855330h, 7FFDDB855359h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F2B0h:jmp64]                encoding(5 bytes) = e8 97 f2 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_8Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0xF2,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__40_9(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDB855370h, 7FFDDB8553A8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C4408h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4408h:imm64]         encoding(10 bytes) = 48 b9 08 44 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F140h:jmp64]                encoding(5 bytes) = e8 24 f1 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E280h:jmp64]                encoding(5 bytes) = e8 55 e2 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_9Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x08,0x44,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0xF1,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x55,0xE2,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_10(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDB8553D0h, 7FFDDB8553F9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F210h:jmp64]                encoding(5 bytes) = e8 f7 f1 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_10Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xF7,0xF1,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <bitcombo>b__40_11(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDB855410h, 7FFDDB855448h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9C4878h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c4878h:imm64]         encoding(10 bytes) = 48 b9 78 48 9c db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40F0A0h:jmp64]                encoding(5 bytes) = e8 84 f0 40 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40E1E0h:jmp64]                encoding(5 bytes) = e8 b5 e1 40 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_11Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x78,0x48,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0xF0,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB5,0xE1,0x40,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_12(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5)
; location: [7FFDDB855470h, 7FFDDB855499h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40F170h:jmp64]                encoding(5 bytes) = e8 57 f1 40 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_12Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x57,0xF1,0x40,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N1> <bitcombo>b__0(bit a)
; location: [7FFDDB8558C0h, 7FFDDB85590Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
000dh mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
0017h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40ED20h:jmp64]                encoding(5 bytes) = e8 ff ec 40 5f
0021h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0024h mov [rdi+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 10
0027h mov rcx,7FFDDB9C57B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c57b8h:imm64]         encoding(10 bytes) = 48 b9 b8 57 9c db fd 7f 00 00
0031h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40EBF0h:jmp64]                encoding(5 bytes) = e8 ba eb 40 5f
0036h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0039h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0040h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40DD30h:jmp64]                encoding(5 bytes) = e8 eb dc 40 5f
0045h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0048h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
004ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__0Bytes => new byte[79]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xFF,0xEC,0x40,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x10,0x48,0xB9,0xB8,0x57,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBA,0xEB,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xEB,0xDC,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N2> <bitcombo>b__1(bit a, bit b)
; location: [7FFDDB855930h, 7FFDDB855986h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0009h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000ch movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0011h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001bh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0020h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40ECB0h:jmp64]                encoding(5 bytes) = e8 8b ec 40 5f
0025h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0028h mov [rbx+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 10
002bh mov [rbx+14h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 14
002eh mov rcx,7FFDDB9C5B80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5b80h:imm64]         encoding(10 bytes) = 48 b9 80 5b 9c db fd 7f 00 00
0038h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40EB80h:jmp64]                encoding(5 bytes) = e8 43 eb 40 5f
003dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0040h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0044h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0047h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40DCC0h:jmp64]                encoding(5 bytes) = e8 74 dc 40 5f
004ch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
004fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0053h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0054h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0055h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0056h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__1Bytes => new byte[87]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x8B,0xEC,0x40,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x10,0x89,0x7B,0x14,0x48,0xB9,0x80,0x5B,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x43,0xEB,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x74,0xDC,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N3> <bitcombo>b__3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDB8559A0h, 7FFDDB855A00h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001ch mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40EC40h:jmp64]                encoding(5 bytes) = e8 1a ec 40 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov ecx,[rsi+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 08
002ch mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
002fh mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0032h mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
0035h mov [rbx+18h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 18
0038h mov rcx,7FFDDB9C5F58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c5f58h:imm64]         encoding(10 bytes) = 48 b9 58 5f 9c db fd 7f 00 00
0042h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40EB10h:jmp64]                encoding(5 bytes) = e8 c9 ea 40 5f
0047h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
004ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
004eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0051h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40DC50h:jmp64]                encoding(5 bytes) = e8 fa db 40 5f
0056h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0059h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
005dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
005eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0060h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__3Bytes => new byte[97]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x1A,0xEC,0x40,0x5F,0x48,0x8B,0xD8,0x8B,0x4E,0x08,0x89,0x4B,0x10,0x8B,0x4E,0x10,0x89,0x4B,0x14,0x89,0x7B,0x18,0x48,0xB9,0x58,0x5F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC9,0xEA,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xFA,0xDB,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N4> <bitcombo>b__5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDB855A20h, 7FFDDB855A8Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001ch mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40EBC0h:jmp64]                encoding(5 bytes) = e8 9a eb 40 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
0033h mov [rbx+10h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 10
0036h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0039h mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
003ch mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
003fh mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
0042h mov [rbx+1Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 1c
0045h mov rcx,7FFDDB9C6330h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6330h:imm64]         encoding(10 bytes) = 48 b9 30 63 9c db fd 7f 00 00
004fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40EA90h:jmp64]                encoding(5 bytes) = e8 3c ea 40 5f
0054h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0057h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
005bh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40DBD0h:jmp64]                encoding(5 bytes) = e8 6d db 40 5f
0063h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__5Bytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0x9A,0xEB,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x8B,0x40,0x08,0x89,0x43,0x10,0x8B,0x49,0x10,0x89,0x4B,0x14,0x8B,0x4E,0x10,0x89,0x4B,0x18,0x89,0x7B,0x1C,0x48,0xB9,0x30,0x63,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3C,0xEA,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x6D,0xDB,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N5> <bitcombo>b__7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDB855AB0h, 7FFDDB855B2Ah]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001ch mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40EB30h:jmp64]                encoding(5 bytes) = e8 0a eb 40 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
003ah mov [rbx+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 10
003dh mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
0040h mov [rbx+14h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 14
0043h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0046h mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
0049h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
004ch mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
004fh mov [rbx+20h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 20
0052h mov rcx,7FFDDB9C6708h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6708h:imm64]         encoding(10 bytes) = 48 b9 08 67 9c db fd 7f 00 00
005ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40EA00h:jmp64]                encoding(5 bytes) = e8 9f e9 40 5f
0061h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0064h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0068h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
006bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40DB40h:jmp64]                encoding(5 bytes) = e8 d0 da 40 5f
0070h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0073h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0077h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0078h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0079h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
007ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__7Bytes => new byte[123]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0x0A,0xEB,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x8B,0x52,0x08,0x89,0x53,0x10,0x8B,0x40,0x10,0x89,0x43,0x14,0x8B,0x49,0x10,0x89,0x4B,0x18,0x8B,0x4E,0x10,0x89,0x4B,0x1C,0x89,0x7B,0x20,0x48,0xB9,0x08,0x67,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0xE9,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xD0,0xDA,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N6> <bitcombo>b__9(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDB855B50h, 7FFDDB855BD9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001ch mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40EA90h:jmp64]                encoding(5 bytes) = e8 6a ea 40 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
003bh mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
003eh mov r8d,[r8+8]                ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 08
0042h mov [rbx+10h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 10
0046h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0049h mov [rbx+14h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 14
004ch mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
004fh mov [rbx+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 18
0052h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0055h mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
0058h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
005bh mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
005eh mov [rbx+24h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 24
0061h mov rcx,7FFDDB9C6AE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6ae0h:imm64]         encoding(10 bytes) = 48 b9 e0 6a 9c db fd 7f 00 00
006bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40E960h:jmp64]                encoding(5 bytes) = e8 f0 e8 40 5f
0070h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0073h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0077h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
007ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40DAA0h:jmp64]                encoding(5 bytes) = e8 21 da 40 5f
007fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0082h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0086h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0087h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0088h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0089h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__9Bytes => new byte[138]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x6A,0xEA,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x45,0x8B,0x40,0x08,0x44,0x89,0x43,0x10,0x8B,0x52,0x10,0x89,0x53,0x14,0x8B,0x40,0x10,0x89,0x43,0x18,0x8B,0x49,0x10,0x89,0x4B,0x1C,0x8B,0x4E,0x10,0x89,0x4B,0x20,0x89,0x7B,0x24,0x48,0xB9,0xE0,0x6A,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF0,0xE8,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x21,0xDA,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N7> <bitcombo>b__11(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDB855C00h, 7FFDDB855C98h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001ch mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40E9E0h:jmp64]                encoding(5 bytes) = e8 ba e9 40 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
003bh mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
003eh mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
0042h mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0045h mov r9d,[r9+8]                ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 08
0049h mov [rbx+10h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 10
004dh mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
0051h mov [rbx+14h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 14
0055h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0058h mov [rbx+18h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 18
005bh mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
005eh mov [rbx+1Ch],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 1c
0061h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0064h mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
0067h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
006ah mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
006dh mov [rbx+28h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 28
0070h mov rcx,7FFDDB9C6EB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6eb8h:imm64]         encoding(10 bytes) = 48 b9 b8 6e 9c db fd 7f 00 00
007ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40E8B0h:jmp64]                encoding(5 bytes) = e8 31 e8 40 5f
007fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0082h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0086h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0089h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40D9F0h:jmp64]                encoding(5 bytes) = e8 62 d9 40 5f
008eh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0091h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0095h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0096h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0097h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0098h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__11Bytes => new byte[153]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0xBA,0xE9,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x45,0x8B,0x49,0x08,0x44,0x89,0x4B,0x10,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x14,0x8B,0x52,0x10,0x89,0x53,0x18,0x8B,0x40,0x10,0x89,0x43,0x1C,0x8B,0x49,0x10,0x89,0x4B,0x20,0x8B,0x4E,0x10,0x89,0x4B,0x24,0x89,0x7B,0x28,0x48,0xB9,0xB8,0x6E,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x31,0xE8,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x62,0xD9,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq<N8> <bitcombo>b__13(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5, bit h)
; location: [7FFDDB855CC0h, 7FFDDB855D67h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9C2648h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c2648h:imm64]         encoding(10 bytes) = 48 b9 48 26 9c db fd 7f 00 00
001ch mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F40E920h:jmp64]                encoding(5 bytes) = e8 fa e8 40 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
003bh mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
003eh mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
0042h mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0045h mov r9,[r9+8]                 ; MOV(Mov_r64_rm64) [R9,mem(64u,R9:br,DS:sr)]          encoding(4 bytes) = 4d 8b 49 08
0049h mov r10,r9                    ; MOV(Mov_r64_rm64) [R10,R9]                           encoding(3 bytes) = 4d 8b d1
004ch mov r10d,[r10+8]              ; MOV(Mov_r32_rm32) [R10D,mem(32u,R10:br,DS:sr)]       encoding(4 bytes) = 45 8b 52 08
0050h mov [rbx+10h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R10D]       encoding(4 bytes) = 44 89 53 10
0054h mov r9d,[r9+10h]              ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 10
0058h mov [rbx+14h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 14
005ch mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
0060h mov [rbx+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 18
0064h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0067h mov [rbx+1Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 1c
006ah mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
006dh mov [rbx+20h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 20
0070h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0073h mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
0076h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0079h mov [rbx+28h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 28
007ch mov [rbx+2Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 2c
007fh mov rcx,7FFDDB9C7290h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7290h:imm64]         encoding(10 bytes) = 48 b9 90 72 9c db fd 7f 00 00
0089h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F40E7F0h:jmp64]                encoding(5 bytes) = e8 62 e7 40 5f
008eh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0091h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0095h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0098h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F40D930h:jmp64]                encoding(5 bytes) = e8 93 d8 40 5f
009dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a0h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
00a4h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a5h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a6h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00a7h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__13Bytes => new byte[168]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x26,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0xFA,0xE8,0x40,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x4D,0x8B,0x49,0x08,0x4D,0x8B,0xD1,0x45,0x8B,0x52,0x08,0x44,0x89,0x53,0x10,0x45,0x8B,0x49,0x10,0x44,0x89,0x4B,0x14,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x18,0x8B,0x52,0x10,0x89,0x53,0x1C,0x8B,0x40,0x10,0x89,0x43,0x20,0x8B,0x49,0x10,0x89,0x4B,0x24,0x8B,0x4E,0x10,0x89,0x4B,0x28,0x89,0x7B,0x2C,0x48,0xB9,0x90,0x72,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x62,0xE7,0x40,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x93,0xD8,0x40,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string <FormatTuple>b__18_0(IOperator t)
; location: [7FFDDB855D80h, 7FFDDB855DA1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0008h mov r11,7FFDDB031030h         ; MOV(Mov_r64_imm64) [R11,7ffddb031030h:imm64]         encoding(10 bytes) = 49 bb 30 10 03 db fd 7f 00 00
0012h mov rax,7FFDDB031030h         ; MOV(Mov_r64_imm64) [RAX,7ffddb031030h:imm64]         encoding(10 bytes) = 48 b8 30 10 03 db fd 7f 00 00
001ch mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
001fh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0021h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> <FormatTuple>b__18_0Bytes => new byte[36]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0xCA,0x49,0xBB,0x30,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x30,0x10,0x03,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x8B,0x00,0x39,0x09,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void <Emit>b__0(UnaryLogicOpKind:uint k)
; location: [7FFDDB855DC0h, 7FFDDB855E29h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,58h                   ; SUB(Sub_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 ec 58
0006h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0009h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ch lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
0011h mov ecx,0Ch                   ; MOV(Mov_r32_imm32) [ECX,ch:imm32]                    encoding(5 bytes) = b9 0c 00 00 00
0016h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0018h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
001dh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
001fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0023h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0028h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
002ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0030h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0035h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0037h call 7FFDDB847D00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF1F40h:jmp64]        encoding(5 bytes) = e8 04 1f ff ff
003ch vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
0042h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
0048h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004dh mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
004fh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0052h call 7FFDDB84AF50h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5190h:jmp64]        encoding(5 bytes) = e8 39 51 ff ff
0057h vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
005dh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0063h add rsp,58h                   ; ADD(Add_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 c4 58
0067h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0068h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0069h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <Emit>b__0Bytes => new byte[106]{0x57,0x56,0x48,0x83,0xEC,0x58,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x0C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x8B,0xF2,0x48,0x8B,0x79,0x08,0x48,0x8D,0x4C,0x24,0x38,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x4C,0x24,0x38,0x8B,0xD6,0xE8,0x04,0x1F,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x8B,0xD6,0x4C,0x8B,0xC7,0xE8,0x39,0x51,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x83,0xC4,0x58,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void <Emit>b__0(TernaryOpKind:byte k)
; location: [7FFDDB855E50h, 7FFDDB855EBBh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,58h                   ; SUB(Sub_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 ec 58
0006h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0009h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ch lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
0011h mov ecx,0Ch                   ; MOV(Mov_r32_imm32) [ECX,ch:imm32]                    encoding(5 bytes) = b9 0c 00 00 00
0016h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0018h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
001dh mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0021h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0026h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
002ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
002eh movzx edi,dl                  ; MOVZX(Movzx_r32_rm8) [EDI,DL]                        encoding(4 bytes) = 40 0f b6 fa
0032h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0034h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0039h call 7FFDDB848B60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2D10h:jmp64]        encoding(5 bytes) = e8 d2 2c ff ff
003eh vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
0044h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
004ah lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004fh mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0051h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0054h call 7FFDDB84AF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5110h:jmp64]        encoding(5 bytes) = e8 b7 50 ff ff
0059h vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
005fh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0065h add rsp,58h                   ; ADD(Add_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 c4 58
0069h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <Emit>b__0Bytes => new byte[108]{0x57,0x56,0x48,0x83,0xEC,0x58,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x0C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0x71,0x08,0x48,0x8D,0x4C,0x24,0x38,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x40,0x0F,0xB6,0xFA,0x8B,0xD7,0x48,0x8D,0x4C,0x24,0x38,0xE8,0xD2,0x2C,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x8B,0xD7,0x4C,0x8B,0xC6,0xE8,0xB7,0x50,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x83,0xC4,0x58,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
