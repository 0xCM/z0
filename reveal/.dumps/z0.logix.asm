; 2019-10-31 21:45:37:513
; function: ref AndGate and()
; location: [7FFDDB831260h, 7FFDDB83128Eh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,21h                   ; MOV(Mov_r32_imm32) [EDX,21h:imm32]                   encoding(5 bytes) = ba 21 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F433650h:jmp64]                encoding(5 bytes) = e8 37 36 43 5f
0019h mov rax,1E1F7826E30h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e30h:imm64]          encoding(10 bytes) = 48 b8 30 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rax,8                     ; ADD(Add_rm64_imm8) [RAX,8h:imm64]                    encoding(4 bytes) = 48 83 c0 08
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[47]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x21,0x00,0x00,0x00,0xE8,0x37,0x36,0x43,0x5F,0x48,0xB8,0x30,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC0,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ref XOrGate xor()
; location: [7FFDDB8312B0h, 7FFDDB8312DEh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,23h                   ; MOV(Mov_r32_imm32) [EDX,23h:imm32]                   encoding(5 bytes) = ba 23 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F433600h:jmp64]                encoding(5 bytes) = e8 e7 35 43 5f
0019h mov rax,1E1F7826E40h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e40h:imm64]          encoding(10 bytes) = 48 b8 40 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rax,8                     ; ADD(Add_rm64_imm8) [RAX,8h:imm64]                    encoding(4 bytes) = 48 83 c0 08
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[47]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x23,0x00,0x00,0x00,0xE8,0xE7,0x35,0x43,0x5F,0x48,0xB8,0x40,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC0,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:703
; function: void Compute(bit x, bit y, bit cin, out bit sum, out bit cout)
; location: [7FFDDB831360h, 7FFDDB831381h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0009h mov r10d,eax                  ; MOV(Mov_r32_rm32) [R10D,EAX]                         encoding(3 bytes) = 44 8b d0
000ch and r10d,r8d                  ; AND(And_r32_rm32) [R10D,R8D]                         encoding(3 bytes) = 45 23 d0
000fh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0011h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0014h mov [r9],eax                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),EAX]         encoding(3 bytes) = 41 89 01
0017h or edx,r10d                   ; OR(Or_r32_rm32) [EDX,R10D]                           encoding(3 bytes) = 41 0b d2
001ah mov rax,[rsp+28h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 44 24 28
001fh mov [rax],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(2 bytes) = 89 10
0021h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ComputeBytes => new byte[34]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x33,0xC2,0x44,0x8B,0xD0,0x45,0x23,0xD0,0x23,0xD1,0x41,0x33,0xC0,0x41,0x89,0x01,0x41,0x0B,0xD2,0x48,0x8B,0x44,0x24,0x28,0x89,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: OutPair<bit> Compute(bit x, bit y, bit cin)
; location: [7FFDDB8317A0h, 7FFDDB8317FAh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0009h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000bh mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
000eh and r9d,r8d                   ; AND(And_r32_rm32) [R9D,R8D]                          encoding(3 bytes) = 45 23 c8
0011h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0013h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0016h or edx,r9d                    ; OR(Or_r32_rm32) [EDX,R9D]                            encoding(3 bytes) = 41 0b d1
0019h lea rcx,[rsp+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 18
001eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0022h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0026h mov [rsp+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 18
002ah mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
002eh vmovdqu xmm0,xmmword ptr [rsp+18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 18
0034h vmovdqu xmmword ptr [rsp+8],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 08
003ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
003ch mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
003fh mov [rsp+4],eax               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 04
0043h mov eax,[rsp+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 08
0047h mov edx,[rsp+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 10
004bh mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
004eh mov [rsp+4],edx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 04
0052h mov rax,[rsp]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(4 bytes) = 48 8b 04 24
0056h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
005ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ComputeBytes => new byte[91]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x8B,0xC1,0x33,0xC2,0x44,0x8B,0xC8,0x45,0x23,0xC8,0x23,0xD1,0x41,0x33,0xC0,0x41,0x0B,0xD1,0x48,0x8D,0x4C,0x24,0x18,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x89,0x44,0x24,0x18,0x89,0x54,0x24,0x20,0xC5,0xFA,0x6F,0x44,0x24,0x18,0xC5,0xFA,0x7F,0x44,0x24,0x08,0x33,0xC0,0x89,0x04,0x24,0x89,0x44,0x24,0x04,0x8B,0x44,0x24,0x08,0x8B,0x54,0x24,0x10,0x89,0x04,0x24,0x89,0x54,0x24,0x04,0x48,0x8B,0x04,0x24,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector64 Compute(BitVector32 x, BitVector32 y, BitVector32 cin)
; location: [7FFDDB831820h, 7FFDDB831840h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0009h mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
000ch and r9d,r8d                   ; AND(And_r32_rm32) [R9D,R8D]                          encoding(3 bytes) = 45 23 c8
000fh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0011h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0014h or edx,r9d                    ; OR(Or_r32_rm32) [EDX,R9D]                            encoding(3 bytes) = 41 0b d1
0017h shl rdx,20h                   ; SHL(Shl_rm64_imm8) [RDX,20h:imm8]                    encoding(4 bytes) = 48 c1 e2 20
001bh mov eax,eax                   ; MOV(Mov_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 8b c0
001dh or rax,rdx                    ; OR(Or_r64_rm64) [RAX,RDX]                            encoding(3 bytes) = 48 0b c2
0020h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ComputeBytes => new byte[33]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x33,0xC2,0x44,0x8B,0xC8,0x45,0x23,0xC8,0x23,0xD1,0x41,0x33,0xC0,0x41,0x0B,0xD1,0x48,0xC1,0xE2,0x20,0x8B,0xC0,0x48,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:737
; function: ValueTuple<Bit,Bit> Send(Bit a, Bit b)
; location: [7FFDDB831860h, 7FFDDB83191Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000dh mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
0010h mov ebx,r9d                   ; MOV(Mov_r32_rm32) [EBX,R9D]                          encoding(3 bytes) = 41 8b d9
0013h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
001dh mov edx,25h                   ; MOV(Mov_r32_imm32) [EDX,25h:imm32]                   encoding(5 bytes) = ba 25 00 00 00
0022h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F433050h:jmp64]                encoding(5 bytes) = e8 29 30 43 5f
0027h movzx eax,dil                 ; MOVZX(Movzx_r32_rm8) [EAX,DIL]                       encoding(4 bytes) = 40 0f b6 c7
002bh test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
002dh jne short 0033h               ; JNE(Jne_rel8_64) [33h:jmp64]                         encoding(2 bytes) = 75 04
002fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0031h jmp short 0038h               ; JMP(Jmp_rel8_64) [38h:jmp64]                         encoding(2 bytes) = eb 05
0033h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0038h movzx edx,bl                  ; MOVZX(Movzx_r32_rm8) [EDX,BL]                        encoding(3 bytes) = 0f b6 d3
003bh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
003dh jne short 0043h               ; JNE(Jne_rel8_64) [43h:jmp64]                         encoding(2 bytes) = 75 04
003fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0041h jmp short 0048h               ; JMP(Jmp_rel8_64) [48h:jmp64]                         encoding(2 bytes) = eb 05
0043h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0048h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
004ah cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
004dh je short 0053h                ; JE(Je_rel8_64) [53h:jmp64]                           encoding(2 bytes) = 74 04
004fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0051h jmp short 0058h               ; JMP(Jmp_rel8_64) [58h:jmp64]                         encoding(2 bytes) = eb 05
0053h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0058h mov [rsp+38h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 38
005ch test dil,dil                  ; TEST(Test_rm8_r8) [DIL,DIL]                          encoding(3 bytes) = 40 84 ff
005fh jne short 0065h               ; JNE(Jne_rel8_64) [65h:jmp64]                         encoding(2 bytes) = 75 04
0061h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0063h jmp short 006ah               ; JMP(Jmp_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = eb 05
0065h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
006ah test bl,bl                    ; TEST(Test_rm8_r8) [BL,BL]                            encoding(2 bytes) = 84 db
006ch jne short 0072h               ; JNE(Jne_rel8_64) [72h:jmp64]                         encoding(2 bytes) = 75 04
006eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0070h jmp short 0077h               ; JMP(Jmp_rel8_64) [77h:jmp64]                         encoding(2 bytes) = eb 05
0072h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0077h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0079h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
007ch je short 0082h                ; JE(Je_rel8_64) [82h:jmp64]                           encoding(2 bytes) = 74 04
007eh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0080h jmp short 0087h               ; JMP(Jmp_rel8_64) [87h:jmp64]                         encoding(2 bytes) = eb 05
0082h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0087h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
008ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0090h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
0094h mov [rsp+20h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 20
0098h movzx eax,byte ptr [rsp+38h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 44 24 38
009dh movzx edx,byte ptr [rsp+20h]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 54 24 20
00a2h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
00a6h mov [rsp+30h],dl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(4 bytes) = 88 54 24 30
00aah vmovdqu xmm0,xmmword ptr [rsp+28h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 28
00b0h vmovdqu xmmword ptr [rsi],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSI:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 06
00b4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00b7h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
00bbh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00bch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00bdh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00beh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SendBytes => new byte[191]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x41,0x8B,0xD9,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x25,0x00,0x00,0x00,0xE8,0x29,0x30,0x43,0x5F,0x40,0x0F,0xB6,0xC7,0x84,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x0F,0xB6,0xD3,0x84,0xD2,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x33,0xC2,0x83,0xF8,0x01,0x74,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x88,0x44,0x24,0x38,0x40,0x84,0xFF,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x84,0xDB,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x23,0xC2,0x83,0xF8,0x01,0x74,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x28,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x88,0x44,0x24,0x20,0x0F,0xB6,0x44,0x24,0x38,0x0F,0xB6,0x54,0x24,0x20,0x88,0x44,0x24,0x28,0x88,0x54,0x24,0x30,0xC5,0xFA,0x6F,0x44,0x24,0x28,0xC5,0xFA,0x7F,0x06,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:789
; function: TernaryOpKind:byte Next(TernaryOpKind:byte src)
; location: [7FFDDB831940h, 7FFDDB831958h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx edx,cl                  ; MOVZX(Movzx_r32_rm8) [EDX,CL]                        encoding(3 bytes) = 0f b6 d1
0008h cmp edx,0FFh                  ; CMP(Cmp_rm32_imm32) [EDX,ffh:imm32]                  encoding(6 bytes) = 81 fa ff 00 00 00
000eh jne short 0013h               ; JNE(Jne_rel8_64) [13h:jmp64]                         encoding(2 bytes) = 75 03
0010h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0013h inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
0015h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0018h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> NextBytes => new byte[25]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xD1,0x81,0xFA,0xFF,0x00,0x00,0x00,0x75,0x03,0x33,0xC0,0xC3,0xFF,0xC2,0x0F,0xB6,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bool IsOperator(LogicExprKind:uint kind)
; location: [7FFDDB831970h, 7FFDDB83197Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h cmp ecx,20h                   ; CMP(Cmp_rm32_imm8) [ECX,20h:imm32]                   encoding(3 bytes) = 83 f9 20
0008h setae al                      ; SETAE(Setae_rm8) [AL]                                encoding(3 bytes) = 0f 93 c0
000bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> IsOperatorBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF9,0x20,0x0F,0x93,0xC0,0x0F,0xB6,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bool IsOperator(TypedExprKind:uint kind)
; location: [7FFDDB831990h, 7FFDDB83199Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h cmp ecx,20h                   ; CMP(Cmp_rm32_imm8) [ECX,20h:imm32]                   encoding(3 bytes) = 83 f9 20
0008h setae al                      ; SETAE(Setae_rm8) [AL]                                encoding(3 bytes) = 0f 93 c0
000bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> IsOperatorBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF9,0x20,0x0F,0x93,0xC0,0x0F,0xB6,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOpKind:uint ToLogical(BinaryBitwiseOpKind:uint kind)
; location: [7FFDDB8319B0h, 7FFDDB8319B7h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ToLogicalBytes => new byte[8]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind:uint ToBitwise(BinaryLogicOpKind:uint kind)
; location: [7FFDDB8319D0h, 7FFDDB8319D7h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ToBitwiseBytes => new byte[8]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:819
; function: uint get_OpId()
; location: [7FFDDB8319F0h, 7FFDDB8319F8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 10
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpIdBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_OpName()
; location: [7FFDDB831A10h, 7FFDDB831A19h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpNameBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:845
; function: UnaryBitwiseOpKind:uint get_Kind()
; location: [7FFDDB831A30h, 7FFDDB831A38h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB831A50h, 7FFDDB831A7Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,30h                   ; MOV(Mov_r32_imm32) [EDX,30h:imm32]                   encoding(5 bytes) = ba 30 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F432E60h:jmp64]                encoding(5 bytes) = e8 47 2e 43 5f
0019h mov rax,1E1F7826E58h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e58h:imm64]          encoding(10 bytes) = 48 b8 58 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x30,0x00,0x00,0x00,0xE8,0x47,0x2E,0x43,0x5F,0x48,0xB8,0x58,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:870
; function: BinaryBitwiseOpKind:uint get_Kind()
; location: [7FFDDB831A90h, 7FFDDB831A98h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB831AB0h, 7FFDDB831ADAh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,31h                   ; MOV(Mov_r32_imm32) [EDX,31h:imm32]                   encoding(5 bytes) = ba 31 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F432E00h:jmp64]                encoding(5 bytes) = e8 e7 2d 43 5f
0019h mov rax,1E1F7826E60h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e60h:imm64]          encoding(10 bytes) = 48 b8 60 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x31,0x00,0x00,0x00,0xE8,0xE7,0x2D,0x43,0x5F,0x48,0xB8,0x60,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:895
; function: TernaryOpKind:byte get_Kind()
; location: [7FFDDB831AF0h, 7FFDDB831AF9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx+14h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 14
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB831B10h, 7FFDDB831B3Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,32h                   ; MOV(Mov_r32_imm32) [EDX,32h:imm32]                   encoding(5 bytes) = ba 32 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F432DA0h:jmp64]                encoding(5 bytes) = e8 87 2d 43 5f
0019h mov rax,1E1F7826E68h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e68h:imm64]          encoding(10 bytes) = 48 b8 68 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x32,0x00,0x00,0x00,0xE8,0x87,0x2D,0x43,0x5F,0x48,0xB8,0x68,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:922
; function: BinaryLogicOpKind:uint get_Kind()
; location: [7FFDDB831B50h, 7FFDDB831B58h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB831B70h, 7FFDDB831B9Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,33h                   ; MOV(Mov_r32_imm32) [EDX,33h:imm32]                   encoding(5 bytes) = ba 33 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F432D40h:jmp64]                encoding(5 bytes) = e8 27 2d 43 5f
0019h mov rax,1E1F7826E70h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e70h:imm64]          encoding(10 bytes) = 48 b8 70 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x33,0x00,0x00,0x00,0xE8,0x27,0x2D,0x43,0x5F,0x48,0xB8,0x70,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:950
; function: ComparisonKind:uint get_Kind()
; location: [7FFDDB831BB0h, 7FFDDB831BB8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB831BD0h, 7FFDDB831BFAh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,34h                   ; MOV(Mov_r32_imm32) [EDX,34h:imm32]                   encoding(5 bytes) = ba 34 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F432CE0h:jmp64]                encoding(5 bytes) = e8 c7 2c 43 5f
0019h mov rax,1E1F7826E78h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e78h:imm64]          encoding(10 bytes) = 48 b8 78 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x34,0x00,0x00,0x00,0xE8,0xC7,0x2C,0x43,0x5F,0x48,0xB8,0x78,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:37:975
; function: ShiftOpKind:uint get_Kind()
; location: [7FFDDB831C10h, 7FFDDB831C18h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+14h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 14
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x14,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string get_KindName()
; location: [7FFDDB831C30h, 7FFDDB831C5Ah]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
000fh mov edx,35h                   ; MOV(Mov_r32_imm32) [EDX,35h:imm32]                   encoding(5 bytes) = ba 35 00 00 00
0014h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F432C80h:jmp64]                encoding(5 bytes) = e8 67 2c 43 5f
0019h mov rax,1E1F7826E80h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e80h:imm64]          encoding(10 bytes) = 48 b8 80 6e 82 f7 e1 01 00 00
0023h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0026h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_KindNameBytes => new byte[43]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x35,0x00,0x00,0x00,0xE8,0x67,0x2C,0x43,0x5F,0x48,0xB8,0x80,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:025
; function: bit eval(ILogicExpr expr)
; location: [7FFDDB831C70h, 7FFDDB831C7Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB82D9A8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82d9a8h:imm64]         encoding(10 bytes) = 48 b8 a8 d9 82 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> evalBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0xA8,0xD9,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit satisfied(ComparisonExpr expr, bit a, bit b)
; location: [7FFDDB831CA0h, 7FFDDB831D31h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000fh mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
0011h mov ebx,r8d                   ; MOV(Mov_r32_rm32) [EBX,R8D]                          encoding(3 bytes) = 41 8b d8
0014h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0016h mov rbp,[rsi+18h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 6e 18
001ah mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
001dh mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0021h cmp r14d,0                    ; CMP(Cmp_rm32_imm8) [R14D,0h:imm32]                   encoding(4 bytes) = 41 83 fe 00
0025h jbe short 008ch               ; JBE(Jbe_rel8_64) [8Ch:jmp64]                         encoding(2 bytes) = 76 65
0027h mov r15,[rcx+10h]             ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 4c 8b 79 10
002bh mov ecx,[r15]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R15:br,DS:sr)]        encoding(3 bytes) = 41 8b 0f
002eh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0038h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F432810h:jmp64]                encoding(5 bytes) = e8 d3 27 43 5f
003dh mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
0040h lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
0044h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0047h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F431950h:jmp64]                encoding(5 bytes) = e8 04 19 43 5f
004ch cmp r14d,1                    ; CMP(Cmp_rm32_imm8) [R14D,1h:imm32]                   encoding(4 bytes) = 41 83 fe 01
0050h jbe short 008ch               ; JBE(Jbe_rel8_64) [8Ch:jmp64]                         encoding(2 bytes) = 76 3a
0052h mov rdi,[rbp+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 7d 18
0056h mov ecx,[rdi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RDI:br,DS:sr)]        encoding(2 bytes) = 8b 0f
0058h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0062h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F432810h:jmp64]                encoding(5 bytes) = e8 a9 27 43 5f
0067h mov [rax+8],ebx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EBX]        encoding(3 bytes) = 89 58 08
006ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
006eh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0071h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F431950h:jmp64]                encoding(5 bytes) = e8 da 18 43 5f
0076h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0079h call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBD08h:jmp64]        encoding(5 bytes) = e8 8a bc ff ff
007eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
007fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0083h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0084h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0085h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0086h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0087h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0089h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
008bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
008ch call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F55D260h:jmp64]                encoding(5 bytes) = e8 cf d1 55 5f
0091h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> satisfiedBytes => new byte[146]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x8B,0xFA,0x41,0x8B,0xD8,0x8B,0x0E,0x48,0x8B,0x6E,0x18,0x48,0x8B,0xCD,0x44,0x8B,0x71,0x08,0x41,0x83,0xFE,0x00,0x76,0x65,0x4C,0x8B,0x79,0x10,0x41,0x8B,0x0F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD3,0x27,0x43,0x5F,0x89,0x78,0x08,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x04,0x19,0x43,0x5F,0x41,0x83,0xFE,0x01,0x76,0x3A,0x48,0x8B,0x7D,0x18,0x8B,0x0F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA9,0x27,0x43,0x5F,0x89,0x58,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xDA,0x18,0x43,0x5F,0x48,0x8B,0xCE,0xE8,0x8A,0xBC,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xCF,0xD1,0x55,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit equal(VariedLogicExpr a, VariedLogicExpr b)
; location: [7FFDDB832160h, 7FFDDB832305h]
0000h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0001h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0003h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0005h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0006h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,48h                   ; SUB(Sub_rm64_imm8) [RSP,48h:imm64]                   encoding(4 bytes) = 48 83 ec 48
000ch lea rbp,[rsp+70h]             ; LEA(Lea_r64_m) [RBP,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 6c 24 70
0011h mov [rbp-48h],rsp             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RSP]        encoding(4 bytes) = 48 89 65 b8
0015h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0018h mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
001bh mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
001fh mov rbx,[rdi+10h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 5f 10
0023h mov r14d,0AAh                 ; MOV(Mov_r32_imm32) [R14D,aah:imm32]                  encoding(6 bytes) = 41 be aa 00 00 00
0029h mov r15d,1                    ; MOV(Mov_r32_imm32) [R15D,1h:imm32]                   encoding(6 bytes) = 41 bf 01 00 00 00
002fh mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
0032h cmp ecx,[rbx+8]               ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RBX:br,DS:sr)]        encoding(3 bytes) = 3b 4b 08
0035h jne near ptr 0106h            ; JNE(Jne_rel32_64) [106h:jmp64]                       encoding(6 bytes) = 0f 85 cb 00 00 00
003bh call 7FFDDB82E358h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFC1F8h:jmp64]        encoding(5 bytes) = e8 b8 c1 ff ff
0040h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0043h mov r11,7FFDDB000E38h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e38h:imm64]         encoding(10 bytes) = 49 bb 38 0e 00 db fd 7f 00 00
004dh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
004fh call qword ptr [7FFDDB000E38h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 83 ec 7c ff
0055h mov [rbp-38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RAX]        encoding(4 bytes) = 48 89 45 c8
0059h mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
005dh mov r11,7FFDDB000E40h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e40h:imm64]         encoding(10 bytes) = 49 bb 40 0e 00 db fd 7f 00 00
0067h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0069h call qword ptr [7FFDDB000E40h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 71 ec 7c ff
006fh test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
0071h je short 00c4h                ; JE(Je_rel8_64) [C4h:jmp64]                           encoding(2 bytes) = 74 51
0073h mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
0077h mov r11,7FFDDB000E48h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e48h:imm64]         encoding(10 bytes) = 49 bb 48 0e 00 db fd 7f 00 00
0081h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0083h call qword ptr [7FFDDB000E48h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 5f ec 7c ff
0089h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
008ch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
008fh call 7FFDDB82F180h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD020h:jmp64]        encoding(5 bytes) = e8 8c cf ff ff
0094h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0097h call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB848h:jmp64]        encoding(5 bytes) = e8 ac b7 ff ff
009ch mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
009eh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00a1h call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB848h:jmp64]        encoding(5 bytes) = e8 a2 b7 ff ff
00a6h cmp ebx,eax                   ; CMP(Cmp_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 3b d8
00a8h jne short 00dch               ; JNE(Jne_rel8_64) [DCh:jmp64]                         encoding(2 bytes) = 75 32
00aah mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
00aeh mov r11,7FFDDB000E40h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e40h:imm64]         encoding(10 bytes) = 49 bb 40 0e 00 db fd 7f 00 00
00b8h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00bah call qword ptr [7FFDDB000E40h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 20 ec 7c ff
00c0h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
00c2h jne short 0073h               ; JNE(Jne_rel8_64) [73h:jmp64]                         encoding(2 bytes) = 75 af
00c4h mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
00c8h mov r11,7FFDDB000E50h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e50h:imm64]         encoding(10 bytes) = 49 bb 50 0e 00 db fd 7f 00 00
00d2h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00d4h call qword ptr [7FFDDB000E50h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 16 ec 7c ff
00dah jmp short 00f4h               ; JMP(Jmp_rel8_64) [F4h:jmp64]                         encoding(2 bytes) = eb 18
00dch mov rcx,rsp                   ; MOV(Mov_r64_rm64) [RCX,RSP]                          encoding(3 bytes) = 48 8b cc
00dfh call 7FFDDB8322C2h            ; CALL(Call_rel32_64) [162h:jmp64]                     encoding(5 bytes) = e8 7e 00 00 00
00e4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00e5h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
00e7h lea rsp,[rbp-28h]             ; LEA(Lea_r64_m) [RSP,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 65 d8
00ebh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00ech pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00edh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00eeh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00f0h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00f2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00f3h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00f4h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
00f9h lea rsp,[rbp-28h]             ; LEA(Lea_r64_m) [RSP,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 65 d8
00fdh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00feh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00ffh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0100h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0102h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0104h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0105h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0106h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0108h mov edi,[rbx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RBX:br,DS:sr)]        encoding(3 bytes) = 8b 7b 08
010bh mov ecx,2A7h                  ; MOV(Mov_r32_imm32) [ECX,2a7h:imm32]                  encoding(5 bytes) = b9 a7 02 00 00
0110h mov rdx,7FFDDB284D08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb284d08h:imm64]         encoding(10 bytes) = 48 ba 08 4d 28 db fd 7f 00 00
011ah call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F55D580h:jmp64]                encoding(5 bytes) = e8 61 d4 55 5f
011fh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0122h mov ecx,2B3h                  ; MOV(Mov_r32_imm32) [ECX,2b3h:imm32]                  encoding(5 bytes) = b9 b3 02 00 00
0127h mov rdx,7FFDDB284D08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb284d08h:imm64]         encoding(10 bytes) = 48 ba 08 4d 28 db fd 7f 00 00
0131h call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F55D580h:jmp64]                encoding(5 bytes) = e8 4a d4 55 5f
0136h mov r9,rax                    ; MOV(Mov_r64_rm64) [R9,RAX]                           encoding(3 bytes) = 4c 8b c8
0139h lea r8,[rbp-30h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RBP:br,SS:sr)]        encoding(4 bytes) = 4c 8d 45 d0
013dh mov [r8],r15b                 ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),R15L]           encoding(3 bytes) = 45 88 38
0140h mov [r8+4],r14d               ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R14D]        encoding(4 bytes) = 45 89 70 04
0144h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0147h mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0149h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
014bh mov rax,[rbp-30h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 45 d0
014fh mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
0154h call 7FFDDB4277A0h            ; CALL(Call_rel32_64) [FFFFFFFFFFBF5640h:jmp64]        encoding(5 bytes) = e8 e7 54 bf ff
0159h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
015ch call 7FFE3AC1A4F0h            ; CALL(Call_rel32_64) [5F3E8390h:jmp64]                encoding(5 bytes) = e8 2f 82 3e 5f
0161h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0162h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0163h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0165h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0167h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0168h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0169h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
016ah sub rsp,38h                   ; SUB(Sub_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 ec 38
016eh mov rbp,[rcx+28h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 69 28
0172h mov [rsp+28h],rbp             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RBP]        encoding(5 bytes) = 48 89 6c 24 28
0177h lea rbp,[rbp+70h]             ; LEA(Lea_r64_m) [RBP,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 6d 70
017bh cmp qword ptr [rbp-38h],0     ; CMP(Cmp_rm64_imm8) [mem(64u,RBP:br,SS:sr),0h:imm64]  encoding(5 bytes) = 48 83 7d c8 00
0180h je short 0198h                ; JE(Je_rel8_64) [198h:jmp64]                          encoding(2 bytes) = 74 16
0182h mov rcx,[rbp-38h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 4d c8
0186h mov r11,7FFDDB000E50h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e50h:imm64]         encoding(10 bytes) = 49 bb 50 0e 00 db fd 7f 00 00
0190h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0192h call qword ptr [7FFDDB000E50h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 58 eb 7c ff
0198h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0199h add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
019dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
019eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
019fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01a0h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
01a2h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
01a4h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01a5h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> equalBytes => new byte[422]{0x55,0x41,0x57,0x41,0x56,0x57,0x56,0x53,0x48,0x83,0xEC,0x48,0x48,0x8D,0x6C,0x24,0x70,0x48,0x89,0x65,0xB8,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x10,0x48,0x8B,0x5F,0x10,0x41,0xBE,0xAA,0x00,0x00,0x00,0x41,0xBF,0x01,0x00,0x00,0x00,0x8B,0x49,0x08,0x3B,0x4B,0x08,0x0F,0x85,0xCB,0x00,0x00,0x00,0xE8,0xB8,0xC1,0xFF,0xFF,0x48,0x8B,0xC8,0x49,0xBB,0x38,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x83,0xEC,0x7C,0xFF,0x48,0x89,0x45,0xC8,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x40,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x71,0xEC,0x7C,0xFF,0x85,0xC0,0x74,0x51,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x48,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x5F,0xEC,0x7C,0xFF,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0xE8,0x8C,0xCF,0xFF,0xFF,0x48,0x8B,0xCE,0xE8,0xAC,0xB7,0xFF,0xFF,0x8B,0xD8,0x48,0x8B,0xCF,0xE8,0xA2,0xB7,0xFF,0xFF,0x3B,0xD8,0x75,0x32,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x40,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x20,0xEC,0x7C,0xFF,0x85,0xC0,0x75,0xAF,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x50,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x16,0xEC,0x7C,0xFF,0xEB,0x18,0x48,0x8B,0xCC,0xE8,0x7E,0x00,0x00,0x00,0x90,0x33,0xC0,0x48,0x8D,0x65,0xD8,0x5B,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x5D,0xC3,0xB8,0x01,0x00,0x00,0x00,0x48,0x8D,0x65,0xD8,0x5B,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x5D,0xC3,0x8B,0xF1,0x8B,0x7B,0x08,0xB9,0xA7,0x02,0x00,0x00,0x48,0xBA,0x08,0x4D,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x61,0xD4,0x55,0x5F,0x48,0x8B,0xD8,0xB9,0xB3,0x02,0x00,0x00,0x48,0xBA,0x08,0x4D,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4A,0xD4,0x55,0x5F,0x4C,0x8B,0xC8,0x4C,0x8D,0x45,0xD0,0x45,0x88,0x38,0x45,0x89,0x70,0x04,0x4C,0x8B,0xC3,0x8B,0xCE,0x8B,0xD7,0x48,0x8B,0x45,0xD0,0x48,0x89,0x44,0x24,0x20,0xE8,0xE7,0x54,0xBF,0xFF,0x48,0x8B,0xC8,0xE8,0x2F,0x82,0x3E,0x5F,0xCC,0x55,0x41,0x57,0x41,0x56,0x57,0x56,0x53,0x48,0x83,0xEC,0x38,0x48,0x8B,0x69,0x28,0x48,0x89,0x6C,0x24,0x28,0x48,0x8D,0x6D,0x70,0x48,0x83,0x7D,0xC8,0x00,0x74,0x16,0x48,0x8B,0x4D,0xC8,0x49,0xBB,0x50,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x58,0xEB,0x7C,0xFF,0x90,0x48,0x83,0xC4,0x38,0x5B,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x5D,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:052
; function: bit eval(ILogicExpr expr)
; location: [7FFDDB832340h, 7FFDDB832494h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
000ch mov rcx,7FFDDB9CE978h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ce978h:imm64]         encoding(10 bytes) = 48 b9 78 e9 9c db fd 7f 00 00
0016h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431190h:jmp64]                encoding(5 bytes) = e8 75 11 43 5f
001bh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
001eh jne short 0084h               ; JNE(Jne_rel8_64) [84h:jmp64]                         encoding(2 bytes) = 75 64
0020h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0023h mov rcx,7FFDDB9CEEC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ceec0h:imm64]         encoding(10 bytes) = 48 b9 c0 ee 9c db fd 7f 00 00
002dh call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431190h:jmp64]                encoding(5 bytes) = e8 5e 11 43 5f
0032h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0035h jne short 00a6h               ; JNE(Jne_rel8_64) [A6h:jmp64]                         encoding(2 bytes) = 75 6f
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah mov rcx,7FFDDB9CC758h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cc758h:imm64]         encoding(10 bytes) = 48 b9 58 c7 9c db fd 7f 00 00
0044h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431190h:jmp64]                encoding(5 bytes) = e8 47 11 43 5f
0049h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
004ch jne short 00c8h               ; JNE(Jne_rel8_64) [C8h:jmp64]                         encoding(2 bytes) = 75 7a
004eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0051h mov rcx,7FFDDB9CAF08h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9caf08h:imm64]         encoding(10 bytes) = 48 b9 08 af 9c db fd 7f 00 00
005bh call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431190h:jmp64]                encoding(5 bytes) = e8 30 11 43 5f
0060h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0063h jne short 00dfh               ; JNE(Jne_rel8_64) [DFh:jmp64]                         encoding(2 bytes) = 75 7a
0065h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0068h mov rcx,7FFDDB9CBBC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cbbc0h:imm64]         encoding(10 bytes) = 48 b9 c0 bb 9c db fd 7f 00 00
0072h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431190h:jmp64]                encoding(5 bytes) = e8 19 11 43 5f
0077h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
007ah test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
007dh jne short 00e9h               ; JNE(Jne_rel8_64) [E9h:jmp64]                         encoding(2 bytes) = 75 6a
007fh jmp near ptr 0145h            ; JMP(Jmp_rel32_64) [145h:jmp64]                       encoding(5 bytes) = e9 c1 00 00 00
0084h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0087h mov r11,7FFDDB000E58h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e58h:imm64]         encoding(10 bytes) = 49 bb 58 0e 00 db fd 7f 00 00
0091h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0093h call qword ptr [7FFDDB000E58h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 7f ea 7c ff
0099h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
009ch call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB668h:jmp64]        encoding(5 bytes) = e8 c7 b5 ff ff
00a1h jmp near ptr 014dh            ; JMP(Jmp_rel32_64) [14Dh:jmp64]                       encoding(5 bytes) = e9 a7 00 00 00
00a6h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00a9h mov r11,7FFDDB000E60h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e60h:imm64]         encoding(10 bytes) = 49 bb 60 0e 00 db fd 7f 00 00
00b3h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00b5h call qword ptr [7FFDDB000E60h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 65 ea 7c ff
00bbh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00beh call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB668h:jmp64]        encoding(5 bytes) = e8 a5 b5 ff ff
00c3h jmp near ptr 014dh            ; JMP(Jmp_rel32_64) [14Dh:jmp64]                       encoding(5 bytes) = e9 85 00 00 00
00c8h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00cbh mov r11,7FFDDB000E68h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e68h:imm64]         encoding(10 bytes) = 49 bb 68 0e 00 db fd 7f 00 00
00d5h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00d7h call qword ptr [7FFDDB000E68h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 4b ea 7c ff
00ddh jmp short 014dh               ; JMP(Jmp_rel8_64) [14Dh:jmp64]                        encoding(2 bytes) = eb 6e
00dfh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00e2h call 7FFDDB82D9B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB670h:jmp64]        encoding(5 bytes) = e8 89 b5 ff ff
00e7h jmp short 014dh               ; JMP(Jmp_rel8_64) [14Dh:jmp64]                        encoding(2 bytes) = eb 64
00e9h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00ech mov r11,7FFDDB000E70h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e70h:imm64]         encoding(10 bytes) = 49 bb 70 0e 00 db fd 7f 00 00
00f6h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00f8h call qword ptr [7FFDDB000E70h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 32 ea 7c ff
00feh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0101h call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB668h:jmp64]        encoding(5 bytes) = e8 62 b5 ff ff
0106h mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
0108h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
010bh mov r11,7FFDDB000E78h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e78h:imm64]         encoding(10 bytes) = 49 bb 78 0e 00 db fd 7f 00 00
0115h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0117h call qword ptr [7FFDDB000E78h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 1b ea 7c ff
011dh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0120h call 7FFDDB82D9A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB668h:jmp64]        encoding(5 bytes) = e8 43 b5 ff ff
0125h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0127h mov [rsp+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 20
012bh lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0130h cmp esi,eax                   ; CMP(Cmp_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 3b f0
0132h je short 0138h                ; JE(Je_rel8_64) [138h:jmp64]                          encoding(2 bytes) = 74 04
0134h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0136h jmp short 013dh               ; JMP(Jmp_rel8_64) [13Dh:jmp64]                        encoding(2 bytes) = eb 05
0138h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
013dh mov [rcx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(2 bytes) = 89 01
013fh mov eax,[rsp+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 20
0143h jmp short 014dh               ; JMP(Jmp_rel8_64) [14Dh:jmp64]                        encoding(2 bytes) = eb 08
0145h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0148h call 7FFDDB82D9B8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB678h:jmp64]        encoding(5 bytes) = e8 2b b5 ff ff
014dh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
014eh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0152h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0153h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0154h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[341]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xD6,0x48,0xB9,0x78,0xE9,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x75,0x11,0x43,0x5F,0x48,0x85,0xC0,0x75,0x64,0x48,0x8B,0xD6,0x48,0xB9,0xC0,0xEE,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5E,0x11,0x43,0x5F,0x48,0x85,0xC0,0x75,0x6F,0x48,0x8B,0xD6,0x48,0xB9,0x58,0xC7,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x47,0x11,0x43,0x5F,0x48,0x85,0xC0,0x75,0x7A,0x48,0x8B,0xD6,0x48,0xB9,0x08,0xAF,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x30,0x11,0x43,0x5F,0x48,0x85,0xC0,0x75,0x7A,0x48,0x8B,0xD6,0x48,0xB9,0xC0,0xBB,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x19,0x11,0x43,0x5F,0x48,0x8B,0xF8,0x48,0x85,0xFF,0x75,0x6A,0xE9,0xC1,0x00,0x00,0x00,0x48,0x8B,0xC8,0x49,0xBB,0x58,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x7F,0xEA,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0xC7,0xB5,0xFF,0xFF,0xE9,0xA7,0x00,0x00,0x00,0x48,0x8B,0xC8,0x49,0xBB,0x60,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x65,0xEA,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0xA5,0xB5,0xFF,0xFF,0xE9,0x85,0x00,0x00,0x00,0x48,0x8B,0xC8,0x49,0xBB,0x68,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x4B,0xEA,0x7C,0xFF,0xEB,0x6E,0x48,0x8B,0xC8,0xE8,0x89,0xB5,0xFF,0xFF,0xEB,0x64,0x48,0x8B,0xCF,0x49,0xBB,0x70,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x32,0xEA,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0x62,0xB5,0xFF,0xFF,0x8B,0xF0,0x48,0x8B,0xCF,0x49,0xBB,0x78,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x1B,0xEA,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0x43,0xB5,0xFF,0xFF,0x33,0xC9,0x89,0x4C,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x3B,0xF0,0x74,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x01,0x8B,0x44,0x24,0x20,0xEB,0x08,0x48,0x8B,0xCE,0xE8,0x2B,0xB5,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(ILogicOp expr)
; location: [7FFDDB8324B0h, 7FFDDB832674h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
000eh mov rcx,7FFDDB9CE108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ce108h:imm64]         encoding(10 bytes) = 48 b9 08 e1 9c db fd 7f 00 00
0018h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431020h:jmp64]                encoding(5 bytes) = e8 03 10 43 5f
001dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0020h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0023h jne short 0062h               ; JNE(Jne_rel8_64) [62h:jmp64]                         encoding(2 bytes) = 75 3d
0025h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0028h mov rcx,7FFDDB9CB040h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cb040h:imm64]         encoding(10 bytes) = 48 b9 40 b0 9c db fd 7f 00 00
0032h call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431020h:jmp64]                encoding(5 bytes) = e8 e9 0f 43 5f
0037h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
003ah test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
003dh jne short 00afh               ; JNE(Jne_rel8_64) [AFh:jmp64]                         encoding(2 bytes) = 75 70
003fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0042h mov rcx,7FFDDB9CD5C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9cd5c8h:imm64]         encoding(10 bytes) = 48 b9 c8 d5 9c db fd 7f 00 00
004ch call 7FFE3AC634D0h            ; CALL(Call_rel32_64) [5F431020h:jmp64]                encoding(5 bytes) = e8 cf 0f 43 5f
0051h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0054h test rbp,rbp                  ; TEST(Test_rm64_r64) [RBP,RBP]                        encoding(3 bytes) = 48 85 ed
0057h jne near ptr 011eh            ; JNE(Jne_rel32_64) [11Eh:jmp64]                       encoding(6 bytes) = 0f 85 c1 00 00 00
005dh jmp near ptr 01afh            ; JMP(Jmp_rel32_64) [1AFh:jmp64]                       encoding(5 bytes) = e9 4d 01 00 00
0062h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0065h mov r11,7FFDDB000E80h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e80h:imm64]         encoding(10 bytes) = 49 bb 80 0e 00 db fd 7f 00 00
006fh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0071h call qword ptr [7FFDDB000E80h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 59 e9 7c ff
0077h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
0079h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
007ch mov r11,7FFDDB000E88h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e88h:imm64]         encoding(10 bytes) = 49 bb 88 0e 00 db fd 7f 00 00
0086h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0088h call qword ptr [7FFDDB000E88h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 4a e9 7c ff
008eh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0091h call 7FFDDB832340h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE90h:jmp64]        encoding(5 bytes) = e8 fa fd ff ff
0096h mov edx,eax                   ; MOV(Mov_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 8b d0
0098h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
009ah mov rax,7FFDDB82F368h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f368h:imm64]         encoding(10 bytes) = 48 b8 68 f3 82 db fd 7f 00 00
00a4h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00a8h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a9h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00aah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00abh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00ach jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
00afh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
00b2h mov r11,7FFDDB000E90h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e90h:imm64]         encoding(10 bytes) = 49 bb 90 0e 00 db fd 7f 00 00
00bch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00beh call qword ptr [7FFDDB000E90h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 1c e9 7c ff
00c4h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
00c6h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
00c9h mov r11,7FFDDB000E98h         ; MOV(Mov_r64_imm64) [R11,7ffddb000e98h:imm64]         encoding(10 bytes) = 49 bb 98 0e 00 db fd 7f 00 00
00d3h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00d5h call qword ptr [7FFDDB000E98h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 0d e9 7c ff
00dbh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00deh call 7FFDDB832340h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE90h:jmp64]        encoding(5 bytes) = e8 ad fd ff ff
00e3h mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
00e5h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
00e8h mov r11,7FFDDB000EA0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ea0h:imm64]         encoding(10 bytes) = 49 bb a0 0e 00 db fd 7f 00 00
00f2h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00f4h call qword ptr [7FFDDB000EA0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 f6 e8 7c ff
00fah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00fdh call 7FFDDB832340h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE90h:jmp64]        encoding(5 bytes) = e8 8e fd ff ff
0102h mov r8d,eax                   ; MOV(Mov_r32_rm32) [R8D,EAX]                          encoding(3 bytes) = 44 8b c0
0105h mov ecx,ebp                   ; MOV(Mov_r32_rm32) [ECX,EBP]                          encoding(2 bytes) = 8b cd
0107h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0109h mov rax,7FFDDB82F370h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f370h:imm64]         encoding(10 bytes) = 48 b8 70 f3 82 db fd 7f 00 00
0113h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0117h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0118h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0119h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
011ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
011bh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
011eh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0121h mov r11,7FFDDB000EA8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ea8h:imm64]         encoding(10 bytes) = 49 bb a8 0e 00 db fd 7f 00 00
012bh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
012dh call qword ptr [7FFDDB000EA8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 c5 e8 7c ff
0133h mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
0135h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0138h mov r11,7FFDDB000EB0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000eb0h:imm64]         encoding(10 bytes) = 49 bb b0 0e 00 db fd 7f 00 00
0142h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0144h call qword ptr [7FFDDB000EB0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 b6 e8 7c ff
014ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
014dh call 7FFDDB832340h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE90h:jmp64]        encoding(5 bytes) = e8 3e fd ff ff
0152h mov edi,eax                   ; MOV(Mov_r32_rm32) [EDI,EAX]                          encoding(2 bytes) = 8b f8
0154h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0157h mov r11,7FFDDB000EB8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000eb8h:imm64]         encoding(10 bytes) = 49 bb b8 0e 00 db fd 7f 00 00
0161h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0163h call qword ptr [7FFDDB000EB8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 9f e8 7c ff
0169h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
016ch call 7FFDDB832340h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE90h:jmp64]        encoding(5 bytes) = e8 1f fd ff ff
0171h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
0173h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0176h mov r11,7FFDDB000EC0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ec0h:imm64]         encoding(10 bytes) = 49 bb c0 0e 00 db fd 7f 00 00
0180h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0182h call qword ptr [7FFDDB000EC0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 88 e8 7c ff
0188h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
018bh call 7FFDDB832340h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFE90h:jmp64]        encoding(5 bytes) = e8 00 fd ff ff
0190h mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
0193h mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0195h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0197h mov r8d,ebx                   ; MOV(Mov_r32_rm32) [R8D,EBX]                          encoding(3 bytes) = 44 8b c3
019ah mov rax,7FFDDB82F388h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f388h:imm64]         encoding(10 bytes) = 48 b8 88 f3 82 db fd 7f 00 00
01a4h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01a8h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01a9h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01aah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01abh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01ach jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
01afh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
01b2h mov rax,7FFDDB82D9B8h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82d9b8h:imm64]         encoding(10 bytes) = 48 b8 b8 d9 82 db fd 7f 00 00
01bch add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01c0h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01c1h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01c2h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01c3h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01c4h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> evalBytes => new byte[455]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xD6,0x48,0xB9,0x08,0xE1,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x03,0x10,0x43,0x5F,0x48,0x8B,0xF8,0x48,0x85,0xFF,0x75,0x3D,0x48,0x8B,0xD6,0x48,0xB9,0x40,0xB0,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE9,0x0F,0x43,0x5F,0x48,0x8B,0xD8,0x48,0x85,0xDB,0x75,0x70,0x48,0x8B,0xD6,0x48,0xB9,0xC8,0xD5,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCF,0x0F,0x43,0x5F,0x48,0x8B,0xE8,0x48,0x85,0xED,0x0F,0x85,0xC1,0x00,0x00,0x00,0xE9,0x4D,0x01,0x00,0x00,0x48,0x8B,0xCF,0x49,0xBB,0x80,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x59,0xE9,0x7C,0xFF,0x8B,0xD8,0x48,0x8B,0xCF,0x49,0xBB,0x88,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x4A,0xE9,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0xFA,0xFD,0xFF,0xFF,0x8B,0xD0,0x8B,0xCB,0x48,0xB8,0x68,0xF3,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0x49,0xBB,0x90,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x1C,0xE9,0x7C,0xFF,0x8B,0xE8,0x48,0x8B,0xCB,0x49,0xBB,0x98,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x0D,0xE9,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0xAD,0xFD,0xFF,0xFF,0x8B,0xF0,0x48,0x8B,0xCB,0x49,0xBB,0xA0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xF6,0xE8,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0x8E,0xFD,0xFF,0xFF,0x44,0x8B,0xC0,0x8B,0xCD,0x8B,0xD6,0x48,0xB8,0x70,0xF3,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCD,0x49,0xBB,0xA8,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xC5,0xE8,0x7C,0xFF,0x8B,0xF0,0x48,0x8B,0xCD,0x49,0xBB,0xB0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xB6,0xE8,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0x3E,0xFD,0xFF,0xFF,0x8B,0xF8,0x48,0x8B,0xCD,0x49,0xBB,0xB8,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x9F,0xE8,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0x1F,0xFD,0xFF,0xFF,0x8B,0xD8,0x48,0x8B,0xCD,0x49,0xBB,0xC0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x88,0xE8,0x7C,0xFF,0x48,0x8B,0xC8,0xE8,0x00,0xFD,0xFF,0xFF,0x44,0x8B,0xC8,0x8B,0xCE,0x8B,0xD7,0x44,0x8B,0xC3,0x48,0xB8,0x88,0xF3,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCE,0x48,0xB8,0xB8,0xD9,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit unhandled(ILogicExpr expr)
; location: [7FFDDB8326A0h, 7FFDDB8326F9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB1B0390h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1b0390h:imm64]         encoding(10 bytes) = 48 b9 90 03 1b db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431E10h:jmp64]                encoding(5 bytes) = e8 f8 1d 43 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh mov ecx,28Bh                  ; MOV(Mov_r32_imm32) [ECX,28bh:imm32]                  encoding(5 bytes) = b9 8b 02 00 00
0020h mov rdx,7FFDDB284D08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb284d08h:imm64]         encoding(10 bytes) = 48 ba 08 4d 28 db fd 7f 00 00
002ah call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F55D040h:jmp64]                encoding(5 bytes) = e8 11 d0 55 5f
002fh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0032h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0035h call 7FFDDB124130h            ; CALL(Call_rel32_64) [FFFFFFFFFF8F1A90h:jmp64]        encoding(5 bytes) = e8 56 1a 8f ff
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0040h call 7FFDDB124C88h            ; CALL(Call_rel32_64) [FFFFFFFFFF8F25E8h:jmp64]        encoding(5 bytes) = e8 a3 25 8f ff
0045h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0049h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
004ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430F50h:jmp64]                encoding(5 bytes) = e8 ff 0e 43 5f
0051h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0054h call 7FFE3AC1A4F0h            ; CALL(Call_rel32_64) [5F3E7E50h:jmp64]                encoding(5 bytes) = e8 f7 7d 3e 5f
0059h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> unhandledBytes => new byte[90]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0x90,0x03,0x1B,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF8,0x1D,0x43,0x5F,0x48,0x8B,0xF8,0xB9,0x8B,0x02,0x00,0x00,0x48,0xBA,0x08,0x4D,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0xD0,0x55,0x5F,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0xE8,0x56,0x1A,0x8F,0xFF,0x48,0x8B,0xF0,0x48,0x8B,0xCF,0xE8,0xA3,0x25,0x8F,0xFF,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xFF,0x0E,0x43,0x5F,0x48,0x8B,0xCF,0xE8,0xF7,0x7D,0x3E,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:274
; function: LiteralLogicSeq bitseq(bit[] terms)
; location: [7FFDDB832720h, 7FFDDB832750h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431D90h:jmp64]                encoding(5 bytes) = e8 78 1d 43 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
001fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0022h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430ED0h:jmp64]                encoding(5 bytes) = e8 a9 0e 43 5f
0027h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
002fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bitseqBytes => new byte[49]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x78,0x1D,0x43,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xA9,0x0E,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp not(ILogicExpr a)
; location: [7FFDDB832770h, 7FFDDB8327A7h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431D40h:jmp64]                encoding(5 bytes) = e8 28 1d 43 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh mov dword ptr [rdi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 10 01 00 00 00
0022h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0026h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0029h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430E80h:jmp64]                encoding(5 bytes) = e8 52 0e 43 5f
002eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0031h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0035h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0036h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notBytes => new byte[56]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0x1D,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x52,0x0E,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp not(bit a)
; location: [7FFDDB8327C0h, 7FFDDB83280Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0008h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0012h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431CF0h:jmp64]                encoding(5 bytes) = e8 d9 1c 43 5f
0017h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001ah mov [rdi+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 08
001dh mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
0027h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431CF0h:jmp64]                encoding(5 bytes) = e8 c4 1c 43 5f
002ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
002fh mov dword ptr [rsi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 10 01 00 00 00
0036h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430E30h:jmp64]                encoding(5 bytes) = e8 ee 0d 43 5f
0042h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0045h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0049h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notBytes => new byte[76]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF1,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD9,0x1C,0x43,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x08,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0x1C,0x43,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xEE,0x0D,0x43,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp and(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832830h, 7FFDDB832878h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431C80h:jmp64]                encoding(5 bytes) = e8 64 1c 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 43 18 01 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430DC0h:jmp64]                encoding(5 bytes) = e8 8e 0d 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430DC0h:jmp64]                encoding(5 bytes) = e8 82 0d 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x1C,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x01,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x0D,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x0D,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp and(bit a, bit b)
; location: [7FFDDB8328A0h, 7FFDDB832910h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431C10h:jmp64]                encoding(5 bytes) = e8 f6 1b 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431C10h:jmp64]                encoding(5 bytes) = e8 e1 1b 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431C10h:jmp64]                encoding(5 bytes) = e8 cc 1b 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 18 01 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430D50h:jmp64]                encoding(5 bytes) = e8 f6 0c 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430D50h:jmp64]                encoding(5 bytes) = e8 ea 0c 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x1B,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x1B,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x1B,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x0C,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x0C,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nand(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832930h, 7FFDDB832978h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431B80h:jmp64]                encoding(5 bytes) = e8 64 1b 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],0Eh   ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),eh:imm32] encoding(7 bytes) = c7 43 18 0e 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430CC0h:jmp64]                encoding(5 bytes) = e8 8e 0c 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430CC0h:jmp64]                encoding(5 bytes) = e8 82 0c 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> nandBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x1B,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x0E,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x0C,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x0C,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nand(bit a, bit b)
; location: [7FFDDB8329A0h, 7FFDDB832A10h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431B10h:jmp64]                encoding(5 bytes) = e8 f6 1a 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431B10h:jmp64]                encoding(5 bytes) = e8 e1 1a 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431B10h:jmp64]                encoding(5 bytes) = e8 cc 1a 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],0Eh   ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),eh:imm32] encoding(7 bytes) = c7 47 18 0e 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430C50h:jmp64]                encoding(5 bytes) = e8 f6 0b 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430C50h:jmp64]                encoding(5 bytes) = e8 ea 0b 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> nandBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x1A,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x1A,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x1A,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x0E,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x0B,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x0B,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp or(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832A30h, 7FFDDB832A78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431A80h:jmp64]                encoding(5 bytes) = e8 64 1a 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),7h:imm32] encoding(7 bytes) = c7 43 18 07 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430BC0h:jmp64]                encoding(5 bytes) = e8 8e 0b 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430BC0h:jmp64]                encoding(5 bytes) = e8 82 0b 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> orBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x1A,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x07,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x0B,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x0B,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp or(bit a, bit b)
; location: [7FFDDB832AA0h, 7FFDDB832B10h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431A10h:jmp64]                encoding(5 bytes) = e8 f6 19 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431A10h:jmp64]                encoding(5 bytes) = e8 e1 19 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431A10h:jmp64]                encoding(5 bytes) = e8 cc 19 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),7h:imm32] encoding(7 bytes) = c7 47 18 07 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430B50h:jmp64]                encoding(5 bytes) = e8 f6 0a 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430B50h:jmp64]                encoding(5 bytes) = e8 ea 0a 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> orBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x19,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x19,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x19,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x07,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x0A,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x0A,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nor(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832B30h, 7FFDDB832B78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431980h:jmp64]                encoding(5 bytes) = e8 64 19 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],8     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),8h:imm32] encoding(7 bytes) = c7 43 18 08 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430AC0h:jmp64]                encoding(5 bytes) = e8 8e 0a 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430AC0h:jmp64]                encoding(5 bytes) = e8 82 0a 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> norBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x19,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x08,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x0A,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x0A,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp nor(bit a, bit b)
; location: [7FFDDB832BA0h, 7FFDDB832C10h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431910h:jmp64]                encoding(5 bytes) = e8 f6 18 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431910h:jmp64]                encoding(5 bytes) = e8 e1 18 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431910h:jmp64]                encoding(5 bytes) = e8 cc 18 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],8     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),8h:imm32] encoding(7 bytes) = c7 47 18 08 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430A50h:jmp64]                encoding(5 bytes) = e8 f6 09 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430A50h:jmp64]                encoding(5 bytes) = e8 ea 09 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> norBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x18,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x18,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x18,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x08,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x09,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x09,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xor(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832C30h, 7FFDDB832C78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431880h:jmp64]                encoding(5 bytes) = e8 64 18 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],6     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),6h:imm32] encoding(7 bytes) = c7 43 18 06 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4309C0h:jmp64]                encoding(5 bytes) = e8 8e 09 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4309C0h:jmp64]                encoding(5 bytes) = e8 82 09 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x18,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x06,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x09,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x09,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xor(bit a, bit b)
; location: [7FFDDB832CA0h, 7FFDDB832D10h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431810h:jmp64]                encoding(5 bytes) = e8 f6 17 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431810h:jmp64]                encoding(5 bytes) = e8 e1 17 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431810h:jmp64]                encoding(5 bytes) = e8 cc 17 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],6     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),6h:imm32] encoding(7 bytes) = c7 47 18 06 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430950h:jmp64]                encoding(5 bytes) = e8 f6 08 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430950h:jmp64]                encoding(5 bytes) = e8 ea 08 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x17,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x17,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x17,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x06,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x08,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x08,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xnor(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832D30h, 7FFDDB832D78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431780h:jmp64]                encoding(5 bytes) = e8 64 17 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],9     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),9h:imm32] encoding(7 bytes) = c7 43 18 09 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4308C0h:jmp64]                encoding(5 bytes) = e8 8e 08 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4308C0h:jmp64]                encoding(5 bytes) = e8 82 08 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xnorBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x17,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x09,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x08,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x08,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp xnor(bit a, bit b)
; location: [7FFDDB832DA0h, 7FFDDB832E10h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431710h:jmp64]                encoding(5 bytes) = e8 f6 16 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431710h:jmp64]                encoding(5 bytes) = e8 e1 16 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431710h:jmp64]                encoding(5 bytes) = e8 cc 16 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],9     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),9h:imm32] encoding(7 bytes) = c7 47 18 09 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430850h:jmp64]                encoding(5 bytes) = e8 f6 07 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430850h:jmp64]                encoding(5 bytes) = e8 ea 07 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xnorBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x16,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x16,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x16,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x09,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x07,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x07,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp left(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832E30h, 7FFDDB832E78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431680h:jmp64]                encoding(5 bytes) = e8 64 16 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],3     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),3h:imm32] encoding(7 bytes) = c7 43 18 03 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4307C0h:jmp64]                encoding(5 bytes) = e8 8e 07 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4307C0h:jmp64]                encoding(5 bytes) = e8 82 07 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> leftBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x16,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x03,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x07,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x07,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp left(bit a, bit b)
; location: [7FFDDB832EA0h, 7FFDDB832F10h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431610h:jmp64]                encoding(5 bytes) = e8 f6 15 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431610h:jmp64]                encoding(5 bytes) = e8 e1 15 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431610h:jmp64]                encoding(5 bytes) = e8 cc 15 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],3     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),3h:imm32] encoding(7 bytes) = c7 47 18 03 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430750h:jmp64]                encoding(5 bytes) = e8 f6 06 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430750h:jmp64]                encoding(5 bytes) = e8 ea 06 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> leftBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x15,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x15,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x15,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x03,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x06,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x06,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp right(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB832F30h, 7FFDDB832F78h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431580h:jmp64]                encoding(5 bytes) = e8 64 15 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],5     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),5h:imm32] encoding(7 bytes) = c7 43 18 05 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4306C0h:jmp64]                encoding(5 bytes) = e8 8e 06 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4306C0h:jmp64]                encoding(5 bytes) = e8 82 06 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rightBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x15,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x05,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x06,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x06,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp right(bit a, bit b)
; location: [7FFDDB832FA0h, 7FFDDB833010h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431510h:jmp64]                encoding(5 bytes) = e8 f6 14 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431510h:jmp64]                encoding(5 bytes) = e8 e1 14 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431510h:jmp64]                encoding(5 bytes) = e8 cc 14 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],5     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),5h:imm32] encoding(7 bytes) = c7 47 18 05 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430650h:jmp64]                encoding(5 bytes) = e8 f6 05 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430650h:jmp64]                encoding(5 bytes) = e8 ea 05 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rightBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x14,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x14,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x14,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x05,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x05,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x05,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp lnot(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB833030h, 7FFDDB833078h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431480h:jmp64]                encoding(5 bytes) = e8 64 14 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],0Ch   ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),ch:imm32] encoding(7 bytes) = c7 43 18 0c 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4305C0h:jmp64]                encoding(5 bytes) = e8 8e 05 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4305C0h:jmp64]                encoding(5 bytes) = e8 82 05 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lnotBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x14,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x0C,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x05,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x05,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp lnot(bit a, bit b)
; location: [7FFDDB8330A0h, 7FFDDB833110h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431410h:jmp64]                encoding(5 bytes) = e8 f6 13 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431410h:jmp64]                encoding(5 bytes) = e8 e1 13 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431410h:jmp64]                encoding(5 bytes) = e8 cc 13 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],0Ch   ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),ch:imm32] encoding(7 bytes) = c7 47 18 0c 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430550h:jmp64]                encoding(5 bytes) = e8 f6 04 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430550h:jmp64]                encoding(5 bytes) = e8 ea 04 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lnotBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x13,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x13,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x13,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x0C,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x04,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x04,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp rnot(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB833130h, 7FFDDB833178h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431380h:jmp64]                encoding(5 bytes) = e8 64 13 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],0Ah   ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),ah:imm32] encoding(7 bytes) = c7 43 18 0a 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4304C0h:jmp64]                encoding(5 bytes) = e8 8e 04 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4304C0h:jmp64]                encoding(5 bytes) = e8 82 04 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rnotBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x13,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x0A,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x04,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x04,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp rnot(bit a, bit b)
; location: [7FFDDB8331A0h, 7FFDDB833210h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431310h:jmp64]                encoding(5 bytes) = e8 f6 12 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431310h:jmp64]                encoding(5 bytes) = e8 e1 12 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431310h:jmp64]                encoding(5 bytes) = e8 cc 12 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],0Ah   ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),ah:imm32] encoding(7 bytes) = c7 47 18 0a 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430450h:jmp64]                encoding(5 bytes) = e8 f6 03 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430450h:jmp64]                encoding(5 bytes) = e8 ea 03 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rnotBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x12,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x12,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x12,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x0A,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x03,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x03,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp imply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB833230h, 7FFDDB833278h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431280h:jmp64]                encoding(5 bytes) = e8 64 12 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],0Bh   ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),bh:imm32] encoding(7 bytes) = c7 43 18 0b 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4303C0h:jmp64]                encoding(5 bytes) = e8 8e 03 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4303C0h:jmp64]                encoding(5 bytes) = e8 82 03 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> implyBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x12,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x0B,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x03,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x03,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp imply(bit a, bit b)
; location: [7FFDDB8332A0h, 7FFDDB833310h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431210h:jmp64]                encoding(5 bytes) = e8 f6 11 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431210h:jmp64]                encoding(5 bytes) = e8 e1 11 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431210h:jmp64]                encoding(5 bytes) = e8 cc 11 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],0Bh   ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),bh:imm32] encoding(7 bytes) = c7 47 18 0b 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430350h:jmp64]                encoding(5 bytes) = e8 f6 02 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430350h:jmp64]                encoding(5 bytes) = e8 ea 02 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> implyBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x11,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x11,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x11,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x0B,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x02,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x02,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp notimply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB833330h, 7FFDDB833378h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431180h:jmp64]                encoding(5 bytes) = e8 64 11 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],4     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),4h:imm32] encoding(7 bytes) = c7 43 18 04 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4302C0h:jmp64]                encoding(5 bytes) = e8 8e 02 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4302C0h:jmp64]                encoding(5 bytes) = e8 82 02 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notimplyBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x11,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x04,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x02,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x02,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp notimply(bit a, bit b)
; location: [7FFDDB8333A0h, 7FFDDB833410h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431110h:jmp64]                encoding(5 bytes) = e8 f6 10 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431110h:jmp64]                encoding(5 bytes) = e8 e1 10 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431110h:jmp64]                encoding(5 bytes) = e8 cc 10 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],4     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),4h:imm32] encoding(7 bytes) = c7 47 18 04 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430250h:jmp64]                encoding(5 bytes) = e8 f6 01 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430250h:jmp64]                encoding(5 bytes) = e8 ea 01 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notimplyBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x10,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x10,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x10,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x04,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x01,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x01,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cimply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB833430h, 7FFDDB833478h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431080h:jmp64]                encoding(5 bytes) = e8 64 10 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],0Dh   ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),dh:imm32] encoding(7 bytes) = c7 43 18 0d 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4301C0h:jmp64]                encoding(5 bytes) = e8 8e 01 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4301C0h:jmp64]                encoding(5 bytes) = e8 82 01 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cimplyBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x10,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x0D,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x01,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x01,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cimply(bit a, bit b)
; location: [7FFDDB8334A0h, 7FFDDB833510h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431010h:jmp64]                encoding(5 bytes) = e8 f6 0f 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431010h:jmp64]                encoding(5 bytes) = e8 e1 0f 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F431010h:jmp64]                encoding(5 bytes) = e8 cc 0f 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],0Dh   ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),dh:imm32] encoding(7 bytes) = c7 47 18 0d 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430150h:jmp64]                encoding(5 bytes) = e8 f6 00 43 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430150h:jmp64]                encoding(5 bytes) = e8 ea 00 43 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cimplyBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x0F,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x0F,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x0F,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x0D,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0x00,0x43,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0x00,0x43,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cnotimply(ILogicExpr a, ILogicExpr b)
; location: [7FFDDB833530h, 7FFDDB833578h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F430F80h:jmp64]                encoding(5 bytes) = e8 64 0f 43 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov dword ptr [rbx+18h],2     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),2h:imm32] encoding(7 bytes) = c7 43 18 02 00 00 00
0026h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
002ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4300C0h:jmp64]                encoding(5 bytes) = e8 8e 00 43 5f
0032h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F4300C0h:jmp64]                encoding(5 bytes) = e8 82 00 43 5f
003eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0041h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0045h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cnotimplyBytes => new byte[73]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x0F,0x43,0x5F,0x48,0x8B,0xD8,0xC7,0x43,0x18,0x02,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x00,0x43,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0x82,0x00,0x43,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp cnotimply(bit a, bit b)
; location: [7FFDDB8335A0h, 7FFDDB833610h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F430F10h:jmp64]                encoding(5 bytes) = e8 f6 0e 43 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 08
0020h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F430F10h:jmp64]                encoding(5 bytes) = e8 e1 0e 43 5f
002fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0032h mov [rsi+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),EDI]        encoding(3 bytes) = 89 7e 08
0035h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F430F10h:jmp64]                encoding(5 bytes) = e8 cc 0e 43 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h mov dword ptr [rdi+18h],2     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),2h:imm32] encoding(7 bytes) = c7 47 18 02 00 00 00
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430050h:jmp64]                encoding(5 bytes) = e8 f6 ff 42 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F430050h:jmp64]                encoding(5 bytes) = e8 ea ff 42 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0070h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cnotimplyBytes => new byte[113]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x0E,0x43,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x0E,0x43,0x5F,0x48,0x8B,0xF0,0x89,0x7E,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x0E,0x43,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x18,0x02,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xF6,0xFF,0x42,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD6,0xE8,0xEA,0xFF,0x42,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq> bitcombo(int n)
; location: [7FFDDBA10080h, 7FFDDBA11E53h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0010h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
0012h cmp ecx,7                     ; CMP(Cmp_rm32_imm8) [ECX,7h:imm32]                    encoding(3 bytes) = 83 f9 07
0015h ja near ptr 1bb0h             ; JA(Ja_rel32_64) [1BB0h:jmp64]                        encoding(6 bytes) = 0f 87 95 1b 00 00
001bh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
001dh lea rdx,[7FFDDBA11E58h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 b4 1d 00 00
0024h mov edx,[rdx+rcx*4]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 14 8a
0027h lea rax,[7FFDDBA10090h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 e2 ff ff ff
002eh add rdx,rax                   ; ADD(Add_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 03 d0
0031h jmp rdx                       ; JMP(Jmp_rm64) [RDX]                                  encoding(2 bytes) = ff e2
0033h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
003dh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0042h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 19 45 25 5f
0047h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
004ah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
004ch mov [rsi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4e 10
004fh mov dword ptr [rsi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 14 01 00 00 00
0056h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0060h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0065h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 c6 47 25 5f
006ah mov rcx,1E1F7826ED0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ed0h:imm64]          encoding(10 bytes) = 48 b9 d0 6e 82 f7 e1 01 00 00
0074h mov r8,[rcx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 01
0077h test r8,r8                    ; TEST(Test_rm64_r64) [R8,R8]                          encoding(3 bytes) = 4d 85 c0
007ah jne short 00d0h               ; JNE(Jne_rel8_64) [D0h:jmp64]                         encoding(2 bytes) = 75 54
007ch mov rcx,7FFDDBA04578h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04578h:imm64]         encoding(10 bytes) = 48 b9 78 45 a0 db fd 7f 00 00
0086h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 a5 43 25 5f
008bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
008eh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0098h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
009bh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
009eh je near ptr 1bd3h             ; JE(Je_rel32_64) [1BD3h:jmp64]                        encoding(6 bytes) = 0f 84 2f 1b 00 00
00a4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
00a8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 c3 34 25 5f
00adh mov rdx,7FFDDB830BA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ba8h:imm64]         encoding(10 bytes) = 48 ba a8 0b 83 db fd 7f 00 00
00b7h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
00bbh mov rcx,1E1F7826ED0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ed0h:imm64]          encoding(10 bytes) = 48 b9 d0 6e 82 f7 e1 01 00 00
00c5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00c8h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 73 34 25 5f
00cdh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
00d0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00d3h mov rcx,7FFDDBA04700h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04700h:imm64]         encoding(10 bytes) = 48 b9 00 47 a0 db fd 7f 00 00
00ddh mov rax,7FFDDB832040h         ; MOV(Mov_r64_imm64) [RAX,7ffddb832040h:imm64]         encoding(10 bytes) = 48 b8 40 20 83 db fd 7f 00 00
00e7h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00ebh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00ech pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00edh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00eeh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00efh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
00f1h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
00f3h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00f5h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00f7h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
00fah mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0104h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0109h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 52 44 25 5f
010eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0111h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0113h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0116h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
011dh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0127h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
012ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 ff 46 25 5f
0131h mov rcx,1E1F7826ED8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ed8h:imm64]          encoding(10 bytes) = 48 b9 d8 6e 82 f7 e1 01 00 00
013bh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
013eh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0141h jne short 0194h               ; JNE(Jne_rel8_64) [194h:jmp64]                        encoding(2 bytes) = 75 51
0143h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
014dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 de 42 25 5f
0152h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0155h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
015fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0162h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0165h je near ptr 1bdch             ; JE(Je_rel32_64) [1BDCh:jmp64]                        encoding(6 bytes) = 0f 84 71 1a 00 00
016bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
016fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 fc 33 25 5f
0174h mov rdx,7FFDDB830BB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bb0h:imm64]         encoding(10 bytes) = 48 ba b0 0b 83 db fd 7f 00 00
017eh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0182h mov rcx,1E1F7826ED8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ed8h:imm64]          encoding(10 bytes) = 48 b9 d8 6e 82 f7 e1 01 00 00
018ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
018fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 ac 33 25 5f
0194h mov rcx,1E1F7826EE0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ee0h:imm64]          encoding(10 bytes) = 48 b9 e0 6e 82 f7 e1 01 00 00
019eh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01a1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01a4h jne short 01fah               ; JNE(Jne_rel8_64) [1FAh:jmp64]                        encoding(2 bytes) = 75 54
01a6h mov rcx,7FFDDBA04410h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04410h:imm64]         encoding(10 bytes) = 48 b9 10 44 a0 db fd 7f 00 00
01b0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 7b 42 25 5f
01b5h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01b8h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
01c2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01c5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01c8h je near ptr 1be5h             ; JE(Je_rel32_64) [1BE5h:jmp64]                        encoding(6 bytes) = 0f 84 17 1a 00 00
01ceh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01d2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 99 33 25 5f
01d7h mov rdx,7FFDDB830BB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bb8h:imm64]         encoding(10 bytes) = 48 ba b8 0b 83 db fd 7f 00 00
01e1h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01e5h mov rcx,1E1F7826EE0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ee0h:imm64]          encoding(10 bytes) = 48 b9 e0 6e 82 f7 e1 01 00 00
01efh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
01f2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 49 33 25 5f
01f7h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
01fah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01fdh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0200h mov rcx,7FFDDBA04528h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04528h:imm64]         encoding(10 bytes) = 48 b9 28 45 a0 db fd 7f 00 00
020ah mov rax,7FFDDB831E10h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e10h:imm64]         encoding(10 bytes) = 48 b8 10 1e 83 db fd 7f 00 00
0214h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0218h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0219h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
021ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
021bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
021ch pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
021eh pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0220h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0222h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0224h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0227h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0231h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0236h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 25 43 25 5f
023bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
023eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0240h mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
0243h mov dword ptr [rbx+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 43 14 01 00 00 00
024ah mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0254h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0259h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 d2 45 25 5f
025eh mov rcx,1E1F7826EE8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ee8h:imm64]          encoding(10 bytes) = 48 b9 e8 6e 82 f7 e1 01 00 00
0268h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
026bh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
026eh jne short 02c1h               ; JNE(Jne_rel8_64) [2C1h:jmp64]                        encoding(2 bytes) = 75 51
0270h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
027ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 b1 41 25 5f
027fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0282h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
028ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
028fh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0292h je near ptr 1beeh             ; JE(Je_rel32_64) [1BEEh:jmp64]                        encoding(6 bytes) = 0f 84 56 19 00 00
0298h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
029ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 cf 32 25 5f
02a1h mov rdx,7FFDDB830BC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bc0h:imm64]         encoding(10 bytes) = 48 ba c0 0b 83 db fd 7f 00 00
02abh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
02afh mov rcx,1E1F7826EE8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ee8h:imm64]          encoding(10 bytes) = 48 b9 e8 6e 82 f7 e1 01 00 00
02b9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
02bch call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 7f 32 25 5f
02c1h mov rcx,1E1F7826EF0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ef0h:imm64]          encoding(10 bytes) = 48 b9 f0 6e 82 f7 e1 01 00 00
02cbh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
02ceh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
02d1h jne short 0327h               ; JNE(Jne_rel8_64) [327h:jmp64]                        encoding(2 bytes) = 75 54
02d3h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
02ddh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 4e 41 25 5f
02e2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
02e5h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
02efh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02f2h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02f5h je near ptr 1bf7h             ; JE(Je_rel32_64) [1BF7h:jmp64]                        encoding(6 bytes) = 0f 84 fc 18 00 00
02fbh lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
02ffh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 6c 32 25 5f
0304h mov rdx,7FFDDB830BC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bc8h:imm64]         encoding(10 bytes) = 48 ba c8 0b 83 db fd 7f 00 00
030eh mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0312h mov rcx,1E1F7826EF0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ef0h:imm64]          encoding(10 bytes) = 48 b9 f0 6e 82 f7 e1 01 00 00
031ch mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
031fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 1c 32 25 5f
0324h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0327h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
032ah mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
032dh mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
0337h call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21D90h:jmp64]        encoding(5 bytes) = e8 54 1a e2 ff
033ch mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
033fh mov rcx,1E1F7826EF8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ef8h:imm64]          encoding(10 bytes) = 48 b9 f8 6e 82 f7 e1 01 00 00
0349h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
034ch test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
034fh jne short 03a2h               ; JNE(Jne_rel8_64) [3A2h:jmp64]                        encoding(2 bytes) = 75 51
0351h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
035bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 d0 40 25 5f
0360h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0363h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
036dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0370h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0373h je near ptr 1c00h             ; JE(Je_rel32_64) [1C00h:jmp64]                        encoding(6 bytes) = 0f 84 87 18 00 00
0379h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
037dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 ee 31 25 5f
0382h mov rdx,7FFDDB830BD0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bd0h:imm64]         encoding(10 bytes) = 48 ba d0 0b 83 db fd 7f 00 00
038ch mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0390h mov rcx,1E1F7826EF8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ef8h:imm64]          encoding(10 bytes) = 48 b9 f8 6e 82 f7 e1 01 00 00
039ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
039dh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 9e 31 25 5f
03a2h mov rcx,1E1F7826F00h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f00h:imm64]          encoding(10 bytes) = 48 b9 00 6f 82 f7 e1 01 00 00
03ach mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
03afh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
03b2h jne short 0408h               ; JNE(Jne_rel8_64) [408h:jmp64]                        encoding(2 bytes) = 75 54
03b4h mov rcx,7FFDDBA042A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba042a8h:imm64]         encoding(10 bytes) = 48 b9 a8 42 a0 db fd 7f 00 00
03beh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 6d 40 25 5f
03c3h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
03c6h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
03d0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
03d3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
03d6h je near ptr 1c09h             ; JE(Je_rel32_64) [1C09h:jmp64]                        encoding(6 bytes) = 0f 84 2d 18 00 00
03dch lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
03e0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 8b 31 25 5f
03e5h mov rdx,7FFDDB830BD8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bd8h:imm64]         encoding(10 bytes) = 48 ba d8 0b 83 db fd 7f 00 00
03efh mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
03f3h mov rcx,1E1F7826F00h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f00h:imm64]          encoding(10 bytes) = 48 b9 00 6f 82 f7 e1 01 00 00
03fdh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0400h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 3b 31 25 5f
0405h mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
0408h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
040bh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
040eh mov rcx,7FFDDBA043C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba043c0h:imm64]         encoding(10 bytes) = 48 b9 c0 43 a0 db fd 7f 00 00
0418h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
0422h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0426h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0427h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0428h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0429h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
042ah pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
042ch pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
042eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0430h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0432h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0435h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
043fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0444h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 17 41 25 5f
0449h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
044ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
044eh mov [r14+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),ECX]        encoding(4 bytes) = 41 89 4e 10
0452h mov dword ptr [r14+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 14 01 00 00 00
045ah mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0464h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0469h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 c2 43 25 5f
046eh mov rcx,1E1F7826F08h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f08h:imm64]          encoding(10 bytes) = 48 b9 08 6f 82 f7 e1 01 00 00
0478h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
047bh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
047eh jne short 04d1h               ; JNE(Jne_rel8_64) [4D1h:jmp64]                        encoding(2 bytes) = 75 51
0480h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
048ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 a1 3f 25 5f
048fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0492h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
049ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
049fh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
04a2h je near ptr 1c12h             ; JE(Je_rel32_64) [1C12h:jmp64]                        encoding(6 bytes) = 0f 84 6a 17 00 00
04a8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
04ach call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 bf 30 25 5f
04b1h mov rdx,7FFDDB830BE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830be0h:imm64]         encoding(10 bytes) = 48 ba e0 0b 83 db fd 7f 00 00
04bbh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
04bfh mov rcx,1E1F7826F08h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f08h:imm64]          encoding(10 bytes) = 48 b9 08 6f 82 f7 e1 01 00 00
04c9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
04cch call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 6f 30 25 5f
04d1h mov rcx,1E1F7826F10h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f10h:imm64]          encoding(10 bytes) = 48 b9 10 6f 82 f7 e1 01 00 00
04dbh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
04deh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
04e1h jne short 0537h               ; JNE(Jne_rel8_64) [537h:jmp64]                        encoding(2 bytes) = 75 54
04e3h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
04edh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 3e 3f 25 5f
04f2h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
04f5h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
04ffh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0502h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0505h je near ptr 1c1bh             ; JE(Je_rel32_64) [1C1Bh:jmp64]                        encoding(6 bytes) = 0f 84 10 17 00 00
050bh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
050fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 5c 30 25 5f
0514h mov rdx,7FFDDB830BE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830be8h:imm64]         encoding(10 bytes) = 48 ba e8 0b 83 db fd 7f 00 00
051eh mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
0522h mov rcx,1E1F7826F10h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f10h:imm64]          encoding(10 bytes) = 48 b9 10 6f 82 f7 e1 01 00 00
052ch mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
052fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 0c 30 25 5f
0534h mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
0537h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
053ah mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
053dh mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
0547h call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21D90h:jmp64]        encoding(5 bytes) = e8 44 18 e2 ff
054ch mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
054fh mov rcx,1E1F7826F18h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f18h:imm64]          encoding(10 bytes) = 48 b9 18 6f 82 f7 e1 01 00 00
0559h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
055ch test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
055fh jne short 05b2h               ; JNE(Jne_rel8_64) [5B2h:jmp64]                        encoding(2 bytes) = 75 51
0561h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
056bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 c0 3e 25 5f
0570h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0573h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
057dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0580h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0583h je near ptr 1c24h             ; JE(Je_rel32_64) [1C24h:jmp64]                        encoding(6 bytes) = 0f 84 9b 16 00 00
0589h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
058dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 de 2f 25 5f
0592h mov rdx,7FFDDB830BF0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bf0h:imm64]         encoding(10 bytes) = 48 ba f0 0b 83 db fd 7f 00 00
059ch mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
05a0h mov rcx,1E1F7826F18h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f18h:imm64]          encoding(10 bytes) = 48 b9 18 6f 82 f7 e1 01 00 00
05aah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
05adh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 8e 2f 25 5f
05b2h mov rcx,1E1F7826F20h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f20h:imm64]          encoding(10 bytes) = 48 b9 20 6f 82 f7 e1 01 00 00
05bch mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
05bfh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
05c2h jne short 061ah               ; JNE(Jne_rel8_64) [61Ah:jmp64]                        encoding(2 bytes) = 75 56
05c4h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
05ceh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 5d 3e 25 5f
05d3h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
05d6h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
05e0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
05e3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
05e6h je near ptr 1c2dh             ; JE(Je_rel32_64) [1C2Dh:jmp64]                        encoding(6 bytes) = 0f 84 41 16 00 00
05ech lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
05f1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 7a 2f 25 5f
05f6h mov rdx,7FFDDB830BF8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830bf8h:imm64]         encoding(10 bytes) = 48 ba f8 0b 83 db fd 7f 00 00
0600h mov [r12+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R12:br,DS:sr),RDX]        encoding(5 bytes) = 49 89 54 24 18
0605h mov rcx,1E1F7826F20h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f20h:imm64]          encoding(10 bytes) = 48 b9 20 6f 82 f7 e1 01 00 00
060fh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
0612h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 29 2f 25 5f
0617h mov r9,r12                    ; MOV(Mov_r64_rm64) [R9,R12]                           encoding(3 bytes) = 4d 8b cc
061ah mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
061dh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0620h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
062ah call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 e1 17 e2 ff
062fh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
0632h mov rcx,1E1F7826F28h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f28h:imm64]          encoding(10 bytes) = 48 b9 28 6f 82 f7 e1 01 00 00
063ch mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
063fh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0642h jne short 0695h               ; JNE(Jne_rel8_64) [695h:jmp64]                        encoding(2 bytes) = 75 51
0644h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
064eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 dd 3d 25 5f
0653h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0656h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0660h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0663h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0666h je near ptr 1c36h             ; JE(Je_rel32_64) [1C36h:jmp64]                        encoding(6 bytes) = 0f 84 ca 15 00 00
066ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0670h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 fb 2e 25 5f
0675h mov rdx,7FFDDB830C00h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c00h:imm64]         encoding(10 bytes) = 48 ba 00 0c 83 db fd 7f 00 00
067fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0683h mov rcx,1E1F7826F28h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f28h:imm64]          encoding(10 bytes) = 48 b9 28 6f 82 f7 e1 01 00 00
068dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0690h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 ab 2e 25 5f
0695h mov rcx,1E1F7826F30h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f30h:imm64]          encoding(10 bytes) = 48 b9 30 6f 82 f7 e1 01 00 00
069fh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
06a2h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
06a5h jne short 06fbh               ; JNE(Jne_rel8_64) [6FBh:jmp64]                        encoding(2 bytes) = 75 54
06a7h mov rcx,7FFDDBA04140h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04140h:imm64]         encoding(10 bytes) = 48 b9 40 41 a0 db fd 7f 00 00
06b1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 7a 3d 25 5f
06b6h mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
06b9h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
06c3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06c6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
06c9h je near ptr 1c3fh             ; JE(Je_rel32_64) [1C3Fh:jmp64]                        encoding(6 bytes) = 0f 84 70 15 00 00
06cfh lea rcx,[r13+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 08
06d3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 98 2e 25 5f
06d8h mov rdx,7FFDDB830C08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c08h:imm64]         encoding(10 bytes) = 48 ba 08 0c 83 db fd 7f 00 00
06e2h mov [r13+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R13:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 55 18
06e6h mov rcx,1E1F7826F30h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f30h:imm64]          encoding(10 bytes) = 48 b9 30 6f 82 f7 e1 01 00 00
06f0h mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
06f3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 48 2e 25 5f
06f8h mov r9,r13                    ; MOV(Mov_r64_rm64) [R9,R13]                           encoding(3 bytes) = 4d 8b cd
06fbh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
06feh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0701h mov rcx,7FFDDBA04258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04258h:imm64]         encoding(10 bytes) = 48 b9 58 42 a0 db fd 7f 00 00
070bh mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
0715h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0719h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
071ah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
071bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
071ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
071dh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
071fh pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0721h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0723h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0725h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0728h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0732h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0737h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 24 3e 25 5f
073ch mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
073fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0741h mov [r13+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,R13:br,DS:sr),ECX]        encoding(4 bytes) = 41 89 4d 10
0745h mov dword ptr [r13+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R13:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 45 14 01 00 00 00
074dh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0757h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
075ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 cf 40 25 5f
0761h mov rcx,1E1F7826F38h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f38h:imm64]          encoding(10 bytes) = 48 b9 38 6f 82 f7 e1 01 00 00
076bh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
076eh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0771h jne short 07c4h               ; JNE(Jne_rel8_64) [7C4h:jmp64]                        encoding(2 bytes) = 75 51
0773h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
077dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 ae 3c 25 5f
0782h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0785h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
078fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0792h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0795h je near ptr 1c48h             ; JE(Je_rel32_64) [1C48h:jmp64]                        encoding(6 bytes) = 0f 84 ad 14 00 00
079bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
079fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 cc 2d 25 5f
07a4h mov rdx,7FFDDB830C10h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c10h:imm64]         encoding(10 bytes) = 48 ba 10 0c 83 db fd 7f 00 00
07aeh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
07b2h mov rcx,1E1F7826F38h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f38h:imm64]          encoding(10 bytes) = 48 b9 38 6f 82 f7 e1 01 00 00
07bch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
07bfh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 7c 2d 25 5f
07c4h mov rcx,1E1F7826F40h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f40h:imm64]          encoding(10 bytes) = 48 b9 40 6f 82 f7 e1 01 00 00
07ceh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
07d1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
07d4h jne short 082ah               ; JNE(Jne_rel8_64) [82Ah:jmp64]                        encoding(2 bytes) = 75 54
07d6h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
07e0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 4b 3c 25 5f
07e5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
07e8h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
07f2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
07f5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
07f8h je near ptr 1c51h             ; JE(Je_rel32_64) [1C51h:jmp64]                        encoding(6 bytes) = 0f 84 53 14 00 00
07feh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0802h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 69 2d 25 5f
0807h mov rdx,7FFDDB830C18h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c18h:imm64]         encoding(10 bytes) = 48 ba 18 0c 83 db fd 7f 00 00
0811h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0815h mov rcx,1E1F7826F40h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f40h:imm64]          encoding(10 bytes) = 48 b9 40 6f 82 f7 e1 01 00 00
081fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0822h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 19 2d 25 5f
0827h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
082ah mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
082dh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0830h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
083ah call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21D90h:jmp64]        encoding(5 bytes) = e8 51 15 e2 ff
083fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0842h mov rcx,1E1F7826F48h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f48h:imm64]          encoding(10 bytes) = 48 b9 48 6f 82 f7 e1 01 00 00
084ch mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
084fh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0852h jne short 08a5h               ; JNE(Jne_rel8_64) [8A5h:jmp64]                        encoding(2 bytes) = 75 51
0854h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
085eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 cd 3b 25 5f
0863h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0866h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0870h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0873h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0876h je near ptr 1c5ah             ; JE(Je_rel32_64) [1C5Ah:jmp64]                        encoding(6 bytes) = 0f 84 de 13 00 00
087ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0880h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 eb 2c 25 5f
0885h mov rdx,7FFDDB830C20h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c20h:imm64]         encoding(10 bytes) = 48 ba 20 0c 83 db fd 7f 00 00
088fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0893h mov rcx,1E1F7826F48h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f48h:imm64]          encoding(10 bytes) = 48 b9 48 6f 82 f7 e1 01 00 00
089dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
08a0h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 9b 2c 25 5f
08a5h mov rcx,1E1F7826F50h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f50h:imm64]          encoding(10 bytes) = 48 b9 50 6f 82 f7 e1 01 00 00
08afh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
08b2h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
08b5h jne short 090bh               ; JNE(Jne_rel8_64) [90Bh:jmp64]                        encoding(2 bytes) = 75 54
08b7h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
08c1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 6a 3b 25 5f
08c6h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
08c9h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
08d3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
08d6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
08d9h je near ptr 1c63h             ; JE(Je_rel32_64) [1C63h:jmp64]                        encoding(6 bytes) = 0f 84 84 13 00 00
08dfh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
08e3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 88 2c 25 5f
08e8h mov rdx,7FFDDB830C28h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c28h:imm64]         encoding(10 bytes) = 48 ba 28 0c 83 db fd 7f 00 00
08f2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
08f6h mov rcx,1E1F7826F50h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f50h:imm64]          encoding(10 bytes) = 48 b9 50 6f 82 f7 e1 01 00 00
0900h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0903h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 38 2c 25 5f
0908h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
090bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
090eh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0911h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
091bh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 f0 14 e2 ff
0920h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0923h mov rcx,1E1F7826F58h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f58h:imm64]          encoding(10 bytes) = 48 b9 58 6f 82 f7 e1 01 00 00
092dh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0930h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0933h jne short 0986h               ; JNE(Jne_rel8_64) [986h:jmp64]                        encoding(2 bytes) = 75 51
0935h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
093fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 ec 3a 25 5f
0944h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0947h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0951h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0954h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0957h je near ptr 1c6ch             ; JE(Je_rel32_64) [1C6Ch:jmp64]                        encoding(6 bytes) = 0f 84 0f 13 00 00
095dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0961h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 0a 2c 25 5f
0966h mov rdx,7FFDDB830C30h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c30h:imm64]         encoding(10 bytes) = 48 ba 30 0c 83 db fd 7f 00 00
0970h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0974h mov rcx,1E1F7826F58h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f58h:imm64]          encoding(10 bytes) = 48 b9 58 6f 82 f7 e1 01 00 00
097eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0981h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 ba 2b 25 5f
0986h mov rcx,1E1F7826F60h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f60h:imm64]          encoding(10 bytes) = 48 b9 60 6f 82 f7 e1 01 00 00
0990h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0993h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0996h jne short 09ech               ; JNE(Jne_rel8_64) [9ECh:jmp64]                        encoding(2 bytes) = 75 54
0998h mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
09a2h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 89 3a 25 5f
09a7h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
09aah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
09b4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
09b7h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
09bah je near ptr 1c75h             ; JE(Je_rel32_64) [1C75h:jmp64]                        encoding(6 bytes) = 0f 84 b5 12 00 00
09c0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
09c4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 a7 2b 25 5f
09c9h mov rdx,7FFDDB830C38h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c38h:imm64]         encoding(10 bytes) = 48 ba 38 0c 83 db fd 7f 00 00
09d3h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
09d7h mov rcx,1E1F7826F60h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f60h:imm64]          encoding(10 bytes) = 48 b9 60 6f 82 f7 e1 01 00 00
09e1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
09e4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 57 2b 25 5f
09e9h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
09ech mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
09efh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
09f2h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
09fch call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 0f 14 e2 ff
0a01h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a04h mov rcx,1E1F7826F68h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f68h:imm64]          encoding(10 bytes) = 48 b9 68 6f 82 f7 e1 01 00 00
0a0eh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0a11h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0a14h jne short 0a67h               ; JNE(Jne_rel8_64) [A67h:jmp64]                        encoding(2 bytes) = 75 51
0a16h mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
0a20h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 0b 3a 25 5f
0a25h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0a28h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0a32h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a35h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0a38h je near ptr 1c7eh             ; JE(Je_rel32_64) [1C7Eh:jmp64]                        encoding(6 bytes) = 0f 84 40 12 00 00
0a3eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0a42h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 29 2b 25 5f
0a47h mov rdx,7FFDDB830C40h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c40h:imm64]         encoding(10 bytes) = 48 ba 40 0c 83 db fd 7f 00 00
0a51h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0a55h mov rcx,1E1F7826F68h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f68h:imm64]          encoding(10 bytes) = 48 b9 68 6f 82 f7 e1 01 00 00
0a5fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0a62h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 d9 2a 25 5f
0a67h mov rcx,1E1F7826F70h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f70h:imm64]          encoding(10 bytes) = 48 b9 70 6f 82 f7 e1 01 00 00
0a71h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0a74h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0a77h jne short 0acdh               ; JNE(Jne_rel8_64) [ACDh:jmp64]                        encoding(2 bytes) = 75 54
0a79h mov rcx,7FFDDBA03FD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03fd8h:imm64]         encoding(10 bytes) = 48 b9 d8 3f a0 db fd 7f 00 00
0a83h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 a8 39 25 5f
0a88h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0a8bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0a95h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a98h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0a9bh je near ptr 1c87h             ; JE(Je_rel32_64) [1C87h:jmp64]                        encoding(6 bytes) = 0f 84 e6 11 00 00
0aa1h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0aa5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 c6 2a 25 5f
0aaah mov rdx,7FFDDB830C48h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c48h:imm64]         encoding(10 bytes) = 48 ba 48 0c 83 db fd 7f 00 00
0ab4h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0ab8h mov rcx,1E1F7826F70h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f70h:imm64]          encoding(10 bytes) = 48 b9 70 6f 82 f7 e1 01 00 00
0ac2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0ac5h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 76 2a 25 5f
0acah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0acdh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ad0h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0ad3h mov rcx,7FFDDBA040F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba040f0h:imm64]         encoding(10 bytes) = 48 b9 f0 40 a0 db fd 7f 00 00
0addh mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
0ae7h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0aebh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0aech pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0aedh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0aeeh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0aefh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0af1h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0af3h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0af5h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0af7h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0afah mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0b04h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0b09h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 52 3a 25 5f
0b0eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0b11h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0b13h mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
0b16h mov dword ptr [rbx+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 43 14 01 00 00 00
0b1dh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0b27h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0b2ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 ff 3c 25 5f
0b31h mov rcx,1E1F7826F78h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f78h:imm64]          encoding(10 bytes) = 48 b9 78 6f 82 f7 e1 01 00 00
0b3bh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0b3eh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0b41h jne short 0b94h               ; JNE(Jne_rel8_64) [B94h:jmp64]                        encoding(2 bytes) = 75 51
0b43h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
0b4dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 de 38 25 5f
0b52h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0b55h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0b5fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0b62h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0b65h je near ptr 1c90h             ; JE(Je_rel32_64) [1C90h:jmp64]                        encoding(6 bytes) = 0f 84 25 11 00 00
0b6bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0b6fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 fc 29 25 5f
0b74h mov rdx,7FFDDB830C50h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c50h:imm64]         encoding(10 bytes) = 48 ba 50 0c 83 db fd 7f 00 00
0b7eh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0b82h mov rcx,1E1F7826F78h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f78h:imm64]          encoding(10 bytes) = 48 b9 78 6f 82 f7 e1 01 00 00
0b8ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0b8fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 ac 29 25 5f
0b94h mov rcx,1E1F7826F80h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f80h:imm64]          encoding(10 bytes) = 48 b9 80 6f 82 f7 e1 01 00 00
0b9eh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0ba1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0ba4h jne short 0bfah               ; JNE(Jne_rel8_64) [BFAh:jmp64]                        encoding(2 bytes) = 75 54
0ba6h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
0bb0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 7b 38 25 5f
0bb5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0bb8h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0bc2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0bc5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0bc8h je near ptr 1c99h             ; JE(Je_rel32_64) [1C99h:jmp64]                        encoding(6 bytes) = 0f 84 cb 10 00 00
0bceh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0bd2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 99 29 25 5f
0bd7h mov rdx,7FFDDB830C58h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c58h:imm64]         encoding(10 bytes) = 48 ba 58 0c 83 db fd 7f 00 00
0be1h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0be5h mov rcx,1E1F7826F80h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f80h:imm64]          encoding(10 bytes) = 48 b9 80 6f 82 f7 e1 01 00 00
0befh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0bf2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 49 29 25 5f
0bf7h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
0bfah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0bfdh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0c00h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
0c0ah call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21D90h:jmp64]        encoding(5 bytes) = e8 81 11 e2 ff
0c0fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c12h mov rcx,1E1F7826F88h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f88h:imm64]          encoding(10 bytes) = 48 b9 88 6f 82 f7 e1 01 00 00
0c1ch mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0c1fh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0c22h jne short 0c75h               ; JNE(Jne_rel8_64) [C75h:jmp64]                        encoding(2 bytes) = 75 51
0c24h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
0c2eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 fd 37 25 5f
0c33h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0c36h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0c40h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0c43h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0c46h je near ptr 1ca2h             ; JE(Je_rel32_64) [1CA2h:jmp64]                        encoding(6 bytes) = 0f 84 56 10 00 00
0c4ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0c50h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 1b 29 25 5f
0c55h mov rdx,7FFDDB830C60h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c60h:imm64]         encoding(10 bytes) = 48 ba 60 0c 83 db fd 7f 00 00
0c5fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0c63h mov rcx,1E1F7826F88h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f88h:imm64]          encoding(10 bytes) = 48 b9 88 6f 82 f7 e1 01 00 00
0c6dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0c70h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 cb 28 25 5f
0c75h mov rcx,1E1F7826F90h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f90h:imm64]          encoding(10 bytes) = 48 b9 90 6f 82 f7 e1 01 00 00
0c7fh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0c82h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0c85h jne short 0cdbh               ; JNE(Jne_rel8_64) [CDBh:jmp64]                        encoding(2 bytes) = 75 54
0c87h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
0c91h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 9a 37 25 5f
0c96h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0c99h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0ca3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0ca6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0ca9h je near ptr 1cabh             ; JE(Je_rel32_64) [1CABh:jmp64]                        encoding(6 bytes) = 0f 84 fc 0f 00 00
0cafh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0cb3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 b8 28 25 5f
0cb8h mov rdx,7FFDDB830C68h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c68h:imm64]         encoding(10 bytes) = 48 ba 68 0c 83 db fd 7f 00 00
0cc2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0cc6h mov rcx,1E1F7826F90h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f90h:imm64]          encoding(10 bytes) = 48 b9 90 6f 82 f7 e1 01 00 00
0cd0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0cd3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 68 28 25 5f
0cd8h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0cdbh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0cdeh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0ce1h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
0cebh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 20 11 e2 ff
0cf0h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0cf3h mov rcx,1E1F7826F98h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f98h:imm64]          encoding(10 bytes) = 48 b9 98 6f 82 f7 e1 01 00 00
0cfdh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0d00h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0d03h jne short 0d56h               ; JNE(Jne_rel8_64) [D56h:jmp64]                        encoding(2 bytes) = 75 51
0d05h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
0d0fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 1c 37 25 5f
0d14h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0d17h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0d21h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0d24h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0d27h je near ptr 1cb4h             ; JE(Je_rel32_64) [1CB4h:jmp64]                        encoding(6 bytes) = 0f 84 87 0f 00 00
0d2dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0d31h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 3a 28 25 5f
0d36h mov rdx,7FFDDB830C70h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c70h:imm64]         encoding(10 bytes) = 48 ba 70 0c 83 db fd 7f 00 00
0d40h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0d44h mov rcx,1E1F7826F98h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826f98h:imm64]          encoding(10 bytes) = 48 b9 98 6f 82 f7 e1 01 00 00
0d4eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0d51h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 ea 27 25 5f
0d56h mov rcx,1E1F7826FA0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fa0h:imm64]          encoding(10 bytes) = 48 b9 a0 6f 82 f7 e1 01 00 00
0d60h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0d63h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0d66h jne short 0dbch               ; JNE(Jne_rel8_64) [DBCh:jmp64]                        encoding(2 bytes) = 75 54
0d68h mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
0d72h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 b9 36 25 5f
0d77h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d7ah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0d84h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0d87h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0d8ah je near ptr 1cbdh             ; JE(Je_rel32_64) [1CBDh:jmp64]                        encoding(6 bytes) = 0f 84 2d 0f 00 00
0d90h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d94h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 d7 27 25 5f
0d99h mov rdx,7FFDDB830C78h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c78h:imm64]         encoding(10 bytes) = 48 ba 78 0c 83 db fd 7f 00 00
0da3h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0da7h mov rcx,1E1F7826FA0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fa0h:imm64]          encoding(10 bytes) = 48 b9 a0 6f 82 f7 e1 01 00 00
0db1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0db4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 87 27 25 5f
0db9h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
0dbch mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0dbfh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0dc2h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
0dcch call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 3f 10 e2 ff
0dd1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0dd4h mov rcx,1E1F7826FA8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fa8h:imm64]          encoding(10 bytes) = 48 b9 a8 6f 82 f7 e1 01 00 00
0ddeh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0de1h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0de4h jne short 0e37h               ; JNE(Jne_rel8_64) [E37h:jmp64]                        encoding(2 bytes) = 75 51
0de6h mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
0df0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 3b 36 25 5f
0df5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0df8h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0e02h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0e05h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0e08h je near ptr 1cc6h             ; JE(Je_rel32_64) [1CC6h:jmp64]                        encoding(6 bytes) = 0f 84 b8 0e 00 00
0e0eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0e12h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 59 27 25 5f
0e17h mov rdx,7FFDDB830C80h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c80h:imm64]         encoding(10 bytes) = 48 ba 80 0c 83 db fd 7f 00 00
0e21h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0e25h mov rcx,1E1F7826FA8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fa8h:imm64]          encoding(10 bytes) = 48 b9 a8 6f 82 f7 e1 01 00 00
0e2fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0e32h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 09 27 25 5f
0e37h mov rcx,1E1F7826FB0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 6f 82 f7 e1 01 00 00
0e41h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0e44h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0e47h jne short 0e9dh               ; JNE(Jne_rel8_64) [E9Dh:jmp64]                        encoding(2 bytes) = 75 54
0e49h mov rcx,7FFDDBA03078h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03078h:imm64]         encoding(10 bytes) = 48 b9 78 30 a0 db fd 7f 00 00
0e53h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 d8 35 25 5f
0e58h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0e5bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0e65h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0e68h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0e6bh je near ptr 1ccfh             ; JE(Je_rel32_64) [1CCFh:jmp64]                        encoding(6 bytes) = 0f 84 5e 0e 00 00
0e71h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0e75h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 f6 26 25 5f
0e7ah mov rdx,7FFDDB830C88h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c88h:imm64]         encoding(10 bytes) = 48 ba 88 0c 83 db fd 7f 00 00
0e84h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0e88h mov rcx,1E1F7826FB0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fb0h:imm64]          encoding(10 bytes) = 48 b9 b0 6f 82 f7 e1 01 00 00
0e92h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0e95h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 a6 26 25 5f
0e9ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0e9dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ea0h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0ea3h mov rcx,7FFDDBA03190h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03190h:imm64]         encoding(10 bytes) = 48 b9 90 31 a0 db fd 7f 00 00
0eadh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 5e 0f e2 ff
0eb2h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0eb5h mov rcx,1E1F7826FB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fb8h:imm64]          encoding(10 bytes) = 48 b9 b8 6f 82 f7 e1 01 00 00
0ebfh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0ec2h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0ec5h jne short 0f18h               ; JNE(Jne_rel8_64) [F18h:jmp64]                        encoding(2 bytes) = 75 51
0ec7h mov rcx,7FFDDBA031E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba031e0h:imm64]         encoding(10 bytes) = 48 b9 e0 31 a0 db fd 7f 00 00
0ed1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 5a 35 25 5f
0ed6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0ed9h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0ee3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0ee6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0ee9h je near ptr 1cd8h             ; JE(Je_rel32_64) [1CD8h:jmp64]                        encoding(6 bytes) = 0f 84 e9 0d 00 00
0eefh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0ef3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 78 26 25 5f
0ef8h mov rdx,7FFDDB830C90h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c90h:imm64]         encoding(10 bytes) = 48 ba 90 0c 83 db fd 7f 00 00
0f02h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
0f06h mov rcx,1E1F7826FB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fb8h:imm64]          encoding(10 bytes) = 48 b9 b8 6f 82 f7 e1 01 00 00
0f10h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0f13h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 28 26 25 5f
0f18h mov rcx,1E1F7826FC0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fc0h:imm64]          encoding(10 bytes) = 48 b9 c0 6f 82 f7 e1 01 00 00
0f22h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0f25h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0f28h jne short 0f7eh               ; JNE(Jne_rel8_64) [F7Eh:jmp64]                        encoding(2 bytes) = 75 54
0f2ah mov rcx,7FFDDBA03E70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03e70h:imm64]         encoding(10 bytes) = 48 b9 70 3e a0 db fd 7f 00 00
0f34h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 f7 34 25 5f
0f39h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f3ch mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0f46h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0f49h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0f4ch je near ptr 1ce1h             ; JE(Je_rel32_64) [1CE1h:jmp64]                        encoding(6 bytes) = 0f 84 8f 0d 00 00
0f52h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f56h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 15 26 25 5f
0f5bh mov rdx,7FFDDB830C98h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830c98h:imm64]         encoding(10 bytes) = 48 ba 98 0c 83 db fd 7f 00 00
0f65h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0f69h mov rcx,1E1F7826FC0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fc0h:imm64]          encoding(10 bytes) = 48 b9 c0 6f 82 f7 e1 01 00 00
0f73h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f76h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 c5 25 25 5f
0f7bh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
0f7eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0f81h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0f84h mov rcx,7FFDDBA03F88h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03f88h:imm64]         encoding(10 bytes) = 48 b9 88 3f a0 db fd 7f 00 00
0f8eh mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
0f98h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0f9ch pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0f9dh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0f9eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0f9fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0fa0h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0fa2h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0fa4h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0fa6h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0fa8h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0fabh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0fb5h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0fbah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 a1 35 25 5f
0fbfh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0fc2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0fc4h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0fc7h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
0fceh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0fd8h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0fddh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 4e 38 25 5f
0fe2h mov rcx,1E1F7826FC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fc8h:imm64]          encoding(10 bytes) = 48 b9 c8 6f 82 f7 e1 01 00 00
0fech mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0fefh test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
0ff2h jne short 1045h               ; JNE(Jne_rel8_64) [1045h:jmp64]                       encoding(2 bytes) = 75 51
0ff4h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
0ffeh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 2d 34 25 5f
1003h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1006h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1010h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1013h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1016h je near ptr 1ceah             ; JE(Je_rel32_64) [1CEAh:jmp64]                        encoding(6 bytes) = 0f 84 ce 0c 00 00
101ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1020h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 4b 25 25 5f
1025h mov rdx,7FFDDB830CA0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ca0h:imm64]         encoding(10 bytes) = 48 ba a0 0c 83 db fd 7f 00 00
102fh mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1033h mov rcx,1E1F7826FC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fc8h:imm64]          encoding(10 bytes) = 48 b9 c8 6f 82 f7 e1 01 00 00
103dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1040h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 fb 24 25 5f
1045h mov rcx,1E1F7826FD0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fd0h:imm64]          encoding(10 bytes) = 48 b9 d0 6f 82 f7 e1 01 00 00
104fh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1052h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1055h jne short 10abh               ; JNE(Jne_rel8_64) [10ABh:jmp64]                       encoding(2 bytes) = 75 54
1057h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
1061h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 ca 33 25 5f
1066h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1069h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1073h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1076h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1079h je near ptr 1cf3h             ; JE(Je_rel32_64) [1CF3h:jmp64]                        encoding(6 bytes) = 0f 84 74 0c 00 00
107fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1083h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 e8 24 25 5f
1088h mov rdx,7FFDDB830CA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ca8h:imm64]         encoding(10 bytes) = 48 ba a8 0c 83 db fd 7f 00 00
1092h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1096h mov rcx,1E1F7826FD0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fd0h:imm64]          encoding(10 bytes) = 48 b9 d0 6f 82 f7 e1 01 00 00
10a0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
10a3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 98 24 25 5f
10a8h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
10abh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
10aeh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
10b1h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
10bbh call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21D90h:jmp64]        encoding(5 bytes) = e8 d0 0c e2 ff
10c0h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
10c3h mov rcx,1E1F7826FD8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fd8h:imm64]          encoding(10 bytes) = 48 b9 d8 6f 82 f7 e1 01 00 00
10cdh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
10d0h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
10d3h jne short 1126h               ; JNE(Jne_rel8_64) [1126h:jmp64]                       encoding(2 bytes) = 75 51
10d5h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
10dfh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 4c 33 25 5f
10e4h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
10e7h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
10f1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
10f4h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
10f7h je near ptr 1cfch             ; JE(Je_rel32_64) [1CFCh:jmp64]                        encoding(6 bytes) = 0f 84 ff 0b 00 00
10fdh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1101h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 6a 24 25 5f
1106h mov rdx,7FFDDB830CB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cb0h:imm64]         encoding(10 bytes) = 48 ba b0 0c 83 db fd 7f 00 00
1110h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1114h mov rcx,1E1F7826FD8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fd8h:imm64]          encoding(10 bytes) = 48 b9 d8 6f 82 f7 e1 01 00 00
111eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1121h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 1a 24 25 5f
1126h mov rcx,1E1F7826FE0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fe0h:imm64]          encoding(10 bytes) = 48 b9 e0 6f 82 f7 e1 01 00 00
1130h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1133h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1136h jne short 118ch               ; JNE(Jne_rel8_64) [118Ch:jmp64]                       encoding(2 bytes) = 75 54
1138h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
1142h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 e9 32 25 5f
1147h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
114ah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1154h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1157h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
115ah je near ptr 1d05h             ; JE(Je_rel32_64) [1D05h:jmp64]                        encoding(6 bytes) = 0f 84 a5 0b 00 00
1160h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1164h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 07 24 25 5f
1169h mov rdx,7FFDDB830CB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cb8h:imm64]         encoding(10 bytes) = 48 ba b8 0c 83 db fd 7f 00 00
1173h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1177h mov rcx,1E1F7826FE0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fe0h:imm64]          encoding(10 bytes) = 48 b9 e0 6f 82 f7 e1 01 00 00
1181h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1184h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 b7 23 25 5f
1189h mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
118ch mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
118fh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1192h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
119ch call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 6f 0c e2 ff
11a1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
11a4h mov rcx,1E1F7826FE8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fe8h:imm64]          encoding(10 bytes) = 48 b9 e8 6f 82 f7 e1 01 00 00
11aeh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
11b1h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
11b4h jne short 1207h               ; JNE(Jne_rel8_64) [1207h:jmp64]                       encoding(2 bytes) = 75 51
11b6h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
11c0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 6b 32 25 5f
11c5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
11c8h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
11d2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
11d5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
11d8h je near ptr 1d0eh             ; JE(Je_rel32_64) [1D0Eh:jmp64]                        encoding(6 bytes) = 0f 84 30 0b 00 00
11deh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
11e2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 89 23 25 5f
11e7h mov rdx,7FFDDB830CC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cc0h:imm64]         encoding(10 bytes) = 48 ba c0 0c 83 db fd 7f 00 00
11f1h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
11f5h mov rcx,1E1F7826FE8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826fe8h:imm64]          encoding(10 bytes) = 48 b9 e8 6f 82 f7 e1 01 00 00
11ffh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1202h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 39 23 25 5f
1207h mov rcx,1E1F7826FF0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ff0h:imm64]          encoding(10 bytes) = 48 b9 f0 6f 82 f7 e1 01 00 00
1211h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1214h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1217h jne short 126dh               ; JNE(Jne_rel8_64) [126Dh:jmp64]                       encoding(2 bytes) = 75 54
1219h mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
1223h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 08 32 25 5f
1228h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
122bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1235h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1238h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
123bh je near ptr 1d17h             ; JE(Je_rel32_64) [1D17h:jmp64]                        encoding(6 bytes) = 0f 84 d6 0a 00 00
1241h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1245h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 26 23 25 5f
124ah mov rdx,7FFDDB830CC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cc8h:imm64]         encoding(10 bytes) = 48 ba c8 0c 83 db fd 7f 00 00
1254h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1258h mov rcx,1E1F7826FF0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ff0h:imm64]          encoding(10 bytes) = 48 b9 f0 6f 82 f7 e1 01 00 00
1262h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1265h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 d6 22 25 5f
126ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
126dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1270h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1273h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
127dh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 8e 0b e2 ff
1282h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1285h mov rcx,1E1F7826FF8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ff8h:imm64]          encoding(10 bytes) = 48 b9 f8 6f 82 f7 e1 01 00 00
128fh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1292h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1295h jne short 12e8h               ; JNE(Jne_rel8_64) [12E8h:jmp64]                       encoding(2 bytes) = 75 51
1297h mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
12a1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 8a 31 25 5f
12a6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
12a9h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
12b3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
12b6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
12b9h je near ptr 1d20h             ; JE(Je_rel32_64) [1D20h:jmp64]                        encoding(6 bytes) = 0f 84 61 0a 00 00
12bfh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
12c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 a8 22 25 5f
12c8h mov rdx,7FFDDB830CD0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cd0h:imm64]         encoding(10 bytes) = 48 ba d0 0c 83 db fd 7f 00 00
12d2h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
12d6h mov rcx,1E1F7826FF8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ff8h:imm64]          encoding(10 bytes) = 48 b9 f8 6f 82 f7 e1 01 00 00
12e0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
12e3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 58 22 25 5f
12e8h mov rcx,1E1F7827000h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827000h:imm64]          encoding(10 bytes) = 48 b9 00 70 82 f7 e1 01 00 00
12f2h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
12f5h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
12f8h jne short 134eh               ; JNE(Jne_rel8_64) [134Eh:jmp64]                       encoding(2 bytes) = 75 54
12fah mov rcx,7FFDDBA03078h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03078h:imm64]         encoding(10 bytes) = 48 b9 78 30 a0 db fd 7f 00 00
1304h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 27 31 25 5f
1309h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
130ch mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1316h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1319h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
131ch je near ptr 1d29h             ; JE(Je_rel32_64) [1D29h:jmp64]                        encoding(6 bytes) = 0f 84 07 0a 00 00
1322h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1326h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 45 22 25 5f
132bh mov rdx,7FFDDB830CD8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cd8h:imm64]         encoding(10 bytes) = 48 ba d8 0c 83 db fd 7f 00 00
1335h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1339h mov rcx,1E1F7827000h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827000h:imm64]          encoding(10 bytes) = 48 b9 00 70 82 f7 e1 01 00 00
1343h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1346h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 f5 21 25 5f
134bh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
134eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1351h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1354h mov rcx,7FFDDBA03190h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03190h:imm64]         encoding(10 bytes) = 48 b9 90 31 a0 db fd 7f 00 00
135eh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 ad 0a e2 ff
1363h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1366h mov rcx,1E1F7827008h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827008h:imm64]          encoding(10 bytes) = 48 b9 08 70 82 f7 e1 01 00 00
1370h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1373h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1376h jne short 13c9h               ; JNE(Jne_rel8_64) [13C9h:jmp64]                       encoding(2 bytes) = 75 51
1378h mov rcx,7FFDDBA031E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba031e0h:imm64]         encoding(10 bytes) = 48 b9 e0 31 a0 db fd 7f 00 00
1382h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 a9 30 25 5f
1387h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
138ah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1394h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1397h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
139ah je near ptr 1d32h             ; JE(Je_rel32_64) [1D32h:jmp64]                        encoding(6 bytes) = 0f 84 92 09 00 00
13a0h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
13a4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 c7 21 25 5f
13a9h mov rdx,7FFDDB830CE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ce0h:imm64]         encoding(10 bytes) = 48 ba e0 0c 83 db fd 7f 00 00
13b3h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
13b7h mov rcx,1E1F7827008h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827008h:imm64]          encoding(10 bytes) = 48 b9 08 70 82 f7 e1 01 00 00
13c1h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
13c4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 77 21 25 5f
13c9h mov rcx,1E1F7827010h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827010h:imm64]          encoding(10 bytes) = 48 b9 10 70 82 f7 e1 01 00 00
13d3h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
13d6h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
13d9h jne short 142fh               ; JNE(Jne_rel8_64) [142Fh:jmp64]                       encoding(2 bytes) = 75 54
13dbh mov rcx,7FFDDBA034E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba034e8h:imm64]         encoding(10 bytes) = 48 b9 e8 34 a0 db fd 7f 00 00
13e5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 46 30 25 5f
13eah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
13edh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
13f7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
13fah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
13fdh je near ptr 1d3bh             ; JE(Je_rel32_64) [1D3Bh:jmp64]                        encoding(6 bytes) = 0f 84 38 09 00 00
1403h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1407h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 64 21 25 5f
140ch mov rdx,7FFDDB830CE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ce8h:imm64]         encoding(10 bytes) = 48 ba e8 0c 83 db fd 7f 00 00
1416h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
141ah mov rcx,1E1F7827010h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827010h:imm64]          encoding(10 bytes) = 48 b9 10 70 82 f7 e1 01 00 00
1424h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1427h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 14 21 25 5f
142ch mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
142fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1432h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1435h mov rcx,7FFDDBA03600h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03600h:imm64]         encoding(10 bytes) = 48 b9 00 36 a0 db fd 7f 00 00
143fh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 cc 09 e2 ff
1444h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1447h mov rcx,1E1F7827018h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827018h:imm64]          encoding(10 bytes) = 48 b9 18 70 82 f7 e1 01 00 00
1451h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1454h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1457h jne short 14aah               ; JNE(Jne_rel8_64) [14AAh:jmp64]                       encoding(2 bytes) = 75 51
1459h mov rcx,7FFDDBA03650h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03650h:imm64]         encoding(10 bytes) = 48 b9 50 36 a0 db fd 7f 00 00
1463h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 c8 2f 25 5f
1468h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
146bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1475h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1478h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
147bh je near ptr 1d44h             ; JE(Je_rel32_64) [1D44h:jmp64]                        encoding(6 bytes) = 0f 84 c3 08 00 00
1481h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1485h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 e6 20 25 5f
148ah mov rdx,7FFDDB830CF0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cf0h:imm64]         encoding(10 bytes) = 48 ba f0 0c 83 db fd 7f 00 00
1494h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1498h mov rcx,1E1F7827018h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827018h:imm64]          encoding(10 bytes) = 48 b9 18 70 82 f7 e1 01 00 00
14a2h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
14a5h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 96 20 25 5f
14aah mov rcx,1E1F7827020h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827020h:imm64]          encoding(10 bytes) = 48 b9 20 70 82 f7 e1 01 00 00
14b4h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
14b7h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
14bah jne short 1510h               ; JNE(Jne_rel8_64) [1510h:jmp64]                       encoding(2 bytes) = 75 54
14bch mov rcx,7FFDDBA03D08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03d08h:imm64]         encoding(10 bytes) = 48 b9 08 3d a0 db fd 7f 00 00
14c6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 65 2f 25 5f
14cbh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
14ceh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
14d8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
14dbh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
14deh je near ptr 1d4dh             ; JE(Je_rel32_64) [1D4Dh:jmp64]                        encoding(6 bytes) = 0f 84 69 08 00 00
14e4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
14e8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 83 20 25 5f
14edh mov rdx,7FFDDB830CF8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830cf8h:imm64]         encoding(10 bytes) = 48 ba f8 0c 83 db fd 7f 00 00
14f7h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
14fbh mov rcx,1E1F7827020h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827020h:imm64]          encoding(10 bytes) = 48 b9 20 70 82 f7 e1 01 00 00
1505h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1508h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 33 20 25 5f
150dh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
1510h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1513h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1516h mov rcx,7FFDDBA03E20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03e20h:imm64]         encoding(10 bytes) = 48 b9 20 3e a0 db fd 7f 00 00
1520h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
152ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
152eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
152fh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1530h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1531h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1532h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1534h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1536h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1538h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
153ah jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
153dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
1547h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
154ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F254560h:jmp64]                encoding(5 bytes) = e8 0f 30 25 5f
1551h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1554h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1556h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
1559h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
1560h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
156ah mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
156fh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F254830h:jmp64]                encoding(5 bytes) = e8 bc 32 25 5f
1574h mov rcx,1E1F7827028h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827028h:imm64]          encoding(10 bytes) = 48 b9 28 70 82 f7 e1 01 00 00
157eh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1581h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1584h jne short 15d7h               ; JNE(Jne_rel8_64) [15D7h:jmp64]                       encoding(2 bytes) = 75 51
1586h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
1590h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 9b 2e 25 5f
1595h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1598h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
15a2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
15a5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
15a8h je near ptr 1d56h             ; JE(Je_rel32_64) [1D56h:jmp64]                        encoding(6 bytes) = 0f 84 a8 07 00 00
15aeh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
15b2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 b9 1f 25 5f
15b7h mov rdx,7FFDDB830D00h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d00h:imm64]         encoding(10 bytes) = 48 ba 00 0d 83 db fd 7f 00 00
15c1h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
15c5h mov rcx,1E1F7827028h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827028h:imm64]          encoding(10 bytes) = 48 b9 28 70 82 f7 e1 01 00 00
15cfh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
15d2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 69 1f 25 5f
15d7h mov rcx,1E1F7827030h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827030h:imm64]          encoding(10 bytes) = 48 b9 30 70 82 f7 e1 01 00 00
15e1h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
15e4h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
15e7h jne short 163dh               ; JNE(Jne_rel8_64) [163Dh:jmp64]                       encoding(2 bytes) = 75 54
15e9h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
15f3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 38 2e 25 5f
15f8h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
15fbh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1605h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1608h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
160bh je near ptr 1d5fh             ; JE(Je_rel32_64) [1D5Fh:jmp64]                        encoding(6 bytes) = 0f 84 4e 07 00 00
1611h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1615h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 56 1f 25 5f
161ah mov rdx,7FFDDB830D08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d08h:imm64]         encoding(10 bytes) = 48 ba 08 0d 83 db fd 7f 00 00
1624h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1628h mov rcx,1E1F7827030h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827030h:imm64]          encoding(10 bytes) = 48 b9 30 70 82 f7 e1 01 00 00
1632h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1635h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 06 1f 25 5f
163ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
163dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1640h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1643h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
164dh call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21D90h:jmp64]        encoding(5 bytes) = e8 3e 07 e2 ff
1652h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1655h mov rcx,1E1F7827038h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827038h:imm64]          encoding(10 bytes) = 48 b9 38 70 82 f7 e1 01 00 00
165fh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1662h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1665h jne short 16b8h               ; JNE(Jne_rel8_64) [16B8h:jmp64]                       encoding(2 bytes) = 75 51
1667h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
1671h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 ba 2d 25 5f
1676h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1679h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1683h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1686h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1689h je near ptr 1d68h             ; JE(Je_rel32_64) [1D68h:jmp64]                        encoding(6 bytes) = 0f 84 d9 06 00 00
168fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1693h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 d8 1e 25 5f
1698h mov rdx,7FFDDB830D10h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d10h:imm64]         encoding(10 bytes) = 48 ba 10 0d 83 db fd 7f 00 00
16a2h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
16a6h mov rcx,1E1F7827038h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827038h:imm64]          encoding(10 bytes) = 48 b9 38 70 82 f7 e1 01 00 00
16b0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
16b3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 88 1e 25 5f
16b8h mov rcx,1E1F7827040h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827040h:imm64]          encoding(10 bytes) = 48 b9 40 70 82 f7 e1 01 00 00
16c2h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
16c5h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
16c8h jne short 171eh               ; JNE(Jne_rel8_64) [171Eh:jmp64]                       encoding(2 bytes) = 75 54
16cah mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
16d4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 57 2d 25 5f
16d9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16dch mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
16e6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
16e9h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
16ech je near ptr 1d71h             ; JE(Je_rel32_64) [1D71h:jmp64]                        encoding(6 bytes) = 0f 84 7f 06 00 00
16f2h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
16f6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 75 1e 25 5f
16fbh mov rdx,7FFDDB830D18h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d18h:imm64]         encoding(10 bytes) = 48 ba 18 0d 83 db fd 7f 00 00
1705h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1709h mov rcx,1E1F7827040h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827040h:imm64]          encoding(10 bytes) = 48 b9 40 70 82 f7 e1 01 00 00
1713h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1716h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 25 1e 25 5f
171bh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
171eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1721h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1724h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
172eh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 dd 06 e2 ff
1733h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1736h mov rcx,1E1F7827048h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827048h:imm64]          encoding(10 bytes) = 48 b9 48 70 82 f7 e1 01 00 00
1740h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1743h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1746h jne short 1799h               ; JNE(Jne_rel8_64) [1799h:jmp64]                       encoding(2 bytes) = 75 51
1748h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
1752h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 d9 2c 25 5f
1757h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
175ah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1764h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1767h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
176ah je near ptr 1d7ah             ; JE(Je_rel32_64) [1D7Ah:jmp64]                        encoding(6 bytes) = 0f 84 0a 06 00 00
1770h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1774h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 f7 1d 25 5f
1779h mov rdx,7FFDDB830D20h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d20h:imm64]         encoding(10 bytes) = 48 ba 20 0d 83 db fd 7f 00 00
1783h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1787h mov rcx,1E1F7827048h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827048h:imm64]          encoding(10 bytes) = 48 b9 48 70 82 f7 e1 01 00 00
1791h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1794h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 a7 1d 25 5f
1799h mov rcx,1E1F7827050h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827050h:imm64]          encoding(10 bytes) = 48 b9 50 70 82 f7 e1 01 00 00
17a3h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
17a6h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
17a9h jne short 17ffh               ; JNE(Jne_rel8_64) [17FFh:jmp64]                       encoding(2 bytes) = 75 54
17abh mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
17b5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 76 2c 25 5f
17bah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
17bdh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
17c7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
17cah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
17cdh je near ptr 1d83h             ; JE(Je_rel32_64) [1D83h:jmp64]                        encoding(6 bytes) = 0f 84 b0 05 00 00
17d3h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
17d7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 94 1d 25 5f
17dch mov rdx,7FFDDB830D28h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d28h:imm64]         encoding(10 bytes) = 48 ba 28 0d 83 db fd 7f 00 00
17e6h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
17eah mov rcx,1E1F7827050h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827050h:imm64]          encoding(10 bytes) = 48 b9 50 70 82 f7 e1 01 00 00
17f4h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
17f7h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 44 1d 25 5f
17fch mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
17ffh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1802h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1805h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
180fh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 fc 05 e2 ff
1814h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1817h mov rcx,1E1F7827058h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827058h:imm64]          encoding(10 bytes) = 48 b9 58 70 82 f7 e1 01 00 00
1821h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1824h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1827h jne short 187ah               ; JNE(Jne_rel8_64) [187Ah:jmp64]                       encoding(2 bytes) = 75 51
1829h mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
1833h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 f8 2b 25 5f
1838h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
183bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1845h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1848h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
184bh je near ptr 1d8ch             ; JE(Je_rel32_64) [1D8Ch:jmp64]                        encoding(6 bytes) = 0f 84 3b 05 00 00
1851h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1855h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 16 1d 25 5f
185ah mov rdx,7FFDDB830D30h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d30h:imm64]         encoding(10 bytes) = 48 ba 30 0d 83 db fd 7f 00 00
1864h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1868h mov rcx,1E1F7827058h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827058h:imm64]          encoding(10 bytes) = 48 b9 58 70 82 f7 e1 01 00 00
1872h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1875h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 c6 1c 25 5f
187ah mov rcx,1E1F7827060h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827060h:imm64]          encoding(10 bytes) = 48 b9 60 70 82 f7 e1 01 00 00
1884h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1887h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
188ah jne short 18e0h               ; JNE(Jne_rel8_64) [18E0h:jmp64]                       encoding(2 bytes) = 75 54
188ch mov rcx,7FFDDBA03078h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03078h:imm64]         encoding(10 bytes) = 48 b9 78 30 a0 db fd 7f 00 00
1896h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 95 2b 25 5f
189bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
189eh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
18a8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
18abh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
18aeh je near ptr 1d95h             ; JE(Je_rel32_64) [1D95h:jmp64]                        encoding(6 bytes) = 0f 84 e1 04 00 00
18b4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
18b8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 b3 1c 25 5f
18bdh mov rdx,7FFDDB830D38h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d38h:imm64]         encoding(10 bytes) = 48 ba 38 0d 83 db fd 7f 00 00
18c7h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
18cbh mov rcx,1E1F7827060h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827060h:imm64]          encoding(10 bytes) = 48 b9 60 70 82 f7 e1 01 00 00
18d5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
18d8h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 63 1c 25 5f
18ddh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
18e0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
18e3h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
18e6h mov rcx,7FFDDBA03190h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03190h:imm64]         encoding(10 bytes) = 48 b9 90 31 a0 db fd 7f 00 00
18f0h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 1b 05 e2 ff
18f5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
18f8h mov rcx,1E1F7827068h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827068h:imm64]          encoding(10 bytes) = 48 b9 68 70 82 f7 e1 01 00 00
1902h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1905h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1908h jne short 195bh               ; JNE(Jne_rel8_64) [195Bh:jmp64]                       encoding(2 bytes) = 75 51
190ah mov rcx,7FFDDBA031E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba031e0h:imm64]         encoding(10 bytes) = 48 b9 e0 31 a0 db fd 7f 00 00
1914h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 17 2b 25 5f
1919h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
191ch mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1926h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1929h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
192ch je near ptr 1d9eh             ; JE(Je_rel32_64) [1D9Eh:jmp64]                        encoding(6 bytes) = 0f 84 6c 04 00 00
1932h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1936h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 35 1c 25 5f
193bh mov rdx,7FFDDB830D40h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d40h:imm64]         encoding(10 bytes) = 48 ba 40 0d 83 db fd 7f 00 00
1945h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1949h mov rcx,1E1F7827068h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827068h:imm64]          encoding(10 bytes) = 48 b9 68 70 82 f7 e1 01 00 00
1953h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1956h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 e5 1b 25 5f
195bh mov rcx,1E1F7827070h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827070h:imm64]          encoding(10 bytes) = 48 b9 70 70 82 f7 e1 01 00 00
1965h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1968h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
196bh jne short 19c1h               ; JNE(Jne_rel8_64) [19C1h:jmp64]                       encoding(2 bytes) = 75 54
196dh mov rcx,7FFDDBA034E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba034e8h:imm64]         encoding(10 bytes) = 48 b9 e8 34 a0 db fd 7f 00 00
1977h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 b4 2a 25 5f
197ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
197fh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1989h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
198ch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
198fh je near ptr 1da7h             ; JE(Je_rel32_64) [1DA7h:jmp64]                        encoding(6 bytes) = 0f 84 12 04 00 00
1995h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1999h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 d2 1b 25 5f
199eh mov rdx,7FFDDB830D48h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d48h:imm64]         encoding(10 bytes) = 48 ba 48 0d 83 db fd 7f 00 00
19a8h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
19ach mov rcx,1E1F7827070h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827070h:imm64]          encoding(10 bytes) = 48 b9 70 70 82 f7 e1 01 00 00
19b6h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
19b9h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 82 1b 25 5f
19beh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
19c1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
19c4h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
19c7h mov rcx,7FFDDBA03600h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03600h:imm64]         encoding(10 bytes) = 48 b9 00 36 a0 db fd 7f 00 00
19d1h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 3a 04 e2 ff
19d6h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
19d9h mov rcx,1E1F7827078h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827078h:imm64]          encoding(10 bytes) = 48 b9 78 70 82 f7 e1 01 00 00
19e3h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
19e6h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
19e9h jne short 1a3ch               ; JNE(Jne_rel8_64) [1A3Ch:jmp64]                       encoding(2 bytes) = 75 51
19ebh mov rcx,7FFDDBA03650h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03650h:imm64]         encoding(10 bytes) = 48 b9 50 36 a0 db fd 7f 00 00
19f5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 36 2a 25 5f
19fah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
19fdh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1a07h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1a0ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1a0dh je near ptr 1db0h             ; JE(Je_rel32_64) [1DB0h:jmp64]                        encoding(6 bytes) = 0f 84 9d 03 00 00
1a13h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1a17h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 54 1b 25 5f
1a1ch mov rdx,7FFDDB830D50h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d50h:imm64]         encoding(10 bytes) = 48 ba 50 0d 83 db fd 7f 00 00
1a26h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1a2ah mov rcx,1E1F7827078h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827078h:imm64]          encoding(10 bytes) = 48 b9 78 70 82 f7 e1 01 00 00
1a34h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1a37h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 04 1b 25 5f
1a3ch mov rcx,1E1F7827080h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827080h:imm64]          encoding(10 bytes) = 48 b9 80 70 82 f7 e1 01 00 00
1a46h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1a49h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1a4ch jne short 1aa2h               ; JNE(Jne_rel8_64) [1AA2h:jmp64]                       encoding(2 bytes) = 75 54
1a4eh mov rcx,7FFDDBA03958h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03958h:imm64]         encoding(10 bytes) = 48 b9 58 39 a0 db fd 7f 00 00
1a58h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 d3 29 25 5f
1a5dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1a60h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1a6ah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1a6dh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1a70h je near ptr 1db9h             ; JE(Je_rel32_64) [1DB9h:jmp64]                        encoding(6 bytes) = 0f 84 43 03 00 00
1a76h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1a7ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 f1 1a 25 5f
1a7fh mov rdx,7FFDDB830D58h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d58h:imm64]         encoding(10 bytes) = 48 ba 58 0d 83 db fd 7f 00 00
1a89h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
1a8dh mov rcx,1E1F7827080h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827080h:imm64]          encoding(10 bytes) = 48 b9 80 70 82 f7 e1 01 00 00
1a97h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1a9ah call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 a1 1a 25 5f
1a9fh mov r9,rdi                    ; MOV(Mov_r64_rm64) [R9,RDI]                           encoding(3 bytes) = 4c 8b cf
1aa2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1aa5h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1aa8h mov rcx,7FFDDBA03A70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03a70h:imm64]         encoding(10 bytes) = 48 b9 70 3a a0 db fd 7f 00 00
1ab2h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE21E10h:jmp64]        encoding(5 bytes) = e8 59 03 e2 ff
1ab7h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1abah mov rcx,1E1F7827088h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827088h:imm64]          encoding(10 bytes) = 48 b9 88 70 82 f7 e1 01 00 00
1ac4h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
1ac7h test rsi,rsi                  ; TEST(Test_rm64_r64) [RSI,RSI]                        encoding(3 bytes) = 48 85 f6
1acah jne short 1b1dh               ; JNE(Jne_rel8_64) [1B1Dh:jmp64]                       encoding(2 bytes) = 75 51
1acch mov rcx,7FFDDBA03AC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03ac0h:imm64]         encoding(10 bytes) = 48 b9 c0 3a a0 db fd 7f 00 00
1ad6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 55 29 25 5f
1adbh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
1adeh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1ae8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1aebh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1aeeh je near ptr 1dc2h             ; JE(Je_rel32_64) [1DC2h:jmp64]                        encoding(6 bytes) = 0f 84 ce 02 00 00
1af4h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
1af8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 73 1a 25 5f
1afdh mov rdx,7FFDDB830D60h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d60h:imm64]         encoding(10 bytes) = 48 ba 60 0d 83 db fd 7f 00 00
1b07h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
1b0bh mov rcx,1E1F7827088h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827088h:imm64]          encoding(10 bytes) = 48 b9 88 70 82 f7 e1 01 00 00
1b15h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1b18h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 23 1a 25 5f
1b1dh mov rcx,1E1F7827090h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827090h:imm64]          encoding(10 bytes) = 48 b9 90 70 82 f7 e1 01 00 00
1b27h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
1b2ah test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
1b2dh jne short 1b83h               ; JNE(Jne_rel8_64) [1B83h:jmp64]                       encoding(2 bytes) = 75 54
1b2fh mov rcx,7FFDDBA03BA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03ba0h:imm64]         encoding(10 bytes) = 48 b9 a0 3b a0 db fd 7f 00 00
1b39h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F254430h:jmp64]                encoding(5 bytes) = e8 f2 28 25 5f
1b3eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1b41h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
1b4bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1b4eh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
1b51h je near ptr 1dcbh             ; JE(Je_rel32_64) [1DCBh:jmp64]                        encoding(6 bytes) = 0f 84 74 02 00 00
1b57h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
1b5bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F253570h:jmp64]                encoding(5 bytes) = e8 10 1a 25 5f
1b60h mov rdx,7FFDDB830D68h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d68h:imm64]         encoding(10 bytes) = 48 ba 68 0d 83 db fd 7f 00 00
1b6ah mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
1b6eh mov rcx,1E1F7827090h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827090h:imm64]          encoding(10 bytes) = 48 b9 90 70 82 f7 e1 01 00 00
1b78h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1b7bh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F253540h:jmp64]                encoding(5 bytes) = e8 c0 19 25 5f
1b80h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
1b83h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1b86h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
1b89h mov rcx,7FFDDBA03CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 3c a0 db fd 7f 00 00
1b93h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
1b9dh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
1ba1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1ba2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1ba3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1ba4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1ba5h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1ba7h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1ba9h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1babh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1badh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
1bb0h mov rcx,7FFDDBA018B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba018b8h:imm64]         encoding(10 bytes) = 48 b9 b8 18 a0 db fd 7f 00 00
1bbah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1bbch call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F2545C0h:jmp64]                encoding(5 bytes) = e8 ff 29 25 5f
1bc1h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
1bc2h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
1bc6h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1bc7h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1bc8h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1bc9h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1bcah pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
1bcch pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
1bceh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1bd0h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1bd2h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1bd3h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1bd6h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 55 1f 71 ff
1bdbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1bdch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1bdfh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 4c 1f 71 ff
1be4h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1be5h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1be8h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 43 1f 71 ff
1bedh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1beeh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1bf1h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 3a 1f 71 ff
1bf6h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1bf7h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
1bfah call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 31 1f 71 ff
1bffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c00h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c03h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 28 1f 71 ff
1c08h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c09h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
1c0ch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 1f 1f 71 ff
1c11h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c12h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c15h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 16 1f 71 ff
1c1ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c1bh mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
1c1eh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 0d 1f 71 ff
1c23h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c24h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c27h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 04 1f 71 ff
1c2ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c2dh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
1c30h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 fb 1e 71 ff
1c35h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c36h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c39h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 f2 1e 71 ff
1c3eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c3fh mov rcx,r13                   ; MOV(Mov_r64_rm64) [RCX,R13]                          encoding(3 bytes) = 49 8b cd
1c42h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 e9 1e 71 ff
1c47h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c48h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c4bh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 e0 1e 71 ff
1c50h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c51h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1c54h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 d7 1e 71 ff
1c59h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c5ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c5dh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 ce 1e 71 ff
1c62h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c63h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1c66h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 c5 1e 71 ff
1c6bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c6ch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c6fh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 bc 1e 71 ff
1c74h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c75h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1c78h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 b3 1e 71 ff
1c7dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c7eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c81h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 aa 1e 71 ff
1c86h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c87h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1c8ah call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 a1 1e 71 ff
1c8fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c90h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1c93h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 98 1e 71 ff
1c98h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1c99h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1c9ch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 8f 1e 71 ff
1ca1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ca2h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1ca5h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 86 1e 71 ff
1caah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cabh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1caeh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 7d 1e 71 ff
1cb3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cb4h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cb7h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 74 1e 71 ff
1cbch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cbdh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1cc0h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 6b 1e 71 ff
1cc5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cc6h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cc9h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 62 1e 71 ff
1cceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ccfh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1cd2h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 59 1e 71 ff
1cd7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cd8h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cdbh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 50 1e 71 ff
1ce0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ce1h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1ce4h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 47 1e 71 ff
1ce9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ceah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cedh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 3e 1e 71 ff
1cf2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cf3h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1cf6h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 35 1e 71 ff
1cfbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1cfch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1cffh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 2c 1e 71 ff
1d04h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d05h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d08h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 23 1e 71 ff
1d0dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d0eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d11h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 1a 1e 71 ff
1d16h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d17h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d1ah call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 11 1e 71 ff
1d1fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d20h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d23h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 08 1e 71 ff
1d28h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d29h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d2ch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 ff 1d 71 ff
1d31h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d32h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d35h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 f6 1d 71 ff
1d3ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d3bh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d3eh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 ed 1d 71 ff
1d43h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d44h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d47h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 e4 1d 71 ff
1d4ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d4dh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d50h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 db 1d 71 ff
1d55h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d56h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d59h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 d2 1d 71 ff
1d5eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d5fh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d62h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 c9 1d 71 ff
1d67h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d68h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d6bh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 c0 1d 71 ff
1d70h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d71h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d74h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 b7 1d 71 ff
1d79h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d7ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d7dh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 ae 1d 71 ff
1d82h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d83h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1d86h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 a5 1d 71 ff
1d8bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d8ch mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1d8fh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 9c 1d 71 ff
1d94h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d95h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1d98h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 93 1d 71 ff
1d9dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1d9eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1da1h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 8a 1d 71 ff
1da6h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1da7h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1daah call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 81 1d 71 ff
1dafh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1db0h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1db3h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 78 1d 71 ff
1db8h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1db9h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
1dbch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 6f 1d 71 ff
1dc1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dc2h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
1dc5h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 66 1d 71 ff
1dcah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dcbh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
1dceh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF713B30h:jmp64]        encoding(5 bytes) = e8 5d 1d 71 ff
1dd3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[7636]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0xFF,0xC9,0x83,0xF9,0x07,0x0F,0x87,0x95,0x1B,0x00,0x00,0x8B,0xC9,0x48,0x8D,0x15,0xB4,0x1D,0x00,0x00,0x8B,0x14,0x8A,0x48,0x8D,0x05,0xE2,0xFF,0xFF,0xFF,0x48,0x03,0xD0,0xFF,0xE2,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x19,0x45,0x25,0x5F,0x48,0x8B,0xF0,0x33,0xC9,0x89,0x4E,0x10,0xC7,0x46,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xC6,0x47,0x25,0x5F,0x48,0xB9,0xD0,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x01,0x4D,0x85,0xC0,0x75,0x54,0x48,0xB9,0x78,0x45,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA5,0x43,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2F,0x1B,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xC3,0x34,0x25,0x5F,0x48,0xBA,0xA8,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xD0,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x73,0x34,0x25,0x5F,0x4C,0x8B,0xC7,0x48,0x8B,0xD6,0x48,0xB9,0x00,0x47,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x40,0x20,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x52,0x44,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xFF,0x46,0x25,0x5F,0x48,0xB9,0xD8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDE,0x42,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x71,0x1A,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xFC,0x33,0x25,0x5F,0x48,0xBA,0xB0,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xD8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xAC,0x33,0x25,0x5F,0x48,0xB9,0xE0,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x44,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7B,0x42,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x17,0x1A,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x99,0x33,0x25,0x5F,0x48,0xBA,0xB8,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xE0,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x49,0x33,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x28,0x45,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x10,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x25,0x43,0x25,0x5F,0x48,0x8B,0xD8,0x33,0xC9,0x89,0x4B,0x10,0xC7,0x43,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xD2,0x45,0x25,0x5F,0x48,0xB9,0xE8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB1,0x41,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x56,0x19,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xCF,0x32,0x25,0x5F,0x48,0xBA,0xC0,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xE8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x7F,0x32,0x25,0x5F,0x48,0xB9,0xF0,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4E,0x41,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFC,0x18,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x6C,0x32,0x25,0x5F,0x48,0xBA,0xC8,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xF0,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x1C,0x32,0x25,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0x1A,0xE2,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xF8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD0,0x40,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x87,0x18,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xEE,0x31,0x25,0x5F,0x48,0xBA,0xD0,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xF8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x9E,0x31,0x25,0x5F,0x48,0xB9,0x00,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xA8,0x42,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6D,0x40,0x25,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2D,0x18,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0x8B,0x31,0x25,0x5F,0x48,0xBA,0xD8,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x00,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0x3B,0x31,0x25,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD5,0x4C,0x8B,0xC6,0x48,0xB9,0xC0,0x43,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x17,0x41,0x25,0x5F,0x4C,0x8B,0xF0,0x33,0xC9,0x41,0x89,0x4E,0x10,0x41,0xC7,0x46,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xC2,0x43,0x25,0x5F,0x48,0xB9,0x08,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA1,0x3F,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x6A,0x17,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xBF,0x30,0x25,0x5F,0x48,0xBA,0xE0,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x08,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x6F,0x30,0x25,0x5F,0x48,0xB9,0x10,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0x3F,0x25,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x10,0x17,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0x5C,0x30,0x25,0x5F,0x48,0xBA,0xE8,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0x10,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0x0C,0x30,0x25,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC6,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x18,0xE2,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0x18,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0x3E,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x9B,0x16,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xDE,0x2F,0x25,0x5F,0x48,0xBA,0xF0,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x18,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x8E,0x2F,0x25,0x5F,0x48,0xB9,0x20,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x56,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0x3E,0x25,0x5F,0x4C,0x8B,0xE0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x41,0x16,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0xE8,0x7A,0x2F,0x25,0x5F,0x48,0xBA,0xF8,0x0B,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x54,0x24,0x18,0x48,0xB9,0x20,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD4,0xE8,0x29,0x2F,0x25,0x5F,0x4D,0x8B,0xCC,0x49,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x17,0xE2,0xFF,0x4C,0x8B,0xE0,0x48,0xB9,0x28,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDD,0x3D,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCA,0x15,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xFB,0x2E,0x25,0x5F,0x48,0xBA,0x00,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x28,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xAB,0x2E,0x25,0x5F,0x48,0xB9,0x30,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x40,0x41,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7A,0x3D,0x25,0x5F,0x4C,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x70,0x15,0x00,0x00,0x49,0x8D,0x4D,0x08,0xE8,0x98,0x2E,0x25,0x5F,0x48,0xBA,0x08,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x55,0x18,0x48,0xB9,0x30,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD5,0xE8,0x48,0x2E,0x25,0x5F,0x4D,0x8B,0xCD,0x49,0x8B,0xD4,0x4C,0x8B,0xC6,0x48,0xB9,0x58,0x42,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x24,0x3E,0x25,0x5F,0x4C,0x8B,0xE8,0x33,0xC9,0x41,0x89,0x4D,0x10,0x41,0xC7,0x45,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xCF,0x40,0x25,0x5F,0x48,0xB9,0x38,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAE,0x3C,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xAD,0x14,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xCC,0x2D,0x25,0x5F,0x48,0xBA,0x10,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x38,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x7C,0x2D,0x25,0x5F,0x48,0xB9,0x40,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4B,0x3C,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x53,0x14,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x69,0x2D,0x25,0x5F,0x48,0xBA,0x18,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x40,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x19,0x2D,0x25,0x5F,0x4C,0x8B,0xCF,0x49,0x8B,0xD5,0x4C,0x8B,0xC6,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0x15,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x48,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCD,0x3B,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xDE,0x13,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xEB,0x2C,0x25,0x5F,0x48,0xBA,0x20,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x48,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x9B,0x2C,0x25,0x5F,0x48,0xB9,0x50,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6A,0x3B,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x84,0x13,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x88,0x2C,0x25,0x5F,0x48,0xBA,0x28,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x50,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x38,0x2C,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF0,0x14,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x58,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEC,0x3A,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x0F,0x13,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x0A,0x2C,0x25,0x5F,0x48,0xBA,0x30,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x58,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xBA,0x2B,0x25,0x5F,0x48,0xB9,0x60,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x89,0x3A,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB5,0x12,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xA7,0x2B,0x25,0x5F,0x48,0xBA,0x38,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x60,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x57,0x2B,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0F,0x14,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x68,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0B,0x3A,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x40,0x12,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x29,0x2B,0x25,0x5F,0x48,0xBA,0x40,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x68,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xD9,0x2A,0x25,0x5F,0x48,0xB9,0x70,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xD8,0x3F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA8,0x39,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE6,0x11,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xC6,0x2A,0x25,0x5F,0x48,0xBA,0x48,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x70,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x76,0x2A,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xF0,0x40,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x52,0x3A,0x25,0x5F,0x48,0x8B,0xD8,0x33,0xC9,0x89,0x4B,0x10,0xC7,0x43,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xFF,0x3C,0x25,0x5F,0x48,0xB9,0x78,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDE,0x38,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x25,0x11,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xFC,0x29,0x25,0x5F,0x48,0xBA,0x50,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x78,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xAC,0x29,0x25,0x5F,0x48,0xB9,0x80,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7B,0x38,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCB,0x10,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x99,0x29,0x25,0x5F,0x48,0xBA,0x58,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x80,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x49,0x29,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x81,0x11,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x88,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFD,0x37,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x56,0x10,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x1B,0x29,0x25,0x5F,0x48,0xBA,0x60,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x88,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xCB,0x28,0x25,0x5F,0x48,0xB9,0x90,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9A,0x37,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFC,0x0F,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xB8,0x28,0x25,0x5F,0x48,0xBA,0x68,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x90,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x68,0x28,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x20,0x11,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x98,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0x37,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x87,0x0F,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x3A,0x28,0x25,0x5F,0x48,0xBA,0x70,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x98,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xEA,0x27,0x25,0x5F,0x48,0xB9,0xA0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB9,0x36,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2D,0x0F,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xD7,0x27,0x25,0x5F,0x48,0xBA,0x78,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xA0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x87,0x27,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3F,0x10,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0xA8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3B,0x36,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB8,0x0E,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x59,0x27,0x25,0x5F,0x48,0xBA,0x80,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xA8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x09,0x27,0x25,0x5F,0x48,0xB9,0xB0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x78,0x30,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD8,0x35,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x5E,0x0E,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xF6,0x26,0x25,0x5F,0x48,0xBA,0x88,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xB0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xA6,0x26,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x90,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5E,0x0F,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xB8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xE0,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5A,0x35,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE9,0x0D,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x78,0x26,0x25,0x5F,0x48,0xBA,0x90,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xB8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x28,0x26,0x25,0x5F,0x48,0xB9,0xC0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x70,0x3E,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF7,0x34,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x8F,0x0D,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x15,0x26,0x25,0x5F,0x48,0xBA,0x98,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xC0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xC5,0x25,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x88,0x3F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA1,0x35,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x4E,0x38,0x25,0x5F,0x48,0xB9,0xC8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2D,0x34,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCE,0x0C,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x4B,0x25,0x25,0x5F,0x48,0xBA,0xA0,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xC8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xFB,0x24,0x25,0x5F,0x48,0xB9,0xD0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCA,0x33,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x74,0x0C,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xE8,0x24,0x25,0x5F,0x48,0xBA,0xA8,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xD0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x98,0x24,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD0,0x0C,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xD8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4C,0x33,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFF,0x0B,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x6A,0x24,0x25,0x5F,0x48,0xBA,0xB0,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xD8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x1A,0x24,0x25,0x5F,0x48,0xB9,0xE0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE9,0x32,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA5,0x0B,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x07,0x24,0x25,0x5F,0x48,0xBA,0xB8,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xE0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB7,0x23,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6F,0x0C,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0xE8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6B,0x32,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x30,0x0B,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x89,0x23,0x25,0x5F,0x48,0xBA,0xC0,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xE8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x39,0x23,0x25,0x5F,0x48,0xB9,0xF0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x08,0x32,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xD6,0x0A,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x26,0x23,0x25,0x5F,0x48,0xBA,0xC8,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xF0,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xD6,0x22,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8E,0x0B,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xF8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8A,0x31,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x61,0x0A,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xA8,0x22,0x25,0x5F,0x48,0xBA,0xD0,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0xF8,0x6F,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x58,0x22,0x25,0x5F,0x48,0xB9,0x00,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x78,0x30,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x27,0x31,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x07,0x0A,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x45,0x22,0x25,0x5F,0x48,0xBA,0xD8,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x00,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xF5,0x21,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x90,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAD,0x0A,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x08,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xE0,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA9,0x30,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x92,0x09,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xC7,0x21,0x25,0x5F,0x48,0xBA,0xE0,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x08,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x77,0x21,0x25,0x5F,0x48,0xB9,0x10,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xE8,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x46,0x30,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x38,0x09,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x64,0x21,0x25,0x5F,0x48,0xBA,0xE8,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x10,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x14,0x21,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x00,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0x09,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x18,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x50,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC8,0x2F,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC3,0x08,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xE6,0x20,0x25,0x5F,0x48,0xBA,0xF0,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x18,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x96,0x20,0x25,0x5F,0x48,0xB9,0x20,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x3D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x65,0x2F,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x69,0x08,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x83,0x20,0x25,0x5F,0x48,0xBA,0xF8,0x0C,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x20,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x33,0x20,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x20,0x3E,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x0F,0x30,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xBC,0x32,0x25,0x5F,0x48,0xB9,0x28,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9B,0x2E,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA8,0x07,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xB9,0x1F,0x25,0x5F,0x48,0xBA,0x00,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x28,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x69,0x1F,0x25,0x5F,0x48,0xB9,0x30,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x38,0x2E,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x4E,0x07,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x56,0x1F,0x25,0x5F,0x48,0xBA,0x08,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x30,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x06,0x1F,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0x07,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x38,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBA,0x2D,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xD9,0x06,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xD8,0x1E,0x25,0x5F,0x48,0xBA,0x10,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x38,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x88,0x1E,0x25,0x5F,0x48,0xB9,0x40,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x57,0x2D,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x7F,0x06,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x75,0x1E,0x25,0x5F,0x48,0xBA,0x18,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x40,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x25,0x1E,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDD,0x06,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x48,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD9,0x2C,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x0A,0x06,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0xF7,0x1D,0x25,0x5F,0x48,0xBA,0x20,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x48,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xA7,0x1D,0x25,0x5F,0x48,0xB9,0x50,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0x2C,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB0,0x05,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x94,0x1D,0x25,0x5F,0x48,0xBA,0x28,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x50,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x44,0x1D,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFC,0x05,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x58,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF8,0x2B,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x3B,0x05,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x16,0x1D,0x25,0x5F,0x48,0xBA,0x30,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x58,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xC6,0x1C,0x25,0x5F,0x48,0xB9,0x60,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x78,0x30,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x95,0x2B,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE1,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xB3,0x1C,0x25,0x5F,0x48,0xBA,0x38,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x60,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x63,0x1C,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x90,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1B,0x05,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x68,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xE0,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x17,0x2B,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x6C,0x04,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x35,0x1C,0x25,0x5F,0x48,0xBA,0x40,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x68,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0xE5,0x1B,0x25,0x5F,0x48,0xB9,0x70,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xE8,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x2A,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x12,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xD2,0x1B,0x25,0x5F,0x48,0xBA,0x48,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x70,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x82,0x1B,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0x00,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3A,0x04,0xE2,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x78,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0x50,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x36,0x2A,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x9D,0x03,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x54,0x1B,0x25,0x5F,0x48,0xBA,0x50,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x78,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x04,0x1B,0x25,0x5F,0x48,0xB9,0x80,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x39,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD3,0x29,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x43,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xF1,0x1A,0x25,0x5F,0x48,0xBA,0x58,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x80,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xA1,0x1A,0x25,0x5F,0x4C,0x8B,0xCF,0x48,0x8B,0xD3,0x4C,0x8B,0xC6,0x48,0xB9,0x70,0x3A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x59,0x03,0xE2,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x88,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x31,0x48,0x85,0xF6,0x75,0x51,0x48,0xB9,0xC0,0x3A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0x29,0x25,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCE,0x02,0x00,0x00,0x48,0x8D,0x4E,0x08,0xE8,0x73,0x1A,0x25,0x5F,0x48,0xBA,0x60,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x88,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x23,0x1A,0x25,0x5F,0x48,0xB9,0x90,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0xA0,0x3B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF2,0x28,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x74,0x02,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x10,0x1A,0x25,0x5F,0x48,0xBA,0x68,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x90,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xC0,0x19,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD7,0x4C,0x8B,0xC6,0x48,0xB9,0xB8,0x3C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0xB9,0xB8,0x18,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0xE8,0xFF,0x29,0x25,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0x48,0x8B,0xCF,0xE8,0x55,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x4C,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x43,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x3A,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0x31,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x28,0x1F,0x71,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0x1F,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x16,0x1F,0x71,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x0D,0x1F,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x04,0x1F,0x71,0xFF,0xCC,0x49,0x8B,0xCC,0xE8,0xFB,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xF2,0x1E,0x71,0xFF,0xCC,0x49,0x8B,0xCD,0xE8,0xE9,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xE0,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xD7,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xCE,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xC5,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xBC,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xB3,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xAA,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xA1,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x98,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x8F,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x86,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x7D,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x74,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x6B,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x62,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x59,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x50,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x47,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x3E,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x35,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x2C,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x23,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x1A,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x11,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x08,0x1E,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xFF,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xF6,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xED,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xE4,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xDB,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xD2,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xC9,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xC0,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xB7,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0xAE,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xA5,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x9C,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x93,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x8A,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x81,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x78,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x6F,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x66,0x1D,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0x5D,0x1D,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N1>> bitcombo(N1 n)
; location: [7FFDDBA11EA0h, 7FFDDBA11F37h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov [rsp+40h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 40
000ch mov rcx,7FFDDB9EEAD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eead0h:imm64]         encoding(10 bytes) = 48 b9 d0 ea 9e db fd 7f 00 00
0016h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252610h:jmp64]                encoding(5 bytes) = e8 f5 25 25 5f
001bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001eh movsx rcx,byte ptr [rsp+40h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 40
0024h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0027h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0031h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0036h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F252740h:jmp64]                encoding(5 bytes) = e8 05 27 25 5f
003bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0040h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0043h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004ah mov rcx,7FFDDBA049C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba049c0h:imm64]         encoding(10 bytes) = 48 b9 c0 49 a0 db fd 7f 00 00
0054h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252610h:jmp64]                encoding(5 bytes) = e8 b7 25 25 5f
0059h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
005ch lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0060h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0063h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251750h:jmp64]                encoding(5 bytes) = e8 e8 16 25 5f
0068h mov r8,7FFDDB82F3C8h          ; MOV(Mov_r64_imm64) [R8,7ffddb82f3c8h:imm64]          encoding(10 bytes) = 49 b8 c8 f3 82 db fd 7f 00 00
0072h mov [rbx+18h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 43 18
0076h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0079h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
007ch mov rcx,7FFDDBA04AC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04ac8h:imm64]         encoding(10 bytes) = 48 b9 c8 4a a0 db fd 7f 00 00
0086h mov rax,7FFDDB832040h         ; MOV(Mov_r64_imm64) [RAX,7ffddb832040h:imm64]         encoding(10 bytes) = 48 b8 40 20 83 db fd 7f 00 00
0090h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0094h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0095h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0096h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0097h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> bitcomboBytes => new byte[154]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x89,0x4C,0x24,0x40,0x48,0xB9,0xD0,0xEA,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF5,0x25,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x40,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x05,0x27,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0xC0,0x49,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB7,0x25,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE8,0x16,0x25,0x5F,0x49,0xB8,0xC8,0xF3,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x43,0x18,0x4C,0x8B,0xC3,0x48,0x8B,0xD7,0x48,0xB9,0xC8,0x4A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x40,0x20,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N2>> bitcombo(N2 n)
; location: [7FFDDBA11F60h, 7FFDDBA1207Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000dh mov rcx,7FFDDB9EEB90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eeb90h:imm64]         encoding(10 bytes) = 48 b9 90 eb 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252550h:jmp64]                encoding(5 bytes) = e8 34 25 25 5f
001ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001fh movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0025h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0028h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0032h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0037h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F252680h:jmp64]                encoding(5 bytes) = e8 44 26 25 5f
003ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0041h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0044h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004bh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0055h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F252950h:jmp64]                encoding(5 bytes) = e8 f1 28 25 5f
005fh mov rcx,1E1F7827098h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827098h:imm64]          encoding(10 bytes) = 48 b9 98 70 82 f7 e1 01 00 00
0069h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006ch test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
006fh jne short 00c2h               ; JNE(Jne_rel8_64) [C2h:jmp64]                         encoding(2 bytes) = 75 51
0071h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252550h:jmp64]                encoding(5 bytes) = e8 d0 24 25 5f
0080h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0083h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
008dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0090h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0093h je near ptr 0116h             ; JE(Je_rel32_64) [116h:jmp64]                         encoding(6 bytes) = 0f 84 7d 00 00 00
0099h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251690h:jmp64]                encoding(5 bytes) = e8 ee 15 25 5f
00a2h mov rdx,7FFDDB830D70h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d70h:imm64]         encoding(10 bytes) = 48 ba 70 0d 83 db fd 7f 00 00
00ach mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b0h mov rcx,1E1F7827098h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827098h:imm64]          encoding(10 bytes) = 48 b9 98 70 82 f7 e1 01 00 00
00bah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bdh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F251660h:jmp64]                encoding(5 bytes) = e8 9e 15 25 5f
00c2h mov rcx,7FFDDBA04D88h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04d88h:imm64]         encoding(10 bytes) = 48 b9 88 4d a0 db fd 7f 00 00
00cch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252550h:jmp64]                encoding(5 bytes) = e8 7f 24 25 5f
00d1h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d4h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251690h:jmp64]                encoding(5 bytes) = e8 b0 15 25 5f
00e0h mov r9,7FFDDB830918h          ; MOV(Mov_r64_imm64) [R9,7ffddb830918h:imm64]          encoding(10 bytes) = 49 b9 18 09 83 db fd 7f 00 00
00eah mov [rbp+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),R9]         encoding(4 bytes) = 4c 89 4d 18
00eeh mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
00f1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00f4h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
00f7h mov rcx,7FFDDBA04EA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04ea0h:imm64]         encoding(10 bytes) = 48 b9 a0 4e a0 db fd 7f 00 00
0101h mov rax,7FFDDB831E10h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e10h:imm64]         encoding(10 bytes) = 48 b8 10 1e 83 db fd 7f 00 00
010bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
010fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0110h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0111h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0112h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0113h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0116h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0119h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF711C50h:jmp64]        encoding(5 bytes) = e8 32 1b 71 ff
011eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[287]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0x90,0xEB,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0x25,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x44,0x26,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xF1,0x28,0x25,0x5F,0x48,0xB9,0x98,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD0,0x24,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x7D,0x00,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xEE,0x15,0x25,0x5F,0x48,0xBA,0x70,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x98,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x9E,0x15,0x25,0x5F,0x48,0xB9,0x88,0x4D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7F,0x24,0x25,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0xB0,0x15,0x25,0x5F,0x49,0xB9,0x18,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4D,0x18,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0xA0,0x4E,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x10,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x32,0x1B,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N3>> bitcombo(N3 n)
; location: [7FFDDBA124B0h, 7FFDDBA126C1h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000dh mov rcx,7FFDDB9EEC50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eec50h:imm64]         encoding(10 bytes) = 48 b9 50 ec 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252000h:jmp64]                encoding(5 bytes) = e8 e4 1f 25 5f
001ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001fh movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0025h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0028h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0032h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0037h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F252130h:jmp64]                encoding(5 bytes) = e8 f4 20 25 5f
003ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0041h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0044h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004bh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0055h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F252400h:jmp64]                encoding(5 bytes) = e8 a1 23 25 5f
005fh mov rcx,1E1F78270A0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270a0h:imm64]          encoding(10 bytes) = 48 b9 a0 70 82 f7 e1 01 00 00
0069h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006ch test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
006fh jne short 00c2h               ; JNE(Jne_rel8_64) [C2h:jmp64]                         encoding(2 bytes) = 75 51
0071h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252000h:jmp64]                encoding(5 bytes) = e8 80 1f 25 5f
0080h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0083h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
008dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0090h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0093h je near ptr 01f7h             ; JE(Je_rel32_64) [1F7h:jmp64]                         encoding(6 bytes) = 0f 84 5e 01 00 00
0099h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251140h:jmp64]                encoding(5 bytes) = e8 9e 10 25 5f
00a2h mov rdx,7FFDDB830D78h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d78h:imm64]         encoding(10 bytes) = 48 ba 78 0d 83 db fd 7f 00 00
00ach mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b0h mov rcx,1E1F78270A0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270a0h:imm64]          encoding(10 bytes) = 48 b9 a0 70 82 f7 e1 01 00 00
00bah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bdh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F251110h:jmp64]                encoding(5 bytes) = e8 4e 10 25 5f
00c2h mov rcx,1E1F78270A8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270a8h:imm64]          encoding(10 bytes) = 48 b9 a8 70 82 f7 e1 01 00 00
00cch mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00cfh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d2h jne short 0128h               ; JNE(Jne_rel8_64) [128h:jmp64]                        encoding(2 bytes) = 75 54
00d4h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
00deh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252000h:jmp64]                encoding(5 bytes) = e8 1d 1f 25 5f
00e3h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00e6h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
00f0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00f6h je near ptr 0200h             ; JE(Je_rel32_64) [200h:jmp64]                         encoding(6 bytes) = 0f 84 04 01 00 00
00fch lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0100h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251140h:jmp64]                encoding(5 bytes) = e8 3b 10 25 5f
0105h mov rdx,7FFDDB830D80h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d80h:imm64]         encoding(10 bytes) = 48 ba 80 0d 83 db fd 7f 00 00
010fh mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0113h mov rcx,1E1F78270A8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270a8h:imm64]          encoding(10 bytes) = 48 b9 a8 70 82 f7 e1 01 00 00
011dh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0120h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F251110h:jmp64]                encoding(5 bytes) = e8 eb 0f 25 5f
0125h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0128h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012bh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
012eh mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
0138h call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F960h:jmp64]        encoding(5 bytes) = e8 23 f8 e1 ff
013dh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0140h mov rcx,1E1F78270B0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270b0h:imm64]          encoding(10 bytes) = 48 b9 b0 70 82 f7 e1 01 00 00
014ah mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014dh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0150h jne short 01a3h               ; JNE(Jne_rel8_64) [1A3h:jmp64]                        encoding(2 bytes) = 75 51
0152h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
015ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252000h:jmp64]                encoding(5 bytes) = e8 9f 1e 25 5f
0161h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0164h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
016eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0171h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0174h je near ptr 0209h             ; JE(Je_rel32_64) [209h:jmp64]                         encoding(6 bytes) = 0f 84 8f 00 00 00
017ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
017eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251140h:jmp64]                encoding(5 bytes) = e8 bd 0f 25 5f
0183h mov rdx,7FFDDB830D88h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d88h:imm64]         encoding(10 bytes) = 48 ba 88 0d 83 db fd 7f 00 00
018dh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0191h mov rcx,1E1F78270B0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270b0h:imm64]          encoding(10 bytes) = 48 b9 b0 70 82 f7 e1 01 00 00
019bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
019eh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F251110h:jmp64]                encoding(5 bytes) = e8 6d 0f 25 5f
01a3h mov rcx,7FFDDBA05160h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05160h:imm64]         encoding(10 bytes) = 48 b9 60 51 a0 db fd 7f 00 00
01adh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F252000h:jmp64]                encoding(5 bytes) = e8 4e 1e 25 5f
01b2h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01b5h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01b9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01bch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F251140h:jmp64]                encoding(5 bytes) = e8 7f 0f 25 5f
01c1h mov r9,7FFDDB830930h          ; MOV(Mov_r64_imm64) [R9,7ffddb830930h:imm64]          encoding(10 bytes) = 49 b9 30 09 83 db fd 7f 00 00
01cbh mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
01cfh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
01d2h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01d5h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
01d8h mov rcx,7FFDDBA05278h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05278h:imm64]         encoding(10 bytes) = 48 b9 78 52 a0 db fd 7f 00 00
01e2h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
01ech add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01f0h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01f1h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01f2h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01f3h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01f4h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
01f7h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
01fah call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF711700h:jmp64]        encoding(5 bytes) = e8 01 15 71 ff
01ffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0200h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0203h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF711700h:jmp64]        encoding(5 bytes) = e8 f8 14 71 ff
0208h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0209h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
020ch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF711700h:jmp64]        encoding(5 bytes) = e8 ef 14 71 ff
0211h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[530]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0x50,0xEC,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE4,0x1F,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xF4,0x20,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xA1,0x23,0x25,0x5F,0x48,0xB9,0xA0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0x1F,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x5E,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x9E,0x10,0x25,0x5F,0x48,0xBA,0x78,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xA0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x4E,0x10,0x25,0x5F,0x48,0xB9,0xA8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1D,0x1F,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x04,0x01,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x3B,0x10,0x25,0x5F,0x48,0xBA,0x80,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xA8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0xEB,0x0F,0x25,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x23,0xF8,0xE1,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xB0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0x1E,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x8F,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xBD,0x0F,0x25,0x5F,0x48,0xBA,0x88,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xB0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x6D,0x0F,0x25,0x5F,0x48,0xB9,0x60,0x51,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4E,0x1E,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x7F,0x0F,0x25,0x5F,0x49,0xB9,0x30,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0x78,0x52,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0x01,0x15,0x71,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0xF8,0x14,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xEF,0x14,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N4>> bitcombo(N4 n)
; location: [7FFDDBA126E0h, 7FFDDBA129E4h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000dh mov rcx,7FFDDB9EED10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eed10h:imm64]         encoding(10 bytes) = 48 b9 10 ed 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 b4 1d 25 5f
001ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001fh movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0025h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0028h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0032h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0037h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F251F00h:jmp64]                encoding(5 bytes) = e8 c4 1e 25 5f
003ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0041h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0044h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004bh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0055h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ah call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F2521D0h:jmp64]                encoding(5 bytes) = e8 71 21 25 5f
005fh mov rcx,1E1F78270B8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270b8h:imm64]          encoding(10 bytes) = 48 b9 b8 70 82 f7 e1 01 00 00
0069h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006ch test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
006fh jne short 00c2h               ; JNE(Jne_rel8_64) [C2h:jmp64]                         encoding(2 bytes) = 75 51
0071h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 50 1d 25 5f
0080h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0083h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
008dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0090h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0093h je near ptr 02d8h             ; JE(Je_rel32_64) [2D8h:jmp64]                         encoding(6 bytes) = 0f 84 3f 02 00 00
0099h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250F10h:jmp64]                encoding(5 bytes) = e8 6e 0e 25 5f
00a2h mov rdx,7FFDDB830D90h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d90h:imm64]         encoding(10 bytes) = 48 ba 90 0d 83 db fd 7f 00 00
00ach mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b0h mov rcx,1E1F78270B8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270b8h:imm64]          encoding(10 bytes) = 48 b9 b8 70 82 f7 e1 01 00 00
00bah mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bdh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250EE0h:jmp64]                encoding(5 bytes) = e8 1e 0e 25 5f
00c2h mov rcx,1E1F78270C0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270c0h:imm64]          encoding(10 bytes) = 48 b9 c0 70 82 f7 e1 01 00 00
00cch mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00cfh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d2h jne short 0128h               ; JNE(Jne_rel8_64) [128h:jmp64]                        encoding(2 bytes) = 75 54
00d4h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
00deh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 ed 1c 25 5f
00e3h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00e6h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
00f0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f3h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00f6h je near ptr 02e1h             ; JE(Je_rel32_64) [2E1h:jmp64]                         encoding(6 bytes) = 0f 84 e5 01 00 00
00fch lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0100h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250F10h:jmp64]                encoding(5 bytes) = e8 0b 0e 25 5f
0105h mov rdx,7FFDDB830D98h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830d98h:imm64]         encoding(10 bytes) = 48 ba 98 0d 83 db fd 7f 00 00
010fh mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0113h mov rcx,1E1F78270C0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270c0h:imm64]          encoding(10 bytes) = 48 b9 c0 70 82 f7 e1 01 00 00
011dh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0120h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250EE0h:jmp64]                encoding(5 bytes) = e8 bb 0d 25 5f
0125h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0128h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012bh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
012eh mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
0138h call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F730h:jmp64]        encoding(5 bytes) = e8 f3 f5 e1 ff
013dh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0140h mov rcx,1E1F78270C8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270c8h:imm64]          encoding(10 bytes) = 48 b9 c8 70 82 f7 e1 01 00 00
014ah mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014dh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0150h jne short 01a3h               ; JNE(Jne_rel8_64) [1A3h:jmp64]                        encoding(2 bytes) = 75 51
0152h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
015ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 6f 1c 25 5f
0161h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0164h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
016eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0171h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0174h je near ptr 02eah             ; JE(Je_rel32_64) [2EAh:jmp64]                         encoding(6 bytes) = 0f 84 70 01 00 00
017ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
017eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250F10h:jmp64]                encoding(5 bytes) = e8 8d 0d 25 5f
0183h mov rdx,7FFDDB830DA0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830da0h:imm64]         encoding(10 bytes) = 48 ba a0 0d 83 db fd 7f 00 00
018dh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0191h mov rcx,1E1F78270C8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270c8h:imm64]          encoding(10 bytes) = 48 b9 c8 70 82 f7 e1 01 00 00
019bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
019eh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250EE0h:jmp64]                encoding(5 bytes) = e8 3d 0d 25 5f
01a3h mov rcx,1E1F78270D0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270d0h:imm64]          encoding(10 bytes) = 48 b9 d0 70 82 f7 e1 01 00 00
01adh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b0h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b3h jne short 0209h               ; JNE(Jne_rel8_64) [209h:jmp64]                        encoding(2 bytes) = 75 54
01b5h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
01bfh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 0c 1c 25 5f
01c4h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01c7h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
01d1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d4h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01d7h je near ptr 02f3h             ; JE(Je_rel32_64) [2F3h:jmp64]                         encoding(6 bytes) = 0f 84 16 01 00 00
01ddh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250F10h:jmp64]                encoding(5 bytes) = e8 2a 0d 25 5f
01e6h mov rdx,7FFDDB830DA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830da8h:imm64]         encoding(10 bytes) = 48 ba a8 0d 83 db fd 7f 00 00
01f0h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01f4h mov rcx,1E1F78270D0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270d0h:imm64]          encoding(10 bytes) = 48 b9 d0 70 82 f7 e1 01 00 00
01feh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0201h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250EE0h:jmp64]                encoding(5 bytes) = e8 da 0c 25 5f
0206h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0209h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
020ch mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
020fh mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
0219h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F7B0h:jmp64]        encoding(5 bytes) = e8 92 f5 e1 ff
021eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0221h mov rcx,1E1F78270D8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270d8h:imm64]          encoding(10 bytes) = 48 b9 d8 70 82 f7 e1 01 00 00
022bh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
022eh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0231h jne short 0284h               ; JNE(Jne_rel8_64) [284h:jmp64]                        encoding(2 bytes) = 75 51
0233h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
023dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 8e 1b 25 5f
0242h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0245h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
024fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0252h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0255h je near ptr 02fch             ; JE(Je_rel32_64) [2FCh:jmp64]                         encoding(6 bytes) = 0f 84 a1 00 00 00
025bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
025fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250F10h:jmp64]                encoding(5 bytes) = e8 ac 0c 25 5f
0264h mov rdx,7FFDDB830DB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830db0h:imm64]         encoding(10 bytes) = 48 ba b0 0d 83 db fd 7f 00 00
026eh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0272h mov rcx,1E1F78270D8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270d8h:imm64]          encoding(10 bytes) = 48 b9 d8 70 82 f7 e1 01 00 00
027ch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
027fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250EE0h:jmp64]                encoding(5 bytes) = e8 5c 0c 25 5f
0284h mov rcx,7FFDDBA05538h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05538h:imm64]         encoding(10 bytes) = 48 b9 38 55 a0 db fd 7f 00 00
028eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251DD0h:jmp64]                encoding(5 bytes) = e8 3d 1b 25 5f
0293h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0296h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
029ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
029dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250F10h:jmp64]                encoding(5 bytes) = e8 6e 0c 25 5f
02a2h mov r9,7FFDDB830948h          ; MOV(Mov_r64_imm64) [R9,7ffddb830948h:imm64]          encoding(10 bytes) = 49 b9 48 09 83 db fd 7f 00 00
02ach mov [rbp+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),R9]         encoding(4 bytes) = 4c 89 4d 18
02b0h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
02b3h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02b6h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02b9h mov rcx,7FFDDBA05650h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05650h:imm64]         encoding(10 bytes) = 48 b9 50 56 a0 db fd 7f 00 00
02c3h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
02cdh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
02d1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
02d2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
02d3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
02d4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
02d5h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
02d8h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
02dbh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7114D0h:jmp64]        encoding(5 bytes) = e8 f0 11 71 ff
02e0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02e1h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
02e4h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7114D0h:jmp64]        encoding(5 bytes) = e8 e7 11 71 ff
02e9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02eah mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
02edh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7114D0h:jmp64]        encoding(5 bytes) = e8 de 11 71 ff
02f2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02f3h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
02f6h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7114D0h:jmp64]        encoding(5 bytes) = e8 d5 11 71 ff
02fbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
02fch mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
02ffh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7114D0h:jmp64]        encoding(5 bytes) = e8 cc 11 71 ff
0304h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[773]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0x10,0xED,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x1D,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC4,0x1E,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x71,0x21,0x25,0x5F,0x48,0xB9,0xB8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x50,0x1D,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x3F,0x02,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x6E,0x0E,0x25,0x5F,0x48,0xBA,0x90,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xB8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x1E,0x0E,0x25,0x5F,0x48,0xB9,0xC0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xED,0x1C,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xE5,0x01,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x0B,0x0E,0x25,0x5F,0x48,0xBA,0x98,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xC0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0xBB,0x0D,0x25,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF3,0xF5,0xE1,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xC8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6F,0x1C,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x70,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x8D,0x0D,0x25,0x5F,0x48,0xBA,0xA0,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xC8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x3D,0x0D,0x25,0x5F,0x48,0xB9,0xD0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0C,0x1C,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x16,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x2A,0x0D,0x25,0x5F,0x48,0xBA,0xA8,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xD0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xDA,0x0C,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x92,0xF5,0xE1,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xD8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8E,0x1B,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA1,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0xAC,0x0C,0x25,0x5F,0x48,0xBA,0xB0,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xD8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x5C,0x0C,0x25,0x5F,0x48,0xB9,0x38,0x55,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0x1B,0x25,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x6E,0x0C,0x25,0x5F,0x49,0xB9,0x48,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4D,0x18,0x4C,0x8B,0xCD,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x50,0x56,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0xF0,0x11,0x71,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0xE7,0x11,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xDE,0x11,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xD5,0x11,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xCC,0x11,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N5>> bitcombo(N5 n)
; location: [7FFDDBA12A10h, 7FFDDBA12E0Bh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov [rsp+50h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 50
000fh mov rcx,7FFDDB9EEDD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eedd0h:imm64]         encoding(10 bytes) = 48 b9 d0 ed 9e db fd 7f 00 00
0019h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 82 1a 25 5f
001eh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0021h movsx rcx,byte ptr [rsp+50h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 50
0027h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
002ah mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0034h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0039h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F251BD0h:jmp64]                encoding(5 bytes) = e8 92 1b 25 5f
003eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0041h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0043h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0046h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004dh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0057h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005ch call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F251EA0h:jmp64]                encoding(5 bytes) = e8 3f 1e 25 5f
0061h mov rcx,1E1F78270E0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270e0h:imm64]          encoding(10 bytes) = 48 b9 e0 70 82 f7 e1 01 00 00
006bh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
006eh test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0071h jne short 00c4h               ; JNE(Jne_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = 75 51
0073h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
007dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 1e 1a 25 5f
0082h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0085h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
008fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0092h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0095h je near ptr 03bdh             ; JE(Je_rel32_64) [3BDh:jmp64]                         encoding(6 bytes) = 0f 84 22 03 00 00
009bh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
009fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 3c 0b 25 5f
00a4h mov rdx,7FFDDB830DB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830db8h:imm64]         encoding(10 bytes) = 48 ba b8 0d 83 db fd 7f 00 00
00aeh mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b2h mov rcx,1E1F78270E0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270e0h:imm64]          encoding(10 bytes) = 48 b9 e0 70 82 f7 e1 01 00 00
00bch mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00bfh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 ec 0a 25 5f
00c4h mov rcx,1E1F78270E8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270e8h:imm64]          encoding(10 bytes) = 48 b9 e8 70 82 f7 e1 01 00 00
00ceh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d1h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d4h jne short 012ah               ; JNE(Jne_rel8_64) [12Ah:jmp64]                        encoding(2 bytes) = 75 54
00d6h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
00e0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 bb 19 25 5f
00e5h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00e8h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
00f2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f5h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00f8h je near ptr 03c6h             ; JE(Je_rel32_64) [3C6h:jmp64]                         encoding(6 bytes) = 0f 84 c8 02 00 00
00feh lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0102h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 d9 0a 25 5f
0107h mov rdx,7FFDDB830DC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830dc0h:imm64]         encoding(10 bytes) = 48 ba c0 0d 83 db fd 7f 00 00
0111h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0115h mov rcx,1E1F78270E8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270e8h:imm64]          encoding(10 bytes) = 48 b9 e8 70 82 f7 e1 01 00 00
011fh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0122h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 89 0a 25 5f
0127h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
012ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012dh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0130h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
013ah call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F400h:jmp64]        encoding(5 bytes) = e8 c1 f2 e1 ff
013fh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0142h mov rcx,1E1F78270F0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270f0h:imm64]          encoding(10 bytes) = 48 b9 f0 70 82 f7 e1 01 00 00
014ch mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
014fh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0152h jne short 01a5h               ; JNE(Jne_rel8_64) [1A5h:jmp64]                        encoding(2 bytes) = 75 51
0154h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
015eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 3d 19 25 5f
0163h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0166h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0170h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0173h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0176h je near ptr 03cfh             ; JE(Je_rel32_64) [3CFh:jmp64]                         encoding(6 bytes) = 0f 84 53 02 00 00
017ch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0180h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 5b 0a 25 5f
0185h mov rdx,7FFDDB830DC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830dc8h:imm64]         encoding(10 bytes) = 48 ba c8 0d 83 db fd 7f 00 00
018fh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0193h mov rcx,1E1F78270F0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270f0h:imm64]          encoding(10 bytes) = 48 b9 f0 70 82 f7 e1 01 00 00
019dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a0h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 0b 0a 25 5f
01a5h mov rcx,1E1F78270F8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270f8h:imm64]          encoding(10 bytes) = 48 b9 f8 70 82 f7 e1 01 00 00
01afh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b2h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b5h jne short 020bh               ; JNE(Jne_rel8_64) [20Bh:jmp64]                        encoding(2 bytes) = 75 54
01b7h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
01c1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 da 18 25 5f
01c6h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01c9h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
01d3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d6h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01d9h je near ptr 03d8h             ; JE(Je_rel32_64) [3D8h:jmp64]                         encoding(6 bytes) = 0f 84 f9 01 00 00
01dfh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 f8 09 25 5f
01e8h mov rdx,7FFDDB830DD0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830dd0h:imm64]         encoding(10 bytes) = 48 ba d0 0d 83 db fd 7f 00 00
01f2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01f6h mov rcx,1E1F78270F8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78270f8h:imm64]          encoding(10 bytes) = 48 b9 f8 70 82 f7 e1 01 00 00
0200h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0203h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 a8 09 25 5f
0208h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
020bh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
020eh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0211h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
021bh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F480h:jmp64]        encoding(5 bytes) = e8 60 f2 e1 ff
0220h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0223h mov rcx,1E1F7827100h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827100h:imm64]          encoding(10 bytes) = 48 b9 00 71 82 f7 e1 01 00 00
022dh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0230h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0233h jne short 0286h               ; JNE(Jne_rel8_64) [286h:jmp64]                        encoding(2 bytes) = 75 51
0235h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
023fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 5c 18 25 5f
0244h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0247h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0251h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0254h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0257h je near ptr 03e1h             ; JE(Je_rel32_64) [3E1h:jmp64]                         encoding(6 bytes) = 0f 84 84 01 00 00
025dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0261h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 7a 09 25 5f
0266h mov rdx,7FFDDB830DD8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830dd8h:imm64]         encoding(10 bytes) = 48 ba d8 0d 83 db fd 7f 00 00
0270h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0274h mov rcx,1E1F7827100h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827100h:imm64]          encoding(10 bytes) = 48 b9 00 71 82 f7 e1 01 00 00
027eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0281h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 2a 09 25 5f
0286h mov rcx,1E1F7827108h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827108h:imm64]          encoding(10 bytes) = 48 b9 08 71 82 f7 e1 01 00 00
0290h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0293h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0296h jne short 02ech               ; JNE(Jne_rel8_64) [2ECh:jmp64]                        encoding(2 bytes) = 75 54
0298h mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
02a2h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 f9 17 25 5f
02a7h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02aah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
02b4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02b7h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02bah je near ptr 03eah             ; JE(Je_rel32_64) [3EAh:jmp64]                         encoding(6 bytes) = 0f 84 2a 01 00 00
02c0h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02c4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 17 09 25 5f
02c9h mov rdx,7FFDDB830DE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830de0h:imm64]         encoding(10 bytes) = 48 ba e0 0d 83 db fd 7f 00 00
02d3h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02d7h mov rcx,1E1F7827108h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827108h:imm64]          encoding(10 bytes) = 48 b9 08 71 82 f7 e1 01 00 00
02e1h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02e4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 c7 08 25 5f
02e9h mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02ech mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02efh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f2h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
02fch call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F480h:jmp64]        encoding(5 bytes) = e8 7f f1 e1 ff
0301h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0304h mov rcx,1E1F7827110h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827110h:imm64]          encoding(10 bytes) = 48 b9 10 71 82 f7 e1 01 00 00
030eh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0311h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0314h jne short 0367h               ; JNE(Jne_rel8_64) [367h:jmp64]                        encoding(2 bytes) = 75 51
0316h mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
0320h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 7b 17 25 5f
0325h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0328h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0332h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0335h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0338h je near ptr 03f3h             ; JE(Je_rel32_64) [3F3h:jmp64]                         encoding(6 bytes) = 0f 84 b5 00 00 00
033eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0342h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 99 08 25 5f
0347h mov rdx,7FFDDB830DE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830de8h:imm64]         encoding(10 bytes) = 48 ba e8 0d 83 db fd 7f 00 00
0351h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0355h mov rcx,1E1F7827110h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827110h:imm64]          encoding(10 bytes) = 48 b9 10 71 82 f7 e1 01 00 00
035fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0362h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250BB0h:jmp64]                encoding(5 bytes) = e8 49 08 25 5f
0367h mov rcx,7FFDDBA05910h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05910h:imm64]         encoding(10 bytes) = 48 b9 10 59 a0 db fd 7f 00 00
0371h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251AA0h:jmp64]                encoding(5 bytes) = e8 2a 17 25 5f
0376h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0379h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
037dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0380h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F250BE0h:jmp64]                encoding(5 bytes) = e8 5b 08 25 5f
0385h mov r9,7FFDDB830960h          ; MOV(Mov_r64_imm64) [R9,7ffddb830960h:imm64]          encoding(10 bytes) = 49 b9 60 09 83 db fd 7f 00 00
038fh mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
0393h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0396h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0399h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
039ch mov rcx,7FFDDBA05A28h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05a28h:imm64]         encoding(10 bytes) = 48 b9 28 5a a0 db fd 7f 00 00
03a6h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
03b0h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
03b4h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
03b5h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
03b6h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
03b7h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
03b8h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
03bah jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
03bdh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
03c0h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 db 0d 71 ff
03c5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03c6h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
03c9h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 d2 0d 71 ff
03ceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03cfh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
03d2h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 c9 0d 71 ff
03d7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03d8h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
03dbh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 c0 0d 71 ff
03e0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03e1h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
03e4h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 b7 0d 71 ff
03e9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03eah mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
03edh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 ae 0d 71 ff
03f2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
03f3h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
03f6h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7111A0h:jmp64]        encoding(5 bytes) = e8 a5 0d 71 ff
03fbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1020]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x89,0x4C,0x24,0x50,0x48,0xB9,0xD0,0xED,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x82,0x1A,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x50,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x92,0x1B,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x3F,0x1E,0x25,0x5F,0x48,0xB9,0xE0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1E,0x1A,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x22,0x03,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x3C,0x0B,0x25,0x5F,0x48,0xBA,0xB8,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xE0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xEC,0x0A,0x25,0x5F,0x48,0xB9,0xE8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0x19,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC8,0x02,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0xD9,0x0A,0x25,0x5F,0x48,0xBA,0xC0,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xE8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x89,0x0A,0x25,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC1,0xF2,0xE1,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xF0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0x19,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x53,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x5B,0x0A,0x25,0x5F,0x48,0xBA,0xC8,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xF0,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x0B,0x0A,0x25,0x5F,0x48,0xB9,0xF8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0x18,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xF9,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xF8,0x09,0x25,0x5F,0x48,0xBA,0xD0,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xF8,0x70,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xA8,0x09,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x60,0xF2,0xE1,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x00,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5C,0x18,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x84,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x7A,0x09,0x25,0x5F,0x48,0xBA,0xD8,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x00,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x2A,0x09,0x25,0x5F,0x48,0xB9,0x08,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF9,0x17,0x25,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2A,0x01,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0x17,0x09,0x25,0x5F,0x48,0xBA,0xE0,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x08,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0xC7,0x08,0x25,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7F,0xF1,0xE1,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0x10,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7B,0x17,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xB5,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x99,0x08,0x25,0x5F,0x48,0xBA,0xE8,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x10,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x49,0x08,0x25,0x5F,0x48,0xB9,0x10,0x59,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2A,0x17,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x5B,0x08,0x25,0x5F,0x49,0xB9,0x60,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x28,0x5A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0xDB,0x0D,0x71,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0xD2,0x0D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xC9,0x0D,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xC0,0x0D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xB7,0x0D,0x71,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0xAE,0x0D,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xA5,0x0D,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N6>> bitcombo(N6 n)
; location: [7FFDDBA12E30h, 7FFDDBA13322h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov [rsp+60h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 60
0011h mov rcx,7FFDDB9EEE90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eee90h:imm64]         encoding(10 bytes) = 48 b9 90 ee 9e db fd 7f 00 00
001bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 60 16 25 5f
0020h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0023h movsx rcx,byte ptr [rsp+60h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 60
0029h mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
002ch mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0036h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2517B0h:jmp64]                encoding(5 bytes) = e8 70 17 25 5f
0040h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0043h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0045h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
0048h mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
004fh mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0059h mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
005eh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F251A80h:jmp64]                encoding(5 bytes) = e8 1d 1a 25 5f
0063h mov rcx,1E1F7827118h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827118h:imm64]          encoding(10 bytes) = 48 b9 18 71 82 f7 e1 01 00 00
006dh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0070h test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0073h jne short 00c6h               ; JNE(Jne_rel8_64) [C6h:jmp64]                         encoding(2 bytes) = 75 51
0075h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
007fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 fc 15 25 5f
0084h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0087h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0091h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0094h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0097h je near ptr 04a2h             ; JE(Je_rel32_64) [4A2h:jmp64]                         encoding(6 bytes) = 0f 84 05 04 00 00
009dh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
00a1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 1a 07 25 5f
00a6h mov rdx,7FFDDB830DF0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830df0h:imm64]         encoding(10 bytes) = 48 ba f0 0d 83 db fd 7f 00 00
00b0h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b4h mov rcx,1E1F7827118h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827118h:imm64]          encoding(10 bytes) = 48 b9 18 71 82 f7 e1 01 00 00
00beh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00c1h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 ca 06 25 5f
00c6h mov rcx,1E1F7827120h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827120h:imm64]          encoding(10 bytes) = 48 b9 20 71 82 f7 e1 01 00 00
00d0h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d3h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d6h jne short 012ch               ; JNE(Jne_rel8_64) [12Ch:jmp64]                        encoding(2 bytes) = 75 54
00d8h mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
00e2h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 99 15 25 5f
00e7h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00eah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
00f4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f7h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00fah je near ptr 04abh             ; JE(Je_rel32_64) [4ABh:jmp64]                         encoding(6 bytes) = 0f 84 ab 03 00 00
0100h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0104h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 b7 06 25 5f
0109h mov rdx,7FFDDB830DF8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830df8h:imm64]         encoding(10 bytes) = 48 ba f8 0d 83 db fd 7f 00 00
0113h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0117h mov rcx,1E1F7827120h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827120h:imm64]          encoding(10 bytes) = 48 b9 20 71 82 f7 e1 01 00 00
0121h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0124h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 67 06 25 5f
0129h mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
012ch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
012fh mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0132h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
013ch call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1EFE0h:jmp64]        encoding(5 bytes) = e8 9f ee e1 ff
0141h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0144h mov rcx,1E1F7827128h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827128h:imm64]          encoding(10 bytes) = 48 b9 28 71 82 f7 e1 01 00 00
014eh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0151h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0154h jne short 01a7h               ; JNE(Jne_rel8_64) [1A7h:jmp64]                        encoding(2 bytes) = 75 51
0156h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
0160h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 1b 15 25 5f
0165h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0168h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0172h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0175h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0178h je near ptr 04b4h             ; JE(Je_rel32_64) [4B4h:jmp64]                         encoding(6 bytes) = 0f 84 36 03 00 00
017eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0182h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 39 06 25 5f
0187h mov rdx,7FFDDB830E00h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e00h:imm64]         encoding(10 bytes) = 48 ba 00 0e 83 db fd 7f 00 00
0191h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0195h mov rcx,1E1F7827128h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827128h:imm64]          encoding(10 bytes) = 48 b9 28 71 82 f7 e1 01 00 00
019fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a2h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 e9 05 25 5f
01a7h mov rcx,1E1F7827130h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827130h:imm64]          encoding(10 bytes) = 48 b9 30 71 82 f7 e1 01 00 00
01b1h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b4h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b7h jne short 020dh               ; JNE(Jne_rel8_64) [20Dh:jmp64]                        encoding(2 bytes) = 75 54
01b9h mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
01c3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 b8 14 25 5f
01c8h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01cbh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
01d5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d8h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01dbh je near ptr 04bdh             ; JE(Je_rel32_64) [4BDh:jmp64]                         encoding(6 bytes) = 0f 84 dc 02 00 00
01e1h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 d6 05 25 5f
01eah mov rdx,7FFDDB830E08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e08h:imm64]         encoding(10 bytes) = 48 ba 08 0e 83 db fd 7f 00 00
01f4h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01f8h mov rcx,1E1F7827130h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827130h:imm64]          encoding(10 bytes) = 48 b9 30 71 82 f7 e1 01 00 00
0202h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0205h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 86 05 25 5f
020ah mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
020dh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0210h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0213h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
021dh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F060h:jmp64]        encoding(5 bytes) = e8 3e ee e1 ff
0222h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0225h mov rcx,1E1F7827138h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827138h:imm64]          encoding(10 bytes) = 48 b9 38 71 82 f7 e1 01 00 00
022fh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0232h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0235h jne short 0288h               ; JNE(Jne_rel8_64) [288h:jmp64]                        encoding(2 bytes) = 75 51
0237h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
0241h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 3a 14 25 5f
0246h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0249h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0253h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0256h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0259h je near ptr 04c6h             ; JE(Je_rel32_64) [4C6h:jmp64]                         encoding(6 bytes) = 0f 84 67 02 00 00
025fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0263h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 58 05 25 5f
0268h mov rdx,7FFDDB830E10h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e10h:imm64]         encoding(10 bytes) = 48 ba 10 0e 83 db fd 7f 00 00
0272h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0276h mov rcx,1E1F7827138h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827138h:imm64]          encoding(10 bytes) = 48 b9 38 71 82 f7 e1 01 00 00
0280h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0283h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 08 05 25 5f
0288h mov rcx,1E1F7827140h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827140h:imm64]          encoding(10 bytes) = 48 b9 40 71 82 f7 e1 01 00 00
0292h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0295h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0298h jne short 02eeh               ; JNE(Jne_rel8_64) [2EEh:jmp64]                        encoding(2 bytes) = 75 54
029ah mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
02a4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 d7 13 25 5f
02a9h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02ach mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
02b6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02b9h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02bch je near ptr 04cfh             ; JE(Je_rel32_64) [4CFh:jmp64]                         encoding(6 bytes) = 0f 84 0d 02 00 00
02c2h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02c6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 f5 04 25 5f
02cbh mov rdx,7FFDDB830E18h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e18h:imm64]         encoding(10 bytes) = 48 ba 18 0e 83 db fd 7f 00 00
02d5h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02d9h mov rcx,1E1F7827140h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827140h:imm64]          encoding(10 bytes) = 48 b9 40 71 82 f7 e1 01 00 00
02e3h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02e6h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 a5 04 25 5f
02ebh mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02eeh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02f1h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f4h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
02feh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F060h:jmp64]        encoding(5 bytes) = e8 5d ed e1 ff
0303h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0306h mov rcx,1E1F7827148h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827148h:imm64]          encoding(10 bytes) = 48 b9 48 71 82 f7 e1 01 00 00
0310h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0313h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0316h jne short 0369h               ; JNE(Jne_rel8_64) [369h:jmp64]                        encoding(2 bytes) = 75 51
0318h mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
0322h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 59 13 25 5f
0327h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
032ah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0334h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0337h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
033ah je near ptr 04d8h             ; JE(Je_rel32_64) [4D8h:jmp64]                         encoding(6 bytes) = 0f 84 98 01 00 00
0340h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0344h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 77 04 25 5f
0349h mov rdx,7FFDDB830E20h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e20h:imm64]         encoding(10 bytes) = 48 ba 20 0e 83 db fd 7f 00 00
0353h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0357h mov rcx,1E1F7827148h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827148h:imm64]          encoding(10 bytes) = 48 b9 48 71 82 f7 e1 01 00 00
0361h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0364h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 27 04 25 5f
0369h mov rcx,1E1F7827150h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827150h:imm64]          encoding(10 bytes) = 48 b9 50 71 82 f7 e1 01 00 00
0373h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0376h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0379h jne short 03cfh               ; JNE(Jne_rel8_64) [3CFh:jmp64]                        encoding(2 bytes) = 75 54
037bh mov rcx,7FFDDBA03078h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03078h:imm64]         encoding(10 bytes) = 48 b9 78 30 a0 db fd 7f 00 00
0385h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 f6 12 25 5f
038ah mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
038dh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0397h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
039ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
039dh je near ptr 04e1h             ; JE(Je_rel32_64) [4E1h:jmp64]                         encoding(6 bytes) = 0f 84 3e 01 00 00
03a3h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
03a7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 14 04 25 5f
03ach mov rdx,7FFDDB830E28h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e28h:imm64]         encoding(10 bytes) = 48 ba 28 0e 83 db fd 7f 00 00
03b6h mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
03bah mov rcx,1E1F7827150h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827150h:imm64]          encoding(10 bytes) = 48 b9 50 71 82 f7 e1 01 00 00
03c4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
03c7h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 c4 03 25 5f
03cch mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
03cfh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
03d2h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
03d5h mov rcx,7FFDDBA03190h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03190h:imm64]         encoding(10 bytes) = 48 b9 90 31 a0 db fd 7f 00 00
03dfh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1F060h:jmp64]        encoding(5 bytes) = e8 7c ec e1 ff
03e4h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
03e7h mov rcx,1E1F7827158h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827158h:imm64]          encoding(10 bytes) = 48 b9 58 71 82 f7 e1 01 00 00
03f1h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03f4h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
03f7h jne short 044ah               ; JNE(Jne_rel8_64) [44Ah:jmp64]                        encoding(2 bytes) = 75 51
03f9h mov rcx,7FFDDBA031E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba031e0h:imm64]         encoding(10 bytes) = 48 b9 e0 31 a0 db fd 7f 00 00
0403h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 78 12 25 5f
0408h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
040bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0415h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0418h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
041bh je near ptr 04eah             ; JE(Je_rel32_64) [4EAh:jmp64]                         encoding(6 bytes) = 0f 84 c9 00 00 00
0421h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0425h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 96 03 25 5f
042ah mov rdx,7FFDDB830E30h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e30h:imm64]         encoding(10 bytes) = 48 ba 30 0e 83 db fd 7f 00 00
0434h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0438h mov rcx,1E1F7827158h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827158h:imm64]          encoding(10 bytes) = 48 b9 58 71 82 f7 e1 01 00 00
0442h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0445h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250790h:jmp64]                encoding(5 bytes) = e8 46 03 25 5f
044ah mov rcx,7FFDDBA05CE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05ce8h:imm64]         encoding(10 bytes) = 48 b9 e8 5c a0 db fd 7f 00 00
0454h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251680h:jmp64]                encoding(5 bytes) = e8 27 12 25 5f
0459h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
045ch lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0460h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0463h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2507C0h:jmp64]                encoding(5 bytes) = e8 58 03 25 5f
0468h mov r9,7FFDDB830978h          ; MOV(Mov_r64_imm64) [R9,7ffddb830978h:imm64]          encoding(10 bytes) = 49 b9 78 09 83 db fd 7f 00 00
0472h mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
0476h mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0479h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
047ch mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
047fh mov rcx,7FFDDBA05E00h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05e00h:imm64]         encoding(10 bytes) = 48 b9 00 5e a0 db fd 7f 00 00
0489h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
0493h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0497h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0498h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0499h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
049ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
049bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
049dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
049fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
04a2h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
04a5h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 d6 08 71 ff
04aah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04abh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
04aeh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 cd 08 71 ff
04b3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04b4h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04b7h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 c4 08 71 ff
04bch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04bdh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
04c0h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 bb 08 71 ff
04c5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04c6h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04c9h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 b2 08 71 ff
04ceh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04cfh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
04d2h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 a9 08 71 ff
04d7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04d8h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04dbh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 a0 08 71 ff
04e0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04e1h mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
04e4h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 97 08 71 ff
04e9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
04eah mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
04edh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710D80h:jmp64]        encoding(5 bytes) = e8 8e 08 71 ff
04f2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1267]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x60,0x48,0xB9,0x90,0xEE,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x60,0x16,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x60,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x70,0x17,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0x1D,0x1A,0x25,0x5F,0x48,0xB9,0x18,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFC,0x15,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x05,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x1A,0x07,0x25,0x5F,0x48,0xBA,0xF0,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x18,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xCA,0x06,0x25,0x5F,0x48,0xB9,0x20,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x99,0x15,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xAB,0x03,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0xB7,0x06,0x25,0x5F,0x48,0xBA,0xF8,0x0D,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0x20,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x67,0x06,0x25,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0xEE,0xE1,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0x28,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1B,0x15,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x36,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x39,0x06,0x25,0x5F,0x48,0xBA,0x00,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x28,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xE9,0x05,0x25,0x5F,0x48,0xB9,0x30,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0x14,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xDC,0x02,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xD6,0x05,0x25,0x5F,0x48,0xBA,0x08,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x30,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x86,0x05,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0xEE,0xE1,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x38,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3A,0x14,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x67,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x58,0x05,0x25,0x5F,0x48,0xBA,0x10,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x38,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x08,0x05,0x25,0x5F,0x48,0xB9,0x40,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD7,0x13,0x25,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x0D,0x02,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0xF5,0x04,0x25,0x5F,0x48,0xBA,0x18,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x40,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0xA5,0x04,0x25,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0xED,0xE1,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0x48,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x59,0x13,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x98,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x77,0x04,0x25,0x5F,0x48,0xBA,0x20,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x48,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x27,0x04,0x25,0x5F,0x48,0xB9,0x50,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x78,0x30,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x12,0x25,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x3E,0x01,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0x14,0x04,0x25,0x5F,0x48,0xBA,0x28,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0x50,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0xC4,0x03,0x25,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x90,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0xEC,0xE1,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0x58,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xE0,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x78,0x12,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC9,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x96,0x03,0x25,0x5F,0x48,0xBA,0x30,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x58,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x46,0x03,0x25,0x5F,0x48,0xB9,0xE8,0x5C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x27,0x12,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x58,0x03,0x25,0x5F,0x49,0xB9,0x78,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD7,0x4C,0x8B,0xC7,0x48,0xB9,0x00,0x5E,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0xD6,0x08,0x71,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0xCD,0x08,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xC4,0x08,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xBB,0x08,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xB2,0x08,0x71,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0xA9,0x08,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xA0,0x08,0x71,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x97,0x08,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x8E,0x08,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N7>> bitcombo(N7 n)
; location: [7FFDDBA13350h, 7FFDDBA1393Bh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov [rsp+60h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 60
0013h mov rcx,7FFDDB9EEF50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9eef50h:imm64]         encoding(10 bytes) = 48 b9 50 ef 9e db fd 7f 00 00
001dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 3e 11 25 5f
0022h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0025h movsx rcx,byte ptr [rsp+60h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 60
002bh mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
002eh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0038h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F251290h:jmp64]                encoding(5 bytes) = e8 4e 12 25 5f
0042h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0045h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0047h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
004ah mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
0051h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
005bh mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0060h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F251560h:jmp64]                encoding(5 bytes) = e8 fb 14 25 5f
0065h mov rcx,1E1F7827160h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827160h:imm64]          encoding(10 bytes) = 48 b9 60 71 82 f7 e1 01 00 00
006fh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0072h test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0075h jne short 00c8h               ; JNE(Jne_rel8_64) [C8h:jmp64]                         encoding(2 bytes) = 75 51
0077h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
0081h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 da 10 25 5f
0086h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0089h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0093h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0096h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0099h je near ptr 0589h             ; JE(Je_rel32_64) [589h:jmp64]                         encoding(6 bytes) = 0f 84 ea 04 00 00
009fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
00a3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 f8 01 25 5f
00a8h mov rdx,7FFDDB830E38h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e38h:imm64]         encoding(10 bytes) = 48 ba 38 0e 83 db fd 7f 00 00
00b2h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b6h mov rcx,1E1F7827160h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827160h:imm64]          encoding(10 bytes) = 48 b9 60 71 82 f7 e1 01 00 00
00c0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00c3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 a8 01 25 5f
00c8h mov rcx,1E1F7827168h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827168h:imm64]          encoding(10 bytes) = 48 b9 68 71 82 f7 e1 01 00 00
00d2h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d5h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00d8h jne short 012eh               ; JNE(Jne_rel8_64) [12Eh:jmp64]                        encoding(2 bytes) = 75 54
00dah mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
00e4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 77 10 25 5f
00e9h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00ech mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
00f6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00f9h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00fch je near ptr 0592h             ; JE(Je_rel32_64) [592h:jmp64]                         encoding(6 bytes) = 0f 84 90 04 00 00
0102h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0106h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 95 01 25 5f
010bh mov rdx,7FFDDB830E40h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e40h:imm64]         encoding(10 bytes) = 48 ba 40 0e 83 db fd 7f 00 00
0115h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
0119h mov rcx,1E1F7827168h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827168h:imm64]          encoding(10 bytes) = 48 b9 68 71 82 f7 e1 01 00 00
0123h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0126h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 45 01 25 5f
012bh mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
012eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0131h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0134h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
013eh call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1EAC0h:jmp64]        encoding(5 bytes) = e8 7d e9 e1 ff
0143h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0146h mov rcx,1E1F7827170h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827170h:imm64]          encoding(10 bytes) = 48 b9 70 71 82 f7 e1 01 00 00
0150h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0153h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0156h jne short 01a9h               ; JNE(Jne_rel8_64) [1A9h:jmp64]                        encoding(2 bytes) = 75 51
0158h mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
0162h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 f9 0f 25 5f
0167h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
016ah mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0174h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0177h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
017ah je near ptr 059bh             ; JE(Je_rel32_64) [59Bh:jmp64]                         encoding(6 bytes) = 0f 84 1b 04 00 00
0180h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0184h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 17 01 25 5f
0189h mov rdx,7FFDDB830E48h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e48h:imm64]         encoding(10 bytes) = 48 ba 48 0e 83 db fd 7f 00 00
0193h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0197h mov rcx,1E1F7827170h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827170h:imm64]          encoding(10 bytes) = 48 b9 70 71 82 f7 e1 01 00 00
01a1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a4h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 c7 00 25 5f
01a9h mov rcx,1E1F7827178h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827178h:imm64]          encoding(10 bytes) = 48 b9 78 71 82 f7 e1 01 00 00
01b3h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b6h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01b9h jne short 020fh               ; JNE(Jne_rel8_64) [20Fh:jmp64]                        encoding(2 bytes) = 75 54
01bbh mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
01c5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 96 0f 25 5f
01cah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01cdh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
01d7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01dah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01ddh je near ptr 05a4h             ; JE(Je_rel32_64) [5A4h:jmp64]                         encoding(6 bytes) = 0f 84 c1 03 00 00
01e3h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 b4 00 25 5f
01ech mov rdx,7FFDDB830E50h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e50h:imm64]         encoding(10 bytes) = 48 ba 50 0e 83 db fd 7f 00 00
01f6h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01fah mov rcx,1E1F7827178h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827178h:imm64]          encoding(10 bytes) = 48 b9 78 71 82 f7 e1 01 00 00
0204h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0207h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 64 00 25 5f
020ch mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
020fh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0212h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0215h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
021fh call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1EB40h:jmp64]        encoding(5 bytes) = e8 1c e9 e1 ff
0224h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0227h mov rcx,1E1F7827180h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827180h:imm64]          encoding(10 bytes) = 48 b9 80 71 82 f7 e1 01 00 00
0231h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0234h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0237h jne short 028ah               ; JNE(Jne_rel8_64) [28Ah:jmp64]                        encoding(2 bytes) = 75 51
0239h mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
0243h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 18 0f 25 5f
0248h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
024bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0255h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0258h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
025bh je near ptr 05adh             ; JE(Je_rel32_64) [5ADh:jmp64]                         encoding(6 bytes) = 0f 84 4c 03 00 00
0261h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0265h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 36 00 25 5f
026ah mov rdx,7FFDDB830E58h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e58h:imm64]         encoding(10 bytes) = 48 ba 58 0e 83 db fd 7f 00 00
0274h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0278h mov rcx,1E1F7827180h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827180h:imm64]          encoding(10 bytes) = 48 b9 80 71 82 f7 e1 01 00 00
0282h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0285h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 e6 ff 24 5f
028ah mov rcx,1E1F7827188h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827188h:imm64]          encoding(10 bytes) = 48 b9 88 71 82 f7 e1 01 00 00
0294h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0297h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
029ah jne short 02f0h               ; JNE(Jne_rel8_64) [2F0h:jmp64]                        encoding(2 bytes) = 75 54
029ch mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
02a6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 b5 0e 25 5f
02abh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02aeh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
02b8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02bbh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02beh je near ptr 05b6h             ; JE(Je_rel32_64) [5B6h:jmp64]                         encoding(6 bytes) = 0f 84 f2 02 00 00
02c4h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02c8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 d3 ff 24 5f
02cdh mov rdx,7FFDDB830E60h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e60h:imm64]         encoding(10 bytes) = 48 ba 60 0e 83 db fd 7f 00 00
02d7h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02dbh mov rcx,1E1F7827188h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827188h:imm64]          encoding(10 bytes) = 48 b9 88 71 82 f7 e1 01 00 00
02e5h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02e8h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 83 ff 24 5f
02edh mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02f0h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02f3h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f6h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
0300h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1EB40h:jmp64]        encoding(5 bytes) = e8 3b e8 e1 ff
0305h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0308h mov rcx,1E1F7827190h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827190h:imm64]          encoding(10 bytes) = 48 b9 90 71 82 f7 e1 01 00 00
0312h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0315h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0318h jne short 036bh               ; JNE(Jne_rel8_64) [36Bh:jmp64]                        encoding(2 bytes) = 75 51
031ah mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
0324h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 37 0e 25 5f
0329h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
032ch mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0336h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0339h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
033ch je near ptr 05bfh             ; JE(Je_rel32_64) [5BFh:jmp64]                         encoding(6 bytes) = 0f 84 7d 02 00 00
0342h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0346h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 55 ff 24 5f
034bh mov rdx,7FFDDB830E68h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e68h:imm64]         encoding(10 bytes) = 48 ba 68 0e 83 db fd 7f 00 00
0355h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0359h mov rcx,1E1F7827190h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827190h:imm64]          encoding(10 bytes) = 48 b9 90 71 82 f7 e1 01 00 00
0363h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0366h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 05 ff 24 5f
036bh mov rcx,1E1F7827198h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827198h:imm64]          encoding(10 bytes) = 48 b9 98 71 82 f7 e1 01 00 00
0375h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0378h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
037bh jne short 03d1h               ; JNE(Jne_rel8_64) [3D1h:jmp64]                        encoding(2 bytes) = 75 54
037dh mov rcx,7FFDDBA03078h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03078h:imm64]         encoding(10 bytes) = 48 b9 78 30 a0 db fd 7f 00 00
0387h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 d4 0d 25 5f
038ch mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
038fh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0399h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
039ch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
039fh je near ptr 05c8h             ; JE(Je_rel32_64) [5C8h:jmp64]                         encoding(6 bytes) = 0f 84 23 02 00 00
03a5h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
03a9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 f2 fe 24 5f
03aeh mov rdx,7FFDDB830E70h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e70h:imm64]         encoding(10 bytes) = 48 ba 70 0e 83 db fd 7f 00 00
03b8h mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
03bch mov rcx,1E1F7827198h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827198h:imm64]          encoding(10 bytes) = 48 b9 98 71 82 f7 e1 01 00 00
03c6h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
03c9h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 a2 fe 24 5f
03ceh mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
03d1h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
03d4h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
03d7h mov rcx,7FFDDBA03190h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03190h:imm64]         encoding(10 bytes) = 48 b9 90 31 a0 db fd 7f 00 00
03e1h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1EB40h:jmp64]        encoding(5 bytes) = e8 5a e7 e1 ff
03e6h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
03e9h mov rcx,1E1F78271A0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271a0h:imm64]          encoding(10 bytes) = 48 b9 a0 71 82 f7 e1 01 00 00
03f3h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03f6h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
03f9h jne short 044ch               ; JNE(Jne_rel8_64) [44Ch:jmp64]                        encoding(2 bytes) = 75 51
03fbh mov rcx,7FFDDBA031E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba031e0h:imm64]         encoding(10 bytes) = 48 b9 e0 31 a0 db fd 7f 00 00
0405h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 56 0d 25 5f
040ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
040dh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0417h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
041ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
041dh je near ptr 05d1h             ; JE(Je_rel32_64) [5D1h:jmp64]                         encoding(6 bytes) = 0f 84 ae 01 00 00
0423h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0427h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 74 fe 24 5f
042ch mov rdx,7FFDDB830E78h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e78h:imm64]         encoding(10 bytes) = 48 ba 78 0e 83 db fd 7f 00 00
0436h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
043ah mov rcx,1E1F78271A0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271a0h:imm64]          encoding(10 bytes) = 48 b9 a0 71 82 f7 e1 01 00 00
0444h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0447h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 24 fe 24 5f
044ch mov rcx,1E1F78271A8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271a8h:imm64]          encoding(10 bytes) = 48 b9 a8 71 82 f7 e1 01 00 00
0456h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0459h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
045ch jne short 04b4h               ; JNE(Jne_rel8_64) [4B4h:jmp64]                        encoding(2 bytes) = 75 56
045eh mov rcx,7FFDDBA034E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba034e8h:imm64]         encoding(10 bytes) = 48 b9 e8 34 a0 db fd 7f 00 00
0468h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 f3 0c 25 5f
046dh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
0470h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
047ah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
047dh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0480h je near ptr 05dah             ; JE(Je_rel32_64) [5DAh:jmp64]                         encoding(6 bytes) = 0f 84 54 01 00 00
0486h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
048bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 10 fe 24 5f
0490h mov rdx,7FFDDB830E80h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e80h:imm64]         encoding(10 bytes) = 48 ba 80 0e 83 db fd 7f 00 00
049ah mov [r12+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R12:br,DS:sr),RDX]        encoding(5 bytes) = 49 89 54 24 18
049fh mov rcx,1E1F78271A8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271a8h:imm64]          encoding(10 bytes) = 48 b9 a8 71 82 f7 e1 01 00 00
04a9h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
04ach call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 bf fd 24 5f
04b1h mov r9,r12                    ; MOV(Mov_r64_rm64) [R9,R12]                           encoding(3 bytes) = 4d 8b cc
04b4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
04b7h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
04bah mov rcx,7FFDDBA03600h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03600h:imm64]         encoding(10 bytes) = 48 b9 00 36 a0 db fd 7f 00 00
04c4h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1EB40h:jmp64]        encoding(5 bytes) = e8 77 e6 e1 ff
04c9h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
04cch mov rcx,1E1F78271B0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271b0h:imm64]          encoding(10 bytes) = 48 b9 b0 71 82 f7 e1 01 00 00
04d6h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
04d9h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
04dch jne short 052fh               ; JNE(Jne_rel8_64) [52Fh:jmp64]                        encoding(2 bytes) = 75 51
04deh mov rcx,7FFDDBA03650h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03650h:imm64]         encoding(10 bytes) = 48 b9 50 36 a0 db fd 7f 00 00
04e8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 73 0c 25 5f
04edh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f0h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
04fah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
04fdh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0500h je near ptr 05e3h             ; JE(Je_rel32_64) [5E3h:jmp64]                         encoding(6 bytes) = 0f 84 dd 00 00 00
0506h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
050ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 91 fd 24 5f
050fh mov rdx,7FFDDB830E88h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e88h:imm64]         encoding(10 bytes) = 48 ba 88 0e 83 db fd 7f 00 00
0519h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
051dh mov rcx,1E1F78271B0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271b0h:imm64]          encoding(10 bytes) = 48 b9 b0 71 82 f7 e1 01 00 00
0527h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
052ah call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 41 fd 24 5f
052fh mov rcx,7FFDDBA060C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba060c0h:imm64]         encoding(10 bytes) = 48 b9 c0 60 a0 db fd 7f 00 00
0539h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F251160h:jmp64]                encoding(5 bytes) = e8 22 0c 25 5f
053eh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0541h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0545h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0548h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2502A0h:jmp64]                encoding(5 bytes) = e8 53 fd 24 5f
054dh mov r9,7FFDDB830990h          ; MOV(Mov_r64_imm64) [R9,7ffddb830990h:imm64]          encoding(10 bytes) = 49 b9 90 09 83 db fd 7f 00 00
0557h mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
055bh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
055eh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
0561h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0564h mov rcx,7FFDDBA061D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba061d8h:imm64]         encoding(10 bytes) = 48 b9 d8 61 a0 db fd 7f 00 00
056eh mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
0578h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
057ch pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
057dh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
057eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
057fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0580h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0582h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0584h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0586h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0589h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
058ch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 cf 02 71 ff
0591h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0592h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0595h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 c6 02 71 ff
059ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
059bh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
059eh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 bd 02 71 ff
05a3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05a4h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
05a7h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 b4 02 71 ff
05ach int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05adh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05b0h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 ab 02 71 ff
05b5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05b6h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
05b9h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 a2 02 71 ff
05beh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05bfh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05c2h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 99 02 71 ff
05c7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05c8h mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
05cbh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 90 02 71 ff
05d0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05d1h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05d4h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 87 02 71 ff
05d9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05dah mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
05ddh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 7e 02 71 ff
05e2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
05e3h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
05e6h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710860h:jmp64]        encoding(5 bytes) = e8 75 02 71 ff
05ebh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1516]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x89,0x4C,0x24,0x60,0x48,0xB9,0x50,0xEF,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0x11,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x60,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x4E,0x12,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xFB,0x14,0x25,0x5F,0x48,0xB9,0x60,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0x10,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xEA,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xF8,0x01,0x25,0x5F,0x48,0xBA,0x38,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x60,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xA8,0x01,0x25,0x5F,0x48,0xB9,0x68,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x77,0x10,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x90,0x04,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x95,0x01,0x25,0x5F,0x48,0xBA,0x40,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0x68,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x45,0x01,0x25,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7D,0xE9,0xE1,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0x70,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF9,0x0F,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x1B,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x17,0x01,0x25,0x5F,0x48,0xBA,0x48,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x70,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xC7,0x00,0x25,0x5F,0x48,0xB9,0x78,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0x0F,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC1,0x03,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xB4,0x00,0x25,0x5F,0x48,0xBA,0x50,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x78,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x64,0x00,0x25,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0xE9,0xE1,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0x80,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x18,0x0F,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x4C,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x36,0x00,0x25,0x5F,0x48,0xBA,0x58,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x80,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xE6,0xFF,0x24,0x5F,0x48,0xB9,0x88,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0x0E,0x25,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xF2,0x02,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0xD3,0xFF,0x24,0x5F,0x48,0xBA,0x60,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0x88,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0x83,0xFF,0x24,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3B,0xE8,0xE1,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0x90,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x37,0x0E,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x7D,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x55,0xFF,0x24,0x5F,0x48,0xBA,0x68,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x90,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x05,0xFF,0x24,0x5F,0x48,0xB9,0x98,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x78,0x30,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0x0D,0x25,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x23,0x02,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0xF2,0xFE,0x24,0x5F,0x48,0xBA,0x70,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0x98,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0xA2,0xFE,0x24,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x90,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5A,0xE7,0xE1,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0xA0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xE0,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x56,0x0D,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xAE,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x74,0xFE,0x24,0x5F,0x48,0xBA,0x78,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xA0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x24,0xFE,0x24,0x5F,0x48,0xB9,0xA8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x56,0x48,0xB9,0xE8,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF3,0x0C,0x25,0x5F,0x4C,0x8B,0xE0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x54,0x01,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0xE8,0x10,0xFE,0x24,0x5F,0x48,0xBA,0x80,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x54,0x24,0x18,0x48,0xB9,0xA8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD4,0xE8,0xBF,0xFD,0x24,0x5F,0x4D,0x8B,0xCC,0x49,0x8B,0xD7,0x4C,0x8B,0xC7,0x48,0xB9,0x00,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x77,0xE6,0xE1,0xFF,0x4C,0x8B,0xE0,0x48,0xB9,0xB0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x50,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x73,0x0C,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xDD,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x91,0xFD,0x24,0x5F,0x48,0xBA,0x88,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xB0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x41,0xFD,0x24,0x5F,0x48,0xB9,0xC0,0x60,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x22,0x0C,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x53,0xFD,0x24,0x5F,0x49,0xB9,0x90,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD4,0x4C,0x8B,0xC7,0x48,0xB9,0xD8,0x61,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0xCF,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0xC6,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xBD,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xB4,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xAB,0x02,0x71,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0xA2,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x99,0x02,0x71,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x90,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x87,0x02,0x71,0xFF,0xCC,0x49,0x8B,0xCC,0xE8,0x7E,0x02,0x71,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x75,0x02,0x71,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<LiteralLogicSeq<N8>> bitcombo(N8 n)
; location: [7FFDDBA13960h, 7FFDDBA14042h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0010h mov [rsp+70h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 70
0015h mov rcx,7FFDDB9EF010h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ef010h:imm64]         encoding(10 bytes) = 48 b9 10 f0 9e db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 2c 0b 25 5f
0024h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0027h movsx rcx,byte ptr [rsp+70h]  ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 4c 24 70
002dh mov [rsi+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RSI:br,DS:sr),CL]            encoding(3 bytes) = 88 4e 08
0030h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
003ah mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003fh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F250C80h:jmp64]                encoding(5 bytes) = e8 3c 0c 25 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0049h mov [rdi+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ECX]        encoding(3 bytes) = 89 4f 10
004ch mov dword ptr [rdi+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 14 01 00 00 00
0053h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
005dh mov edx,0C0h                  ; MOV(Mov_r32_imm32) [EDX,c0h:imm32]                   encoding(5 bytes) = ba c0 00 00 00
0062h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F250F50h:jmp64]                encoding(5 bytes) = e8 e9 0e 25 5f
0067h mov rcx,1E1F78271B8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271b8h:imm64]          encoding(10 bytes) = 48 b9 b8 71 82 f7 e1 01 00 00
0071h mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0074h test rbx,rbx                  ; TEST(Test_rm64_r64) [RBX,RBX]                        encoding(3 bytes) = 48 85 db
0077h jne short 00cah               ; JNE(Jne_rel8_64) [CAh:jmp64]                         encoding(2 bytes) = 75 51
0079h mov rcx,7FFDDBA01CB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01cb8h:imm64]         encoding(10 bytes) = 48 b9 b8 1c a0 db fd 7f 00 00
0083h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 c8 0a 25 5f
0088h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
008bh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0095h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0098h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
009bh je near ptr 066eh             ; JE(Je_rel32_64) [66Eh:jmp64]                         encoding(6 bytes) = 0f 84 cd 05 00 00
00a1h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
00a5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 e6 fb 24 5f
00aah mov rdx,7FFDDB830E90h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e90h:imm64]         encoding(10 bytes) = 48 ba 90 0e 83 db fd 7f 00 00
00b4h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
00b8h mov rcx,1E1F78271B8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271b8h:imm64]          encoding(10 bytes) = 48 b9 b8 71 82 f7 e1 01 00 00
00c2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00c5h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 96 fb 24 5f
00cah mov rcx,1E1F78271C0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271c0h:imm64]          encoding(10 bytes) = 48 b9 c0 71 82 f7 e1 01 00 00
00d4h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
00d7h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
00dah jne short 0130h               ; JNE(Jne_rel8_64) [130h:jmp64]                        encoding(2 bytes) = 75 54
00dch mov rcx,7FFDDBA02068h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02068h:imm64]         encoding(10 bytes) = 48 b9 68 20 a0 db fd 7f 00 00
00e6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 65 0a 25 5f
00ebh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00eeh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
00f8h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
00fbh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
00feh je near ptr 0677h             ; JE(Je_rel32_64) [677h:jmp64]                         encoding(6 bytes) = 0f 84 73 05 00 00
0104h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0108h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 83 fb 24 5f
010dh mov rdx,7FFDDB830E98h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830e98h:imm64]         encoding(10 bytes) = 48 ba 98 0e 83 db fd 7f 00 00
0117h mov [rbp+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBP:br,SS:sr),RDX]        encoding(4 bytes) = 48 89 55 18
011bh mov rcx,1E1F78271C0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271c0h:imm64]          encoding(10 bytes) = 48 b9 c0 71 82 f7 e1 01 00 00
0125h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0128h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 33 fb 24 5f
012dh mov r9,rbp                    ; MOV(Mov_r64_rm64) [R9,RBP]                           encoding(3 bytes) = 4c 8b cd
0130h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0133h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0136h mov rcx,7FFDDBA02208h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02208h:imm64]         encoding(10 bytes) = 48 b9 08 22 a0 db fd 7f 00 00
0140h call 7FFDDB831E10h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1E4B0h:jmp64]        encoding(5 bytes) = e8 6b e3 e1 ff
0145h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0148h mov rcx,1E1F78271C8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271c8h:imm64]          encoding(10 bytes) = 48 b9 c8 71 82 f7 e1 01 00 00
0152h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0155h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0158h jne short 01abh               ; JNE(Jne_rel8_64) [1ABh:jmp64]                        encoding(2 bytes) = 75 51
015ah mov rcx,7FFDDBA02258h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02258h:imm64]         encoding(10 bytes) = 48 b9 58 22 a0 db fd 7f 00 00
0164h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 e7 09 25 5f
0169h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
016ch mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0176h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0179h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
017ch je near ptr 0680h             ; JE(Je_rel32_64) [680h:jmp64]                         encoding(6 bytes) = 0f 84 fe 04 00 00
0182h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0186h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 05 fb 24 5f
018bh mov rdx,7FFDDB830EA0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ea0h:imm64]         encoding(10 bytes) = 48 ba a0 0e 83 db fd 7f 00 00
0195h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0199h mov rcx,1E1F78271C8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271c8h:imm64]          encoding(10 bytes) = 48 b9 c8 71 82 f7 e1 01 00 00
01a3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01a6h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 b5 fa 24 5f
01abh mov rcx,1E1F78271D0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271d0h:imm64]          encoding(10 bytes) = 48 b9 d0 71 82 f7 e1 01 00 00
01b5h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
01b8h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
01bbh jne short 0211h               ; JNE(Jne_rel8_64) [211h:jmp64]                        encoding(2 bytes) = 75 54
01bdh mov rcx,7FFDDBA02710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02710h:imm64]         encoding(10 bytes) = 48 b9 10 27 a0 db fd 7f 00 00
01c7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 84 09 25 5f
01cch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
01cfh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
01d9h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01dch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
01dfh je near ptr 0689h             ; JE(Je_rel32_64) [689h:jmp64]                         encoding(6 bytes) = 0f 84 a4 04 00 00
01e5h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
01e9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 a2 fa 24 5f
01eeh mov rdx,7FFDDB830EA8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ea8h:imm64]         encoding(10 bytes) = 48 ba a8 0e 83 db fd 7f 00 00
01f8h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
01fch mov rcx,1E1F78271D0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271d0h:imm64]          encoding(10 bytes) = 48 b9 d0 71 82 f7 e1 01 00 00
0206h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0209h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 52 fa 24 5f
020eh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0211h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0214h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0217h mov rcx,7FFDDBA028B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba028b0h:imm64]         encoding(10 bytes) = 48 b9 b0 28 a0 db fd 7f 00 00
0221h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1E530h:jmp64]        encoding(5 bytes) = e8 0a e3 e1 ff
0226h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0229h mov rcx,1E1F78271D8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271d8h:imm64]          encoding(10 bytes) = 48 b9 d8 71 82 f7 e1 01 00 00
0233h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0236h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
0239h jne short 028ch               ; JNE(Jne_rel8_64) [28Ch:jmp64]                        encoding(2 bytes) = 75 51
023bh mov rcx,7FFDDBA02900h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02900h:imm64]         encoding(10 bytes) = 48 b9 00 29 a0 db fd 7f 00 00
0245h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 06 09 25 5f
024ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
024dh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0257h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
025ah test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
025dh je near ptr 0692h             ; JE(Je_rel32_64) [692h:jmp64]                         encoding(6 bytes) = 0f 84 2f 04 00 00
0263h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0267h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 24 fa 24 5f
026ch mov rdx,7FFDDB830EB0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830eb0h:imm64]         encoding(10 bytes) = 48 ba b0 0e 83 db fd 7f 00 00
0276h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
027ah mov rcx,1E1F78271D8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271d8h:imm64]          encoding(10 bytes) = 48 b9 d8 71 82 f7 e1 01 00 00
0284h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0287h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 d4 f9 24 5f
028ch mov rcx,1E1F78271E0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271e0h:imm64]          encoding(10 bytes) = 48 b9 e0 71 82 f7 e1 01 00 00
0296h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
0299h test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
029ch jne short 02f2h               ; JNE(Jne_rel8_64) [2F2h:jmp64]                        encoding(2 bytes) = 75 54
029eh mov rcx,7FFDDBA02C08h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02c08h:imm64]         encoding(10 bytes) = 48 b9 08 2c a0 db fd 7f 00 00
02a8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 a3 08 25 5f
02adh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
02b0h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
02bah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
02bdh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
02c0h je near ptr 069bh             ; JE(Je_rel32_64) [69Bh:jmp64]                         encoding(6 bytes) = 0f 84 d5 03 00 00
02c6h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
02cah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 c1 f9 24 5f
02cfh mov rdx,7FFDDB830EB8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830eb8h:imm64]         encoding(10 bytes) = 48 ba b8 0e 83 db fd 7f 00 00
02d9h mov [r14+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R14:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 56 18
02ddh mov rcx,1E1F78271E0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271e0h:imm64]          encoding(10 bytes) = 48 b9 e0 71 82 f7 e1 01 00 00
02e7h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
02eah call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 71 f9 24 5f
02efh mov r9,r14                    ; MOV(Mov_r64_rm64) [R9,R14]                           encoding(3 bytes) = 4d 8b ce
02f2h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
02f5h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
02f8h mov rcx,7FFDDBA02D20h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d20h:imm64]         encoding(10 bytes) = 48 b9 20 2d a0 db fd 7f 00 00
0302h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1E530h:jmp64]        encoding(5 bytes) = e8 29 e2 e1 ff
0307h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
030ah mov rcx,1E1F78271E8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271e8h:imm64]          encoding(10 bytes) = 48 b9 e8 71 82 f7 e1 01 00 00
0314h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0317h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
031ah jne short 036dh               ; JNE(Jne_rel8_64) [36Dh:jmp64]                        encoding(2 bytes) = 75 51
031ch mov rcx,7FFDDBA02D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02d70h:imm64]         encoding(10 bytes) = 48 b9 70 2d a0 db fd 7f 00 00
0326h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 25 08 25 5f
032bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
032eh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0338h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
033bh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
033eh je near ptr 06a4h             ; JE(Je_rel32_64) [6A4h:jmp64]                         encoding(6 bytes) = 0f 84 60 03 00 00
0344h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0348h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 43 f9 24 5f
034dh mov rdx,7FFDDB830EC0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ec0h:imm64]         encoding(10 bytes) = 48 ba c0 0e 83 db fd 7f 00 00
0357h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
035bh mov rcx,1E1F78271E8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271e8h:imm64]          encoding(10 bytes) = 48 b9 e8 71 82 f7 e1 01 00 00
0365h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0368h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 f3 f8 24 5f
036dh mov rcx,1E1F78271F0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271f0h:imm64]          encoding(10 bytes) = 48 b9 f0 71 82 f7 e1 01 00 00
0377h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
037ah test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
037dh jne short 03d3h               ; JNE(Jne_rel8_64) [3D3h:jmp64]                        encoding(2 bytes) = 75 54
037fh mov rcx,7FFDDBA03078h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03078h:imm64]         encoding(10 bytes) = 48 b9 78 30 a0 db fd 7f 00 00
0389h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 c2 07 25 5f
038eh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
0391h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
039bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
039eh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
03a1h je near ptr 06adh             ; JE(Je_rel32_64) [6ADh:jmp64]                         encoding(6 bytes) = 0f 84 06 03 00 00
03a7h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
03abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 e0 f8 24 5f
03b0h mov rdx,7FFDDB830EC8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ec8h:imm64]         encoding(10 bytes) = 48 ba c8 0e 83 db fd 7f 00 00
03bah mov [r15+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R15:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 57 18
03beh mov rcx,1E1F78271F0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271f0h:imm64]          encoding(10 bytes) = 48 b9 f0 71 82 f7 e1 01 00 00
03c8h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
03cbh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 90 f8 24 5f
03d0h mov r9,r15                    ; MOV(Mov_r64_rm64) [R9,R15]                           encoding(3 bytes) = 4d 8b cf
03d3h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
03d6h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
03d9h mov rcx,7FFDDBA03190h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03190h:imm64]         encoding(10 bytes) = 48 b9 90 31 a0 db fd 7f 00 00
03e3h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1E530h:jmp64]        encoding(5 bytes) = e8 48 e1 e1 ff
03e8h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
03ebh mov rcx,1E1F78271F8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271f8h:imm64]          encoding(10 bytes) = 48 b9 f8 71 82 f7 e1 01 00 00
03f5h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
03f8h test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
03fbh jne short 044eh               ; JNE(Jne_rel8_64) [44Eh:jmp64]                        encoding(2 bytes) = 75 51
03fdh mov rcx,7FFDDBA031E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba031e0h:imm64]         encoding(10 bytes) = 48 b9 e0 31 a0 db fd 7f 00 00
0407h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 44 07 25 5f
040ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
040fh mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
0419h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
041ch test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
041fh je near ptr 06b6h             ; JE(Je_rel32_64) [6B6h:jmp64]                         encoding(6 bytes) = 0f 84 91 02 00 00
0425h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0429h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 62 f8 24 5f
042eh mov rdx,7FFDDB830ED0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ed0h:imm64]         encoding(10 bytes) = 48 ba d0 0e 83 db fd 7f 00 00
0438h mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
043ch mov rcx,1E1F78271F8h          ; MOV(Mov_r64_imm64) [RCX,1e1f78271f8h:imm64]          encoding(10 bytes) = 48 b9 f8 71 82 f7 e1 01 00 00
0446h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0449h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 12 f8 24 5f
044eh mov rcx,1E1F7827200h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827200h:imm64]          encoding(10 bytes) = 48 b9 00 72 82 f7 e1 01 00 00
0458h mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
045bh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
045eh jne short 04b6h               ; JNE(Jne_rel8_64) [4B6h:jmp64]                        encoding(2 bytes) = 75 56
0460h mov rcx,7FFDDBA034E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba034e8h:imm64]         encoding(10 bytes) = 48 b9 e8 34 a0 db fd 7f 00 00
046ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 e1 06 25 5f
046fh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
0472h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
047ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
047fh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0482h je near ptr 06bfh             ; JE(Je_rel32_64) [6BFh:jmp64]                         encoding(6 bytes) = 0f 84 37 02 00 00
0488h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
048dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 fe f7 24 5f
0492h mov rdx,7FFDDB830ED8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ed8h:imm64]         encoding(10 bytes) = 48 ba d8 0e 83 db fd 7f 00 00
049ch mov [r12+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R12:br,DS:sr),RDX]        encoding(5 bytes) = 49 89 54 24 18
04a1h mov rcx,1E1F7827200h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827200h:imm64]          encoding(10 bytes) = 48 b9 00 72 82 f7 e1 01 00 00
04abh mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
04aeh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 ad f7 24 5f
04b3h mov r9,r12                    ; MOV(Mov_r64_rm64) [R9,R12]                           encoding(3 bytes) = 4d 8b cc
04b6h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
04b9h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
04bch mov rcx,7FFDDBA03600h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03600h:imm64]         encoding(10 bytes) = 48 b9 00 36 a0 db fd 7f 00 00
04c6h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1E530h:jmp64]        encoding(5 bytes) = e8 65 e0 e1 ff
04cbh mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
04ceh mov rcx,1E1F7827208h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827208h:imm64]          encoding(10 bytes) = 48 b9 08 72 82 f7 e1 01 00 00
04d8h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
04dbh test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
04deh jne short 0531h               ; JNE(Jne_rel8_64) [531h:jmp64]                        encoding(2 bytes) = 75 51
04e0h mov rcx,7FFDDBA03650h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03650h:imm64]         encoding(10 bytes) = 48 b9 50 36 a0 db fd 7f 00 00
04eah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 61 06 25 5f
04efh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f2h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
04fch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
04ffh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0502h je near ptr 06c8h             ; JE(Je_rel32_64) [6C8h:jmp64]                         encoding(6 bytes) = 0f 84 c0 01 00 00
0508h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
050ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 7f f7 24 5f
0511h mov rdx,7FFDDB830EE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ee0h:imm64]         encoding(10 bytes) = 48 ba e0 0e 83 db fd 7f 00 00
051bh mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
051fh mov rcx,1E1F7827208h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827208h:imm64]          encoding(10 bytes) = 48 b9 08 72 82 f7 e1 01 00 00
0529h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
052ch call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 2f f7 24 5f
0531h mov rcx,1E1F7827210h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827210h:imm64]          encoding(10 bytes) = 48 b9 10 72 82 f7 e1 01 00 00
053bh mov r9,[rcx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 09
053eh test r9,r9                    ; TEST(Test_rm64_r64) [R9,R9]                          encoding(3 bytes) = 4d 85 c9
0541h jne short 0597h               ; JNE(Jne_rel8_64) [597h:jmp64]                        encoding(2 bytes) = 75 54
0543h mov rcx,7FFDDBA03958h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03958h:imm64]         encoding(10 bytes) = 48 b9 58 39 a0 db fd 7f 00 00
054dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 fe 05 25 5f
0552h mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
0555h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
055fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0562h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0565h je near ptr 06d1h             ; JE(Je_rel32_64) [6D1h:jmp64]                         encoding(6 bytes) = 0f 84 66 01 00 00
056bh lea rcx,[r13+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 08
056fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 1c f7 24 5f
0574h mov rdx,7FFDDB830EE8h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ee8h:imm64]         encoding(10 bytes) = 48 ba e8 0e 83 db fd 7f 00 00
057eh mov [r13+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,R13:br,DS:sr),RDX]        encoding(4 bytes) = 49 89 55 18
0582h mov rcx,1E1F7827210h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827210h:imm64]          encoding(10 bytes) = 48 b9 10 72 82 f7 e1 01 00 00
058ch mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
058fh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 cc f6 24 5f
0594h mov r9,r13                    ; MOV(Mov_r64_rm64) [R9,R13]                           encoding(3 bytes) = 4d 8b cd
0597h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
059ah mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
059dh mov rcx,7FFDDBA03A70h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03a70h:imm64]         encoding(10 bytes) = 48 b9 70 3a a0 db fd 7f 00 00
05a7h call 7FFDDB831E90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE1E530h:jmp64]        encoding(5 bytes) = e8 84 df e1 ff
05ach mov r13,rax                   ; MOV(Mov_r64_rm64) [R13,RAX]                          encoding(3 bytes) = 4c 8b e8
05afh mov rcx,1E1F7827218h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827218h:imm64]          encoding(10 bytes) = 48 b9 18 72 82 f7 e1 01 00 00
05b9h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
05bch test rdi,rdi                  ; TEST(Test_rm64_r64) [RDI,RDI]                        encoding(3 bytes) = 48 85 ff
05bfh jne short 0612h               ; JNE(Jne_rel8_64) [612h:jmp64]                        encoding(2 bytes) = 75 51
05c1h mov rcx,7FFDDBA03AC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03ac0h:imm64]         encoding(10 bytes) = 48 b9 c0 3a a0 db fd 7f 00 00
05cbh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 80 05 25 5f
05d0h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
05d3h mov rdx,1E1F7826EC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826ec8h:imm64]          encoding(10 bytes) = 48 ba c8 6e 82 f7 e1 01 00 00
05ddh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
05e0h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
05e3h je near ptr 06dah             ; JE(Je_rel32_64) [6DAh:jmp64]                         encoding(6 bytes) = 0f 84 f1 00 00 00
05e9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
05edh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 9e f6 24 5f
05f2h mov rdx,7FFDDB830EF0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830ef0h:imm64]         encoding(10 bytes) = 48 ba f0 0e 83 db fd 7f 00 00
05fch mov [rdi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 57 18
0600h mov rcx,1E1F7827218h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827218h:imm64]          encoding(10 bytes) = 48 b9 18 72 82 f7 e1 01 00 00
060ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
060dh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24FC60h:jmp64]                encoding(5 bytes) = e8 4e f6 24 5f
0612h mov rcx,7FFDDBA06498h         ; MOV(Mov_r64_imm64) [RCX,7ffddba06498h:imm64]         encoding(10 bytes) = 48 b9 98 64 a0 db fd 7f 00 00
061ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250B50h:jmp64]                encoding(5 bytes) = e8 2f 05 25 5f
0621h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0624h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0628h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
062bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24FC90h:jmp64]                encoding(5 bytes) = e8 60 f6 24 5f
0630h mov r9,7FFDDB8309A8h          ; MOV(Mov_r64_imm64) [R9,7ffddb8309a8h:imm64]          encoding(10 bytes) = 49 b9 a8 09 83 db fd 7f 00 00
063ah mov [rbx+18h],r9              ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),R9]         encoding(4 bytes) = 4c 89 4b 18
063eh mov r9,rbx                    ; MOV(Mov_r64_rm64) [R9,RBX]                           encoding(3 bytes) = 4c 8b cb
0641h mov rdx,r13                   ; MOV(Mov_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 8b d5
0644h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0647h mov rcx,7FFDDBA065B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba065b0h:imm64]         encoding(10 bytes) = 48 b9 b0 65 a0 db fd 7f 00 00
0651h mov rax,7FFDDB831E90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb831e90h:imm64]         encoding(10 bytes) = 48 b8 90 1e 83 db fd 7f 00 00
065bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
065fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0660h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0661h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0662h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0663h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
0665h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
0667h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0669h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
066bh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
066eh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0671h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 da fb 70 ff
0676h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0677h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
067ah call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 d1 fb 70 ff
067fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0680h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0683h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 c8 fb 70 ff
0688h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0689h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
068ch call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 bf fb 70 ff
0691h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0692h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0695h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 b6 fb 70 ff
069ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
069bh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
069eh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 ad fb 70 ff
06a3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06a4h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06a7h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 a4 fb 70 ff
06ach int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06adh mov rcx,r15                   ; MOV(Mov_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 8b cf
06b0h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 9b fb 70 ff
06b5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06b6h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06b9h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 92 fb 70 ff
06beh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06bfh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
06c2h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 89 fb 70 ff
06c7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06c8h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06cbh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 80 fb 70 ff
06d0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06d1h mov rcx,r13                   ; MOV(Mov_r64_rm64) [RCX,R13]                          encoding(3 bytes) = 49 8b cd
06d4h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 77 fb 70 ff
06d9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06dah mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
06ddh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF710250h:jmp64]        encoding(5 bytes) = e8 6e fb 70 ff
06e2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> bitcomboBytes => new byte[1763]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x89,0x4C,0x24,0x70,0x48,0xB9,0x10,0xF0,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2C,0x0B,0x25,0x5F,0x48,0x8B,0xF0,0x48,0x0F,0xBE,0x4C,0x24,0x70,0x88,0x4E,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x3C,0x0C,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x4F,0x10,0xC7,0x47,0x14,0x01,0x00,0x00,0x00,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xC0,0x00,0x00,0x00,0xE8,0xE9,0x0E,0x25,0x5F,0x48,0xB9,0xB8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x85,0xDB,0x75,0x51,0x48,0xB9,0xB8,0x1C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC8,0x0A,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xCD,0x05,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xE6,0xFB,0x24,0x5F,0x48,0xBA,0x90,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xB8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x96,0xFB,0x24,0x5F,0x48,0xB9,0xC0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x68,0x20,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x65,0x0A,0x25,0x5F,0x48,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x73,0x05,0x00,0x00,0x48,0x8D,0x4D,0x08,0xE8,0x83,0xFB,0x24,0x5F,0x48,0xBA,0x98,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x55,0x18,0x48,0xB9,0xC0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD5,0xE8,0x33,0xFB,0x24,0x5F,0x4C,0x8B,0xCD,0x48,0x8B,0xD7,0x4C,0x8B,0xC3,0x48,0xB9,0x08,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6B,0xE3,0xE1,0xFF,0x48,0x8B,0xE8,0x48,0xB9,0xC8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x58,0x22,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE7,0x09,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xFE,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x05,0xFB,0x24,0x5F,0x48,0xBA,0xA0,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xC8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB5,0xFA,0x24,0x5F,0x48,0xB9,0xD0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x10,0x27,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0x09,0x25,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xA4,0x04,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0xA2,0xFA,0x24,0x5F,0x48,0xBA,0xA8,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0xD0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x52,0xFA,0x24,0x5F,0x4C,0x8B,0xCB,0x48,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xB0,0x28,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0A,0xE3,0xE1,0xFF,0x48,0x8B,0xD8,0x48,0xB9,0xD8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x00,0x29,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0x09,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x2F,0x04,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x24,0xFA,0x24,0x5F,0x48,0xBA,0xB0,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xD8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xD4,0xF9,0x24,0x5F,0x48,0xB9,0xE0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x08,0x2C,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA3,0x08,0x25,0x5F,0x4C,0x8B,0xF0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xD5,0x03,0x00,0x00,0x49,0x8D,0x4E,0x08,0xE8,0xC1,0xF9,0x24,0x5F,0x48,0xBA,0xB8,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x56,0x18,0x48,0xB9,0xE0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD6,0xE8,0x71,0xF9,0x24,0x5F,0x4D,0x8B,0xCE,0x48,0x8B,0xD3,0x4C,0x8B,0xC7,0x48,0xB9,0x20,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x29,0xE2,0xE1,0xFF,0x4C,0x8B,0xF0,0x48,0xB9,0xE8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x70,0x2D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x25,0x08,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x60,0x03,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x43,0xF9,0x24,0x5F,0x48,0xBA,0xC0,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xE8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xF3,0xF8,0x24,0x5F,0x48,0xB9,0xF0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x78,0x30,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC2,0x07,0x25,0x5F,0x4C,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x06,0x03,0x00,0x00,0x49,0x8D,0x4F,0x08,0xE8,0xE0,0xF8,0x24,0x5F,0x48,0xBA,0xC8,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x57,0x18,0x48,0xB9,0xF0,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD7,0xE8,0x90,0xF8,0x24,0x5F,0x4D,0x8B,0xCF,0x49,0x8B,0xD6,0x4C,0x8B,0xC7,0x48,0xB9,0x90,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x48,0xE1,0xE1,0xFF,0x4C,0x8B,0xF8,0x48,0xB9,0xF8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xE0,0x31,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x07,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x91,0x02,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x62,0xF8,0x24,0x5F,0x48,0xBA,0xD0,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0xF8,0x71,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x12,0xF8,0x24,0x5F,0x48,0xB9,0x00,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x56,0x48,0xB9,0xE8,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x06,0x25,0x5F,0x4C,0x8B,0xE0,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x37,0x02,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0xE8,0xFE,0xF7,0x24,0x5F,0x48,0xBA,0xD8,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x54,0x24,0x18,0x48,0xB9,0x00,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD4,0xE8,0xAD,0xF7,0x24,0x5F,0x4D,0x8B,0xCC,0x49,0x8B,0xD7,0x4C,0x8B,0xC7,0x48,0xB9,0x00,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x65,0xE0,0xE1,0xFF,0x4C,0x8B,0xE0,0x48,0xB9,0x08,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0x50,0x36,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x61,0x06,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xC0,0x01,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x7F,0xF7,0x24,0x5F,0x48,0xBA,0xE0,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x08,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x2F,0xF7,0x24,0x5F,0x48,0xB9,0x10,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x09,0x4D,0x85,0xC9,0x75,0x54,0x48,0xB9,0x58,0x39,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0x05,0x25,0x5F,0x4C,0x8B,0xE8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x66,0x01,0x00,0x00,0x49,0x8D,0x4D,0x08,0xE8,0x1C,0xF7,0x24,0x5F,0x48,0xBA,0xE8,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x49,0x89,0x55,0x18,0x48,0xB9,0x10,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0xD5,0xE8,0xCC,0xF6,0x24,0x5F,0x4D,0x8B,0xCD,0x49,0x8B,0xD4,0x4C,0x8B,0xC7,0x48,0xB9,0x70,0x3A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0xDF,0xE1,0xFF,0x4C,0x8B,0xE8,0x48,0xB9,0x18,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x39,0x48,0x85,0xFF,0x75,0x51,0x48,0xB9,0xC0,0x3A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0x05,0x25,0x5F,0x48,0x8B,0xF8,0x48,0xBA,0xC8,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0xF1,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0xE8,0x9E,0xF6,0x24,0x5F,0x48,0xBA,0xF0,0x0E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x57,0x18,0x48,0xB9,0x18,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x4E,0xF6,0x24,0x5F,0x48,0xB9,0x98,0x64,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2F,0x05,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x60,0xF6,0x24,0x5F,0x49,0xB9,0xA8,0x09,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x4C,0x89,0x4B,0x18,0x4C,0x8B,0xCB,0x49,0x8B,0xD5,0x4C,0x8B,0xC7,0x48,0xB9,0xB0,0x65,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xB8,0x90,0x1E,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x48,0xFF,0xE0,0x48,0x8B,0xCB,0xE8,0xDA,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCD,0xE8,0xD1,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xC8,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCB,0xE8,0xBF,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xB6,0xFB,0x70,0xFF,0xCC,0x49,0x8B,0xCE,0xE8,0xAD,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0xA4,0xFB,0x70,0xFF,0xCC,0x49,0x8B,0xCF,0xE8,0x9B,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x92,0xFB,0x70,0xFF,0xCC,0x49,0x8B,0xCC,0xE8,0x89,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x80,0xFB,0x70,0xFF,0xCC,0x49,0x8B,0xCD,0xE8,0x77,0xFB,0x70,0xFF,0xCC,0x48,0x8B,0xCF,0xE8,0x6E,0xFB,0x70,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr on()
; location: [7FFDDBA14070h, 7FFDDBA1408Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
000fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250440h:jmp64]                encoding(5 bytes) = e8 2c 04 25 5f
0014h mov dword ptr [rax+8],1       ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 08 01 00 00 00
001bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> onBytes => new byte[32]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2C,0x04,0x25,0x5F,0xC7,0x40,0x08,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr off()
; location: [7FFDDBA140B0h, 7FFDDBA140CDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
000fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250400h:jmp64]                encoding(5 bytes) = e8 ec 03 25 5f
0014h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0016h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0019h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> offBytes => new byte[30]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEC,0x03,0x25,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr literal(bit a)
; location: [7FFDDBA140F0h, 7FFDDBA1410Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2503C0h:jmp64]                encoding(5 bytes) = e8 aa 03 25 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
001dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
001eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> literalBytes => new byte[31]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAA,0x03,0x25,0x5F,0x89,0x70,0x08,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp identity(ILogicExpr a)
; location: [7FFDDBA14130h, 7FFDDBA14167h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250380h:jmp64]                encoding(5 bytes) = e8 68 03 25 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh mov dword ptr [rdi+10h],2     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),2h:imm32] encoding(7 bytes) = c7 47 10 02 00 00 00
0022h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0026h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0029h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 92 f4 24 5f
002eh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0031h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0035h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0036h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> identityBytes => new byte[56]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x68,0x03,0x25,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x10,0x02,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x92,0xF4,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp unary(UnaryLogicOpKind:uint op, ILogicExpr a)
; location: [7FFDDBA14180h, 7FFDDBA141B7h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov edi,ecx                   ; MOV(Mov_r32_rm32) [EDI,ECX]                          encoding(2 bytes) = 8b f9
0009h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ch mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
0016h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250330h:jmp64]                encoding(5 bytes) = e8 15 03 25 5f
001bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001eh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
0021h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0025h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0028h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F470h:jmp64]                encoding(5 bytes) = e8 43 f4 24 5f
002dh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0030h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0034h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0035h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0036h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> unaryBytes => new byte[56]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF9,0x48,0x8B,0xF2,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x15,0x03,0x25,0x5F,0x48,0x8B,0xD8,0x89,0x7B,0x10,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x43,0xF4,0x24,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOp unary(UnaryLogicOpKind:uint kind, bit a)
; location: [7FFDDBA141D0h, 7FFDDBA1421Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2502E0h:jmp64]                encoding(5 bytes) = e8 c6 02 25 5f
001ah mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001dh mov [rbx+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 08
0020h mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2502E0h:jmp64]                encoding(5 bytes) = e8 b1 02 25 5f
002fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0032h mov [rdi+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 10
0035h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0039h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
003ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F420h:jmp64]                encoding(5 bytes) = e8 df f3 24 5f
0041h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0044h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0048h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0049h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> unaryBytes => new byte[76]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x02,0x25,0x5F,0x48,0x8B,0xD8,0x89,0x7B,0x08,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB1,0x02,0x25,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x10,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xDF,0xF3,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp binary(BinaryLogicOpKind:uint kind, ILogicExpr a, ILogicExpr b)
; location: [7FFDDBA14240h, 7FFDDBA14288h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov ebx,ecx                   ; MOV(Mov_r32_rm32) [EBX,ECX]                          encoding(2 bytes) = 8b d9
000ah mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000dh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0010h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
001ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250270h:jmp64]                encoding(5 bytes) = e8 51 02 25 5f
001fh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0022h mov [rbp+18h],ebx             ; MOV(Mov_rm32_r32) [mem(32u,RBP:br,SS:sr),EBX]        encoding(3 bytes) = 89 5d 18
0025h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0029h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F3B0h:jmp64]                encoding(5 bytes) = e8 7f f3 24 5f
0031h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
0035h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0038h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F3B0h:jmp64]                encoding(5 bytes) = e8 73 f3 24 5f
003dh mov rax,rbp                   ; MOV(Mov_r64_rm64) [RAX,RBP]                          encoding(3 bytes) = 48 8b c5
0040h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0044h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0045h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0046h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0047h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0048h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> binaryBytes => new byte[73]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x8B,0xD9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0x02,0x25,0x5F,0x48,0x8B,0xE8,0x89,0x5D,0x18,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x7F,0xF3,0x24,0x5F,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD7,0xE8,0x73,0xF3,0x24,0x5F,0x48,0x8B,0xC5,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOp binary(BinaryLogicOpKind:uint kind, bit a, bit b)
; location: [7FFDDBA142B0h, 7FFDDBA14321h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov ebx,edx                   ; MOV(Mov_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 8b da
000fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0019h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250200h:jmp64]                encoding(5 bytes) = e8 e2 01 25 5f
001eh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0021h mov [rbp+8],ebx               ; MOV(Mov_rm32_r32) [mem(32u,RBP:br,SS:sr),EBX]        encoding(3 bytes) = 89 5d 08
0024h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
002eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250200h:jmp64]                encoding(5 bytes) = e8 cd 01 25 5f
0033h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0036h mov [rbx+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 08
0039h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0043h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250200h:jmp64]                encoding(5 bytes) = e8 b8 01 25 5f
0048h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
004bh mov [rdi+18h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 18
004eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0052h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0055h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F340h:jmp64]                encoding(5 bytes) = e8 e6 f2 24 5f
005ah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
005eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0061h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F340h:jmp64]                encoding(5 bytes) = e8 da f2 24 5f
0066h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0069h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
006dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006eh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
006fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0070h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0071h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> binaryBytes => new byte[114]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x8B,0xF1,0x41,0x8B,0xF8,0x8B,0xDA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE2,0x01,0x25,0x5F,0x48,0x8B,0xE8,0x89,0x5D,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCD,0x01,0x25,0x5F,0x48,0x8B,0xD8,0x89,0x7B,0x08,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0x01,0x25,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x18,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD5,0xE8,0xE6,0xF2,0x24,0x5F,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD3,0xE8,0xDA,0xF2,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryLogicOp ternary(TernaryOpKind:byte kind, ILogicExpr a, ILogicExpr b, ILogicExpr c)
; location: [7FFDDBA14340h, 7FFDDBA1439Ch]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ebp,ecx                   ; MOV(Mov_r32_rm32) [EBP,ECX]                          encoding(2 bytes) = 8b e9
000ch mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000fh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0012h mov rbx,r9                    ; MOV(Mov_r64_rm64) [RBX,R9]                           encoding(3 bytes) = 49 8b d9
0015h mov rcx,7FFDDB9E5D40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5d40h:imm64]         encoding(10 bytes) = 48 b9 40 5d 9e db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250170h:jmp64]                encoding(5 bytes) = e8 4c 01 25 5f
0024h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0027h mov [r14+20h],bpl             ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),BPL]           encoding(4 bytes) = 41 88 6e 20
002bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
002fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F2B0h:jmp64]                encoding(5 bytes) = e8 79 f2 24 5f
0037h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
003bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F2B0h:jmp64]                encoding(5 bytes) = e8 6d f2 24 5f
0043h lea rcx,[r14+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 18
0047h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F2B0h:jmp64]                encoding(5 bytes) = e8 61 f2 24 5f
004fh mov rax,r14                   ; MOV(Mov_r64_rm64) [RAX,R14]                          encoding(3 bytes) = 49 8b c6
0052h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0058h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0059h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
005ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ternaryBytes => new byte[93]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xE9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x49,0x8B,0xD9,0x48,0xB9,0x40,0x5D,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4C,0x01,0x25,0x5F,0x4C,0x8B,0xF0,0x41,0x88,0x6E,0x20,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x79,0xF2,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD7,0xE8,0x6D,0xF2,0x24,0x5F,0x49,0x8D,0x4E,0x18,0x48,0x8B,0xD3,0xE8,0x61,0xF2,0x24,0x5F,0x49,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryLogicOp ternary(TernaryOpKind:byte kind, bit a, bit b, bit c)
; location: [7FFDDBA143C0h, 7FFDDBA1445Bh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
000ch mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000fh mov ebx,r9d                   ; MOV(Mov_r32_rm32) [EBX,R9D]                          encoding(3 bytes) = 41 8b d9
0012h mov ebp,edx                   ; MOV(Mov_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 8b ea
0014h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
001eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2500F0h:jmp64]                encoding(5 bytes) = e8 cd 00 25 5f
0023h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0026h mov [r14+8],ebp               ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),EBP]        encoding(4 bytes) = 41 89 6e 08
002ah mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0034h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2500F0h:jmp64]                encoding(5 bytes) = e8 b7 00 25 5f
0039h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
003ch mov [rbp+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RBP:br,SS:sr),EDI]        encoding(3 bytes) = 89 7d 08
003fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2500F0h:jmp64]                encoding(5 bytes) = e8 a2 00 25 5f
004eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0051h mov [rdi+8],ebx               ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),EBX]        encoding(3 bytes) = 89 5f 08
0054h mov rcx,7FFDDB9E5D40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5d40h:imm64]         encoding(10 bytes) = 48 b9 40 5d 9e db fd 7f 00 00
005eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2500F0h:jmp64]                encoding(5 bytes) = e8 8d 00 25 5f
0063h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0066h mov [rbx+20h],sil             ; MOV(Mov_rm8_r8) [mem(8u,RBX:br,DS:sr),SIL]           encoding(4 bytes) = 40 88 73 20
006ah lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
006eh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0071h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F230h:jmp64]                encoding(5 bytes) = e8 ba f1 24 5f
0076h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
007ah mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
007dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F230h:jmp64]                encoding(5 bytes) = e8 ae f1 24 5f
0082h lea rcx,[rbx+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 18
0086h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0089h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F230h:jmp64]                encoding(5 bytes) = e8 a2 f1 24 5f
008eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0091h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0095h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0096h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0097h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0098h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0099h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
009bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ternaryBytes => new byte[156]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x41,0x8B,0xF8,0x41,0x8B,0xD9,0x8B,0xEA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCD,0x00,0x25,0x5F,0x4C,0x8B,0xF0,0x41,0x89,0x6E,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB7,0x00,0x25,0x5F,0x48,0x8B,0xE8,0x89,0x7D,0x08,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA2,0x00,0x25,0x5F,0x48,0x8B,0xF8,0x89,0x5F,0x08,0x48,0xB9,0x40,0x5D,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8D,0x00,0x25,0x5F,0x48,0x8B,0xD8,0x40,0x88,0x73,0x20,0x48,0x8D,0x4B,0x08,0x49,0x8B,0xD6,0xE8,0xBA,0xF1,0x24,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD5,0xE8,0xAE,0xF1,0x24,0x5F,0x48,0x8D,0x4B,0x18,0x48,0x8B,0xD7,0xE8,0xA2,0xF1,0x24,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable variable(string name, bit init)
; location: [7FFDDBA14480h, 7FFDDBA144D2h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000ch mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0016h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250030h:jmp64]                encoding(5 bytes) = e8 15 00 25 5f
001bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001eh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0022h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0025h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F170h:jmp64]                encoding(5 bytes) = e8 46 f1 24 5f
002ah mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0034h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F250030h:jmp64]                encoding(5 bytes) = e8 f7 ff 24 5f
0039h mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
003ch lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0040h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0043h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F170h:jmp64]                encoding(5 bytes) = e8 28 f1 24 5f
0048h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
004bh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0050h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0051h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0052h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variableBytes => new byte[83]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x15,0x00,0x25,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x46,0xF1,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF7,0xFF,0x24,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x28,0xF1,0x24,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable variable(Char name, bit init)
; location: [7FFDDBA144F0h, 7FFDDBA14559h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov [rsp+40h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 40
000bh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
000dh movzx edi,word ptr [rsp+40h]  ; MOVZX(Movzx_r32_rm16) [EDI,mem(16u,RSP:br,SS:sr)]    encoding(5 bytes) = 0f b7 7c 24 40
0012h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0017h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70FFB8h:jmp64]        encoding(5 bytes) = e8 9c ff 70 ff
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh mov [rbx+0Ch],di              ; MOV(Mov_rm16_r16) [mem(16u,RBX:br,DS:sr),DI]         encoding(4 bytes) = 66 89 7b 0c
0023h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
002dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FFC0h:jmp64]                encoding(5 bytes) = e8 8e ff 24 5f
0032h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0035h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0039h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
003ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F100h:jmp64]                encoding(5 bytes) = e8 bf f0 24 5f
0041h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
004bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FFC0h:jmp64]                encoding(5 bytes) = e8 70 ff 24 5f
0050h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F100h:jmp64]                encoding(5 bytes) = e8 a1 f0 24 5f
005fh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0062h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0066h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0067h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0068h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0069h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variableBytes => new byte[106]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x89,0x4C,0x24,0x40,0x8B,0xF2,0x0F,0xB7,0x7C,0x24,0x40,0xB9,0x01,0x00,0x00,0x00,0xE8,0x9C,0xFF,0x70,0xFF,0x48,0x8B,0xD8,0x66,0x89,0x7B,0x0C,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8E,0xFF,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0xBF,0xF0,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x70,0xFF,0x24,0x5F,0x89,0x70,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xA1,0xF0,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable variable(uint name, bit init)
; location: [7FFDDBA14580h, 7FFDDBA145F7h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000eh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0015h lea rax,[rsp+20h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 20
001ah mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
001dh mov [rax+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 40 08
0021h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
0026h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0029h call 7FFE3922D070h            ; CALL(Call_rel32_64) [5D818AF0h:jmp64]                encoding(5 bytes) = e8 c2 8a 81 5d
002eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0031h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
003bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FF30h:jmp64]                encoding(5 bytes) = e8 f0 fe 24 5f
0040h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0043h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0047h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F070h:jmp64]                encoding(5 bytes) = e8 21 f0 24 5f
004fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0059h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FF30h:jmp64]                encoding(5 bytes) = e8 d2 fe 24 5f
005eh mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0061h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0065h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0068h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24F070h:jmp64]                encoding(5 bytes) = e8 03 f0 24 5f
006dh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0070h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
0074h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0075h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0076h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0077h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variableBytes => new byte[120]{0x57,0x56,0x53,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x8B,0xF2,0x33,0xD2,0x45,0x33,0xC0,0x48,0x8D,0x44,0x24,0x20,0x48,0x89,0x10,0x44,0x89,0x40,0x08,0x48,0x8D,0x54,0x24,0x20,0x45,0x33,0xC0,0xE8,0xC2,0x8A,0x81,0x5D,0x48,0x8B,0xF8,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF0,0xFE,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD7,0xE8,0x21,0xF0,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD2,0xFE,0x24,0x5F,0x89,0x70,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x03,0xF0,0x24,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable[] variables(int n)
; location: [7FFDDBA14610h, 7FFDDBA146C9h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,38h                   ; SUB(Sub_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 ec 38
000ch xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000eh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0013h mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0018h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
001ah movsxd rdx,esi                ; MOVSXD(Movsxd_r64_rm32) [RDX,ESI]                    encoding(3 bytes) = 48 63 d6
001dh mov rcx,7FFDDBA013B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba013b0h:imm64]         encoding(10 bytes) = 48 b9 b0 13 a0 db fd 7f 00 00
0027h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F250030h:jmp64]                encoding(5 bytes) = e8 04 00 25 5f
002ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
002fh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0031h test esi,esi                  ; TEST(Test_rm32_r32) [ESI,ESI]                        encoding(2 bytes) = 85 f6
0033h jle short 00aah               ; JLE(Jle_rel8_64) [AAh:jmp64]                         encoding(2 bytes) = 7e 75
0035h mov ebp,ebx                   ; MOV(Mov_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 8b eb
0037h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0039h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
003bh lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
0040h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0043h mov [r8+8],edx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(4 bytes) = 41 89 50 08
0047h mov ecx,ebp                   ; MOV(Mov_r32_rm32) [ECX,EBP]                          encoding(2 bytes) = 8b cd
0049h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
004eh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0051h call 7FFE3921AD70h            ; CALL(Call_rel32_64) [5D806760h:jmp64]                encoding(5 bytes) = e8 0a 67 80 5d
0056h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0059h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0063h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FEA0h:jmp64]                encoding(5 bytes) = e8 38 fe 24 5f
0068h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
006bh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
006fh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0072h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EFE0h:jmp64]                encoding(5 bytes) = e8 69 ef 24 5f
0077h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0081h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FEA0h:jmp64]                encoding(5 bytes) = e8 1a fe 24 5f
0086h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0088h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
008bh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
008fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0092h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EFE0h:jmp64]                encoding(5 bytes) = e8 49 ef 24 5f
0097h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
009ah mov edx,ebp                   ; MOV(Mov_r32_rm32) [EDX,EBP]                          encoding(2 bytes) = 8b d5
009ch mov r8,r15                    ; MOV(Mov_r64_rm64) [R8,R15]                           encoding(3 bytes) = 4d 8b c7
009fh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24F100h:jmp64]                encoding(5 bytes) = e8 5c f0 24 5f
00a4h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
00a6h cmp ebx,esi                   ; CMP(Cmp_r32_rm32) [EBX,ESI]                          encoding(2 bytes) = 3b de
00a8h jl short 0035h                ; JL(Jl_rel8_64) [35h:jmp64]                           encoding(2 bytes) = 7c 8b
00aah mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
00adh add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
00b1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00b2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00b3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00b4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00b5h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00b7h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00b9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variablesBytes => new byte[186]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x38,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x8B,0xF1,0x48,0x63,0xD6,0x48,0xB9,0xB0,0x13,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0x00,0x25,0x5F,0x48,0x8B,0xF8,0x33,0xDB,0x85,0xF6,0x7E,0x75,0x8B,0xEB,0x33,0xC9,0x33,0xD2,0x4C,0x8D,0x44,0x24,0x28,0x49,0x89,0x08,0x41,0x89,0x50,0x08,0x8B,0xCD,0x48,0x8D,0x54,0x24,0x28,0x45,0x33,0xC0,0xE8,0x0A,0x67,0x80,0x5D,0x4C,0x8B,0xF0,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x38,0xFE,0x24,0x5F,0x4C,0x8B,0xF8,0x49,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0x69,0xEF,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1A,0xFE,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x49,0xEF,0x24,0x5F,0x48,0x8B,0xCF,0x8B,0xD5,0x4D,0x8B,0xC7,0xE8,0x5C,0xF0,0x24,0x5F,0xFF,0xC3,0x3B,0xDE,0x7C,0x8B,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x38,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: VariedLogicExpr varied(ILogicExpr subject, ILogicVarExpr[] variables)
; location: [7FFDDBA146F0h, 7FFDDBA14731h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E6CC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e6cc0h:imm64]         encoding(10 bytes) = 48 b9 c0 6c 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FDC0h:jmp64]                encoding(5 bytes) = e8 a4 fd 24 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EF00h:jmp64]                encoding(5 bytes) = e8 d5 ee 24 5f
002bh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
002fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EF00h:jmp64]                encoding(5 bytes) = e8 c9 ee 24 5f
0037h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
003eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
003fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0040h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0041h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> variedBytes => new byte[66]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xC0,0x6C,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0xFD,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD5,0xEE,0x24,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xC9,0xEE,0x24,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr compare(ComparisonKind:uint kind, ILogicExpr lhs, ILogicExpr rhs, LogicVariable[] variables)
; location: [7FFDDBA14750h, 7FFDDBA147ACh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ebp,ecx                   ; MOV(Mov_r32_rm32) [EBP,ECX]                          encoding(2 bytes) = 8b e9
000ch mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000fh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0012h mov rbx,r9                    ; MOV(Mov_r64_rm64) [RBX,R9]                           encoding(3 bytes) = 49 8b d9
0015h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FD60h:jmp64]                encoding(5 bytes) = e8 3c fd 24 5f
0024h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0027h mov [r14+20h],ebp             ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),EBP]        encoding(4 bytes) = 41 89 6e 20
002bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
002fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EEA0h:jmp64]                encoding(5 bytes) = e8 69 ee 24 5f
0037h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
003bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EEA0h:jmp64]                encoding(5 bytes) = e8 5d ee 24 5f
0043h lea rcx,[r14+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 18
0047h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EEA0h:jmp64]                encoding(5 bytes) = e8 51 ee 24 5f
004fh mov rax,r14                   ; MOV(Mov_r64_rm64) [RAX,R14]                          encoding(3 bytes) = 49 8b c6
0052h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0058h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0059h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
005ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> compareBytes => new byte[93]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xE9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x49,0x8B,0xD9,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3C,0xFD,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0x89,0x6E,0x20,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x69,0xEE,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD7,0xE8,0x5D,0xEE,0x24,0x5F,0x49,0x8D,0x4E,0x18,0x48,0x8B,0xD3,0xE8,0x51,0xEE,0x24,0x5F,0x49,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr equals(ILogicExpr lhs, ILogicExpr rhs, LogicVariable[] variables)
; location: [7FFDDBA147D0h, 7FFDDBA14829h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000bh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000eh mov rbx,r8                    ; MOV(Mov_r64_rm64) [RBX,R8]                           encoding(3 bytes) = 49 8b d8
0011h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
001bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24FCE0h:jmp64]                encoding(5 bytes) = e8 c0 fc 24 5f
0020h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0023h mov dword ptr [rbp+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),1h:imm32] encoding(7 bytes) = c7 45 20 01 00 00 00
002ah lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
002eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0031h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EE20h:jmp64]                encoding(5 bytes) = e8 ea ed 24 5f
0036h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
003ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EE20h:jmp64]                encoding(5 bytes) = e8 de ed 24 5f
0042h lea rcx,[rbp+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 18
0046h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0049h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24EE20h:jmp64]                encoding(5 bytes) = e8 d2 ed 24 5f
004eh mov rax,rbp                   ; MOV(Mov_r64_rm64) [RAX,RBP]                          encoding(3 bytes) = 48 8b c5
0051h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0055h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0056h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0057h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0058h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0059h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> equalsBytes => new byte[90]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x49,0x8B,0xD8,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0xFC,0x24,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0xEA,0xED,0x24,0x5F,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD7,0xE8,0xDE,0xED,0x24,0x5F,0x48,0x8D,0x4D,0x18,0x48,0x8B,0xD3,0xE8,0xD2,0xED,0x24,0x5F,0x48,0x8B,0xC5,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:321
; function: bit ToBit(bool x)
; location: [7FFDDBA14850h, 7FFDDBA14874h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
000ah lea rax,[rsp]                 ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 04 24
000eh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0010h jne short 0016h               ; JNE(Jne_rel8_64) [16h:jmp64]                         encoding(2 bytes) = 75 04
0012h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0014h jmp short 001bh               ; JMP(Jmp_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = eb 05
0016h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
001bh mov [rax],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(2 bytes) = 89 10
001dh mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0020h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ToBitBytes => new byte[37]{0x50,0x0F,0x1F,0x40,0x00,0x33,0xC0,0x89,0x04,0x24,0x48,0x8D,0x04,0x24,0x84,0xC9,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x89,0x10,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:380
; function: IEnumerable<ComparisonExpr> get_All()
; location: [7FFDDBA14890h, 7FFDDBA1491Ah]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov rcx,7FFDDBA06688h         ; MOV(Mov_r64_imm64) [RCX,7ffddba06688h:imm64]         encoding(10 bytes) = 48 b9 88 66 a0 db fd 7f 00 00
000fh mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
0014h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24FDB0h:jmp64]                encoding(5 bytes) = e8 97 fd 24 5f
0019h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001ch call 7FFDDB82E508h            ; CALL(Call_rel32_64) [FFFFFFFFFFE19C78h:jmp64]        encoding(5 bytes) = e8 57 9c e1 ff
0021h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0024h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0027h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0029h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24EE80h:jmp64]                encoding(5 bytes) = e8 52 ee 24 5f
002eh call 7FFDDB82E510h            ; CALL(Call_rel32_64) [FFFFFFFFFFE19C80h:jmp64]        encoding(5 bytes) = e8 4d 9c e1 ff
0033h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0036h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0039h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
003eh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24EE80h:jmp64]                encoding(5 bytes) = e8 3d ee 24 5f
0043h call 7FFDDB82E518h            ; CALL(Call_rel32_64) [FFFFFFFFFFE19C88h:jmp64]        encoding(5 bytes) = e8 40 9c e1 ff
0048h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
004bh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
004eh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0053h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24EE80h:jmp64]                encoding(5 bytes) = e8 28 ee 24 5f
0058h call 7FFDDB82E520h            ; CALL(Call_rel32_64) [FFFFFFFFFFE19C90h:jmp64]        encoding(5 bytes) = e8 33 9c e1 ff
005dh mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0060h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0063h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0068h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24EE80h:jmp64]                encoding(5 bytes) = e8 13 ee 24 5f
006dh call 7FFDDB82E528h            ; CALL(Call_rel32_64) [FFFFFFFFFFE19C98h:jmp64]        encoding(5 bytes) = e8 26 9c e1 ff
0072h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0075h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0078h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
007dh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24EE80h:jmp64]                encoding(5 bytes) = e8 fe ed 24 5f
0082h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0085h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0089h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
008ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_AllBytes => new byte[139]{0x56,0x48,0x83,0xEC,0x20,0x48,0xB9,0x88,0x66,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0x97,0xFD,0x24,0x5F,0x48,0x8B,0xF0,0xE8,0x57,0x9C,0xE1,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0x33,0xD2,0xE8,0x52,0xEE,0x24,0x5F,0xE8,0x4D,0x9C,0xE1,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x01,0x00,0x00,0x00,0xE8,0x3D,0xEE,0x24,0x5F,0xE8,0x40,0x9C,0xE1,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x02,0x00,0x00,0x00,0xE8,0x28,0xEE,0x24,0x5F,0xE8,0x33,0x9C,0xE1,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x03,0x00,0x00,0x00,0xE8,0x13,0xEE,0x24,0x5F,0xE8,0x26,0x9C,0xE1,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0xBA,0x04,0x00,0x00,0x00,0xE8,0xFE,0xED,0x24,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_AndOverOr()
; location: [7FFDDBA14D40h, 7FFDDBA14FCEh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0013h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F768h:jmp64]        encoding(5 bytes) = e8 50 f7 70 ff
0018h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001bh mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
0021h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
002bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 40 f7 24 5f
0030h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0033h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 71 e8 24 5f
003fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 22 f7 24 5f
004eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0050h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 51 e8 24 5f
005fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0064h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F768h:jmp64]        encoding(5 bytes) = e8 ff f6 70 ff
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0072h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
007ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 ef f6 24 5f
0081h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0084h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 20 e8 24 5f
0090h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
009ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 d1 f6 24 5f
009fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a4h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 00 e8 24 5f
00b0h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b5h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F768h:jmp64]        encoding(5 bytes) = e8 ae f6 70 ff
00bah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bdh mov word ptr [rsi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 46 0c 63 00
00c3h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
00cdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 9e f6 24 5f
00d2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 cf e7 24 5f
00e1h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
00ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 80 f6 24 5f
00f0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f2h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f5h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00f9h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 af e7 24 5f
0101h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 60 f6 24 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov dword ptr [rsi+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),7h:imm32] encoding(7 bytes) = c7 46 18 07 00 00 00
011ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0121h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 8a e7 24 5f
0126h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
012ah mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
012dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 7e e7 24 5f
0132h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
013ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 2f f6 24 5f
0141h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0144h mov dword ptr [r14+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 18 01 00 00 00
014ch lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0150h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0153h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 58 e7 24 5f
0158h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
015ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
015fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 4c e7 24 5f
0164h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
016eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 fd f5 24 5f
0173h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0176h mov dword ptr [rsi+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 18 01 00 00 00
017dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0181h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0184h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 27 e7 24 5f
0189h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
018dh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0190h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 1b e7 24 5f
0195h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
019fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 cc f5 24 5f
01a4h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
01a7h mov dword ptr [r15+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R15:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 47 18 01 00 00 00
01afh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
01b3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01b6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 f5 e6 24 5f
01bbh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
01bfh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01c2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 e9 e6 24 5f
01c7h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
01d1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 9a f5 24 5f
01d6h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
01d9h mov dword ptr [r12+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,R12:br,DS:sr),7h:imm32] encoding(9 bytes) = 41 c7 44 24 18 07 00 00 00
01e2h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
01e7h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01eah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 c1 e6 24 5f
01efh lea rcx,[r12+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 10
01f4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01f7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 b4 e6 24 5f
01fch mov rcx,7FFDDBA013B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba013b0h:imm64]         encoding(10 bytes) = 48 b9 b0 13 a0 db fd 7f 00 00
0206h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
020bh call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24F900h:jmp64]                encoding(5 bytes) = e8 f0 f6 24 5f
0210h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0213h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0216h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0219h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
021bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E9D0h:jmp64]                encoding(5 bytes) = e8 b0 e7 24 5f
0220h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0223h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0226h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
022bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E9D0h:jmp64]                encoding(5 bytes) = e8 a0 e7 24 5f
0230h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0233h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0236h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
023bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E9D0h:jmp64]                encoding(5 bytes) = e8 90 e7 24 5f
0240h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
024ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F770h:jmp64]                encoding(5 bytes) = e8 21 f5 24 5f
024fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0252h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
0259h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
025dh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0260h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 4b e6 24 5f
0265h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0269h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
026ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 3f e6 24 5f
0271h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
0275h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0278h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E8B0h:jmp64]                encoding(5 bytes) = e8 33 e6 24 5f
027dh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0280h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0284h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0285h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0286h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0287h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0288h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
028ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
028ch pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
028eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_AndOverOrBytes => new byte[655]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0x50,0xF7,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x40,0xF7,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x71,0xE8,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x22,0xF7,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x51,0xE8,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xFF,0xF6,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEF,0xF6,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x20,0xE8,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD1,0xF6,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x00,0xE8,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xAE,0xF6,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x63,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9E,0xF6,0x24,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0xCF,0xE7,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0xF6,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xAF,0xE7,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x60,0xF6,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x07,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x8A,0xE7,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD5,0xE8,0x7E,0xE7,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2F,0xF6,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x58,0xE7,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD6,0xE8,0x4C,0xE7,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFD,0xF5,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x27,0xE7,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x1B,0xE7,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCC,0xF5,0x24,0x5F,0x4C,0x8B,0xF8,0x41,0xC7,0x47,0x18,0x01,0x00,0x00,0x00,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF5,0xE6,0x24,0x5F,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD5,0xE8,0xE9,0xE6,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9A,0xF5,0x24,0x5F,0x4C,0x8B,0xE0,0x41,0xC7,0x44,0x24,0x18,0x07,0x00,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD6,0xE8,0xC1,0xE6,0x24,0x5F,0x49,0x8D,0x4C,0x24,0x10,0x49,0x8B,0xD7,0xE8,0xB4,0xE6,0x24,0x5F,0x48,0xB9,0xB0,0x13,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xF0,0xF6,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0xB0,0xE7,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0xA0,0xE7,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x02,0x00,0x00,0x00,0xE8,0x90,0xE7,0x24,0x5F,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0xF5,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0x4B,0xE6,0x24,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD4,0xE8,0x3F,0xE6,0x24,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0x33,0xE6,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_AndOverXOr()
; location: [7FFDDBA14FF0h, 7FFDDBA1527Eh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0013h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F4B8h:jmp64]        encoding(5 bytes) = e8 a0 f4 70 ff
0018h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001bh mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
0021h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
002bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 90 f4 24 5f
0030h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0033h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 c1 e5 24 5f
003fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 72 f4 24 5f
004eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0050h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 a1 e5 24 5f
005fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0064h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F4B8h:jmp64]        encoding(5 bytes) = e8 4f f4 70 ff
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0072h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
007ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 3f f4 24 5f
0081h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0084h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 70 e5 24 5f
0090h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
009ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 21 f4 24 5f
009fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a4h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 50 e5 24 5f
00b0h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b5h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F4B8h:jmp64]        encoding(5 bytes) = e8 fe f3 70 ff
00bah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bdh mov word ptr [rsi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 46 0c 63 00
00c3h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
00cdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 ee f3 24 5f
00d2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 1f e5 24 5f
00e1h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
00ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 d0 f3 24 5f
00f0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f2h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f5h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00f9h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 ff e4 24 5f
0101h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 b0 f3 24 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov dword ptr [rsi+18h],6     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),6h:imm32] encoding(7 bytes) = c7 46 18 06 00 00 00
011ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0121h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 da e4 24 5f
0126h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
012ah mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
012dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 ce e4 24 5f
0132h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
013ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 7f f3 24 5f
0141h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0144h mov dword ptr [r14+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 18 01 00 00 00
014ch lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0150h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0153h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 a8 e4 24 5f
0158h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
015ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
015fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 9c e4 24 5f
0164h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
016eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 4d f3 24 5f
0173h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0176h mov dword ptr [rsi+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 18 01 00 00 00
017dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0181h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0184h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 77 e4 24 5f
0189h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
018dh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0190h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 6b e4 24 5f
0195h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
019fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 1c f3 24 5f
01a4h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
01a7h mov dword ptr [r15+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R15:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 47 18 01 00 00 00
01afh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
01b3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01b6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 45 e4 24 5f
01bbh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
01bfh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01c2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 39 e4 24 5f
01c7h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
01d1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 ea f2 24 5f
01d6h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
01d9h mov dword ptr [r12+18h],6     ; MOV(Mov_rm32_imm32) [mem(32u,R12:br,DS:sr),6h:imm32] encoding(9 bytes) = 41 c7 44 24 18 06 00 00 00
01e2h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
01e7h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01eah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 11 e4 24 5f
01efh lea rcx,[r12+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 10
01f4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01f7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 04 e4 24 5f
01fch mov rcx,7FFDDBA013B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba013b0h:imm64]         encoding(10 bytes) = 48 b9 b0 13 a0 db fd 7f 00 00
0206h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
020bh call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24F650h:jmp64]                encoding(5 bytes) = e8 40 f4 24 5f
0210h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0213h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0216h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0219h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
021bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E720h:jmp64]                encoding(5 bytes) = e8 00 e5 24 5f
0220h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0223h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0226h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
022bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E720h:jmp64]                encoding(5 bytes) = e8 f0 e4 24 5f
0230h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0233h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0236h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
023bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E720h:jmp64]                encoding(5 bytes) = e8 e0 e4 24 5f
0240h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
024ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F4C0h:jmp64]                encoding(5 bytes) = e8 71 f2 24 5f
024fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0252h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
0259h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
025dh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0260h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 9b e3 24 5f
0265h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0269h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
026ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 8f e3 24 5f
0271h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
0275h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0278h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E600h:jmp64]                encoding(5 bytes) = e8 83 e3 24 5f
027dh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0280h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0284h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0285h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0286h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0287h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0288h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
028ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
028ch pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
028eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_AndOverXOrBytes => new byte[655]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0xA0,0xF4,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x90,0xF4,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xC1,0xE5,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x72,0xF4,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xA1,0xE5,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x4F,0xF4,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3F,0xF4,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x70,0xE5,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0xF4,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x50,0xE5,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xFE,0xF3,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x63,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEE,0xF3,0x24,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x1F,0xE5,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD0,0xF3,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xFF,0xE4,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB0,0xF3,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x06,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xDA,0xE4,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD5,0xE8,0xCE,0xE4,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7F,0xF3,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xA8,0xE4,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD6,0xE8,0x9C,0xE4,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4D,0xF3,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x77,0xE4,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x6B,0xE4,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0xF3,0x24,0x5F,0x4C,0x8B,0xF8,0x41,0xC7,0x47,0x18,0x01,0x00,0x00,0x00,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x45,0xE4,0x24,0x5F,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD5,0xE8,0x39,0xE4,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEA,0xF2,0x24,0x5F,0x4C,0x8B,0xE0,0x41,0xC7,0x44,0x24,0x18,0x06,0x00,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD6,0xE8,0x11,0xE4,0x24,0x5F,0x49,0x8D,0x4C,0x24,0x10,0x49,0x8B,0xD7,0xE8,0x04,0xE4,0x24,0x5F,0x48,0xB9,0xB0,0x13,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x40,0xF4,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0x00,0xE5,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0xF0,0xE4,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE0,0xE4,0x24,0x5F,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x71,0xF2,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0x9B,0xE3,0x24,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD4,0xE8,0x8F,0xE3,0x24,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0x83,0xE3,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_OrOverAnd()
; location: [7FFDDBA152A0h, 7FFDDBA1552Eh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0013h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F208h:jmp64]        encoding(5 bytes) = e8 f0 f1 70 ff
0018h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
001bh mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
0021h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
002bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 e0 f1 24 5f
0030h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0033h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0037h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 11 e3 24 5f
003fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0049h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 c2 f1 24 5f
004eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0050h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0053h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0057h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
005ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 f1 e2 24 5f
005fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0064h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F208h:jmp64]        encoding(5 bytes) = e8 9f f1 70 ff
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0072h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
007ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 8f f1 24 5f
0081h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0084h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 c0 e2 24 5f
0090h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
009ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 71 f1 24 5f
009fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a4h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00abh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 a0 e2 24 5f
00b0h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b5h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70F208h:jmp64]        encoding(5 bytes) = e8 4e f1 70 ff
00bah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bdh mov word ptr [rsi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 46 0c 63 00
00c3h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
00cdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 3e f1 24 5f
00d2h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00d5h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00d9h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00dch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 6f e2 24 5f
00e1h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
00ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 20 f1 24 5f
00f0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f2h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f5h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00f9h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 4f e2 24 5f
0101h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
010bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 00 f1 24 5f
0110h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0113h mov dword ptr [rsi+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),7h:imm32] encoding(7 bytes) = c7 46 18 07 00 00 00
011ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0121h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 2a e2 24 5f
0126h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
012ah mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
012dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 1e e2 24 5f
0132h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
013ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 cf f0 24 5f
0141h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0144h mov dword ptr [r14+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 18 01 00 00 00
014ch lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0150h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0153h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 f8 e1 24 5f
0158h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
015ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
015fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 ec e1 24 5f
0164h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
016eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 9d f0 24 5f
0173h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0176h mov dword ptr [rsi+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 18 01 00 00 00
017dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0181h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0184h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 c7 e1 24 5f
0189h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
018dh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0190h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 bb e1 24 5f
0195h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
019fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 6c f0 24 5f
01a4h mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
01a7h mov dword ptr [r15+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R15:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 47 18 01 00 00 00
01afh lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
01b3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01b6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 95 e1 24 5f
01bbh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
01bfh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01c2h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 89 e1 24 5f
01c7h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
01d1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 3a f0 24 5f
01d6h mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
01d9h mov dword ptr [r12+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,R12:br,DS:sr),7h:imm32] encoding(9 bytes) = 41 c7 44 24 18 07 00 00 00
01e2h lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
01e7h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01eah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 61 e1 24 5f
01efh lea rcx,[r12+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 10
01f4h mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01f7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 54 e1 24 5f
01fch mov rcx,7FFDDBA013B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba013b0h:imm64]         encoding(10 bytes) = 48 b9 b0 13 a0 db fd 7f 00 00
0206h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
020bh call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24F3A0h:jmp64]                encoding(5 bytes) = e8 90 f1 24 5f
0210h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0213h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0216h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0219h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
021bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E470h:jmp64]                encoding(5 bytes) = e8 50 e2 24 5f
0220h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0223h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0226h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
022bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E470h:jmp64]                encoding(5 bytes) = e8 40 e2 24 5f
0230h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0233h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0236h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
023bh call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E470h:jmp64]                encoding(5 bytes) = e8 30 e2 24 5f
0240h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
024ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24F210h:jmp64]                encoding(5 bytes) = e8 c1 ef 24 5f
024fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0252h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
0259h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
025dh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
0260h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 eb e0 24 5f
0265h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0269h mov rdx,r12                   ; MOV(Mov_r64_rm64) [RDX,R12]                          encoding(3 bytes) = 49 8b d4
026ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 df e0 24 5f
0271h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
0275h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0278h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E350h:jmp64]                encoding(5 bytes) = e8 d3 e0 24 5f
027dh mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
0280h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0284h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0285h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0286h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0287h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0288h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
028ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
028ch pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
028eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OrOverAndBytes => new byte[655]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0xF0,0xF1,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE0,0xF1,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x11,0xE3,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC2,0xF1,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0xF1,0xE2,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x9F,0xF1,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8F,0xF1,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC0,0xE2,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x71,0xF1,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xA0,0xE2,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x4E,0xF1,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x63,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3E,0xF1,0x24,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x6F,0xE2,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x20,0xF1,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0x4F,0xE2,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x00,0xF1,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x07,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x2A,0xE2,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD5,0xE8,0x1E,0xE2,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCF,0xF0,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xF8,0xE1,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD6,0xE8,0xEC,0xE1,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9D,0xF0,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xC7,0xE1,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0xBB,0xE1,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6C,0xF0,0x24,0x5F,0x4C,0x8B,0xF8,0x41,0xC7,0x47,0x18,0x01,0x00,0x00,0x00,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x95,0xE1,0x24,0x5F,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD5,0xE8,0x89,0xE1,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3A,0xF0,0x24,0x5F,0x4C,0x8B,0xE0,0x41,0xC7,0x44,0x24,0x18,0x07,0x00,0x00,0x00,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD6,0xE8,0x61,0xE1,0x24,0x5F,0x49,0x8D,0x4C,0x24,0x10,0x49,0x8B,0xD7,0xE8,0x54,0xE1,0x24,0x5F,0x48,0xB9,0xB0,0x13,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x90,0xF1,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0x50,0xE2,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0x40,0xE2,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x02,0x00,0x00,0x00,0xE8,0x30,0xE2,0x24,0x5F,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC1,0xEF,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x49,0x8B,0xD6,0xE8,0xEB,0xE0,0x24,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD4,0xE8,0xDF,0xE0,0x24,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0xD3,0xE0,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_NotOverAnd()
; location: [7FFDDBA15550h, 7FFDDBA15751h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0011h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EF58h:jmp64]        encoding(5 bytes) = e8 42 ef 70 ff
0016h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0019h mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
001fh mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0029h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 32 ef 24 5f
002eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0031h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0035h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0038h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 63 e0 24 5f
003dh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0047h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 14 ef 24 5f
004ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004eh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0051h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0055h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0058h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 43 e0 24 5f
005dh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0062h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EF58h:jmp64]        encoding(5 bytes) = e8 f1 ee 70 ff
0067h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ah mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
0070h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
007ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 e1 ee 24 5f
007fh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0082h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0086h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0089h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 12 e0 24 5f
008eh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0098h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 c3 ee 24 5f
009dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
009fh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a2h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a6h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00a9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 f2 df 24 5f
00aeh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
00b8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 a3 ee 24 5f
00bdh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c0h mov dword ptr [rsi+18h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 18 01 00 00 00
00c7h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00cbh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00ceh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 cd df 24 5f
00d3h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
00d7h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00dah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 c1 df 24 5f
00dfh mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
00e9h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 72 ee 24 5f
00eeh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00f1h mov dword ptr [rbp+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),1h:imm32] encoding(7 bytes) = c7 45 10 01 00 00 00
00f8h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00fch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00ffh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 9c df 24 5f
0104h mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
010eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 4d ee 24 5f
0113h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0116h mov dword ptr [rsi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 10 01 00 00 00
011dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0121h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0124h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 77 df 24 5f
0129h mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
0133h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 28 ee 24 5f
0138h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
013bh mov dword ptr [r14+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),1h:imm32] encoding(8 bytes) = 41 c7 46 10 01 00 00 00
0143h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0147h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
014ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 51 df 24 5f
014fh mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0159h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 02 ee 24 5f
015eh mov r15,rax                   ; MOV(Mov_r64_rm64) [R15,RAX]                          encoding(3 bytes) = 4c 8b f8
0161h mov dword ptr [r15+18h],7     ; MOV(Mov_rm32_imm32) [mem(32u,R15:br,DS:sr),7h:imm32] encoding(8 bytes) = 41 c7 47 18 07 00 00 00
0169h lea rcx,[r15+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 08
016dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0170h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 2b df 24 5f
0175h lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
0179h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
017ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 1f df 24 5f
0181h mov rcx,7FFDDBA013B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba013b0h:imm64]         encoding(10 bytes) = 48 b9 b0 13 a0 db fd 7f 00 00
018bh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0190h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24F0F0h:jmp64]                encoding(5 bytes) = e8 5b ef 24 5f
0195h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0198h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
019bh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
019eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01a0h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E1C0h:jmp64]                encoding(5 bytes) = e8 1b e0 24 5f
01a5h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
01a8h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
01abh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01b0h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24E1C0h:jmp64]                encoding(5 bytes) = e8 0b e0 24 5f
01b5h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
01bfh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EF60h:jmp64]                encoding(5 bytes) = e8 9c ed 24 5f
01c4h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
01c7h mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
01ceh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
01d2h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01d5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 c6 de 24 5f
01dah lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
01deh mov rdx,r15                   ; MOV(Mov_r64_rm64) [RDX,R15]                          encoding(3 bytes) = 49 8b d7
01e1h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 ba de 24 5f
01e6h lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
01eah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01edh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24E0A0h:jmp64]                encoding(5 bytes) = e8 ae de 24 5f
01f2h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
01f5h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
01f9h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01fah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01fbh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01fch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01fdh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
01ffh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0201h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NotOverAndBytes => new byte[514]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0xB9,0x01,0x00,0x00,0x00,0xE8,0x42,0xEF,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x32,0xEF,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x63,0xE0,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0xEF,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x43,0xE0,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xF1,0xEE,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0xEE,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x12,0xE0,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC3,0xEE,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xF2,0xDF,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA3,0xEE,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xCD,0xDF,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0xC1,0xDF,0x24,0x5F,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x72,0xEE,0x24,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x9C,0xDF,0x24,0x5F,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4D,0xEE,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x77,0xDF,0x24,0x5F,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0xEE,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x51,0xDF,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x02,0xEE,0x24,0x5F,0x4C,0x8B,0xF8,0x41,0xC7,0x47,0x18,0x07,0x00,0x00,0x00,0x49,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x2B,0xDF,0x24,0x5F,0x49,0x8D,0x4F,0x10,0x49,0x8B,0xD6,0xE8,0x1F,0xDF,0x24,0x5F,0x48,0xB9,0xB0,0x13,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x5B,0xEF,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0x1B,0xE0,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0x0B,0xE0,0x24,0x5F,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0xED,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD5,0xE8,0xC6,0xDE,0x24,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD7,0xE8,0xBA,0xDE,0x24,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0xAE,0xDE,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonExpr get_NotOverXOr()
; location: [7FFDDBA15780h, 7FFDDBA15957h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
000fh call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70ED28h:jmp64]        encoding(5 bytes) = e8 14 ed 70 ff
0014h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0017h mov word ptr [rsi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 46 0c 61 00
001dh mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0027h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 04 ed 24 5f
002ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
002fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0033h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0036h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 35 de 24 5f
003bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0045h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 e6 ec 24 5f
004ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004ch mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
004fh lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0053h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0056h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 15 de 24 5f
005bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0060h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70ED28h:jmp64]        encoding(5 bytes) = e8 c3 ec 70 ff
0065h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0068h mov word ptr [rsi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RSI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 46 0c 62 00
006eh mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0078h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 b3 ec 24 5f
007dh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0080h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0084h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0087h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 e4 dd 24 5f
008ch mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0096h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 95 ec 24 5f
009bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
009dh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a0h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
00a4h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00a7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 c4 dd 24 5f
00ach mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
00b6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 75 ec 24 5f
00bbh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00beh mov dword ptr [rsi+18h],6     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),6h:imm32] encoding(7 bytes) = c7 46 18 06 00 00 00
00c5h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00cch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 9f dd 24 5f
00d1h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
00d5h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00d8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 93 dd 24 5f
00ddh mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
00e7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 44 ec 24 5f
00ech mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
00efh mov dword ptr [rbp+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),1h:imm32] encoding(7 bytes) = c7 45 10 01 00 00 00
00f6h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
00fah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00fdh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 6e dd 24 5f
0102h mov rcx,7FFDDB9E64F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e64f8h:imm64]         encoding(10 bytes) = 48 b9 f8 64 9e db fd 7f 00 00
010ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 1f ec 24 5f
0111h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0114h mov dword ptr [rsi+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 46 10 01 00 00 00
011bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
011fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0122h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 49 dd 24 5f
0127h mov rcx,7FFDDB9E4EE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4ee8h:imm64]         encoding(10 bytes) = 48 b9 e8 4e 9e db fd 7f 00 00
0131h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 fa eb 24 5f
0136h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0139h mov dword ptr [r14+18h],6     ; MOV(Mov_rm32_imm32) [mem(32u,R14:br,DS:sr),6h:imm32] encoding(8 bytes) = 41 c7 46 18 06 00 00 00
0141h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
0145h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0148h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 23 dd 24 5f
014dh lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0151h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0154h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 17 dd 24 5f
0159h mov rcx,7FFDDBA013B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba013b0h:imm64]         encoding(10 bytes) = 48 b9 b0 13 a0 db fd 7f 00 00
0163h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0168h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24EEC0h:jmp64]                encoding(5 bytes) = e8 53 ed 24 5f
016dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0170h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0173h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0176h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0178h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24DF90h:jmp64]                encoding(5 bytes) = e8 13 de 24 5f
017dh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0180h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0183h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0188h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24DF90h:jmp64]                encoding(5 bytes) = e8 03 de 24 5f
018dh mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
0197h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24ED30h:jmp64]                encoding(5 bytes) = e8 94 eb 24 5f
019ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
019fh mov dword ptr [rdi+20h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RDI:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 47 20 01 00 00 00
01a6h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
01aah mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
01adh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 be dc 24 5f
01b2h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
01b6h mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
01b9h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 b2 dc 24 5f
01beh lea rcx,[rdi+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 18
01c2h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01c5h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DE70h:jmp64]                encoding(5 bytes) = e8 a6 dc 24 5f
01cah mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
01cdh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
01d1h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01d2h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
01d3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01d4h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01d5h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
01d7h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NotOverXOrBytes => new byte[472]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0xB9,0x01,0x00,0x00,0x00,0xE8,0x14,0xED,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x04,0xED,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0x35,0xDE,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0xEC,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x15,0xDE,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xC3,0xEC,0x70,0xFF,0x48,0x8B,0xF0,0x66,0xC7,0x46,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB3,0xEC,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE4,0xDD,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x95,0xEC,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0xC4,0xDD,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x75,0xEC,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x18,0x06,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x9F,0xDD,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x93,0xDD,0x24,0x5F,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0xEC,0x24,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD6,0xE8,0x6E,0xDD,0x24,0x5F,0x48,0xB9,0xF8,0x64,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1F,0xEC,0x24,0x5F,0x48,0x8B,0xF0,0xC7,0x46,0x10,0x01,0x00,0x00,0x00,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0x49,0xDD,0x24,0x5F,0x48,0xB9,0xE8,0x4E,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFA,0xEB,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0xC7,0x46,0x18,0x06,0x00,0x00,0x00,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x23,0xDD,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD3,0xE8,0x17,0xDD,0x24,0x5F,0x48,0xB9,0xB0,0x13,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x53,0xED,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8B,0xCE,0x4C,0x8B,0xC7,0x33,0xD2,0xE8,0x13,0xDE,0x24,0x5F,0x48,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x01,0x00,0x00,0x00,0xE8,0x03,0xDE,0x24,0x5F,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0xEB,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x47,0x20,0x01,0x00,0x00,0x00,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD5,0xE8,0xBE,0xDC,0x24,0x5F,0x48,0x8D,0x4F,0x10,0x49,0x8B,0xD6,0xE8,0xB2,0xDC,0x24,0x5F,0x48,0x8D,0x4F,0x18,0x48,0x8B,0xD6,0xE8,0xA6,0xDC,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ValueTuple<LogicVariable,LogicVariable> get_vars2()
; location: [7FFDDBA15980h, 7FFDDBA15A4Fh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0010h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EB28h:jmp64]        encoding(5 bytes) = e8 13 eb 70 ff
0015h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0018h mov word ptr [rdi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 47 0c 61 00
001eh mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0028h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EB30h:jmp64]                encoding(5 bytes) = e8 03 eb 24 5f
002dh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0030h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0034h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0037h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DC70h:jmp64]                encoding(5 bytes) = e8 34 dc 24 5f
003ch mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0046h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EB30h:jmp64]                encoding(5 bytes) = e8 e5 ea 24 5f
004bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004dh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0050h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0054h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0057h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DC70h:jmp64]                encoding(5 bytes) = e8 14 dc 24 5f
005ch mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0061h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EB28h:jmp64]        encoding(5 bytes) = e8 c2 ea 70 ff
0066h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0069h mov word ptr [rdi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 47 0c 62 00
006fh mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
0079h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EB30h:jmp64]                encoding(5 bytes) = e8 b2 ea 24 5f
007eh mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0081h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0085h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0088h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DC70h:jmp64]                encoding(5 bytes) = e8 e3 db 24 5f
008dh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0097h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EB30h:jmp64]                encoding(5 bytes) = e8 94 ea 24 5f
009ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
009eh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a1h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00a5h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00a8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DC70h:jmp64]                encoding(5 bytes) = e8 c3 db 24 5f
00adh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
00b0h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
00b3h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24DC40h:jmp64]                encoding(5 bytes) = e8 88 db 24 5f
00b8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00bch mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
00bfh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24DC40h:jmp64]                encoding(5 bytes) = e8 7c db 24 5f
00c4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00c7h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00cbh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00cch pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00cdh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00ceh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00cfh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_vars2Bytes => new byte[208]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0xB9,0x01,0x00,0x00,0x00,0xE8,0x13,0xEB,0x70,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x03,0xEB,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD7,0xE8,0x34,0xDC,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE5,0xEA,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x14,0xDC,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xC2,0xEA,0x70,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB2,0xEA,0x24,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD7,0xE8,0xE3,0xDB,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0xEA,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xC3,0xDB,0x24,0x5F,0x48,0x8B,0xD3,0x48,0x8B,0xCE,0xE8,0x88,0xDB,0x24,0x5F,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD5,0xE8,0x7C,0xDB,0x24,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ValueTuple<LogicVariable,LogicVariable,LogicVariable> get_vars3()
; location: [7FFDDBA15A70h, 7FFDDBA15BA0h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0012h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EA38h:jmp64]        encoding(5 bytes) = e8 21 ea 70 ff
0017h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001ah mov word ptr [rdi+0Ch],61h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),61h:imm16] encoding(6 bytes) = 66 c7 47 0c 61 00
0020h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
002ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EA40h:jmp64]                encoding(5 bytes) = e8 11 ea 24 5f
002fh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0032h lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0036h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0039h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DB80h:jmp64]                encoding(5 bytes) = e8 42 db 24 5f
003eh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0048h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EA40h:jmp64]                encoding(5 bytes) = e8 f3 e9 24 5f
004dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
004fh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
0052h lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
0056h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0059h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DB80h:jmp64]                encoding(5 bytes) = e8 22 db 24 5f
005eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0063h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EA38h:jmp64]        encoding(5 bytes) = e8 d0 e9 70 ff
0068h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
006bh mov word ptr [rdi+0Ch],62h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),62h:imm16] encoding(6 bytes) = 66 c7 47 0c 62 00
0071h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
007bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EA40h:jmp64]                encoding(5 bytes) = e8 c0 e9 24 5f
0080h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
0083h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
0087h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
008ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DB80h:jmp64]                encoding(5 bytes) = e8 f1 da 24 5f
008fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0099h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EA40h:jmp64]                encoding(5 bytes) = e8 a2 e9 24 5f
009eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00a0h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00a3h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
00a7h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00aah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DB80h:jmp64]                encoding(5 bytes) = e8 d1 da 24 5f
00afh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
00b4h call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF70EA38h:jmp64]        encoding(5 bytes) = e8 7f e9 70 ff
00b9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00bch mov word ptr [rdi+0Ch],63h    ; MOV(Mov_rm16_imm16) [mem(16u,RDI:br,DS:sr),63h:imm16] encoding(6 bytes) = 66 c7 47 0c 63 00
00c2h mov rcx,7FFDDB9E5BA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5ba8h:imm64]         encoding(10 bytes) = 48 b9 a8 5b 9e db fd 7f 00 00
00cch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EA40h:jmp64]                encoding(5 bytes) = e8 6f e9 24 5f
00d1h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
00d4h lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
00d8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DB80h:jmp64]                encoding(5 bytes) = e8 a0 da 24 5f
00e0h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
00eah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24EA40h:jmp64]                encoding(5 bytes) = e8 51 e9 24 5f
00efh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00f4h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
00f8h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00fbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24DB80h:jmp64]                encoding(5 bytes) = e8 80 da 24 5f
0100h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0103h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0106h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24DB50h:jmp64]                encoding(5 bytes) = e8 45 da 24 5f
010bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
010fh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0112h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24DB50h:jmp64]                encoding(5 bytes) = e8 39 da 24 5f
0117h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
011bh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
011eh call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24DB50h:jmp64]                encoding(5 bytes) = e8 2d da 24 5f
0123h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0126h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
012ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
012bh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
012ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
012dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
012eh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0130h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_vars3Bytes => new byte[305]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0xB9,0x01,0x00,0x00,0x00,0xE8,0x21,0xEA,0x70,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x61,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0xEA,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD7,0xE8,0x42,0xDB,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF3,0xE9,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD0,0xE8,0x22,0xDB,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0xD0,0xE9,0x70,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x62,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC0,0xE9,0x24,0x5F,0x48,0x8B,0xE8,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD7,0xE8,0xF1,0xDA,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA2,0xE9,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0xD1,0xDA,0x24,0x5F,0xB9,0x01,0x00,0x00,0x00,0xE8,0x7F,0xE9,0x70,0xFF,0x48,0x8B,0xF8,0x66,0xC7,0x47,0x0C,0x63,0x00,0x48,0xB9,0xA8,0x5B,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6F,0xE9,0x24,0x5F,0x4C,0x8B,0xF0,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xA0,0xDA,0x24,0x5F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0xE9,0x24,0x5F,0x33,0xD2,0x89,0x50,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x80,0xDA,0x24,0x5F,0x48,0x8B,0xD3,0x48,0x8B,0xCE,0xE8,0x45,0xDA,0x24,0x5F,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD5,0xE8,0x39,0xDA,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x49,0x8B,0xD6,0xE8,0x2D,0xDA,0x24,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:460
; function: string get_Name()
; location: [7FFDDBA15BC0h, 7FFDDBA15BC9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NameBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IExpr get_Encoding()
; location: [7FFDDBA15BE0h, 7FFDDBA15BE9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_EncodingBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA15C00h, 7FFDDBA15C46h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
000ah mov r11,1E1F78368F8h          ; MOV(Mov_r64_imm64) [R11,1e1f78368f8h:imm64]          encoding(10 bytes) = 49 bb f8 68 83 f7 e1 01 00 00
0014h mov rdi,[r11]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,R11:br,DS:sr)]        encoding(3 bytes) = 49 8b 3b
0017h mov rcx,[rcx+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 10
001bh mov r11,7FFDDB000EC8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ec8h:imm64]         encoding(10 bytes) = 49 bb c8 0e 00 db fd 7f 00 00
0025h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0027h call qword ptr [7FFDDB000EC8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 9b b2 5e ff
002dh mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0030h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0033h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0036h mov rax,7FFE39224DE0h         ; MOV(Mov_r64_imm64) [RAX,7ffe39224de0h:imm64]         encoding(10 bytes) = 48 b8 e0 4d 22 39 fe 7f 00 00
0040h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0044h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0045h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0046h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[73]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0x71,0x08,0x49,0xBB,0xF8,0x68,0x83,0xF7,0xE1,0x01,0x00,0x00,0x49,0x8B,0x3B,0x48,0x8B,0x49,0x10,0x49,0xBB,0xC8,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x9B,0xB2,0x5E,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xD7,0x48,0x8B,0xCE,0x48,0xB8,0xE0,0x4D,0x22,0x39,0xFE,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:501
; function: ComparisonExpr Define(ComparisonKind:uint kind, ILogicExpr lhs, ILogicExpr rhs, LogicVariable[] vars)
; location: [7FFDDBA15C70h, 7FFDDBA15CCCh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov ebp,ecx                   ; MOV(Mov_r32_rm32) [EBP,ECX]                          encoding(2 bytes) = 8b e9
000ch mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000fh mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0012h mov rbx,r9                    ; MOV(Mov_r64_rm64) [RBX,R9]                           encoding(3 bytes) = 49 8b d9
0015h mov rcx,7FFDDB9E4688h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e4688h:imm64]         encoding(10 bytes) = 48 b9 88 46 9e db fd 7f 00 00
001fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E840h:jmp64]                encoding(5 bytes) = e8 1c e8 24 5f
0024h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0027h mov [r14+20h],ebp             ; MOV(Mov_rm32_r32) [mem(32u,R14:br,DS:sr),EBP]        encoding(4 bytes) = 41 89 6e 20
002bh lea rcx,[r14+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 08
002fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D980h:jmp64]                encoding(5 bytes) = e8 49 d9 24 5f
0037h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
003bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D980h:jmp64]                encoding(5 bytes) = e8 3d d9 24 5f
0043h lea rcx,[r14+18h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 18
0047h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D980h:jmp64]                encoding(5 bytes) = e8 31 d9 24 5f
004fh mov rax,r14                   ; MOV(Mov_r64_rm64) [RAX,R14]                          encoding(3 bytes) = 49 8b c6
0052h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0058h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0059h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005ah pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
005ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[93]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x8B,0xE9,0x48,0x8B,0xF2,0x49,0x8B,0xF8,0x49,0x8B,0xD9,0x48,0xB9,0x88,0x46,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0xE8,0x24,0x5F,0x4C,0x8B,0xF0,0x41,0x89,0x6E,0x20,0x49,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x49,0xD9,0x24,0x5F,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD7,0xE8,0x3D,0xD9,0x24,0x5F,0x49,0x8D,0x4E,0x18,0x48,0x8B,0xD3,0xE8,0x31,0xD9,0x24,0x5F,0x49,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind:uint get_ComparisonKind()
; location: [7FFDDBA15CF0h, 7FFDDBA15CF8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 20
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x20,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Lhs()
; location: [7FFDDBA15D10h, 7FFDDBA15D19h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_LhsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Rhs()
; location: [7FFDDBA15D30h, 7FFDDBA15D39h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_RhsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicVariable[] get_Vars()
; location: [7FFDDBA15D50h, 7FFDDBA15D59h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+18h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 18
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VarsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x18,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(ILogicExpr[] values)
; location: [7FFDDBA15D70h, 7FFDDBA15E2Fh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0010h mov rdi,rcx                   ; MOV(Mov_r64_rm64) [RDI,RCX]                          encoding(3 bytes) = 48 8b f9
0013h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
0016h mov rbx,[rdi+18h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 5f 18
001ah mov ebp,[rbx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RBX:br,DS:sr)]        encoding(3 bytes) = 8b 6b 08
001dh mov r14d,[rsi+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RSI:br,DS:sr)]       encoding(4 bytes) = 44 8b 76 08
0021h mov r15d,r14d                 ; MOV(Mov_r32_rm32) [R15D,R14D]                        encoding(3 bytes) = 45 8b fe
0024h cmp ebp,r15d                  ; CMP(Cmp_r32_rm32) [EBP,R15D]                         encoding(3 bytes) = 41 3b ef
0027h jle short 002bh               ; JLE(Jle_rel8_64) [2Bh:jmp64]                         encoding(2 bytes) = 7e 02
0029h jmp short 002eh               ; JMP(Jmp_rel8_64) [2Eh:jmp64]                         encoding(2 bytes) = eb 03
002bh mov r15d,ebp                  ; MOV(Mov_r32_rm32) [R15D,EBP]                         encoding(3 bytes) = 44 8b fd
002eh xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
0030h test r15d,r15d                ; TEST(Test_rm32_r32) [R15D,R15D]                      encoding(3 bytes) = 45 85 ff
0033h jle short 00a9h               ; JLE(Jle_rel8_64) [A9h:jmp64]                         encoding(2 bytes) = 7e 74
0035h cmp r14d,r15d                 ; CMP(Cmp_r32_rm32) [R14D,R15D]                        encoding(3 bytes) = 45 3b f7
0038h setge dl                      ; SETGE(Setge_rm8) [DL]                                encoding(3 bytes) = 0f 9d c2
003bh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
003eh test r15d,r15d                ; TEST(Test_rm32_r32) [R15D,R15D]                      encoding(3 bytes) = 45 85 ff
0041h setge cl                      ; SETGE(Setge_rm8) [CL]                                encoding(3 bytes) = 0f 9d c1
0044h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0047h test edx,ecx                  ; TEST(Test_rm32_r32) [ECX,EDX]                        encoding(2 bytes) = 85 d1
0049h je short 0078h                ; JE(Je_rel8_64) [78h:jmp64]                           encoding(2 bytes) = 74 2d
004bh mov r12,rbx                   ; MOV(Mov_r64_rm64) [R12,RBX]                          encoding(3 bytes) = 4c 8b e3
004eh cmp ebp,[r12+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R12:br,DS:sr)]        encoding(5 bytes) = 41 3b 6c 24 08
0053h jae short 00bah               ; JAE(Jae_rel8_64) [BAh:jmp64]                         encoding(2 bytes) = 73 65
0055h movsxd rdx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBP]                    encoding(3 bytes) = 48 63 d5
0058h mov r13,[r12+rdx*8+10h]       ; MOV(Mov_r64_rm64) [R13,mem(64u,R12:br,DS:sr)]        encoding(5 bytes) = 4d 8b 6c d4 10
005dh mov rdx,[rsi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d6 10
0062h mov ecx,[r13]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R13:br,DS:sr)]        encoding(4 bytes) = 41 8b 4d 00
0066h lea rcx,[r13+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 10
006ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D880h:jmp64]                encoding(5 bytes) = e8 11 d8 24 5f
006fh inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
0071h cmp ebp,r15d                  ; CMP(Cmp_r32_rm32) [EBP,R15D]                         encoding(3 bytes) = 41 3b ef
0074h jl short 004bh                ; JL(Jl_rel8_64) [4Bh:jmp64]                           encoding(2 bytes) = 7c d5
0076h jmp short 00a9h               ; JMP(Jmp_rel8_64) [A9h:jmp64]                         encoding(2 bytes) = eb 31
0078h mov r12,[rdi+18h]             ; MOV(Mov_r64_rm64) [R12,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 67 18
007ch cmp ebp,[r12+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R12:br,DS:sr)]        encoding(5 bytes) = 41 3b 6c 24 08
0081h jae short 00bah               ; JAE(Jae_rel8_64) [BAh:jmp64]                         encoding(2 bytes) = 73 37
0083h movsxd rdx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBP]                    encoding(3 bytes) = 48 63 d5
0086h mov r13,[r12+rdx*8+10h]       ; MOV(Mov_r64_rm64) [R13,mem(64u,R12:br,DS:sr)]        encoding(5 bytes) = 4d 8b 6c d4 10
008bh cmp ebp,r14d                  ; CMP(Cmp_r32_rm32) [EBP,R14D]                         encoding(3 bytes) = 41 3b ee
008eh jae short 00bah               ; JAE(Jae_rel8_64) [BAh:jmp64]                         encoding(2 bytes) = 73 2a
0090h mov rdx,[rsi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d6 10
0095h mov ecx,[r13]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R13:br,DS:sr)]        encoding(4 bytes) = 41 8b 4d 00
0099h lea rcx,[r13+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R13:br,DS:sr)]       encoding(4 bytes) = 49 8d 4d 10
009dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D880h:jmp64]                encoding(5 bytes) = e8 de d7 24 5f
00a2h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
00a4h cmp ebp,r15d                  ; CMP(Cmp_r32_rm32) [EBP,R15D]                         encoding(3 bytes) = 41 3b ef
00a7h jl short 0078h                ; JL(Jl_rel8_64) [78h:jmp64]                           encoding(2 bytes) = 7c cf
00a9h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00adh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00aeh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00afh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00b0h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00b1h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
00b3h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
00b5h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00b7h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00b9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00bah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F379190h:jmp64]                encoding(5 bytes) = e8 d1 90 37 5f
00bfh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[192]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF9,0x48,0x8B,0xF2,0x48,0x8B,0x5F,0x18,0x8B,0x6B,0x08,0x44,0x8B,0x76,0x08,0x45,0x8B,0xFE,0x41,0x3B,0xEF,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xFD,0x33,0xED,0x45,0x85,0xFF,0x7E,0x74,0x45,0x3B,0xF7,0x0F,0x9D,0xC2,0x0F,0xB6,0xD2,0x45,0x85,0xFF,0x0F,0x9D,0xC1,0x0F,0xB6,0xC9,0x85,0xD1,0x74,0x2D,0x4C,0x8B,0xE3,0x41,0x3B,0x6C,0x24,0x08,0x73,0x65,0x48,0x63,0xD5,0x4D,0x8B,0x6C,0xD4,0x10,0x48,0x8B,0x54,0xD6,0x10,0x41,0x8B,0x4D,0x00,0x49,0x8D,0x4D,0x10,0xE8,0x11,0xD8,0x24,0x5F,0xFF,0xC5,0x41,0x3B,0xEF,0x7C,0xD5,0xEB,0x31,0x4C,0x8B,0x67,0x18,0x41,0x3B,0x6C,0x24,0x08,0x73,0x37,0x48,0x63,0xD5,0x4D,0x8B,0x6C,0xD4,0x10,0x41,0x3B,0xEE,0x73,0x2A,0x48,0x8B,0x54,0xD6,0x10,0x41,0x8B,0x4D,0x00,0x49,0x8D,0x4D,0x10,0xE8,0xDE,0xD7,0x24,0x5F,0xFF,0xC5,0x41,0x3B,0xEF,0x7C,0xCF,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xD1,0x90,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(ILiteralLogicSeq values)
; location: [7FFDDBA15E60h, 7FFDDBA15F03h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000fh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
0012h mov rcx,[rsi+18h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 18
0016h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0019h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
001ch mov r11,7FFDDB000ED0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ed0h:imm64]         encoding(10 bytes) = 49 bb d0 0e 00 db fd 7f 00 00
0026h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0028h call qword ptr [7FFDDB000ED0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 42 b0 5e ff
002eh cmp ebx,eax                   ; CMP(Cmp_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 3b d8
0030h jle short 0036h               ; JLE(Jle_rel8_64) [36h:jmp64]                         encoding(2 bytes) = 7e 04
0032h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
0034h jmp short 0038h               ; JMP(Jmp_rel8_64) [38h:jmp64]                         encoding(2 bytes) = eb 02
0036h mov ebp,ebx                   ; MOV(Mov_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 8b eb
0038h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
003ah test ebp,ebp                  ; TEST(Test_rm32_r32) [EBP,EBP]                        encoding(2 bytes) = 85 ed
003ch jle short 0091h               ; JLE(Jle_rel8_64) [91h:jmp64]                         encoding(2 bytes) = 7e 53
003eh mov rcx,[rsi+18h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 18
0042h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0045h jae short 009eh               ; JAE(Jae_rel8_64) [9Eh:jmp64]                         encoding(2 bytes) = 73 57
0047h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
004ah mov r14,[rcx+rdx*8+10h]       ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 4c 8b 74 d1 10
004fh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0052h mov edx,ebx                   ; MOV(Mov_r32_rm32) [EDX,EBX]                          encoding(2 bytes) = 8b d3
0054h mov r11,7FFDDB000ED8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ed8h:imm64]         encoding(10 bytes) = 49 bb d8 0e 00 db fd 7f 00 00
005eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0060h call qword ptr [7FFDDB000ED8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 12 b0 5e ff
0066h mov r15d,eax                  ; MOV(Mov_r32_rm32) [R15D,EAX]                         encoding(3 bytes) = 44 8b f8
0069h mov ecx,[r14]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R14:br,DS:sr)]        encoding(3 bytes) = 41 8b 0e
006ch mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0076h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E650h:jmp64]                encoding(5 bytes) = e8 d5 e5 24 5f
007bh mov [rax+8],r15d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R15D]       encoding(4 bytes) = 44 89 78 08
007fh lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0083h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0086h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D790h:jmp64]                encoding(5 bytes) = e8 05 d7 24 5f
008bh inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
008dh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
008fh jl short 003eh                ; JL(Jl_rel8_64) [3Eh:jmp64]                           encoding(2 bytes) = 7c ad
0091h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0095h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0096h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0097h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0098h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0099h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
009bh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
009dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
009eh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F3790A0h:jmp64]                encoding(5 bytes) = e8 fd 8f 37 5f
00a3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[164]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x18,0x8B,0x59,0x08,0x48,0x8B,0xCF,0x49,0xBB,0xD0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x42,0xB0,0x5E,0xFF,0x3B,0xD8,0x7E,0x04,0x8B,0xE8,0xEB,0x02,0x8B,0xEB,0x33,0xDB,0x85,0xED,0x7E,0x53,0x48,0x8B,0x4E,0x18,0x3B,0x59,0x08,0x73,0x57,0x48,0x63,0xD3,0x4C,0x8B,0x74,0xD1,0x10,0x48,0x8B,0xCF,0x8B,0xD3,0x49,0xBB,0xD8,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x12,0xB0,0x5E,0xFF,0x44,0x8B,0xF8,0x41,0x8B,0x0E,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD5,0xE5,0x24,0x5F,0x44,0x89,0x78,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x05,0xD7,0x24,0x5F,0xFF,0xC3,0x3B,0xDD,0x7C,0xAD,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xFD,0x8F,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit[] values)
; location: [7FFDDBA15F30h, 7FFDDBA15FB5h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0006h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0007h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0008h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0009h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ah sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000eh mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
0011h mov rdi,[rcx+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 18
0015h mov ebx,[rdi+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RDI:br,DS:sr)]        encoding(3 bytes) = 8b 5f 08
0018h mov ebp,[rsi+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 6e 08
001bh mov r14d,ebp                  ; MOV(Mov_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 8b f5
001eh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0021h jle short 0025h               ; JLE(Jle_rel8_64) [25h:jmp64]                         encoding(2 bytes) = 7e 02
0023h jmp short 0028h               ; JMP(Jmp_rel8_64) [28h:jmp64]                         encoding(2 bytes) = eb 03
0025h mov r14d,ebx                  ; MOV(Mov_r32_rm32) [R14D,EBX]                         encoding(3 bytes) = 44 8b f3
0028h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
002ah test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002dh jle short 0071h               ; JLE(Jle_rel8_64) [71h:jmp64]                         encoding(2 bytes) = 7e 42
002fh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0032h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0035h jae short 0080h               ; JAE(Jae_rel8_64) [80h:jmp64]                         encoding(2 bytes) = 73 49
0037h movsxd rax,ebx                ; MOVSXD(Movsxd_r64_rm32) [RAX,EBX]                    encoding(3 bytes) = 48 63 c3
003ah mov r15,[rcx+rax*8+10h]       ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 4c 8b 7c c1 10
003fh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0041h jae short 0080h               ; JAE(Jae_rel8_64) [80h:jmp64]                         encoding(2 bytes) = 73 3d
0043h mov r12d,[rsi+rax*4+10h]      ; MOV(Mov_r32_rm32) [R12D,mem(32u,RSI:br,DS:sr)]       encoding(5 bytes) = 44 8b 64 86 10
0048h mov ecx,[r15]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R15:br,DS:sr)]        encoding(3 bytes) = 41 8b 0f
004bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0055h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E580h:jmp64]                encoding(5 bytes) = e8 26 e5 24 5f
005ah mov [rax+8],r12d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R12D]       encoding(4 bytes) = 44 89 60 08
005eh lea rcx,[r15+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(4 bytes) = 49 8d 4f 10
0062h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0065h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D6C0h:jmp64]                encoding(5 bytes) = e8 56 d6 24 5f
006ah inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
006ch cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
006fh jl short 002fh                ; JL(Jl_rel8_64) [2Fh:jmp64]                           encoding(2 bytes) = 7c be
0071h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0075h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0076h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0077h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0078h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0079h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
007bh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
007dh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
007fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0080h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378FD0h:jmp64]                encoding(5 bytes) = e8 4b 8f 37 5f
0085h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[134]{0x41,0x57,0x41,0x56,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x48,0x8B,0x79,0x18,0x8B,0x5F,0x08,0x8B,0x6E,0x08,0x44,0x8B,0xF5,0x41,0x3B,0xDE,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xF3,0x33,0xDB,0x45,0x85,0xF6,0x7E,0x42,0x48,0x8B,0xCF,0x3B,0x59,0x08,0x73,0x49,0x48,0x63,0xC3,0x4C,0x8B,0x7C,0xC1,0x10,0x3B,0xDD,0x73,0x3D,0x44,0x8B,0x64,0x86,0x10,0x41,0x8B,0x0F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x26,0xE5,0x24,0x5F,0x44,0x89,0x60,0x08,0x49,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x56,0xD6,0x24,0x5F,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xBE,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x4B,0x8F,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVar(bit a)
; location: [7FFDDBA15FE0h, 7FFDDBA16023h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rcx,[rcx+18h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 18
000ah cmp dword ptr [rcx+8],0       ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 08 00
000eh jbe short 003eh               ; JBE(Jbe_rel8_64) [3Eh:jmp64]                         encoding(2 bytes) = 76 2e
0010h mov rsi,[rcx+10h]             ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 10
0014h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
0016h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0018h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0022h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E4D0h:jmp64]                encoding(5 bytes) = e8 a9 e4 24 5f
0027h mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
002ah lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
002eh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0031h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D610h:jmp64]                encoding(5 bytes) = e8 da d5 24 5f
0036h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0037h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
003ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
003dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
003eh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378F20h:jmp64]                encoding(5 bytes) = e8 dd 8e 37 5f
0043h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarBytes => new byte[68]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0x49,0x18,0x83,0x79,0x08,0x00,0x76,0x2E,0x48,0x8B,0x71,0x10,0x8B,0xFA,0x8B,0x0E,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA9,0xE4,0x24,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0xDA,0xD5,0x24,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3,0xE8,0xDD,0x8E,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit a, bit b)
; location: [7FFDDBA16040h, 7FFDDBA160BFh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov esi,r8d                   ; MOV(Mov_r32_rm32) [ESI,R8D]                          encoding(3 bytes) = 41 8b f0
000dh mov rdi,[rcx+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 18
0011h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
0014h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0017h cmp ebx,0                     ; CMP(Cmp_rm32_imm8) [EBX,0h:imm32]                    encoding(3 bytes) = 83 fb 00
001ah jbe short 007ah               ; JBE(Jbe_rel8_64) [7Ah:jmp64]                         encoding(2 bytes) = 76 5e
001ch mov rbp,[rcx+10h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 69 10
0020h mov r14d,edx                  ; MOV(Mov_r32_rm32) [R14D,EDX]                         encoding(3 bytes) = 44 8b f2
0023h mov ecx,[rbp]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RBP:br,SS:sr)]        encoding(3 bytes) = 8b 4d 00
0026h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0030h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E470h:jmp64]                encoding(5 bytes) = e8 3b e4 24 5f
0035h mov [rax+8],r14d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R14D]       encoding(4 bytes) = 44 89 70 08
0039h lea rcx,[rbp+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 10
003dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0040h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D5B0h:jmp64]                encoding(5 bytes) = e8 6b d5 24 5f
0045h cmp ebx,1                     ; CMP(Cmp_rm32_imm8) [EBX,1h:imm32]                    encoding(3 bytes) = 83 fb 01
0048h jbe short 007ah               ; JBE(Jbe_rel8_64) [7Ah:jmp64]                         encoding(2 bytes) = 76 30
004ah mov rdi,[rdi+18h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 7f 18
004eh mov ecx,[rdi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RDI:br,DS:sr)]        encoding(2 bytes) = 8b 0f
0050h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
005ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E470h:jmp64]                encoding(5 bytes) = e8 11 e4 24 5f
005fh mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0062h lea rcx,[rdi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 10
0066h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0069h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D5B0h:jmp64]                encoding(5 bytes) = e8 42 d5 24 5f
006eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
006fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0073h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0074h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0075h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0076h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0077h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0079h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
007ah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378EC0h:jmp64]                encoding(5 bytes) = e8 41 8e 37 5f
007fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[128]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x41,0x8B,0xF0,0x48,0x8B,0x79,0x18,0x48,0x8B,0xCF,0x8B,0x59,0x08,0x83,0xFB,0x00,0x76,0x5E,0x48,0x8B,0x69,0x10,0x44,0x8B,0xF2,0x8B,0x4D,0x00,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3B,0xE4,0x24,0x5F,0x44,0x89,0x70,0x08,0x48,0x8D,0x4D,0x10,0x48,0x8B,0xD0,0xE8,0x6B,0xD5,0x24,0x5F,0x83,0xFB,0x01,0x76,0x30,0x48,0x8B,0x7F,0x18,0x8B,0x0F,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0xE4,0x24,0x5F,0x89,0x70,0x08,0x48,0x8D,0x4F,0x10,0x48,0x8B,0xD0,0xE8,0x42,0xD5,0x24,0x5F,0x90,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0x41,0x8E,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit a, bit b, bit c)
; location: [7FFDDBA160E0h, 7FFDDBA16197h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov esi,r8d                   ; MOV(Mov_r32_rm32) [ESI,R8D]                          encoding(3 bytes) = 41 8b f0
000fh mov edi,r9d                   ; MOV(Mov_r32_rm32) [EDI,R9D]                          encoding(3 bytes) = 41 8b f9
0012h mov rbx,[rcx+18h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 59 18
0016h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0019h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
001ch cmp ebp,0                     ; CMP(Cmp_rm32_imm8) [EBP,0h:imm32]                    encoding(3 bytes) = 83 fd 00
001fh jbe near ptr 00b2h            ; JBE(Jbe_rel32_64) [B2h:jmp64]                        encoding(6 bytes) = 0f 86 8d 00 00 00
0025h mov r14,[rcx+10h]             ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 4c 8b 71 10
0029h mov r15d,edx                  ; MOV(Mov_r32_rm32) [R15D,EDX]                         encoding(3 bytes) = 44 8b fa
002ch mov ecx,[r14]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R14:br,DS:sr)]        encoding(3 bytes) = 41 8b 0e
002fh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0039h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E3D0h:jmp64]                encoding(5 bytes) = e8 92 e3 24 5f
003eh mov [rax+8],r15d              ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R15D]       encoding(4 bytes) = 44 89 78 08
0042h lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0046h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0049h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D510h:jmp64]                encoding(5 bytes) = e8 c2 d4 24 5f
004eh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0051h cmp ebp,1                     ; CMP(Cmp_rm32_imm8) [EBP,1h:imm32]                    encoding(3 bytes) = 83 fd 01
0054h jbe short 00b2h               ; JBE(Jbe_rel8_64) [B2h:jmp64]                         encoding(2 bytes) = 76 5c
0056h mov r14,[rcx+18h]             ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 4c 8b 71 18
005ah mov ecx,[r14]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,R14:br,DS:sr)]        encoding(3 bytes) = 41 8b 0e
005dh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0067h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E3D0h:jmp64]                encoding(5 bytes) = e8 64 e3 24 5f
006ch mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
006fh lea rcx,[r14+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,R14:br,DS:sr)]       encoding(4 bytes) = 49 8d 4e 10
0073h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0076h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D510h:jmp64]                encoding(5 bytes) = e8 95 d4 24 5f
007bh cmp ebp,2                     ; CMP(Cmp_rm32_imm8) [EBP,2h:imm32]                    encoding(3 bytes) = 83 fd 02
007eh jbe short 00b2h               ; JBE(Jbe_rel8_64) [B2h:jmp64]                         encoding(2 bytes) = 76 32
0080h mov rsi,[rbx+20h]             ; MOV(Mov_r64_rm64) [RSI,mem(64u,RBX:br,DS:sr)]        encoding(4 bytes) = 48 8b 73 20
0084h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0086h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0090h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E3D0h:jmp64]                encoding(5 bytes) = e8 3b e3 24 5f
0095h mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
0098h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
009ch mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
009fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D510h:jmp64]                encoding(5 bytes) = e8 6c d4 24 5f
00a4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a5h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00a9h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00aah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00abh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00ach pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00adh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00afh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00b1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00b2h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378E20h:jmp64]                encoding(5 bytes) = e8 69 8d 37 5f
00b7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[184]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x41,0x8B,0xF0,0x41,0x8B,0xF9,0x48,0x8B,0x59,0x18,0x48,0x8B,0xCB,0x8B,0x69,0x08,0x83,0xFD,0x00,0x0F,0x86,0x8D,0x00,0x00,0x00,0x4C,0x8B,0x71,0x10,0x44,0x8B,0xFA,0x41,0x8B,0x0E,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x92,0xE3,0x24,0x5F,0x44,0x89,0x78,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0xC2,0xD4,0x24,0x5F,0x48,0x8B,0xCB,0x83,0xFD,0x01,0x76,0x5C,0x4C,0x8B,0x71,0x18,0x41,0x8B,0x0E,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xE3,0x24,0x5F,0x89,0x70,0x08,0x49,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x95,0xD4,0x24,0x5F,0x83,0xFD,0x02,0x76,0x32,0x48,0x8B,0x73,0x20,0x8B,0x0E,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3B,0xE3,0x24,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x6C,0xD4,0x24,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x69,0x8D,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA161C0h, 7FFDDBA16220h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
000eh mov r11,7FFDDB000EE0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ee0h:imm64]         encoding(10 bytes) = 49 bb e0 0e 00 db fd 7f 00 00
0018h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
001ah call qword ptr [7FFDDB000EE0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 00 ad 5e ff
0020h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0023h mov rcx,1E1F7836920h          ; MOV(Mov_r64_imm64) [RCX,1e1f7836920h:imm64]          encoding(10 bytes) = 48 b9 20 69 83 f7 e1 01 00 00
002dh mov rbx,[rcx]                 ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 19
0030h mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0034h mov r11,7FFDDB000EE8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ee8h:imm64]         encoding(10 bytes) = 49 bb e8 0e 00 db fd 7f 00 00
003eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0040h call qword ptr [7FFDDB000EE8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 e2 ac 5e ff
0046h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0049h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ch mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
004fh mov rax,7FFE39224DE0h         ; MOV(Mov_r64_imm64) [RAX,7ffe39224de0h:imm64]         encoding(10 bytes) = 48 b8 e0 4d 22 39 fe 7f 00 00
0059h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
005dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
005eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0060h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[99]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0x4E,0x08,0x49,0xBB,0xE0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x00,0xAD,0x5E,0xFF,0x48,0x8B,0xF8,0x48,0xB9,0x20,0x69,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x19,0x48,0x8B,0x4E,0x10,0x49,0xBB,0xE8,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xE2,0xAC,0x5E,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xD3,0x48,0x8B,0xCF,0x48,0xB8,0xE0,0x4D,0x22,0x39,0xFE,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:546
; function: ILogicExpr get_LeftArg()
; location: [7FFDDBA16240h, 7FFDDBA16249h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_LeftArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_RightArg()
; location: [7FFDDBA16260h, 7FFDDBA16269h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_RightArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOpKind:uint get_OpKind()
; location: [7FFDDBA16280h, 7FFDDBA16288h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+18h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 18
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpKindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x18,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA162A0h, 7FFDDBA1634Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000eh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0013h mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0018h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
001dh mov esi,[rcx+18h]             ; MOV(Mov_r32_rm32) [ESI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 71 18
0020h mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0024h mov rbx,[rcx+10h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 59 10
0028h mov rcx,7FFDDB9C7220h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7220h:imm64]         encoding(10 bytes) = 48 b9 20 72 9c db fd 7f 00 00
0032h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E210h:jmp64]                encoding(5 bytes) = e8 d9 e1 24 5f
0037h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
003ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003dh call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80E780h:jmp64]                encoding(5 bytes) = e8 3e e7 80 5d
0042h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0045h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0047h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FEF30h:jmp64]                encoding(5 bytes) = e8 e4 ee 7f 5d
004ch mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
004fh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0052h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0056h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0059h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
005ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005fh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0062h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0066h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0069h mov r8,1E1F7821398h           ; MOV(Mov_r64_imm64) [R8,1e1f7821398h:imm64]           encoding(10 bytes) = 49 b8 98 13 82 f7 e1 01 00 00
0073h mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
0076h mov rdx,1E1F7836998h          ; MOV(Mov_r64_imm64) [RDX,1e1f7836998h:imm64]          encoding(10 bytes) = 48 ba 98 69 83 f7 e1 01 00 00
0080h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0083h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0088h mov [rcx],rax                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RAX]        encoding(3 bytes) = 48 89 01
008bh mov [rcx+8],rdi               ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDI]        encoding(4 bytes) = 48 89 79 08
008fh mov [rcx+10h],rbx             ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RBX]        encoding(4 bytes) = 48 89 59 10
0093h mov [rcx+18h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 41 18
0097h lea r8,[rsp+20h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 20
009ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
009eh call 7FFE39225AE0h            ; CALL(Call_rel32_64) [5D80F840h:jmp64]                encoding(5 bytes) = e8 9d f7 80 5d
00a3h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a4h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
00a8h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a9h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00aah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00abh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[172]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x8B,0x71,0x18,0x48,0x8B,0x79,0x08,0x48,0x8B,0x59,0x10,0x48,0xB9,0x20,0x72,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD9,0xE1,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x3E,0xE7,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0xE4,0xEE,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x49,0xB8,0x98,0x13,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4D,0x8B,0x00,0x48,0xBA,0x98,0x69,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8D,0x4C,0x24,0x20,0x48,0x89,0x01,0x48,0x89,0x79,0x08,0x48,0x89,0x59,0x10,0x4C,0x89,0x41,0x18,0x4C,0x8D,0x44,0x24,0x20,0x33,0xC9,0xE8,0x9D,0xF7,0x80,0x5D,0x90,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDBA16370h, 7FFDDBA1637Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDBA162A0h         ; MOV(Mov_r64_imm64) [RAX,7ffddba162a0h:imm64]         encoding(10 bytes) = 48 b8 a0 62 a1 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0xA0,0x62,0xA1,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:582
; function: bit op_Implicit(LiteralLogicExpr src)
; location: [7FFDDBA163A0h, 7FFDDBA163A8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> op_ImplicitBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicExpr op_Implicit(bit src)
; location: [7FFDDBA163C0h, 7FFDDBA163DEh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24E0F0h:jmp64]                encoding(5 bytes) = e8 da e0 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
001dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
001eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> op_ImplicitBytes => new byte[31]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0xE0,0x24,0x5F,0x89,0x70,0x08,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicExprKind:uint get_ExprKind()
; location: [7FFDDBA16400h, 7FFDDBA1640Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,8                     ; MOV(Mov_r32_imm32) [EAX,8h:imm32]                    encoding(5 bytes) = b8 08 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ExprKindBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x08,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_Value()
; location: [7FFDDBA16420h, 7FFDDBA16428h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ValueBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA16440h, 7FFDDBA16451h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0007h mov rax,7FFDDB82EF90h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82ef90h:imm64]         encoding(10 bytes) = 48 b8 90 ef 82 db fd 7f 00 00
0011h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD2,0x48,0xB8,0x90,0xEF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(bool digit)
; location: [7FFDDBA16470h, 7FFDDBA164D6h]
0000h sub rsp,38h                   ; SUB(Sub_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 ec 38
0004h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0006h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000bh mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0010h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0012h jne short 0040h               ; JNE(Jne_rel8_64) [40h:jmp64]                         encoding(2 bytes) = 75 2c
0014h mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
0017h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
001ah je short 002eh                ; JE(Je_rel8_64) [2Eh:jmp64]                           encoding(2 bytes) = 74 12
001ch mov rax,1E1F78369D0h          ; MOV(Mov_r64_imm64) [RAX,1e1f78369d0h:imm64]          encoding(10 bytes) = 48 b8 d0 69 83 f7 e1 01 00 00
0026h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0029h add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
002eh mov rax,1E1F78369D8h          ; MOV(Mov_r64_imm64) [RAX,1e1f78369d8h:imm64]          encoding(10 bytes) = 48 b8 d8 69 83 f7 e1 01 00 00
0038h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
003bh add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
003fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0040h mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
0043h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0045h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0048h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
004dh mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
0050h mov [rax+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 40 08
0054h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0059h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
005ch call 7FFE3922D070h            ; CALL(Call_rel32_64) [5D816C00h:jmp64]                encoding(5 bytes) = e8 9f 6b 81 5d
0061h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0062h add rsp,38h                   ; ADD(Add_rm64_imm8) [RSP,38h:imm64]                   encoding(4 bytes) = 48 83 c4 38
0066h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[103]{0x48,0x83,0xEC,0x38,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x84,0xD2,0x75,0x2C,0x8B,0x41,0x08,0x83,0xF8,0x01,0x74,0x12,0x48,0xB8,0xD0,0x69,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x38,0xC3,0x48,0xB8,0xD8,0x69,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x48,0x83,0xC4,0x38,0xC3,0x8B,0x49,0x08,0x33,0xD2,0x45,0x33,0xC0,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x10,0x44,0x89,0x40,0x08,0x48,0x8D,0x54,0x24,0x28,0x45,0x33,0xC0,0xE8,0x9F,0x6B,0x81,0x5D,0x90,0x48,0x83,0xC4,0x38,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDBA164F0h, 7FFDDBA16501h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0007h mov rax,7FFDDBA16470h         ; MOV(Mov_r64_imm64) [RAX,7ffddba16470h:imm64]         encoding(10 bytes) = 48 b8 70 64 a1 db fd 7f 00 00
0011h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD2,0x48,0xB8,0x70,0x64,0xA1,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:633
; function: LiteralLogicSeq FromBitString(BitString bs)
; location: [7FFDDBA16520h, 7FFDDBA165BCh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
0010h movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
0013h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24E0C0h:jmp64]                encoding(5 bytes) = e8 9e e0 24 5f
0022h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0025h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
0027h mov r14d,[rbx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RBX:br,DS:sr)]       encoding(4 bytes) = 44 8b 73 08
002bh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002eh jle short 006bh               ; JLE(Jle_rel8_64) [6Bh:jmp64]                         encoding(2 bytes) = 7e 3b
0030h cmp ebp,edi                   ; CMP(Cmp_r32_rm32) [EBP,EDI]                          encoding(2 bytes) = 3b ef
0032h jae short 0097h               ; JAE(Jae_rel8_64) [97h:jmp64]                         encoding(2 bytes) = 73 63
0034h movsxd rax,ebp                ; MOVSXD(Movsxd_r64_rm32) [RAX,EBP]                    encoding(3 bytes) = 48 63 c5
0037h cmp byte ptr [rsi+rax+10h],1  ; CMP(Cmp_rm8_imm8) [mem(8u,RSI:br,DS:sr),1h:imm8]     encoding(5 bytes) = 80 7c 06 10 01
003ch sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
003fh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0042h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0044h mov [rsp+28h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 28
0048h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004dh test edx,edx                  ; TEST(Test_rm32_r32) [EDX,EDX]                        encoding(2 bytes) = 85 d2
004fh jne short 0055h               ; JNE(Jne_rel8_64) [55h:jmp64]                         encoding(2 bytes) = 75 04
0051h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0053h jmp short 005ah               ; JMP(Jmp_rel8_64) [5Ah:jmp64]                         encoding(2 bytes) = eb 05
0055h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
005ah mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
005ch mov edx,[rsp+28h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 28
0060h mov [rbx+rax*4+10h],edx       ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(4 bytes) = 89 54 83 10
0064h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
0066h cmp r14d,ebp                  ; CMP(Cmp_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 3b f5
0069h jg short 0030h                ; JG(Jg_rel8_64) [30h:jmp64]                           encoding(2 bytes) = 7f c5
006bh mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0075h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24DF90h:jmp64]                encoding(5 bytes) = e8 16 df 24 5f
007ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
007dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0081h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0084h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D0D0h:jmp64]                encoding(5 bytes) = e8 47 d0 24 5f
0089h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
008ch add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
0090h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0091h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0092h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0093h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0094h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0096h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0097h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F3789E0h:jmp64]                encoding(5 bytes) = e8 44 89 37 5f
009ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FromBitStringBytes => new byte[157]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x30,0x48,0x8B,0xF1,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9E,0xE0,0x24,0x5F,0x48,0x8B,0xD8,0x33,0xED,0x44,0x8B,0x73,0x08,0x45,0x85,0xF6,0x7E,0x3B,0x3B,0xEF,0x73,0x63,0x48,0x63,0xC5,0x80,0x7C,0x06,0x10,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC9,0x89,0x4C,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x85,0xD2,0x75,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x89,0x11,0x8B,0x54,0x24,0x28,0x89,0x54,0x83,0x10,0xFF,0xC5,0x44,0x3B,0xF5,0x7F,0xC5,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x16,0xDF,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD3,0xE8,0x47,0xD0,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x30,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0x44,0x89,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq FromBits(bit[] src)
; location: [7FFDDBA165E0h, 7FFDDBA16610h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24DED0h:jmp64]                encoding(5 bytes) = e8 b8 de 24 5f
0018h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
001fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0022h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24D010h:jmp64]                encoding(5 bytes) = e8 e9 cf 24 5f
0027h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
002fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FromBitsBytes => new byte[49]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB8,0xDE,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD6,0xE8,0xE9,0xCF,0x24,0x5F,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicExprKind:uint get_ExprKind()
; location: [7FFDDBA16630h, 7FFDDBA1663Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,8                     ; MOV(Mov_r32_imm32) [EAX,8h:imm32]                    encoding(5 bytes) = b8 08 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ExprKindBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x08,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit[] get_Terms()
; location: [7FFDDBA16650h, 7FFDDBA16659h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TermsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_Item(int index)
; location: [7FFDDBA16670h, 7FFDDBA1668Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h cmp edx,[rax+8]               ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 3b 50 08
000ch jae short 001ah               ; JAE(Jae_rel8_64) [1Ah:jmp64]                         encoding(2 bytes) = 73 0c
000eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0011h mov eax,[rax+rdx*4+10h]       ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(4 bytes) = 8b 44 90 10
0015h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
001ah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378890h:jmp64]                encoding(5 bytes) = e8 71 88 37 5f
001fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> get_ItemBytes => new byte[32]{0x48,0x83,0xEC,0x28,0x90,0x48,0x8B,0x41,0x08,0x3B,0x50,0x08,0x73,0x0C,0x48,0x63,0xD2,0x8B,0x44,0x90,0x10,0x48,0x83,0xC4,0x28,0xC3,0xE8,0x71,0x88,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Item(int index, bit value)
; location: [7FFDDBA166B0h, 7FFDDBA166D0h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h cmp edx,[rax+8]               ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 3b 50 08
000ch jae short 001bh               ; JAE(Jae_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = 73 0d
000eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0011h mov [rax+rdx*4+10h],r8d       ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(5 bytes) = 44 89 44 90 10
0016h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
001ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
001bh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378850h:jmp64]                encoding(5 bytes) = e8 30 88 37 5f
0020h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> set_ItemBytes => new byte[33]{0x48,0x83,0xEC,0x28,0x90,0x48,0x8B,0x41,0x08,0x3B,0x50,0x08,0x73,0x0D,0x48,0x63,0xD2,0x44,0x89,0x44,0x90,0x10,0x48,0x83,0xC4,0x28,0xC3,0xE8,0x30,0x88,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: int get_Length()
; location: [7FFDDBA166F0h, 7FFDDBA166FCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_LengthBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0x8B,0x40,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitString ToBitString()
; location: [7FFDDBA16710h, 7FFDDBA1675Fh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
000ah mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
000dh movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
0010h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
001ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24DED0h:jmp64]                encoding(5 bytes) = e8 b1 de 24 5f
001fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0021h test edi,edi                  ; TEST(Test_rm32_r32) [EDI,EDI]                        encoding(2 bytes) = 85 ff
0023h jle short 0043h               ; JLE(Jle_rel8_64) [43h:jmp64]                         encoding(2 bytes) = 7e 1e
0025h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0028h movsxd r8,edx                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDX]                     encoding(3 bytes) = 4c 63 c2
002bh mov r9d,[rsi+r8*4+10h]        ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSI:br,DS:sr)]        encoding(5 bytes) = 46 8b 4c 86 10
0030h movzx r9d,r9b                 ; MOVZX(Movzx_r32_rm8) [R9D,R9L]                       encoding(4 bytes) = 45 0f b6 c9
0034h cmp edx,ecx                   ; CMP(Cmp_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 3b d1
0036h jae short 004ah               ; JAE(Jae_rel8_64) [4Ah:jmp64]                         encoding(2 bytes) = 73 12
0038h mov [rax+r8+10h],r9b          ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R9L]           encoding(5 bytes) = 46 88 4c 00 10
003dh inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
003fh cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
0041h jg short 0028h                ; JG(Jg_rel8_64) [28h:jmp64]                           encoding(2 bytes) = 7f e5
0043h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0047h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0048h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0049h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
004ah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F3787F0h:jmp64]                encoding(5 bytes) = e8 a1 87 37 5f
004fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> ToBitStringBytes => new byte[80]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0x71,0x08,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB1,0xDE,0x24,0x5F,0x33,0xD2,0x85,0xFF,0x7E,0x1E,0x8B,0x48,0x08,0x4C,0x63,0xC2,0x46,0x8B,0x4C,0x86,0x10,0x45,0x0F,0xB6,0xC9,0x3B,0xD1,0x73,0x12,0x46,0x88,0x4C,0x00,0x10,0xFF,0xC2,0x3B,0xFA,0x7F,0xE5,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3,0xE8,0xA1,0x87,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA16780h, 7FFDDBA1681Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
000eh mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0012h mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
0015h movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
0018h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0022h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24DE60h:jmp64]                encoding(5 bytes) = e8 39 de 24 5f
0027h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0029h test edi,edi                  ; TEST(Test_rm32_r32) [EDI,EDI]                        encoding(2 bytes) = 85 ff
002bh jle short 004bh               ; JLE(Jle_rel8_64) [4Bh:jmp64]                         encoding(2 bytes) = 7e 1e
002dh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0030h movsxd rcx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBX]                    encoding(3 bytes) = 48 63 cb
0033h mov r8d,[rsi+rcx*4+10h]       ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSI:br,DS:sr)]        encoding(5 bytes) = 44 8b 44 8e 10
0038h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
003ch cmp ebx,edx                   ; CMP(Cmp_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 3b da
003eh jae short 0096h               ; JAE(Jae_rel8_64) [96h:jmp64]                         encoding(2 bytes) = 73 56
0040h mov [rax+rcx+10h],r8b         ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(5 bytes) = 44 88 44 08 10
0045h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0047h cmp edi,ebx                   ; CMP(Cmp_r32_rm32) [EDI,EBX]                          encoding(2 bytes) = 3b fb
0049h jg short 0030h                ; JG(Jg_rel8_64) [30h:jmp64]                           encoding(2 bytes) = 7f e5
004bh mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0050h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0052h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0055h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0057h lea r8,[rsp+38h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 38
005ch lea rax,[rsp+30h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 30
0061h mov [rax],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 08
0064h mov [rax+4],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 04
0067h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
006ch mov [rcx],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RCX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 09
006fh mov [rcx+2],dx                ; MOV(Mov_rm16_r16) [mem(16u,RCX:br,DS:sr),DX]         encoding(4 bytes) = 66 89 51 02
0073h mov rcx,r8                    ; MOV(Mov_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 8b c8
0076h mov r9,[rsp+30h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 30
007bh mov edx,[rsp+28h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 28
007fh mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
0083h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0085h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0088h call 7FFDDB81CF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFE067E0h:jmp64]        encoding(5 bytes) = e8 53 67 e0 ff
008dh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
008eh add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0092h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0093h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0094h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0095h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0096h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378780h:jmp64]                encoding(5 bytes) = e8 e5 86 37 5f
009bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FormatBytes => new byte[156]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x38,0x48,0x8B,0x71,0x08,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x39,0xDE,0x24,0x5F,0x33,0xDB,0x85,0xFF,0x7E,0x1E,0x8B,0x50,0x08,0x48,0x63,0xCB,0x44,0x8B,0x44,0x8E,0x10,0x45,0x0F,0xB6,0xC0,0x3B,0xDA,0x73,0x56,0x44,0x88,0x44,0x08,0x10,0xFF,0xC3,0x3B,0xFB,0x7F,0xE5,0x48,0x89,0x44,0x24,0x38,0x33,0xC9,0x45,0x33,0xC9,0x33,0xD2,0x4C,0x8D,0x44,0x24,0x38,0x48,0x8D,0x44,0x24,0x30,0x44,0x88,0x08,0x89,0x48,0x04,0x48,0x8D,0x4C,0x24,0x28,0x44,0x88,0x09,0x66,0x89,0x51,0x02,0x49,0x8B,0xC8,0x4C,0x8B,0x4C,0x24,0x30,0x8B,0x54,0x24,0x28,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x53,0x67,0xE0,0xFF,0x90,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3,0xE8,0xE5,0x86,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDBA16840h, 7FFDDBA168E2h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0009h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
000eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0010h mov [rsp+38h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 38
0015h mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0019h mov edi,[rsi+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 7e 08
001ch movsxd rdx,edi                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDI]                    encoding(3 bytes) = 48 63 d7
001fh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0029h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24DDA0h:jmp64]                encoding(5 bytes) = e8 72 dd 24 5f
002eh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0030h test edi,edi                  ; TEST(Test_rm32_r32) [EDI,EDI]                        encoding(2 bytes) = 85 ff
0032h jle short 0052h               ; JLE(Jle_rel8_64) [52h:jmp64]                         encoding(2 bytes) = 7e 1e
0034h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0037h movsxd rcx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBX]                    encoding(3 bytes) = 48 63 cb
003ah mov r8d,[rsi+rcx*4+10h]       ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSI:br,DS:sr)]        encoding(5 bytes) = 44 8b 44 8e 10
003fh movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
0043h cmp ebx,edx                   ; CMP(Cmp_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 3b da
0045h jae short 009dh               ; JAE(Jae_rel8_64) [9Dh:jmp64]                         encoding(2 bytes) = 73 56
0047h mov [rax+rcx+10h],r8b         ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(5 bytes) = 44 88 44 08 10
004ch inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
004eh cmp edi,ebx                   ; CMP(Cmp_r32_rm32) [EDI,EBX]                          encoding(2 bytes) = 3b fb
0050h jg short 0037h                ; JG(Jg_rel8_64) [37h:jmp64]                           encoding(2 bytes) = 7f e5
0052h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0057h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0059h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
005ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
005eh lea r8,[rsp+38h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 38
0063h lea rax,[rsp+30h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 30
0068h mov [rax],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 08
006bh mov [rax+4],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 04
006eh lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
0073h mov [rcx],r9b                 ; MOV(Mov_rm8_r8) [mem(8u,RCX:br,DS:sr),R9L]           encoding(3 bytes) = 44 88 09
0076h mov [rcx+2],dx                ; MOV(Mov_rm16_r16) [mem(16u,RCX:br,DS:sr),DX]         encoding(4 bytes) = 66 89 51 02
007ah mov rcx,r8                    ; MOV(Mov_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 8b c8
007dh mov r9,[rsp+30h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 30
0082h mov edx,[rsp+28h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 28
0086h mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
008ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
008ch xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
008fh call 7FFDDB81CF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFE06720h:jmp64]        encoding(5 bytes) = e8 8c 66 e0 ff
0094h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0095h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0099h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
009ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
009bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
009ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
009dh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F3786C0h:jmp64]                encoding(5 bytes) = e8 1e 86 37 5f
00a2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> ToStringBytes => new byte[163]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x38,0x33,0xD2,0x48,0x89,0x54,0x24,0x38,0x48,0x8B,0x71,0x08,0x8B,0x7E,0x08,0x48,0x63,0xD7,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x72,0xDD,0x24,0x5F,0x33,0xDB,0x85,0xFF,0x7E,0x1E,0x8B,0x50,0x08,0x48,0x63,0xCB,0x44,0x8B,0x44,0x8E,0x10,0x45,0x0F,0xB6,0xC0,0x3B,0xDA,0x73,0x56,0x44,0x88,0x44,0x08,0x10,0xFF,0xC3,0x3B,0xFB,0x7F,0xE5,0x48,0x89,0x44,0x24,0x38,0x33,0xC9,0x45,0x33,0xC9,0x33,0xD2,0x4C,0x8D,0x44,0x24,0x38,0x48,0x8D,0x44,0x24,0x30,0x44,0x88,0x08,0x89,0x48,0x04,0x48,0x8D,0x4C,0x24,0x28,0x44,0x88,0x09,0x66,0x89,0x51,0x02,0x49,0x8B,0xC8,0x4C,0x8B,0x4C,0x24,0x30,0x8B,0x54,0x24,0x28,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x8C,0x66,0xE0,0xFF,0x90,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3,0xE8,0x1E,0x86,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:665
; function: string get_Name()
; location: [7FFDDBA16900h, 7FFDDBA16909h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_NameBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_Value()
; location: [7FFDDBA16920h, 7FFDDBA16929h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ValueBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Value(ILogicExpr value)
; location: [7FFDDBA16940h, 7FFDDBA1694Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h lea rcx,[rcx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 49 10
0009h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24CCB0h:jmp64]                encoding(5 bytes) = e8 a2 cc 24 5f
000eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_ValueBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8D,0x49,0x10,0xE8,0xA2,0xCC,0x24,0x5F,0x90,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Set(ILogicExpr value)
; location: [7FFDDBA16960h, 7FFDDBA1696Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h lea rcx,[rcx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 49 10
0009h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24CC90h:jmp64]                encoding(5 bytes) = e8 82 cc 24 5f
000eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8D,0x49,0x10,0xE8,0x82,0xCC,0x24,0x5F,0x90,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Set(bit value)
; location: [7FFDDBA16980h, 7FFDDBA169B0h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0009h mov edi,edx                   ; MOV(Mov_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 8b fa
000bh mov rcx,7FFDDB9E5838h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e5838h:imm64]         encoding(10 bytes) = 48 b9 38 58 9e db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24DB30h:jmp64]                encoding(5 bytes) = e8 16 db 24 5f
001ah mov [rax+8],edi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 08
001dh lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
0021h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0024h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24CC70h:jmp64]                encoding(5 bytes) = e8 47 cc 24 5f
0029h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
002ah add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
002fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetBytes => new byte[49]{0x57,0x56,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x8B,0xFA,0x48,0xB9,0x38,0x58,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x16,0xDB,0x24,0x5F,0x89,0x78,0x08,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0x47,0xCC,0x24,0x5F,0x90,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Set(IExpr value)
; location: [7FFDDBA169D0h, 7FFDDBA169F9h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0008h mov rcx,7FFDDB9CAEA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9caea8h:imm64]         encoding(10 bytes) = 48 b9 a8 ae 9c db fd 7f 00 00
0012h call 7FFE3AC63550h            ; CALL(Call_rel32_64) [5F24CB80h:jmp64]                encoding(5 bytes) = e8 69 cb 24 5f
0017h lea rcx,[rsi+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 10
001bh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
001eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24CC20h:jmp64]                encoding(5 bytes) = e8 fd cb 24 5f
0023h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0024h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0028h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetBytes => new byte[42]{0x56,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0xB9,0xA8,0xAE,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x69,0xCB,0x24,0x5F,0x48,0x8D,0x4E,0x10,0x48,0x8B,0xD0,0xE8,0xFD,0xCB,0x24,0x5F,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA16A10h, 7FFDDBA16A30h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0009h mov rdx,1E1F7823060h          ; MOV(Mov_r64_imm64) [RDX,1e1f7823060h:imm64]          encoding(10 bytes) = 48 ba 60 30 82 f7 e1 01 00 00
0013h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0016h mov rax,7FFE39219580h         ; MOV(Mov_r64_imm64) [RAX,7ffe39219580h:imm64]         encoding(10 bytes) = 48 b8 80 95 21 39 fe 7f 00 00
0020h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[35]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x49,0x08,0x48,0xBA,0x60,0x30,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0xB8,0x80,0x95,0x21,0x39,0xFE,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(bool expand)
; location: [7FFDDBA16A50h, 7FFDDBA16AD6h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000ch mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0011h mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0016h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
001bh mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
001fh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0021h jne short 0032h               ; JNE(Jne_rel8_64) [32h:jmp64]                         encoding(2 bytes) = 75 0f
0023h mov rcx,1E1F7823060h          ; MOV(Mov_r64_imm64) [RCX,1e1f7823060h:imm64]          encoding(10 bytes) = 48 b9 60 30 82 f7 e1 01 00 00
002dh mov rdx,[rcx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 11
0030h jmp short 0078h               ; JMP(Jmp_rel8_64) [78h:jmp64]                         encoding(2 bytes) = eb 46
0032h mov r8,[rcx+10h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(4 bytes) = 4c 8b 41 10
0036h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0038h mov rcx,1E1F7821388h          ; MOV(Mov_r64_imm64) [RCX,1e1f7821388h:imm64]          encoding(10 bytes) = 48 b9 88 13 82 f7 e1 01 00 00
0042h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0045h mov rax,1E1F7836A80h          ; MOV(Mov_r64_imm64) [RAX,1e1f7836a80h:imm64]          encoding(10 bytes) = 48 b8 80 6a 83 f7 e1 01 00 00
004fh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0052h lea r9,[rsp+20h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 4c 24 20
0057h mov [r9],r8                   ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),R8]          encoding(3 bytes) = 4d 89 01
005ah mov [r9+8],rdx                ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDX]         encoding(4 bytes) = 49 89 51 08
005eh mov [r9+10h],rdx              ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDX]         encoding(4 bytes) = 49 89 51 10
0062h mov [r9+18h],rcx              ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RCX]         encoding(4 bytes) = 49 89 49 18
0066h lea r8,[rsp+20h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 20
006bh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
006eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0070h call 7FFE39225AE0h            ; CALL(Call_rel32_64) [5D80F090h:jmp64]                encoding(5 bytes) = e8 1b f0 80 5d
0075h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0078h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
007bh call 7FFE39219580h            ; CALL(Call_rel32_64) [5D802B30h:jmp64]                encoding(5 bytes) = e8 b0 2a 80 5d
0080h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0081h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0085h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0086h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[135]{0x56,0x48,0x83,0xEC,0x40,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x8B,0x71,0x08,0x84,0xD2,0x75,0x0F,0x48,0xB9,0x60,0x30,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x11,0xEB,0x46,0x4C,0x8B,0x41,0x10,0x33,0xD2,0x48,0xB9,0x88,0x13,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0xB8,0x80,0x6A,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0x4C,0x8D,0x4C,0x24,0x20,0x4D,0x89,0x01,0x49,0x89,0x51,0x08,0x49,0x89,0x51,0x10,0x49,0x89,0x49,0x18,0x4C,0x8D,0x44,0x24,0x20,0x48,0x8B,0xD0,0x33,0xC9,0xE8,0x1B,0xF0,0x80,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0xE8,0xB0,0x2A,0x80,0x5D,0x90,0x48,0x83,0xC4,0x40,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDBA16AF0h, 7FFDDBA16B10h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0009h mov rdx,1E1F7823060h          ; MOV(Mov_r64_imm64) [RDX,1e1f7823060h:imm64]          encoding(10 bytes) = 48 ba 60 30 82 f7 e1 01 00 00
0013h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0016h mov rax,7FFE39219580h         ; MOV(Mov_r64_imm64) [RAX,7ffe39219580h:imm64]         encoding(10 bytes) = 48 b8 80 95 21 39 fe 7f 00 00
0020h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[35]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x49,0x08,0x48,0xBA,0x60,0x30,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0xB8,0x80,0x95,0x21,0x39,0xFE,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:696
; function: ILogicExpr get_FirstArg()
; location: [7FFDDBA16B30h, 7FFDDBA16B39h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_FirstArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_SecondArg()
; location: [7FFDDBA16B50h, 7FFDDBA16B59h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_SecondArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_ThirdArg()
; location: [7FFDDBA16B70h, 7FFDDBA16B79h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+18h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 18
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ThirdArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x18,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOpKind:byte get_OpKind()
; location: [7FFDDBA16B90h, 7FFDDBA16B99h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx+20h]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 41 20
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpKindBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x41,0x20,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA16BB0h, 7FFDDBA16C5Eh]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah movzx esi,byte ptr [rcx+20h]  ; MOVZX(Movzx_r32_rm8) [ESI,mem(8u,RCX:br,DS:sr)]      encoding(5 bytes) = 40 0f b6 71 20
000fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0013h mov rbx,[rcx+10h]             ; MOV(Mov_r64_rm64) [RBX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 59 10
0017h mov rbp,[rcx+18h]             ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 69 18
001bh mov rcx,7FFDDB0F52C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0f52c0h:imm64]         encoding(10 bytes) = 48 b9 c0 52 0f db fd 7f 00 00
0025h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
002ah call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24DA90h:jmp64]                encoding(5 bytes) = e8 61 da 24 5f
002fh mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
0032h movzx esi,sil                 ; MOVZX(Movzx_r32_rm8) [ESI,SIL]                       encoding(4 bytes) = 40 0f b6 f6
0036h mov rcx,7FFDDB9C7D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7d70h:imm64]         encoding(10 bytes) = 48 b9 70 7d 9c db fd 7f 00 00
0040h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D900h:jmp64]                encoding(5 bytes) = e8 bb d8 24 5f
0045h mov [rax+8],sil               ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),SIL]           encoding(4 bytes) = 40 88 70 08
0049h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
004ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80DE70h:jmp64]                encoding(5 bytes) = e8 1f de 80 5d
0051h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
0054h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0057h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0059h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24CB60h:jmp64]                encoding(5 bytes) = e8 02 cb 24 5f
005eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0061h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0064h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0069h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24CB60h:jmp64]                encoding(5 bytes) = e8 f2 ca 24 5f
006eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0071h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
0074h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0079h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24CB60h:jmp64]                encoding(5 bytes) = e8 e2 ca 24 5f
007eh mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
0081h mov r8,rbp                    ; MOV(Mov_r64_rm64) [R8,RBP]                           encoding(3 bytes) = 4c 8b c5
0084h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0089h call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24CB60h:jmp64]                encoding(5 bytes) = e8 d2 ca 24 5f
008eh mov rcx,1E1F7836AE0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7836ae0h:imm64]          encoding(10 bytes) = 48 b9 e0 6a 83 f7 e1 01 00 00
0098h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
009bh mov rdx,r14                   ; MOV(Mov_r64_rm64) [RDX,R14]                          encoding(3 bytes) = 49 8b d6
009eh call 7FFE3925CF40h            ; CALL(Call_rel32_64) [5D846390h:jmp64]                encoding(5 bytes) = e8 ed 62 84 5d
00a3h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a4h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
00a8h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a9h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00aah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00abh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00ach pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00aeh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[175]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x40,0x0F,0xB6,0x71,0x20,0x48,0x8B,0x79,0x08,0x48,0x8B,0x59,0x10,0x48,0x8B,0x69,0x18,0x48,0xB9,0xC0,0x52,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0x61,0xDA,0x24,0x5F,0x4C,0x8B,0xF0,0x40,0x0F,0xB6,0xF6,0x48,0xB9,0x70,0x7D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0xD8,0x24,0x5F,0x40,0x88,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x1F,0xDE,0x80,0x5D,0x4C,0x8B,0xC0,0x49,0x8B,0xCE,0x33,0xD2,0xE8,0x02,0xCB,0x24,0x5F,0x49,0x8B,0xCE,0x4C,0x8B,0xC7,0xBA,0x01,0x00,0x00,0x00,0xE8,0xF2,0xCA,0x24,0x5F,0x49,0x8B,0xCE,0x4C,0x8B,0xC3,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE2,0xCA,0x24,0x5F,0x49,0x8B,0xCE,0x4C,0x8B,0xC5,0xBA,0x03,0x00,0x00,0x00,0xE8,0xD2,0xCA,0x24,0x5F,0x48,0xB9,0xE0,0x6A,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x49,0x8B,0xD6,0xE8,0xED,0x62,0x84,0x5D,0x90,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string ToString()
; location: [7FFDDBA16C80h, 7FFDDBA16C8Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDBA16BB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddba16bb0h:imm64]         encoding(10 bytes) = 48 b8 b0 6b a1 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> ToStringBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0xB0,0x6B,0xA1,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:732
; function: ILogicExpr get_Arg()
; location: [7FFDDBA16CB0h, 7FFDDBA16CB9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ArgBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryLogicOpKind:uint get_OpKind()
; location: [7FFDDBA16CD0h, 7FFDDBA16CD8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rcx+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 10
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_OpKindBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA16CF0h, 7FFDDBA16D9Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,48h                   ; SUB(Sub_rm64_imm8) [RSP,48h:imm64]                   encoding(4 bytes) = 48 83 ec 48
0006h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0008h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000dh mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0012h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0017h mov [rsp+40h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 40
001ch mov esi,[rcx+10h]             ; MOV(Mov_r32_rm32) [ESI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 71 10
001fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0023h mov rcx,7FFDDB9C8810h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c8810h:imm64]         encoding(10 bytes) = 48 b9 10 88 9c db fd 7f 00 00
002dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D7C0h:jmp64]                encoding(5 bytes) = e8 8e d7 24 5f
0032h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0035h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0038h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80DD30h:jmp64]                encoding(5 bytes) = e8 f3 dc 80 5d
003dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0040h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0042h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FE4E0h:jmp64]                encoding(5 bytes) = e8 99 e4 7f 5d
0047h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
004ah mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
004dh mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0051h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0054h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0057h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005ah mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
005dh mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0061h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0064h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0067h mov rdx,1E1F7821390h          ; MOV(Mov_r64_imm64) [RDX,1e1f7821390h:imm64]          encoding(10 bytes) = 48 ba 90 13 82 f7 e1 01 00 00
0071h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0074h mov rcx,1E1F7836B20h          ; MOV(Mov_r64_imm64) [RCX,1e1f7836b20h:imm64]          encoding(10 bytes) = 48 b9 20 6b 83 f7 e1 01 00 00
007eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0081h lea r9,[rsp+28h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 4c 24 28
0086h mov [r9],rax                  ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RAX]         encoding(3 bytes) = 49 89 01
0089h mov [r9+8],rdi                ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDI]         encoding(4 bytes) = 49 89 79 08
008dh mov [r9+10h],r8               ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),R8]          encoding(4 bytes) = 4d 89 41 10
0091h mov [r9+18h],rdx              ; MOV(Mov_rm64_r64) [mem(64u,R9:br,DS:sr),RDX]         encoding(4 bytes) = 49 89 51 18
0095h lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
009ah mov rdx,rcx                   ; MOV(Mov_r64_rm64) [RDX,RCX]                          encoding(3 bytes) = 48 8b d1
009dh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
009fh call 7FFE39225AE0h            ; CALL(Call_rel32_64) [5D80EDF0h:jmp64]                encoding(5 bytes) = e8 4c ed 80 5d
00a4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00a5h add rsp,48h                   ; ADD(Add_rm64_imm8) [RSP,48h:imm64]                   encoding(4 bytes) = 48 83 c4 48
00a9h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00aah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00abh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[172]{0x57,0x56,0x48,0x83,0xEC,0x48,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x40,0x8B,0x71,0x10,0x48,0x8B,0x79,0x08,0x48,0xB9,0x10,0x88,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8E,0xD7,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0xF3,0xDC,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x99,0xE4,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x45,0x33,0xC0,0x48,0xBA,0x90,0x13,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0xB9,0x20,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x4C,0x8D,0x4C,0x24,0x28,0x49,0x89,0x01,0x49,0x89,0x79,0x08,0x4D,0x89,0x41,0x10,0x49,0x89,0x51,0x18,0x4C,0x8D,0x44,0x24,0x28,0x48,0x8B,0xD1,0x33,0xC9,0xE8,0x4C,0xED,0x80,0x5D,0x90,0x48,0x83,0xC4,0x48,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:762
; function: VariedLogicExpr Define(ILogicExpr baseExpr, ILogicVarExpr[] variables)
; location: [7FFDDBA16DC0h, 7FFDDBA16E01h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9E6CC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e6cc0h:imm64]         encoding(10 bytes) = 48 b9 c0 6c 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D6F0h:jmp64]                encoding(5 bytes) = e8 d4 d6 24 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24C830h:jmp64]                encoding(5 bytes) = e8 05 c8 24 5f
002bh lea rcx,[rbx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 10
002fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0032h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24C830h:jmp64]                encoding(5 bytes) = e8 f9 c7 24 5f
0037h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
003ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
003eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
003fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0040h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0041h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[66]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xC0,0x6C,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0xD6,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x05,0xC8,0x24,0x5F,0x48,0x8D,0x4B,0x10,0x48,0x8B,0xD7,0xE8,0xF9,0xC7,0x24,0x5F,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LogicExprKind:uint get_ExprKind()
; location: [7FFDDBA16E20h, 7FFDDBA16E2Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,4                     ; MOV(Mov_r32_imm32) [EAX,4h:imm32]                    encoding(5 bytes) = b8 04 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ExprKindBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x04,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicExpr get_BaseExpr()
; location: [7FFDDBA16E40h, 7FFDDBA16E49h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 08
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BaseExprBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ILogicVarExpr[] get_Vars()
; location: [7FFDDBA16E60h, 7FFDDBA16E69h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,[rcx+10h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 41 10
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VarsBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x41,0x10,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(ILogicExpr[] values)
; location: [7FFDDBA16E80h, 7FFDDBA16F42h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
000ch mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000fh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
0012h mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0016h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0019h mov ebp,[rdi+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RDI:br,DS:sr)]        encoding(3 bytes) = 8b 6f 08
001ch mov r14d,ebp                  ; MOV(Mov_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 8b f5
001fh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0022h jle short 0026h               ; JLE(Jle_rel8_64) [26h:jmp64]                         encoding(2 bytes) = 7e 02
0024h jmp short 0029h               ; JMP(Jmp_rel8_64) [29h:jmp64]                         encoding(2 bytes) = eb 03
0026h mov r14d,ebx                  ; MOV(Mov_r32_rm32) [R14D,EBX]                         encoding(3 bytes) = 44 8b f3
0029h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
002bh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002eh jle near ptr 00b0h            ; JLE(Jle_rel32_64) [B0h:jmp64]                        encoding(6 bytes) = 0f 8e 7c 00 00 00
0034h cmp ebp,r14d                  ; CMP(Cmp_r32_rm32) [EBP,R14D]                         encoding(3 bytes) = 41 3b ee
0037h setge cl                      ; SETGE(Setge_rm8) [CL]                                encoding(3 bytes) = 0f 9d c1
003ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
003dh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
0040h setge dl                      ; SETGE(Setge_rm8) [DL]                                encoding(3 bytes) = 0f 9d c2
0043h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0046h test ecx,edx                  ; TEST(Test_rm32_r32) [EDX,ECX]                        encoding(2 bytes) = 85 ca
0048h je short 007ch                ; JE(Je_rel8_64) [7Ch:jmp64]                           encoding(2 bytes) = 74 32
004ah mov r15,[rsi+10h]             ; MOV(Mov_r64_rm64) [R15,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 7e 10
004eh cmp ebx,[r15+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,R15:br,DS:sr)]        encoding(4 bytes) = 41 3b 5f 08
0052h jae short 00bdh               ; JAE(Jae_rel8_64) [BDh:jmp64]                         encoding(2 bytes) = 73 69
0054h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
0057h mov rcx,[r15+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,R15:br,DS:sr)]        encoding(5 bytes) = 49 8b 4c d7 10
005ch mov rdx,[rdi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d7 10
0061h mov r11,7FFDDB000EF0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ef0h:imm64]         encoding(10 bytes) = 49 bb f0 0e 00 db fd 7f 00 00
006bh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
006dh call qword ptr [7FFDDB000EF0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 fd 9f 5e ff
0073h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0075h cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0078h jl short 004ah                ; JL(Jl_rel8_64) [4Ah:jmp64]                           encoding(2 bytes) = 7c d0
007ah jmp short 00b0h               ; JMP(Jmp_rel8_64) [B0h:jmp64]                         encoding(2 bytes) = eb 34
007ch mov r15,[rsi+10h]             ; MOV(Mov_r64_rm64) [R15,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 7e 10
0080h cmp ebx,[r15+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,R15:br,DS:sr)]        encoding(4 bytes) = 41 3b 5f 08
0084h jae short 00bdh               ; JAE(Jae_rel8_64) [BDh:jmp64]                         encoding(2 bytes) = 73 37
0086h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
0089h mov rcx,[r15+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,R15:br,DS:sr)]        encoding(5 bytes) = 49 8b 4c d7 10
008eh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0090h jae short 00bdh               ; JAE(Jae_rel8_64) [BDh:jmp64]                         encoding(2 bytes) = 73 2b
0092h mov rdx,[rdi+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDI:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 d7 10
0097h mov r11,7FFDDB000EF0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ef0h:imm64]         encoding(10 bytes) = 49 bb f0 0e 00 db fd 7f 00 00
00a1h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
00a3h call qword ptr [7FFDDB000EF0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 c7 9f 5e ff
00a9h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
00abh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
00aeh jl short 007ch                ; JL(Jl_rel8_64) [7Ch:jmp64]                           encoding(2 bytes) = 7c cc
00b0h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00b4h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00b5h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00b6h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00b7h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00b8h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
00bah pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
00bch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00bdh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F378080h:jmp64]                encoding(5 bytes) = e8 be 7f 37 5f
00c2h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[195]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x10,0x8B,0x59,0x08,0x8B,0x6F,0x08,0x44,0x8B,0xF5,0x41,0x3B,0xDE,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xF3,0x33,0xDB,0x45,0x85,0xF6,0x0F,0x8E,0x7C,0x00,0x00,0x00,0x41,0x3B,0xEE,0x0F,0x9D,0xC1,0x0F,0xB6,0xC9,0x45,0x85,0xF6,0x0F,0x9D,0xC2,0x0F,0xB6,0xD2,0x85,0xCA,0x74,0x32,0x4C,0x8B,0x7E,0x10,0x41,0x3B,0x5F,0x08,0x73,0x69,0x48,0x63,0xD3,0x49,0x8B,0x4C,0xD7,0x10,0x48,0x8B,0x54,0xD7,0x10,0x49,0xBB,0xF0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xFD,0x9F,0x5E,0xFF,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xD0,0xEB,0x34,0x4C,0x8B,0x7E,0x10,0x41,0x3B,0x5F,0x08,0x73,0x37,0x48,0x63,0xD3,0x49,0x8B,0x4C,0xD7,0x10,0x3B,0xDD,0x73,0x2B,0x48,0x8B,0x54,0xD7,0x10,0x49,0xBB,0xF0,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xC7,0x9F,0x5E,0xFF,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xCC,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xBE,0x7F,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(bit[] values)
; location: [7FFDDBA16F70h, 7FFDDBA16FE0h]
0000h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0002h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0003h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0004h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0005h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0006h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
0010h mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0014h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0017h mov ebp,[rdi+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RDI:br,DS:sr)]        encoding(3 bytes) = 8b 6f 08
001ah mov r14d,ebp                  ; MOV(Mov_r32_rm32) [R14D,EBP]                         encoding(3 bytes) = 44 8b f5
001dh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
0020h jle short 0024h               ; JLE(Jle_rel8_64) [24h:jmp64]                         encoding(2 bytes) = 7e 02
0022h jmp short 0027h               ; JMP(Jmp_rel8_64) [27h:jmp64]                         encoding(2 bytes) = eb 03
0024h mov r14d,ebx                  ; MOV(Mov_r32_rm32) [R14D,EBX]                         encoding(3 bytes) = 44 8b f3
0027h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0029h test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
002ch jle short 0060h               ; JLE(Jle_rel8_64) [60h:jmp64]                         encoding(2 bytes) = 7e 32
002eh mov rcx,[rsi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 10
0032h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0035h jae short 006bh               ; JAE(Jae_rel8_64) [6Bh:jmp64]                         encoding(2 bytes) = 73 34
0037h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
003ah mov rcx,[rcx+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c d1 10
003fh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0041h jae short 006bh               ; JAE(Jae_rel8_64) [6Bh:jmp64]                         encoding(2 bytes) = 73 28
0043h mov edx,[rdi+rdx*4+10h]       ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDI:br,DS:sr)]        encoding(4 bytes) = 8b 54 97 10
0047h mov r11,7FFDDB000EF8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ef8h:imm64]         encoding(10 bytes) = 49 bb f8 0e 00 db fd 7f 00 00
0051h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0053h call qword ptr [7FFDDB000EF8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 2f 9f 5e ff
0059h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
005bh cmp ebx,r14d                  ; CMP(Cmp_r32_rm32) [EBX,R14D]                         encoding(3 bytes) = 41 3b de
005eh jl short 002eh                ; JL(Jl_rel8_64) [2Eh:jmp64]                           encoding(2 bytes) = 7c ce
0060h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0064h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0065h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0066h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0067h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0068h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
006ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
006bh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F377F90h:jmp64]                encoding(5 bytes) = e8 20 7f 37 5f
0070h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[113]{0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0x8B,0x4E,0x10,0x8B,0x59,0x08,0x8B,0x6F,0x08,0x44,0x8B,0xF5,0x41,0x3B,0xDE,0x7E,0x02,0xEB,0x03,0x44,0x8B,0xF3,0x33,0xDB,0x45,0x85,0xF6,0x7E,0x32,0x48,0x8B,0x4E,0x10,0x3B,0x59,0x08,0x73,0x34,0x48,0x63,0xD3,0x48,0x8B,0x4C,0xD1,0x10,0x3B,0xDD,0x73,0x28,0x8B,0x54,0x97,0x10,0x49,0xBB,0xF8,0x0E,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x2F,0x9F,0x5E,0xFF,0xFF,0xC3,0x41,0x3B,0xDE,0x7C,0xCE,0x48,0x83,0xC4,0x20,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0xC3,0xE8,0x20,0x7F,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetVars(LiteralLogicSeq values)
; location: [7FFDDBA17000h, 7FFDDBA17072h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h mov rdi,rcx                   ; MOV(Mov_r64_rm64) [RDI,RCX]                          encoding(3 bytes) = 48 8b f9
000bh mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000eh mov rcx,[rdi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4f 10
0012h mov ebx,[rcx+8]               ; MOV(Mov_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 59 08
0015h mov ecx,[rsi]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 0e
0017h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
001bh mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
001eh cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0020h jle short 0024h               ; JLE(Jle_rel8_64) [24h:jmp64]                         encoding(2 bytes) = 7e 02
0022h jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 02
0024h mov ebp,ebx                   ; MOV(Mov_r32_rm32) [EBP,EBX]                          encoding(2 bytes) = 8b eb
0026h xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
0028h test ebp,ebp                  ; TEST(Test_rm32_r32) [EBP,EBP]                        encoding(2 bytes) = 85 ed
002ah jle short 0064h               ; JLE(Jle_rel8_64) [64h:jmp64]                         encoding(2 bytes) = 7e 38
002ch mov rcx,[rdi+10h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4f 10
0030h cmp ebx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 59 08
0033h jae short 006dh               ; JAE(Jae_rel8_64) [6Dh:jmp64]                         encoding(2 bytes) = 73 38
0035h movsxd rdx,ebx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EBX]                    encoding(3 bytes) = 48 63 d3
0038h mov rcx,[rcx+rdx*8+10h]       ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c d1 10
003dh mov r11,[rsi+8]               ; MOV(Mov_r64_rm64) [R11,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 4c 8b 5e 08
0041h cmp ebx,[r11+8]               ; CMP(Cmp_r32_rm32) [EBX,mem(32u,R11:br,DS:sr)]        encoding(4 bytes) = 41 3b 5b 08
0045h jae short 006dh               ; JAE(Jae_rel8_64) [6Dh:jmp64]                         encoding(2 bytes) = 73 26
0047h mov edx,[r11+rdx*4+10h]       ; MOV(Mov_r32_rm32) [EDX,mem(32u,R11:br,DS:sr)]        encoding(5 bytes) = 41 8b 54 93 10
004ch mov r11,7FFDDB000F00h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f00h:imm64]         encoding(10 bytes) = 49 bb 00 0f 00 db fd 7f 00 00
0056h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0058h call qword ptr [7FFDDB000F00h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 a2 9e 5e ff
005eh inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
0060h cmp ebx,ebp                   ; CMP(Cmp_r32_rm32) [EBX,EBP]                          encoding(2 bytes) = 3b dd
0062h jl short 002ch                ; JL(Jl_rel8_64) [2Ch:jmp64]                           encoding(2 bytes) = 7c c8
0064h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0068h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0069h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
006ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
006dh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F377F00h:jmp64]                encoding(5 bytes) = e8 8e 7e 37 5f
0072h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> SetVarsBytes => new byte[115]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x48,0x8B,0xF9,0x48,0x8B,0xF2,0x48,0x8B,0x4F,0x10,0x8B,0x59,0x08,0x8B,0x0E,0x48,0x8B,0x4E,0x08,0x8B,0x69,0x08,0x3B,0xDD,0x7E,0x02,0xEB,0x02,0x8B,0xEB,0x33,0xDB,0x85,0xED,0x7E,0x38,0x48,0x8B,0x4F,0x10,0x3B,0x59,0x08,0x73,0x38,0x48,0x63,0xD3,0x48,0x8B,0x4C,0xD1,0x10,0x4C,0x8B,0x5E,0x08,0x41,0x3B,0x5B,0x08,0x73,0x26,0x41,0x8B,0x54,0x93,0x10,0x49,0xBB,0x00,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xA2,0x9E,0x5E,0xFF,0xFF,0xC3,0x3B,0xDD,0x7C,0xC8,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3,0xE8,0x8E,0x7E,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format()
; location: [7FFDDBA17090h, 7FFDDBA170ACh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0009h mov r11,7FFDDB000F08h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f08h:imm64]         encoding(10 bytes) = 49 bb 08 0f 00 db fd 7f 00 00
0013h mov rax,[7FFDDB000F08h]       ; MOV(Mov_r64_rm64) [RAX,mem(64u,RIP:br,DS:sr)]        encoding(7 bytes) = 48 8b 05 5e 9e 5e ff
001ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
001ch jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> FormatBytes => new byte[31]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0x49,0x08,0x49,0xBB,0x08,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x8B,0x05,0x5E,0x9E,0x5E,0xFF,0x39,0x09,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:811
; function: string Format(UnaryLogicOpKind:uint kind)
; location: [7FFDDBA170C0h, 7FFDDBA1710Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9C8810h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c8810h:imm64]         encoding(10 bytes) = 48 b9 10 88 9c db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D3F0h:jmp64]                encoding(5 bytes) = e8 da d3 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D960h:jmp64]                encoding(5 bytes) = e8 3f d9 80 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FE110h:jmp64]                encoding(5 bytes) = e8 e5 e0 7f 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x10,0x88,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0xD3,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x3F,0xD9,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0xE5,0xE0,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(UnaryBitwiseOpKind:uint kind)
; location: [7FFDDBA17130h, 7FFDDBA1717Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9C79E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c79e0h:imm64]         encoding(10 bytes) = 48 b9 e0 79 9c db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D380h:jmp64]                encoding(5 bytes) = e8 6a d3 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D8F0h:jmp64]                encoding(5 bytes) = e8 cf d8 80 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FE0A0h:jmp64]                encoding(5 bytes) = e8 75 e0 7f 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0xE0,0x79,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6A,0xD3,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0xCF,0xD8,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x75,0xE0,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(UnaryArithmeticOpKind:uint kind)
; location: [7FFDDBA171A0h, 7FFDDBA17214h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h lea ecx,[rsi-1]               ; LEA(Lea_r32_m) [ECX,mem(Unknown,RSI:br,DS:sr)]       encoding(3 bytes) = 8d 4e ff
000ah cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
000dh ja short 0054h                ; JA(Ja_rel8_64) [54h:jmp64]                           encoding(2 bytes) = 77 45
000fh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
0011h lea rax,[7FFDDBA17218h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 60 00 00 00
0018h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001bh lea rdx,[7FFDDBA171A7h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e5 ff ff ff
0022h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0025h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0027h mov rcx,1E1F7836B90h          ; MOV(Mov_r64_imm64) [RCX,1e1f7836b90h:imm64]          encoding(10 bytes) = 48 b9 90 6b 83 f7 e1 01 00 00
0031h mov rax,[rcx]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 01
0034h jmp short 006eh               ; JMP(Jmp_rel8_64) [6Eh:jmp64]                         encoding(2 bytes) = eb 38
0036h mov rax,1E1F7836B98h          ; MOV(Mov_r64_imm64) [RAX,1e1f7836b98h:imm64]          encoding(10 bytes) = 48 b8 98 6b 83 f7 e1 01 00 00
0040h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0043h jmp short 006eh               ; JMP(Jmp_rel8_64) [6Eh:jmp64]                         encoding(2 bytes) = eb 29
0045h mov rax,1E1F7823140h          ; MOV(Mov_r64_imm64) [RAX,1e1f7823140h:imm64]          encoding(10 bytes) = 48 b8 40 31 82 f7 e1 01 00 00
004fh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0052h jmp short 006eh               ; JMP(Jmp_rel8_64) [6Eh:jmp64]                         encoding(2 bytes) = eb 1a
0054h mov rcx,7FFDDB9C86C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c86c0h:imm64]         encoding(10 bytes) = 48 b9 c0 86 9c db fd 7f 00 00
005eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D310h:jmp64]                encoding(5 bytes) = e8 ad d2 24 5f
0063h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0066h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0069h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D880h:jmp64]                encoding(5 bytes) = e8 12 d8 80 5d
006eh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
006fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0073h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0074h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[117]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8D,0x4E,0xFF,0x83,0xF9,0x03,0x77,0x45,0x8B,0xC9,0x48,0x8D,0x05,0x60,0x00,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE5,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0x90,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x01,0xEB,0x38,0x48,0xB8,0x98,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x29,0x48,0xB8,0x40,0x31,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x1A,0x48,0xB9,0xC0,0x86,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAD,0xD2,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x12,0xD8,0x80,0x5D,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(BinaryArithmeticOpKind:uint kind)
; location: [7FFDDBA17240h, 7FFDDBA1728Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9C6F80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c6f80h:imm64]         encoding(10 bytes) = 48 b9 80 6f 9c db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D270h:jmp64]                encoding(5 bytes) = e8 5a d2 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D7E0h:jmp64]                encoding(5 bytes) = e8 bf d7 80 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FDF90h:jmp64]                encoding(5 bytes) = e8 65 df 7f 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x80,0x6F,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5A,0xD2,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0xBF,0xD7,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x65,0xDF,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(BinaryLogicOpKind:uint kind)
; location: [7FFDDBA172B0h, 7FFDDBA172FEh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9C7220h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7220h:imm64]         encoding(10 bytes) = 48 b9 20 72 9c db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D200h:jmp64]                encoding(5 bytes) = e8 ea d1 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D770h:jmp64]                encoding(5 bytes) = e8 4f d7 80 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FDF20h:jmp64]                encoding(5 bytes) = e8 f5 de 7f 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x20,0x72,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEA,0xD1,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x4F,0xD7,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0xF5,0xDE,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(BinaryBitwiseOpKind:uint kind)
; location: [7FFDDBA17320h, 7FFDDBA1736Eh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9C70D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c70d0h:imm64]         encoding(10 bytes) = 48 b9 d0 70 9c db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D190h:jmp64]                encoding(5 bytes) = e8 7a d1 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D700h:jmp64]                encoding(5 bytes) = e8 df d6 80 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FDEB0h:jmp64]                encoding(5 bytes) = e8 85 de 7f 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0xD0,0x70,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7A,0xD1,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0xDF,0xD6,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x85,0xDE,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(ComparisonKind:uint kind)
; location: [7FFDDBA17390h, 7FFDDBA173DEh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h mov rcx,7FFDDB9C7370h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7370h:imm64]         encoding(10 bytes) = 48 b9 70 73 9c db fd 7f 00 00
0011h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D120h:jmp64]                encoding(5 bytes) = e8 0a d1 24 5f
0016h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
0019h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
001ch call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D690h:jmp64]                encoding(5 bytes) = e8 6f d6 80 5d
0021h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0024h mov eax,[rsi]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSI:br,DS:sr)]        encoding(2 bytes) = 8b 06
0026h call 7FFE392151D0h            ; CALL(Call_rel32_64) [5D7FDE40h:jmp64]                encoding(5 bytes) = e8 15 de 7f 5d
002bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0031h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0035h call qword ptr [rax+38h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 38
0038h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
003bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003eh mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0041h mov rax,[rax+48h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 48
0045h call qword ptr [rax+28h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 28
0048h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0049h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[79]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x48,0xB9,0x70,0x73,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0A,0xD1,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x6F,0xD6,0x80,0x5D,0x48,0x8B,0xF0,0x8B,0x06,0xE8,0x15,0xDE,0x7F,0x5D,0x48,0x8B,0xC8,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x38,0x48,0x8B,0xC8,0x48,0x8B,0xD6,0x48,0x8B,0x00,0x48,0x8B,0x40,0x48,0xFF,0x50,0x28,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(TernaryOpKind:byte kind)
; location: [7FFDDBA17400h, 7FFDDBA1742Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+30h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 30
0009h mov rcx,7FFDDB9C7D70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c7d70h:imm64]         encoding(10 bytes) = 48 b9 70 7d 9c db fd 7f 00 00
0013h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D0B0h:jmp64]                encoding(5 bytes) = e8 98 d0 24 5f
0018h movzx ecx,byte ptr [rsp+30h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 30
001dh mov [rax+8],cl                ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 08
0020h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0023h call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D620h:jmp64]                encoding(5 bytes) = e8 f8 d5 80 5d
0028h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x4C,0x24,0x30,0x48,0xB9,0x70,0x7D,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x98,0xD0,0x24,0x5F,0x0F,0xB6,0x4C,0x24,0x30,0x88,0x48,0x08,0x48,0x8B,0xC8,0xE8,0xF8,0xD5,0x80,0x5D,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string Format(ShiftOpKind:uint kind)
; location: [7FFDDBA17450h, 7FFDDBA174DAh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
0007h lea ecx,[rsi-1]               ; LEA(Lea_r32_m) [ECX,mem(Unknown,RSI:br,DS:sr)]       encoding(3 bytes) = 8d 4e ff
000ah cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
000dh ja short 0027h                ; JA(Ja_rel8_64) [27h:jmp64]                           encoding(2 bytes) = 77 18
000fh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0011h lea rcx,[7FFDDBA174E0h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d 78 00 00 00
0018h mov ecx,[rcx+rax*4]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 0c 81
001bh lea rdx,[7FFDDBA17457h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e5 ff ff ff
0022h add rcx,rdx                   ; ADD(Add_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 03 ca
0025h jmp rcx                       ; JMP(Jmp_rm64) [RCX]                                  encoding(2 bytes) = ff e1
0027h cmp esi,8                     ; CMP(Cmp_rm32_imm8) [ESI,8h:imm32]                    encoding(3 bytes) = 83 fe 08
002ah je short 005bh                ; JE(Je_rel8_64) [5Bh:jmp64]                           encoding(2 bytes) = 74 2f
002ch jmp short 006ah               ; JMP(Jmp_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = eb 3c
002eh mov rcx,1E1F7836BA0h          ; MOV(Mov_r64_imm64) [RCX,1e1f7836ba0h:imm64]          encoding(10 bytes) = 48 b9 a0 6b 83 f7 e1 01 00 00
0038h mov rax,[rcx]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 01
003bh jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 47
003dh mov rax,1E1F7836BA8h          ; MOV(Mov_r64_imm64) [RAX,1e1f7836ba8h:imm64]          encoding(10 bytes) = 48 b8 a8 6b 83 f7 e1 01 00 00
0047h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
004ah jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 38
004ch mov rax,1E1F7836BB0h          ; MOV(Mov_r64_imm64) [RAX,1e1f7836bb0h:imm64]          encoding(10 bytes) = 48 b8 b0 6b 83 f7 e1 01 00 00
0056h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0059h jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 29
005bh mov rax,1E1F7836BB8h          ; MOV(Mov_r64_imm64) [RAX,1e1f7836bb8h:imm64]          encoding(10 bytes) = 48 b8 b8 6b 83 f7 e1 01 00 00
0065h mov rax,[rax]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(3 bytes) = 48 8b 00
0068h jmp short 0084h               ; JMP(Jmp_rel8_64) [84h:jmp64]                         encoding(2 bytes) = eb 1a
006ah mov rcx,7FFDDB9C8220h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9c8220h:imm64]         encoding(10 bytes) = 48 b9 20 82 9c db fd 7f 00 00
0074h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24D060h:jmp64]                encoding(5 bytes) = e8 e7 cf 24 5f
0079h mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
007ch mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
007fh call 7FFE39224A20h            ; CALL(Call_rel32_64) [5D80D5D0h:jmp64]                encoding(5 bytes) = e8 4c d5 80 5d
0084h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0085h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0089h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
008ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FormatBytes => new byte[139]{0x56,0x48,0x83,0xEC,0x20,0x8B,0xF1,0x8D,0x4E,0xFF,0x83,0xF9,0x03,0x77,0x18,0x8B,0xC1,0x48,0x8D,0x0D,0x78,0x00,0x00,0x00,0x8B,0x0C,0x81,0x48,0x8D,0x15,0xE5,0xFF,0xFF,0xFF,0x48,0x03,0xCA,0xFF,0xE1,0x83,0xFE,0x08,0x74,0x2F,0xEB,0x3C,0x48,0xB9,0xA0,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x01,0xEB,0x47,0x48,0xB8,0xA8,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x38,0x48,0xB8,0xB0,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x29,0x48,0xB8,0xB8,0x6B,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x00,0xEB,0x1A,0x48,0xB9,0x20,0x82,0x9C,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE7,0xCF,0x24,0x5F,0x89,0x70,0x08,0x48,0x8B,0xC8,0xE8,0x4C,0xD5,0x80,0x5D,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: string FormatTuple(IEnumerable<IOperator> terms)
; location: [7FFDDBA17510h, 7FFDDBA176A3h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rcx,7FFDDB0F52C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0f52c0h:imm64]         encoding(10 bytes) = 48 b9 c0 52 0f db fd 7f 00 00
0014h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0019h call 7FFE3AC64640h            ; CALL(Call_rel32_64) [5F24D130h:jmp64]                encoding(5 bytes) = e8 12 d1 24 5f
001eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0021h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
002bh mov edx,0CBh                  ; MOV(Mov_r32_imm32) [EDX,cbh:imm32]                   encoding(5 bytes) = ba cb 00 00 00
0030h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F24D3A0h:jmp64]                encoding(5 bytes) = e8 6b d3 24 5f
0035h mov rcx,1E1F7827228h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827228h:imm64]          encoding(10 bytes) = 48 b9 28 72 82 f7 e1 01 00 00
003fh mov r8,[rcx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 01
0042h test r8,r8                    ; TEST(Test_rm64_r64) [R8,R8]                          encoding(3 bytes) = 4d 85 c0
0045h jne short 009bh               ; JNE(Jne_rel8_64) [9Bh:jmp64]                         encoding(2 bytes) = 75 54
0047h mov rcx,7FFDDBA07D50h         ; MOV(Mov_r64_imm64) [RCX,7ffddba07d50h:imm64]         encoding(10 bytes) = 48 b9 50 7d a0 db fd 7f 00 00
0051h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24CFA0h:jmp64]                encoding(5 bytes) = e8 4a cf 24 5f
0056h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0059h mov rdx,1E1F7827220h          ; MOV(Mov_r64_imm64) [RDX,1e1f7827220h:imm64]          encoding(10 bytes) = 48 ba 20 72 82 f7 e1 01 00 00
0063h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0066h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0069h je near ptr 0182h             ; JE(Je_rel32_64) [182h:jmp64]                         encoding(6 bytes) = 0f 84 13 01 00 00
006fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0073h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24C0E0h:jmp64]                encoding(5 bytes) = e8 68 c0 24 5f
0078h mov rdx,7FFDDB830A08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb830a08h:imm64]         encoding(10 bytes) = 48 ba 08 0a 83 db fd 7f 00 00
0082h mov [rbx+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 18
0086h mov rcx,1E1F7827228h          ; MOV(Mov_r64_imm64) [RCX,1e1f7827228h:imm64]          encoding(10 bytes) = 48 b9 28 72 82 f7 e1 01 00 00
0090h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0093h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24C0B0h:jmp64]                encoding(5 bytes) = e8 18 c0 24 5f
0098h mov r8,rbx                    ; MOV(Mov_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 8b c3
009bh mov dword ptr [rsp+28h],2Ch   ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),2ch:imm32] encoding(8 bytes) = c7 44 24 28 2c 00 00 00
00a3h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00a6h mov rcx,7FFDDBA07E58h         ; MOV(Mov_r64_imm64) [RCX,7ffddba07e58h:imm64]         encoding(10 bytes) = 48 b9 58 7e a0 db fd 7f 00 00
00b0h call 7FFE530D3390h            ; CALL(Call_rel32_64) [776BBE80h:jmp64]                encoding(5 bytes) = e8 cb bd 6b 77
00b5h mov r9,rax                    ; MOV(Mov_r64_rm64) [R9,RAX]                           encoding(3 bytes) = 4c 8b c8
00b8h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
00bdh mov rcx,7FFDDBA08028h         ; MOV(Mov_r64_imm64) [RCX,7ffddba08028h:imm64]         encoding(10 bytes) = 48 b9 28 80 a0 db fd 7f 00 00
00c7h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00cdh call 7FFDDBA14A88h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD578h:jmp64]        encoding(5 bytes) = e8 a6 d4 ff ff
00d2h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
00d5h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00d7h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00dah call 7FFE3AC63710h            ; CALL(Call_rel32_64) [5F24C200h:jmp64]                encoding(5 bytes) = e8 21 c1 24 5f
00dfh mov rcx,1E1F7826270h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826270h:imm64]          encoding(10 bytes) = 48 b9 70 62 82 f7 e1 01 00 00
00e9h mov r8,[rcx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RCX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 01
00ech test r8,r8                    ; TEST(Test_rm64_r64) [R8,R8]                          encoding(3 bytes) = 4d 85 c0
00efh jne short 0141h               ; JNE(Jne_rel8_64) [141h:jmp64]                        encoding(2 bytes) = 75 50
00f1h mov rcx,7FFDDB75ADC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb75adc0h:imm64]         encoding(10 bytes) = 48 b9 c0 ad 75 db fd 7f 00 00
00fbh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24CFA0h:jmp64]                encoding(5 bytes) = e8 a0 ce 24 5f
0100h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0103h mov rdx,1E1F7826230h          ; MOV(Mov_r64_imm64) [RDX,1e1f7826230h:imm64]          encoding(10 bytes) = 48 ba 30 62 82 f7 e1 01 00 00
010dh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0110h test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
0113h je short 018bh                ; JE(Je_rel8_64) [18Bh:jmp64]                          encoding(2 bytes) = 74 76
0115h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0119h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24C0E0h:jmp64]                encoding(5 bytes) = e8 c2 bf 24 5f
011eh mov rdx,7FFDDB71CBE0h         ; MOV(Mov_r64_imm64) [RDX,7ffddb71cbe0h:imm64]         encoding(10 bytes) = 48 ba e0 cb 71 db fd 7f 00 00
0128h mov [rsi+18h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 56 18
012ch mov rcx,1E1F7826270h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826270h:imm64]          encoding(10 bytes) = 48 b9 70 62 82 f7 e1 01 00 00
0136h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0139h call 7FFE3AC635C0h            ; CALL(Call_rel32_64) [5F24C0B0h:jmp64]                encoding(5 bytes) = e8 72 bf 24 5f
013eh mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0141h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0144h mov rcx,7FFDDB75AEC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb75aec8h:imm64]         encoding(10 bytes) = 48 b9 c8 ae 75 db fd 7f 00 00
014eh call 7FFE530D3390h            ; CALL(Call_rel32_64) [776BBE80h:jmp64]                encoding(5 bytes) = e8 2d bd 6b 77
0153h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0156h call 7FFE392B0EB0h            ; CALL(Call_rel32_64) [5D8999A0h:jmp64]                encoding(5 bytes) = e8 45 98 89 5d
015bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
015eh call 7FFDDB71F4B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFD07FA0h:jmp64]        encoding(5 bytes) = e8 3d 7e d0 ff
0163h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0166h call 7FFDDB71F4E0h            ; CALL(Call_rel32_64) [FFFFFFFFFFD07FD0h:jmp64]        encoding(5 bytes) = e8 65 7e d0 ff
016bh mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
016eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0171h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0174h call 7FFE39224DE0h            ; CALL(Call_rel32_64) [5D80D8D0h:jmp64]                encoding(5 bytes) = e8 57 d7 80 5d
0179h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
017ah add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
017eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
017fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0180h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0181h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0182h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0185h call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF70C6A0h:jmp64]        encoding(5 bytes) = e8 16 c5 70 ff
018ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
018bh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
018eh call 7FFDDB123BB0h            ; CALL(Call_rel32_64) [FFFFFFFFFF70C6A0h:jmp64]        encoding(5 bytes) = e8 0d c5 70 ff
0193h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FormatTupleBytes => new byte[404]{0x57,0x56,0x53,0x48,0x83,0xEC,0x30,0x48,0x8B,0xF1,0x48,0xB9,0xC0,0x52,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x12,0xD1,0x24,0x5F,0x48,0x8B,0xF8,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xCB,0x00,0x00,0x00,0xE8,0x6B,0xD3,0x24,0x5F,0x48,0xB9,0x28,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x01,0x4D,0x85,0xC0,0x75,0x54,0x48,0xB9,0x50,0x7D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4A,0xCF,0x24,0x5F,0x48,0x8B,0xD8,0x48,0xBA,0x20,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x0F,0x84,0x13,0x01,0x00,0x00,0x48,0x8D,0x4B,0x08,0xE8,0x68,0xC0,0x24,0x5F,0x48,0xBA,0x08,0x0A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x53,0x18,0x48,0xB9,0x28,0x72,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD3,0xE8,0x18,0xC0,0x24,0x5F,0x4C,0x8B,0xC3,0xC7,0x44,0x24,0x28,0x2C,0x00,0x00,0x00,0x48,0x8B,0xD6,0x48,0xB9,0x58,0x7E,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCB,0xBD,0x6B,0x77,0x4C,0x8B,0xC8,0x48,0x8D,0x54,0x24,0x28,0x48,0xB9,0x28,0x80,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0xE8,0xA6,0xD4,0xFF,0xFF,0x4C,0x8B,0xC0,0x33,0xD2,0x48,0x8B,0xCF,0xE8,0x21,0xC1,0x24,0x5F,0x48,0xB9,0x70,0x62,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x01,0x4D,0x85,0xC0,0x75,0x50,0x48,0xB9,0xC0,0xAD,0x75,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA0,0xCE,0x24,0x5F,0x48,0x8B,0xF0,0x48,0xBA,0x30,0x62,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x85,0xD2,0x74,0x76,0x48,0x8D,0x4E,0x08,0xE8,0xC2,0xBF,0x24,0x5F,0x48,0xBA,0xE0,0xCB,0x71,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x56,0x18,0x48,0xB9,0x70,0x62,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0xD6,0xE8,0x72,0xBF,0x24,0x5F,0x4C,0x8B,0xC6,0x48,0x8B,0xD7,0x48,0xB9,0xC8,0xAE,0x75,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2D,0xBD,0x6B,0x77,0x48,0x8B,0xC8,0xE8,0x45,0x98,0x89,0x5D,0x48,0x8B,0xD8,0xE8,0x3D,0x7E,0xD0,0xFF,0x48,0x8B,0xF0,0xE8,0x65,0x7E,0xD0,0xFF,0x4C,0x8B,0xC0,0x48,0x8B,0xCE,0x48,0x8B,0xD3,0xE8,0x57,0xD7,0x80,0x5D,0x90,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3,0x48,0x8B,0xCB,0xE8,0x16,0xC5,0x70,0xFF,0xCC,0x48,0x8B,0xCE,0xE8,0x0D,0xC5,0x70,0xFF,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:858
; function: LookupKey:byte GetKey(in Lut16 table, LookupSlot:byte slot)
; location: [7FFDDBA176C0h, 7FFDDBA176CEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh movzx eax,byte ptr [rax]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RAX:br,DS:sr)]      encoding(3 bytes) = 0f b6 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> GetKeyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x0F,0xB6,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void SetKey(ref Lut16 table, LookupSlot:byte slot, LookupKey:byte value)
; location: [7FFDDBA176E0h, 7FFDDBA176EEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh mov [rax],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SetKeyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x44,0x88,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector128<byte> LoadVector(in Lut16 src)
; location: [7FFDDBA17700h, 7FFDDBA17710h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu xmm0,xmmword ptr [rdx] ; VLDDQU(VEX_Vlddqu_xmm_m128) [XMM0,mem(UInt128,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fb f0 02
0009h vmovupd [rcx],xmm0            ; VMOVUPD(VEX_Vmovupd_xmmm128_xmm) [mem(Packed128_Float64,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 f9 11 01
000dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> LoadVectorBytes => new byte[17]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFB,0xF0,0x02,0xC5,0xF9,0x11,0x01,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector256<byte> LoadVector(in Lut32 src)
; location: [7FFDDBA17730h, 7FFDDBA17743h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu ymm0,ymmword ptr [rdx] ; VLDDQU(VEX_Vlddqu_ymm_m256) [YMM0,mem(UInt256,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 ff f0 02
0009h vmovupd [rcx],ymm0            ; VMOVUPD(VEX_Vmovupd_ymmm256_ymm) [mem(Packed256_Float64,RCX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fd 11 01
000dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0010h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> LoadVectorBytes => new byte[20]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFF,0xF0,0x02,0xC5,0xFD,0x11,0x01,0x48,0x8B,0xC1,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> AsSpan(in Lut16 src)
; location: [7FFDDBA17760h, 7FFDDBA17772h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
0008h mov dword ptr [rcx+8],10h     ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),10h:imm32] encoding(7 bytes) = c7 41 08 10 00 00 00
000fh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> AsSpanBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x11,0xC7,0x41,0x08,0x10,0x00,0x00,0x00,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> AsSpan(in Lut32 src)
; location: [7FFDDBA17790h, 7FFDDBA177A2h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
0008h mov dword ptr [rcx+8],20h     ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),20h:imm32] encoding(7 bytes) = c7 41 08 20 00 00 00
000fh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> AsSpanBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x11,0xC7,0x41,0x08,0x20,0x00,0x00,0x00,0x48,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ref Lut16 From(Vector128<byte> src, ref Lut16 dst)
; location: [7FFDDBA177C0h, 7FFDDBA177D3h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd xmm0,[rcx]            ; VMOVUPD(VEX_Vmovupd_xmm_xmmm128) [XMM0,mem(Packed128_Float64,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 f9 10 01
0009h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
000ch vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0010h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FromBytes => new byte[20]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xF9,0x10,0x01,0x48,0x8B,0xC2,0xC5,0xFA,0x7F,0x00,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ref Lut32 From(Vector256<byte> src, ref Lut32 dst)
; location: [7FFDDBA177F0h, 7FFDDBA17806h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd ymm0,[rcx]            ; VMOVUPD(VEX_Vmovupd_ymm_ymmm256) [YMM0,mem(Packed256_Float64,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fd 10 01
0009h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
000ch vmovdqu ymmword ptr [rax],ymm0; VMOVDQU(VEX_Vmovdqu_ymmm256_ymm) [mem(Packed256_Int32,RAX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fe 7f 00
0010h mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> FromBytes => new byte[23]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFD,0x10,0x01,0x48,0x8B,0xC2,0xC5,0xFE,0x7F,0x00,0x48,0x8B,0xC2,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Lut16 From(N16 n, Span<byte> src)
; location: [7FFDDBA17C30h, 7FFDDBA17C4Fh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rax,[r8]                  ; MOV(Mov_r64_rm64) [RAX,mem(64u,R8:br,DS:sr)]         encoding(3 bytes) = 49 8b 00
000ah vmovdqu xmm0,xmmword ptr [rax]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RAX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 00
000eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0012h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0015h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
001ah call 7FFE3AD8ED50h            ; CALL(Call_rel32_64) [5F377120h:jmp64]                encoding(5 bytes) = e8 01 71 37 5f
001fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FromBytes => new byte[32]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x49,0x8B,0x00,0xC5,0xFA,0x6F,0x00,0xC5,0xFA,0x7F,0x01,0x48,0x8B,0xC1,0x48,0x83,0xC4,0x28,0xC3,0xE8,0x01,0x71,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Lut32 From(N32 n, Span<byte> src)
; location: [7FFDDBA17C70h, 7FFDDBA17C99h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rax,[r8]                  ; MOV(Mov_r64_rm64) [RAX,mem(64u,R8:br,DS:sr)]         encoding(3 bytes) = 49 8b 00
000ah vmovdqu xmm0,xmmword ptr [rax]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RAX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 00
000eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0012h vmovdqu xmm0,xmmword ptr [rax+10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RAX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 40 10
0017h vmovdqu xmmword ptr [rcx+10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 10
001ch mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
001fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0023h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0024h call 7FFE3AD8ED50h            ; CALL(Call_rel32_64) [5F3770E0h:jmp64]                encoding(5 bytes) = e8 b7 70 37 5f
0029h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> FromBytes => new byte[42]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x49,0x8B,0x00,0xC5,0xFA,0x6F,0x00,0xC5,0xFA,0x7F,0x01,0xC5,0xFA,0x6F,0x40,0x10,0xC5,0xFA,0x7F,0x41,0x10,0x48,0x8B,0xC1,0x48,0x83,0xC4,0x28,0xC3,0xE8,0xB7,0x70,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:921
; function: LookupKey:byte get_Item(LookupSlot:byte key)
; location: [7FFDDBA17CC0h, 7FFDDBA17CCEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh movzx eax,byte ptr [rax]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RAX:br,DS:sr)]      encoding(3 bytes) = 0f b6 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ItemBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x0F,0xB6,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Item(LookupSlot:byte key, LookupKey:byte value)
; location: [7FFDDBA17CE0h, 7FFDDBA17CEEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,dl                  ; MOVZX(Movzx_r32_rm8) [EAX,DL]                        encoding(3 bytes) = 0f b6 c2
0008h add rax,rcx                   ; ADD(Add_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 03 c1
000bh mov [rax],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_ItemBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0xC2,0x48,0x03,0xC1,0x44,0x88,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Vector128<byte> get_Vector()
; location: [7FFDDBA17D00h, 7FFDDBA17D10h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu xmm0,xmmword ptr [rcx] ; VLDDQU(VEX_Vlddqu_xmm_m128) [XMM0,mem(UInt128,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fb f0 01
0009h vmovupd [rdx],xmm0            ; VMOVUPD(VEX_Vmovupd_xmmm128_xmm) [mem(Packed128_Float64,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 f9 11 02
000dh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VectorBytes => new byte[17]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFB,0xF0,0x01,0xC5,0xF9,0x11,0x02,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Vector(Vector128<byte> value)
; location: [7FFDDBA17D30h, 7FFDDBA17D3Dh]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd xmm0,[rdx]            ; VMOVUPD(VEX_Vmovupd_xmm_xmmm128) [XMM0,mem(Packed128_Float64,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 f9 10 02
0009h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
000dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_VectorBytes => new byte[14]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xF9,0x10,0x02,0xC5,0xFA,0x7F,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> get_Bytes()
; location: [7FFDDBA17D50h, 7FFDDBA17D62h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0008h mov dword ptr [rdx+8],10h     ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),10h:imm32] encoding(7 bytes) = c7 42 08 10 00 00 00
000fh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BytesBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x0A,0xC7,0x42,0x08,0x10,0x00,0x00,0x00,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:967
; function: Vector256<byte> get_Vector()
; location: [7FFDDBA17D80h, 7FFDDBA17D93h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vlddqu ymm0,ymmword ptr [rcx] ; VLDDQU(VEX_Vlddqu_ymm_m256) [YMM0,mem(UInt256,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 ff f0 01
0009h vmovupd [rdx],ymm0            ; VMOVUPD(VEX_Vmovupd_ymmm256_ymm) [mem(Packed256_Float64,RDX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fd 11 02
000dh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0010h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_VectorBytes => new byte[20]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFF,0xF0,0x01,0xC5,0xFD,0x11,0x02,0x48,0x8B,0xC2,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void set_Vector(Vector256<byte> value)
; location: [7FFDDBA17DB0h, 7FFDDBA17DC0h]
0000h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0003h xchg ax,ax                    ; NOP(Nopw)                                            encoding(2 bytes) = 66 90
0005h vmovupd ymm0,[rdx]            ; VMOVUPD(VEX_Vmovupd_ymm_ymmm256) [YMM0,mem(Packed256_Float64,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fd 10 02
0009h vmovdqu ymmword ptr [rcx],ymm0; VMOVDQU(VEX_Vmovdqu_ymmm256_ymm) [mem(Packed256_Int32,RCX:br,DS:sr),YMM0] encoding(VEX, 4 bytes) = c5 fe 7f 01
000dh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> set_VectorBytes => new byte[17]{0xC5,0xF8,0x77,0x66,0x90,0xC5,0xFD,0x10,0x02,0xC5,0xFE,0x7F,0x01,0xC5,0xF8,0x77,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Span<byte> get_Bytes()
; location: [7FFDDBA17DE0h, 7FFDDBA17DF2h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0008h mov dword ptr [rdx+8],20h     ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),20h:imm32] encoding(7 bytes) = c7 42 08 20 00 00 00
000fh mov rax,rdx                   ; MOV(Mov_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 8b c2
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BytesBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x89,0x0A,0xC7,0x42,0x08,0x20,0x00,0x00,0x00,0x48,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:38:992
; function: IEnumerable<UnaryBitwiseOpKind:uint> get_UnaryBitwiseKinds()
; location: [7FFDDBA17E10h, 7FFDDBA17E3Bh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDBA09710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09710h:imm64]         encoding(10 bytes) = 48 b9 10 97 a0 db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24C7D0h:jmp64]                encoding(5 bytes) = e8 b7 c7 24 5f
0019h mov dword ptr [rax+10h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 10 01 00 00 00
0020h mov dword ptr [rax+14h],2     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),2h:imm32] encoding(7 bytes) = c7 40 14 02 00 00 00
0027h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryBitwiseKindsBytes => new byte[44]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x10,0x97,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB7,0xC7,0x24,0x5F,0xC7,0x40,0x10,0x01,0x00,0x00,0x00,0xC7,0x40,0x14,0x02,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDBA17E50h, 7FFDDBA17E5Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB82F568h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f568h:imm64]         encoding(10 bytes) = 48 b8 68 f5 82 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x68,0xF5,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:014
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDBA17E80h, 7FFDDBA17E8Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB82F568h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f568h:imm64]         encoding(10 bytes) = 48 b8 68 f5 82 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x68,0xF5,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:055
; function: UnaryBitwiseOpKind[] get_UnaryBitwiseKinds()
; location: [7FFDDBA17EB0h, 7FFDDBA17EE9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDBA09710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09710h:imm64]         encoding(10 bytes) = 48 b9 10 97 a0 db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24C730h:jmp64]                encoding(5 bytes) = e8 17 c7 24 5f
0019h mov rdx,1E1FFEBAAABh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaaabh:imm64]          encoding(10 bytes) = 48 ba ab aa eb ff e1 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryBitwiseKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x10,0x97,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x17,0xC7,0x24,0x5F,0x48,0xBA,0xAB,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDBA17F00h, 7FFDDBA17F0Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rax,7FFDDB82F568h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f568h:imm64]         encoding(10 bytes) = 48 b8 68 f5 82 db fd 7f 00 00
000fh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x48,0xB8,0x68,0xF5,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind[] get_ComparisonKinds()
; location: [7FFDDBA17F30h, 7FFDDBA17F69h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDBA09D00h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09d00h:imm64]         encoding(10 bytes) = 48 b9 00 9d a0 db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24C6B0h:jmp64]                encoding(5 bytes) = e8 97 c6 24 5f
0019h mov rdx,1E1FFEBAA4Bh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaa4bh:imm64]          encoding(10 bytes) = 48 ba 4b aa eb ff e1 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x00,0x9D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x97,0xC6,0x24,0x5F,0x48,0xBA,0x4B,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<TernaryOpKind:byte> get_TernaryBitwiseKinds()
; location: [7FFDDBA17F80h, 7FFDDBA17FB7h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+1],cl                ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(3 bytes) = 88 4a 01
0015h movsx r8,word ptr [rsp+20h]   ; MOVSX(Movsx_r64_rm16) [R8,mem(16i,RSP:br,SS:sr)]     encoding(6 bytes) = 4c 0f bf 44 24 20
001bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0020h mov edx,18h                   ; MOV(Mov_r32_imm32) [EDX,18h:imm32]                   encoding(5 bytes) = ba 18 00 00 00
0025h call 7FFDDBA17AC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFB48h:jmp64]        encoding(5 bytes) = e8 1e fb ff ff
002ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002dh call 7FFDDBA17AD8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFB58h:jmp64]        encoding(5 bytes) = e8 26 fb ff ff
0032h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0033h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TernaryBitwiseKindsBytes => new byte[56]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x88,0x4A,0x01,0x4C,0x0F,0xBF,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x18,0x00,0x00,0x00,0xE8,0x1E,0xFB,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x26,0xFB,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:117
; function: UnaryLogicOpKind[] get_UnaryOpKinds()
; location: [7FFDDBA17FD0h, 7FFDDBA18005h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDBA0A158h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0a158h:imm64]         encoding(10 bytes) = 48 b9 58 a1 a0 db fd 7f 00 00
0011h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24C610h:jmp64]                encoding(5 bytes) = e8 f5 c5 24 5f
001bh mov rdx,1E1FFEBAA03h          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaa03h:imm64]          encoding(10 bytes) = 48 ba 03 aa eb ff e1 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0035h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryOpKindsBytes => new byte[54]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0x58,0xA1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0xF5,0xC5,0x24,0x5F,0x48,0xBA,0x03,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryLogicOpKind[] get_BinaryOpKinds()
; location: [7FFDDBA18020h, 7FFDDBA18073h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDBA0A420h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0a420h:imm64]         encoding(10 bytes) = 48 b9 20 a4 a0 db fd 7f 00 00
0011h mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F24C5C0h:jmp64]                encoding(5 bytes) = e8 a5 c5 24 5f
001bh mov rdx,1E1FFEBAA6Bh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaa6bh:imm64]          encoding(10 bytes) = 48 ba 6b aa eb ff e1 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h vmovdqu xmm0,xmmword ptr [rdx+10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 10
0036h vmovdqu xmmword ptr [rcx+10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 10
003bh vmovdqu xmm0,xmmword ptr [rdx+20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 20
0040h vmovdqu xmmword ptr [rcx+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 20
0045h vmovdqu xmm0,xmmword ptr [rdx+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 30
004ah vmovdqu xmmword ptr [rcx+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 30
004fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0053h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BinaryOpKindsBytes => new byte[84]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0x20,0xA4,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0xA5,0xC5,0x24,0x5F,0x48,0xBA,0x6B,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0xC5,0xFA,0x6F,0x42,0x10,0xC5,0xFA,0x7F,0x41,0x10,0xC5,0xFA,0x6F,0x42,0x20,0xC5,0xFA,0x7F,0x41,0x20,0xC5,0xFA,0x6F,0x42,0x30,0xC5,0xFA,0x7F,0x41,0x30,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOpKind[] get_TernaryOpKinds()
; location: [7FFDDBA18090h, 7FFDDBA180CFh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+1],cl                ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(3 bytes) = 88 4a 01
0015h movsx r8,word ptr [rsp+20h]   ; MOVSX(Movsx_r64_rm16) [R8,mem(16i,RSP:br,SS:sr)]     encoding(6 bytes) = 4c 0f bf 44 24 20
001bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0020h mov edx,4Fh                   ; MOV(Mov_r32_imm32) [EDX,4fh:imm32]                   encoding(5 bytes) = ba 4f 00 00 00
0025h call 7FFDDBA17AC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFA38h:jmp64]        encoding(5 bytes) = e8 0e fa ff ff
002ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002dh call 7FFDDBA17AD8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFA48h:jmp64]        encoding(5 bytes) = e8 16 fa ff ff
0032h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0035h call 7FFDDBA17B60h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFAD0h:jmp64]        encoding(5 bytes) = e8 96 fa ff ff
003ah nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
003bh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TernaryOpKindsBytes => new byte[64]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x88,0x4A,0x01,0x4C,0x0F,0xBF,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x4F,0x00,0x00,0x00,0xE8,0x0E,0xFA,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x16,0xFA,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x96,0xFA,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(UnaryLogicOpKind:uint kind, bit a)
; location: [7FFDDBA180F0h, 7FFDDBA18134h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
0008h ja short 003ah                ; JA(Ja_rel8_64) [3Ah:jmp64]                           encoding(2 bytes) = 77 30
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch lea rcx,[7FFDDBA18138h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d 35 00 00 00
0013h mov ecx,[rcx+rax*4]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 0c 81
0016h lea r8,[7FFDDBA180F5h]        ; LEA(Lea_r64_m) [R8,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 05 e8 ff ff ff
001dh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0020h jmp rcx                       ; JMP(Jmp_rm64) [RCX]                                  encoding(2 bytes) = ff e1
0022h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0024h jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 19
0026h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0028h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
002ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
002dh jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 10
002fh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0031h jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 0c
0033h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0038h jmp short 003fh               ; JMP(Jmp_rel8_64) [3Fh:jmp64]                         encoding(2 bytes) = eb 05
003ah call 7FFDDBA17B90h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFAA0h:jmp64]        encoding(5 bytes) = e8 61 fa ff ff
003fh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0040h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0044h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[69]{0x48,0x83,0xEC,0x28,0x90,0x83,0xF9,0x03,0x77,0x30,0x8B,0xC1,0x48,0x8D,0x0D,0x35,0x00,0x00,0x00,0x8B,0x0C,0x81,0x4C,0x8D,0x05,0xE8,0xFF,0xFF,0xFF,0x49,0x03,0xC8,0xFF,0xE1,0x33,0xC0,0xEB,0x19,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x10,0x8B,0xC2,0xEB,0x0C,0xB8,0x01,0x00,0x00,0x00,0xEB,0x05,0xE8,0x61,0xFA,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(BinaryLogicOpKind:uint kind, bit a, bit b)
; location: [7FFDDBA18160h, 7FFDDBA18229h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h cmp ecx,0Fh                   ; CMP(Cmp_rm32_imm8) [ECX,fh:imm32]                    encoding(3 bytes) = 83 f9 0f
0008h ja near ptr 00bfh             ; JA(Ja_rel32_64) [BFh:jmp64]                          encoding(6 bytes) = 0f 87 b1 00 00 00
000eh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0010h lea rcx,[7FFDDBA18230h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d b9 00 00 00
0017h mov ecx,[rcx+rax*4]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 0c 81
001ah lea r9,[7FFDDBA18165h]        ; LEA(Lea_r64_m) [R9,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 0d e4 ff ff ff
0021h add rcx,r9                    ; ADD(Add_r64_rm64) [RCX,R9]                           encoding(3 bytes) = 49 03 c9
0024h jmp rcx                       ; JMP(Jmp_rm64) [RCX]                                  encoding(2 bytes) = ff e1
0026h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
002bh jmp near ptr 00c4h            ; JMP(Jmp_rel32_64) [C4h:jmp64]                        encoding(5 bytes) = e9 94 00 00 00
0030h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0032h jmp near ptr 00c4h            ; JMP(Jmp_rel32_64) [C4h:jmp64]                        encoding(5 bytes) = e9 8d 00 00 00
0037h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
003ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
003ch jmp near ptr 00c4h            ; JMP(Jmp_rel32_64) [C4h:jmp64]                        encoding(5 bytes) = e9 83 00 00 00
0041h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0043h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0046h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0048h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
004bh jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 77
004dh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
004fh or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
0052h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 70
0054h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0056h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
0059h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
005bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
005eh jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 64
0060h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0062h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0065h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 5d
0067h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0069h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
006ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
006eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0071h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 51
0073h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0076h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0078h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
007bh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
007dh jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 45
007fh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0081h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0083h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0086h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0089h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 39
008bh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
008dh jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 35
008fh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0092h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 30
0094h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0096h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0098h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
009bh jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 27
009dh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
00a0h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
00a2h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
00a5h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 1d
00a7h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
00a9h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
00abh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
00aeh or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
00b1h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 11
00b3h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
00b6h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
00b8h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
00bbh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
00bdh jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 05
00bfh call 7FFDDBA17BA0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFA40h:jmp64]        encoding(5 bytes) = e8 7c f9 ff ff
00c4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00c5h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00c9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[202]{0x48,0x83,0xEC,0x28,0x90,0x83,0xF9,0x0F,0x0F,0x87,0xB1,0x00,0x00,0x00,0x8B,0xC1,0x48,0x8D,0x0D,0xB9,0x00,0x00,0x00,0x8B,0x0C,0x81,0x4C,0x8D,0x0D,0xE4,0xFF,0xFF,0xFF,0x49,0x03,0xC9,0xFF,0xE1,0xB8,0x01,0x00,0x00,0x00,0xE9,0x94,0x00,0x00,0x00,0x33,0xC0,0xE9,0x8D,0x00,0x00,0x00,0x41,0x23,0xD0,0x8B,0xC2,0xE9,0x83,0x00,0x00,0x00,0x8B,0xC2,0x41,0x23,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x77,0x8B,0xC2,0x41,0x0B,0xC0,0xEB,0x70,0x8B,0xC2,0x41,0x0B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x64,0x8B,0xC2,0x41,0x33,0xC0,0xEB,0x5D,0x8B,0xC2,0x41,0x33,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x51,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0xEB,0x45,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xEB,0x39,0x8B,0xC2,0xEB,0x35,0x41,0x8B,0xC0,0xEB,0x30,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x27,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xEB,0x1D,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC0,0xEB,0x11,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xEB,0x05,0xE8,0x7C,0xF9,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryOp<bit> lookup(UnaryLogicOpKind:uint kind)
; location: [7FFDDBA18290h, 7FFDDBA183C5h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h cmp ecx,3                     ; CMP(Cmp_rm32_imm8) [ECX,3h:imm32]                    encoding(3 bytes) = 83 f9 03
0008h ja near ptr 0128h             ; JA(Ja_rel32_64) [128h:jmp64]                         encoding(6 bytes) = 0f 87 1a 01 00 00
000eh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
0010h lea rax,[7FFDDBA183C8h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 21 01 00 00
0017h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001ah lea rdx,[7FFDDBA18295h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e4 ff ff ff
0021h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0024h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0026h mov rcx,7FFDDBA0AD78h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0ad78h:imm64]         encoding(10 bytes) = 48 b9 78 ad a0 db fd 7f 00 00
0030h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24C220h:jmp64]                encoding(5 bytes) = e8 eb c1 24 5f
0035h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0038h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24B360h:jmp64]                encoding(5 bytes) = e8 1c b3 24 5f
0044h mov rcx,7FFDDAFFDE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde40h:imm64]         encoding(10 bytes) = 48 b9 40 de ff da fd 7f 00 00
004eh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0052h mov rcx,7FFDDB82FDA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fda8h:imm64]         encoding(10 bytes) = 48 b9 a8 fd 82 db fd 7f 00 00
005ch mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0060h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0063h jmp near ptr 012fh            ; JMP(Jmp_rel32_64) [12Fh:jmp64]                       encoding(5 bytes) = e9 c7 00 00 00
0068h mov rcx,7FFDDBA0AD78h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0ad78h:imm64]         encoding(10 bytes) = 48 b9 78 ad a0 db fd 7f 00 00
0072h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24C220h:jmp64]                encoding(5 bytes) = e8 a9 c1 24 5f
0077h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
007eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0081h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24B360h:jmp64]                encoding(5 bytes) = e8 da b2 24 5f
0086h mov rcx,7FFDDAFFDE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde40h:imm64]         encoding(10 bytes) = 48 b9 40 de ff da fd 7f 00 00
0090h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0094h mov rcx,7FFDDB82FDC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fdc8h:imm64]         encoding(10 bytes) = 48 b9 c8 fd 82 db fd 7f 00 00
009eh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00a2h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a5h jmp near ptr 012fh            ; JMP(Jmp_rel32_64) [12Fh:jmp64]                       encoding(5 bytes) = e9 85 00 00 00
00aah mov rcx,7FFDDBA0AD78h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0ad78h:imm64]         encoding(10 bytes) = 48 b9 78 ad a0 db fd 7f 00 00
00b4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24C220h:jmp64]                encoding(5 bytes) = e8 67 c1 24 5f
00b9h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24B360h:jmp64]                encoding(5 bytes) = e8 98 b2 24 5f
00c8h mov rcx,7FFDDAFFDE40h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde40h:imm64]         encoding(10 bytes) = 48 b9 40 de ff da fd 7f 00 00
00d2h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
00d6h mov rcx,7FFDDB82FD88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fd88h:imm64]         encoding(10 bytes) = 48 b9 88 fd 82 db fd 7f 00 00
00e0h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00e4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00e7h jmp short 012fh               ; JMP(Jmp_rel8_64) [12Fh:jmp64]                        encoding(2 bytes) = eb 46
00e9h mov rcx,7FFDDBA0AD78h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0ad78h:imm64]         encoding(10 bytes) = 48 b9 78 ad a0 db fd 7f 00 00
00f3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24C220h:jmp64]                encoding(5 bytes) = e8 28 c1 24 5f
00f8h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00fbh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00ffh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0102h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24B360h:jmp64]                encoding(5 bytes) = e8 59 b2 24 5f
0107h mov rax,7FFDDAFFDE40h         ; MOV(Mov_r64_imm64) [RAX,7ffddaffde40h:imm64]         encoding(10 bytes) = 48 b8 40 de ff da fd 7f 00 00
0111h mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
0115h mov rax,7FFDDB82FDB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82fdb0h:imm64]         encoding(10 bytes) = 48 b8 b0 fd 82 db fd 7f 00 00
011fh mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
0123h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0126h jmp short 012fh               ; JMP(Jmp_rel8_64) [12Fh:jmp64]                        encoding(2 bytes) = eb 07
0128h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
012ah call 7FFDDBA17C00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF970h:jmp64]        encoding(5 bytes) = e8 41 f8 ff ff
012fh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0130h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0134h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0135h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lookupBytes => new byte[310]{0x56,0x48,0x83,0xEC,0x20,0x83,0xF9,0x03,0x0F,0x87,0x1A,0x01,0x00,0x00,0x8B,0xC9,0x48,0x8D,0x05,0x21,0x01,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0x78,0xAD,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEB,0xC1,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x1C,0xB3,0x24,0x5F,0x48,0xB9,0x40,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xA8,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xC7,0x00,0x00,0x00,0x48,0xB9,0x78,0xAD,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA9,0xC1,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xDA,0xB2,0x24,0x5F,0x48,0xB9,0x40,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xC8,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x85,0x00,0x00,0x00,0x48,0xB9,0x78,0xAD,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x67,0xC1,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x98,0xB2,0x24,0x5F,0x48,0xB9,0x40,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x88,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x46,0x48,0xB9,0x78,0xAD,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x28,0xC1,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x59,0xB2,0x24,0x5F,0x48,0xB8,0x40,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0xB0,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0xEB,0x07,0x33,0xD2,0xE8,0x41,0xF8,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryOp<bit> lookup(BinaryLogicOpKind:uint kind)
; location: [7FFDDBA18800h, 7FFDDBA18C4Dh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h cmp ecx,0Fh                   ; CMP(Cmp_rm32_imm8) [ECX,fh:imm32]                    encoding(3 bytes) = 83 f9 0f
0008h ja near ptr 0440h             ; JA(Ja_rel32_64) [440h:jmp64]                         encoding(6 bytes) = 0f 87 32 04 00 00
000eh mov ecx,ecx                   ; MOV(Mov_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 8b c9
0010h lea rax,[7FFDDBA18C50h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 39 04 00 00
0017h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001ah lea rdx,[7FFDDBA18805h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e4 ff ff ff
0021h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0024h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0026h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0030h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 7b bc 24 5f
0035h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0038h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
003fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 ac ad 24 5f
0044h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
004eh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0052h mov rcx,7FFDDB82FDB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fdb8h:imm64]         encoding(10 bytes) = 48 b9 b8 fd 82 db fd 7f 00 00
005ch mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0060h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0063h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 df 03 00 00
0068h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0072h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 39 bc 24 5f
0077h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
007eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0081h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 6a ad 24 5f
0086h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
0090h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0094h mov rcx,7FFDDB82FD98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fd98h:imm64]         encoding(10 bytes) = 48 b9 98 fd 82 db fd 7f 00 00
009eh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00a2h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a5h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 9d 03 00 00
00aah mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
00b4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 f7 bb 24 5f
00b9h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00bch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 28 ad 24 5f
00c8h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
00d2h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
00d6h mov rcx,7FFDDB82FDD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fdd0h:imm64]         encoding(10 bytes) = 48 b9 d0 fd 82 db fd 7f 00 00
00e0h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00e4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00e7h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 5b 03 00 00
00ech mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
00f6h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 b5 bb 24 5f
00fbh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00feh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0102h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0105h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 e6 ac 24 5f
010ah mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
0114h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0118h mov rcx,7FFDDB82FDD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fdd8h:imm64]         encoding(10 bytes) = 48 b9 d8 fd 82 db fd 7f 00 00
0122h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0126h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0129h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 19 03 00 00
012eh mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0138h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 73 bb 24 5f
013dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0140h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0144h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0147h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 a4 ac 24 5f
014ch mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
0156h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
015ah mov rcx,7FFDDB82FDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fde0h:imm64]         encoding(10 bytes) = 48 b9 e0 fd 82 db fd 7f 00 00
0164h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0168h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
016bh jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 d7 02 00 00
0170h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
017ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 31 bb 24 5f
017fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0182h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0186h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0189h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 62 ac 24 5f
018eh mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
0198h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
019ch mov rcx,7FFDDB82FDE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fde8h:imm64]         encoding(10 bytes) = 48 b9 e8 fd 82 db fd 7f 00 00
01a6h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01aah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01adh jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 95 02 00 00
01b2h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
01bch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 ef ba 24 5f
01c1h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
01c4h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
01c8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01cbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 20 ac 24 5f
01d0h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
01dah mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01deh mov rcx,7FFDDB82FDF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fdf0h:imm64]         encoding(10 bytes) = 48 b9 f0 fd 82 db fd 7f 00 00
01e8h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01ech mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01efh jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 53 02 00 00
01f4h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
01feh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 ad ba 24 5f
0203h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0206h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
020ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
020dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 de ab 24 5f
0212h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
021ch mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0220h mov rcx,7FFDDB82FDF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fdf8h:imm64]         encoding(10 bytes) = 48 b9 f8 fd 82 db fd 7f 00 00
022ah mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
022eh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0231h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 11 02 00 00
0236h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0240h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 6b ba 24 5f
0245h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0248h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
024ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
024fh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 9c ab 24 5f
0254h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
025eh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0262h mov rcx,7FFDDB82FE10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe10h:imm64]         encoding(10 bytes) = 48 b9 10 fe 82 db fd 7f 00 00
026ch mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0270h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0273h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 cf 01 00 00
0278h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0282h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 29 ba 24 5f
0287h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
028ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
028eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0291h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 5a ab 24 5f
0296h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
02a0h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
02a4h mov rcx,7FFDDB82FE18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe18h:imm64]         encoding(10 bytes) = 48 b9 18 fe 82 db fd 7f 00 00
02aeh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
02b2h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
02b5h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 8d 01 00 00
02bah mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
02c4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 e7 b9 24 5f
02c9h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
02cch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
02d0h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
02d3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 18 ab 24 5f
02d8h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
02e2h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
02e6h mov rcx,7FFDDB82FE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe20h:imm64]         encoding(10 bytes) = 48 b9 20 fe 82 db fd 7f 00 00
02f0h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
02f4h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
02f7h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 4b 01 00 00
02fch mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0306h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 a5 b9 24 5f
030bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
030eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0312h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0315h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 d6 aa 24 5f
031ah mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
0324h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0328h mov rcx,7FFDDB82FE28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe28h:imm64]         encoding(10 bytes) = 48 b9 28 fe 82 db fd 7f 00 00
0332h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0336h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0339h jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 09 01 00 00
033eh mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
0348h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 63 b9 24 5f
034dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0350h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0354h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0357h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 94 aa 24 5f
035ch mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
0366h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
036ah mov rcx,7FFDDB82FE00h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe00h:imm64]         encoding(10 bytes) = 48 b9 00 fe 82 db fd 7f 00 00
0374h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0378h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
037bh jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 c7 00 00 00
0380h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
038ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 21 b9 24 5f
038fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0392h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0396h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0399h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 52 aa 24 5f
039eh mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
03a8h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
03ach mov rcx,7FFDDB82FE08h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe08h:imm64]         encoding(10 bytes) = 48 b9 08 fe 82 db fd 7f 00 00
03b6h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
03bah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
03bdh jmp near ptr 0447h            ; JMP(Jmp_rel32_64) [447h:jmp64]                       encoding(5 bytes) = e9 85 00 00 00
03c2h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
03cch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 df b8 24 5f
03d1h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
03d4h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
03d8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
03dbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 10 aa 24 5f
03e0h mov rcx,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b9 70 de ff da fd 7f 00 00
03eah mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
03eeh mov rcx,7FFDDB82FE30h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe30h:imm64]         encoding(10 bytes) = 48 b9 30 fe 82 db fd 7f 00 00
03f8h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
03fch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
03ffh jmp short 0447h               ; JMP(Jmp_rel8_64) [447h:jmp64]                        encoding(2 bytes) = eb 46
0401h mov rcx,7FFDDBA0B138h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b138h:imm64]         encoding(10 bytes) = 48 b9 38 b1 a0 db fd 7f 00 00
040bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F24BCB0h:jmp64]                encoding(5 bytes) = e8 a0 b8 24 5f
0410h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0413h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0417h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
041ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F24ADF0h:jmp64]                encoding(5 bytes) = e8 d1 a9 24 5f
041fh mov rax,7FFDDAFFDE70h         ; MOV(Mov_r64_imm64) [RAX,7ffddaffde70h:imm64]         encoding(10 bytes) = 48 b8 70 de ff da fd 7f 00 00
0429h mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
042dh mov rax,7FFDDB82FE38h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82fe38h:imm64]         encoding(10 bytes) = 48 b8 38 fe 82 db fd 7f 00 00
0437h mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
043bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
043eh jmp short 0447h               ; JMP(Jmp_rel8_64) [447h:jmp64]                        encoding(2 bytes) = eb 07
0440h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0442h call 7FFDDBA17C10h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF410h:jmp64]        encoding(5 bytes) = e8 c9 ef ff ff
0447h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0448h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
044ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
044dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lookupBytes => new byte[1102]{0x56,0x48,0x83,0xEC,0x20,0x83,0xF9,0x0F,0x0F,0x87,0x32,0x04,0x00,0x00,0x8B,0xC9,0x48,0x8D,0x05,0x39,0x04,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7B,0xBC,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xAC,0xAD,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xB8,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xDF,0x03,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x39,0xBC,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x6A,0xAD,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x98,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x9D,0x03,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF7,0xBB,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x28,0xAD,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xD0,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x5B,0x03,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB5,0xBB,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xE6,0xAC,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xD8,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x19,0x03,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x73,0xBB,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xA4,0xAC,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE0,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xD7,0x02,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x31,0xBB,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x62,0xAC,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE8,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x95,0x02,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEF,0xBA,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x20,0xAC,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xF0,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x53,0x02,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAD,0xBA,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xDE,0xAB,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xF8,0xFD,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x11,0x02,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6B,0xBA,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x9C,0xAB,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x10,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xCF,0x01,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x29,0xBA,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x5A,0xAB,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x18,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x8D,0x01,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE7,0xB9,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x18,0xAB,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x20,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x4B,0x01,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA5,0xB9,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD6,0xAA,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x28,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x09,0x01,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x63,0xB9,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x94,0xAA,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x00,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xC7,0x00,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0xB9,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x52,0xAA,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x08,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x85,0x00,0x00,0x00,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDF,0xB8,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x10,0xAA,0x24,0x5F,0x48,0xB9,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x30,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x46,0x48,0xB9,0x38,0xB1,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA0,0xB8,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD1,0xA9,0x24,0x5F,0x48,0xB8,0x70,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0x38,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0xEB,0x07,0x33,0xD2,0xE8,0xC9,0xEF,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit eval(TernaryOpKind:byte kind, bit a, bit b, bit c)
; location: [7FFDDBA18CB0h, 7FFDDBA1ADA6h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,0C60h                 ; SUB(Sub_rm64_imm32) [RSP,c60h:imm64]                 encoding(7 bytes) = 48 81 ec 60 0c 00 00
0008h mov [rsp+0C78h],rdx           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 78 0c 00 00
0010h mov [rsp+0C80h],r8            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(8 bytes) = 4c 89 84 24 80 0c 00 00
0018h mov [rsp+0C88h],r9            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R9]         encoding(8 bytes) = 4c 89 8c 24 88 0c 00 00
0020h movzx esi,cl                  ; MOVZX(Movzx_r32_rm8) [ESI,CL]                        encoding(4 bytes) = 40 0f b6 f1
0024h cmp esi,5Ah                   ; CMP(Cmp_rm32_imm8) [ESI,5ah:imm32]                   encoding(3 bytes) = 83 fe 5a
0027h ja short 0041h                ; JA(Ja_rel8_64) [41h:jmp64]                           encoding(2 bytes) = 77 18
0029h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
002bh lea rdx,[7FFDDBA1ADA8h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 c6 20 00 00
0032h mov edx,[rdx+rax*4]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 14 82
0035h lea rcx,[7FFDDBA18CD0h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 0d e4 ff ff ff
003ch add rdx,rcx                   ; ADD(Add_r64_rm64) [RDX,RCX]                          encoding(3 bytes) = 48 03 d1
003fh jmp rdx                       ; JMP(Jmp_rm64) [RDX]                                  encoding(2 bytes) = ff e2
0041h cmp cl,0FFh                   ; CMP(Cmp_rm8_imm8) [CL,ffh:imm8]                      encoding(3 bytes) = 80 f9 ff
0044h je near ptr 20c8h             ; JE(Je_rel32_64) [20C8h:jmp64]                        encoding(6 bytes) = 0f 84 7e 20 00 00
004ah jmp near ptr 20e5h            ; JMP(Jmp_rel32_64) [20E5h:jmp64]                      encoding(5 bytes) = e9 96 20 00 00
004fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0051h mov [rsp+0C58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0c 00 00
0058h mov eax,[rsp+0C58h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 58 0c 00 00
005fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 89 20 00 00
0064h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
006bh mov [rsp+0C50h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 0c 00 00
0072h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0079h mov [rsp+0C48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0c 00 00
0080h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0087h mov [rsp+0C40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0c 00 00
008eh mov edx,[rsp+0C48h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 0c 00 00
0095h mov [rsp+0C30h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 0c 00 00
009ch mov edx,[rsp+0C40h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 0c 00 00
00a3h mov [rsp+0C28h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 0c 00 00
00aah mov edx,[rsp+0C30h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 0c 00 00
00b1h mov [rsp+0C20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0c 00 00
00b8h mov edx,[rsp+0C28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0c 00 00
00bfh mov [rsp+0C18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0c 00 00
00c6h mov edx,[rsp+0C20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0c 00 00
00cdh or edx,[rsp+0C18h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 18 0c 00 00
00d4h mov [rsp+0C10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0c 00 00
00dbh mov edx,[rsp+0C10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0c 00 00
00e2h mov [rsp+0C38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0c 00 00
00e9h mov edx,[rsp+0C50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0c 00 00
00f0h mov [rsp+0C08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0c 00 00
00f7h mov edx,[rsp+0C38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0c 00 00
00feh mov [rsp+0C00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0c 00 00
0105h mov edx,[rsp+0C08h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 0c 00 00
010ch mov [rsp+0BF8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 0b 00 00
0113h mov edx,[rsp+0C00h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 0c 00 00
011ah mov [rsp+0BF0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 0b 00 00
0121h mov edx,[rsp+0BF8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 0b 00 00
0128h or edx,[rsp+0BF0h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 f0 0b 00 00
012fh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0131h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0134h mov [rsp+0BE8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 0b 00 00
013bh mov eax,[rsp+0BE8h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 0b 00 00
0142h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 a6 1f 00 00
0147h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
014eh mov [rsp+0BD0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d0 0b 00 00
0155h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
015ch mov [rsp+0BD8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 0b 00 00
0163h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
016ah mov [rsp+0BE0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 0b 00 00
0171h mov edx,[rsp+0BD8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 0b 00 00
0178h mov [rsp+0BC0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 0b 00 00
017fh mov edx,[rsp+0BD0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 0b 00 00
0186h mov [rsp+0BB8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 0b 00 00
018dh mov edx,[rsp+0BC0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 0b 00 00
0194h mov [rsp+0BB0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 0b 00 00
019bh mov edx,[rsp+0BB8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 0b 00 00
01a2h mov [rsp+0BA8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 0b 00 00
01a9h mov edx,[rsp+0BB0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 0b 00 00
01b0h or edx,[rsp+0BA8h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a8 0b 00 00
01b7h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
01b9h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
01bch mov [rsp+0BA0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 0b 00 00
01c3h mov edx,[rsp+0BA0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 0b 00 00
01cah mov [rsp+0BC8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 0b 00 00
01d1h mov edx,[rsp+0BE0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 0b 00 00
01d8h mov [rsp+0B98h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 0b 00 00
01dfh mov edx,[rsp+0BC8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 0b 00 00
01e6h mov [rsp+0B90h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 0b 00 00
01edh mov edx,[rsp+0B98h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 0b 00 00
01f4h mov [rsp+0B88h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 0b 00 00
01fbh mov edx,[rsp+0B90h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 0b 00 00
0202h mov [rsp+0B80h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 0b 00 00
0209h mov edx,[rsp+0B88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0b 00 00
0210h and edx,[rsp+0B80h]           ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 80 0b 00 00
0217h mov [rsp+0B78h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 0b 00 00
021eh mov eax,[rsp+0B78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0b 00 00
0225h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 c3 1e 00 00
022ah mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0231h mov [rsp+0B68h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 68 0b 00 00
0238h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
023fh mov [rsp+0B70h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 0b 00 00
0246h mov edx,[rsp+0B70h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 0b 00 00
024dh mov [rsp+0B60h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 0b 00 00
0254h mov edx,[rsp+0B68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0b 00 00
025bh mov [rsp+0B58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0b 00 00
0262h mov edx,[rsp+0B60h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 0b 00 00
0269h mov [rsp+0B50h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 0b 00 00
0270h mov edx,[rsp+0B58h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 0b 00 00
0277h mov [rsp+0B48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0b 00 00
027eh mov edx,[rsp+0B50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0b 00 00
0285h or edx,[rsp+0B48h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 48 0b 00 00
028ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
028eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0291h mov [rsp+0B40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0b 00 00
0298h mov eax,[rsp+0B40h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 40 0b 00 00
029fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 49 1e 00 00
02a4h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
02abh mov [rsp+0B30h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 0b 00 00
02b2h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
02b9h mov [rsp+0B38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0b 00 00
02c0h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
02c7h mov [rsp+0B28h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 0b 00 00
02ceh mov edx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 0b 00 00
02d5h mov [rsp+0B18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0b 00 00
02dch mov edx,[rsp+0B28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0b 00 00
02e3h mov [rsp+0B10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0b 00 00
02eah mov edx,[rsp+0B18h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 0b 00 00
02f1h mov [rsp+0B08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0b 00 00
02f8h mov edx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0b 00 00
02ffh mov [rsp+0B00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0b 00 00
0306h mov edx,[rsp+0B08h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 0b 00 00
030dh or edx,[rsp+0B00h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 00 0b 00 00
0314h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0316h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0319h mov [rsp+0AF8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 0a 00 00
0320h mov edx,[rsp+0AF8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 0a 00 00
0327h mov [rsp+0B20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0b 00 00
032eh mov edx,[rsp+0B38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0b 00 00
0335h mov [rsp+0AF0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 0a 00 00
033ch mov edx,[rsp+0B20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0b 00 00
0343h mov [rsp+0AE8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 0a 00 00
034ah mov edx,[rsp+0AF0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 0a 00 00
0351h mov [rsp+0AE0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 0a 00 00
0358h mov edx,[rsp+0AE8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 0a 00 00
035fh mov [rsp+0AD8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 0a 00 00
0366h mov edx,[rsp+0AE0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 0a 00 00
036dh and edx,[rsp+0AD8h]           ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 d8 0a 00 00
0374h mov [rsp+0AD0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 0a 00 00
037bh mov eax,[rsp+0AD0h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 d0 0a 00 00
0382h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 66 1d 00 00
0387h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
038eh mov [rsp+0AC0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 0a 00 00
0395h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
039ch mov [rsp+0AC8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 0a 00 00
03a3h mov edx,[rsp+0AC8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 0a 00 00
03aah mov [rsp+0AB8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 0a 00 00
03b1h mov edx,[rsp+0AC0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 0a 00 00
03b8h mov [rsp+0AB0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 0a 00 00
03bfh mov edx,[rsp+0AB8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 0a 00 00
03c6h mov [rsp+0AA8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 0a 00 00
03cdh mov edx,[rsp+0AB0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 0a 00 00
03d4h mov [rsp+0AA0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 0a 00 00
03dbh mov edx,[rsp+0AA8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 0a 00 00
03e2h or edx,[rsp+0AA0h]            ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a0 0a 00 00
03e9h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
03ebh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
03eeh mov [rsp+0A98h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 0a 00 00
03f5h mov eax,[rsp+0A98h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 98 0a 00 00
03fch jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 ec 1c 00 00
0401h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0408h mov [rsp+0A90h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 90 0a 00 00
040fh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0416h mov [rsp+0A88h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 0a 00 00
041dh mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0424h mov [rsp+0A80h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 0a 00 00
042bh mov edx,[rsp+0A90h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 0a 00 00
0432h mov [rsp+0A68h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 0a 00 00
0439h mov edx,[rsp+0A68h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 0a 00 00
0440h mov [rsp+0A60h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 0a 00 00
0447h mov edx,[rsp+0A60h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 0a 00 00
044eh mov [rsp+0A58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0a 00 00
0455h mov edx,[rsp+0A58h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 0a 00 00
045ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
045eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0461h mov [rsp+0A50h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 0a 00 00
0468h mov edx,[rsp+0A50h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 0a 00 00
046fh mov [rsp+0A78h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 0a 00 00
0476h mov edx,[rsp+0A88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0a 00 00
047dh mov [rsp+0A48h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 0a 00 00
0484h mov edx,[rsp+0A80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0a 00 00
048bh mov [rsp+0A40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0a 00 00
0492h mov edx,[rsp+0A48h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 0a 00 00
0499h mov [rsp+0A38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0a 00 00
04a0h mov edx,[rsp+0A40h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 0a 00 00
04a7h mov [rsp+0A30h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 0a 00 00
04aeh mov edx,[rsp+0A38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0a 00 00
04b5h xor edx,[rsp+0A30h]           ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 30 0a 00 00
04bch mov [rsp+0A28h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 0a 00 00
04c3h mov edx,[rsp+0A28h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 0a 00 00
04cah mov [rsp+0A70h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 0a 00 00
04d1h mov edx,[rsp+0A78h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 0a 00 00
04d8h mov [rsp+0A20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0a 00 00
04dfh mov edx,[rsp+0A70h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 0a 00 00
04e6h mov [rsp+0A18h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 0a 00 00
04edh mov edx,[rsp+0A20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0a 00 00
04f4h mov [rsp+0A10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0a 00 00
04fbh mov edx,[rsp+0A18h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 0a 00 00
0502h mov [rsp+0A08h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 0a 00 00
0509h mov edx,[rsp+0A10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0a 00 00
0510h and edx,[rsp+0A08h]           ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 08 0a 00 00
0517h mov [rsp+0A00h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 0a 00 00
051eh mov eax,[rsp+0A00h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 00 0a 00 00
0525h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 c3 1b 00 00
052ah mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0531h mov [rsp+9F8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f8 09 00 00
0538h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
053fh mov [rsp+9F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 09 00 00
0546h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
054dh mov [rsp+9E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 09 00 00
0554h mov edx,[rsp+9F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 09 00 00
055bh mov [rsp+9D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 09 00 00
0562h mov edx,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 09 00 00
0569h mov [rsp+9D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 09 00 00
0570h mov edx,[rsp+9D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 09 00 00
0577h mov [rsp+9C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 09 00 00
057eh mov edx,[rsp+9D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 09 00 00
0585h mov [rsp+9C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 09 00 00
058ch mov edx,[rsp+9C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 09 00 00
0593h and edx,[rsp+9C0h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 c0 09 00 00
059ah mov [rsp+9B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 09 00 00
05a1h mov edx,[rsp+9B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 09 00 00
05a8h mov [rsp+9E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 09 00 00
05afh mov edx,[rsp+9F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 09 00 00
05b6h mov [rsp+9B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 09 00 00
05bdh mov edx,[rsp+9E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 09 00 00
05c4h mov [rsp+9A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 09 00 00
05cbh mov edx,[rsp+9B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 09 00 00
05d2h mov [rsp+9A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 09 00 00
05d9h mov edx,[rsp+9A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 09 00 00
05e0h mov [rsp+998h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 09 00 00
05e7h mov edx,[rsp+9A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 09 00 00
05eeh or edx,[rsp+998h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 98 09 00 00
05f5h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
05f7h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
05fah mov [rsp+990h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 09 00 00
0601h mov eax,[rsp+990h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 09 00 00
0608h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 e0 1a 00 00
060dh mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0614h mov [rsp+988h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 09 00 00
061bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0622h mov [rsp+980h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 09 00 00
0629h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0630h mov [rsp+970h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 09 00 00
0637h mov edx,[rsp+988h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 09 00 00
063eh mov [rsp+960h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 09 00 00
0645h mov edx,[rsp+960h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 09 00 00
064ch mov [rsp+958h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 09 00 00
0653h mov edx,[rsp+958h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 09 00 00
065ah mov [rsp+950h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 09 00 00
0661h mov edx,[rsp+950h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 09 00 00
0668h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
066ah and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
066dh mov [rsp+948h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 09 00 00
0674h mov edx,[rsp+948h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 09 00 00
067bh mov [rsp+978h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 09 00 00
0682h mov edx,[rsp+978h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 09 00 00
0689h mov [rsp+940h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 09 00 00
0690h mov edx,[rsp+980h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 09 00 00
0697h mov [rsp+938h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 09 00 00
069eh mov edx,[rsp+940h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 09 00 00
06a5h mov [rsp+930h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 09 00 00
06ach mov edx,[rsp+938h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 09 00 00
06b3h mov [rsp+928h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 09 00 00
06bah mov edx,[rsp+930h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 09 00 00
06c1h and edx,[rsp+928h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 28 09 00 00
06c8h mov [rsp+920h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 09 00 00
06cfh mov edx,[rsp+920h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 09 00 00
06d6h mov [rsp+968h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 09 00 00
06ddh mov edx,[rsp+968h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 09 00 00
06e4h mov [rsp+918h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 09 00 00
06ebh mov edx,[rsp+970h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 09 00 00
06f2h mov [rsp+910h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 09 00 00
06f9h mov edx,[rsp+918h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 09 00 00
0700h mov [rsp+908h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 09 00 00
0707h mov edx,[rsp+910h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 09 00 00
070eh mov [rsp+900h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 09 00 00
0715h mov edx,[rsp+908h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 09 00 00
071ch and edx,[rsp+900h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 00 09 00 00
0723h mov [rsp+8F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 08 00 00
072ah mov eax,[rsp+8F8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f8 08 00 00
0731h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b7 19 00 00
0736h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
073dh mov [rsp+8F0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f0 08 00 00
0744h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
074bh mov [rsp+8E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 08 00 00
0752h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0759h mov [rsp+8E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 08 00 00
0760h mov edx,[rsp+8E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 08 00 00
0767h mov [rsp+8D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 08 00 00
076eh mov edx,[rsp+8E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 08 00 00
0775h mov [rsp+8C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 08 00 00
077ch mov edx,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 08 00 00
0783h mov [rsp+8C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 08 00 00
078ah mov edx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 08 00 00
0791h mov [rsp+8B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 08 00 00
0798h mov edx,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 08 00 00
079fh xor edx,[rsp+8B8h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 b8 08 00 00
07a6h mov [rsp+8B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 08 00 00
07adh mov edx,[rsp+8B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 08 00 00
07b4h mov [rsp+8D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 08 00 00
07bbh mov edx,[rsp+8F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 08 00 00
07c2h mov [rsp+8A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 08 00 00
07c9h mov edx,[rsp+8D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 08 00 00
07d0h mov [rsp+8A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 08 00 00
07d7h mov edx,[rsp+8A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 08 00 00
07deh mov [rsp+898h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 08 00 00
07e5h mov edx,[rsp+8A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 08 00 00
07ech mov [rsp+890h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 08 00 00
07f3h mov edx,[rsp+898h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 08 00 00
07fah or edx,[rsp+890h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 90 08 00 00
0801h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0803h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0806h mov [rsp+888h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 08 00 00
080dh mov eax,[rsp+888h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 88 08 00 00
0814h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d4 18 00 00
0819h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0820h mov [rsp+878h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 08 00 00
0827h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
082eh mov [rsp+880h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 08 00 00
0835h mov edx,[rsp+878h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 08 00 00
083ch mov [rsp+868h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 08 00 00
0843h mov edx,[rsp+868h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 08 00 00
084ah mov [rsp+860h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 08 00 00
0851h mov edx,[rsp+860h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 08 00 00
0858h mov [rsp+858h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 08 00 00
085fh mov edx,[rsp+858h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 08 00 00
0866h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0868h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
086bh mov [rsp+850h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 08 00 00
0872h mov edx,[rsp+850h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 08 00 00
0879h mov [rsp+870h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 08 00 00
0880h mov edx,[rsp+880h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 08 00 00
0887h mov [rsp+848h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 08 00 00
088eh mov edx,[rsp+870h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 08 00 00
0895h mov [rsp+840h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 08 00 00
089ch mov edx,[rsp+848h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 08 00 00
08a3h mov [rsp+838h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 08 00 00
08aah mov edx,[rsp+840h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 08 00 00
08b1h mov [rsp+830h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 08 00 00
08b8h mov edx,[rsp+838h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 08 00 00
08bfh and edx,[rsp+830h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 30 08 00 00
08c6h mov [rsp+828h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 08 00 00
08cdh mov eax,[rsp+828h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 28 08 00 00
08d4h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 14 18 00 00
08d9h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
08e0h mov [rsp+820h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 20 08 00 00
08e7h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
08eeh mov [rsp+818h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 08 00 00
08f5h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
08fch mov [rsp+800h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 08 00 00
0903h mov edx,[rsp+820h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 08 00 00
090ah mov [rsp+7E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 07 00 00
0911h mov edx,[rsp+7E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 07 00 00
0918h mov [rsp+7E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 07 00 00
091fh mov edx,[rsp+7E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 07 00 00
0926h mov [rsp+7D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 07 00 00
092dh mov edx,[rsp+7D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 07 00 00
0934h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0936h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0939h mov [rsp+7D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 07 00 00
0940h mov edx,[rsp+7D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 07 00 00
0947h mov [rsp+810h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 08 00 00
094eh mov dword ptr [rsp+7C8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c8 07 00 00 01 00 00 00
0959h mov edx,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 07 00 00
0960h mov [rsp+808h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 08 00 00
0967h mov edx,[rsp+818h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 08 00 00
096eh mov [rsp+7C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 07 00 00
0975h mov edx,[rsp+808h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 08 00 00
097ch mov [rsp+7B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 07 00 00
0983h mov edx,[rsp+7C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 07 00 00
098ah mov [rsp+7B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 07 00 00
0991h mov edx,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 07 00 00
0998h mov [rsp+7A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 07 00 00
099fh mov edx,[rsp+7B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 07 00 00
09a6h xor edx,[rsp+7A8h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 a8 07 00 00
09adh mov [rsp+7A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 07 00 00
09b4h mov edx,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 07 00 00
09bbh mov [rsp+7F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 07 00 00
09c2h mov edx,[rsp+7F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 07 00 00
09c9h mov [rsp+798h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 07 00 00
09d0h mov edx,[rsp+800h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 08 00 00
09d7h mov [rsp+790h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 07 00 00
09deh mov edx,[rsp+798h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 07 00 00
09e5h mov [rsp+788h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 07 00 00
09ech mov edx,[rsp+790h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 07 00 00
09f3h mov [rsp+780h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 07 00 00
09fah mov edx,[rsp+788h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 07 00 00
0a01h or edx,[rsp+780h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 80 07 00 00
0a08h mov [rsp+778h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 07 00 00
0a0fh mov edx,[rsp+778h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 07 00 00
0a16h mov [rsp+7F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 07 00 00
0a1dh mov edx,[rsp+810h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 08 00 00
0a24h mov [rsp+770h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 07 00 00
0a2bh mov edx,[rsp+7F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 07 00 00
0a32h mov [rsp+768h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 07 00 00
0a39h mov edx,[rsp+770h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 07 00 00
0a40h mov [rsp+760h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 07 00 00
0a47h mov edx,[rsp+768h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 07 00 00
0a4eh mov [rsp+758h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 07 00 00
0a55h mov edx,[rsp+760h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 07 00 00
0a5ch and edx,[rsp+758h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 58 07 00 00
0a63h mov [rsp+750h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 07 00 00
0a6ah mov eax,[rsp+750h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 50 07 00 00
0a71h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 77 16 00 00
0a76h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0a7dh mov [rsp+740h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 40 07 00 00
0a84h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0a8bh mov [rsp+748h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 07 00 00
0a92h mov edx,[rsp+740h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 07 00 00
0a99h mov [rsp+730h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 07 00 00
0aa0h mov edx,[rsp+730h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 07 00 00
0aa7h mov [rsp+728h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 07 00 00
0aaeh mov edx,[rsp+728h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 07 00 00
0ab5h mov [rsp+720h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 07 00 00
0abch mov edx,[rsp+720h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 07 00 00
0ac3h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0ac5h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0ac8h mov [rsp+718h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 07 00 00
0acfh mov edx,[rsp+718h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 07 00 00
0ad6h mov [rsp+738h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 07 00 00
0addh mov edx,[rsp+748h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 07 00 00
0ae4h mov [rsp+710h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 07 00 00
0aebh mov edx,[rsp+738h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 07 00 00
0af2h mov [rsp+708h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 07 00 00
0af9h mov edx,[rsp+710h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 07 00 00
0b00h mov [rsp+700h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 07 00 00
0b07h mov edx,[rsp+708h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 07 00 00
0b0eh mov [rsp+6F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 06 00 00
0b15h mov edx,[rsp+700h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 07 00 00
0b1ch and edx,[rsp+6F8h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 f8 06 00 00
0b23h mov [rsp+6F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 06 00 00
0b2ah mov eax,[rsp+6F0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f0 06 00 00
0b31h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b7 15 00 00
0b36h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0b3dh mov [rsp+6E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 06 00 00
0b44h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0b4bh mov [rsp+6E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 06 00 00
0b52h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0b59h mov [rsp+6D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 06 00 00
0b60h mov edx,[rsp+6E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 06 00 00
0b67h mov [rsp+6B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 06 00 00
0b6eh mov edx,[rsp+6B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 06 00 00
0b75h mov [rsp+6A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 06 00 00
0b7ch mov edx,[rsp+6A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 06 00 00
0b83h mov [rsp+6A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 06 00 00
0b8ah mov edx,[rsp+6A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 06 00 00
0b91h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0b93h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0b96h mov [rsp+698h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 06 00 00
0b9dh mov edx,[rsp+698h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 06 00 00
0ba4h mov [rsp+6D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 06 00 00
0babh mov dword ptr [rsp+690h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 90 06 00 00 01 00 00 00
0bb6h mov edx,[rsp+690h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 06 00 00
0bbdh mov [rsp+6C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 06 00 00
0bc4h mov edx,[rsp+6D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 06 00 00
0bcbh mov [rsp+688h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 06 00 00
0bd2h mov edx,[rsp+6C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 06 00 00
0bd9h mov [rsp+680h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 06 00 00
0be0h mov edx,[rsp+688h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 06 00 00
0be7h mov [rsp+678h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 06 00 00
0beeh mov edx,[rsp+680h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 06 00 00
0bf5h mov [rsp+670h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 06 00 00
0bfch mov edx,[rsp+678h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 06 00 00
0c03h xor edx,[rsp+670h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 70 06 00 00
0c0ah mov [rsp+668h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 06 00 00
0c11h mov edx,[rsp+668h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 06 00 00
0c18h mov [rsp+6C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 06 00 00
0c1fh mov edx,[rsp+6E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 06 00 00
0c26h mov [rsp+660h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 06 00 00
0c2dh mov edx,[rsp+6C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 06 00 00
0c34h mov [rsp+658h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 06 00 00
0c3bh mov edx,[rsp+660h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 06 00 00
0c42h mov [rsp+650h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 06 00 00
0c49h mov edx,[rsp+658h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 06 00 00
0c50h mov [rsp+648h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 06 00 00
0c57h mov edx,[rsp+650h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 06 00 00
0c5eh or edx,[rsp+648h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 48 06 00 00
0c65h mov [rsp+640h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 06 00 00
0c6ch mov edx,[rsp+640h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 06 00 00
0c73h mov [rsp+6B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 06 00 00
0c7ah mov edx,[rsp+6D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 06 00 00
0c81h mov [rsp+638h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 06 00 00
0c88h mov edx,[rsp+6B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 06 00 00
0c8fh mov [rsp+630h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 06 00 00
0c96h mov edx,[rsp+638h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 06 00 00
0c9dh mov [rsp+628h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 06 00 00
0ca4h mov edx,[rsp+630h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 06 00 00
0cabh mov [rsp+620h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 06 00 00
0cb2h mov edx,[rsp+628h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 06 00 00
0cb9h and edx,[rsp+620h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 20 06 00 00
0cc0h mov [rsp+618h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 06 00 00
0cc7h mov eax,[rsp+618h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 06 00 00
0cceh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 1a 14 00 00
0cd3h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0cdah mov [rsp+610h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 10 06 00 00
0ce1h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0ce8h mov [rsp+608h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 06 00 00
0cefh mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0cf6h mov [rsp+600h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 06 00 00
0cfdh mov edx,[rsp+610h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 06 00 00
0d04h mov [rsp+5E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 05 00 00
0d0bh mov edx,[rsp+5E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 05 00 00
0d12h mov [rsp+5E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 05 00 00
0d19h mov edx,[rsp+5E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 05 00 00
0d20h mov [rsp+5D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 05 00 00
0d27h mov edx,[rsp+5D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 05 00 00
0d2eh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0d30h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0d33h mov [rsp+5D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 05 00 00
0d3ah mov edx,[rsp+5D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 05 00 00
0d41h mov [rsp+5F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 05 00 00
0d48h mov edx,[rsp+608h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 06 00 00
0d4fh mov [rsp+5C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 05 00 00
0d56h mov edx,[rsp+600h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 06 00 00
0d5dh mov [rsp+5C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 05 00 00
0d64h mov edx,[rsp+5C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 05 00 00
0d6bh mov [rsp+5B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 05 00 00
0d72h mov edx,[rsp+5C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 05 00 00
0d79h mov [rsp+5B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 05 00 00
0d80h mov edx,[rsp+5B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 05 00 00
0d87h or edx,[rsp+5B0h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 b0 05 00 00
0d8eh mov [rsp+5A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 05 00 00
0d95h mov edx,[rsp+5A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 05 00 00
0d9ch mov [rsp+5F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 05 00 00
0da3h mov edx,[rsp+5F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 05 00 00
0daah mov [rsp+5A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 05 00 00
0db1h mov edx,[rsp+5F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 05 00 00
0db8h mov [rsp+598h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 05 00 00
0dbfh mov edx,[rsp+5A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 05 00 00
0dc6h mov [rsp+590h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 05 00 00
0dcdh mov edx,[rsp+598h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 05 00 00
0dd4h mov [rsp+588h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 05 00 00
0ddbh mov edx,[rsp+590h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 05 00 00
0de2h and edx,[rsp+588h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 88 05 00 00
0de9h mov [rsp+580h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 05 00 00
0df0h mov eax,[rsp+580h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 80 05 00 00
0df7h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f1 12 00 00
0dfch mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0e03h mov [rsp+578h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 05 00 00
0e0ah mov edx,[rsp+578h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 05 00 00
0e11h mov [rsp+570h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 05 00 00
0e18h mov edx,[rsp+570h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 05 00 00
0e1fh mov [rsp+568h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 05 00 00
0e26h mov edx,[rsp+568h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 05 00 00
0e2dh mov [rsp+560h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 05 00 00
0e34h mov edx,[rsp+560h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 05 00 00
0e3bh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0e3dh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0e40h mov [rsp+558h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 05 00 00
0e47h mov eax,[rsp+558h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 58 05 00 00
0e4eh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 9a 12 00 00
0e53h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0e5ah mov [rsp+550h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 05 00 00
0e61h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0e68h mov [rsp+548h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 05 00 00
0e6fh mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0e76h mov [rsp+540h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 05 00 00
0e7dh mov edx,[rsp+548h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 05 00 00
0e84h mov [rsp+530h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 05 00 00
0e8bh mov edx,[rsp+540h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 05 00 00
0e92h mov [rsp+528h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 05 00 00
0e99h mov edx,[rsp+530h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 05 00 00
0ea0h mov [rsp+520h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 05 00 00
0ea7h mov edx,[rsp+528h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 05 00 00
0eaeh mov [rsp+518h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 05 00 00
0eb5h mov edx,[rsp+520h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 05 00 00
0ebch or edx,[rsp+518h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 18 05 00 00
0ec3h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0ec5h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0ec8h mov [rsp+510h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 05 00 00
0ecfh mov edx,[rsp+510h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 05 00 00
0ed6h mov [rsp+538h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 05 00 00
0eddh mov edx,[rsp+550h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 05 00 00
0ee4h mov [rsp+508h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 05 00 00
0eebh mov edx,[rsp+538h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 05 00 00
0ef2h mov [rsp+500h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 05 00 00
0ef9h mov edx,[rsp+508h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 05 00 00
0f00h mov [rsp+4F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 04 00 00
0f07h mov edx,[rsp+500h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 05 00 00
0f0eh mov [rsp+4F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 04 00 00
0f15h mov edx,[rsp+4F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 04 00 00
0f1ch and edx,[rsp+4F0h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 f0 04 00 00
0f23h mov [rsp+4E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 04 00 00
0f2ah mov eax,[rsp+4E8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 04 00 00
0f31h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b7 11 00 00
0f36h mov eax,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 80 0c 00 00
0f3dh mov [rsp+4D8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d8 04 00 00
0f44h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0f4bh mov [rsp+4E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 04 00 00
0f52h mov edx,[rsp+4E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 04 00 00
0f59h mov [rsp+4D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 04 00 00
0f60h mov edx,[rsp+4D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 04 00 00
0f67h mov [rsp+4C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 04 00 00
0f6eh mov edx,[rsp+4D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 04 00 00
0f75h mov [rsp+4C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 04 00 00
0f7ch mov edx,[rsp+4C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 04 00 00
0f83h mov [rsp+4B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 04 00 00
0f8ah mov edx,[rsp+4C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 04 00 00
0f91h or edx,[rsp+4B8h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 b8 04 00 00
0f98h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0f9ah and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0f9dh mov [rsp+4B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 04 00 00
0fa4h mov eax,[rsp+4B0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 b0 04 00 00
0fabh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 3d 11 00 00
0fb0h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
0fb7h mov [rsp+4A0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 a0 04 00 00
0fbeh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
0fc5h mov [rsp+4A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 04 00 00
0fcch mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
0fd3h mov [rsp+498h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 04 00 00
0fdah mov edx,[rsp+4A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 04 00 00
0fe1h mov [rsp+480h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 04 00 00
0fe8h mov edx,[rsp+480h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 04 00 00
0fefh mov [rsp+478h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 04 00 00
0ff6h mov edx,[rsp+478h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 04 00 00
0ffdh mov [rsp+470h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 04 00 00
1004h mov edx,[rsp+470h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 04 00 00
100bh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
100dh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
1010h mov [rsp+468h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 04 00 00
1017h mov edx,[rsp+468h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 04 00 00
101eh mov [rsp+490h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 04 00 00
1025h mov edx,[rsp+4A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 04 00 00
102ch mov [rsp+460h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 04 00 00
1033h mov edx,[rsp+498h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 04 00 00
103ah mov [rsp+458h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 04 00 00
1041h mov edx,[rsp+460h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 04 00 00
1048h mov [rsp+450h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 04 00 00
104fh mov edx,[rsp+458h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 04 00 00
1056h mov [rsp+448h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 04 00 00
105dh mov edx,[rsp+450h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 04 00 00
1064h xor edx,[rsp+448h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 48 04 00 00
106bh mov [rsp+440h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 04 00 00
1072h mov edx,[rsp+440h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 04 00 00
1079h mov [rsp+488h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 04 00 00
1080h mov edx,[rsp+490h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 04 00 00
1087h mov [rsp+438h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 04 00 00
108eh mov edx,[rsp+488h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 04 00 00
1095h mov [rsp+430h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 04 00 00
109ch mov edx,[rsp+438h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 04 00 00
10a3h mov [rsp+428h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 04 00 00
10aah mov edx,[rsp+430h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 04 00 00
10b1h mov [rsp+420h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 04 00 00
10b8h mov edx,[rsp+428h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 04 00 00
10bfh and edx,[rsp+420h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 20 04 00 00
10c6h mov [rsp+418h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 04 00 00
10cdh mov eax,[rsp+418h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 04 00 00
10d4h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 14 10 00 00
10d9h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
10e0h mov [rsp+408h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 08 04 00 00
10e7h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
10eeh mov [rsp+410h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 04 00 00
10f5h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
10fch mov [rsp+400h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 04 00 00
1103h mov edx,[rsp+408h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 04 00 00
110ah mov [rsp+3F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 03 00 00
1111h mov edx,[rsp+400h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 04 00 00
1118h mov [rsp+3E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 03 00 00
111fh mov edx,[rsp+3F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 03 00 00
1126h mov [rsp+3E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 03 00 00
112dh mov edx,[rsp+3E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 03 00 00
1134h mov [rsp+3D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 03 00 00
113bh mov edx,[rsp+3E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 03 00 00
1142h and edx,[rsp+3D8h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 d8 03 00 00
1149h mov [rsp+3D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 03 00 00
1150h mov edx,[rsp+3D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 03 00 00
1157h mov [rsp+3F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 03 00 00
115eh mov edx,[rsp+410h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 04 00 00
1165h mov [rsp+3C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 03 00 00
116ch mov edx,[rsp+3F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 03 00 00
1173h mov [rsp+3C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 03 00 00
117ah mov edx,[rsp+3C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 03 00 00
1181h mov [rsp+3B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 03 00 00
1188h mov edx,[rsp+3C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 03 00 00
118fh mov [rsp+3B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 03 00 00
1196h mov edx,[rsp+3B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 03 00 00
119dh or edx,[rsp+3B0h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 b0 03 00 00
11a4h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
11a6h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
11a9h mov [rsp+3A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 03 00 00
11b0h mov eax,[rsp+3A8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a8 03 00 00
11b7h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 31 0f 00 00
11bch mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
11c3h mov [rsp+398h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 98 03 00 00
11cah mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
11d1h mov [rsp+390h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 03 00 00
11d8h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
11dfh mov [rsp+3A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 03 00 00
11e6h mov edx,[rsp+3A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 03 00 00
11edh mov [rsp+378h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 03 00 00
11f4h mov edx,[rsp+378h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 03 00 00
11fbh mov [rsp+370h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 03 00 00
1202h mov edx,[rsp+370h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 03 00 00
1209h mov [rsp+368h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 03 00 00
1210h mov edx,[rsp+368h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 03 00 00
1217h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
1219h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
121ch mov [rsp+360h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 03 00 00
1223h mov edx,[rsp+360h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 03 00 00
122ah mov [rsp+388h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 03 00 00
1231h mov edx,[rsp+398h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 03 00 00
1238h mov [rsp+358h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 03 00 00
123fh mov edx,[rsp+390h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 03 00 00
1246h mov [rsp+350h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 03 00 00
124dh mov edx,[rsp+358h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 03 00 00
1254h mov [rsp+348h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 03 00 00
125bh mov edx,[rsp+350h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 03 00 00
1262h mov [rsp+340h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 03 00 00
1269h mov edx,[rsp+348h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 03 00 00
1270h xor edx,[rsp+340h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 40 03 00 00
1277h mov [rsp+338h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 03 00 00
127eh mov edx,[rsp+338h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 03 00 00
1285h mov [rsp+380h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 03 00 00
128ch mov edx,[rsp+388h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 03 00 00
1293h mov [rsp+330h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 03 00 00
129ah mov edx,[rsp+380h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 03 00 00
12a1h mov [rsp+328h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 03 00 00
12a8h mov edx,[rsp+330h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 03 00 00
12afh mov [rsp+320h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 03 00 00
12b6h mov edx,[rsp+328h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 03 00 00
12bdh mov [rsp+318h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 03 00 00
12c4h mov edx,[rsp+320h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 03 00 00
12cbh and edx,[rsp+318h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 18 03 00 00
12d2h mov [rsp+310h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 03 00 00
12d9h mov eax,[rsp+310h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 10 03 00 00
12e0h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 08 0e 00 00
12e5h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
12ech mov [rsp+300h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 00 03 00 00
12f3h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
12fah mov [rsp+2F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 02 00 00
1301h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
1308h mov [rsp+308h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 03 00 00
130fh mov edx,[rsp+300h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 03 00 00
1316h mov [rsp+2E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 02 00 00
131dh mov edx,[rsp+2F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 02 00 00
1324h mov [rsp+2E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 02 00 00
132bh mov edx,[rsp+2E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 02 00 00
1332h mov [rsp+2D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 02 00 00
1339h mov edx,[rsp+2E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 02 00 00
1340h mov [rsp+2D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 02 00 00
1347h mov edx,[rsp+2D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 02 00 00
134eh and edx,[rsp+2D0h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 d0 02 00 00
1355h mov [rsp+2C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 02 00 00
135ch mov edx,[rsp+2C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 02 00 00
1363h mov [rsp+2F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 02 00 00
136ah mov edx,[rsp+308h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 03 00 00
1371h mov [rsp+2C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 02 00 00
1378h mov edx,[rsp+2F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 02 00 00
137fh mov [rsp+2B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 02 00 00
1386h mov edx,[rsp+2C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 02 00 00
138dh mov [rsp+2B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 02 00 00
1394h mov edx,[rsp+2B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 02 00 00
139bh mov [rsp+2A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 02 00 00
13a2h mov edx,[rsp+2B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 02 00 00
13a9h or edx,[rsp+2A8h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a8 02 00 00
13b0h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
13b2h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
13b5h mov [rsp+2A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 02 00 00
13bch mov eax,[rsp+2A0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a0 02 00 00
13c3h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 25 0d 00 00
13c8h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
13cfh mov [rsp+298h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 98 02 00 00
13d6h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
13ddh mov [rsp+290h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 02 00 00
13e4h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
13ebh mov [rsp+288h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 02 00 00
13f2h mov edx,[rsp+290h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 02 00 00
13f9h mov [rsp+270h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 02 00 00
1400h mov edx,[rsp+288h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 02 00 00
1407h mov [rsp+268h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 02 00 00
140eh mov edx,[rsp+270h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 02 00 00
1415h mov [rsp+260h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 02 00 00
141ch mov edx,[rsp+268h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 02 00 00
1423h mov [rsp+258h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 02 00 00
142ah mov edx,[rsp+260h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 02 00 00
1431h or edx,[rsp+258h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 58 02 00 00
1438h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
143ah and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
143dh mov [rsp+250h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 02 00 00
1444h mov edx,[rsp+250h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 02 00 00
144bh mov [rsp+280h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 02 00 00
1452h mov edx,[rsp+290h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 02 00 00
1459h mov [rsp+248h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 02 00 00
1460h mov edx,[rsp+288h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 02 00 00
1467h mov [rsp+240h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 02 00 00
146eh mov edx,[rsp+248h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 02 00 00
1475h mov [rsp+238h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 02 00 00
147ch mov edx,[rsp+240h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 02 00 00
1483h mov [rsp+230h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 02 00 00
148ah mov edx,[rsp+238h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 02 00 00
1491h xor edx,[rsp+230h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 30 02 00 00
1498h mov [rsp+228h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 02 00 00
149fh mov edx,[rsp+228h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 02 00 00
14a6h mov [rsp+278h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 02 00 00
14adh mov edx,[rsp+298h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 02 00 00
14b4h mov [rsp+220h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 02 00 00
14bbh mov edx,[rsp+280h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 02 00 00
14c2h mov [rsp+218h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 02 00 00
14c9h mov edx,[rsp+278h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 02 00 00
14d0h mov [rsp+210h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 02 00 00
14d7h mov edx,[rsp+220h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 02 00 00
14deh mov [rsp+208h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 02 00 00
14e5h mov edx,[rsp+218h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 18 02 00 00
14ech mov [rsp+200h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 02 00 00
14f3h mov edx,[rsp+210h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 02 00 00
14fah mov [rsp+1F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 01 00 00
1501h mov edx,[rsp+208h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 02 00 00
1508h and edx,[rsp+200h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 00 02 00 00
150fh mov ecx,[rsp+208h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 02 00 00
1516h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
1518h and ecx,[rsp+1F8h]            ; AND(And_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 8c 24 f8 01 00 00
151fh or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
1521h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
1524h mov [rsp+1F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 01 00 00
152bh mov eax,[rsp+1F0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f0 01 00 00
1532h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b6 0b 00 00
1537h mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
153eh mov [rsp+1E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 01 00 00
1545h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
154ch mov [rsp+1E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 01 00 00
1553h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
155ah mov [rsp+1D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 01 00 00
1561h mov edx,[rsp+1E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 01 00 00
1568h mov [rsp+1B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 01 00 00
156fh mov edx,[rsp+1D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 01 00 00
1576h mov [rsp+1B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 01 00 00
157dh mov edx,[rsp+1B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 01 00 00
1584h mov [rsp+1A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 01 00 00
158bh mov edx,[rsp+1B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 01 00 00
1592h mov [rsp+1A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 01 00 00
1599h mov edx,[rsp+1A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 01 00 00
15a0h or edx,[rsp+1A0h]             ; OR(Or_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]          encoding(7 bytes) = 0b 94 24 a0 01 00 00
15a7h mov [rsp+198h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 01 00 00
15aeh mov edx,[rsp+198h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 01 00 00
15b5h mov [rsp+1D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 01 00 00
15bch mov edx,[rsp+1E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 01 00 00
15c3h mov [rsp+190h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 01 00 00
15cah mov edx,[rsp+1D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 01 00 00
15d1h mov [rsp+188h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 01 00 00
15d8h mov edx,[rsp+190h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 01 00 00
15dfh mov [rsp+180h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 01 00 00
15e6h mov edx,[rsp+188h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 01 00 00
15edh mov [rsp+178h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 01 00 00
15f4h mov edx,[rsp+180h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 01 00 00
15fbh and edx,[rsp+178h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 78 01 00 00
1602h mov [rsp+170h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 01 00 00
1609h mov edx,[rsp+170h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 01 00 00
1610h mov [rsp+1C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 01 00 00
1617h mov edx,[rsp+1E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 01 00 00
161eh mov [rsp+168h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 01 00 00
1625h mov edx,[rsp+1D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 01 00 00
162ch mov [rsp+160h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 01 00 00
1633h mov edx,[rsp+1C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 01 00 00
163ah mov [rsp+158h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 01 00 00
1641h mov edx,[rsp+168h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 68 01 00 00
1648h mov [rsp+150h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 01 00 00
164fh mov edx,[rsp+160h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 01 00 00
1656h mov [rsp+148h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 01 00 00
165dh mov edx,[rsp+158h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 01 00 00
1664h mov [rsp+140h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 01 00 00
166bh mov edx,[rsp+150h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 50 01 00 00
1672h and edx,[rsp+148h]            ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 48 01 00 00
1679h mov ecx,[rsp+150h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 01 00 00
1680h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
1682h and ecx,[rsp+140h]            ; AND(And_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 8c 24 40 01 00 00
1689h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
168bh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
168eh mov [rsp+138h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 01 00 00
1695h mov edx,[rsp+138h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 01 00 00
169ch mov [rsp+1C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 01 00 00
16a3h mov edx,[rsp+1C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 01 00 00
16aah mov [rsp+130h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 01 00 00
16b1h mov edx,[rsp+130h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 01 00 00
16b8h mov [rsp+128h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 01 00 00
16bfh mov edx,[rsp+128h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 01 00 00
16c6h mov [rsp+120h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 01 00 00
16cdh mov edx,[rsp+120h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 01 00 00
16d4h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
16d6h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
16d9h mov [rsp+118h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 01 00 00
16e0h mov eax,[rsp+118h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 01 00 00
16e7h jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 01 0a 00 00
16ech mov eax,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0c 00 00
16f3h mov [rsp+110h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 10 01 00 00
16fah mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1701h mov [rsp+108h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 01 00 00
1708h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
170fh mov [rsp+100h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 01 00 00
1716h mov edx,[rsp+110h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 01 00 00
171dh mov [rsp+0E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 00 00 00
1724h mov edx,[rsp+108h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 08 01 00 00
172bh mov [rsp+0E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 00 00 00
1732h mov edx,[rsp+0E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 00 00 00
1739h mov [rsp+0D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 00 00 00
1740h mov edx,[rsp+0E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 00 00 00
1747h mov [rsp+0D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 00 00 00
174eh mov edx,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 00 00 00
1755h xor edx,[rsp+0D0h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 d0 00 00 00
175ch mov [rsp+0C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 00 00 00
1763h mov edx,[rsp+0C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 00 00 00
176ah mov [rsp+0F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 00 00 00
1771h mov edx,[rsp+110h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 01 00 00
1778h mov [rsp+0C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 00 00 00
177fh mov edx,[rsp+100h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 01 00 00
1786h mov [rsp+0B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 00 00 00
178dh mov edx,[rsp+0C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 00 00 00
1794h mov [rsp+0B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 00 00 00
179bh mov edx,[rsp+0B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 00 00 00
17a2h mov [rsp+0A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 00 00 00
17a9h mov edx,[rsp+0B0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b0 00 00 00
17b0h xor edx,[rsp+0A8h]            ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 33 94 24 a8 00 00 00
17b7h mov [rsp+0A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 00 00 00
17beh mov edx,[rsp+0A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 00 00 00
17c5h mov [rsp+0F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 00 00 00
17cch mov edx,[rsp+0F8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f8 00 00 00
17d3h mov [rsp+98h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 00 00 00
17dah mov edx,[rsp+0F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 00 00 00
17e1h mov [rsp+90h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 00 00 00
17e8h mov edx,[rsp+98h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 00 00 00
17efh mov [rsp+88h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 00 00 00
17f6h mov edx,[rsp+90h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 00 00 00
17fdh mov [rsp+80h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 00 00 00
1804h mov edx,[rsp+88h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 00 00 00
180bh and edx,[rsp+80h]             ; AND(And_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 23 94 24 80 00 00 00
1812h mov [rsp+78h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 78
1816h mov eax,[rsp+78h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 78
181ah jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 ce 08 00 00
181fh mov edx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 0c 00 00
1826h mov [rsp+60h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 60
182ah mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1831h mov [rsp+70h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 70
1835h mov edx,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 0c 00 00
183ch mov [rsp+68h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 68
1840h mov edx,[rsp+70h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 70
1844h mov [rsp+40h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 40
1848h mov edx,[rsp+68h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 68
184ch mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
1850h mov edx,[rsp+40h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 40
1854h mov [rsp+30h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 30
1858h mov edx,[rsp+38h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 38
185ch mov [rsp+28h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 28
1860h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1862h mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
1866h mov edx,[rsp+30h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 30
186ah xor edx,[rsp+28h]             ; XOR(Xor_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 33 54 24 28
186eh lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
1873h call 7FFDDB7F3390h            ; CALL(Call_rel32_64) [FFFFFFFFFFDDA6E0h:jmp64]        encoding(5 bytes) = e8 68 8e dd ff
1878h mov ecx,[rsp+20h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 20
187ch mov [rsp+58h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 58
1880h mov ecx,[rsp+70h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 70
1884h mov edx,[rsp+68h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 68
1888h call 7FFDDB82FDD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17120h:jmp64]        encoding(5 bytes) = e8 93 58 e1 ff
188dh mov [rsp+50h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 50
1891h mov ecx,[rsp+60h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 60
1895h mov edx,[rsp+50h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 50
1899h call 7FFDDB82FDD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17120h:jmp64]        encoding(5 bytes) = e8 82 58 e1 ff
189eh mov [rsp+48h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 48
18a2h mov ecx,[rsp+58h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 58
18a6h mov edx,[rsp+48h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 48
18aah call 7FFDDB82FDF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17140h:jmp64]        encoding(5 bytes) = e8 91 58 e1 ff
18afh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 08 00 00
18b4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
18bbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
18c2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
18cah call 7FFDDB82FF28h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17278h:jmp64]        encoding(5 bytes) = e8 a9 59 e1 ff
18cfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 08 00 00
18d4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
18dbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
18e2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
18eah call 7FFDDB82FF30h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17280h:jmp64]        encoding(5 bytes) = e8 91 59 e1 ff
18efh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 07 00 00
18f4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
18fbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1902h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
190ah call 7FFDDB82FF38h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17288h:jmp64]        encoding(5 bytes) = e8 79 59 e1 ff
190fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 07 00 00
1914h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
191bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1922h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
192ah call 7FFDDB82FF40h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17290h:jmp64]        encoding(5 bytes) = e8 61 59 e1 ff
192fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 07 00 00
1934h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
193bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1942h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
194ah call 7FFDDB82FF48h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17298h:jmp64]        encoding(5 bytes) = e8 49 59 e1 ff
194fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 07 00 00
1954h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
195bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1962h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
196ah call 7FFDDB82FF50h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172A0h:jmp64]        encoding(5 bytes) = e8 31 59 e1 ff
196fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 07 00 00
1974h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
197bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1982h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
198ah call 7FFDDB82FF58h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172A8h:jmp64]        encoding(5 bytes) = e8 19 59 e1 ff
198fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 07 00 00
1994h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
199bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
19a2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
19aah call 7FFDDB82FF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172B0h:jmp64]        encoding(5 bytes) = e8 01 59 e1 ff
19afh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 07 00 00
19b4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
19bbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
19c2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
19cah call 7FFDDB82FF68h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172B8h:jmp64]        encoding(5 bytes) = e8 e9 58 e1 ff
19cfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 07 00 00
19d4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
19dbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
19e2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
19eah call 7FFDDB82FF70h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172C0h:jmp64]        encoding(5 bytes) = e8 d1 58 e1 ff
19efh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 06 00 00
19f4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
19fbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a0ah call 7FFDDB82FF78h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172C8h:jmp64]        encoding(5 bytes) = e8 b9 58 e1 ff
1a0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 06 00 00
1a14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a2ah call 7FFDDB82FF80h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172D0h:jmp64]        encoding(5 bytes) = e8 a1 58 e1 ff
1a2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 06 00 00
1a34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a4ah call 7FFDDB82FF88h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172D8h:jmp64]        encoding(5 bytes) = e8 89 58 e1 ff
1a4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 06 00 00
1a54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a6ah call 7FFDDB82FF90h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172E0h:jmp64]        encoding(5 bytes) = e8 71 58 e1 ff
1a6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 06 00 00
1a74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1a82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1a8ah call 7FFDDB82FF98h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172E8h:jmp64]        encoding(5 bytes) = e8 59 58 e1 ff
1a8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 06 00 00
1a94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1a9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1aa2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1aaah call 7FFDDB82FFA0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172F0h:jmp64]        encoding(5 bytes) = e8 41 58 e1 ff
1aafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 06 00 00
1ab4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1abbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ac2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1acah call 7FFDDB82FFA8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE172F8h:jmp64]        encoding(5 bytes) = e8 29 58 e1 ff
1acfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 06 00 00
1ad4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1adbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ae2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1aeah call 7FFDDB82FFB0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17300h:jmp64]        encoding(5 bytes) = e8 11 58 e1 ff
1aefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 05 00 00
1af4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1afbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b0ah call 7FFDDB82FFB8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17308h:jmp64]        encoding(5 bytes) = e8 f9 57 e1 ff
1b0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 05 00 00
1b14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b2ah call 7FFDDB82FFC0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17310h:jmp64]        encoding(5 bytes) = e8 e1 57 e1 ff
1b2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 05 00 00
1b34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b4ah call 7FFDDB82FFC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17318h:jmp64]        encoding(5 bytes) = e8 c9 57 e1 ff
1b4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 05 00 00
1b54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b6ah call 7FFDDB82FFD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17320h:jmp64]        encoding(5 bytes) = e8 b1 57 e1 ff
1b6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 05 00 00
1b74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1b82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1b8ah call 7FFDDB82FFD8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17328h:jmp64]        encoding(5 bytes) = e8 99 57 e1 ff
1b8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 05 00 00
1b94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1b9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ba2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1baah call 7FFDDB82FFE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17330h:jmp64]        encoding(5 bytes) = e8 81 57 e1 ff
1bafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 05 00 00
1bb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1bbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1bc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1bcah call 7FFDDB82FFE8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17338h:jmp64]        encoding(5 bytes) = e8 69 57 e1 ff
1bcfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 05 00 00
1bd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1bdbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1be2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1beah call 7FFDDB82FFF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17340h:jmp64]        encoding(5 bytes) = e8 51 57 e1 ff
1befh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 04 00 00
1bf4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1bfbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c0ah call 7FFDDB82FFF8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17348h:jmp64]        encoding(5 bytes) = e8 39 57 e1 ff
1c0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 04 00 00
1c14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c2ah call 7FFDDB830000h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17350h:jmp64]        encoding(5 bytes) = e8 21 57 e1 ff
1c2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 04 00 00
1c34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c4ah call 7FFDDB830008h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17358h:jmp64]        encoding(5 bytes) = e8 09 57 e1 ff
1c4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 04 00 00
1c54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c6ah call 7FFDDB830010h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17360h:jmp64]        encoding(5 bytes) = e8 f1 56 e1 ff
1c6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 04 00 00
1c74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1c82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1c8ah call 7FFDDB830018h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17368h:jmp64]        encoding(5 bytes) = e8 d9 56 e1 ff
1c8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 04 00 00
1c94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1c9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ca2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1caah call 7FFDDB830020h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17370h:jmp64]        encoding(5 bytes) = e8 c1 56 e1 ff
1cafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 04 00 00
1cb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1cbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1cc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1ccah call 7FFDDB830028h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17378h:jmp64]        encoding(5 bytes) = e8 a9 56 e1 ff
1ccfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 04 00 00
1cd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1cdbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ce2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1ceah call 7FFDDB830030h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17380h:jmp64]        encoding(5 bytes) = e8 91 56 e1 ff
1cefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 03 00 00
1cf4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1cfbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d0ah call 7FFDDB830038h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17388h:jmp64]        encoding(5 bytes) = e8 79 56 e1 ff
1d0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 03 00 00
1d14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d2ah call 7FFDDB830040h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17390h:jmp64]        encoding(5 bytes) = e8 61 56 e1 ff
1d2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 03 00 00
1d34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d4ah call 7FFDDB830048h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17398h:jmp64]        encoding(5 bytes) = e8 49 56 e1 ff
1d4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 03 00 00
1d54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d6ah call 7FFDDB830050h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173A0h:jmp64]        encoding(5 bytes) = e8 31 56 e1 ff
1d6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 03 00 00
1d74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1d82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1d8ah call 7FFDDB830058h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173A8h:jmp64]        encoding(5 bytes) = e8 19 56 e1 ff
1d8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 03 00 00
1d94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1d9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1da2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1daah call 7FFDDB830060h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173B0h:jmp64]        encoding(5 bytes) = e8 01 56 e1 ff
1dafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 03 00 00
1db4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1dbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1dc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1dcah call 7FFDDB830068h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173B8h:jmp64]        encoding(5 bytes) = e8 e9 55 e1 ff
1dcfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 03 00 00
1dd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1ddbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1de2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1deah call 7FFDDB830070h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173C0h:jmp64]        encoding(5 bytes) = e8 d1 55 e1 ff
1defh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 02 00 00
1df4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1dfbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e0ah call 7FFDDB830078h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173C8h:jmp64]        encoding(5 bytes) = e8 b9 55 e1 ff
1e0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 02 00 00
1e14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e2ah call 7FFDDB830080h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173D0h:jmp64]        encoding(5 bytes) = e8 a1 55 e1 ff
1e2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 02 00 00
1e34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e4ah call 7FFDDB830088h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173D8h:jmp64]        encoding(5 bytes) = e8 89 55 e1 ff
1e4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 02 00 00
1e54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e6ah call 7FFDDB830090h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173E0h:jmp64]        encoding(5 bytes) = e8 71 55 e1 ff
1e6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 02 00 00
1e74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1e82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1e8ah call 7FFDDB830098h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173E8h:jmp64]        encoding(5 bytes) = e8 59 55 e1 ff
1e8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 02 00 00
1e94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1e9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ea2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1eaah call 7FFDDB8300A0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173F0h:jmp64]        encoding(5 bytes) = e8 41 55 e1 ff
1eafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 02 00 00
1eb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1ebbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ec2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1ecah call 7FFDDB8300A8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE173F8h:jmp64]        encoding(5 bytes) = e8 29 55 e1 ff
1ecfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 02 00 00
1ed4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1edbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1ee2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1eeah call 7FFDDB8300B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17400h:jmp64]        encoding(5 bytes) = e8 11 55 e1 ff
1eefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 01 00 00
1ef4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1efbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f02h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f0ah call 7FFDDB8300B8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17408h:jmp64]        encoding(5 bytes) = e8 f9 54 e1 ff
1f0fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 01 00 00
1f14h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f1bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f22h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f2ah call 7FFDDB8300C0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17410h:jmp64]        encoding(5 bytes) = e8 e1 54 e1 ff
1f2fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 01 00 00
1f34h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f3bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f42h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f4ah call 7FFDDB8300C8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17418h:jmp64]        encoding(5 bytes) = e8 c9 54 e1 ff
1f4fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 01 00 00
1f54h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f5bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f62h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f6ah call 7FFDDB8300D0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17420h:jmp64]        encoding(5 bytes) = e8 b1 54 e1 ff
1f6fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 79 01 00 00
1f74h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f7bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1f82h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1f8ah call 7FFDDB8300D8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17428h:jmp64]        encoding(5 bytes) = e8 99 54 e1 ff
1f8fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 59 01 00 00
1f94h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1f9bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1fa2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1faah call 7FFDDB8300E0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17430h:jmp64]        encoding(5 bytes) = e8 81 54 e1 ff
1fafh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 39 01 00 00
1fb4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1fbbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1fc2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1fcah call 7FFDDB8300E8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17438h:jmp64]        encoding(5 bytes) = e8 69 54 e1 ff
1fcfh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 19 01 00 00
1fd4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1fdbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
1fe2h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
1feah call 7FFDDB8300F0h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17440h:jmp64]        encoding(5 bytes) = e8 51 54 e1 ff
1fefh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 f9 00 00 00
1ff4h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
1ffbh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2002h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
200ah call 7FFDDB8300F8h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17448h:jmp64]        encoding(5 bytes) = e8 39 54 e1 ff
200fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 d9 00 00 00
2014h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
201bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2022h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
202ah call 7FFDDB830100h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17450h:jmp64]        encoding(5 bytes) = e8 21 54 e1 ff
202fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 b9 00 00 00
2034h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
203bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2042h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
204ah call 7FFDDB830108h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17458h:jmp64]        encoding(5 bytes) = e8 09 54 e1 ff
204fh jmp near ptr 20edh            ; JMP(Jmp_rel32_64) [20EDh:jmp64]                      encoding(5 bytes) = e9 99 00 00 00
2054h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
205bh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
2062h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
206ah call 7FFDDB830110h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17460h:jmp64]        encoding(5 bytes) = e8 f1 53 e1 ff
206fh jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 7c
2071h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
2078h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
207fh mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
2087h call 7FFDDB830118h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17468h:jmp64]        encoding(5 bytes) = e8 dc 53 e1 ff
208ch jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 5f
208eh mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
2095h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
209ch mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
20a4h call 7FFDDB830120h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17470h:jmp64]        encoding(5 bytes) = e8 c7 53 e1 ff
20a9h jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 42
20abh mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
20b2h mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
20b9h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
20c1h call 7FFDDB830128h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17478h:jmp64]        encoding(5 bytes) = e8 b2 53 e1 ff
20c6h jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 25
20c8h mov ecx,[rsp+0C78h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 0c 00 00
20cfh mov edx,[rsp+0C80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0c 00 00
20d6h mov r8d,[rsp+0C88h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 0c 00 00
20deh call 7FFDDB830128h            ; CALL(Call_rel32_64) [FFFFFFFFFFE17478h:jmp64]        encoding(5 bytes) = e8 95 53 e1 ff
20e3h jmp short 20edh               ; JMP(Jmp_rel8_64) [20EDh:jmp64]                       encoding(2 bytes) = eb 08
20e5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
20e8h call 7FFDDBA18440h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF790h:jmp64]        encoding(5 bytes) = e8 a3 d6 ff ff
20edh nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
20eeh add rsp,0C60h                 ; ADD(Add_rm64_imm32) [RSP,c60h:imm64]                 encoding(7 bytes) = 48 81 c4 60 0c 00 00
20f5h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
20f6h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> evalBytes => new byte[8439]{0x56,0x48,0x81,0xEC,0x60,0x0C,0x00,0x00,0x48,0x89,0x94,0x24,0x78,0x0C,0x00,0x00,0x4C,0x89,0x84,0x24,0x80,0x0C,0x00,0x00,0x4C,0x89,0x8C,0x24,0x88,0x0C,0x00,0x00,0x40,0x0F,0xB6,0xF1,0x83,0xFE,0x5A,0x77,0x18,0x8B,0xC6,0x48,0x8D,0x15,0xC6,0x20,0x00,0x00,0x8B,0x14,0x82,0x48,0x8D,0x0D,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xD1,0xFF,0xE2,0x80,0xF9,0xFF,0x0F,0x84,0x7E,0x20,0x00,0x00,0xE9,0x96,0x20,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x58,0x0C,0x00,0x00,0x8B,0x84,0x24,0x58,0x0C,0x00,0x00,0xE9,0x89,0x20,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x50,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x48,0x0C,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x40,0x0C,0x00,0x00,0x8B,0x94,0x24,0x48,0x0C,0x00,0x00,0x89,0x94,0x24,0x30,0x0C,0x00,0x00,0x8B,0x94,0x24,0x40,0x0C,0x00,0x00,0x89,0x94,0x24,0x28,0x0C,0x00,0x00,0x8B,0x94,0x24,0x30,0x0C,0x00,0x00,0x89,0x94,0x24,0x20,0x0C,0x00,0x00,0x8B,0x94,0x24,0x28,0x0C,0x00,0x00,0x89,0x94,0x24,0x18,0x0C,0x00,0x00,0x8B,0x94,0x24,0x20,0x0C,0x00,0x00,0x0B,0x94,0x24,0x18,0x0C,0x00,0x00,0x89,0x94,0x24,0x10,0x0C,0x00,0x00,0x8B,0x94,0x24,0x10,0x0C,0x00,0x00,0x89,0x94,0x24,0x38,0x0C,0x00,0x00,0x8B,0x94,0x24,0x50,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x0C,0x00,0x00,0x8B,0x94,0x24,0x38,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x0C,0x00,0x00,0x8B,0x94,0x24,0x08,0x0C,0x00,0x00,0x89,0x94,0x24,0xF8,0x0B,0x00,0x00,0x8B,0x94,0x24,0x00,0x0C,0x00,0x00,0x89,0x94,0x24,0xF0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xF8,0x0B,0x00,0x00,0x0B,0x94,0x24,0xF0,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xE8,0x0B,0x00,0x00,0x8B,0x84,0x24,0xE8,0x0B,0x00,0x00,0xE9,0xA6,0x1F,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xD0,0x0B,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xD8,0x0B,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xD8,0x0B,0x00,0x00,0x89,0x94,0x24,0xC0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xD0,0x0B,0x00,0x00,0x89,0x94,0x24,0xB8,0x0B,0x00,0x00,0x8B,0x94,0x24,0xC0,0x0B,0x00,0x00,0x89,0x94,0x24,0xB0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xB8,0x0B,0x00,0x00,0x89,0x94,0x24,0xA8,0x0B,0x00,0x00,0x8B,0x94,0x24,0xB0,0x0B,0x00,0x00,0x0B,0x94,0x24,0xA8,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xA0,0x0B,0x00,0x00,0x8B,0x94,0x24,0xA0,0x0B,0x00,0x00,0x89,0x94,0x24,0xC8,0x0B,0x00,0x00,0x8B,0x94,0x24,0xE0,0x0B,0x00,0x00,0x89,0x94,0x24,0x98,0x0B,0x00,0x00,0x8B,0x94,0x24,0xC8,0x0B,0x00,0x00,0x89,0x94,0x24,0x90,0x0B,0x00,0x00,0x8B,0x94,0x24,0x98,0x0B,0x00,0x00,0x89,0x94,0x24,0x88,0x0B,0x00,0x00,0x8B,0x94,0x24,0x90,0x0B,0x00,0x00,0x89,0x94,0x24,0x80,0x0B,0x00,0x00,0x8B,0x94,0x24,0x88,0x0B,0x00,0x00,0x23,0x94,0x24,0x80,0x0B,0x00,0x00,0x89,0x94,0x24,0x78,0x0B,0x00,0x00,0x8B,0x84,0x24,0x78,0x0B,0x00,0x00,0xE9,0xC3,0x1E,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x68,0x0B,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x70,0x0B,0x00,0x00,0x8B,0x94,0x24,0x70,0x0B,0x00,0x00,0x89,0x94,0x24,0x60,0x0B,0x00,0x00,0x8B,0x94,0x24,0x68,0x0B,0x00,0x00,0x89,0x94,0x24,0x58,0x0B,0x00,0x00,0x8B,0x94,0x24,0x60,0x0B,0x00,0x00,0x89,0x94,0x24,0x50,0x0B,0x00,0x00,0x8B,0x94,0x24,0x58,0x0B,0x00,0x00,0x89,0x94,0x24,0x48,0x0B,0x00,0x00,0x8B,0x94,0x24,0x50,0x0B,0x00,0x00,0x0B,0x94,0x24,0x48,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x40,0x0B,0x00,0x00,0x8B,0x84,0x24,0x40,0x0B,0x00,0x00,0xE9,0x49,0x1E,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x30,0x0B,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x38,0x0B,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x28,0x0B,0x00,0x00,0x8B,0x94,0x24,0x30,0x0B,0x00,0x00,0x89,0x94,0x24,0x18,0x0B,0x00,0x00,0x8B,0x94,0x24,0x28,0x0B,0x00,0x00,0x89,0x94,0x24,0x10,0x0B,0x00,0x00,0x8B,0x94,0x24,0x18,0x0B,0x00,0x00,0x89,0x94,0x24,0x08,0x0B,0x00,0x00,0x8B,0x94,0x24,0x10,0x0B,0x00,0x00,0x89,0x94,0x24,0x00,0x0B,0x00,0x00,0x8B,0x94,0x24,0x08,0x0B,0x00,0x00,0x0B,0x94,0x24,0x00,0x0B,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xF8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xF8,0x0A,0x00,0x00,0x89,0x94,0x24,0x20,0x0B,0x00,0x00,0x8B,0x94,0x24,0x38,0x0B,0x00,0x00,0x89,0x94,0x24,0xF0,0x0A,0x00,0x00,0x8B,0x94,0x24,0x20,0x0B,0x00,0x00,0x89,0x94,0x24,0xE8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xF0,0x0A,0x00,0x00,0x89,0x94,0x24,0xE0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xE8,0x0A,0x00,0x00,0x89,0x94,0x24,0xD8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xE0,0x0A,0x00,0x00,0x23,0x94,0x24,0xD8,0x0A,0x00,0x00,0x89,0x94,0x24,0xD0,0x0A,0x00,0x00,0x8B,0x84,0x24,0xD0,0x0A,0x00,0x00,0xE9,0x66,0x1D,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xC0,0x0A,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xC8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xC8,0x0A,0x00,0x00,0x89,0x94,0x24,0xB8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xC0,0x0A,0x00,0x00,0x89,0x94,0x24,0xB0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xB8,0x0A,0x00,0x00,0x89,0x94,0x24,0xA8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xB0,0x0A,0x00,0x00,0x89,0x94,0x24,0xA0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xA8,0x0A,0x00,0x00,0x0B,0x94,0x24,0xA0,0x0A,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x98,0x0A,0x00,0x00,0x8B,0x84,0x24,0x98,0x0A,0x00,0x00,0xE9,0xEC,0x1C,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x90,0x0A,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x88,0x0A,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x80,0x0A,0x00,0x00,0x8B,0x94,0x24,0x90,0x0A,0x00,0x00,0x89,0x94,0x24,0x68,0x0A,0x00,0x00,0x8B,0x94,0x24,0x68,0x0A,0x00,0x00,0x89,0x94,0x24,0x60,0x0A,0x00,0x00,0x8B,0x94,0x24,0x60,0x0A,0x00,0x00,0x89,0x94,0x24,0x58,0x0A,0x00,0x00,0x8B,0x94,0x24,0x58,0x0A,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x50,0x0A,0x00,0x00,0x8B,0x94,0x24,0x50,0x0A,0x00,0x00,0x89,0x94,0x24,0x78,0x0A,0x00,0x00,0x8B,0x94,0x24,0x88,0x0A,0x00,0x00,0x89,0x94,0x24,0x48,0x0A,0x00,0x00,0x8B,0x94,0x24,0x80,0x0A,0x00,0x00,0x89,0x94,0x24,0x40,0x0A,0x00,0x00,0x8B,0x94,0x24,0x48,0x0A,0x00,0x00,0x89,0x94,0x24,0x38,0x0A,0x00,0x00,0x8B,0x94,0x24,0x40,0x0A,0x00,0x00,0x89,0x94,0x24,0x30,0x0A,0x00,0x00,0x8B,0x94,0x24,0x38,0x0A,0x00,0x00,0x33,0x94,0x24,0x30,0x0A,0x00,0x00,0x89,0x94,0x24,0x28,0x0A,0x00,0x00,0x8B,0x94,0x24,0x28,0x0A,0x00,0x00,0x89,0x94,0x24,0x70,0x0A,0x00,0x00,0x8B,0x94,0x24,0x78,0x0A,0x00,0x00,0x89,0x94,0x24,0x20,0x0A,0x00,0x00,0x8B,0x94,0x24,0x70,0x0A,0x00,0x00,0x89,0x94,0x24,0x18,0x0A,0x00,0x00,0x8B,0x94,0x24,0x20,0x0A,0x00,0x00,0x89,0x94,0x24,0x10,0x0A,0x00,0x00,0x8B,0x94,0x24,0x18,0x0A,0x00,0x00,0x89,0x94,0x24,0x08,0x0A,0x00,0x00,0x8B,0x94,0x24,0x10,0x0A,0x00,0x00,0x23,0x94,0x24,0x08,0x0A,0x00,0x00,0x89,0x94,0x24,0x00,0x0A,0x00,0x00,0x8B,0x84,0x24,0x00,0x0A,0x00,0x00,0xE9,0xC3,0x1B,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xF8,0x09,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xF0,0x09,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE8,0x09,0x00,0x00,0x8B,0x94,0x24,0xF0,0x09,0x00,0x00,0x89,0x94,0x24,0xD8,0x09,0x00,0x00,0x8B,0x94,0x24,0xE8,0x09,0x00,0x00,0x89,0x94,0x24,0xD0,0x09,0x00,0x00,0x8B,0x94,0x24,0xD8,0x09,0x00,0x00,0x89,0x94,0x24,0xC8,0x09,0x00,0x00,0x8B,0x94,0x24,0xD0,0x09,0x00,0x00,0x89,0x94,0x24,0xC0,0x09,0x00,0x00,0x8B,0x94,0x24,0xC8,0x09,0x00,0x00,0x23,0x94,0x24,0xC0,0x09,0x00,0x00,0x89,0x94,0x24,0xB8,0x09,0x00,0x00,0x8B,0x94,0x24,0xB8,0x09,0x00,0x00,0x89,0x94,0x24,0xE0,0x09,0x00,0x00,0x8B,0x94,0x24,0xF8,0x09,0x00,0x00,0x89,0x94,0x24,0xB0,0x09,0x00,0x00,0x8B,0x94,0x24,0xE0,0x09,0x00,0x00,0x89,0x94,0x24,0xA8,0x09,0x00,0x00,0x8B,0x94,0x24,0xB0,0x09,0x00,0x00,0x89,0x94,0x24,0xA0,0x09,0x00,0x00,0x8B,0x94,0x24,0xA8,0x09,0x00,0x00,0x89,0x94,0x24,0x98,0x09,0x00,0x00,0x8B,0x94,0x24,0xA0,0x09,0x00,0x00,0x0B,0x94,0x24,0x98,0x09,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x90,0x09,0x00,0x00,0x8B,0x84,0x24,0x90,0x09,0x00,0x00,0xE9,0xE0,0x1A,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x88,0x09,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x80,0x09,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x70,0x09,0x00,0x00,0x8B,0x94,0x24,0x88,0x09,0x00,0x00,0x89,0x94,0x24,0x60,0x09,0x00,0x00,0x8B,0x94,0x24,0x60,0x09,0x00,0x00,0x89,0x94,0x24,0x58,0x09,0x00,0x00,0x8B,0x94,0x24,0x58,0x09,0x00,0x00,0x89,0x94,0x24,0x50,0x09,0x00,0x00,0x8B,0x94,0x24,0x50,0x09,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x48,0x09,0x00,0x00,0x8B,0x94,0x24,0x48,0x09,0x00,0x00,0x89,0x94,0x24,0x78,0x09,0x00,0x00,0x8B,0x94,0x24,0x78,0x09,0x00,0x00,0x89,0x94,0x24,0x40,0x09,0x00,0x00,0x8B,0x94,0x24,0x80,0x09,0x00,0x00,0x89,0x94,0x24,0x38,0x09,0x00,0x00,0x8B,0x94,0x24,0x40,0x09,0x00,0x00,0x89,0x94,0x24,0x30,0x09,0x00,0x00,0x8B,0x94,0x24,0x38,0x09,0x00,0x00,0x89,0x94,0x24,0x28,0x09,0x00,0x00,0x8B,0x94,0x24,0x30,0x09,0x00,0x00,0x23,0x94,0x24,0x28,0x09,0x00,0x00,0x89,0x94,0x24,0x20,0x09,0x00,0x00,0x8B,0x94,0x24,0x20,0x09,0x00,0x00,0x89,0x94,0x24,0x68,0x09,0x00,0x00,0x8B,0x94,0x24,0x68,0x09,0x00,0x00,0x89,0x94,0x24,0x18,0x09,0x00,0x00,0x8B,0x94,0x24,0x70,0x09,0x00,0x00,0x89,0x94,0x24,0x10,0x09,0x00,0x00,0x8B,0x94,0x24,0x18,0x09,0x00,0x00,0x89,0x94,0x24,0x08,0x09,0x00,0x00,0x8B,0x94,0x24,0x10,0x09,0x00,0x00,0x89,0x94,0x24,0x00,0x09,0x00,0x00,0x8B,0x94,0x24,0x08,0x09,0x00,0x00,0x23,0x94,0x24,0x00,0x09,0x00,0x00,0x89,0x94,0x24,0xF8,0x08,0x00,0x00,0x8B,0x84,0x24,0xF8,0x08,0x00,0x00,0xE9,0xB7,0x19,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xF0,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xE8,0x08,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x08,0x00,0x00,0x8B,0x94,0x24,0xE8,0x08,0x00,0x00,0x89,0x94,0x24,0xD0,0x08,0x00,0x00,0x8B,0x94,0x24,0xE0,0x08,0x00,0x00,0x89,0x94,0x24,0xC8,0x08,0x00,0x00,0x8B,0x94,0x24,0xD0,0x08,0x00,0x00,0x89,0x94,0x24,0xC0,0x08,0x00,0x00,0x8B,0x94,0x24,0xC8,0x08,0x00,0x00,0x89,0x94,0x24,0xB8,0x08,0x00,0x00,0x8B,0x94,0x24,0xC0,0x08,0x00,0x00,0x33,0x94,0x24,0xB8,0x08,0x00,0x00,0x89,0x94,0x24,0xB0,0x08,0x00,0x00,0x8B,0x94,0x24,0xB0,0x08,0x00,0x00,0x89,0x94,0x24,0xD8,0x08,0x00,0x00,0x8B,0x94,0x24,0xF0,0x08,0x00,0x00,0x89,0x94,0x24,0xA8,0x08,0x00,0x00,0x8B,0x94,0x24,0xD8,0x08,0x00,0x00,0x89,0x94,0x24,0xA0,0x08,0x00,0x00,0x8B,0x94,0x24,0xA8,0x08,0x00,0x00,0x89,0x94,0x24,0x98,0x08,0x00,0x00,0x8B,0x94,0x24,0xA0,0x08,0x00,0x00,0x89,0x94,0x24,0x90,0x08,0x00,0x00,0x8B,0x94,0x24,0x98,0x08,0x00,0x00,0x0B,0x94,0x24,0x90,0x08,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x88,0x08,0x00,0x00,0x8B,0x84,0x24,0x88,0x08,0x00,0x00,0xE9,0xD4,0x18,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x78,0x08,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x80,0x08,0x00,0x00,0x8B,0x94,0x24,0x78,0x08,0x00,0x00,0x89,0x94,0x24,0x68,0x08,0x00,0x00,0x8B,0x94,0x24,0x68,0x08,0x00,0x00,0x89,0x94,0x24,0x60,0x08,0x00,0x00,0x8B,0x94,0x24,0x60,0x08,0x00,0x00,0x89,0x94,0x24,0x58,0x08,0x00,0x00,0x8B,0x94,0x24,0x58,0x08,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x50,0x08,0x00,0x00,0x8B,0x94,0x24,0x50,0x08,0x00,0x00,0x89,0x94,0x24,0x70,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x08,0x00,0x00,0x89,0x94,0x24,0x48,0x08,0x00,0x00,0x8B,0x94,0x24,0x70,0x08,0x00,0x00,0x89,0x94,0x24,0x40,0x08,0x00,0x00,0x8B,0x94,0x24,0x48,0x08,0x00,0x00,0x89,0x94,0x24,0x38,0x08,0x00,0x00,0x8B,0x94,0x24,0x40,0x08,0x00,0x00,0x89,0x94,0x24,0x30,0x08,0x00,0x00,0x8B,0x94,0x24,0x38,0x08,0x00,0x00,0x23,0x94,0x24,0x30,0x08,0x00,0x00,0x89,0x94,0x24,0x28,0x08,0x00,0x00,0x8B,0x84,0x24,0x28,0x08,0x00,0x00,0xE9,0x14,0x18,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x20,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x18,0x08,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x08,0x00,0x00,0x8B,0x94,0x24,0x20,0x08,0x00,0x00,0x89,0x94,0x24,0xE8,0x07,0x00,0x00,0x8B,0x94,0x24,0xE8,0x07,0x00,0x00,0x89,0x94,0x24,0xE0,0x07,0x00,0x00,0x8B,0x94,0x24,0xE0,0x07,0x00,0x00,0x89,0x94,0x24,0xD8,0x07,0x00,0x00,0x8B,0x94,0x24,0xD8,0x07,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xD0,0x07,0x00,0x00,0x8B,0x94,0x24,0xD0,0x07,0x00,0x00,0x89,0x94,0x24,0x10,0x08,0x00,0x00,0xC7,0x84,0x24,0xC8,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xC8,0x07,0x00,0x00,0x89,0x94,0x24,0x08,0x08,0x00,0x00,0x8B,0x94,0x24,0x18,0x08,0x00,0x00,0x89,0x94,0x24,0xC0,0x07,0x00,0x00,0x8B,0x94,0x24,0x08,0x08,0x00,0x00,0x89,0x94,0x24,0xB8,0x07,0x00,0x00,0x8B,0x94,0x24,0xC0,0x07,0x00,0x00,0x89,0x94,0x24,0xB0,0x07,0x00,0x00,0x8B,0x94,0x24,0xB8,0x07,0x00,0x00,0x89,0x94,0x24,0xA8,0x07,0x00,0x00,0x8B,0x94,0x24,0xB0,0x07,0x00,0x00,0x33,0x94,0x24,0xA8,0x07,0x00,0x00,0x89,0x94,0x24,0xA0,0x07,0x00,0x00,0x8B,0x94,0x24,0xA0,0x07,0x00,0x00,0x89,0x94,0x24,0xF8,0x07,0x00,0x00,0x8B,0x94,0x24,0xF8,0x07,0x00,0x00,0x89,0x94,0x24,0x98,0x07,0x00,0x00,0x8B,0x94,0x24,0x00,0x08,0x00,0x00,0x89,0x94,0x24,0x90,0x07,0x00,0x00,0x8B,0x94,0x24,0x98,0x07,0x00,0x00,0x89,0x94,0x24,0x88,0x07,0x00,0x00,0x8B,0x94,0x24,0x90,0x07,0x00,0x00,0x89,0x94,0x24,0x80,0x07,0x00,0x00,0x8B,0x94,0x24,0x88,0x07,0x00,0x00,0x0B,0x94,0x24,0x80,0x07,0x00,0x00,0x89,0x94,0x24,0x78,0x07,0x00,0x00,0x8B,0x94,0x24,0x78,0x07,0x00,0x00,0x89,0x94,0x24,0xF0,0x07,0x00,0x00,0x8B,0x94,0x24,0x10,0x08,0x00,0x00,0x89,0x94,0x24,0x70,0x07,0x00,0x00,0x8B,0x94,0x24,0xF0,0x07,0x00,0x00,0x89,0x94,0x24,0x68,0x07,0x00,0x00,0x8B,0x94,0x24,0x70,0x07,0x00,0x00,0x89,0x94,0x24,0x60,0x07,0x00,0x00,0x8B,0x94,0x24,0x68,0x07,0x00,0x00,0x89,0x94,0x24,0x58,0x07,0x00,0x00,0x8B,0x94,0x24,0x60,0x07,0x00,0x00,0x23,0x94,0x24,0x58,0x07,0x00,0x00,0x89,0x94,0x24,0x50,0x07,0x00,0x00,0x8B,0x84,0x24,0x50,0x07,0x00,0x00,0xE9,0x77,0x16,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x40,0x07,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x48,0x07,0x00,0x00,0x8B,0x94,0x24,0x40,0x07,0x00,0x00,0x89,0x94,0x24,0x30,0x07,0x00,0x00,0x8B,0x94,0x24,0x30,0x07,0x00,0x00,0x89,0x94,0x24,0x28,0x07,0x00,0x00,0x8B,0x94,0x24,0x28,0x07,0x00,0x00,0x89,0x94,0x24,0x20,0x07,0x00,0x00,0x8B,0x94,0x24,0x20,0x07,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x18,0x07,0x00,0x00,0x8B,0x94,0x24,0x18,0x07,0x00,0x00,0x89,0x94,0x24,0x38,0x07,0x00,0x00,0x8B,0x94,0x24,0x48,0x07,0x00,0x00,0x89,0x94,0x24,0x10,0x07,0x00,0x00,0x8B,0x94,0x24,0x38,0x07,0x00,0x00,0x89,0x94,0x24,0x08,0x07,0x00,0x00,0x8B,0x94,0x24,0x10,0x07,0x00,0x00,0x89,0x94,0x24,0x00,0x07,0x00,0x00,0x8B,0x94,0x24,0x08,0x07,0x00,0x00,0x89,0x94,0x24,0xF8,0x06,0x00,0x00,0x8B,0x94,0x24,0x00,0x07,0x00,0x00,0x23,0x94,0x24,0xF8,0x06,0x00,0x00,0x89,0x94,0x24,0xF0,0x06,0x00,0x00,0x8B,0x84,0x24,0xF0,0x06,0x00,0x00,0xE9,0xB7,0x15,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xE8,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x06,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xD8,0x06,0x00,0x00,0x8B,0x94,0x24,0xE8,0x06,0x00,0x00,0x89,0x94,0x24,0xB0,0x06,0x00,0x00,0x8B,0x94,0x24,0xB0,0x06,0x00,0x00,0x89,0x94,0x24,0xA8,0x06,0x00,0x00,0x8B,0x94,0x24,0xA8,0x06,0x00,0x00,0x89,0x94,0x24,0xA0,0x06,0x00,0x00,0x8B,0x94,0x24,0xA0,0x06,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x98,0x06,0x00,0x00,0x8B,0x94,0x24,0x98,0x06,0x00,0x00,0x89,0x94,0x24,0xD0,0x06,0x00,0x00,0xC7,0x84,0x24,0x90,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x90,0x06,0x00,0x00,0x89,0x94,0x24,0xC8,0x06,0x00,0x00,0x8B,0x94,0x24,0xD8,0x06,0x00,0x00,0x89,0x94,0x24,0x88,0x06,0x00,0x00,0x8B,0x94,0x24,0xC8,0x06,0x00,0x00,0x89,0x94,0x24,0x80,0x06,0x00,0x00,0x8B,0x94,0x24,0x88,0x06,0x00,0x00,0x89,0x94,0x24,0x78,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x06,0x00,0x00,0x89,0x94,0x24,0x70,0x06,0x00,0x00,0x8B,0x94,0x24,0x78,0x06,0x00,0x00,0x33,0x94,0x24,0x70,0x06,0x00,0x00,0x89,0x94,0x24,0x68,0x06,0x00,0x00,0x8B,0x94,0x24,0x68,0x06,0x00,0x00,0x89,0x94,0x24,0xC0,0x06,0x00,0x00,0x8B,0x94,0x24,0xE0,0x06,0x00,0x00,0x89,0x94,0x24,0x60,0x06,0x00,0x00,0x8B,0x94,0x24,0xC0,0x06,0x00,0x00,0x89,0x94,0x24,0x58,0x06,0x00,0x00,0x8B,0x94,0x24,0x60,0x06,0x00,0x00,0x89,0x94,0x24,0x50,0x06,0x00,0x00,0x8B,0x94,0x24,0x58,0x06,0x00,0x00,0x89,0x94,0x24,0x48,0x06,0x00,0x00,0x8B,0x94,0x24,0x50,0x06,0x00,0x00,0x0B,0x94,0x24,0x48,0x06,0x00,0x00,0x89,0x94,0x24,0x40,0x06,0x00,0x00,0x8B,0x94,0x24,0x40,0x06,0x00,0x00,0x89,0x94,0x24,0xB8,0x06,0x00,0x00,0x8B,0x94,0x24,0xD0,0x06,0x00,0x00,0x89,0x94,0x24,0x38,0x06,0x00,0x00,0x8B,0x94,0x24,0xB8,0x06,0x00,0x00,0x89,0x94,0x24,0x30,0x06,0x00,0x00,0x8B,0x94,0x24,0x38,0x06,0x00,0x00,0x89,0x94,0x24,0x28,0x06,0x00,0x00,0x8B,0x94,0x24,0x30,0x06,0x00,0x00,0x89,0x94,0x24,0x20,0x06,0x00,0x00,0x8B,0x94,0x24,0x28,0x06,0x00,0x00,0x23,0x94,0x24,0x20,0x06,0x00,0x00,0x89,0x94,0x24,0x18,0x06,0x00,0x00,0x8B,0x84,0x24,0x18,0x06,0x00,0x00,0xE9,0x1A,0x14,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x10,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x06,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x06,0x00,0x00,0x8B,0x94,0x24,0x10,0x06,0x00,0x00,0x89,0x94,0x24,0xE8,0x05,0x00,0x00,0x8B,0x94,0x24,0xE8,0x05,0x00,0x00,0x89,0x94,0x24,0xE0,0x05,0x00,0x00,0x8B,0x94,0x24,0xE0,0x05,0x00,0x00,0x89,0x94,0x24,0xD8,0x05,0x00,0x00,0x8B,0x94,0x24,0xD8,0x05,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xD0,0x05,0x00,0x00,0x8B,0x94,0x24,0xD0,0x05,0x00,0x00,0x89,0x94,0x24,0xF8,0x05,0x00,0x00,0x8B,0x94,0x24,0x08,0x06,0x00,0x00,0x89,0x94,0x24,0xC8,0x05,0x00,0x00,0x8B,0x94,0x24,0x00,0x06,0x00,0x00,0x89,0x94,0x24,0xC0,0x05,0x00,0x00,0x8B,0x94,0x24,0xC8,0x05,0x00,0x00,0x89,0x94,0x24,0xB8,0x05,0x00,0x00,0x8B,0x94,0x24,0xC0,0x05,0x00,0x00,0x89,0x94,0x24,0xB0,0x05,0x00,0x00,0x8B,0x94,0x24,0xB8,0x05,0x00,0x00,0x0B,0x94,0x24,0xB0,0x05,0x00,0x00,0x89,0x94,0x24,0xA8,0x05,0x00,0x00,0x8B,0x94,0x24,0xA8,0x05,0x00,0x00,0x89,0x94,0x24,0xF0,0x05,0x00,0x00,0x8B,0x94,0x24,0xF8,0x05,0x00,0x00,0x89,0x94,0x24,0xA0,0x05,0x00,0x00,0x8B,0x94,0x24,0xF0,0x05,0x00,0x00,0x89,0x94,0x24,0x98,0x05,0x00,0x00,0x8B,0x94,0x24,0xA0,0x05,0x00,0x00,0x89,0x94,0x24,0x90,0x05,0x00,0x00,0x8B,0x94,0x24,0x98,0x05,0x00,0x00,0x89,0x94,0x24,0x88,0x05,0x00,0x00,0x8B,0x94,0x24,0x90,0x05,0x00,0x00,0x23,0x94,0x24,0x88,0x05,0x00,0x00,0x89,0x94,0x24,0x80,0x05,0x00,0x00,0x8B,0x84,0x24,0x80,0x05,0x00,0x00,0xE9,0xF1,0x12,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x78,0x05,0x00,0x00,0x8B,0x94,0x24,0x78,0x05,0x00,0x00,0x89,0x94,0x24,0x70,0x05,0x00,0x00,0x8B,0x94,0x24,0x70,0x05,0x00,0x00,0x89,0x94,0x24,0x68,0x05,0x00,0x00,0x8B,0x94,0x24,0x68,0x05,0x00,0x00,0x89,0x94,0x24,0x60,0x05,0x00,0x00,0x8B,0x94,0x24,0x60,0x05,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x58,0x05,0x00,0x00,0x8B,0x84,0x24,0x58,0x05,0x00,0x00,0xE9,0x9A,0x12,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x50,0x05,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x48,0x05,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x40,0x05,0x00,0x00,0x8B,0x94,0x24,0x48,0x05,0x00,0x00,0x89,0x94,0x24,0x30,0x05,0x00,0x00,0x8B,0x94,0x24,0x40,0x05,0x00,0x00,0x89,0x94,0x24,0x28,0x05,0x00,0x00,0x8B,0x94,0x24,0x30,0x05,0x00,0x00,0x89,0x94,0x24,0x20,0x05,0x00,0x00,0x8B,0x94,0x24,0x28,0x05,0x00,0x00,0x89,0x94,0x24,0x18,0x05,0x00,0x00,0x8B,0x94,0x24,0x20,0x05,0x00,0x00,0x0B,0x94,0x24,0x18,0x05,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x10,0x05,0x00,0x00,0x8B,0x94,0x24,0x10,0x05,0x00,0x00,0x89,0x94,0x24,0x38,0x05,0x00,0x00,0x8B,0x94,0x24,0x50,0x05,0x00,0x00,0x89,0x94,0x24,0x08,0x05,0x00,0x00,0x8B,0x94,0x24,0x38,0x05,0x00,0x00,0x89,0x94,0x24,0x00,0x05,0x00,0x00,0x8B,0x94,0x24,0x08,0x05,0x00,0x00,0x89,0x94,0x24,0xF8,0x04,0x00,0x00,0x8B,0x94,0x24,0x00,0x05,0x00,0x00,0x89,0x94,0x24,0xF0,0x04,0x00,0x00,0x8B,0x94,0x24,0xF8,0x04,0x00,0x00,0x23,0x94,0x24,0xF0,0x04,0x00,0x00,0x89,0x94,0x24,0xE8,0x04,0x00,0x00,0x8B,0x84,0x24,0xE8,0x04,0x00,0x00,0xE9,0xB7,0x11,0x00,0x00,0x8B,0x84,0x24,0x80,0x0C,0x00,0x00,0x89,0x84,0x24,0xD8,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x04,0x00,0x00,0x8B,0x94,0x24,0xE0,0x04,0x00,0x00,0x89,0x94,0x24,0xD0,0x04,0x00,0x00,0x8B,0x94,0x24,0xD8,0x04,0x00,0x00,0x89,0x94,0x24,0xC8,0x04,0x00,0x00,0x8B,0x94,0x24,0xD0,0x04,0x00,0x00,0x89,0x94,0x24,0xC0,0x04,0x00,0x00,0x8B,0x94,0x24,0xC8,0x04,0x00,0x00,0x89,0x94,0x24,0xB8,0x04,0x00,0x00,0x8B,0x94,0x24,0xC0,0x04,0x00,0x00,0x0B,0x94,0x24,0xB8,0x04,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xB0,0x04,0x00,0x00,0x8B,0x84,0x24,0xB0,0x04,0x00,0x00,0xE9,0x3D,0x11,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xA0,0x04,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xA8,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x98,0x04,0x00,0x00,0x8B,0x94,0x24,0xA8,0x04,0x00,0x00,0x89,0x94,0x24,0x80,0x04,0x00,0x00,0x8B,0x94,0x24,0x80,0x04,0x00,0x00,0x89,0x94,0x24,0x78,0x04,0x00,0x00,0x8B,0x94,0x24,0x78,0x04,0x00,0x00,0x89,0x94,0x24,0x70,0x04,0x00,0x00,0x8B,0x94,0x24,0x70,0x04,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x68,0x04,0x00,0x00,0x8B,0x94,0x24,0x68,0x04,0x00,0x00,0x89,0x94,0x24,0x90,0x04,0x00,0x00,0x8B,0x94,0x24,0xA0,0x04,0x00,0x00,0x89,0x94,0x24,0x60,0x04,0x00,0x00,0x8B,0x94,0x24,0x98,0x04,0x00,0x00,0x89,0x94,0x24,0x58,0x04,0x00,0x00,0x8B,0x94,0x24,0x60,0x04,0x00,0x00,0x89,0x94,0x24,0x50,0x04,0x00,0x00,0x8B,0x94,0x24,0x58,0x04,0x00,0x00,0x89,0x94,0x24,0x48,0x04,0x00,0x00,0x8B,0x94,0x24,0x50,0x04,0x00,0x00,0x33,0x94,0x24,0x48,0x04,0x00,0x00,0x89,0x94,0x24,0x40,0x04,0x00,0x00,0x8B,0x94,0x24,0x40,0x04,0x00,0x00,0x89,0x94,0x24,0x88,0x04,0x00,0x00,0x8B,0x94,0x24,0x90,0x04,0x00,0x00,0x89,0x94,0x24,0x38,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x04,0x00,0x00,0x89,0x94,0x24,0x30,0x04,0x00,0x00,0x8B,0x94,0x24,0x38,0x04,0x00,0x00,0x89,0x94,0x24,0x28,0x04,0x00,0x00,0x8B,0x94,0x24,0x30,0x04,0x00,0x00,0x89,0x94,0x24,0x20,0x04,0x00,0x00,0x8B,0x94,0x24,0x28,0x04,0x00,0x00,0x23,0x94,0x24,0x20,0x04,0x00,0x00,0x89,0x94,0x24,0x18,0x04,0x00,0x00,0x8B,0x84,0x24,0x18,0x04,0x00,0x00,0xE9,0x14,0x10,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x08,0x04,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x10,0x04,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x04,0x00,0x00,0x8B,0x94,0x24,0x08,0x04,0x00,0x00,0x89,0x94,0x24,0xF0,0x03,0x00,0x00,0x8B,0x94,0x24,0x00,0x04,0x00,0x00,0x89,0x94,0x24,0xE8,0x03,0x00,0x00,0x8B,0x94,0x24,0xF0,0x03,0x00,0x00,0x89,0x94,0x24,0xE0,0x03,0x00,0x00,0x8B,0x94,0x24,0xE8,0x03,0x00,0x00,0x89,0x94,0x24,0xD8,0x03,0x00,0x00,0x8B,0x94,0x24,0xE0,0x03,0x00,0x00,0x23,0x94,0x24,0xD8,0x03,0x00,0x00,0x89,0x94,0x24,0xD0,0x03,0x00,0x00,0x8B,0x94,0x24,0xD0,0x03,0x00,0x00,0x89,0x94,0x24,0xF8,0x03,0x00,0x00,0x8B,0x94,0x24,0x10,0x04,0x00,0x00,0x89,0x94,0x24,0xC8,0x03,0x00,0x00,0x8B,0x94,0x24,0xF8,0x03,0x00,0x00,0x89,0x94,0x24,0xC0,0x03,0x00,0x00,0x8B,0x94,0x24,0xC8,0x03,0x00,0x00,0x89,0x94,0x24,0xB8,0x03,0x00,0x00,0x8B,0x94,0x24,0xC0,0x03,0x00,0x00,0x89,0x94,0x24,0xB0,0x03,0x00,0x00,0x8B,0x94,0x24,0xB8,0x03,0x00,0x00,0x0B,0x94,0x24,0xB0,0x03,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xA8,0x03,0x00,0x00,0x8B,0x84,0x24,0xA8,0x03,0x00,0x00,0xE9,0x31,0x0F,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x98,0x03,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x90,0x03,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xA0,0x03,0x00,0x00,0x8B,0x94,0x24,0xA0,0x03,0x00,0x00,0x89,0x94,0x24,0x78,0x03,0x00,0x00,0x8B,0x94,0x24,0x78,0x03,0x00,0x00,0x89,0x94,0x24,0x70,0x03,0x00,0x00,0x8B,0x94,0x24,0x70,0x03,0x00,0x00,0x89,0x94,0x24,0x68,0x03,0x00,0x00,0x8B,0x94,0x24,0x68,0x03,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x60,0x03,0x00,0x00,0x8B,0x94,0x24,0x60,0x03,0x00,0x00,0x89,0x94,0x24,0x88,0x03,0x00,0x00,0x8B,0x94,0x24,0x98,0x03,0x00,0x00,0x89,0x94,0x24,0x58,0x03,0x00,0x00,0x8B,0x94,0x24,0x90,0x03,0x00,0x00,0x89,0x94,0x24,0x50,0x03,0x00,0x00,0x8B,0x94,0x24,0x58,0x03,0x00,0x00,0x89,0x94,0x24,0x48,0x03,0x00,0x00,0x8B,0x94,0x24,0x50,0x03,0x00,0x00,0x89,0x94,0x24,0x40,0x03,0x00,0x00,0x8B,0x94,0x24,0x48,0x03,0x00,0x00,0x33,0x94,0x24,0x40,0x03,0x00,0x00,0x89,0x94,0x24,0x38,0x03,0x00,0x00,0x8B,0x94,0x24,0x38,0x03,0x00,0x00,0x89,0x94,0x24,0x80,0x03,0x00,0x00,0x8B,0x94,0x24,0x88,0x03,0x00,0x00,0x89,0x94,0x24,0x30,0x03,0x00,0x00,0x8B,0x94,0x24,0x80,0x03,0x00,0x00,0x89,0x94,0x24,0x28,0x03,0x00,0x00,0x8B,0x94,0x24,0x30,0x03,0x00,0x00,0x89,0x94,0x24,0x20,0x03,0x00,0x00,0x8B,0x94,0x24,0x28,0x03,0x00,0x00,0x89,0x94,0x24,0x18,0x03,0x00,0x00,0x8B,0x94,0x24,0x20,0x03,0x00,0x00,0x23,0x94,0x24,0x18,0x03,0x00,0x00,0x89,0x94,0x24,0x10,0x03,0x00,0x00,0x8B,0x84,0x24,0x10,0x03,0x00,0x00,0xE9,0x08,0x0E,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x00,0x03,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xF8,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x03,0x00,0x00,0x8B,0x94,0x24,0x00,0x03,0x00,0x00,0x89,0x94,0x24,0xE8,0x02,0x00,0x00,0x8B,0x94,0x24,0xF8,0x02,0x00,0x00,0x89,0x94,0x24,0xE0,0x02,0x00,0x00,0x8B,0x94,0x24,0xE8,0x02,0x00,0x00,0x89,0x94,0x24,0xD8,0x02,0x00,0x00,0x8B,0x94,0x24,0xE0,0x02,0x00,0x00,0x89,0x94,0x24,0xD0,0x02,0x00,0x00,0x8B,0x94,0x24,0xD8,0x02,0x00,0x00,0x23,0x94,0x24,0xD0,0x02,0x00,0x00,0x89,0x94,0x24,0xC8,0x02,0x00,0x00,0x8B,0x94,0x24,0xC8,0x02,0x00,0x00,0x89,0x94,0x24,0xF0,0x02,0x00,0x00,0x8B,0x94,0x24,0x08,0x03,0x00,0x00,0x89,0x94,0x24,0xC0,0x02,0x00,0x00,0x8B,0x94,0x24,0xF0,0x02,0x00,0x00,0x89,0x94,0x24,0xB8,0x02,0x00,0x00,0x8B,0x94,0x24,0xC0,0x02,0x00,0x00,0x89,0x94,0x24,0xB0,0x02,0x00,0x00,0x8B,0x94,0x24,0xB8,0x02,0x00,0x00,0x89,0x94,0x24,0xA8,0x02,0x00,0x00,0x8B,0x94,0x24,0xB0,0x02,0x00,0x00,0x0B,0x94,0x24,0xA8,0x02,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0xA0,0x02,0x00,0x00,0x8B,0x84,0x24,0xA0,0x02,0x00,0x00,0xE9,0x25,0x0D,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x98,0x02,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x90,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x88,0x02,0x00,0x00,0x8B,0x94,0x24,0x90,0x02,0x00,0x00,0x89,0x94,0x24,0x70,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x02,0x00,0x00,0x89,0x94,0x24,0x68,0x02,0x00,0x00,0x8B,0x94,0x24,0x70,0x02,0x00,0x00,0x89,0x94,0x24,0x60,0x02,0x00,0x00,0x8B,0x94,0x24,0x68,0x02,0x00,0x00,0x89,0x94,0x24,0x58,0x02,0x00,0x00,0x8B,0x94,0x24,0x60,0x02,0x00,0x00,0x0B,0x94,0x24,0x58,0x02,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x50,0x02,0x00,0x00,0x8B,0x94,0x24,0x50,0x02,0x00,0x00,0x89,0x94,0x24,0x80,0x02,0x00,0x00,0x8B,0x94,0x24,0x90,0x02,0x00,0x00,0x89,0x94,0x24,0x48,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x02,0x00,0x00,0x89,0x94,0x24,0x40,0x02,0x00,0x00,0x8B,0x94,0x24,0x48,0x02,0x00,0x00,0x89,0x94,0x24,0x38,0x02,0x00,0x00,0x8B,0x94,0x24,0x40,0x02,0x00,0x00,0x89,0x94,0x24,0x30,0x02,0x00,0x00,0x8B,0x94,0x24,0x38,0x02,0x00,0x00,0x33,0x94,0x24,0x30,0x02,0x00,0x00,0x89,0x94,0x24,0x28,0x02,0x00,0x00,0x8B,0x94,0x24,0x28,0x02,0x00,0x00,0x89,0x94,0x24,0x78,0x02,0x00,0x00,0x8B,0x94,0x24,0x98,0x02,0x00,0x00,0x89,0x94,0x24,0x20,0x02,0x00,0x00,0x8B,0x94,0x24,0x80,0x02,0x00,0x00,0x89,0x94,0x24,0x18,0x02,0x00,0x00,0x8B,0x94,0x24,0x78,0x02,0x00,0x00,0x89,0x94,0x24,0x10,0x02,0x00,0x00,0x8B,0x94,0x24,0x20,0x02,0x00,0x00,0x89,0x94,0x24,0x08,0x02,0x00,0x00,0x8B,0x94,0x24,0x18,0x02,0x00,0x00,0x89,0x94,0x24,0x00,0x02,0x00,0x00,0x8B,0x94,0x24,0x10,0x02,0x00,0x00,0x89,0x94,0x24,0xF8,0x01,0x00,0x00,0x8B,0x94,0x24,0x08,0x02,0x00,0x00,0x23,0x94,0x24,0x00,0x02,0x00,0x00,0x8B,0x8C,0x24,0x08,0x02,0x00,0x00,0xF7,0xD1,0x23,0x8C,0x24,0xF8,0x01,0x00,0x00,0x0B,0xD1,0x83,0xE2,0x01,0x89,0x94,0x24,0xF0,0x01,0x00,0x00,0x8B,0x84,0x24,0xF0,0x01,0x00,0x00,0xE9,0xB6,0x0B,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0xE8,0x01,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0xE0,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0xD8,0x01,0x00,0x00,0x8B,0x94,0x24,0xE0,0x01,0x00,0x00,0x89,0x94,0x24,0xB8,0x01,0x00,0x00,0x8B,0x94,0x24,0xD8,0x01,0x00,0x00,0x89,0x94,0x24,0xB0,0x01,0x00,0x00,0x8B,0x94,0x24,0xB8,0x01,0x00,0x00,0x89,0x94,0x24,0xA8,0x01,0x00,0x00,0x8B,0x94,0x24,0xB0,0x01,0x00,0x00,0x89,0x94,0x24,0xA0,0x01,0x00,0x00,0x8B,0x94,0x24,0xA8,0x01,0x00,0x00,0x0B,0x94,0x24,0xA0,0x01,0x00,0x00,0x89,0x94,0x24,0x98,0x01,0x00,0x00,0x8B,0x94,0x24,0x98,0x01,0x00,0x00,0x89,0x94,0x24,0xD0,0x01,0x00,0x00,0x8B,0x94,0x24,0xE0,0x01,0x00,0x00,0x89,0x94,0x24,0x90,0x01,0x00,0x00,0x8B,0x94,0x24,0xD8,0x01,0x00,0x00,0x89,0x94,0x24,0x88,0x01,0x00,0x00,0x8B,0x94,0x24,0x90,0x01,0x00,0x00,0x89,0x94,0x24,0x80,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x01,0x00,0x00,0x89,0x94,0x24,0x78,0x01,0x00,0x00,0x8B,0x94,0x24,0x80,0x01,0x00,0x00,0x23,0x94,0x24,0x78,0x01,0x00,0x00,0x89,0x94,0x24,0x70,0x01,0x00,0x00,0x8B,0x94,0x24,0x70,0x01,0x00,0x00,0x89,0x94,0x24,0xC8,0x01,0x00,0x00,0x8B,0x94,0x24,0xE8,0x01,0x00,0x00,0x89,0x94,0x24,0x68,0x01,0x00,0x00,0x8B,0x94,0x24,0xD0,0x01,0x00,0x00,0x89,0x94,0x24,0x60,0x01,0x00,0x00,0x8B,0x94,0x24,0xC8,0x01,0x00,0x00,0x89,0x94,0x24,0x58,0x01,0x00,0x00,0x8B,0x94,0x24,0x68,0x01,0x00,0x00,0x89,0x94,0x24,0x50,0x01,0x00,0x00,0x8B,0x94,0x24,0x60,0x01,0x00,0x00,0x89,0x94,0x24,0x48,0x01,0x00,0x00,0x8B,0x94,0x24,0x58,0x01,0x00,0x00,0x89,0x94,0x24,0x40,0x01,0x00,0x00,0x8B,0x94,0x24,0x50,0x01,0x00,0x00,0x23,0x94,0x24,0x48,0x01,0x00,0x00,0x8B,0x8C,0x24,0x50,0x01,0x00,0x00,0xF7,0xD1,0x23,0x8C,0x24,0x40,0x01,0x00,0x00,0x0B,0xD1,0x83,0xE2,0x01,0x89,0x94,0x24,0x38,0x01,0x00,0x00,0x8B,0x94,0x24,0x38,0x01,0x00,0x00,0x89,0x94,0x24,0xC0,0x01,0x00,0x00,0x8B,0x94,0x24,0xC0,0x01,0x00,0x00,0x89,0x94,0x24,0x30,0x01,0x00,0x00,0x8B,0x94,0x24,0x30,0x01,0x00,0x00,0x89,0x94,0x24,0x28,0x01,0x00,0x00,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x89,0x94,0x24,0x20,0x01,0x00,0x00,0x8B,0x94,0x24,0x20,0x01,0x00,0x00,0xF7,0xD2,0x83,0xE2,0x01,0x89,0x94,0x24,0x18,0x01,0x00,0x00,0x8B,0x84,0x24,0x18,0x01,0x00,0x00,0xE9,0x01,0x0A,0x00,0x00,0x8B,0x84,0x24,0x78,0x0C,0x00,0x00,0x89,0x84,0x24,0x10,0x01,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x94,0x24,0x08,0x01,0x00,0x00,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x94,0x24,0x00,0x01,0x00,0x00,0x8B,0x94,0x24,0x10,0x01,0x00,0x00,0x89,0x94,0x24,0xE8,0x00,0x00,0x00,0x8B,0x94,0x24,0x08,0x01,0x00,0x00,0x89,0x94,0x24,0xE0,0x00,0x00,0x00,0x8B,0x94,0x24,0xE8,0x00,0x00,0x00,0x89,0x94,0x24,0xD8,0x00,0x00,0x00,0x8B,0x94,0x24,0xE0,0x00,0x00,0x00,0x89,0x94,0x24,0xD0,0x00,0x00,0x00,0x8B,0x94,0x24,0xD8,0x00,0x00,0x00,0x33,0x94,0x24,0xD0,0x00,0x00,0x00,0x89,0x94,0x24,0xC8,0x00,0x00,0x00,0x8B,0x94,0x24,0xC8,0x00,0x00,0x00,0x89,0x94,0x24,0xF8,0x00,0x00,0x00,0x8B,0x94,0x24,0x10,0x01,0x00,0x00,0x89,0x94,0x24,0xC0,0x00,0x00,0x00,0x8B,0x94,0x24,0x00,0x01,0x00,0x00,0x89,0x94,0x24,0xB8,0x00,0x00,0x00,0x8B,0x94,0x24,0xC0,0x00,0x00,0x00,0x89,0x94,0x24,0xB0,0x00,0x00,0x00,0x8B,0x94,0x24,0xB8,0x00,0x00,0x00,0x89,0x94,0x24,0xA8,0x00,0x00,0x00,0x8B,0x94,0x24,0xB0,0x00,0x00,0x00,0x33,0x94,0x24,0xA8,0x00,0x00,0x00,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x8B,0x94,0x24,0xA0,0x00,0x00,0x00,0x89,0x94,0x24,0xF0,0x00,0x00,0x00,0x8B,0x94,0x24,0xF8,0x00,0x00,0x00,0x89,0x94,0x24,0x98,0x00,0x00,0x00,0x8B,0x94,0x24,0xF0,0x00,0x00,0x00,0x89,0x94,0x24,0x90,0x00,0x00,0x00,0x8B,0x94,0x24,0x98,0x00,0x00,0x00,0x89,0x94,0x24,0x88,0x00,0x00,0x00,0x8B,0x94,0x24,0x90,0x00,0x00,0x00,0x89,0x94,0x24,0x80,0x00,0x00,0x00,0x8B,0x94,0x24,0x88,0x00,0x00,0x00,0x23,0x94,0x24,0x80,0x00,0x00,0x00,0x89,0x54,0x24,0x78,0x8B,0x44,0x24,0x78,0xE9,0xCE,0x08,0x00,0x00,0x8B,0x94,0x24,0x78,0x0C,0x00,0x00,0x89,0x54,0x24,0x60,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x89,0x54,0x24,0x70,0x8B,0x94,0x24,0x88,0x0C,0x00,0x00,0x89,0x54,0x24,0x68,0x8B,0x54,0x24,0x70,0x89,0x54,0x24,0x40,0x8B,0x54,0x24,0x68,0x89,0x54,0x24,0x38,0x8B,0x54,0x24,0x40,0x89,0x54,0x24,0x30,0x8B,0x54,0x24,0x38,0x89,0x54,0x24,0x28,0x33,0xD2,0x89,0x54,0x24,0x20,0x8B,0x54,0x24,0x30,0x33,0x54,0x24,0x28,0x48,0x8D,0x4C,0x24,0x20,0xE8,0x68,0x8E,0xDD,0xFF,0x8B,0x4C,0x24,0x20,0x89,0x4C,0x24,0x58,0x8B,0x4C,0x24,0x70,0x8B,0x54,0x24,0x68,0xE8,0x93,0x58,0xE1,0xFF,0x89,0x44,0x24,0x50,0x8B,0x4C,0x24,0x60,0x8B,0x54,0x24,0x50,0xE8,0x82,0x58,0xE1,0xFF,0x89,0x44,0x24,0x48,0x8B,0x4C,0x24,0x58,0x8B,0x54,0x24,0x48,0xE8,0x91,0x58,0xE1,0xFF,0xE9,0x39,0x08,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA9,0x59,0xE1,0xFF,0xE9,0x19,0x08,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x91,0x59,0xE1,0xFF,0xE9,0xF9,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x79,0x59,0xE1,0xFF,0xE9,0xD9,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x61,0x59,0xE1,0xFF,0xE9,0xB9,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x49,0x59,0xE1,0xFF,0xE9,0x99,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x31,0x59,0xE1,0xFF,0xE9,0x79,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x19,0x59,0xE1,0xFF,0xE9,0x59,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x01,0x59,0xE1,0xFF,0xE9,0x39,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE9,0x58,0xE1,0xFF,0xE9,0x19,0x07,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD1,0x58,0xE1,0xFF,0xE9,0xF9,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB9,0x58,0xE1,0xFF,0xE9,0xD9,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA1,0x58,0xE1,0xFF,0xE9,0xB9,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x89,0x58,0xE1,0xFF,0xE9,0x99,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x71,0x58,0xE1,0xFF,0xE9,0x79,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x59,0x58,0xE1,0xFF,0xE9,0x59,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x41,0x58,0xE1,0xFF,0xE9,0x39,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x29,0x58,0xE1,0xFF,0xE9,0x19,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x11,0x58,0xE1,0xFF,0xE9,0xF9,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF9,0x57,0xE1,0xFF,0xE9,0xD9,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE1,0x57,0xE1,0xFF,0xE9,0xB9,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC9,0x57,0xE1,0xFF,0xE9,0x99,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB1,0x57,0xE1,0xFF,0xE9,0x79,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x99,0x57,0xE1,0xFF,0xE9,0x59,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x81,0x57,0xE1,0xFF,0xE9,0x39,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x69,0x57,0xE1,0xFF,0xE9,0x19,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x51,0x57,0xE1,0xFF,0xE9,0xF9,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x39,0x57,0xE1,0xFF,0xE9,0xD9,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x21,0x57,0xE1,0xFF,0xE9,0xB9,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x09,0x57,0xE1,0xFF,0xE9,0x99,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF1,0x56,0xE1,0xFF,0xE9,0x79,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD9,0x56,0xE1,0xFF,0xE9,0x59,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC1,0x56,0xE1,0xFF,0xE9,0x39,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA9,0x56,0xE1,0xFF,0xE9,0x19,0x04,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x91,0x56,0xE1,0xFF,0xE9,0xF9,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x79,0x56,0xE1,0xFF,0xE9,0xD9,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x61,0x56,0xE1,0xFF,0xE9,0xB9,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x49,0x56,0xE1,0xFF,0xE9,0x99,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x31,0x56,0xE1,0xFF,0xE9,0x79,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x19,0x56,0xE1,0xFF,0xE9,0x59,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x01,0x56,0xE1,0xFF,0xE9,0x39,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE9,0x55,0xE1,0xFF,0xE9,0x19,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xD1,0x55,0xE1,0xFF,0xE9,0xF9,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB9,0x55,0xE1,0xFF,0xE9,0xD9,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xA1,0x55,0xE1,0xFF,0xE9,0xB9,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x89,0x55,0xE1,0xFF,0xE9,0x99,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x71,0x55,0xE1,0xFF,0xE9,0x79,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x59,0x55,0xE1,0xFF,0xE9,0x59,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x41,0x55,0xE1,0xFF,0xE9,0x39,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x29,0x55,0xE1,0xFF,0xE9,0x19,0x02,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x11,0x55,0xE1,0xFF,0xE9,0xF9,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF9,0x54,0xE1,0xFF,0xE9,0xD9,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xE1,0x54,0xE1,0xFF,0xE9,0xB9,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC9,0x54,0xE1,0xFF,0xE9,0x99,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB1,0x54,0xE1,0xFF,0xE9,0x79,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x99,0x54,0xE1,0xFF,0xE9,0x59,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x81,0x54,0xE1,0xFF,0xE9,0x39,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x69,0x54,0xE1,0xFF,0xE9,0x19,0x01,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x51,0x54,0xE1,0xFF,0xE9,0xF9,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x39,0x54,0xE1,0xFF,0xE9,0xD9,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x21,0x54,0xE1,0xFF,0xE9,0xB9,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x09,0x54,0xE1,0xFF,0xE9,0x99,0x00,0x00,0x00,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xF1,0x53,0xE1,0xFF,0xEB,0x7C,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xDC,0x53,0xE1,0xFF,0xEB,0x5F,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xC7,0x53,0xE1,0xFF,0xEB,0x42,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0xB2,0x53,0xE1,0xFF,0xEB,0x25,0x8B,0x8C,0x24,0x78,0x0C,0x00,0x00,0x8B,0x94,0x24,0x80,0x0C,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x0C,0x00,0x00,0xE8,0x95,0x53,0xE1,0xFF,0xEB,0x08,0x0F,0xB6,0xC9,0xE8,0xA3,0xD6,0xFF,0xFF,0x90,0x48,0x81,0xC4,0x60,0x0C,0x00,0x00,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOp<bit> lookup(TernaryOpKind:byte kind)
; location: [7FFDDBA1AF30h, 7FFDDBA1C619h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h movzx esi,cl                  ; MOVZX(Movzx_r32_rm8) [ESI,CL]                        encoding(4 bytes) = 40 0f b6 f1
000ah cmp esi,5Ah                   ; CMP(Cmp_rm32_imm8) [ESI,5ah:imm32]                   encoding(3 bytes) = 83 fe 5a
000dh ja short 0027h                ; JA(Ja_rel8_64) [27h:jmp64]                           encoding(2 bytes) = 77 18
000fh mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0011h lea rax,[7FFDDBA1C620h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 d8 16 00 00
0018h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001bh lea rdx,[7FFDDBA1AF36h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e4 ff ff ff
0022h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0025h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0027h cmp cl,0FFh                   ; CMP(Cmp_rm8_imm8) [CL,ffh:imm8]                      encoding(3 bytes) = 80 f9 ff
002ah je near ptr 1697h             ; JE(Je_rel32_64) [1697h:jmp64]                        encoding(6 bytes) = 0f 84 67 16 00 00
0030h jmp near ptr 16d3h            ; JMP(Jmp_rel32_64) [16D3h:jmp64]                      encoding(5 bytes) = e9 9e 16 00 00
0035h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
003fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 3c 95 24 5f
0044h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0047h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
004bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
004eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 6d 86 24 5f
0053h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
005dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0061h mov rcx,7FFDDB82FE58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe58h:imm64]         encoding(10 bytes) = 48 b9 58 fe 82 db fd 7f 00 00
006bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
006fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 6c 16 00 00
0074h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
007eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 fd 94 24 5f
0083h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0086h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
008ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
008dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 2e 86 24 5f
0092h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
009ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
00a0h mov rcx,7FFDDB82FE60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe60h:imm64]         encoding(10 bytes) = 48 b9 60 fe 82 db fd 7f 00 00
00aah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
00aeh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 2d 16 00 00
00b3h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
00bdh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 be 94 24 5f
00c2h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00c5h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
00c9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
00cch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 ef 85 24 5f
00d1h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
00dbh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
00dfh mov rcx,7FFDDB82FE68h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe68h:imm64]         encoding(10 bytes) = 48 b9 68 fe 82 db fd 7f 00 00
00e9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
00edh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ee 15 00 00
00f2h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
00fch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 7f 94 24 5f
0101h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0104h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0108h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
010bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 b0 85 24 5f
0110h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
011ah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
011eh mov rcx,7FFDDB82FE70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe70h:imm64]         encoding(10 bytes) = 48 b9 70 fe 82 db fd 7f 00 00
0128h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
012ch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 af 15 00 00
0131h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
013bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 40 94 24 5f
0140h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0143h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0147h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
014ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 71 85 24 5f
014fh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0159h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
015dh mov rcx,7FFDDB82FE78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe78h:imm64]         encoding(10 bytes) = 48 b9 78 fe 82 db fd 7f 00 00
0167h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
016bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 70 15 00 00
0170h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
017ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 01 94 24 5f
017fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0182h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0186h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0189h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 32 85 24 5f
018eh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0198h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
019ch mov rcx,7FFDDB82FE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe80h:imm64]         encoding(10 bytes) = 48 b9 80 fe 82 db fd 7f 00 00
01a6h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
01aah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 31 15 00 00
01afh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
01b9h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 c2 93 24 5f
01beh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
01c1h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
01c5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01c8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 f3 84 24 5f
01cdh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
01d7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
01dbh mov rcx,7FFDDB82FE88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe88h:imm64]         encoding(10 bytes) = 48 b9 88 fe 82 db fd 7f 00 00
01e5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
01e9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f2 14 00 00
01eeh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
01f8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 83 93 24 5f
01fdh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0200h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0204h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0207h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 b4 84 24 5f
020ch mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0216h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
021ah mov rcx,7FFDDB82FE90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe90h:imm64]         encoding(10 bytes) = 48 b9 90 fe 82 db fd 7f 00 00
0224h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0228h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b3 14 00 00
022dh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0237h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 44 93 24 5f
023ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
023fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0243h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0246h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 75 84 24 5f
024bh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0255h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0259h mov rcx,7FFDDB82FE98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fe98h:imm64]         encoding(10 bytes) = 48 b9 98 fe 82 db fd 7f 00 00
0263h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0267h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 74 14 00 00
026ch mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0276h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 05 93 24 5f
027bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
027eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0282h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0285h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 36 84 24 5f
028ah mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0294h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0298h mov rcx,7FFDDB82FEA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fea0h:imm64]         encoding(10 bytes) = 48 b9 a0 fe 82 db fd 7f 00 00
02a2h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
02a6h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 35 14 00 00
02abh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
02b5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 c6 92 24 5f
02bah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
02bdh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
02c1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
02c4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 f7 83 24 5f
02c9h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
02d3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
02d7h mov rcx,7FFDDB82FEA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fea8h:imm64]         encoding(10 bytes) = 48 b9 a8 fe 82 db fd 7f 00 00
02e1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
02e5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f6 13 00 00
02eah mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
02f4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 87 92 24 5f
02f9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
02fch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0300h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0303h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 b8 83 24 5f
0308h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0312h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0316h mov rcx,7FFDDB82FEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82feb0h:imm64]         encoding(10 bytes) = 48 b9 b0 fe 82 db fd 7f 00 00
0320h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0324h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b7 13 00 00
0329h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0333h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 48 92 24 5f
0338h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
033bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
033fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0342h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 79 83 24 5f
0347h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0351h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0355h mov rcx,7FFDDB82FEB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82feb8h:imm64]         encoding(10 bytes) = 48 b9 b8 fe 82 db fd 7f 00 00
035fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0363h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 78 13 00 00
0368h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0372h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 09 92 24 5f
0377h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
037ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
037eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0381h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 3a 83 24 5f
0386h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0390h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0394h mov rcx,7FFDDB82FEC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fec0h:imm64]         encoding(10 bytes) = 48 b9 c0 fe 82 db fd 7f 00 00
039eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
03a2h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 39 13 00 00
03a7h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
03b1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 ca 91 24 5f
03b6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
03b9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
03bdh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
03c0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 fb 82 24 5f
03c5h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
03cfh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
03d3h mov rcx,7FFDDB82FEC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fec8h:imm64]         encoding(10 bytes) = 48 b9 c8 fe 82 db fd 7f 00 00
03ddh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
03e1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 fa 12 00 00
03e6h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
03f0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 8b 91 24 5f
03f5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
03f8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
03fch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
03ffh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 bc 82 24 5f
0404h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
040eh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0412h mov rcx,7FFDDB82FED0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fed0h:imm64]         encoding(10 bytes) = 48 b9 d0 fe 82 db fd 7f 00 00
041ch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0420h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 bb 12 00 00
0425h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
042fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 4c 91 24 5f
0434h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0437h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
043bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
043eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 7d 82 24 5f
0443h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
044dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0451h mov rcx,7FFDDB82FED8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fed8h:imm64]         encoding(10 bytes) = 48 b9 d8 fe 82 db fd 7f 00 00
045bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
045fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 7c 12 00 00
0464h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
046eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 0d 91 24 5f
0473h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0476h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
047ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
047dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 3e 82 24 5f
0482h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
048ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0490h mov rcx,7FFDDB82FEE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fee0h:imm64]         encoding(10 bytes) = 48 b9 e0 fe 82 db fd 7f 00 00
049ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
049eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 3d 12 00 00
04a3h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
04adh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 ce 90 24 5f
04b2h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04b5h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
04b9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
04bch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 ff 81 24 5f
04c1h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
04cbh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
04cfh mov rcx,7FFDDB82FEE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fee8h:imm64]         encoding(10 bytes) = 48 b9 e8 fe 82 db fd 7f 00 00
04d9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
04ddh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 fe 11 00 00
04e2h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
04ech call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 8f 90 24 5f
04f1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
04f8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
04fbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 c0 81 24 5f
0500h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
050ah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
050eh mov rcx,7FFDDB82FEF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fef0h:imm64]         encoding(10 bytes) = 48 b9 f0 fe 82 db fd 7f 00 00
0518h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
051ch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 bf 11 00 00
0521h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
052bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 50 90 24 5f
0530h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0533h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0537h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
053ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 81 81 24 5f
053fh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0549h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
054dh mov rcx,7FFDDB82FEF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fef8h:imm64]         encoding(10 bytes) = 48 b9 f8 fe 82 db fd 7f 00 00
0557h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
055bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 80 11 00 00
0560h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
056ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 11 90 24 5f
056fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0572h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0576h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0579h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 42 81 24 5f
057eh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0588h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
058ch mov rcx,7FFDDB82FF00h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff00h:imm64]         encoding(10 bytes) = 48 b9 00 ff 82 db fd 7f 00 00
0596h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
059ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 41 11 00 00
059fh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
05a9h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 d2 8f 24 5f
05aeh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
05b1h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
05b5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
05b8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 03 81 24 5f
05bdh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
05c7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
05cbh mov rcx,7FFDDB82FF08h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff08h:imm64]         encoding(10 bytes) = 48 b9 08 ff 82 db fd 7f 00 00
05d5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
05d9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 02 11 00 00
05deh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
05e8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 93 8f 24 5f
05edh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
05f0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
05f4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
05f7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 c4 80 24 5f
05fch mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0606h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
060ah mov rcx,7FFDDB82FF10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff10h:imm64]         encoding(10 bytes) = 48 b9 10 ff 82 db fd 7f 00 00
0614h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0618h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c3 10 00 00
061dh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0627h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 54 8f 24 5f
062ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
062fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0633h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0636h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 85 80 24 5f
063bh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0645h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0649h mov rcx,7FFDDB82FF18h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff18h:imm64]         encoding(10 bytes) = 48 b9 18 ff 82 db fd 7f 00 00
0653h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0657h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 84 10 00 00
065ch mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0666h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 15 8f 24 5f
066bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
066eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0672h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0675h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 46 80 24 5f
067ah mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0684h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0688h mov rcx,7FFDDB82FF20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff20h:imm64]         encoding(10 bytes) = 48 b9 20 ff 82 db fd 7f 00 00
0692h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0696h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 45 10 00 00
069bh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
06a5h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 d6 8e 24 5f
06aah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
06adh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
06b1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
06b4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 07 80 24 5f
06b9h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
06c3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
06c7h mov rcx,7FFDDB82FF28h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff28h:imm64]         encoding(10 bytes) = 48 b9 28 ff 82 db fd 7f 00 00
06d1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
06d5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 06 10 00 00
06dah mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
06e4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 97 8e 24 5f
06e9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
06ech lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
06f0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
06f3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 c8 7f 24 5f
06f8h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0702h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0706h mov rcx,7FFDDB82FF30h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff30h:imm64]         encoding(10 bytes) = 48 b9 30 ff 82 db fd 7f 00 00
0710h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0714h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c7 0f 00 00
0719h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0723h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 58 8e 24 5f
0728h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
072bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
072fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0732h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 89 7f 24 5f
0737h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0741h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0745h mov rcx,7FFDDB82FF38h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff38h:imm64]         encoding(10 bytes) = 48 b9 38 ff 82 db fd 7f 00 00
074fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0753h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 88 0f 00 00
0758h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0762h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 19 8e 24 5f
0767h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
076ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
076eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0771h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 4a 7f 24 5f
0776h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0780h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0784h mov rcx,7FFDDB82FF40h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff40h:imm64]         encoding(10 bytes) = 48 b9 40 ff 82 db fd 7f 00 00
078eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0792h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 49 0f 00 00
0797h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
07a1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 da 8d 24 5f
07a6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
07a9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
07adh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
07b0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 0b 7f 24 5f
07b5h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
07bfh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
07c3h mov rcx,7FFDDB82FF48h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff48h:imm64]         encoding(10 bytes) = 48 b9 48 ff 82 db fd 7f 00 00
07cdh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
07d1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 0a 0f 00 00
07d6h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
07e0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 9b 8d 24 5f
07e5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
07e8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
07ech mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
07efh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 cc 7e 24 5f
07f4h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
07feh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0802h mov rcx,7FFDDB82FF50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff50h:imm64]         encoding(10 bytes) = 48 b9 50 ff 82 db fd 7f 00 00
080ch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0810h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 cb 0e 00 00
0815h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
081fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 5c 8d 24 5f
0824h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0827h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
082bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
082eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 8d 7e 24 5f
0833h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
083dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0841h mov rcx,7FFDDB82FF58h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff58h:imm64]         encoding(10 bytes) = 48 b9 58 ff 82 db fd 7f 00 00
084bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
084fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 8c 0e 00 00
0854h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
085eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 1d 8d 24 5f
0863h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0866h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
086ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
086dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 4e 7e 24 5f
0872h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
087ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0880h mov rcx,7FFDDB82FF60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff60h:imm64]         encoding(10 bytes) = 48 b9 60 ff 82 db fd 7f 00 00
088ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
088eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 4d 0e 00 00
0893h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
089dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 de 8c 24 5f
08a2h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
08a5h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
08a9h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
08ach call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 0f 7e 24 5f
08b1h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
08bbh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
08bfh mov rcx,7FFDDB82FF68h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff68h:imm64]         encoding(10 bytes) = 48 b9 68 ff 82 db fd 7f 00 00
08c9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
08cdh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 0e 0e 00 00
08d2h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
08dch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 9f 8c 24 5f
08e1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
08e4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
08e8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
08ebh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 d0 7d 24 5f
08f0h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
08fah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
08feh mov rcx,7FFDDB82FF70h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff70h:imm64]         encoding(10 bytes) = 48 b9 70 ff 82 db fd 7f 00 00
0908h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
090ch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 cf 0d 00 00
0911h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
091bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 60 8c 24 5f
0920h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0923h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0927h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
092ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 91 7d 24 5f
092fh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0939h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
093dh mov rcx,7FFDDB82FF78h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff78h:imm64]         encoding(10 bytes) = 48 b9 78 ff 82 db fd 7f 00 00
0947h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
094bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 90 0d 00 00
0950h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
095ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 21 8c 24 5f
095fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0962h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0966h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0969h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 52 7d 24 5f
096eh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0978h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
097ch mov rcx,7FFDDB82FF80h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff80h:imm64]         encoding(10 bytes) = 48 b9 80 ff 82 db fd 7f 00 00
0986h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
098ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 51 0d 00 00
098fh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0999h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 e2 8b 24 5f
099eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
09a1h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
09a5h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
09a8h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 13 7d 24 5f
09adh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
09b7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
09bbh mov rcx,7FFDDB82FF88h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff88h:imm64]         encoding(10 bytes) = 48 b9 88 ff 82 db fd 7f 00 00
09c5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
09c9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 12 0d 00 00
09ceh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
09d8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 a3 8b 24 5f
09ddh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
09e0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
09e4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
09e7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 d4 7c 24 5f
09ech mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
09f6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
09fah mov rcx,7FFDDB82FF90h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff90h:imm64]         encoding(10 bytes) = 48 b9 90 ff 82 db fd 7f 00 00
0a04h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0a08h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 d3 0c 00 00
0a0dh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0a17h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 64 8b 24 5f
0a1ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a1fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0a23h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0a26h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 95 7c 24 5f
0a2bh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0a35h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0a39h mov rcx,7FFDDB82FF98h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ff98h:imm64]         encoding(10 bytes) = 48 b9 98 ff 82 db fd 7f 00 00
0a43h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0a47h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 94 0c 00 00
0a4ch mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0a56h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 25 8b 24 5f
0a5bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a5eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0a62h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0a65h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 56 7c 24 5f
0a6ah mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0a74h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0a78h mov rcx,7FFDDB82FFA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffa0h:imm64]         encoding(10 bytes) = 48 b9 a0 ff 82 db fd 7f 00 00
0a82h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0a86h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 55 0c 00 00
0a8bh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0a95h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 e6 8a 24 5f
0a9ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0a9dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0aa1h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0aa4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 17 7c 24 5f
0aa9h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0ab3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ab7h mov rcx,7FFDDB82FFA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffa8h:imm64]         encoding(10 bytes) = 48 b9 a8 ff 82 db fd 7f 00 00
0ac1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0ac5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 16 0c 00 00
0acah mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0ad4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 a7 8a 24 5f
0ad9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0adch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0ae0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ae3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 d8 7b 24 5f
0ae8h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0af2h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0af6h mov rcx,7FFDDB82FFB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffb0h:imm64]         encoding(10 bytes) = 48 b9 b0 ff 82 db fd 7f 00 00
0b00h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0b04h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 d7 0b 00 00
0b09h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0b13h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 68 8a 24 5f
0b18h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0b1bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0b1fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0b22h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 99 7b 24 5f
0b27h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0b31h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0b35h mov rcx,7FFDDB82FFB8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffb8h:imm64]         encoding(10 bytes) = 48 b9 b8 ff 82 db fd 7f 00 00
0b3fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0b43h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 98 0b 00 00
0b48h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0b52h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 29 8a 24 5f
0b57h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0b5ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0b5eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0b61h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 5a 7b 24 5f
0b66h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0b70h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0b74h mov rcx,7FFDDB82FFC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffc0h:imm64]         encoding(10 bytes) = 48 b9 c0 ff 82 db fd 7f 00 00
0b7eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0b82h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 59 0b 00 00
0b87h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0b91h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 ea 89 24 5f
0b96h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0b99h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0b9dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ba0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 1b 7b 24 5f
0ba5h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0bafh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0bb3h mov rcx,7FFDDB82FFC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffc8h:imm64]         encoding(10 bytes) = 48 b9 c8 ff 82 db fd 7f 00 00
0bbdh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0bc1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 1a 0b 00 00
0bc6h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0bd0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 ab 89 24 5f
0bd5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0bd8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0bdch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0bdfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 dc 7a 24 5f
0be4h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0beeh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0bf2h mov rcx,7FFDDB82FFD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffd0h:imm64]         encoding(10 bytes) = 48 b9 d0 ff 82 db fd 7f 00 00
0bfch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0c00h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 db 0a 00 00
0c05h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0c0fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 6c 89 24 5f
0c14h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c17h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0c1bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0c1eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 9d 7a 24 5f
0c23h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0c2dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0c31h mov rcx,7FFDDB82FFD8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffd8h:imm64]         encoding(10 bytes) = 48 b9 d8 ff 82 db fd 7f 00 00
0c3bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0c3fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 9c 0a 00 00
0c44h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0c4eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 2d 89 24 5f
0c53h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c56h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0c5ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0c5dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 5e 7a 24 5f
0c62h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0c6ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0c70h mov rcx,7FFDDB82FFE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffe0h:imm64]         encoding(10 bytes) = 48 b9 e0 ff 82 db fd 7f 00 00
0c7ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0c7eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 5d 0a 00 00
0c83h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0c8dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 ee 88 24 5f
0c92h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0c95h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0c99h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0c9ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 1f 7a 24 5f
0ca1h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0cabh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0cafh mov rcx,7FFDDB82FFE8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82ffe8h:imm64]         encoding(10 bytes) = 48 b9 e8 ff 82 db fd 7f 00 00
0cb9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0cbdh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 1e 0a 00 00
0cc2h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0ccch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 af 88 24 5f
0cd1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0cd4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0cd8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0cdbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 e0 79 24 5f
0ce0h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0ceah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ceeh mov rcx,7FFDDB82FFF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fff0h:imm64]         encoding(10 bytes) = 48 b9 f0 ff 82 db fd 7f 00 00
0cf8h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0cfch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 df 09 00 00
0d01h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0d0bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 70 88 24 5f
0d10h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d13h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d17h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0d1ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 a1 79 24 5f
0d1fh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0d29h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0d2dh mov rcx,7FFDDB82FFF8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb82fff8h:imm64]         encoding(10 bytes) = 48 b9 f8 ff 82 db fd 7f 00 00
0d37h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0d3bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 a0 09 00 00
0d40h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0d4ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 31 88 24 5f
0d4fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d52h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d56h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0d59h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 62 79 24 5f
0d5eh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0d68h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0d6ch mov rcx,7FFDDB830000h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830000h:imm64]         encoding(10 bytes) = 48 b9 00 00 83 db fd 7f 00 00
0d76h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0d7ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 61 09 00 00
0d7fh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0d89h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 f2 87 24 5f
0d8eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d91h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0d95h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0d98h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 23 79 24 5f
0d9dh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0da7h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0dabh mov rcx,7FFDDB830008h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830008h:imm64]         encoding(10 bytes) = 48 b9 08 00 83 db fd 7f 00 00
0db5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0db9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 22 09 00 00
0dbeh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0dc8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 b3 87 24 5f
0dcdh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0dd0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0dd4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0dd7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 e4 78 24 5f
0ddch mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0de6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0deah mov rcx,7FFDDB830010h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830010h:imm64]         encoding(10 bytes) = 48 b9 10 00 83 db fd 7f 00 00
0df4h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0df8h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 e3 08 00 00
0dfdh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0e07h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 74 87 24 5f
0e0ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0e0fh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0e13h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0e16h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 a5 78 24 5f
0e1bh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0e25h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0e29h mov rcx,7FFDDB830018h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830018h:imm64]         encoding(10 bytes) = 48 b9 18 00 83 db fd 7f 00 00
0e33h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0e37h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 a4 08 00 00
0e3ch mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0e46h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 35 87 24 5f
0e4bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0e4eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0e52h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0e55h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 66 78 24 5f
0e5ah mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0e64h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0e68h mov rcx,7FFDDB830020h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830020h:imm64]         encoding(10 bytes) = 48 b9 20 00 83 db fd 7f 00 00
0e72h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0e76h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 65 08 00 00
0e7bh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0e85h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 f6 86 24 5f
0e8ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0e8dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0e91h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0e94h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 27 78 24 5f
0e99h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0ea3h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ea7h mov rcx,7FFDDB830028h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830028h:imm64]         encoding(10 bytes) = 48 b9 28 00 83 db fd 7f 00 00
0eb1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0eb5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 26 08 00 00
0ebah mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0ec4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 b7 86 24 5f
0ec9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0ecch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0ed0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0ed3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 e8 77 24 5f
0ed8h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0ee2h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0ee6h mov rcx,7FFDDB830030h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830030h:imm64]         encoding(10 bytes) = 48 b9 30 00 83 db fd 7f 00 00
0ef0h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0ef4h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 e7 07 00 00
0ef9h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0f03h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 78 86 24 5f
0f08h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f0bh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f0fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f12h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 a9 77 24 5f
0f17h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0f21h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0f25h mov rcx,7FFDDB830038h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830038h:imm64]         encoding(10 bytes) = 48 b9 38 00 83 db fd 7f 00 00
0f2fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0f33h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 a8 07 00 00
0f38h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0f42h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 39 86 24 5f
0f47h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f4ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f4eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f51h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 6a 77 24 5f
0f56h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0f60h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0f64h mov rcx,7FFDDB830040h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830040h:imm64]         encoding(10 bytes) = 48 b9 40 00 83 db fd 7f 00 00
0f6eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0f72h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 69 07 00 00
0f77h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0f81h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 fa 85 24 5f
0f86h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0f89h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0f8dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0f90h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 2b 77 24 5f
0f95h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0f9fh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0fa3h mov rcx,7FFDDB830048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830048h:imm64]         encoding(10 bytes) = 48 b9 48 00 83 db fd 7f 00 00
0fadh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0fb1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 2a 07 00 00
0fb6h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0fc0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 bb 85 24 5f
0fc5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0fc8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0fcch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0fcfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 ec 76 24 5f
0fd4h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
0fdeh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
0fe2h mov rcx,7FFDDB830050h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830050h:imm64]         encoding(10 bytes) = 48 b9 50 00 83 db fd 7f 00 00
0fech mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
0ff0h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 eb 06 00 00
0ff5h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
0fffh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 7c 85 24 5f
1004h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1007h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
100bh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
100eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 ad 76 24 5f
1013h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
101dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1021h mov rcx,7FFDDB830058h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830058h:imm64]         encoding(10 bytes) = 48 b9 58 00 83 db fd 7f 00 00
102bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
102fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ac 06 00 00
1034h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
103eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 3d 85 24 5f
1043h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1046h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
104ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
104dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 6e 76 24 5f
1052h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
105ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1060h mov rcx,7FFDDB830060h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830060h:imm64]         encoding(10 bytes) = 48 b9 60 00 83 db fd 7f 00 00
106ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
106eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 6d 06 00 00
1073h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
107dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 fe 84 24 5f
1082h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1085h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1089h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
108ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 2f 76 24 5f
1091h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
109bh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
109fh mov rcx,7FFDDB830068h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830068h:imm64]         encoding(10 bytes) = 48 b9 68 00 83 db fd 7f 00 00
10a9h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
10adh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 2e 06 00 00
10b2h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
10bch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 bf 84 24 5f
10c1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
10c4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
10c8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
10cbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 f0 75 24 5f
10d0h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
10dah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
10deh mov rcx,7FFDDB830070h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830070h:imm64]         encoding(10 bytes) = 48 b9 70 00 83 db fd 7f 00 00
10e8h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
10ech jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ef 05 00 00
10f1h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
10fbh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 80 84 24 5f
1100h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1103h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1107h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
110ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 b1 75 24 5f
110fh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1119h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
111dh mov rcx,7FFDDB830078h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830078h:imm64]         encoding(10 bytes) = 48 b9 78 00 83 db fd 7f 00 00
1127h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
112bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b0 05 00 00
1130h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
113ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 41 84 24 5f
113fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1142h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1146h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1149h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 72 75 24 5f
114eh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1158h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
115ch mov rcx,7FFDDB830080h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830080h:imm64]         encoding(10 bytes) = 48 b9 80 00 83 db fd 7f 00 00
1166h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
116ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 71 05 00 00
116fh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1179h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 02 84 24 5f
117eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1181h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1185h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1188h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 33 75 24 5f
118dh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1197h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
119bh mov rcx,7FFDDB830088h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830088h:imm64]         encoding(10 bytes) = 48 b9 88 00 83 db fd 7f 00 00
11a5h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
11a9h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 32 05 00 00
11aeh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
11b8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 c3 83 24 5f
11bdh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
11c0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
11c4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
11c7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 f4 74 24 5f
11cch mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
11d6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
11dah mov rcx,7FFDDB830090h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830090h:imm64]         encoding(10 bytes) = 48 b9 90 00 83 db fd 7f 00 00
11e4h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
11e8h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f3 04 00 00
11edh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
11f7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 84 83 24 5f
11fch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
11ffh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1203h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1206h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 b5 74 24 5f
120bh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1215h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1219h mov rcx,7FFDDB830098h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830098h:imm64]         encoding(10 bytes) = 48 b9 98 00 83 db fd 7f 00 00
1223h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1227h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b4 04 00 00
122ch mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1236h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 45 83 24 5f
123bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
123eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1242h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1245h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 76 74 24 5f
124ah mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1254h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1258h mov rcx,7FFDDB8300A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300a0h:imm64]         encoding(10 bytes) = 48 b9 a0 00 83 db fd 7f 00 00
1262h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1266h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 75 04 00 00
126bh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1275h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 06 83 24 5f
127ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
127dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1281h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1284h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 37 74 24 5f
1289h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1293h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1297h mov rcx,7FFDDB8300A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300a8h:imm64]         encoding(10 bytes) = 48 b9 a8 00 83 db fd 7f 00 00
12a1h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
12a5h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 36 04 00 00
12aah mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
12b4h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 c7 82 24 5f
12b9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
12bch lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
12c0h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
12c3h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 f8 73 24 5f
12c8h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
12d2h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
12d6h mov rcx,7FFDDB8300B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300b0h:imm64]         encoding(10 bytes) = 48 b9 b0 00 83 db fd 7f 00 00
12e0h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
12e4h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 f7 03 00 00
12e9h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
12f3h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 88 82 24 5f
12f8h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
12fbh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
12ffh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1302h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 b9 73 24 5f
1307h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1311h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1315h mov rcx,7FFDDB8300B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300b8h:imm64]         encoding(10 bytes) = 48 b9 b8 00 83 db fd 7f 00 00
131fh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1323h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 b8 03 00 00
1328h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1332h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 49 82 24 5f
1337h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
133ah lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
133eh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1341h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 7a 73 24 5f
1346h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1350h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1354h mov rcx,7FFDDB8300C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300c0h:imm64]         encoding(10 bytes) = 48 b9 c0 00 83 db fd 7f 00 00
135eh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1362h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 79 03 00 00
1367h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1371h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 0a 82 24 5f
1376h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1379h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
137dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1380h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 3b 73 24 5f
1385h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
138fh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1393h mov rcx,7FFDDB8300C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300c8h:imm64]         encoding(10 bytes) = 48 b9 c8 00 83 db fd 7f 00 00
139dh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
13a1h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 3a 03 00 00
13a6h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
13b0h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 cb 81 24 5f
13b5h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
13b8h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
13bch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
13bfh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 fc 72 24 5f
13c4h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
13ceh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
13d2h mov rcx,7FFDDB8300D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300d0h:imm64]         encoding(10 bytes) = 48 b9 d0 00 83 db fd 7f 00 00
13dch mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
13e0h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 fb 02 00 00
13e5h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
13efh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 8c 81 24 5f
13f4h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
13f7h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
13fbh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
13feh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 bd 72 24 5f
1403h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
140dh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1411h mov rcx,7FFDDB8300D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300d8h:imm64]         encoding(10 bytes) = 48 b9 d8 00 83 db fd 7f 00 00
141bh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
141fh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 bc 02 00 00
1424h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
142eh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 4d 81 24 5f
1433h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1436h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
143ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
143dh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 7e 72 24 5f
1442h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
144ch mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1450h mov rcx,7FFDDB8300E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300e0h:imm64]         encoding(10 bytes) = 48 b9 e0 00 83 db fd 7f 00 00
145ah mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
145eh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 7d 02 00 00
1463h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
146dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 0e 81 24 5f
1472h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1475h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1479h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
147ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 3f 72 24 5f
1481h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
148bh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
148fh mov rcx,7FFDDB8300E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300e8h:imm64]         encoding(10 bytes) = 48 b9 e8 00 83 db fd 7f 00 00
1499h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
149dh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 3e 02 00 00
14a2h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
14ach call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 cf 80 24 5f
14b1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
14b4h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
14b8h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
14bbh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 00 72 24 5f
14c0h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
14cah mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
14ceh mov rcx,7FFDDB8300F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300f0h:imm64]         encoding(10 bytes) = 48 b9 f0 00 83 db fd 7f 00 00
14d8h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
14dch jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 ff 01 00 00
14e1h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
14ebh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 90 80 24 5f
14f0h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
14f3h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
14f7h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
14fah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 c1 71 24 5f
14ffh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1509h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
150dh mov rcx,7FFDDB8300F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb8300f8h:imm64]         encoding(10 bytes) = 48 b9 f8 00 83 db fd 7f 00 00
1517h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
151bh jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c0 01 00 00
1520h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
152ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 51 80 24 5f
152fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1532h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1536h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1539h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 82 71 24 5f
153eh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1548h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
154ch mov rcx,7FFDDB830100h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830100h:imm64]         encoding(10 bytes) = 48 b9 00 01 83 db fd 7f 00 00
1556h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
155ah jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 81 01 00 00
155fh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1569h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 12 80 24 5f
156eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1571h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1575h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1578h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 43 71 24 5f
157dh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1587h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
158bh mov rcx,7FFDDB830108h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830108h:imm64]         encoding(10 bytes) = 48 b9 08 01 83 db fd 7f 00 00
1595h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1599h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 42 01 00 00
159eh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
15a8h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 d3 7f 24 5f
15adh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
15b0h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
15b4h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
15b7h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 04 71 24 5f
15bch mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
15c6h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
15cah mov rcx,7FFDDB830110h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830110h:imm64]         encoding(10 bytes) = 48 b9 10 01 83 db fd 7f 00 00
15d4h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
15d8h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 03 01 00 00
15ddh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
15e7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 94 7f 24 5f
15ech mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
15efh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
15f3h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
15f6h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 c5 70 24 5f
15fbh mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1605h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1609h mov rcx,7FFDDB830118h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830118h:imm64]         encoding(10 bytes) = 48 b9 18 01 83 db fd 7f 00 00
1613h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1617h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 c4 00 00 00
161ch mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1626h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 55 7f 24 5f
162bh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
162eh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1632h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1635h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 86 70 24 5f
163ah mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
1644h mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
1648h mov rcx,7FFDDB830120h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830120h:imm64]         encoding(10 bytes) = 48 b9 20 01 83 db fd 7f 00 00
1652h mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
1656h jmp near ptr 16e0h            ; JMP(Jmp_rel32_64) [16E0h:jmp64]                      encoding(5 bytes) = e9 85 00 00 00
165bh mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
1665h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 16 7f 24 5f
166ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
166dh lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
1671h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1674h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 47 70 24 5f
1679h mov rax,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b8 b0 de ff da fd 7f 00 00
1683h mov [rdi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 47 18
1687h mov rax,7FFDDB830128h         ; MOV(Mov_r64_imm64) [RAX,7ffddb830128h:imm64]         encoding(10 bytes) = 48 b8 28 01 83 db fd 7f 00 00
1691h mov [rdi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 47 20
1695h jmp short 16e0h               ; JMP(Jmp_rel8_64) [16E0h:jmp64]                       encoding(2 bytes) = eb 49
1697h mov rcx,7FFDDBA0B558h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b558h:imm64]         encoding(10 bytes) = 48 b9 58 b5 a0 db fd 7f 00 00
16a1h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F249580h:jmp64]                encoding(5 bytes) = e8 da 7e 24 5f
16a6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16a9h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
16adh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
16b0h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2486C0h:jmp64]                encoding(5 bytes) = e8 0b 70 24 5f
16b5h mov rcx,7FFDDAFFDEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddaffdeb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de ff da fd 7f 00 00
16bfh mov [rdi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 18
16c3h mov rcx,7FFDDB830160h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830160h:imm64]         encoding(10 bytes) = 48 b9 60 01 83 db fd 7f 00 00
16cdh mov [rdi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4f 20
16d1h jmp short 16e0h               ; JMP(Jmp_rel8_64) [16E0h:jmp64]                       encoding(2 bytes) = eb 0d
16d3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
16d6h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
16d8h call 7FFDDBA184A0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD570h:jmp64]        encoding(5 bytes) = e8 93 be ff ff
16ddh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16e0h mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
16e3h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
16e7h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
16e8h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
16e9h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lookupBytes => new byte[5866]{0x57,0x56,0x48,0x83,0xEC,0x28,0x40,0x0F,0xB6,0xF1,0x83,0xFE,0x5A,0x77,0x18,0x8B,0xCE,0x48,0x8D,0x05,0xD8,0x16,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE4,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x80,0xF9,0xFF,0x0F,0x84,0x67,0x16,0x00,0x00,0xE9,0x9E,0x16,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3C,0x95,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6D,0x86,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x58,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x6C,0x16,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFD,0x94,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x2E,0x86,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x2D,0x16,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBE,0x94,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xEF,0x85,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x68,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xEE,0x15,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7F,0x94,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB0,0x85,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x70,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xAF,0x15,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x40,0x94,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x71,0x85,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x78,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x70,0x15,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x01,0x94,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x32,0x85,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x80,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x31,0x15,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC2,0x93,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF3,0x84,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x88,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF2,0x14,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x83,0x93,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB4,0x84,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x90,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB3,0x14,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x93,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x75,0x84,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x98,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x74,0x14,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x05,0x93,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x36,0x84,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA0,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x35,0x14,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x92,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF7,0x83,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA8,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF6,0x13,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x87,0x92,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB8,0x83,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB0,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB7,0x13,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x48,0x92,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x79,0x83,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB8,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x78,0x13,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x09,0x92,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3A,0x83,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC0,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x39,0x13,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCA,0x91,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xFB,0x82,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC8,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFA,0x12,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8B,0x91,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xBC,0x82,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xBB,0x12,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4C,0x91,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x7D,0x82,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD8,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x7C,0x12,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0D,0x91,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3E,0x82,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE0,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x3D,0x12,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCE,0x90,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xFF,0x81,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE8,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFE,0x11,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8F,0x90,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC0,0x81,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF0,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xBF,0x11,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x50,0x90,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x81,0x81,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF8,0xFE,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x80,0x11,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x11,0x90,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x42,0x81,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x00,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x41,0x11,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD2,0x8F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x03,0x81,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x08,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x02,0x11,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x93,0x8F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC4,0x80,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x10,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC3,0x10,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x54,0x8F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x85,0x80,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x18,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x84,0x10,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x15,0x8F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x46,0x80,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x20,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x45,0x10,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0x8E,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x07,0x80,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x28,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x06,0x10,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x97,0x8E,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC8,0x7F,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x30,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC7,0x0F,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x58,0x8E,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x89,0x7F,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x38,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x88,0x0F,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x19,0x8E,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x4A,0x7F,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x40,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x49,0x0F,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0x8D,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x0B,0x7F,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x48,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x0A,0x0F,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9B,0x8D,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xCC,0x7E,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x50,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xCB,0x0E,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x5C,0x8D,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x8D,0x7E,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x58,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x8C,0x0E,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1D,0x8D,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x4E,0x7E,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x4D,0x0E,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDE,0x8C,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x0F,0x7E,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x68,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x0E,0x0E,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0x8C,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xD0,0x7D,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x70,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xCF,0x0D,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x60,0x8C,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x91,0x7D,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x78,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x90,0x0D,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x21,0x8C,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x52,0x7D,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x80,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x51,0x0D,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE2,0x8B,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x13,0x7D,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x88,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x12,0x0D,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA3,0x8B,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xD4,0x7C,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x90,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xD3,0x0C,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0x8B,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x95,0x7C,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x98,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x94,0x0C,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x25,0x8B,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x56,0x7C,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA0,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x55,0x0C,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0x8A,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x17,0x7C,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA8,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x16,0x0C,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA7,0x8A,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xD8,0x7B,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB0,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xD7,0x0B,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x68,0x8A,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x99,0x7B,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB8,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x98,0x0B,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x29,0x8A,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x5A,0x7B,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC0,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x59,0x0B,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEA,0x89,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x1B,0x7B,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC8,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x1A,0x0B,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAB,0x89,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xDC,0x7A,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xDB,0x0A,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x6C,0x89,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x9D,0x7A,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD8,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x9C,0x0A,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x2D,0x89,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x5E,0x7A,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE0,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x5D,0x0A,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xEE,0x88,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x1F,0x7A,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE8,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x1E,0x0A,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAF,0x88,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE0,0x79,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF0,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xDF,0x09,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x70,0x88,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA1,0x79,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF8,0xFF,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xA0,0x09,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x31,0x88,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x62,0x79,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x00,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x61,0x09,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF2,0x87,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x23,0x79,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x08,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x22,0x09,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB3,0x87,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE4,0x78,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x10,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xE3,0x08,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x87,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA5,0x78,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x18,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xA4,0x08,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x35,0x87,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x66,0x78,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x20,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x65,0x08,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x86,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x27,0x78,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x28,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x26,0x08,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB7,0x86,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xE8,0x77,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x30,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xE7,0x07,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x78,0x86,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xA9,0x77,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x38,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xA8,0x07,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x39,0x86,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6A,0x77,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x40,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x69,0x07,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFA,0x85,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x2B,0x77,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x48,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x2A,0x07,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBB,0x85,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xEC,0x76,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x50,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xEB,0x06,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0x85,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xAD,0x76,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x58,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xAC,0x06,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x3D,0x85,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x6E,0x76,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x6D,0x06,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xFE,0x84,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x2F,0x76,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x68,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x2E,0x06,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xBF,0x84,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF0,0x75,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x70,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xEF,0x05,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x80,0x84,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB1,0x75,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x78,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB0,0x05,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x41,0x84,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x72,0x75,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x80,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x71,0x05,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x02,0x84,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x33,0x75,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x88,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x32,0x05,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC3,0x83,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF4,0x74,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x90,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF3,0x04,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0x83,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB5,0x74,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x98,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB4,0x04,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x45,0x83,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x76,0x74,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA0,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x75,0x04,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0x83,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x37,0x74,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xA8,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x36,0x04,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC7,0x82,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xF8,0x73,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB0,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xF7,0x03,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x88,0x82,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xB9,0x73,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xB8,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xB8,0x03,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x49,0x82,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x7A,0x73,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC0,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x79,0x03,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0A,0x82,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3B,0x73,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xC8,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x3A,0x03,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCB,0x81,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xFC,0x72,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD0,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFB,0x02,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8C,0x81,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xBD,0x72,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xD8,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xBC,0x02,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4D,0x81,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x7E,0x72,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE0,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x7D,0x02,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x0E,0x81,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x3F,0x72,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xE8,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x3E,0x02,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCF,0x80,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x00,0x72,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF0,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xFF,0x01,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x90,0x80,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC1,0x71,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0xF8,0x00,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC0,0x01,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0x80,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x82,0x71,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x00,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x81,0x01,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x12,0x80,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x43,0x71,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x08,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x42,0x01,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD3,0x7F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x04,0x71,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x10,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x03,0x01,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x7F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0xC5,0x70,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x18,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0xC4,0x00,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x55,0x7F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x86,0x70,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x20,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xE9,0x85,0x00,0x00,0x00,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x16,0x7F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x47,0x70,0x24,0x5F,0x48,0xB8,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x47,0x18,0x48,0xB8,0x28,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x47,0x20,0xEB,0x49,0x48,0xB9,0x58,0xB5,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xDA,0x7E,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x0B,0x70,0x24,0x5F,0x48,0xB9,0xB0,0xDE,0xFF,0xDA,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x18,0x48,0xB9,0x60,0x01,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4F,0x20,0xEB,0x0D,0x0F,0xB6,0xC9,0x33,0xD2,0xE8,0x93,0xBE,0xFF,0xFF,0x48,0x8B,0xF8,0x48,0x8B,0xC7,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:173
; function: ILogicOpSvc get_Factory()
; location: [7FFDDBA1C7B0h, 7FFDDBA1C7DCh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0006h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000bh mov byte ptr [rsp+20h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 20 00
0010h mov rcx,7FFDDB9E8018h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e8018h:imm64]         encoding(10 bytes) = 48 b9 18 80 9e db fd 7f 00 00
001ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F247D00h:jmp64]                encoding(5 bytes) = e8 e1 7c 24 5f
001fh movsx rdx,byte ptr [rsp+20h]  ; MOVSX(Movsx_r64_rm8) [RDX,mem(8i,RSP:br,SS:sr)]      encoding(6 bytes) = 48 0f be 54 24 20
0025h mov [rax+8],dl                ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),DL]            encoding(3 bytes) = 88 50 08
0028h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_FactoryBytes => new byte[45]{0x48,0x83,0xEC,0x28,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0xC6,0x44,0x24,0x20,0x00,0x48,0xB9,0x18,0x80,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x7C,0x24,0x5F,0x48,0x0F,0xBE,0x54,0x24,0x20,0x88,0x50,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:203
; function: ComparisonKind[] get_ComparisonKinds()
; location: [7FFDDBA1C9C0h, 7FFDDBA1C9FDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDBA09D00h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09d00h:imm64]         encoding(10 bytes) = 48 b9 00 9d a0 db fd 7f 00 00
0011h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F247C20h:jmp64]                encoding(5 bytes) = e8 05 7c 24 5f
001bh mov rdx,1E1FFEBAABBh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaabbh:imm64]          encoding(10 bytes) = 48 ba bb aa eb ff e1 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h mov r8,[rdx+10h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(4 bytes) = 4c 8b 42 10
0035h mov [rcx+10h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 41 10
0039h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindsBytes => new byte[62]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0x00,0x9D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x05,0x7C,0x24,0x5F,0x48,0xBA,0xBB,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0x4C,0x8B,0x42,0x10,0x4C,0x89,0x41,0x10,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:234
; function: IEnumerable<UnaryBitwiseOpKind:uint> get_UnaryBitwiseKinds()
; location: [7FFDDBA1CA20h, 7FFDDBA1CA59h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDBA09710h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09710h:imm64]         encoding(10 bytes) = 48 b9 10 97 a0 db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F247BC0h:jmp64]                encoding(5 bytes) = e8 a7 7b 24 5f
0019h mov rdx,1E1FFEBAAABh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaaabh:imm64]          encoding(10 bytes) = 48 ba ab aa eb ff e1 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryBitwiseKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x10,0x97,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xA7,0x7B,0x24,0x5F,0x48,0xBA,0xAB,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryBitwiseOpKind[] get_BinaryBitwiseKinds()
; location: [7FFDDBA1CA70h, 7FFDDBA1CAC3h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDBA09A38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09a38h:imm64]         encoding(10 bytes) = 48 b9 38 9a a0 db fd 7f 00 00
0011h mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F247B70h:jmp64]                encoding(5 bytes) = e8 55 7b 24 5f
001bh mov rdx,1E1FFEBAA6Bh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaa6bh:imm64]          encoding(10 bytes) = 48 ba 6b aa eb ff e1 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h vmovdqu xmm0,xmmword ptr [rdx+10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 10
0036h vmovdqu xmmword ptr [rcx+10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 10
003bh vmovdqu xmm0,xmmword ptr [rdx+20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 20
0040h vmovdqu xmmword ptr [rcx+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 20
0045h vmovdqu xmm0,xmmword ptr [rdx+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 5 bytes) = c5 fa 6f 42 30
004ah vmovdqu xmmword ptr [rcx+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 41 30
004fh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0053h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BinaryBitwiseKindsBytes => new byte[84]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0x38,0x9A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0x55,0x7B,0x24,0x5F,0x48,0xBA,0x6B,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0xC5,0xFA,0x6F,0x42,0x10,0xC5,0xFA,0x7F,0x41,0x10,0xC5,0xFA,0x6F,0x42,0x20,0xC5,0xFA,0x7F,0x41,0x20,0xC5,0xFA,0x6F,0x42,0x30,0xC5,0xFA,0x7F,0x41,0x30,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryArithmeticOpKind[] get_UnaryAritmeticKinds()
; location: [7FFDDBA1CAE0h, 7FFDDBA1CB19h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDBA0B8E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0b8e8h:imm64]         encoding(10 bytes) = 48 b9 e8 b8 a0 db fd 7f 00 00
000fh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F247B00h:jmp64]                encoding(5 bytes) = e8 e7 7a 24 5f
0019h mov rdx,1E1FFEBAA5Bh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaa5bh:imm64]          encoding(10 bytes) = 48 ba 5b aa eb ff e1 01 00 00
0023h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0027h mov r8,[rdx]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 02
002ah mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
002dh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
0031h mov [rcx+8],r8d               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 41 08
0035h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0039h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_UnaryAritmeticKindsBytes => new byte[58]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xE8,0xB8,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xE7,0x7A,0x24,0x5F,0x48,0xBA,0x5B,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0x4C,0x8B,0x02,0x4C,0x89,0x01,0x44,0x8B,0x42,0x08,0x44,0x89,0x41,0x08,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryArithmeticOpKind[] get_BinaryArithmeticKinds()
; location: [7FFDDBA1CB30h, 7FFDDBA1CB5Bh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDBA0BBB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba0bbb0h:imm64]         encoding(10 bytes) = 48 b9 b0 bb a0 db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F247AB0h:jmp64]                encoding(5 bytes) = e8 97 7a 24 5f
0019h mov dword ptr [rax+10h],400h  ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),400h:imm32] encoding(7 bytes) = c7 40 10 00 04 00 00
0020h mov dword ptr [rax+14h],800h  ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),800h:imm32] encoding(7 bytes) = c7 40 14 00 08 00 00
0027h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_BinaryArithmeticKindsBytes => new byte[44]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0xB0,0xBB,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0x7A,0x24,0x5F,0xC7,0x40,0x10,0x00,0x04,0x00,0x00,0xC7,0x40,0x14,0x00,0x08,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: ComparisonKind[] get_ComparisonKinds()
; location: [7FFDDBA1CB70h, 7FFDDBA1CBADh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0007h mov rcx,7FFDDBA09D00h         ; MOV(Mov_r64_imm64) [RCX,7ffddba09d00h:imm64]         encoding(10 bytes) = 48 b9 00 9d a0 db fd 7f 00 00
0011h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
0016h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F247A70h:jmp64]                encoding(5 bytes) = e8 55 7a 24 5f
001bh mov rdx,1E1FFEBAABBh          ; MOV(Mov_r64_imm64) [RDX,1e1ffebaabbh:imm64]          encoding(10 bytes) = 48 ba bb aa eb ff e1 01 00 00
0025h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0029h vmovdqu xmm0,xmmword ptr [rdx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RDX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 02
002dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0031h mov r8,[rdx+10h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RDX:br,DS:sr)]         encoding(4 bytes) = 4c 8b 42 10
0035h mov [rcx+10h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(4 bytes) = 4c 89 41 10
0039h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
003dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ComparisonKindsBytes => new byte[62]{0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x48,0xB9,0x00,0x9D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x55,0x7A,0x24,0x5F,0x48,0xBA,0xBB,0xAA,0xEB,0xFF,0xE1,0x01,0x00,0x00,0x48,0x8D,0x48,0x10,0xC5,0xFA,0x6F,0x02,0xC5,0xFA,0x7F,0x01,0x4C,0x8B,0x42,0x10,0x4C,0x89,0x41,0x10,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<TernaryOpKind:byte> get_TernaryBitwiseKinds()
; location: [7FFDDBA1CBD0h, 7FFDDBA1CC07h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+1],cl                ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(3 bytes) = 88 4a 01
0015h movsx r8,word ptr [rsp+20h]   ; MOVSX(Movsx_r64_rm16) [R8,mem(16i,RSP:br,SS:sr)]     encoding(6 bytes) = 4c 0f bf 44 24 20
001bh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0020h mov edx,4Fh                   ; MOV(Mov_r32_imm32) [EDX,4fh:imm32]                   encoding(5 bytes) = ba 4f 00 00 00
0025h call 7FFDDBA17AC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAEF8h:jmp64]        encoding(5 bytes) = e8 ce ae ff ff
002ah mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002dh call 7FFDDBA17AD8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFAF08h:jmp64]        encoding(5 bytes) = e8 d6 ae ff ff
0032h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0033h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0037h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_TernaryBitwiseKindsBytes => new byte[56]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x88,0x4A,0x01,0x4C,0x0F,0xBF,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x4F,0x00,0x00,0x00,0xE8,0xCE,0xAE,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0xD6,0xAE,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:329
; function: BitVector4 Signature(UnaryLogicOpKind:uint id)
; location: [7FFDDBA1CC20h, 7FFDDBA1CCC4h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000ch call 7FFDDBA18290h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB670h:jmp64]        encoding(5 bytes) = e8 5f b6 ff ff
0011h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0014h mov byte ptr [rsp+28h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 28 00
0019h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
001ch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0020h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0022h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0025h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0028h jne short 003dh               ; JNE(Jne_rel8_64) [3Dh:jmp64]                         encoding(2 bytes) = 75 13
002ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
002eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0031h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0034h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0037h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
003bh jmp short 004eh               ; JMP(Jmp_rel8_64) [4Eh:jmp64]                         encoding(2 bytes) = eb 11
003dh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0041h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0044h and ecx,0FEh                  ; AND(And_rm32_imm32) [ECX,feh:imm32]                  encoding(6 bytes) = 81 e1 fe 00 00 00
004ah mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
004eh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0052h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0055h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0059h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
005dh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0062h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
0065h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0068h jne short 007dh               ; JNE(Jne_rel8_64) [7Dh:jmp64]                         encoding(2 bytes) = 75 13
006ah mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
006eh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0071h or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
0074h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0077h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
007bh jmp short 008dh               ; JMP(Jmp_rel8_64) [8Dh:jmp64]                         encoding(2 bytes) = eb 10
007dh mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0081h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0084h and eax,0FDh                  ; AND(And_EAX_imm32) [EAX,fdh:imm32]                   encoding(5 bytes) = 25 fd 00 00 00
0089h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
008dh mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0091h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0094h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0098h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
009ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
009fh add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
00a3h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a4h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SignatureBytes => new byte[165]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0xE8,0x5F,0xB6,0xFF,0xFF,0x48,0x8B,0xF0,0xC6,0x44,0x24,0x28,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x01,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFE,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x83,0xC8,0x02,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0xEB,0x10,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x25,0xFD,0x00,0x00,0x00,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x30,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector4 Signature(BinaryLogicOpKind:uint id)
; location: [7FFDDBA1CCE0h, 7FFDDBA1CE19h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000ch call 7FFDDBA18800h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBB20h:jmp64]        encoding(5 bytes) = e8 0f bb ff ff
0011h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0014h mov byte ptr [rsp+28h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 28 00
0019h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
001ch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0020h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0022h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0025h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0028h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
002bh jne short 0040h               ; JNE(Jne_rel8_64) [40h:jmp64]                         encoding(2 bytes) = 75 13
002dh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0031h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0034h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0037h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
003ah mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
003eh jmp short 0051h               ; JMP(Jmp_rel8_64) [51h:jmp64]                         encoding(2 bytes) = eb 11
0040h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0044h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0047h and ecx,0FEh                  ; AND(And_rm32_imm32) [ECX,feh:imm32]                  encoding(6 bytes) = 81 e1 fe 00 00 00
004dh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0051h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0055h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0058h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
005ch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
005fh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0063h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0068h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
006bh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
006eh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0071h jne short 0086h               ; JNE(Jne_rel8_64) [86h:jmp64]                         encoding(2 bytes) = 75 13
0073h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0077h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
007ah or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
007dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0080h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0084h jmp short 0097h               ; JMP(Jmp_rel8_64) [97h:jmp64]                         encoding(2 bytes) = eb 11
0086h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
008ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
008dh and ecx,0FDh                  ; AND(And_rm32_imm32) [ECX,fdh:imm32]                  encoding(6 bytes) = 81 e1 fd 00 00 00
0093h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0097h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
009bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
009eh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00a2h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a5h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00a9h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00abh mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00b1h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00b4h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00b7h jne short 00cch               ; JNE(Jne_rel8_64) [CCh:jmp64]                         encoding(2 bytes) = 75 13
00b9h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00bdh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00c0h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
00c3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00c6h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00cah jmp short 00ddh               ; JMP(Jmp_rel8_64) [DDh:jmp64]                         encoding(2 bytes) = eb 11
00cch mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00d0h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00d3h and ecx,0FBh                  ; AND(And_rm32_imm32) [ECX,fbh:imm32]                  encoding(6 bytes) = 81 e1 fb 00 00 00
00d9h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00ddh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00e1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00e4h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00e8h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
00ech mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00f1h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00f7h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
00fah cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00fdh jne short 0112h               ; JNE(Jne_rel8_64) [112h:jmp64]                        encoding(2 bytes) = 75 13
00ffh mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0103h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0106h or eax,8                      ; OR(Or_rm32_imm8) [EAX,8h:imm32]                      encoding(3 bytes) = 83 c8 08
0109h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
010ch mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0110h jmp short 0122h               ; JMP(Jmp_rel8_64) [122h:jmp64]                        encoding(2 bytes) = eb 10
0112h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0116h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0119h and eax,0F7h                  ; AND(And_EAX_imm32) [EAX,f7h:imm32]                   encoding(5 bytes) = 25 f7 00 00 00
011eh mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0122h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0126h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0129h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
012dh mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0131h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0134h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
0138h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0139h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SignatureBytes => new byte[314]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0xE8,0x0F,0xBB,0xFF,0xFF,0x48,0x8B,0xF0,0xC6,0x44,0x24,0x28,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x01,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFE,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x02,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFD,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x04,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFB,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x83,0xC8,0x08,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0xEB,0x10,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x25,0xF7,0x00,0x00,0x00,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x30,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitVector8 Signature(TernaryOpKind:byte id)
; location: [7FFDDBA1CE30h, 7FFDDBA1D0CCh]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
000ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
000fh call 7FFDDBA1AF30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE100h:jmp64]        encoding(5 bytes) = e8 ec e0 ff ff
0014h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0017h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0021h mov edx,22h                   ; MOV(Mov_r32_imm32) [EDX,22h:imm32]                   encoding(5 bytes) = ba 22 00 00 00
0026h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F247A80h:jmp64]                encoding(5 bytes) = e8 55 7a 24 5f
002bh mov rcx,1E1F7826CA8h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826ca8h:imm64]          encoding(10 bytes) = 48 b9 a8 6c 82 f7 e1 01 00 00
0035h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0038h movzx ecx,byte ptr [rcx+8]    ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 49 08
003ch mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0040h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0043h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0047h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0049h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
004ch xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
004fh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0052h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0055h jne short 006ah               ; JNE(Jne_rel8_64) [6Ah:jmp64]                         encoding(2 bytes) = 75 13
0057h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
005bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
005eh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0061h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0064h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0068h jmp short 007bh               ; JMP(Jmp_rel8_64) [7Bh:jmp64]                         encoding(2 bytes) = eb 11
006ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
006eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0071h and ecx,0FEh                  ; AND(And_rm32_imm32) [ECX,feh:imm32]                  encoding(6 bytes) = 81 e1 fe 00 00 00
0077h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
007bh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
007fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0082h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0086h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0089h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
008dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
008fh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0092h mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
0098h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
009bh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
009eh jne short 00b3h               ; JNE(Jne_rel8_64) [B3h:jmp64]                         encoding(2 bytes) = 75 13
00a0h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00a4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00a7h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
00aah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00adh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00b1h jmp short 00c4h               ; JMP(Jmp_rel8_64) [C4h:jmp64]                         encoding(2 bytes) = eb 11
00b3h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00b7h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00bah and ecx,0FDh                  ; AND(And_rm32_imm32) [ECX,fdh:imm32]                  encoding(6 bytes) = 81 e1 fd 00 00 00
00c0h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00c4h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00c8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00cbh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00cfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00d2h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00d6h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00d8h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
00deh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
00e1h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00e4h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00e7h jne short 00fch               ; JNE(Jne_rel8_64) [FCh:jmp64]                         encoding(2 bytes) = 75 13
00e9h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
00edh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00f0h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
00f3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00f6h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
00fah jmp short 010dh               ; JMP(Jmp_rel8_64) [10Dh:jmp64]                        encoding(2 bytes) = eb 11
00fch mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0100h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0103h and ecx,0FBh                  ; AND(And_rm32_imm32) [ECX,fbh:imm32]                  encoding(6 bytes) = 81 e1 fb 00 00 00
0109h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
010dh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0111h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0114h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0118h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
011bh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
011fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0121h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
0127h mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
012dh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0130h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0133h jne short 0148h               ; JNE(Jne_rel8_64) [148h:jmp64]                        encoding(2 bytes) = 75 13
0135h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0139h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
013ch or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
013fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0142h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0146h jmp short 0159h               ; JMP(Jmp_rel8_64) [159h:jmp64]                        encoding(2 bytes) = eb 11
0148h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
014ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
014fh and ecx,0F7h                  ; AND(And_rm32_imm32) [ECX,f7h:imm32]                  encoding(6 bytes) = 81 e1 f7 00 00 00
0155h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0159h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
015dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0160h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0164h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0167h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
016bh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0170h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0173h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0176h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0179h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
017ch jne short 0191h               ; JNE(Jne_rel8_64) [191h:jmp64]                        encoding(2 bytes) = 75 13
017eh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0182h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0185h or ecx,10h                    ; OR(Or_rm32_imm8) [ECX,10h:imm32]                     encoding(3 bytes) = 83 c9 10
0188h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
018bh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
018fh jmp short 01a2h               ; JMP(Jmp_rel8_64) [1A2h:jmp64]                        encoding(2 bytes) = eb 11
0191h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
0195h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0198h and ecx,0EFh                  ; AND(And_rm32_imm32) [ECX,efh:imm32]                  encoding(6 bytes) = 81 e1 ef 00 00 00
019eh mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01a2h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01a6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01a9h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01adh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01b0h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
01b4h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
01b9h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
01bch mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
01c2h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
01c5h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
01c8h jne short 01ddh               ; JNE(Jne_rel8_64) [1DDh:jmp64]                        encoding(2 bytes) = 75 13
01cah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01ceh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01d1h or ecx,20h                    ; OR(Or_rm32_imm8) [ECX,20h:imm32]                     encoding(3 bytes) = 83 c9 20
01d4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01d7h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01dbh jmp short 01eeh               ; JMP(Jmp_rel8_64) [1EEh:jmp64]                        encoding(2 bytes) = eb 11
01ddh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01e1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01e4h and ecx,0DFh                  ; AND(And_rm32_imm32) [ECX,dfh:imm32]                  encoding(6 bytes) = 81 e1 df 00 00 00
01eah mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01eeh mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
01f2h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01f5h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
01f9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01fch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0200h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0205h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
020bh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
020eh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0211h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0214h jne short 0229h               ; JNE(Jne_rel8_64) [229h:jmp64]                        encoding(2 bytes) = 75 13
0216h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
021ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
021dh or ecx,40h                    ; OR(Or_rm32_imm8) [ECX,40h:imm32]                     encoding(3 bytes) = 83 c9 40
0220h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0223h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0227h jmp short 023ah               ; JMP(Jmp_rel8_64) [23Ah:jmp64]                        encoding(2 bytes) = eb 11
0229h mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
022dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0230h and ecx,0BFh                  ; AND(And_rm32_imm32) [ECX,bfh:imm32]                  encoding(6 bytes) = 81 e1 bf 00 00 00
0236h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
023ah mov ecx,[rsp+28h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 28
023eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0241h mov [rsp+28h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 28
0245h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0249h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
024eh mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
0254h mov r9d,1                     ; MOV(Mov_r32_imm32) [R9D,1h:imm32]                    encoding(6 bytes) = 41 b9 01 00 00 00
025ah call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
025dh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0260h jne short 0277h               ; JNE(Jne_rel8_64) [277h:jmp64]                        encoding(2 bytes) = 75 15
0262h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0266h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0269h or eax,80h                    ; OR(Or_EAX_imm32) [EAX,80h:imm32]                     encoding(5 bytes) = 0d 80 00 00 00
026eh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0271h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0275h jmp short 0285h               ; JMP(Jmp_rel8_64) [285h:jmp64]                        encoding(2 bytes) = eb 0e
0277h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
027bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
027eh and eax,7Fh                   ; AND(And_rm32_imm8) [EAX,7fh:imm32]                   encoding(3 bytes) = 83 e0 7f
0281h mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0285h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0289h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
028ch mov [rsp+28h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 28
0290h mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0294h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0297h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
029bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
029ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> SignatureBytes => new byte[669]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x28,0x0F,0xB6,0xC9,0xE8,0xEC,0xE0,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x22,0x00,0x00,0x00,0xE8,0x55,0x7A,0x24,0x5F,0x48,0xB9,0xA8,0x6C,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x0F,0xB6,0x49,0x08,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x01,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFE,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x02,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFD,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x04,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xFB,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x08,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xF7,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x10,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xEF,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x20,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xDF,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0x45,0x33,0xC9,0xFF,0x50,0x18,0x83,0xF8,0x01,0x75,0x13,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x83,0xC9,0x40,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0xEB,0x11,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x81,0xE1,0xBF,0x00,0x00,0x00,0x88,0x4C,0x24,0x28,0x8B,0x4C,0x24,0x28,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x28,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0x41,0xB9,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x75,0x15,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x0D,0x80,0x00,0x00,0x00,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0xEB,0x0E,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x83,0xE0,0x7F,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x28,0x8B,0x44,0x24,0x28,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x30,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N2,N2,byte> Build(UnaryLogicOpKind:uint kind)
; location: [7FFDDBA1E620h, 7FFDDBA1E9B1h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,0E8h                  ; SUB(Sub_rm64_imm32) [RSP,e8h:imm64]                  encoding(7 bytes) = 48 81 ec e8 00 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,30h                   ; MOV(Mov_r32_imm32) [ECX,30h:imm32]                   encoding(5 bytes) = b9 30 00 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0029h mov ecx,edx                   ; MOV(Mov_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 8b ca
002bh call 7FFDDBA18290h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C70h:jmp64]        encoding(5 bytes) = e8 40 9c ff ff
0030h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0033h lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
003bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
003fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0043h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
004dh mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0052h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F210DC0h:jmp64]                encoding(5 bytes) = e8 69 0d 21 5f
0057h mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
0061h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0064h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
0067h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
006ah mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0074h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F245FC0h:jmp64]                encoding(5 bytes) = e8 47 5f 24 5f
0079h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
007dh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0080h lea rax,[rsp+0A8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a8 00 00 00
0088h mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
008bh mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
008eh vmovdqu xmm0,xmmword ptr [rsp+0A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 00 00 00
0097h vmovdqu xmmword ptr [rsp+0D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 00 00 00
00a0h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
00aah mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00afh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F245FC0h:jmp64]                encoding(5 bytes) = e8 0c 5f 24 5f
00b4h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00b7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00bah mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00beh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c0h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00c3h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00c6h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
00c9h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00cch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00ceh mov [rsp+0A4h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a4 00 00 00
00d5h mov [rsp+0A4h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a4 00 00 00
00dch test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
00deh je short 00f2h                ; JE(Je_rel8_64) [F2h:jmp64]                           encoding(2 bytes) = 74 12
00e0h movzx ecx,byte ptr [rsp+0A4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 a4 00 00 00
00e8h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
00ebh mov [rsp+0A4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a4 00 00 00
00f2h mov ecx,[rsp+0A4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a4 00 00 00
00f9h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00fch mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
00ffh lea rcx,[rsp+90h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 00 00 00
0107h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
010bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
010fh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0113h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0118h lea rdx,[rsp+90h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 00 00 00
0120h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
0125h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0128h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
012bh mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
012eh lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0133h call 7FFDDBA1D728h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF108h:jmp64]        encoding(5 bytes) = e8 d0 ef ff ff
0138h vmovdqu xmm0,xmmword ptr [rsp+90h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 00 00 00
0141h vmovdqu xmmword ptr [rsp+0C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 00 00 00
014ah vmovdqu xmm0,xmmword ptr [rsp+0C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 00 00 00
0153h vmovdqu xmmword ptr [rsp+80h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 00 00 00
015ch vmovdqu xmm0,xmmword ptr [rsp+80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 00 00 00
0165h vmovdqu xmmword ptr [rsp+70h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 70
016bh lea rcx,[rsp+70h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 70
0170h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0173h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
0176h lea rcx,[rsp+0D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 00 00 00
017eh mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
0181h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
0185h mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
018fh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0192h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0196h mov r11,7FFDDB000F10h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f10h:imm64]         encoding(10 bytes) = 49 bb 10 0f 00 db fd 7f 00 00
01a0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01a2h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
01a4h call qword ptr [7FFDDB000F10h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 46 27 5e ff
01aah test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
01adh jne short 01b5h               ; JNE(Jne_rel8_64) [1B5h:jmp64]                        encoding(2 bytes) = 75 06
01afh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
01b1h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01b3h jmp short 01bch               ; JMP(Jmp_rel8_64) [1BCh:jmp64]                        encoding(2 bytes) = eb 07
01b5h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
01b9h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
01bch cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
01bfh jbe near ptr 038ch            ; JBE(Jbe_rel32_64) [38Ch:jmp64]                       encoding(6 bytes) = 0f 86 c7 01 00 00
01c5h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
01c8h mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
01d2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01d5h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
01d8h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
01dbh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
01ddh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
01e0h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
01e3h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
01e6h ja near ptr 0374h             ; JA(Ja_rel32_64) [374h:jmp64]                         encoding(6 bytes) = 0f 87 88 01 00 00
01ech movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
01efh add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
01f2h cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
01f4h ja near ptr 037ah             ; JA(Ja_rel32_64) [37Ah:jmp64]                         encoding(6 bytes) = 0f 87 80 01 00 00
01fah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
01fdh movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
0200h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7FA8E0h:jmp64]                encoding(5 bytes) = e8 db a6 7f 5d
0205h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
020fh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0214h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F245FC0h:jmp64]                encoding(5 bytes) = e8 a7 5d 24 5f
0219h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
021ch mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0220h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0225h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
0228h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
022bh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
022eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0231h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0233h mov [rsp+6Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 6c
0237h mov [rsp+6Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 6c
023bh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
023dh je short 024bh                ; JE(Je_rel8_64) [24Bh:jmp64]                          encoding(2 bytes) = 74 0c
023fh movzx ecx,byte ptr [rsp+6Ch]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 6c
0244h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0247h mov [rsp+6Ch],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 6c
024bh movzx ecx,byte ptr [rsp+6Ch]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 6c
0250h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0253h mov [rsp+6Ch],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 6c
0257h mov ecx,[rsp+6Ch]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 6c
025bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
025eh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0261h lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
0266h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
026ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
026eh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0272h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0277h lea rdx,[rsp+58h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 58
027ch lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
0281h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0284h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0287h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
028ah lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
028fh call 7FFDDBA1D728h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF108h:jmp64]        encoding(5 bytes) = e8 74 ee ff ff
0294h vmovdqu xmm0,xmmword ptr [rsp+58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 58
029ah vmovdqu xmmword ptr [rsp+0B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 00 00 00
02a3h vmovdqu xmm0,xmmword ptr [rsp+0B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 00 00 00
02ach vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
02b2h vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
02b8h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
02beh lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
02c3h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
02c6h mov edi,[rcx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 79 08
02c9h lea rcx,[rsp+0D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 00 00 00
02d1h mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
02d4h mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
02d8h mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
02e2h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
02e5h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
02e9h mov r11,7FFDDB000F18h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f18h:imm64]         encoding(10 bytes) = 49 bb 18 0f 00 db fd 7f 00 00
02f3h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
02f8h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
02fah call qword ptr [7FFDDB000F18h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 f8 25 5e ff
0300h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0303h jne short 030bh               ; JNE(Jne_rel8_64) [30Bh:jmp64]                        encoding(2 bytes) = 75 06
0305h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0307h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0309h jmp short 0312h               ; JMP(Jmp_rel8_64) [312h:jmp64]                        encoding(2 bytes) = eb 07
030bh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
030fh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0312h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0315h jbe short 038ch               ; JBE(Jbe_rel8_64) [38Ch:jmp64]                        encoding(2 bytes) = 76 75
0317h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
031ah mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
0324h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0327h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
032ah mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
032dh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
032fh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0332h mov eax,r14d                  ; MOV(Mov_r32_rm32) [EAX,R14D]                         encoding(3 bytes) = 41 8b c6
0335h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0338h ja short 0380h                ; JA(Ja_rel8_64) [380h:jmp64]                          encoding(2 bytes) = 77 46
033ah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
033dh add rcx,rbp                   ; ADD(Add_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 03 cd
0340h cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
0342h ja short 0386h                ; JA(Ja_rel8_64) [386h:jmp64]                          encoding(2 bytes) = 77 42
0344h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0347h movsxd r8,edi                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDI]                     encoding(3 bytes) = 4c 63 c7
034ah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7FA8E0h:jmp64]                encoding(5 bytes) = e8 91 a5 7f 5d
034fh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0352h lea rsi,[rsp+0D8h]            ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 d8 00 00 00
035ah call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F245070h:jmp64]                encoding(5 bytes) = e8 11 4d 24 5f
035fh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0361h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0364h add rsp,0E8h                  ; ADD(Add_rm64_imm32) [RSP,e8h:imm64]                  encoding(7 bytes) = 48 81 c4 e8 00 00 00
036bh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
036ch pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
036dh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
036eh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
036fh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0371h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0373h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0374h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7218B0h:jmp64]        encoding(5 bytes) = e8 37 15 72 ff
0379h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
037ah call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF7218B8h:jmp64]        encoding(5 bytes) = e8 39 15 72 ff
037fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0380h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7218B0h:jmp64]        encoding(5 bytes) = e8 2b 15 72 ff
0385h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0386h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF7218B8h:jmp64]        encoding(5 bytes) = e8 2d 15 72 ff
038bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
038ch call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F3708E0h:jmp64]                encoding(5 bytes) = e8 4f 05 37 5f
0391h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> BuildBytes => new byte[914]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0xE8,0x00,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x30,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xCA,0xE8,0x40,0x9C,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0x69,0x0D,0x21,0x5F,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x47,0x5F,0x24,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x48,0x8D,0x84,0x24,0xA8,0x00,0x00,0x00,0x48,0x89,0x08,0x89,0x50,0x08,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x00,0x00,0x00,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x0C,0x5F,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xA4,0x00,0x00,0x00,0x89,0x94,0x24,0xA4,0x00,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xA4,0x00,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xA4,0x00,0x00,0x00,0x8B,0x8C,0x24,0xA4,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x90,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xD0,0xEF,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x70,0x48,0x8D,0x4C,0x24,0x70,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0xD8,0x00,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x10,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0x46,0x27,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xC7,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x88,0x01,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x80,0x01,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0xDB,0xA6,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xA7,0x5D,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x54,0x24,0x6C,0x89,0x54,0x24,0x6C,0x84,0xC9,0x74,0x0C,0x0F,0xB6,0x4C,0x24,0x6C,0x83,0xC9,0x01,0x88,0x4C,0x24,0x6C,0x0F,0xB6,0x4C,0x24,0x6C,0x83,0xC9,0x02,0x88,0x4C,0x24,0x6C,0x8B,0x4C,0x24,0x6C,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x58,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x74,0xEE,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x58,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x4C,0x24,0x38,0x48,0x8B,0x31,0x8B,0x79,0x08,0x48,0x8D,0x8C,0x24,0xD8,0x00,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x18,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xF8,0x25,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x76,0x75,0x0F,0xB7,0x09,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC6,0x4C,0x3B,0xC0,0x77,0x46,0x48,0x63,0xC9,0x48,0x03,0xCD,0x3B,0xFA,0x77,0x42,0x48,0x8B,0xD6,0x4C,0x63,0xC7,0xE8,0x91,0xA5,0x7F,0x5D,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0xD8,0x00,0x00,0x00,0xE8,0x11,0x4D,0x24,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0xE8,0x00,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x37,0x15,0x72,0xFF,0xCC,0xE8,0x39,0x15,0x72,0xFF,0xCC,0xE8,0x2B,0x15,0x72,0xFF,0xCC,0xE8,0x2D,0x15,0x72,0xFF,0xCC,0xE8,0x4F,0x05,0x37,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N4,N3,byte> Build(BinaryLogicOpKind:uint kind)
; location: [7FFDDBA1ECF0h, 7FFDDBA1F417h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,178h                  ; SUB(Sub_rm64_imm32) [RSP,178h:imm64]                 encoding(7 bytes) = 48 81 ec 78 01 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,54h                   ; MOV(Mov_r32_imm32) [ECX,54h:imm32]                   encoding(5 bytes) = b9 54 00 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0029h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
002bh lea rcx,[rsp+118h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 01 00 00
0033h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0037h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
003bh mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0045h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
004ah call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F2106F0h:jmp64]                encoding(5 bytes) = e8 a1 06 21 5f
004fh mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
0059h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
005ch mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
005fh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0062h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
006ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2458F0h:jmp64]                encoding(5 bytes) = e8 7f 58 24 5f
0071h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0075h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
0078h lea rdx,[rsp+118h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 18 01 00 00
0080h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0083h mov [rdx+8],eax               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(3 bytes) = 89 42 08
0086h vmovdqu xmm0,xmmword ptr [rsp+118h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 01 00 00
008fh vmovdqu xmmword ptr [rsp+168h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 01 00 00
0098h mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
009ah call 7FFDDBA18800h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9B10h:jmp64]        encoding(5 bytes) = e8 71 9a ff ff
009fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00a2h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
00ach mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00b1h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2458F0h:jmp64]                encoding(5 bytes) = e8 3a 58 24 5f
00b6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00b9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00bch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00c0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c2h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
00c5h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00c8h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00cbh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
00ceh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00d1h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00d3h mov [rsp+114h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 14 01 00 00
00dah mov [rsp+110h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 01 00 00
00e1h mov [rsp+110h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 01 00 00
00e8h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
00eah je short 00feh                ; JE(Je_rel8_64) [FEh:jmp64]                           encoding(2 bytes) = 74 12
00ech movzx ecx,byte ptr [rsp+110h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 10 01 00 00
00f4h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
00f7h mov [rsp+110h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 10 01 00 00
00feh mov ecx,[rsp+110h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 01 00 00
0105h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0108h mov [rsp+114h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 01 00 00
010fh mov ecx,[rsp+114h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 14 01 00 00
0116h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0119h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
011ch lea rcx,[rsp+100h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 01 00 00
0124h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0128h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
012ch add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0130h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0135h lea rdx,[rsp+100h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 00 01 00 00
013dh lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
0142h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0145h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0148h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
014bh lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0150h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED8h:jmp64]        encoding(5 bytes) = e8 83 fd ff ff
0155h vmovdqu xmm0,xmmword ptr [rsp+100h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 01 00 00
015eh vmovdqu xmmword ptr [rsp+158h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 01 00 00
0167h vmovdqu xmm0,xmmword ptr [rsp+158h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 01 00 00
0170h vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
0179h vmovdqu xmm0,xmmword ptr [rsp+0F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 00 00 00
0182h vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
018bh lea rcx,[rsp+0E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 00 00 00
0193h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0196h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
0199h lea rcx,[rsp+168h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 01 00 00
01a1h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
01a4h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
01a8h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
01b2h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
01b5h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
01b9h mov r11,7FFDDB000F20h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f20h:imm64]         encoding(10 bytes) = 49 bb 20 0f 00 db fd 7f 00 00
01c3h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01c5h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
01c7h call qword ptr [7FFDDB000F20h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 63 20 5e ff
01cdh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
01d0h jne short 01d8h               ; JNE(Jne_rel8_64) [1D8h:jmp64]                        encoding(2 bytes) = 75 06
01d2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
01d4h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01d6h jmp short 01dfh               ; JMP(Jmp_rel8_64) [1DFh:jmp64]                        encoding(2 bytes) = eb 07
01d8h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
01dch mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
01dfh cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
01e2h jbe near ptr 0722h            ; JBE(Jbe_rel32_64) [722h:jmp64]                       encoding(6 bytes) = 0f 86 3a 05 00 00
01e8h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
01ebh mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
01f5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
01f8h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
01fbh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
01feh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0200h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0203h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
0206h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0209h ja near ptr 06f2h             ; JA(Ja_rel32_64) [6F2h:jmp64]                         encoding(6 bytes) = 0f 87 e3 04 00 00
020fh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0212h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
0215h cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
0217h ja near ptr 06f8h             ; JA(Ja_rel32_64) [6F8h:jmp64]                         encoding(6 bytes) = 0f 87 db 04 00 00
021dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0220h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
0223h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7FA210h:jmp64]                encoding(5 bytes) = e8 e8 9f 7f 5d
0228h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0232h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0237h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2458F0h:jmp64]                encoding(5 bytes) = e8 b4 56 24 5f
023ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
023fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0242h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0246h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
024bh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
024eh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0251h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0254h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0257h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
025ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
025ch mov [rsp+0DCh],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 dc 00 00 00
0263h mov [rsp+0D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 00 00 00
026ah mov [rsp+0D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 00 00 00
0271h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0273h je short 0287h                ; JE(Je_rel8_64) [287h:jmp64]                          encoding(2 bytes) = 74 12
0275h movzx ecx,byte ptr [rsp+0D8h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 d8 00 00 00
027dh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0280h mov [rsp+0D8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 d8 00 00 00
0287h mov ecx,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 00 00 00
028eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0291h mov [rsp+0DCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 dc 00 00 00
0298h movzx ecx,byte ptr [rsp+0DCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 dc 00 00 00
02a0h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
02a3h mov [rsp+0DCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 dc 00 00 00
02aah mov ecx,[rsp+0DCh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 dc 00 00 00
02b1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
02b4h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
02b7h lea rcx,[rsp+0C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 00 00 00
02bfh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02c3h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
02c7h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
02cbh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
02d0h lea rdx,[rsp+0C8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c8 00 00 00
02d8h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
02ddh mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
02e0h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
02e3h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
02e6h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
02ebh call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED8h:jmp64]        encoding(5 bytes) = e8 e8 fb ff ff
02f0h vmovdqu xmm0,xmmword ptr [rsp+0C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 00 00 00
02f9h vmovdqu xmmword ptr [rsp+148h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 01 00 00
0302h vmovdqu xmm0,xmmword ptr [rsp+148h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 01 00 00
030bh vmovdqu xmmword ptr [rsp+0B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 00 00 00
0314h vmovdqu xmm0,xmmword ptr [rsp+0B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 00 00 00
031dh vmovdqu xmmword ptr [rsp+0A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 00 00 00
0326h lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
032eh mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0331h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
0334h lea rcx,[rsp+168h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 01 00 00
033ch mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
033fh mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
0343h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
034dh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0350h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0354h mov r11,7FFDDB000F28h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f28h:imm64]         encoding(10 bytes) = 49 bb 28 0f 00 db fd 7f 00 00
035eh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0363h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0365h call qword ptr [7FFDDB000F28h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 cd 1e 5e ff
036bh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
036eh jne short 0376h               ; JNE(Jne_rel8_64) [376h:jmp64]                        encoding(2 bytes) = 75 06
0370h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0372h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0374h jmp short 037dh               ; JMP(Jmp_rel8_64) [37Dh:jmp64]                        encoding(2 bytes) = eb 07
0376h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
037ah mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
037dh cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0380h jbe near ptr 0722h            ; JBE(Jbe_rel32_64) [722h:jmp64]                       encoding(6 bytes) = 0f 86 9c 03 00 00
0386h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0389h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
0393h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0396h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0399h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
039ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
039eh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
03a1h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
03a4h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
03a7h ja near ptr 06feh             ; JA(Ja_rel32_64) [6FEh:jmp64]                         encoding(6 bytes) = 0f 87 51 03 00 00
03adh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
03b0h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
03b3h cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
03b5h ja near ptr 0704h             ; JA(Ja_rel32_64) [704h:jmp64]                         encoding(6 bytes) = 0f 87 49 03 00 00
03bbh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
03beh movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
03c1h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7FA210h:jmp64]                encoding(5 bytes) = e8 4a 9e 7f 5d
03c6h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
03d0h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
03d5h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2458F0h:jmp64]                encoding(5 bytes) = e8 16 55 24 5f
03dah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
03ddh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
03e0h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
03e4h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
03e6h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
03ech call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
03efh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
03f2h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
03f5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
03f8h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
03fah mov [rsp+0A4h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a4 00 00 00
0401h mov [rsp+0A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 00 00 00
0408h mov [rsp+0A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 00 00 00
040fh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0411h je short 0425h                ; JE(Je_rel8_64) [425h:jmp64]                          encoding(2 bytes) = 74 12
0413h movzx ecx,byte ptr [rsp+0A0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 a0 00 00 00
041bh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
041eh mov [rsp+0A0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a0 00 00 00
0425h movzx ecx,byte ptr [rsp+0A0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 a0 00 00 00
042dh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0430h mov [rsp+0A0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a0 00 00 00
0437h mov ecx,[rsp+0A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 00 00 00
043eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0441h mov [rsp+0A4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a4 00 00 00
0448h mov ecx,[rsp+0A4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a4 00 00 00
044fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0452h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0455h lea rcx,[rsp+90h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 00 00 00
045dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0461h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0465h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0469h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
046eh lea rdx,[rsp+90h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 00 00 00
0476h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
047bh mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
047eh mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0481h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0484h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0489h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED8h:jmp64]        encoding(5 bytes) = e8 4a fa ff ff
048eh vmovdqu xmm0,xmmword ptr [rsp+90h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 00 00 00
0497h vmovdqu xmmword ptr [rsp+138h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 01 00 00
04a0h vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
04a9h vmovdqu xmmword ptr [rsp+80h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 00 00 00
04b2h vmovdqu xmm0,xmmword ptr [rsp+80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 00 00 00
04bbh vmovdqu xmmword ptr [rsp+70h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 70
04c1h lea rcx,[rsp+70h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 70
04c6h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
04c9h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
04cch lea rcx,[rsp+168h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 01 00 00
04d4h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
04d7h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
04dbh mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
04e5h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
04e8h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
04ech mov r11,7FFDDB000F30h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f30h:imm64]         encoding(10 bytes) = 49 bb 30 0f 00 db fd 7f 00 00
04f6h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
04fbh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
04fdh call qword ptr [7FFDDB000F30h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 3d 1d 5e ff
0503h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0506h jne short 050eh               ; JNE(Jne_rel8_64) [50Eh:jmp64]                        encoding(2 bytes) = 75 06
0508h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
050ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
050ch jmp short 0515h               ; JMP(Jmp_rel8_64) [515h:jmp64]                        encoding(2 bytes) = eb 07
050eh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0512h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0515h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0518h jbe near ptr 0722h            ; JBE(Jbe_rel32_64) [722h:jmp64]                       encoding(6 bytes) = 0f 86 04 02 00 00
051eh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0521h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
052bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
052eh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0531h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0534h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0536h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0539h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
053ch cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
053fh ja near ptr 070ah             ; JA(Ja_rel32_64) [70Ah:jmp64]                         encoding(6 bytes) = 0f 87 c5 01 00 00
0545h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0548h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
054bh cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
054dh ja near ptr 0710h             ; JA(Ja_rel32_64) [710h:jmp64]                         encoding(6 bytes) = 0f 87 bd 01 00 00
0553h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0556h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
0559h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7FA210h:jmp64]                encoding(5 bytes) = e8 b2 9c 7f 5d
055eh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0568h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
056dh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2458F0h:jmp64]                encoding(5 bytes) = e8 7e 53 24 5f
0572h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0575h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0579h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
057eh mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
0584h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
0587h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
058ah sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
058dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0590h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0592h mov [rsp+6Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 6c
0596h mov [rsp+68h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 68
059ah mov [rsp+68h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 68
059eh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
05a0h je short 05aeh                ; JE(Je_rel8_64) [5AEh:jmp64]                          encoding(2 bytes) = 74 0c
05a2h movzx ecx,byte ptr [rsp+68h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 68
05a7h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
05aah mov [rsp+68h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 68
05aeh movzx ecx,byte ptr [rsp+68h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 68
05b3h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
05b6h mov [rsp+68h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 68
05bah mov ecx,[rsp+68h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 68
05beh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
05c1h mov [rsp+6Ch],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 6c
05c5h movzx ecx,byte ptr [rsp+6Ch]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 6c
05cah or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
05cdh mov [rsp+6Ch],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 6c
05d1h mov ecx,[rsp+6Ch]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 6c
05d5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
05d8h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
05dbh lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
05e0h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
05e4h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
05e8h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
05ech mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
05f1h lea rdx,[rsp+58h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 58
05f6h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
05fbh mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
05feh mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0601h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0604h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0609h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED8h:jmp64]        encoding(5 bytes) = e8 ca f8 ff ff
060eh vmovdqu xmm0,xmmword ptr [rsp+58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 58
0614h vmovdqu xmmword ptr [rsp+128h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 01 00 00
061dh vmovdqu xmm0,xmmword ptr [rsp+128h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 01 00 00
0626h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
062ch vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
0632h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
0638h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
063dh mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0640h mov edi,[rcx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 79 08
0643h lea rcx,[rsp+168h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 01 00 00
064bh mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
064eh mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0652h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
065ch mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
065fh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0663h mov r11,7FFDDB000F38h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f38h:imm64]         encoding(10 bytes) = 49 bb 38 0f 00 db fd 7f 00 00
066dh mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0672h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0674h call qword ptr [7FFDDB000F38h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 ce 1b 5e ff
067ah test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
067dh jne short 0685h               ; JNE(Jne_rel8_64) [685h:jmp64]                        encoding(2 bytes) = 75 06
067fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0681h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0683h jmp short 068ch               ; JMP(Jmp_rel8_64) [68Ch:jmp64]                        encoding(2 bytes) = eb 07
0685h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0689h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
068ch cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
068fh jbe near ptr 0722h            ; JBE(Jbe_rel32_64) [722h:jmp64]                       encoding(6 bytes) = 0f 86 8d 00 00 00
0695h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0698h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
06a2h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06a5h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
06a8h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
06abh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
06adh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
06b0h mov eax,r14d                  ; MOV(Mov_r32_rm32) [EAX,R14D]                         encoding(3 bytes) = 41 8b c6
06b3h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
06b6h ja short 0716h                ; JA(Ja_rel8_64) [716h:jmp64]                          encoding(2 bytes) = 77 5e
06b8h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
06bbh add rcx,rbp                   ; ADD(Add_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 03 cd
06beh cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
06c0h ja short 071ch                ; JA(Ja_rel8_64) [71Ch:jmp64]                          encoding(2 bytes) = 77 5a
06c2h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
06c5h movsxd r8,edi                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDI]                     encoding(3 bytes) = 4c 63 c7
06c8h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7FA210h:jmp64]                encoding(5 bytes) = e8 43 9b 7f 5d
06cdh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
06d0h lea rsi,[rsp+168h]            ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 68 01 00 00
06d8h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F2449A0h:jmp64]                encoding(5 bytes) = e8 c3 42 24 5f
06ddh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
06dfh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
06e2h add rsp,178h                  ; ADD(Add_rm64_imm32) [RSP,178h:imm64]                 encoding(7 bytes) = 48 81 c4 78 01 00 00
06e9h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
06eah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
06ebh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
06ech pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
06edh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
06efh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
06f1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
06f2h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E0h:jmp64]        encoding(5 bytes) = e8 e9 0a 72 ff
06f7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06f8h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E8h:jmp64]        encoding(5 bytes) = e8 eb 0a 72 ff
06fdh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
06feh call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E0h:jmp64]        encoding(5 bytes) = e8 dd 0a 72 ff
0703h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0704h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E8h:jmp64]        encoding(5 bytes) = e8 df 0a 72 ff
0709h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
070ah call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E0h:jmp64]        encoding(5 bytes) = e8 d1 0a 72 ff
070fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0710h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E8h:jmp64]        encoding(5 bytes) = e8 d3 0a 72 ff
0715h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0716h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E0h:jmp64]        encoding(5 bytes) = e8 c5 0a 72 ff
071bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
071ch call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF7211E8h:jmp64]        encoding(5 bytes) = e8 c7 0a 72 ff
0721h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0722h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F370210h:jmp64]                encoding(5 bytes) = e8 e9 fa 36 5f
0727h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> BuildBytes => new byte[1832]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x78,0x01,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x54,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xF2,0x48,0x8D,0x8C,0x24,0x18,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0xA1,0x06,0x21,0x5F,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x7F,0x58,0x24,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x40,0x08,0x48,0x8D,0x94,0x24,0x18,0x01,0x00,0x00,0x48,0x89,0x0A,0x89,0x42,0x08,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x01,0x00,0x00,0x8B,0xCE,0xE8,0x71,0x9A,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x3A,0x58,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x14,0x01,0x00,0x00,0x89,0x94,0x24,0x10,0x01,0x00,0x00,0x89,0x94,0x24,0x10,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x10,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x10,0x01,0x00,0x00,0x8B,0x8C,0x24,0x10,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x14,0x01,0x00,0x00,0x8B,0x8C,0x24,0x14,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x00,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x00,0x01,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x83,0xFD,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE0,0x00,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0x68,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x20,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0x63,0x20,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x3A,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0xE3,0x04,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0xDB,0x04,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0xE8,0x9F,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xB4,0x56,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xBA,0x01,0x00,0x00,0x00,0x45,0x33,0xC0,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xDC,0x00,0x00,0x00,0x89,0x94,0x24,0xD8,0x00,0x00,0x00,0x89,0x94,0x24,0xD8,0x00,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xD8,0x00,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xD8,0x00,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xDC,0x00,0x00,0x00,0x0F,0xB6,0x8C,0x24,0xDC,0x00,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xDC,0x00,0x00,0x00,0x8B,0x8C,0x24,0xDC,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xC8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xC8,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xE8,0xFB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0x68,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x28,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xCD,0x1E,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x9C,0x03,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x51,0x03,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x49,0x03,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0x4A,0x9E,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x16,0x55,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x33,0xD2,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xA4,0x00,0x00,0x00,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xA0,0x00,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xA0,0x00,0x00,0x00,0x0F,0xB6,0x8C,0x24,0xA0,0x00,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xA0,0x00,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xA4,0x00,0x00,0x00,0x8B,0x8C,0x24,0xA4,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x90,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x4A,0xFA,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x70,0x48,0x8D,0x4C,0x24,0x70,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0x68,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x30,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x3D,0x1D,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x04,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0xC5,0x01,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0xBD,0x01,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0xB2,0x9C,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x7E,0x53,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0x4E,0x08,0xBA,0x01,0x00,0x00,0x00,0x41,0xB8,0x01,0x00,0x00,0x00,0xFF,0x56,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x54,0x24,0x6C,0x89,0x54,0x24,0x68,0x89,0x54,0x24,0x68,0x84,0xC9,0x74,0x0C,0x0F,0xB6,0x4C,0x24,0x68,0x83,0xC9,0x01,0x88,0x4C,0x24,0x68,0x0F,0xB6,0x4C,0x24,0x68,0x83,0xC9,0x02,0x88,0x4C,0x24,0x68,0x8B,0x4C,0x24,0x68,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x6C,0x0F,0xB6,0x4C,0x24,0x6C,0x83,0xC9,0x04,0x88,0x4C,0x24,0x6C,0x8B,0x4C,0x24,0x6C,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x58,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xCA,0xF8,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x58,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x4C,0x24,0x38,0x48,0x8B,0x31,0x8B,0x79,0x08,0x48,0x8D,0x8C,0x24,0x68,0x01,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x38,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xCE,0x1B,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x8D,0x00,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC6,0x4C,0x3B,0xC0,0x77,0x5E,0x48,0x63,0xC9,0x48,0x03,0xCD,0x3B,0xFA,0x77,0x5A,0x48,0x8B,0xD6,0x4C,0x63,0xC7,0xE8,0x43,0x9B,0x7F,0x5D,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0x68,0x01,0x00,0x00,0xE8,0xC3,0x42,0x24,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0x78,0x01,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xE9,0x0A,0x72,0xFF,0xCC,0xE8,0xEB,0x0A,0x72,0xFF,0xCC,0xE8,0xDD,0x0A,0x72,0xFF,0xCC,0xE8,0xDF,0x0A,0x72,0xFF,0xCC,0xE8,0xD1,0x0A,0x72,0xFF,0xCC,0xE8,0xD3,0x0A,0x72,0xFF,0xCC,0xE8,0xC5,0x0A,0x72,0xFF,0xCC,0xE8,0xC7,0x0A,0x72,0xFF,0xCC,0xE8,0xE9,0xFA,0x36,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N8,N4,byte> Build(TernaryOpKind:byte kind)
; location: [7FFDDBA1F770h, 7FFDDBA216E6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,0B90h                 ; SUB(Sub_rm64_imm32) [RSP,b90h:imm64]                 encoding(7 bytes) = 48 81 ec 90 0b 00 00
000ah vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000dh mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0010h lea rdi,[rsp+20h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 20
0015h mov ecx,2DCh                  ; MOV(Mov_r32_imm32) [ECX,2dch:imm32]                  encoding(5 bytes) = b9 dc 02 00 00
001ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001ch rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001eh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0021h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0024h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0026h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0030h mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
0035h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F20FC70h:jmp64]                encoding(5 bytes) = e8 36 fc 20 5f
003ah mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0044h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0047h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
004ah movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
004dh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0057h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 14 4e 24 5f
005ch lea rcx,[rsp+920h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 09 00 00
0064h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0068h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
006ch lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0070h mov [rsp+918h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 18 09 00 00
0078h mov rcx,[rsp+918h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 09 00 00
0080h lea rdx,[rsp+920h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 09 00 00
0088h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
008bh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
008eh mov [rsp+928h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 09 00 00
0095h vmovdqu xmm0,xmmword ptr [rsp+920h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 09 00 00
009eh vmovdqu xmmword ptr [rsp+930h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 09 00 00
00a7h vmovdqu xmm0,xmmword ptr [rsp+930h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 09 00 00
00b0h vmovdqu xmmword ptr [rsp+0B80h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 0b 00 00
00b9h movzx ecx,sil                 ; MOVZX(Movzx_r32_rm8) [ECX,SIL]                       encoding(4 bytes) = 40 0f b6 ce
00bdh call 7FFDDBA1AF30h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB7C0h:jmp64]        encoding(5 bytes) = e8 fe b6 ff ff
00c2h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c5h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
00cfh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00d4h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 97 4d 24 5f
00d9h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00dch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00deh mov [rsp+910h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 09 00 00
00e5h mov ecx,[rsp+910h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 09 00 00
00ech mov [rsp+0B78h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 0b 00 00
00f3h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00f5h mov [rsp+908h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 09 00 00
00fch mov ecx,[rsp+908h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 09 00 00
0103h mov [rsp+0B70h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 0b 00 00
010ah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
010ch mov [rsp+900h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 09 00 00
0113h mov ecx,[rsp+900h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 09 00 00
011ah mov [rsp+0B68h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 0b 00 00
0121h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0124h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0128h mov edx,[rsp+0B78h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 78 0b 00 00
012fh mov r8d,[rsp+0B70h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 70 0b 00 00
0137h mov r9d,[rsp+0B68h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 68 0b 00 00
013fh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0142h mov [rsp+0B60h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 60 0b 00 00
0149h mov ecx,[rsp+0B60h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 0b 00 00
0150h mov [rsp+8F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 08 00 00
0157h cmp dword ptr [rsp+8F8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 f8 08 00 00 01
015fh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0162h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0165h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0167h mov [rsp+8F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 08 00 00
016eh mov edx,[rsp+8F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 08 00 00
0175h mov [rsp+0B58h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 0b 00 00
017ch mov edx,[rsp+0B58h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 0b 00 00
0183h mov [rsp+8E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 08 00 00
018ah cmp dword ptr [rsp+8E8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 e8 08 00 00 01
0192h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0195h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0198h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
019ah mov [rsp+8E0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e0 08 00 00
01a1h mov eax,[rsp+8E0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e0 08 00 00
01a8h mov [rsp+0B50h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 0b 00 00
01afh mov eax,[rsp+0B50h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 50 0b 00 00
01b6h mov [rsp+8D8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d8 08 00 00
01bdh cmp dword ptr [rsp+8D8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 d8 08 00 00 01
01c5h sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
01c8h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
01cbh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
01ceh mov [rsp+8D0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 d0 08 00 00
01d6h mov r8d,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d0 08 00 00
01deh mov [rsp+0B48h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 48 0b 00 00
01e6h mov r8d,[rsp+0B48h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 48 0b 00 00
01eeh mov [rsp+8C8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c8 08 00 00
01f6h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
01f9h mov [rsp+8C4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c4 08 00 00
0201h mov [rsp+8C0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c0 08 00 00
0209h mov [rsp+8BCh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 bc 08 00 00
0211h mov [rsp+8BCh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 bc 08 00 00
0219h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
021bh je short 022fh                ; JE(Je_rel8_64) [22Fh:jmp64]                          encoding(2 bytes) = 74 12
021dh movzx ecx,byte ptr [rsp+8BCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 bc 08 00 00
0225h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0228h mov [rsp+8BCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 bc 08 00 00
022fh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0231h je short 0245h                ; JE(Je_rel8_64) [245h:jmp64]                          encoding(2 bytes) = 74 12
0233h movzx ecx,byte ptr [rsp+8BCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 bc 08 00 00
023bh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
023eh mov [rsp+8BCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 bc 08 00 00
0245h mov ecx,[rsp+8BCh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 bc 08 00 00
024ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
024fh mov [rsp+8C0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c0 08 00 00
0256h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0258h je short 026ch                ; JE(Je_rel8_64) [26Ch:jmp64]                          encoding(2 bytes) = 74 12
025ah movzx ecx,byte ptr [rsp+8C0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 c0 08 00 00
0262h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0265h mov [rsp+8C0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c0 08 00 00
026ch mov ecx,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 08 00 00
0273h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0276h mov [rsp+8C4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c4 08 00 00
027dh cmp dword ptr [rsp+8C8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 c8 08 00 00 01
0285h jne short 0299h               ; JNE(Jne_rel8_64) [299h:jmp64]                        encoding(2 bytes) = 75 12
0287h movzx ecx,byte ptr [rsp+8C4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 c4 08 00 00
028fh or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0292h mov [rsp+8C4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c4 08 00 00
0299h mov ecx,[rsp+8C4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c4 08 00 00
02a0h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
02a3h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
02a6h lea rcx,[rsp+8A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 08 00 00
02aeh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02b2h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
02b6h lea rcx,[rsp+888h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 08 00 00
02beh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02c2h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
02c6h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
02cah mov [rsp+880h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 80 08 00 00
02d2h mov rcx,[rsp+880h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 80 08 00 00
02dah lea rdx,[rsp+888h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 88 08 00 00
02e2h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
02e5h mov dword ptr [rsp+890h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 90 08 00 00 01 00 00 00
02f0h vmovdqu xmm0,xmmword ptr [rsp+888h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 08 00 00
02f9h vmovdqu xmmword ptr [rsp+898h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 08 00 00
0302h lea rcx,[rsp+8A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 08 00 00
030ah vmovdqu xmm0,xmmword ptr [rsp+898h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 08 00 00
0313h vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
0319h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
031eh call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 ad fb ff ff
0323h vmovdqu xmm0,xmmword ptr [rsp+8A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 08 00 00
032ch vmovdqu xmmword ptr [rsp+0B38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 0b 00 00
0335h vmovdqu xmm0,xmmword ptr [rsp+0B38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 0b 00 00
033eh vmovdqu xmmword ptr [rsp+870h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 08 00 00
0347h vmovdqu xmm0,xmmword ptr [rsp+870h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 08 00 00
0350h vmovdqu xmmword ptr [rsp+860h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 08 00 00
0359h vmovdqu xmm0,xmmword ptr [rsp+860h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 08 00 00
0362h vmovdqu xmmword ptr [rsp+850h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 08 00 00
036bh vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
0374h vmovdqu xmmword ptr [rsp+840h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 08 00 00
037dh mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
0387h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
038ah mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
038eh mov r11,7FFDDB000F40h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f40h:imm64]         encoding(10 bytes) = 49 bb 40 0f 00 db fd 7f 00 00
0398h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
039ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
039ch call qword ptr [7FFDDB000F40h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 2e 14 5e ff
03a2h lea rcx,[rsp+810h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 10 08 00 00
03aah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03aeh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
03b2h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
03b5h jne short 03c9h               ; JNE(Jne_rel8_64) [3C9h:jmp64]                        encoding(2 bytes) = 75 12
03b7h lea rax,[rsp+810h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 10 08 00 00
03bfh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03c3h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
03c7h jmp short 03f2h               ; JMP(Jmp_rel8_64) [3F2h:jmp64]                        encoding(2 bytes) = eb 29
03c9h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
03cdh mov [rsp+808h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 08 08 00 00
03d5h mov rcx,[rsp+808h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 08 08 00 00
03ddh lea rdx,[rsp+810h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 10 08 00 00
03e5h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
03e8h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
03ebh mov [rsp+818h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 08 00 00
03f2h vmovdqu xmm0,xmmword ptr [rsp+810h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 08 00 00
03fbh vmovdqu xmmword ptr [rsp+820h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 08 00 00
0404h cmp dword ptr [rsp+828h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 28 08 00 00 00
040ch jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 5f 1b 00 00
0412h mov rcx,[rsp+820h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 20 08 00 00
041ah movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
041dh mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0427h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
042ah mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
042dh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0430h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0432h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0435h mov eax,[rsp+848h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 48 08 00 00
043ch cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
043fh ja near ptr 1f1dh             ; JA(Ja_rel32_64) [1F1Dh:jmp64]                        encoding(6 bytes) = 0f 87 d8 1a 00 00
0445h mov r8,[rsp+840h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 40 08 00 00
044dh lea rax,[rsp+7F8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 f8 07 00 00
0455h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0459h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
045dh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0460h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0463h mov [rsp+7F0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 f0 07 00 00
046bh mov rcx,[rsp+7F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 07 00 00
0473h lea r8,[rsp+7F8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 f8 07 00 00
047bh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
047eh mov [rsp+800h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 08 00 00
0485h vmovdqu xmm0,xmmword ptr [rsp+7F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 07 00 00
048eh vmovdqu xmmword ptr [rsp+830h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 08 00 00
0497h vmovdqu xmm0,xmmword ptr [rsp+830h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 08 00 00
04a0h vmovdqu xmmword ptr [rsp+7E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 07 00 00
04a9h mov ecx,[rsp+858h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 08 00 00
04b0h cmp ecx,[rsp+7E8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 e8 07 00 00
04b7h ja near ptr 1f23h             ; JA(Ja_rel32_64) [1F23h:jmp64]                        encoding(6 bytes) = 0f 87 66 1a 00 00
04bdh mov rcx,[rsp+7E0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e0 07 00 00
04c5h mov rdx,[rsp+850h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 50 08 00 00
04cdh mov r8d,[rsp+858h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 58 08 00 00
04d5h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
04d8h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 b3 92 7f 5d
04ddh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
04e7h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
04ech call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 7f 49 24 5f
04f1h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
04f4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
04f6h mov [rsp+7D8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 07 00 00
04fdh mov ecx,[rsp+7D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 07 00 00
0504h mov [rsp+0B30h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 0b 00 00
050bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
050dh mov [rsp+7D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 07 00 00
0514h mov ecx,[rsp+7D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 07 00 00
051bh mov [rsp+0B28h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 0b 00 00
0522h mov dword ptr [rsp+7C8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c8 07 00 00 01 00 00 00
052dh mov ecx,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 07 00 00
0534h mov [rsp+0B20h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 0b 00 00
053bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
053eh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0542h mov edx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 0b 00 00
0549h mov r8d,[rsp+0B28h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 0b 00 00
0551h mov r9d,[rsp+0B20h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 20 0b 00 00
0559h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
055ch mov [rsp+0B18h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 18 0b 00 00
0563h mov ecx,[rsp+0B18h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 0b 00 00
056ah mov [rsp+7C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 07 00 00
0571h cmp dword ptr [rsp+7C0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 c0 07 00 00 01
0579h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
057ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
057fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0581h mov [rsp+7B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 07 00 00
0588h mov edx,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 b8 07 00 00
058fh mov [rsp+0B10h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 0b 00 00
0596h mov edx,[rsp+0B10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0b 00 00
059dh mov [rsp+7B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 07 00 00
05a4h cmp dword ptr [rsp+7B0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 b0 07 00 00 01
05ach sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
05afh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
05b2h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
05b4h mov [rsp+7A8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 a8 07 00 00
05bbh mov eax,[rsp+7A8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a8 07 00 00
05c2h mov [rsp+0B08h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 08 0b 00 00
05c9h mov eax,[rsp+0B08h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 08 0b 00 00
05d0h mov [rsp+7A0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 a0 07 00 00
05d7h cmp dword ptr [rsp+7A0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 a0 07 00 00 01
05dfh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
05e2h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
05e5h mov dword ptr [rsp+798h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 98 07 00 00 01 00 00 00
05f0h mov r8d,[rsp+798h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 98 07 00 00
05f8h mov [rsp+0B00h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 00 0b 00 00
0600h mov r8d,[rsp+0B00h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 00 0b 00 00
0608h mov [rsp+790h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 90 07 00 00
0610h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0613h mov [rsp+78Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 8c 07 00 00
061bh mov [rsp+788h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 88 07 00 00
0623h mov [rsp+784h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 84 07 00 00
062bh mov [rsp+784h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 84 07 00 00
0633h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0635h je short 0649h                ; JE(Je_rel8_64) [649h:jmp64]                          encoding(2 bytes) = 74 12
0637h movzx ecx,byte ptr [rsp+784h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 84 07 00 00
063fh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0642h mov [rsp+784h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 84 07 00 00
0649h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
064bh je short 065fh                ; JE(Je_rel8_64) [65Fh:jmp64]                          encoding(2 bytes) = 74 12
064dh movzx ecx,byte ptr [rsp+784h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 84 07 00 00
0655h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0658h mov [rsp+784h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 84 07 00 00
065fh mov ecx,[rsp+784h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 84 07 00 00
0666h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0669h mov [rsp+788h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 88 07 00 00
0670h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0672h je short 0686h                ; JE(Je_rel8_64) [686h:jmp64]                          encoding(2 bytes) = 74 12
0674h movzx ecx,byte ptr [rsp+788h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 88 07 00 00
067ch or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
067fh mov [rsp+788h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 88 07 00 00
0686h mov ecx,[rsp+788h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 07 00 00
068dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0690h mov [rsp+78Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 8c 07 00 00
0697h cmp dword ptr [rsp+790h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 90 07 00 00 01
069fh jne short 06b3h               ; JNE(Jne_rel8_64) [6B3h:jmp64]                        encoding(2 bytes) = 75 12
06a1h movzx ecx,byte ptr [rsp+78Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 8c 07 00 00
06a9h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
06ach mov [rsp+78Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 8c 07 00 00
06b3h mov ecx,[rsp+78Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 8c 07 00 00
06bah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
06bdh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
06c0h lea rcx,[rsp+770h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 07 00 00
06c8h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
06cch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
06d0h lea rcx,[rsp+750h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 07 00 00
06d8h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
06dch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
06e0h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
06e4h mov [rsp+748h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 48 07 00 00
06ech mov rcx,[rsp+748h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 07 00 00
06f4h lea rdx,[rsp+750h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 50 07 00 00
06fch mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
06ffh mov dword ptr [rsp+758h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 58 07 00 00 01 00 00 00
070ah vmovdqu xmm0,xmmword ptr [rsp+750h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 07 00 00
0713h vmovdqu xmmword ptr [rsp+760h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 07 00 00
071ch lea rcx,[rsp+770h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 07 00 00
0724h vmovdqu xmm0,xmmword ptr [rsp+760h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 07 00 00
072dh vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
0733h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
0738h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 93 f7 ff ff
073dh vmovdqu xmm0,xmmword ptr [rsp+770h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 07 00 00
0746h vmovdqu xmmword ptr [rsp+0AF0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 0a 00 00
074fh vmovdqu xmm0,xmmword ptr [rsp+0AF0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 0a 00 00
0758h vmovdqu xmmword ptr [rsp+738h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 07 00 00
0761h vmovdqu xmm0,xmmword ptr [rsp+738h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 07 00 00
076ah vmovdqu xmmword ptr [rsp+728h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 07 00 00
0773h vmovdqu xmm0,xmmword ptr [rsp+728h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 07 00 00
077ch vmovdqu xmmword ptr [rsp+718h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 07 00 00
0785h vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
078eh vmovdqu xmmword ptr [rsp+708h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 07 00 00
0797h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
07a1h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
07a4h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
07a8h mov r11,7FFDDB000F48h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f48h:imm64]         encoding(10 bytes) = 49 bb 48 0f 00 db fd 7f 00 00
07b2h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
07b7h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
07b9h call qword ptr [7FFDDB000F48h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 19 10 5e ff
07bfh lea rcx,[rsp+6D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 06 00 00
07c7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
07cbh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
07cfh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
07d2h jne short 07e6h               ; JNE(Jne_rel8_64) [7E6h:jmp64]                        encoding(2 bytes) = 75 12
07d4h lea rax,[rsp+6D8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 d8 06 00 00
07dch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
07e0h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
07e4h jmp short 080fh               ; JMP(Jmp_rel8_64) [80Fh:jmp64]                        encoding(2 bytes) = eb 29
07e6h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
07eah mov [rsp+6D0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 d0 06 00 00
07f2h mov rcx,[rsp+6D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 06 00 00
07fah lea rdx,[rsp+6D8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d8 06 00 00
0802h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0805h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0808h mov [rsp+6E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 06 00 00
080fh vmovdqu xmm0,xmmword ptr [rsp+6D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 06 00 00
0818h vmovdqu xmmword ptr [rsp+6E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 06 00 00
0821h cmp dword ptr [rsp+6F0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 f0 06 00 00 00
0829h jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 42 17 00 00
082fh mov rcx,[rsp+6E8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e8 06 00 00
0837h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
083ah mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0844h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0847h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
084ah mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
084dh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
084fh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0852h mov eax,[rsp+710h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 10 07 00 00
0859h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
085ch ja near ptr 1f29h             ; JA(Ja_rel32_64) [1F29h:jmp64]                        encoding(6 bytes) = 0f 87 c7 16 00 00
0862h mov r8,[rsp+708h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 08 07 00 00
086ah lea rax,[rsp+6C0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c0 06 00 00
0872h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0876h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
087ah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
087dh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0880h mov [rsp+6B8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 b8 06 00 00
0888h mov rcx,[rsp+6B8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b8 06 00 00
0890h lea r8,[rsp+6C0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 c0 06 00 00
0898h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
089bh mov [rsp+6C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 06 00 00
08a2h vmovdqu xmm0,xmmword ptr [rsp+6C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 06 00 00
08abh vmovdqu xmmword ptr [rsp+6F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 06 00 00
08b4h vmovdqu xmm0,xmmword ptr [rsp+6F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 06 00 00
08bdh vmovdqu xmmword ptr [rsp+6A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 06 00 00
08c6h mov ecx,[rsp+720h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 07 00 00
08cdh cmp ecx,[rsp+6B0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 b0 06 00 00
08d4h ja near ptr 1f2fh             ; JA(Ja_rel32_64) [1F2Fh:jmp64]                        encoding(6 bytes) = 0f 87 55 16 00 00
08dah mov rcx,[rsp+6A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 06 00 00
08e2h mov rdx,[rsp+718h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 18 07 00 00
08eah mov r8d,[rsp+720h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 20 07 00 00
08f2h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
08f5h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 96 8e 7f 5d
08fah mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0904h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0909h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 62 45 24 5f
090eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0911h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0913h mov [rsp+6A0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 06 00 00
091ah mov ecx,[rsp+6A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 06 00 00
0921h mov [rsp+0AE8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 0a 00 00
0928h mov dword ptr [rsp+698h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 98 06 00 00 01 00 00 00
0933h mov ecx,[rsp+698h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 06 00 00
093ah mov [rsp+0AE0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 0a 00 00
0941h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0943h mov [rsp+690h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 06 00 00
094ah mov ecx,[rsp+690h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 06 00 00
0951h mov [rsp+0AD8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 0a 00 00
0958h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
095bh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
095fh mov edx,[rsp+0AE8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 0a 00 00
0966h mov r8d,[rsp+0AE0h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e0 0a 00 00
096eh mov r9d,[rsp+0AD8h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 d8 0a 00 00
0976h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0979h mov [rsp+0AD0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d0 0a 00 00
0980h mov ecx,[rsp+0AD0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 0a 00 00
0987h mov [rsp+688h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 06 00 00
098eh cmp dword ptr [rsp+688h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 88 06 00 00 01
0996h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0999h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
099ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
099eh mov [rsp+680h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 06 00 00
09a5h mov edx,[rsp+680h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 06 00 00
09ach mov [rsp+0AC8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 0a 00 00
09b3h mov edx,[rsp+0AC8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 0a 00 00
09bah mov [rsp+678h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 78 06 00 00
09c1h cmp dword ptr [rsp+678h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 78 06 00 00 01
09c9h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
09cch movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
09cfh mov dword ptr [rsp+670h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 70 06 00 00 01 00 00 00
09dah mov eax,[rsp+670h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 70 06 00 00
09e1h mov [rsp+0AC0h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 0a 00 00
09e8h mov eax,[rsp+0AC0h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c0 0a 00 00
09efh mov [rsp+668h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 68 06 00 00
09f6h cmp dword ptr [rsp+668h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 68 06 00 00 01
09feh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
0a01h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0a04h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0a07h mov [rsp+660h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 60 06 00 00
0a0fh mov r8d,[rsp+660h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 60 06 00 00
0a17h mov [rsp+0AB8h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 b8 0a 00 00
0a1fh mov r8d,[rsp+0AB8h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b8 0a 00 00
0a27h mov [rsp+658h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 58 06 00 00
0a2fh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0a32h mov [rsp+654h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 54 06 00 00
0a3ah mov [rsp+650h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 50 06 00 00
0a42h mov [rsp+64Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 4c 06 00 00
0a4ah mov [rsp+64Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 4c 06 00 00
0a52h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0a54h je short 0a68h                ; JE(Je_rel8_64) [A68h:jmp64]                          encoding(2 bytes) = 74 12
0a56h movzx ecx,byte ptr [rsp+64Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 4c 06 00 00
0a5eh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0a61h mov [rsp+64Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 4c 06 00 00
0a68h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0a6ah je short 0a7eh                ; JE(Je_rel8_64) [A7Eh:jmp64]                          encoding(2 bytes) = 74 12
0a6ch movzx ecx,byte ptr [rsp+64Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 4c 06 00 00
0a74h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0a77h mov [rsp+64Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 4c 06 00 00
0a7eh mov ecx,[rsp+64Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 4c 06 00 00
0a85h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a88h mov [rsp+650h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 50 06 00 00
0a8fh test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0a91h je short 0aa5h                ; JE(Je_rel8_64) [AA5h:jmp64]                          encoding(2 bytes) = 74 12
0a93h movzx ecx,byte ptr [rsp+650h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 50 06 00 00
0a9bh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0a9eh mov [rsp+650h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 50 06 00 00
0aa5h mov ecx,[rsp+650h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 06 00 00
0aach movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0aafh mov [rsp+654h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 54 06 00 00
0ab6h cmp dword ptr [rsp+658h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 58 06 00 00 01
0abeh jne short 0ad2h               ; JNE(Jne_rel8_64) [AD2h:jmp64]                        encoding(2 bytes) = 75 12
0ac0h movzx ecx,byte ptr [rsp+654h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 54 06 00 00
0ac8h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0acbh mov [rsp+654h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 54 06 00 00
0ad2h mov ecx,[rsp+654h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 54 06 00 00
0ad9h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0adch mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0adfh lea rcx,[rsp+638h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 06 00 00
0ae7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0aebh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0aefh lea rcx,[rsp+618h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 06 00 00
0af7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0afbh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0affh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0b03h mov [rsp+610h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 10 06 00 00
0b0bh mov rcx,[rsp+610h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 10 06 00 00
0b13h lea rdx,[rsp+618h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 18 06 00 00
0b1bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0b1eh mov dword ptr [rsp+620h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 20 06 00 00 01 00 00 00
0b29h vmovdqu xmm0,xmmword ptr [rsp+618h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 06 00 00
0b32h vmovdqu xmmword ptr [rsp+628h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 06 00 00
0b3bh lea rcx,[rsp+638h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 06 00 00
0b43h vmovdqu xmm0,xmmword ptr [rsp+628h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 06 00 00
0b4ch vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
0b52h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
0b57h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 74 f3 ff ff
0b5ch vmovdqu xmm0,xmmword ptr [rsp+638h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 06 00 00
0b65h vmovdqu xmmword ptr [rsp+0AA8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 0a 00 00
0b6eh vmovdqu xmm0,xmmword ptr [rsp+0AA8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 0a 00 00
0b77h vmovdqu xmmword ptr [rsp+600h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 06 00 00
0b80h vmovdqu xmm0,xmmword ptr [rsp+600h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 06 00 00
0b89h vmovdqu xmmword ptr [rsp+5F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 05 00 00
0b92h vmovdqu xmm0,xmmword ptr [rsp+5F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 05 00 00
0b9bh vmovdqu xmmword ptr [rsp+5E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 05 00 00
0ba4h vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
0badh vmovdqu xmmword ptr [rsp+5D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 05 00 00
0bb6h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
0bc0h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0bc3h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0bc7h mov r11,7FFDDB000F50h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f50h:imm64]         encoding(10 bytes) = 49 bb 50 0f 00 db fd 7f 00 00
0bd1h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0bd6h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0bd8h call qword ptr [7FFDDB000F50h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 02 0c 5e ff
0bdeh lea rcx,[rsp+5A0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a0 05 00 00
0be6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0beah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0beeh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0bf1h jne short 0c05h               ; JNE(Jne_rel8_64) [C05h:jmp64]                        encoding(2 bytes) = 75 12
0bf3h lea rax,[rsp+5A0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a0 05 00 00
0bfbh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0bffh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0c03h jmp short 0c2eh               ; JMP(Jmp_rel8_64) [C2Eh:jmp64]                        encoding(2 bytes) = eb 29
0c05h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0c09h mov [rsp+598h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 05 00 00
0c11h mov rcx,[rsp+598h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 05 00 00
0c19h lea rdx,[rsp+5A0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a0 05 00 00
0c21h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0c24h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0c27h mov [rsp+5A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 05 00 00
0c2eh vmovdqu xmm0,xmmword ptr [rsp+5A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 05 00 00
0c37h vmovdqu xmmword ptr [rsp+5B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 05 00 00
0c40h cmp dword ptr [rsp+5B8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 b8 05 00 00 00
0c48h jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 23 13 00 00
0c4eh mov rcx,[rsp+5B0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b0 05 00 00
0c56h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0c59h mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0c63h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0c66h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0c69h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0c6ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0c6eh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0c71h mov eax,[rsp+5D8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 d8 05 00 00
0c78h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0c7bh ja near ptr 1f35h             ; JA(Ja_rel32_64) [1F35h:jmp64]                        encoding(6 bytes) = 0f 87 b4 12 00 00
0c81h mov r8,[rsp+5D0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 d0 05 00 00
0c89h lea rax,[rsp+588h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 88 05 00 00
0c91h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c95h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0c99h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0c9ch add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0c9fh mov [rsp+580h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 80 05 00 00
0ca7h mov rcx,[rsp+580h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 80 05 00 00
0cafh lea r8,[rsp+588h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 88 05 00 00
0cb7h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0cbah mov [rsp+590h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 05 00 00
0cc1h vmovdqu xmm0,xmmword ptr [rsp+588h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 05 00 00
0ccah vmovdqu xmmword ptr [rsp+5C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 05 00 00
0cd3h vmovdqu xmm0,xmmword ptr [rsp+5C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 05 00 00
0cdch vmovdqu xmmword ptr [rsp+570h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 05 00 00
0ce5h mov ecx,[rsp+5E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 05 00 00
0cech cmp ecx,[rsp+578h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 78 05 00 00
0cf3h ja near ptr 1f3bh             ; JA(Ja_rel32_64) [1F3Bh:jmp64]                        encoding(6 bytes) = 0f 87 42 12 00 00
0cf9h mov rcx,[rsp+570h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 05 00 00
0d01h mov rdx,[rsp+5E0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e0 05 00 00
0d09h mov r8d,[rsp+5E8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e8 05 00 00
0d11h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0d14h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 77 8a 7f 5d
0d19h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0d23h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0d28h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 43 41 24 5f
0d2dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0d30h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0d32h mov [rsp+568h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 05 00 00
0d39h mov ecx,[rsp+568h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 05 00 00
0d40h mov [rsp+0AA0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 0a 00 00
0d47h mov dword ptr [rsp+560h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 60 05 00 00 01 00 00 00
0d52h mov ecx,[rsp+560h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 05 00 00
0d59h mov [rsp+0A98h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 0a 00 00
0d60h mov dword ptr [rsp+558h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 58 05 00 00 01 00 00 00
0d6bh mov ecx,[rsp+558h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 05 00 00
0d72h mov [rsp+0A90h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 0a 00 00
0d79h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0d7ch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0d80h mov edx,[rsp+0AA0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 0a 00 00
0d87h mov r8d,[rsp+0A98h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 98 0a 00 00
0d8fh mov r9d,[rsp+0A90h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 90 0a 00 00
0d97h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0d9ah mov [rsp+0A88h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 0a 00 00
0da1h mov ecx,[rsp+0A88h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 0a 00 00
0da8h mov [rsp+550h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 05 00 00
0dafh cmp dword ptr [rsp+550h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 50 05 00 00 01
0db7h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0dbah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0dbdh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0dbfh mov [rsp+548h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 05 00 00
0dc6h mov edx,[rsp+548h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 48 05 00 00
0dcdh mov [rsp+0A80h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 0a 00 00
0dd4h mov edx,[rsp+0A80h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 0a 00 00
0ddbh mov [rsp+540h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 05 00 00
0de2h cmp dword ptr [rsp+540h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 40 05 00 00 01
0deah sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0dedh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0df0h mov dword ptr [rsp+538h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 38 05 00 00 01 00 00 00
0dfbh mov eax,[rsp+538h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 38 05 00 00
0e02h mov [rsp+0A78h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 0a 00 00
0e09h mov eax,[rsp+0A78h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 0a 00 00
0e10h mov [rsp+530h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 05 00 00
0e17h cmp dword ptr [rsp+530h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 30 05 00 00 01
0e1fh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
0e22h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0e25h mov dword ptr [rsp+528h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 28 05 00 00 01 00 00 00
0e30h mov r8d,[rsp+528h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 05 00 00
0e38h mov [rsp+0A70h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 70 0a 00 00
0e40h mov r8d,[rsp+0A70h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 70 0a 00 00
0e48h mov [rsp+520h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 20 05 00 00
0e50h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0e53h mov [rsp+51Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 1c 05 00 00
0e5bh mov [rsp+518h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 18 05 00 00
0e63h mov [rsp+514h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 14 05 00 00
0e6bh mov [rsp+514h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 14 05 00 00
0e73h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0e75h je short 0e89h                ; JE(Je_rel8_64) [E89h:jmp64]                          encoding(2 bytes) = 74 12
0e77h movzx ecx,byte ptr [rsp+514h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 14 05 00 00
0e7fh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0e82h mov [rsp+514h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 05 00 00
0e89h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0e8bh je short 0e9fh                ; JE(Je_rel8_64) [E9Fh:jmp64]                          encoding(2 bytes) = 74 12
0e8dh movzx ecx,byte ptr [rsp+514h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 14 05 00 00
0e95h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0e98h mov [rsp+514h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 05 00 00
0e9fh mov ecx,[rsp+514h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 14 05 00 00
0ea6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0ea9h mov [rsp+518h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 18 05 00 00
0eb0h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0eb2h je short 0ec6h                ; JE(Je_rel8_64) [EC6h:jmp64]                          encoding(2 bytes) = 74 12
0eb4h movzx ecx,byte ptr [rsp+518h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 18 05 00 00
0ebch or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0ebfh mov [rsp+518h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 18 05 00 00
0ec6h mov ecx,[rsp+518h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 05 00 00
0ecdh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0ed0h mov [rsp+51Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 1c 05 00 00
0ed7h cmp dword ptr [rsp+520h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 20 05 00 00 01
0edfh jne short 0ef3h               ; JNE(Jne_rel8_64) [EF3h:jmp64]                        encoding(2 bytes) = 75 12
0ee1h movzx ecx,byte ptr [rsp+51Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 1c 05 00 00
0ee9h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0eech mov [rsp+51Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 1c 05 00 00
0ef3h mov ecx,[rsp+51Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 1c 05 00 00
0efah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0efdh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0f00h lea rcx,[rsp+500h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 05 00 00
0f08h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0f0ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0f10h lea rcx,[rsp+4E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 04 00 00
0f18h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0f1ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0f20h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0f24h mov [rsp+4D8h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 d8 04 00 00
0f2ch mov rcx,[rsp+4D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 04 00 00
0f34h lea rdx,[rsp+4E0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e0 04 00 00
0f3ch mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0f3fh mov dword ptr [rsp+4E8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e8 04 00 00 01 00 00 00
0f4ah vmovdqu xmm0,xmmword ptr [rsp+4E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 04 00 00
0f53h vmovdqu xmmword ptr [rsp+4F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 04 00 00
0f5ch lea rcx,[rsp+500h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 05 00 00
0f64h vmovdqu xmm0,xmmword ptr [rsp+4F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 04 00 00
0f6dh vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
0f73h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
0f78h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 53 ef ff ff
0f7dh vmovdqu xmm0,xmmword ptr [rsp+500h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 05 00 00
0f86h vmovdqu xmmword ptr [rsp+0A60h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 0a 00 00
0f8fh vmovdqu xmm0,xmmword ptr [rsp+0A60h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 0a 00 00
0f98h vmovdqu xmmword ptr [rsp+4C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 04 00 00
0fa1h vmovdqu xmm0,xmmword ptr [rsp+4C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 04 00 00
0faah vmovdqu xmmword ptr [rsp+4B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 04 00 00
0fb3h vmovdqu xmm0,xmmword ptr [rsp+4B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 04 00 00
0fbch vmovdqu xmmword ptr [rsp+4A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 04 00 00
0fc5h vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
0fceh vmovdqu xmmword ptr [rsp+498h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 04 00 00
0fd7h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
0fe1h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0fe4h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0fe8h mov r11,7FFDDB000F58h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f58h:imm64]         encoding(10 bytes) = 49 bb 58 0f 00 db fd 7f 00 00
0ff2h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0ff7h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0ff9h call qword ptr [7FFDDB000F58h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 e9 07 5e ff
0fffh lea rcx,[rsp+468h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 04 00 00
1007h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
100bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
100fh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1012h jne short 1026h               ; JNE(Jne_rel8_64) [1026h:jmp64]                       encoding(2 bytes) = 75 12
1014h lea rax,[rsp+468h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 68 04 00 00
101ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1020h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1024h jmp short 104fh               ; JMP(Jmp_rel8_64) [104Fh:jmp64]                       encoding(2 bytes) = eb 29
1026h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
102ah mov [rsp+460h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 60 04 00 00
1032h mov rcx,[rsp+460h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 04 00 00
103ah lea rdx,[rsp+468h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 68 04 00 00
1042h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1045h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1048h mov [rsp+470h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 04 00 00
104fh vmovdqu xmm0,xmmword ptr [rsp+468h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 04 00 00
1058h vmovdqu xmmword ptr [rsp+478h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 04 00 00
1061h cmp dword ptr [rsp+480h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 80 04 00 00 00
1069h jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 02 0f 00 00
106fh mov rcx,[rsp+478h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 04 00 00
1077h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
107ah mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
1084h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1087h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
108ah mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
108dh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
108fh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1092h mov eax,[rsp+4A0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a0 04 00 00
1099h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
109ch ja near ptr 1f41h             ; JA(Ja_rel32_64) [1F41h:jmp64]                        encoding(6 bytes) = 0f 87 9f 0e 00 00
10a2h mov r8,[rsp+498h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 98 04 00 00
10aah lea rax,[rsp+450h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 50 04 00 00
10b2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
10b6h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
10bah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
10bdh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
10c0h mov [rsp+448h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 48 04 00 00
10c8h mov rcx,[rsp+448h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 04 00 00
10d0h lea r8,[rsp+450h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 50 04 00 00
10d8h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
10dbh mov [rsp+458h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 04 00 00
10e2h vmovdqu xmm0,xmmword ptr [rsp+450h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 04 00 00
10ebh vmovdqu xmmword ptr [rsp+488h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 04 00 00
10f4h vmovdqu xmm0,xmmword ptr [rsp+488h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 04 00 00
10fdh vmovdqu xmmword ptr [rsp+438h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 04 00 00
1106h mov ecx,[rsp+4B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 04 00 00
110dh cmp ecx,[rsp+440h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 40 04 00 00
1114h ja near ptr 1f47h             ; JA(Ja_rel32_64) [1F47h:jmp64]                        encoding(6 bytes) = 0f 87 2d 0e 00 00
111ah mov rcx,[rsp+438h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 04 00 00
1122h mov rdx,[rsp+4A8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a8 04 00 00
112ah mov r8d,[rsp+4B0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b0 04 00 00
1132h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1135h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 56 86 7f 5d
113ah mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1144h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1149h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 22 3d 24 5f
114eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1151h mov dword ptr [rsp+430h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 30 04 00 00 01 00 00 00
115ch mov ecx,[rsp+430h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 04 00 00
1163h mov [rsp+0A58h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 0a 00 00
116ah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
116ch mov [rsp+428h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 04 00 00
1173h mov ecx,[rsp+428h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 04 00 00
117ah mov [rsp+0A50h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 0a 00 00
1181h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1183h mov [rsp+420h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 04 00 00
118ah mov ecx,[rsp+420h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 04 00 00
1191h mov [rsp+0A48h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 0a 00 00
1198h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
119bh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
119fh mov edx,[rsp+0A58h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 0a 00 00
11a6h mov r8d,[rsp+0A50h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 50 0a 00 00
11aeh mov r9d,[rsp+0A48h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 48 0a 00 00
11b6h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
11b9h mov [rsp+0A40h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 40 0a 00 00
11c0h mov ecx,[rsp+0A40h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 0a 00 00
11c7h mov [rsp+418h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 04 00 00
11ceh cmp dword ptr [rsp+418h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 18 04 00 00 01
11d6h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
11d9h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
11dch mov dword ptr [rsp+410h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 10 04 00 00 01 00 00 00
11e7h mov edx,[rsp+410h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 04 00 00
11eeh mov [rsp+0A38h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 0a 00 00
11f5h mov edx,[rsp+0A38h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 0a 00 00
11fch mov [rsp+408h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 04 00 00
1203h cmp dword ptr [rsp+408h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 08 04 00 00 01
120bh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
120eh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
1211h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1213h mov [rsp+400h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 00 04 00 00
121ah mov eax,[rsp+400h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 00 04 00 00
1221h mov [rsp+0A30h],eax           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 0a 00 00
1228h mov eax,[rsp+0A30h]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 30 0a 00 00
122fh mov [rsp+3F8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f8 03 00 00
1236h cmp dword ptr [rsp+3F8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 f8 03 00 00 01
123eh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
1241h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
1244h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1247h mov [rsp+3F0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f0 03 00 00
124fh mov r8d,[rsp+3F0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 f0 03 00 00
1257h mov [rsp+0A28h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 28 0a 00 00
125fh mov r8d,[rsp+0A28h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 0a 00 00
1267h mov [rsp+3E8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e8 03 00 00
126fh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1272h mov [rsp+3E4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e4 03 00 00
127ah mov [rsp+3E0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e0 03 00 00
1282h mov [rsp+3DCh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 dc 03 00 00
128ah mov [rsp+3DCh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 dc 03 00 00
1292h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
1294h je short 12a8h                ; JE(Je_rel8_64) [12A8h:jmp64]                         encoding(2 bytes) = 74 12
1296h movzx ecx,byte ptr [rsp+3DCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 dc 03 00 00
129eh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
12a1h mov [rsp+3DCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 dc 03 00 00
12a8h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
12aah je short 12beh                ; JE(Je_rel8_64) [12BEh:jmp64]                         encoding(2 bytes) = 74 12
12ach movzx ecx,byte ptr [rsp+3DCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 dc 03 00 00
12b4h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
12b7h mov [rsp+3DCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 dc 03 00 00
12beh mov ecx,[rsp+3DCh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 dc 03 00 00
12c5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
12c8h mov [rsp+3E0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e0 03 00 00
12cfh test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
12d1h je short 12e5h                ; JE(Je_rel8_64) [12E5h:jmp64]                         encoding(2 bytes) = 74 12
12d3h movzx ecx,byte ptr [rsp+3E0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 e0 03 00 00
12dbh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
12deh mov [rsp+3E0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e0 03 00 00
12e5h mov ecx,[rsp+3E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 03 00 00
12ech movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
12efh mov [rsp+3E4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e4 03 00 00
12f6h cmp dword ptr [rsp+3E8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 e8 03 00 00 01
12feh jne short 1312h               ; JNE(Jne_rel8_64) [1312h:jmp64]                       encoding(2 bytes) = 75 12
1300h movzx ecx,byte ptr [rsp+3E4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 e4 03 00 00
1308h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
130bh mov [rsp+3E4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e4 03 00 00
1312h mov ecx,[rsp+3E4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e4 03 00 00
1319h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
131ch mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
131fh lea rcx,[rsp+3C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 03 00 00
1327h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
132bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
132fh lea rcx,[rsp+3A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 03 00 00
1337h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
133bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
133fh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
1343h mov [rsp+3A0h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 a0 03 00 00
134bh mov rcx,[rsp+3A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 03 00 00
1353h lea rdx,[rsp+3A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 03 00 00
135bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
135eh mov dword ptr [rsp+3B0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b0 03 00 00 01 00 00 00
1369h vmovdqu xmm0,xmmword ptr [rsp+3A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 03 00 00
1372h vmovdqu xmmword ptr [rsp+3B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 03 00 00
137bh lea rcx,[rsp+3C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 03 00 00
1383h vmovdqu xmm0,xmmword ptr [rsp+3B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 03 00 00
138ch vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
1392h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
1397h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 34 eb ff ff
139ch vmovdqu xmm0,xmmword ptr [rsp+3C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 03 00 00
13a5h vmovdqu xmmword ptr [rsp+0A18h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 0a 00 00
13aeh vmovdqu xmm0,xmmword ptr [rsp+0A18h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 0a 00 00
13b7h vmovdqu xmmword ptr [rsp+390h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 03 00 00
13c0h vmovdqu xmm0,xmmword ptr [rsp+390h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 03 00 00
13c9h vmovdqu xmmword ptr [rsp+380h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 03 00 00
13d2h vmovdqu xmm0,xmmword ptr [rsp+380h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 03 00 00
13dbh vmovdqu xmmword ptr [rsp+370h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 03 00 00
13e4h vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
13edh vmovdqu xmmword ptr [rsp+360h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 03 00 00
13f6h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1400h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1403h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1407h mov r11,7FFDDB000F60h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f60h:imm64]         encoding(10 bytes) = 49 bb 60 0f 00 db fd 7f 00 00
1411h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
1416h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1418h call qword ptr [7FFDDB000F60h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 d2 03 5e ff
141eh lea rcx,[rsp+330h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 03 00 00
1426h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
142ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
142eh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1431h jne short 1445h               ; JNE(Jne_rel8_64) [1445h:jmp64]                       encoding(2 bytes) = 75 12
1433h lea rax,[rsp+330h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 30 03 00 00
143bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
143fh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1443h jmp short 146eh               ; JMP(Jmp_rel8_64) [146Eh:jmp64]                       encoding(2 bytes) = eb 29
1445h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1449h mov [rsp+328h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 28 03 00 00
1451h mov rcx,[rsp+328h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 03 00 00
1459h lea rdx,[rsp+330h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 30 03 00 00
1461h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1464h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1467h mov [rsp+338h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 03 00 00
146eh vmovdqu xmm0,xmmword ptr [rsp+330h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 03 00 00
1477h vmovdqu xmmword ptr [rsp+340h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 03 00 00
1480h cmp dword ptr [rsp+348h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 48 03 00 00 00
1488h jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 e3 0a 00 00
148eh mov rcx,[rsp+340h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 40 03 00 00
1496h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1499h mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
14a3h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
14a6h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
14a9h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
14ach mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
14aeh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
14b1h mov eax,[rsp+368h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 68 03 00 00
14b8h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
14bbh ja near ptr 1f4dh             ; JA(Ja_rel32_64) [1F4Dh:jmp64]                        encoding(6 bytes) = 0f 87 8c 0a 00 00
14c1h mov r8,[rsp+360h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 60 03 00 00
14c9h lea rax,[rsp+318h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 18 03 00 00
14d1h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
14d5h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
14d9h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
14dch add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
14dfh mov [rsp+310h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 10 03 00 00
14e7h mov rcx,[rsp+310h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 10 03 00 00
14efh lea r8,[rsp+318h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 18 03 00 00
14f7h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
14fah mov [rsp+320h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 03 00 00
1501h vmovdqu xmm0,xmmword ptr [rsp+318h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 03 00 00
150ah vmovdqu xmmword ptr [rsp+350h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 03 00 00
1513h vmovdqu xmm0,xmmword ptr [rsp+350h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 03 00 00
151ch vmovdqu xmmword ptr [rsp+300h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 03 00 00
1525h mov ecx,[rsp+378h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 03 00 00
152ch cmp ecx,[rsp+308h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 08 03 00 00
1533h ja near ptr 1f53h             ; JA(Ja_rel32_64) [1F53h:jmp64]                        encoding(6 bytes) = 0f 87 1a 0a 00 00
1539h mov rcx,[rsp+300h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 03 00 00
1541h mov rdx,[rsp+370h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 70 03 00 00
1549h mov r8d,[rsp+378h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 78 03 00 00
1551h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1554h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 37 82 7f 5d
1559h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1563h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1568h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 03 39 24 5f
156dh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1570h mov dword ptr [rsp+2F8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 f8 02 00 00 01 00 00 00
157bh mov ecx,[rsp+2F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 02 00 00
1582h mov [rsp+0A10h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 0a 00 00
1589h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
158bh mov [rsp+2F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 02 00 00
1592h mov ecx,[rsp+2F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 02 00 00
1599h mov [rsp+0A08h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 0a 00 00
15a0h mov dword ptr [rsp+2E8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e8 02 00 00 01 00 00 00
15abh mov ecx,[rsp+2E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 02 00 00
15b2h mov [rsp+0A00h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 0a 00 00
15b9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
15bch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
15c0h mov edx,[rsp+0A10h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 0a 00 00
15c7h mov r8d,[rsp+0A08h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 08 0a 00 00
15cfh mov r9d,[rsp+0A00h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 00 0a 00 00
15d7h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
15dah mov [rsp+9F8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f8 09 00 00
15e1h mov ecx,[rsp+9F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 09 00 00
15e8h mov [rsp+2E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 02 00 00
15efh cmp dword ptr [rsp+2E0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 e0 02 00 00 01
15f7h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
15fah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
15fdh mov dword ptr [rsp+2D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 02 00 00 01 00 00 00
1608h mov edx,[rsp+2D8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d8 02 00 00
160fh mov [rsp+9F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 09 00 00
1616h mov edx,[rsp+9F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 09 00 00
161dh mov [rsp+2D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 02 00 00
1624h cmp dword ptr [rsp+2D0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 d0 02 00 00 01
162ch sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
162fh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
1632h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1634h mov [rsp+2C8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c8 02 00 00
163bh mov eax,[rsp+2C8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c8 02 00 00
1642h mov [rsp+9E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 09 00 00
1649h mov eax,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 09 00 00
1650h mov [rsp+2C0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 02 00 00
1657h cmp dword ptr [rsp+2C0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 c0 02 00 00 01
165fh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
1662h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
1665h mov dword ptr [rsp+2B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 02 00 00 01 00 00 00
1670h mov r8d,[rsp+2B8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b8 02 00 00
1678h mov [rsp+9E0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e0 09 00 00
1680h mov r8d,[rsp+9E0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e0 09 00 00
1688h mov [rsp+2B0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 b0 02 00 00
1690h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1693h mov [rsp+2ACh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 ac 02 00 00
169bh mov [rsp+2A8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a8 02 00 00
16a3h mov [rsp+2A4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a4 02 00 00
16abh mov [rsp+2A4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a4 02 00 00
16b3h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
16b5h je short 16c9h                ; JE(Je_rel8_64) [16C9h:jmp64]                         encoding(2 bytes) = 74 12
16b7h movzx ecx,byte ptr [rsp+2A4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 a4 02 00 00
16bfh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
16c2h mov [rsp+2A4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a4 02 00 00
16c9h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
16cbh je short 16dfh                ; JE(Je_rel8_64) [16DFh:jmp64]                         encoding(2 bytes) = 74 12
16cdh movzx ecx,byte ptr [rsp+2A4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 a4 02 00 00
16d5h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
16d8h mov [rsp+2A4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a4 02 00 00
16dfh mov ecx,[rsp+2A4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a4 02 00 00
16e6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
16e9h mov [rsp+2A8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a8 02 00 00
16f0h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
16f2h je short 1706h                ; JE(Je_rel8_64) [1706h:jmp64]                         encoding(2 bytes) = 74 12
16f4h movzx ecx,byte ptr [rsp+2A8h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 a8 02 00 00
16fch or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
16ffh mov [rsp+2A8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a8 02 00 00
1706h mov ecx,[rsp+2A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 02 00 00
170dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1710h mov [rsp+2ACh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 ac 02 00 00
1717h cmp dword ptr [rsp+2B0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 b0 02 00 00 01
171fh jne short 1733h               ; JNE(Jne_rel8_64) [1733h:jmp64]                       encoding(2 bytes) = 75 12
1721h movzx ecx,byte ptr [rsp+2ACh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 ac 02 00 00
1729h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
172ch mov [rsp+2ACh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 ac 02 00 00
1733h mov ecx,[rsp+2ACh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 ac 02 00 00
173ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
173dh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
1740h lea rcx,[rsp+290h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 02 00 00
1748h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
174ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1750h lea rcx,[rsp+270h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 02 00 00
1758h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
175ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1760h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
1764h mov [rsp+268h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 68 02 00 00
176ch mov rcx,[rsp+268h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 68 02 00 00
1774h lea rdx,[rsp+270h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 70 02 00 00
177ch mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
177fh mov dword ptr [rsp+278h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 78 02 00 00 01 00 00 00
178ah vmovdqu xmm0,xmmword ptr [rsp+270h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 02 00 00
1793h vmovdqu xmmword ptr [rsp+280h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 02 00 00
179ch lea rcx,[rsp+290h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 02 00 00
17a4h vmovdqu xmm0,xmmword ptr [rsp+280h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 02 00 00
17adh vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
17b3h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
17b8h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 13 e7 ff ff
17bdh vmovdqu xmm0,xmmword ptr [rsp+290h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 02 00 00
17c6h vmovdqu xmmword ptr [rsp+9D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 09 00 00
17cfh vmovdqu xmm0,xmmword ptr [rsp+9D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 09 00 00
17d8h vmovdqu xmmword ptr [rsp+258h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 02 00 00
17e1h vmovdqu xmm0,xmmword ptr [rsp+258h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 02 00 00
17eah vmovdqu xmmword ptr [rsp+248h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 02 00 00
17f3h vmovdqu xmm0,xmmword ptr [rsp+248h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 02 00 00
17fch vmovdqu xmmword ptr [rsp+238h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 02 00 00
1805h vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
180eh vmovdqu xmmword ptr [rsp+228h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 02 00 00
1817h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1821h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1824h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1828h mov r11,7FFDDB000F68h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f68h:imm64]         encoding(10 bytes) = 49 bb 68 0f 00 db fd 7f 00 00
1832h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
1837h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1839h call qword ptr [7FFDDB000F68h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 b9 ff 5d ff
183fh lea rcx,[rsp+1F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 01 00 00
1847h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
184bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
184fh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1852h jne short 1866h               ; JNE(Jne_rel8_64) [1866h:jmp64]                       encoding(2 bytes) = 75 12
1854h lea rax,[rsp+1F8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 f8 01 00 00
185ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1860h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1864h jmp short 188fh               ; JMP(Jmp_rel8_64) [188Fh:jmp64]                       encoding(2 bytes) = eb 29
1866h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
186ah mov [rsp+1F0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 f0 01 00 00
1872h mov rcx,[rsp+1F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 01 00 00
187ah lea rdx,[rsp+1F8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 01 00 00
1882h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1885h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1888h mov [rsp+200h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 02 00 00
188fh vmovdqu xmm0,xmmword ptr [rsp+1F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 01 00 00
1898h vmovdqu xmmword ptr [rsp+208h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 02 00 00
18a1h cmp dword ptr [rsp+210h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 10 02 00 00 00
18a9h jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 c2 06 00 00
18afh mov rcx,[rsp+208h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 08 02 00 00
18b7h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
18bah mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
18c4h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
18c7h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
18cah mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
18cdh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
18cfh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
18d2h mov eax,[rsp+230h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 30 02 00 00
18d9h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
18dch ja near ptr 1f59h             ; JA(Ja_rel32_64) [1F59h:jmp64]                        encoding(6 bytes) = 0f 87 77 06 00 00
18e2h mov r8,[rsp+228h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 28 02 00 00
18eah lea rax,[rsp+1E0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 e0 01 00 00
18f2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
18f6h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
18fah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
18fdh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1900h mov [rsp+1D8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 d8 01 00 00
1908h mov rcx,[rsp+1D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 01 00 00
1910h lea r8,[rsp+1E0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 e0 01 00 00
1918h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
191bh mov [rsp+1E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 01 00 00
1922h vmovdqu xmm0,xmmword ptr [rsp+1E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 01 00 00
192bh vmovdqu xmmword ptr [rsp+218h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 02 00 00
1934h vmovdqu xmm0,xmmword ptr [rsp+218h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 02 00 00
193dh vmovdqu xmmword ptr [rsp+1C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 01 00 00
1946h mov ecx,[rsp+240h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 02 00 00
194dh cmp ecx,[rsp+1D0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 d0 01 00 00
1954h ja near ptr 1f5fh             ; JA(Ja_rel32_64) [1F5Fh:jmp64]                        encoding(6 bytes) = 0f 87 05 06 00 00
195ah mov rcx,[rsp+1C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 01 00 00
1962h mov rdx,[rsp+238h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 38 02 00 00
196ah mov r8d,[rsp+240h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 40 02 00 00
1972h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1975h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 16 7e 7f 5d
197ah mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1984h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1989h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 e2 34 24 5f
198eh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1991h mov dword ptr [rsp+1C0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c0 01 00 00 01 00 00 00
199ch mov ecx,[rsp+1C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 01 00 00
19a3h mov [rsp+9C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 09 00 00
19aah mov dword ptr [rsp+1B8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b8 01 00 00 01 00 00 00
19b5h mov ecx,[rsp+1B8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 01 00 00
19bch mov [rsp+9C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 09 00 00
19c3h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
19c5h mov [rsp+1B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 01 00 00
19cch mov ecx,[rsp+1B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 01 00 00
19d3h mov [rsp+9B8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 09 00 00
19dah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
19ddh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
19e1h mov edx,[rsp+9C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 09 00 00
19e8h mov r8d,[rsp+9C0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c0 09 00 00
19f0h mov r9d,[rsp+9B8h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 b8 09 00 00
19f8h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
19fbh mov [rsp+9B0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 b0 09 00 00
1a02h mov ecx,[rsp+9B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 09 00 00
1a09h mov [rsp+1A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 01 00 00
1a10h cmp dword ptr [rsp+1A8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 a8 01 00 00 01
1a18h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
1a1bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1a1eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1a20h mov [rsp+1A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 01 00 00
1a27h mov edx,[rsp+1A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 01 00 00
1a2eh mov [rsp+9A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 09 00 00
1a35h mov edx,[rsp+9A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 09 00 00
1a3ch mov [rsp+198h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 98 01 00 00
1a43h cmp dword ptr [rsp+198h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 98 01 00 00 01
1a4bh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
1a4eh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
1a51h mov dword ptr [rsp+190h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 90 01 00 00 01 00 00 00
1a5ch mov eax,[rsp+190h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 01 00 00
1a63h mov [rsp+9A0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 a0 09 00 00
1a6ah mov eax,[rsp+9A0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 a0 09 00 00
1a71h mov [rsp+188h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 01 00 00
1a78h cmp dword ptr [rsp+188h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 88 01 00 00 01
1a80h sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
1a83h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
1a86h mov dword ptr [rsp+180h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 80 01 00 00 01 00 00 00
1a91h mov r8d,[rsp+180h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 80 01 00 00
1a99h mov [rsp+998h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 98 09 00 00
1aa1h mov r8d,[rsp+998h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 98 09 00 00
1aa9h mov [rsp+178h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 78 01 00 00
1ab1h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1ab4h mov [rsp+174h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 74 01 00 00
1abch mov [rsp+170h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 70 01 00 00
1ac4h mov [rsp+16Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 6c 01 00 00
1acch mov [rsp+16Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 6c 01 00 00
1ad4h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
1ad6h je short 1aeah                ; JE(Je_rel8_64) [1AEAh:jmp64]                         encoding(2 bytes) = 74 12
1ad8h movzx ecx,byte ptr [rsp+16Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 6c 01 00 00
1ae0h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
1ae3h mov [rsp+16Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 6c 01 00 00
1aeah test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
1aech je short 1b00h                ; JE(Je_rel8_64) [1B00h:jmp64]                         encoding(2 bytes) = 74 12
1aeeh movzx ecx,byte ptr [rsp+16Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 6c 01 00 00
1af6h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
1af9h mov [rsp+16Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 6c 01 00 00
1b00h mov ecx,[rsp+16Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 6c 01 00 00
1b07h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1b0ah mov [rsp+170h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 70 01 00 00
1b11h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
1b13h je short 1b27h                ; JE(Je_rel8_64) [1B27h:jmp64]                         encoding(2 bytes) = 74 12
1b15h movzx ecx,byte ptr [rsp+170h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 70 01 00 00
1b1dh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
1b20h mov [rsp+170h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 70 01 00 00
1b27h mov ecx,[rsp+170h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 01 00 00
1b2eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1b31h mov [rsp+174h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 74 01 00 00
1b38h cmp dword ptr [rsp+178h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 78 01 00 00 01
1b40h jne short 1b54h               ; JNE(Jne_rel8_64) [1B54h:jmp64]                       encoding(2 bytes) = 75 12
1b42h movzx ecx,byte ptr [rsp+174h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 74 01 00 00
1b4ah or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
1b4dh mov [rsp+174h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 74 01 00 00
1b54h mov ecx,[rsp+174h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 74 01 00 00
1b5bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1b5eh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
1b61h lea rcx,[rsp+158h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 01 00 00
1b69h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b6dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1b71h lea rcx,[rsp+138h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 01 00 00
1b79h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b7dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1b81h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
1b85h mov [rsp+130h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 30 01 00 00
1b8dh mov rcx,[rsp+130h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 01 00 00
1b95h lea rdx,[rsp+138h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 01 00 00
1b9dh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1ba0h mov dword ptr [rsp+140h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 40 01 00 00 01 00 00 00
1babh vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
1bb4h vmovdqu xmmword ptr [rsp+148h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 01 00 00
1bbdh lea rcx,[rsp+158h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 01 00 00
1bc5h vmovdqu xmm0,xmmword ptr [rsp+148h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 01 00 00
1bceh vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
1bd4h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
1bd9h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 f2 e2 ff ff
1bdeh vmovdqu xmm0,xmmword ptr [rsp+158h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 01 00 00
1be7h vmovdqu xmmword ptr [rsp+988h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 09 00 00
1bf0h vmovdqu xmm0,xmmword ptr [rsp+988h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 09 00 00
1bf9h vmovdqu xmmword ptr [rsp+120h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 01 00 00
1c02h vmovdqu xmm0,xmmword ptr [rsp+120h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 01 00 00
1c0bh vmovdqu xmmword ptr [rsp+110h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 01 00 00
1c14h vmovdqu xmm0,xmmword ptr [rsp+110h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 01 00 00
1c1dh vmovdqu xmmword ptr [rsp+100h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 01 00 00
1c26h vmovdqu xmm0,xmmword ptr [rsp+0B80h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 0b 00 00
1c2fh vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
1c38h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1c42h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1c45h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1c49h mov r11,7FFDDB000F70h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f70h:imm64]         encoding(10 bytes) = 49 bb 70 0f 00 db fd 7f 00 00
1c53h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
1c58h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1c5ah call qword ptr [7FFDDB000F70h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 a0 fb 5d ff
1c60h lea rcx,[rsp+0C0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c0 00 00 00
1c68h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c6ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1c70h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1c73h jne short 1c87h               ; JNE(Jne_rel8_64) [1C87h:jmp64]                       encoding(2 bytes) = 75 12
1c75h lea rax,[rsp+0C0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c0 00 00 00
1c7dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c81h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1c85h jmp short 1cb0h               ; JMP(Jmp_rel8_64) [1CB0h:jmp64]                       encoding(2 bytes) = eb 29
1c87h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1c8bh mov [rsp+0B8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 b8 00 00 00
1c93h mov rcx,[rsp+0B8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b8 00 00 00
1c9bh lea rdx,[rsp+0C0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c0 00 00 00
1ca3h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1ca6h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1ca9h mov [rsp+0C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 00 00 00
1cb0h vmovdqu xmm0,xmmword ptr [rsp+0C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 00 00 00
1cb9h vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
1cc2h cmp dword ptr [rsp+0D8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 d8 00 00 00 00
1ccah jbe near ptr 1f71h            ; JBE(Jbe_rel32_64) [1F71h:jmp64]                      encoding(6 bytes) = 0f 86 a1 02 00 00
1cd0h mov rcx,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 00 00 00
1cd8h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1cdbh mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
1ce5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1ce8h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1cebh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1ceeh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
1cf0h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1cf3h mov eax,[rsp+0F8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f8 00 00 00
1cfah cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
1cfdh ja near ptr 1f65h             ; JA(Ja_rel32_64) [1F65h:jmp64]                        encoding(6 bytes) = 0f 87 62 02 00 00
1d03h mov r8,[rsp+0F0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 f0 00 00 00
1d0bh lea rax,[rsp+0A8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a8 00 00 00
1d13h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1d17h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1d1bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1d1eh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1d21h mov [rsp+0A0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a0 00 00 00
1d29h mov rcx,[rsp+0A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 00 00 00
1d31h lea r8,[rsp+0A8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 a8 00 00 00
1d39h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1d3ch mov [rsp+0B0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b0 00 00 00
1d43h vmovdqu xmm0,xmmword ptr [rsp+0A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 00 00 00
1d4ch vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
1d55h vmovdqu xmm0,xmmword ptr [rsp+0E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 00 00 00
1d5eh vmovdqu xmmword ptr [rsp+90h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 00 00 00
1d67h mov ecx,[rsp+108h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 01 00 00
1d6eh cmp ecx,[rsp+98h]             ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 98 00 00 00
1d75h ja near ptr 1f6bh             ; JA(Ja_rel32_64) [1F6Bh:jmp64]                        encoding(6 bytes) = 0f 87 f0 01 00 00
1d7bh mov rcx,[rsp+90h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 00 00 00
1d83h mov rdx,[rsp+100h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 00 01 00 00
1d8bh mov r8d,[rsp+108h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 08 01 00 00
1d93h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1d96h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F9790h:jmp64]                encoding(5 bytes) = e8 f5 79 7f 5d
1d9bh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1da5h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1daah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F244E70h:jmp64]                encoding(5 bytes) = e8 c1 30 24 5f
1dafh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1db2h mov dword ptr [rsp+88h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 88 00 00 00 01 00 00 00
1dbdh mov ecx,[rsp+88h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 00 00 00
1dc4h mov [rsp+980h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 09 00 00
1dcbh mov dword ptr [rsp+80h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 80 00 00 00 01 00 00 00
1dd6h mov ecx,[rsp+80h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 00 00 00
1dddh mov [rsp+978h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 09 00 00
1de4h mov dword ptr [rsp+78h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(8 bytes) = c7 44 24 78 01 00 00 00
1dech mov ecx,[rsp+78h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 78
1df0h mov [rsp+970h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 09 00 00
1df7h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
1dfbh mov edx,[rsp+980h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 09 00 00
1e02h mov r8d,[rsp+978h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 78 09 00 00
1e0ah mov r9d,[rsp+970h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 70 09 00 00
1e12h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
1e15h mov [rsp+968h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 68 09 00 00
1e1ch mov r9d,[rsp+968h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 68 09 00 00
1e24h mov [rsp+70h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 70
1e29h cmp dword ptr [rsp+70h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(5 bytes) = 83 7c 24 70 01
1e2eh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
1e31h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1e34h mov dword ptr [rsp+68h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(8 bytes) = c7 44 24 68 01 00 00 00
1e3ch mov r9d,[rsp+68h]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 8b 4c 24 68
1e41h mov [rsp+960h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 60 09 00 00
1e49h mov r9d,[rsp+960h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 60 09 00 00
1e51h mov [rsp+60h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 60
1e56h cmp dword ptr [rsp+60h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(5 bytes) = 83 7c 24 60 01
1e5bh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
1e5eh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
1e61h mov dword ptr [rsp+58h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(8 bytes) = c7 44 24 58 01 00 00 00
1e69h mov r9d,[rsp+58h]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 8b 4c 24 58
1e6eh mov [rsp+958h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 58 09 00 00
1e76h mov r9d,[rsp+958h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 58 09 00 00
1e7eh mov [rsp+50h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 50
1e83h cmp dword ptr [rsp+50h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(5 bytes) = 83 7c 24 50 01
1e88h sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
1e8ch movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
1e90h mov dword ptr [rsp+48h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(8 bytes) = c7 44 24 48 01 00 00 00
1e98h mov r9d,[rsp+48h]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 8b 4c 24 48
1e9dh mov [rsp+950h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 50 09 00 00
1ea5h mov r9d,[rsp+950h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 50 09 00 00
1eadh mov [rsp+40h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 40
1eb2h cmp dword ptr [rsp+40h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(5 bytes) = 83 7c 24 40 01
1eb7h sete r9b                      ; SETE(Sete_rm8) [R9L]                                 encoding(4 bytes) = 41 0f 94 c1
1ebbh movzx r9d,r9b                 ; MOVZX(Movzx_r32_rm8) [R9D,R9L]                       encoding(4 bytes) = 45 0f b6 c9
1ebfh call 7FFDDB822130h            ; CALL(Call_rel32_64) [FFFFFFFFFFE029C0h:jmp64]        encoding(5 bytes) = e8 fc 0a e0 ff
1ec4h mov [rdi+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),AL]            encoding(3 bytes) = 88 47 10
1ec7h lea rcx,[rsp+940h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 09 00 00
1ecfh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1ed2h call 7FFDDBA1E4F8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFED88h:jmp64]        encoding(5 bytes) = e8 b1 ce ff ff
1ed7h lea rcx,[rsp+0B80h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 0b 00 00
1edfh vmovdqu xmm0,xmmword ptr [rsp+940h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 09 00 00
1ee8h vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
1eeeh lea r8,[rsp+20h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 20
1ef3h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1ef8h call 7FFDDBA1F4D0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFD60h:jmp64]        encoding(5 bytes) = e8 63 de ff ff
1efdh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
1f00h lea rsi,[rsp+0B80h]           ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 80 0b 00 00
1f08h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F243F20h:jmp64]                encoding(5 bytes) = e8 13 20 24 5f
1f0dh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
1f0fh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
1f12h add rsp,0B90h                 ; ADD(Add_rm64_imm32) [RSP,b90h:imm64]                 encoding(7 bytes) = 48 81 c4 90 0b 00 00
1f19h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1f1ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1f1bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1f1ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1f1dh call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 3e e8 71 ff
1f22h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f23h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 40 e8 71 ff
1f28h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f29h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 32 e8 71 ff
1f2eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f2fh call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 34 e8 71 ff
1f34h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f35h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 26 e8 71 ff
1f3ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f3bh call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 28 e8 71 ff
1f40h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f41h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 1a e8 71 ff
1f46h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f47h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 1c e8 71 ff
1f4ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f4dh call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 0e e8 71 ff
1f52h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f53h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 10 e8 71 ff
1f58h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f59h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 02 e8 71 ff
1f5eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f5fh call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 04 e8 71 ff
1f64h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f65h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF720760h:jmp64]        encoding(5 bytes) = e8 f6 e7 71 ff
1f6ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f6bh call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF720768h:jmp64]        encoding(5 bytes) = e8 f8 e7 71 ff
1f70h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1f71h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F36F790h:jmp64]                encoding(5 bytes) = e8 1a d8 36 5f
1f76h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> BuildBytes => new byte[8055]{0x57,0x56,0x53,0x48,0x81,0xEC,0x90,0x0B,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x20,0xB9,0xDC,0x02,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xF2,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x36,0xFC,0x20,0x5F,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x14,0x4E,0x24,0x5F,0x48,0x8D,0x8C,0x24,0x20,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x18,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x09,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x28,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x0B,0x00,0x00,0x40,0x0F,0xB6,0xCE,0xE8,0xFE,0xB6,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x97,0x4D,0x24,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x10,0x09,0x00,0x00,0x8B,0x8C,0x24,0x10,0x09,0x00,0x00,0x89,0x8C,0x24,0x78,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x08,0x09,0x00,0x00,0x8B,0x8C,0x24,0x08,0x09,0x00,0x00,0x89,0x8C,0x24,0x70,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x00,0x09,0x00,0x00,0x8B,0x8C,0x24,0x00,0x09,0x00,0x00,0x89,0x8C,0x24,0x68,0x0B,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x78,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0x70,0x0B,0x00,0x00,0x44,0x8B,0x8C,0x24,0x68,0x0B,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x60,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x60,0x0B,0x00,0x00,0x89,0x8C,0x24,0xF8,0x08,0x00,0x00,0x83,0xBC,0x24,0xF8,0x08,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xF0,0x08,0x00,0x00,0x8B,0x94,0x24,0xF0,0x08,0x00,0x00,0x89,0x94,0x24,0x58,0x0B,0x00,0x00,0x8B,0x94,0x24,0x58,0x0B,0x00,0x00,0x89,0x94,0x24,0xE8,0x08,0x00,0x00,0x83,0xBC,0x24,0xE8,0x08,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x84,0x24,0xE0,0x08,0x00,0x00,0x8B,0x84,0x24,0xE0,0x08,0x00,0x00,0x89,0x84,0x24,0x50,0x0B,0x00,0x00,0x8B,0x84,0x24,0x50,0x0B,0x00,0x00,0x89,0x84,0x24,0xD8,0x08,0x00,0x00,0x83,0xBC,0x24,0xD8,0x08,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xD0,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0xD0,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x48,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0x48,0x0B,0x00,0x00,0x44,0x89,0x84,0x24,0xC8,0x08,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xC4,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0xC0,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0xBC,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0xBC,0x08,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xBC,0x08,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xBC,0x08,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xBC,0x08,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xBC,0x08,0x00,0x00,0x8B,0x8C,0x24,0xBC,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xC0,0x08,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xC0,0x08,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xC0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xC4,0x08,0x00,0x00,0x83,0xBC,0x24,0xC8,0x08,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xC4,0x08,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0xC4,0x08,0x00,0x00,0x8B,0x8C,0x24,0xC4,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xA8,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x88,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x80,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x80,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x88,0x08,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x90,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x08,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0xAD,0xFB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x08,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x40,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0x2E,0x14,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0x10,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x10,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x08,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x08,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x10,0x08,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x18,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x08,0x00,0x00,0x83,0xBC,0x24,0x28,0x08,0x00,0x00,0x00,0x0F,0x86,0x5F,0x1B,0x00,0x00,0x48,0x8B,0x8C,0x24,0x20,0x08,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x48,0x08,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xD8,0x1A,0x00,0x00,0x4C,0x8B,0x84,0x24,0x40,0x08,0x00,0x00,0x48,0x8D,0x84,0x24,0xF8,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xF0,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x07,0x00,0x00,0x4C,0x8D,0x84,0x24,0xF8,0x07,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x00,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x07,0x00,0x00,0x8B,0x8C,0x24,0x58,0x08,0x00,0x00,0x3B,0x8C,0x24,0xE8,0x07,0x00,0x00,0x0F,0x87,0x66,0x1A,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE0,0x07,0x00,0x00,0x48,0x8B,0x94,0x24,0x50,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x58,0x08,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xB3,0x92,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x7F,0x49,0x24,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0xD8,0x07,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x07,0x00,0x00,0x89,0x8C,0x24,0x30,0x0B,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xD0,0x07,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x07,0x00,0x00,0x89,0x8C,0x24,0x28,0x0B,0x00,0x00,0xC7,0x84,0x24,0xC8,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x07,0x00,0x00,0x89,0x8C,0x24,0x20,0x0B,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x30,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x0B,0x00,0x00,0x44,0x8B,0x8C,0x24,0x20,0x0B,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x18,0x0B,0x00,0x00,0x8B,0x8C,0x24,0x18,0x0B,0x00,0x00,0x89,0x8C,0x24,0xC0,0x07,0x00,0x00,0x83,0xBC,0x24,0xC0,0x07,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xB8,0x07,0x00,0x00,0x8B,0x94,0x24,0xB8,0x07,0x00,0x00,0x89,0x94,0x24,0x10,0x0B,0x00,0x00,0x8B,0x94,0x24,0x10,0x0B,0x00,0x00,0x89,0x94,0x24,0xB0,0x07,0x00,0x00,0x83,0xBC,0x24,0xB0,0x07,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x84,0x24,0xA8,0x07,0x00,0x00,0x8B,0x84,0x24,0xA8,0x07,0x00,0x00,0x89,0x84,0x24,0x08,0x0B,0x00,0x00,0x8B,0x84,0x24,0x08,0x0B,0x00,0x00,0x89,0x84,0x24,0xA0,0x07,0x00,0x00,0x83,0xBC,0x24,0xA0,0x07,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0x98,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x98,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0x00,0x0B,0x00,0x00,0x44,0x8B,0x84,0x24,0x00,0x0B,0x00,0x00,0x44,0x89,0x84,0x24,0x90,0x07,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x8C,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0x88,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0x84,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0x84,0x07,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x84,0x07,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x84,0x07,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x84,0x07,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x84,0x07,0x00,0x00,0x8B,0x8C,0x24,0x84,0x07,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x88,0x07,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x88,0x07,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x88,0x07,0x00,0x00,0x8B,0x8C,0x24,0x88,0x07,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x8C,0x07,0x00,0x00,0x83,0xBC,0x24,0x90,0x07,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x8C,0x07,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x8C,0x07,0x00,0x00,0x8B,0x8C,0x24,0x8C,0x07,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x70,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x50,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x48,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x50,0x07,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x58,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x07,0x00,0x00,0x48,0x8D,0x8C,0x24,0x70,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0x93,0xF7,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x07,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x48,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x19,0x10,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0xD8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xD8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xD0,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xD8,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xE0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x06,0x00,0x00,0x83,0xBC,0x24,0xF0,0x06,0x00,0x00,0x00,0x0F,0x86,0x42,0x17,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE8,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x10,0x07,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xC7,0x16,0x00,0x00,0x4C,0x8B,0x84,0x24,0x08,0x07,0x00,0x00,0x48,0x8D,0x84,0x24,0xC0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xB8,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB8,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0xC0,0x06,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xC8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x06,0x00,0x00,0x8B,0x8C,0x24,0x20,0x07,0x00,0x00,0x3B,0x8C,0x24,0xB0,0x06,0x00,0x00,0x0F,0x87,0x55,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x06,0x00,0x00,0x48,0x8B,0x94,0x24,0x18,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0x20,0x07,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x96,0x8E,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x62,0x45,0x24,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0xA0,0x06,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x06,0x00,0x00,0x89,0x8C,0x24,0xE8,0x0A,0x00,0x00,0xC7,0x84,0x24,0x98,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x98,0x06,0x00,0x00,0x89,0x8C,0x24,0xE0,0x0A,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x90,0x06,0x00,0x00,0x8B,0x8C,0x24,0x90,0x06,0x00,0x00,0x89,0x8C,0x24,0xD8,0x0A,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xE8,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0xE0,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0xD8,0x0A,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xD0,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x0A,0x00,0x00,0x89,0x8C,0x24,0x88,0x06,0x00,0x00,0x83,0xBC,0x24,0x88,0x06,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x80,0x06,0x00,0x00,0x8B,0x94,0x24,0x80,0x06,0x00,0x00,0x89,0x94,0x24,0xC8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xC8,0x0A,0x00,0x00,0x89,0x94,0x24,0x78,0x06,0x00,0x00,0x83,0xBC,0x24,0x78,0x06,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x70,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x84,0x24,0x70,0x06,0x00,0x00,0x89,0x84,0x24,0xC0,0x0A,0x00,0x00,0x8B,0x84,0x24,0xC0,0x0A,0x00,0x00,0x89,0x84,0x24,0x68,0x06,0x00,0x00,0x83,0xBC,0x24,0x68,0x06,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x60,0x06,0x00,0x00,0x44,0x8B,0x84,0x24,0x60,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0xB8,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0xB8,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0x58,0x06,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x54,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0x50,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0x4C,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0x4C,0x06,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x4C,0x06,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x4C,0x06,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x4C,0x06,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x4C,0x06,0x00,0x00,0x8B,0x8C,0x24,0x4C,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x50,0x06,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x50,0x06,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x50,0x06,0x00,0x00,0x8B,0x8C,0x24,0x50,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x54,0x06,0x00,0x00,0x83,0xBC,0x24,0x58,0x06,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x54,0x06,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x54,0x06,0x00,0x00,0x8B,0x8C,0x24,0x54,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x38,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x18,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x10,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x10,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x18,0x06,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x20,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0x38,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0x74,0xF3,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x05,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x50,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x02,0x0C,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0xA0,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xA0,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x98,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0xA0,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xA8,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x05,0x00,0x00,0x83,0xBC,0x24,0xB8,0x05,0x00,0x00,0x00,0x0F,0x86,0x23,0x13,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB0,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xD8,0x05,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xB4,0x12,0x00,0x00,0x4C,0x8B,0x84,0x24,0xD0,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x88,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x80,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x80,0x05,0x00,0x00,0x4C,0x8D,0x84,0x24,0x88,0x05,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x90,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x05,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x05,0x00,0x00,0x3B,0x8C,0x24,0x78,0x05,0x00,0x00,0x0F,0x87,0x42,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x05,0x00,0x00,0x48,0x8B,0x94,0x24,0xE0,0x05,0x00,0x00,0x44,0x8B,0x84,0x24,0xE8,0x05,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x77,0x8A,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x43,0x41,0x24,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x68,0x05,0x00,0x00,0x8B,0x8C,0x24,0x68,0x05,0x00,0x00,0x89,0x8C,0x24,0xA0,0x0A,0x00,0x00,0xC7,0x84,0x24,0x60,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x60,0x05,0x00,0x00,0x89,0x8C,0x24,0x98,0x0A,0x00,0x00,0xC7,0x84,0x24,0x58,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x58,0x05,0x00,0x00,0x89,0x8C,0x24,0x90,0x0A,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xA0,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x98,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0x90,0x0A,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x88,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x88,0x0A,0x00,0x00,0x89,0x8C,0x24,0x50,0x05,0x00,0x00,0x83,0xBC,0x24,0x50,0x05,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x48,0x05,0x00,0x00,0x8B,0x94,0x24,0x48,0x05,0x00,0x00,0x89,0x94,0x24,0x80,0x0A,0x00,0x00,0x8B,0x94,0x24,0x80,0x0A,0x00,0x00,0x89,0x94,0x24,0x40,0x05,0x00,0x00,0x83,0xBC,0x24,0x40,0x05,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x38,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x84,0x24,0x38,0x05,0x00,0x00,0x89,0x84,0x24,0x78,0x0A,0x00,0x00,0x8B,0x84,0x24,0x78,0x0A,0x00,0x00,0x89,0x84,0x24,0x30,0x05,0x00,0x00,0x83,0xBC,0x24,0x30,0x05,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0x28,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x70,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x70,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0x20,0x05,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x1C,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x18,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x14,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x14,0x05,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x14,0x05,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x14,0x05,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x14,0x05,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x14,0x05,0x00,0x00,0x8B,0x8C,0x24,0x14,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x18,0x05,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x18,0x05,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x18,0x05,0x00,0x00,0x8B,0x8C,0x24,0x18,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x1C,0x05,0x00,0x00,0x83,0xBC,0x24,0x20,0x05,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x1C,0x05,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x1C,0x05,0x00,0x00,0x8B,0x8C,0x24,0x1C,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x00,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xE0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0xD8,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0xE0,0x04,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xE8,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0x00,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0x53,0xEF,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x04,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x58,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xE9,0x07,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0x68,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x68,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x60,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x68,0x04,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x70,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x04,0x00,0x00,0x83,0xBC,0x24,0x80,0x04,0x00,0x00,0x00,0x0F,0x86,0x02,0x0F,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xA0,0x04,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x9F,0x0E,0x00,0x00,0x4C,0x8B,0x84,0x24,0x98,0x04,0x00,0x00,0x48,0x8D,0x84,0x24,0x50,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x48,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x04,0x00,0x00,0x4C,0x8D,0x84,0x24,0x50,0x04,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x58,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x04,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x04,0x00,0x00,0x3B,0x8C,0x24,0x40,0x04,0x00,0x00,0x0F,0x87,0x2D,0x0E,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0xA8,0x04,0x00,0x00,0x44,0x8B,0x84,0x24,0xB0,0x04,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x56,0x86,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x22,0x3D,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x84,0x24,0x30,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x30,0x04,0x00,0x00,0x89,0x8C,0x24,0x58,0x0A,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x28,0x04,0x00,0x00,0x8B,0x8C,0x24,0x28,0x04,0x00,0x00,0x89,0x8C,0x24,0x50,0x0A,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x20,0x04,0x00,0x00,0x8B,0x8C,0x24,0x20,0x04,0x00,0x00,0x89,0x8C,0x24,0x48,0x0A,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x58,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x50,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0x48,0x0A,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x40,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x40,0x0A,0x00,0x00,0x89,0x8C,0x24,0x18,0x04,0x00,0x00,0x83,0xBC,0x24,0x18,0x04,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0x10,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x10,0x04,0x00,0x00,0x89,0x94,0x24,0x38,0x0A,0x00,0x00,0x8B,0x94,0x24,0x38,0x0A,0x00,0x00,0x89,0x94,0x24,0x08,0x04,0x00,0x00,0x83,0xBC,0x24,0x08,0x04,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x84,0x24,0x00,0x04,0x00,0x00,0x8B,0x84,0x24,0x00,0x04,0x00,0x00,0x89,0x84,0x24,0x30,0x0A,0x00,0x00,0x8B,0x84,0x24,0x30,0x0A,0x00,0x00,0x89,0x84,0x24,0xF8,0x03,0x00,0x00,0x83,0xBC,0x24,0xF8,0x03,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xF0,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0xF0,0x03,0x00,0x00,0x44,0x89,0x84,0x24,0x28,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0xE8,0x03,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xE4,0x03,0x00,0x00,0x44,0x89,0x84,0x24,0xE0,0x03,0x00,0x00,0x44,0x89,0x84,0x24,0xDC,0x03,0x00,0x00,0x44,0x89,0x84,0x24,0xDC,0x03,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xDC,0x03,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xDC,0x03,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xDC,0x03,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xDC,0x03,0x00,0x00,0x8B,0x8C,0x24,0xDC,0x03,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xE0,0x03,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xE0,0x03,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xE0,0x03,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x03,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xE4,0x03,0x00,0x00,0x83,0xBC,0x24,0xE8,0x03,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xE4,0x03,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0xE4,0x03,0x00,0x00,0x8B,0x8C,0x24,0xE4,0x03,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xC8,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xA8,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0xA0,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x03,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xB0,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC8,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0x34,0xEB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x03,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x60,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xD2,0x03,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0x30,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x30,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x28,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x30,0x03,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x38,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x03,0x00,0x00,0x83,0xBC,0x24,0x48,0x03,0x00,0x00,0x00,0x0F,0x86,0xE3,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x40,0x03,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x68,0x03,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x8C,0x0A,0x00,0x00,0x4C,0x8B,0x84,0x24,0x60,0x03,0x00,0x00,0x48,0x8D,0x84,0x24,0x18,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x10,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x10,0x03,0x00,0x00,0x4C,0x8D,0x84,0x24,0x18,0x03,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x20,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x03,0x00,0x00,0x8B,0x8C,0x24,0x78,0x03,0x00,0x00,0x3B,0x8C,0x24,0x08,0x03,0x00,0x00,0x0F,0x87,0x1A,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x70,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0x78,0x03,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x37,0x82,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x03,0x39,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x84,0x24,0xF8,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x02,0x00,0x00,0x89,0x8C,0x24,0x10,0x0A,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xF0,0x02,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x02,0x00,0x00,0x89,0x8C,0x24,0x08,0x0A,0x00,0x00,0xC7,0x84,0x24,0xE8,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x02,0x00,0x00,0x89,0x8C,0x24,0x00,0x0A,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x10,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x08,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0x00,0x0A,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xF8,0x09,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x09,0x00,0x00,0x89,0x8C,0x24,0xE0,0x02,0x00,0x00,0x83,0xBC,0x24,0xE0,0x02,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0xD8,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xD8,0x02,0x00,0x00,0x89,0x94,0x24,0xF0,0x09,0x00,0x00,0x8B,0x94,0x24,0xF0,0x09,0x00,0x00,0x89,0x94,0x24,0xD0,0x02,0x00,0x00,0x83,0xBC,0x24,0xD0,0x02,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x84,0x24,0xC8,0x02,0x00,0x00,0x8B,0x84,0x24,0xC8,0x02,0x00,0x00,0x89,0x84,0x24,0xE8,0x09,0x00,0x00,0x8B,0x84,0x24,0xE8,0x09,0x00,0x00,0x89,0x84,0x24,0xC0,0x02,0x00,0x00,0x83,0xBC,0x24,0xC0,0x02,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0xB8,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xB8,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xE0,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xE0,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0xB0,0x02,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xAC,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xA8,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xA4,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xA4,0x02,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xA4,0x02,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xA4,0x02,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xA4,0x02,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xA4,0x02,0x00,0x00,0x8B,0x8C,0x24,0xA4,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xA8,0x02,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xA8,0x02,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xA8,0x02,0x00,0x00,0x8B,0x8C,0x24,0xA8,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xAC,0x02,0x00,0x00,0x83,0xBC,0x24,0xB0,0x02,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xAC,0x02,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0xAC,0x02,0x00,0x00,0x8B,0x8C,0x24,0xAC,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x90,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x70,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x68,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x68,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0x70,0x02,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x78,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x02,0x00,0x00,0x48,0x8D,0x8C,0x24,0x90,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0x13,0xE7,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x02,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x68,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xB9,0xFF,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0xF8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xF8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xF0,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xF8,0x01,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x00,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x02,0x00,0x00,0x83,0xBC,0x24,0x10,0x02,0x00,0x00,0x00,0x0F,0x86,0xC2,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x08,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x30,0x02,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x77,0x06,0x00,0x00,0x4C,0x8B,0x84,0x24,0x28,0x02,0x00,0x00,0x48,0x8D,0x84,0x24,0xE0,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xD8,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x01,0x00,0x00,0x4C,0x8D,0x84,0x24,0xE0,0x01,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xE8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x01,0x00,0x00,0x8B,0x8C,0x24,0x40,0x02,0x00,0x00,0x3B,0x8C,0x24,0xD0,0x01,0x00,0x00,0x0F,0x87,0x05,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x38,0x02,0x00,0x00,0x44,0x8B,0x84,0x24,0x40,0x02,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x16,0x7E,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xE2,0x34,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x84,0x24,0xC0,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x01,0x00,0x00,0x89,0x8C,0x24,0xC8,0x09,0x00,0x00,0xC7,0x84,0x24,0xB8,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x01,0x00,0x00,0x89,0x8C,0x24,0xC0,0x09,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xB0,0x01,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x01,0x00,0x00,0x89,0x8C,0x24,0xB8,0x09,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xC8,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xC0,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0xB8,0x09,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xB0,0x09,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x09,0x00,0x00,0x89,0x8C,0x24,0xA8,0x01,0x00,0x00,0x83,0xBC,0x24,0xA8,0x01,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xA0,0x01,0x00,0x00,0x8B,0x94,0x24,0xA0,0x01,0x00,0x00,0x89,0x94,0x24,0xA8,0x09,0x00,0x00,0x8B,0x94,0x24,0xA8,0x09,0x00,0x00,0x89,0x94,0x24,0x98,0x01,0x00,0x00,0x83,0xBC,0x24,0x98,0x01,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x90,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x84,0x24,0x90,0x01,0x00,0x00,0x89,0x84,0x24,0xA0,0x09,0x00,0x00,0x8B,0x84,0x24,0xA0,0x09,0x00,0x00,0x89,0x84,0x24,0x88,0x01,0x00,0x00,0x83,0xBC,0x24,0x88,0x01,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0x80,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x80,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x98,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x98,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0x78,0x01,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x74,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x70,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x6C,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x6C,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x6C,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x6C,0x01,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x6C,0x01,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x6C,0x01,0x00,0x00,0x8B,0x8C,0x24,0x6C,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x70,0x01,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x70,0x01,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x70,0x01,0x00,0x00,0x8B,0x8C,0x24,0x70,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x74,0x01,0x00,0x00,0x83,0xBC,0x24,0x78,0x01,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x74,0x01,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x74,0x01,0x00,0x00,0x8B,0x8C,0x24,0x74,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x58,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x38,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x30,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x30,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x01,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x40,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x58,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x54,0x24,0x30,0xE8,0xF2,0xE2,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x70,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xA0,0xFB,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0xC0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xB8,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB8,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xC0,0x00,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xC8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0x83,0xBC,0x24,0xD8,0x00,0x00,0x00,0x00,0x0F,0x86,0xA1,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x00,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xF8,0x00,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x62,0x02,0x00,0x00,0x4C,0x8B,0x84,0x24,0xF0,0x00,0x00,0x00,0x48,0x8D,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xA0,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x00,0x00,0x00,0x4C,0x8D,0x84,0x24,0xA8,0x00,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x00,0x00,0x00,0x8B,0x8C,0x24,0x08,0x01,0x00,0x00,0x3B,0x8C,0x24,0x98,0x00,0x00,0x00,0x0F,0x87,0xF0,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0x00,0x01,0x00,0x00,0x44,0x8B,0x84,0x24,0x08,0x01,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xF5,0x79,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xC1,0x30,0x24,0x5F,0x48,0x8B,0xF8,0xC7,0x84,0x24,0x88,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x88,0x00,0x00,0x00,0x89,0x8C,0x24,0x80,0x09,0x00,0x00,0xC7,0x84,0x24,0x80,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x80,0x00,0x00,0x00,0x89,0x8C,0x24,0x78,0x09,0x00,0x00,0xC7,0x44,0x24,0x78,0x01,0x00,0x00,0x00,0x8B,0x4C,0x24,0x78,0x89,0x8C,0x24,0x70,0x09,0x00,0x00,0x48,0x8B,0x4E,0x08,0x8B,0x94,0x24,0x80,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x78,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x70,0x09,0x00,0x00,0xFF,0x56,0x18,0x89,0x84,0x24,0x68,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x68,0x09,0x00,0x00,0x44,0x89,0x4C,0x24,0x70,0x83,0x7C,0x24,0x70,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x44,0x24,0x68,0x01,0x00,0x00,0x00,0x44,0x8B,0x4C,0x24,0x68,0x44,0x89,0x8C,0x24,0x60,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x60,0x09,0x00,0x00,0x44,0x89,0x4C,0x24,0x60,0x83,0x7C,0x24,0x60,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x44,0x24,0x58,0x01,0x00,0x00,0x00,0x44,0x8B,0x4C,0x24,0x58,0x44,0x89,0x8C,0x24,0x58,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x58,0x09,0x00,0x00,0x44,0x89,0x4C,0x24,0x50,0x83,0x7C,0x24,0x50,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0xC7,0x44,0x24,0x48,0x01,0x00,0x00,0x00,0x44,0x8B,0x4C,0x24,0x48,0x44,0x89,0x8C,0x24,0x50,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x50,0x09,0x00,0x00,0x44,0x89,0x4C,0x24,0x40,0x83,0x7C,0x24,0x40,0x01,0x41,0x0F,0x94,0xC1,0x45,0x0F,0xB6,0xC9,0xE8,0xFC,0x0A,0xE0,0xFF,0x88,0x47,0x10,0x48,0x8D,0x8C,0x24,0x40,0x09,0x00,0x00,0x48,0x8B,0xD7,0xE8,0xB1,0xCE,0xFF,0xFF,0x48,0x8D,0x8C,0x24,0x80,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x4C,0x8D,0x44,0x24,0x20,0xBA,0x07,0x00,0x00,0x00,0xE8,0x63,0xDE,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0x80,0x0B,0x00,0x00,0xE8,0x13,0x20,0x24,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0x90,0x0B,0x00,0x00,0x5B,0x5E,0x5F,0xC3,0xE8,0x3E,0xE8,0x71,0xFF,0xCC,0xE8,0x40,0xE8,0x71,0xFF,0xCC,0xE8,0x32,0xE8,0x71,0xFF,0xCC,0xE8,0x34,0xE8,0x71,0xFF,0xCC,0xE8,0x26,0xE8,0x71,0xFF,0xCC,0xE8,0x28,0xE8,0x71,0xFF,0xCC,0xE8,0x1A,0xE8,0x71,0xFF,0xCC,0xE8,0x1C,0xE8,0x71,0xFF,0xCC,0xE8,0x0E,0xE8,0x71,0xFF,0xCC,0xE8,0x10,0xE8,0x71,0xFF,0xCC,0xE8,0x02,0xE8,0x71,0xFF,0xCC,0xE8,0x04,0xE8,0x71,0xFF,0xCC,0xE8,0xF6,0xE7,0x71,0xFF,0xCC,0xE8,0xF8,0xE7,0x71,0xFF,0xCC,0xE8,0x1A,0xD8,0x36,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, UnaryLogicOpKind[] kinds)
; location: [7FFDDBA217E0h, 7FFDDBA21851h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9EF3F8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ef3f8h:imm64]         encoding(10 bytes) = 48 b9 f8 f3 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242CD0h:jmp64]                encoding(5 bytes) = e8 b4 2c 24 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241E10h:jmp64]                encoding(5 bytes) = e8 e5 1d 24 5f
002bh mov rcx,7FFDDBAA2990h         ; MOV(Mov_r64_imm64) [RCX,7ffddbaa2990h:imm64]         encoding(10 bytes) = 48 b9 90 29 aa db fd 7f 00 00
0035h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242CD0h:jmp64]                encoding(5 bytes) = e8 96 2c 24 5f
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0041h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0044h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241E10h:jmp64]                encoding(5 bytes) = e8 c7 1d 24 5f
0049h mov rcx,7FFDDB830A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830a20h:imm64]         encoding(10 bytes) = 48 b9 20 0a 83 db fd 7f 00 00
0053h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0057h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
005ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0060h mov rax,7FFDDBA1E530h         ; MOV(Mov_r64_imm64) [RAX,7ffddba1e530h:imm64]         encoding(10 bytes) = 48 b8 30 e5 a1 db fd 7f 00 00
006ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0070h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0071h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> EmitBytes => new byte[116]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xF8,0xF3,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x2C,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xE5,0x1D,0x24,0x5F,0x48,0xB9,0x90,0x29,0xAA,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0x2C,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xC7,0x1D,0x24,0x5F,0x48,0xB9,0x20,0x0A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0x45,0x33,0xC0,0x48,0xB8,0x30,0xE5,0xA1,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, BinaryLogicOpKind[] kinds)
; location: [7FFDDBA21870h, 7FFDDBA218E1h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9EF4D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ef4d0h:imm64]         encoding(10 bytes) = 48 b9 d0 f4 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242C40h:jmp64]                encoding(5 bytes) = e8 24 2c 24 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241D80h:jmp64]                encoding(5 bytes) = e8 55 1d 24 5f
002bh mov rcx,7FFDDBAA2B70h         ; MOV(Mov_r64_imm64) [RCX,7ffddbaa2b70h:imm64]         encoding(10 bytes) = 48 b9 70 2b aa db fd 7f 00 00
0035h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242C40h:jmp64]                encoding(5 bytes) = e8 06 2c 24 5f
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0041h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0044h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241D80h:jmp64]                encoding(5 bytes) = e8 37 1d 24 5f
0049h mov rcx,7FFDDB830A38h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830a38h:imm64]         encoding(10 bytes) = 48 b9 38 0a 83 db fd 7f 00 00
0053h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0057h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
005ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0060h mov rax,7FFDDBA1E568h         ; MOV(Mov_r64_imm64) [RAX,7ffddba1e568h:imm64]         encoding(10 bytes) = 48 b8 68 e5 a1 db fd 7f 00 00
006ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0070h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0071h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> EmitBytes => new byte[116]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xD0,0xF4,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0x2C,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x55,0x1D,0x24,0x5F,0x48,0xB9,0x70,0x2B,0xAA,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x06,0x2C,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x37,0x1D,0x24,0x5F,0x48,0xB9,0x38,0x0A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0x45,0x33,0xC0,0x48,0xB8,0x68,0xE5,0xA1,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, TernaryOpKind[] kinds)
; location: [7FFDDBA21900h, 7FFDDBA21971h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ah mov rdi,rdx                   ; MOV(Mov_r64_rm64) [RDI,RDX]                          encoding(3 bytes) = 48 8b fa
000dh mov rcx,7FFDDB9EF5A8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9ef5a8h:imm64]         encoding(10 bytes) = 48 b9 a8 f5 9e db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242BB0h:jmp64]                encoding(5 bytes) = e8 94 2b 24 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241CF0h:jmp64]                encoding(5 bytes) = e8 c5 1c 24 5f
002bh mov rcx,7FFDDBAA2D50h         ; MOV(Mov_r64_imm64) [RCX,7ffddbaa2d50h:imm64]         encoding(10 bytes) = 48 b9 50 2d aa db fd 7f 00 00
0035h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242BB0h:jmp64]                encoding(5 bytes) = e8 76 2b 24 5f
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0041h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0044h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241CF0h:jmp64]                encoding(5 bytes) = e8 a7 1c 24 5f
0049h mov rcx,7FFDDB830A50h         ; MOV(Mov_r64_imm64) [RCX,7ffddb830a50h:imm64]         encoding(10 bytes) = 48 b9 50 0a 83 db fd 7f 00 00
0053h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0057h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
005ah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
005dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0060h mov rax,7FFDDBA1E5A0h         ; MOV(Mov_r64_imm64) [RAX,7ffddba1e5a0h:imm64]         encoding(10 bytes) = 48 b8 a0 e5 a1 db fd 7f 00 00
006ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0070h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0071h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> EmitBytes => new byte[116]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF1,0x48,0x8B,0xFA,0x48,0xB9,0xA8,0xF5,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x2B,0x24,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC5,0x1C,0x24,0x5F,0x48,0xB9,0x50,0x2D,0xAA,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x76,0x2B,0x24,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xA7,0x1C,0x24,0x5F,0x48,0xB9,0x50,0x0A,0x83,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0x45,0x33,0xC0,0x48,0xB8,0xA0,0xE5,0xA1,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void Emit(TextWriter dst, OpArityKind:uint arity)
; location: [7FFDDBA21990h, 7FFDDBA21A75h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h lea eax,[rdx-1]               ; LEA(Lea_r32_m) [EAX,mem(Unknown,RDX:br,DS:sr)]       encoding(3 bytes) = 8d 42 ff
000bh cmp eax,3                     ; CMP(Cmp_rm32_imm8) [EAX,3h:imm32]                    encoding(3 bytes) = 83 f8 03
000eh ja short 0069h                ; JA(Ja_rel8_64) [69h:jmp64]                           encoding(2 bytes) = 77 59
0010h mov eax,eax                   ; MOV(Mov_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 8b c0
0012h lea r8,[7FFDDBA21A78h]        ; LEA(Lea_r64_m) [R8,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 05 cf 00 00 00
0019h mov r8d,[r8+rax*4]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 04 80
001dh lea r9,[7FFDDBA21998h]        ; LEA(Lea_r64_m) [R9,mem(Unknown,RIP:br,DS:sr)]        encoding(7 bytes) = 4c 8d 0d e4 ff ff ff
0024h add r8,r9                     ; ADD(Add_r64_rm64) [R8,R9]                            encoding(3 bytes) = 4d 03 c1
0027h jmp r8                        ; JMP(Jmp_rm64) [R8]                                   encoding(3 bytes) = 41 ff e0
002ah mov rax,7FFDDB82F650h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f650h:imm64]         encoding(10 bytes) = 48 b8 50 f6 82 db fd 7f 00 00
0034h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0038h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0039h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
003ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
003bh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
003ch jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
003fh mov rax,7FFDDB82F658h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f658h:imm64]         encoding(10 bytes) = 48 b8 58 f6 82 db fd 7f 00 00
0049h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
004dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
004eh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
004fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0050h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0051h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0054h mov rax,7FFDDB82F660h         ; MOV(Mov_r64_imm64) [RAX,7ffddb82f660h:imm64]         encoding(10 bytes) = 48 b8 60 f6 82 db fd 7f 00 00
005eh add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0062h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0063h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0064h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0065h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0066h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
0069h mov esi,69h                   ; MOV(Mov_r32_imm32) [ESI,69h:imm32]                   encoding(5 bytes) = be 69 00 00 00
006eh mov edi,1                     ; MOV(Mov_r32_imm32) [EDI,1h:imm32]                    encoding(5 bytes) = bf 01 00 00 00
0073h mov ebx,edx                   ; MOV(Mov_r32_rm32) [EBX,EDX]                          encoding(2 bytes) = 8b da
0075h mov ecx,492h                  ; MOV(Mov_r32_imm32) [ECX,492h:imm32]                  encoding(5 bytes) = b9 92 04 00 00
007ah mov rdx,7FFDDB284D08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb284d08h:imm64]         encoding(10 bytes) = 48 ba 08 4d 28 db fd 7f 00 00
0084h call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F36DD50h:jmp64]                encoding(5 bytes) = e8 c7 dc 36 5f
0089h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
008ch mov ecx,492h                  ; MOV(Mov_r32_imm32) [ECX,492h:imm32]                  encoding(5 bytes) = b9 92 04 00 00
0091h mov rdx,7FFDDB284D08h         ; MOV(Mov_r64_imm64) [RDX,7ffddb284d08h:imm64]         encoding(10 bytes) = 48 ba 08 4d 28 db fd 7f 00 00
009bh call 7FFE3AD8F6E0h            ; CALL(Call_rel32_64) [5F36DD50h:jmp64]                encoding(5 bytes) = e8 b0 dc 36 5f
00a0h mov r8,rax                    ; MOV(Mov_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 8b c0
00a3h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
00a8h mov [rdx],dil                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),DIL]           encoding(3 bytes) = 40 88 3a
00abh mov [rdx+4],esi               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ESI]        encoding(3 bytes) = 89 72 04
00aeh mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
00b1h mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
00b3h mov r9,[rsp+20h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 20
00b8h call 7FFDDBA1E5E0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCC50h:jmp64]        encoding(5 bytes) = e8 93 cb ff ff
00bdh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c0h mov rcx,7FFDDB518A00h         ; MOV(Mov_r64_imm64) [RCX,7ffddb518a00h:imm64]         encoding(10 bytes) = 48 b9 00 8a 51 db fd 7f 00 00
00cah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242B20h:jmp64]                encoding(5 bytes) = e8 51 2a 24 5f
00cfh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00d2h mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00d5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00d8h call 7FFDDB405078h            ; CALL(Call_rel32_64) [FFFFFFFFFF9E36E8h:jmp64]        encoding(5 bytes) = e8 0b 36 9e ff
00ddh mov rcx,rdi                   ; MOV(Mov_r64_rm64) [RCX,RDI]                          encoding(3 bytes) = 48 8b cf
00e0h call 7FFE3AC1A4F0h            ; CALL(Call_rel32_64) [5F1F8B60h:jmp64]                encoding(5 bytes) = e8 7b 8a 1f 5f
00e5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitBytes => new byte[230]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0x8D,0x42,0xFF,0x83,0xF8,0x03,0x77,0x59,0x8B,0xC0,0x4C,0x8D,0x05,0xCF,0x00,0x00,0x00,0x45,0x8B,0x04,0x80,0x4C,0x8D,0x0D,0xE4,0xFF,0xFF,0xFF,0x4D,0x03,0xC1,0x41,0xFF,0xE0,0x48,0xB8,0x50,0xF6,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0xB8,0x58,0xF6,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0x48,0xB8,0x60,0xF6,0x82,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0x48,0xFF,0xE0,0xBE,0x69,0x00,0x00,0x00,0xBF,0x01,0x00,0x00,0x00,0x8B,0xDA,0xB9,0x92,0x04,0x00,0x00,0x48,0xBA,0x08,0x4D,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC7,0xDC,0x36,0x5F,0x48,0x8B,0xE8,0xB9,0x92,0x04,0x00,0x00,0x48,0xBA,0x08,0x4D,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB0,0xDC,0x36,0x5F,0x4C,0x8B,0xC0,0x48,0x8D,0x54,0x24,0x20,0x40,0x88,0x3A,0x89,0x72,0x04,0x48,0x8B,0xD5,0x8B,0xCB,0x4C,0x8B,0x4C,0x24,0x20,0xE8,0x93,0xCB,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x00,0x8A,0x51,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x51,0x2A,0x24,0x5F,0x48,0x8B,0xF8,0x48,0x8B,0xCF,0x48,0x8B,0xD6,0xE8,0x0B,0x36,0x9E,0xFF,0x48,0x8B,0xCF,0xE8,0x7B,0x8A,0x1F,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N2,N2,byte> Emit(UnaryLogicOpKind:uint kind, TextWriter dst)
; location: [7FFDDBA21AB0h, 7FFDDBA21B18h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000ch mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0011h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0016h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
001bh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0020h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0023h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0025h mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0028h lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
002dh mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
002fh call 7FFDDBA1E620h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCB70h:jmp64]        encoding(5 bytes) = e8 3c cb ff ff
0034h vmovdqu xmm0,xmmword ptr [rsp+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 30
003ah vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0040h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0045h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0047h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
004ah call 7FFDDBA1E600h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCB50h:jmp64]        encoding(5 bytes) = e8 01 cb ff ff
004fh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0052h lea rsi,[rsp+30h]             ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 74 24 30
0057h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F241BE0h:jmp64]                encoding(5 bytes) = e8 84 1b 24 5f
005ch movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
005eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0061h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0065h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0066h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0067h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0068h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> EmitBytes => new byte[105]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x33,0xC0,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x8B,0xD9,0x8B,0xF2,0x49,0x8B,0xF8,0x48,0x8D,0x4C,0x24,0x30,0x8B,0xD6,0xE8,0x3C,0xCB,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x30,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x8B,0xD6,0x4C,0x8B,0xC7,0xE8,0x01,0xCB,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0x74,0x24,0x30,0xE8,0x84,0x1B,0x24,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N4,N3,byte> Emit(BinaryLogicOpKind:uint kind, TextWriter dst)
; location: [7FFDDBA21F40h, 7FFDDBA21FA8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000ch mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0011h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0016h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
001bh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0020h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0023h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0025h mov rdi,r8                    ; MOV(Mov_r64_rm64) [RDI,R8]                           encoding(3 bytes) = 49 8b f8
0028h lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
002dh mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
002fh call 7FFDDBA1ECF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFCDB0h:jmp64]        encoding(5 bytes) = e8 7c cd ff ff
0034h vmovdqu xmm0,xmmword ptr [rsp+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 30
003ah vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0040h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0045h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0047h mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
004ah call 7FFDDBA21B38h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFBF8h:jmp64]        encoding(5 bytes) = e8 a9 fb ff ff
004fh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0052h lea rsi,[rsp+30h]             ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 74 24 30
0057h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F241750h:jmp64]                encoding(5 bytes) = e8 f4 16 24 5f
005ch movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
005eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0061h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0065h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0066h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0067h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0068h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> EmitBytes => new byte[105]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x33,0xC0,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x8B,0xD9,0x8B,0xF2,0x49,0x8B,0xF8,0x48,0x8D,0x4C,0x24,0x30,0x8B,0xD6,0xE8,0x7C,0xCD,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x30,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x8B,0xD6,0x4C,0x8B,0xC7,0xE8,0xA9,0xFB,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0x74,0x24,0x30,0xE8,0xF4,0x16,0x24,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N8,N4,byte> Emit(TernaryOpKind:byte kind, TextWriter dst)
; location: [7FFDDBA21FD0h, 7FFDDBA2203Ah]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,40h                   ; SUB(Sub_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 ec 40
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000ch mov [rsp+30h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 30
0011h mov [rsp+38h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 38
0016h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
001bh mov [rsp+28h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 28
0020h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0023h mov rsi,r8                    ; MOV(Mov_r64_rm64) [RSI,R8]                           encoding(3 bytes) = 49 8b f0
0026h movzx edi,dl                  ; MOVZX(Movzx_r32_rm8) [EDI,DL]                        encoding(4 bytes) = 40 0f b6 fa
002ah mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
002ch lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
0031h call 7FFDDBA1F770h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD7A0h:jmp64]        encoding(5 bytes) = e8 6a d7 ff ff
0036h vmovdqu xmm0,xmmword ptr [rsp+30h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 30
003ch vmovdqu xmmword ptr [rsp+20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 20
0042h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
0047h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0049h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
004ch call 7FFDDBA21B48h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFB78h:jmp64]        encoding(5 bytes) = e8 27 fb ff ff
0051h mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0054h lea rsi,[rsp+30h]             ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 74 24 30
0059h call 7FFE3AC63690h            ; CALL(Call_rel32_64) [5F2416C0h:jmp64]                encoding(5 bytes) = e8 62 16 24 5f
005eh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0060h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0063h add rsp,40h                   ; ADD(Add_rm64_imm8) [RSP,40h:imm64]                   encoding(4 bytes) = 48 83 c4 40
0067h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0068h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0069h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> EmitBytes => new byte[107]{0x57,0x56,0x53,0x48,0x83,0xEC,0x40,0xC5,0xF8,0x77,0x33,0xC0,0x48,0x89,0x44,0x24,0x30,0x48,0x89,0x44,0x24,0x38,0x48,0x89,0x44,0x24,0x20,0x48,0x89,0x44,0x24,0x28,0x48,0x8B,0xD9,0x49,0x8B,0xF0,0x40,0x0F,0xB6,0xFA,0x8B,0xD7,0x48,0x8D,0x4C,0x24,0x30,0xE8,0x6A,0xD7,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x30,0xC5,0xFA,0x7F,0x44,0x24,0x20,0x48,0x8D,0x4C,0x24,0x20,0x8B,0xD7,0x4C,0x8B,0xC6,0xE8,0x27,0xFB,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0x74,0x24,0x30,0xE8,0x62,0x16,0x24,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x40,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void EmitUnaryOps(TextWriter dst)
; location: [7FFDDBA22460h, 7FFDDBA22C5Fh]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,1A8h                  ; SUB(Sub_rm64_imm32) [RSP,1a8h:imm64]                 encoding(7 bytes) = 48 81 ec a8 01 00 00
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0019h lea rdi,[rsp+50h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 50
001eh mov ecx,56h                   ; MOV(Mov_r32_imm32) [ECX,56h:imm32]                   encoding(5 bytes) = b9 56 00 00 00
0023h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0025h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0027h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
002ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
002dh call 7FFDDBA17FD0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5B70h:jmp64]        encoding(5 bytes) = e8 3e 5b ff ff
0032h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0035h call 7FFDDBA21B58h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF6F8h:jmp64]        encoding(5 bytes) = e8 be f6 ff ff
003ah mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
003dh xor ebx,ebx                   ; XOR(Xor_r32_rm32) [EBX,EBX]                          encoding(2 bytes) = 33 db
003fh cmp dword ptr [rdi+8],0       ; CMP(Cmp_rm32_imm8) [mem(32u,RDI:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 7f 08 00
0043h jle near ptr 07c8h            ; JLE(Jle_rel32_64) [7C8h:jmp64]                       encoding(6 bytes) = 0f 8e 7f 07 00 00
0049h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0053h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0058h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F20CF80h:jmp64]                encoding(5 bytes) = e8 23 cf 20 5f
005dh movzx edx,bl                  ; MOVZX(Movzx_r32_rm8) [EDX,BL]                        encoding(3 bytes) = 0f b6 d3
0060h and edx,0Fh                   ; AND(And_rm32_imm8) [EDX,fh:imm32]                    encoding(3 bytes) = 83 e2 0f
0063h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0066h mov [rsp+1A0h],dl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 a0 01 00 00
006dh lea rdx,[rsp+160h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 01 00 00
0075h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0079h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
007dh mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
0087h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
008ah mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
008dh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0090h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
009ah call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F242180h:jmp64]                encoding(5 bytes) = e8 e1 20 24 5f
009fh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
00a3h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
00a6h lea rax,[rsp+160h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 60 01 00 00
00aeh mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
00b1h mov [rax+8],edx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 08
00b4h vmovdqu xmm0,xmmword ptr [rsp+160h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 01 00 00
00bdh vmovdqu xmmword ptr [rsp+190h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 01 00 00
00c6h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
00d0h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00d5h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F242180h:jmp64]                encoding(5 bytes) = e8 a6 20 24 5f
00dah mov ecx,[rsp+1A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 01 00 00
00e1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00e4h test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
00e7h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
00eah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00edh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00efh mov [rsp+158h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 01 00 00
00f6h lea rdx,[rsp+158h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 01 00 00
00feh test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0100h jne short 0106h               ; JNE(Jne_rel8_64) [106h:jmp64]                        encoding(2 bytes) = 75 04
0102h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0104h jmp short 010bh               ; JMP(Jmp_rel8_64) [10Bh:jmp64]                        encoding(2 bytes) = eb 05
0106h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
010bh mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
010dh mov ecx,[rsp+158h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 01 00 00
0114h cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
0117h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
011ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
011dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
011fh mov [rsp+154h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 54 01 00 00
0126h mov [rsp+154h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 54 01 00 00
012dh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
012fh je short 0143h                ; JE(Je_rel8_64) [143h:jmp64]                          encoding(2 bytes) = 74 12
0131h movzx ecx,byte ptr [rsp+154h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 54 01 00 00
0139h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
013ch mov [rsp+154h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 54 01 00 00
0143h mov ecx,[rsp+154h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 54 01 00 00
014ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
014dh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0150h lea rcx,[rsp+140h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 01 00 00
0158h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
015ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0160h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0164h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0169h lea rdx,[rsp+140h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 01 00 00
0171h lea r8,[rsp+60h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 60
0176h mov [r8],rax                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RAX]         encoding(3 bytes) = 49 89 00
0179h mov [r8+8],ecx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),ECX]         encoding(4 bytes) = 41 89 48 08
017dh mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0180h lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
0185h call 7FFDDBA1D728h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB2C8h:jmp64]        encoding(5 bytes) = e8 3e b1 ff ff
018ah vmovdqu xmm0,xmmword ptr [rsp+140h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 01 00 00
0193h vmovdqu xmmword ptr [rsp+180h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 01 00 00
019ch vmovdqu xmm0,xmmword ptr [rsp+180h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 01 00 00
01a5h vmovdqu xmmword ptr [rsp+130h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 01 00 00
01aeh vmovdqu xmm0,xmmword ptr [rsp+130h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 01 00 00
01b7h vmovdqu xmmword ptr [rsp+120h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 01 00 00
01c0h lea rcx,[rsp+120h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 01 00 00
01c8h mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
01cbh mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
01cfh lea rcx,[rsp+190h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 01 00 00
01d7h mov r15,[rcx]                 ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 39
01dah mov r12d,[rcx+8]              ; MOV(Mov_r32_rm32) [R12D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 61 08
01deh mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
01e8h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
01ebh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
01efh mov r11,7FFDDB000F78h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f78h:imm64]         encoding(10 bytes) = 49 bb 78 0f 00 db fd 7f 00 00
01f9h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
01fbh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
01fdh call qword ptr [7FFDDB000F78h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 15 e9 5d ff
0203h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0206h jne short 020eh               ; JNE(Jne_rel8_64) [20Eh:jmp64]                        encoding(2 bytes) = 75 06
0208h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
020ah xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
020ch jmp short 0215h               ; JMP(Jmp_rel8_64) [215h:jmp64]                        encoding(2 bytes) = eb 07
020eh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0212h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0215h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0218h jbe near ptr 07fah            ; JBE(Jbe_rel32_64) [7FAh:jmp64]                       encoding(6 bytes) = 0f 86 dc 05 00 00
021eh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0221h mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
022bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
022eh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0231h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0234h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0236h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0239h mov eax,r12d                  ; MOV(Mov_r32_rm32) [EAX,R12D]                         encoding(3 bytes) = 41 8b c4
023ch cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
023fh ja near ptr 07dch             ; JA(Ja_rel32_64) [7DCh:jmp64]                         encoding(6 bytes) = 0f 87 97 05 00 00
0245h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0248h add rcx,r15                   ; ADD(Add_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 03 cf
024bh cmp r14d,edx                  ; CMP(Cmp_r32_rm32) [R14D,EDX]                         encoding(3 bytes) = 44 3b f2
024eh ja near ptr 07e2h             ; JA(Ja_rel32_64) [7E2h:jmp64]                         encoding(6 bytes) = 0f 87 8e 05 00 00
0254h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0257h movsxd r8,r14d                ; MOVSXD(Movsxd_r64_rm32) [R8,R14D]                    encoding(3 bytes) = 4d 63 c6
025ah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F6AA0h:jmp64]                encoding(5 bytes) = e8 41 68 7f 5d
025fh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0269h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
026eh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F242180h:jmp64]                encoding(5 bytes) = e8 0d 1f 24 5f
0273h mov ecx,[rsp+1A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 01 00 00
027ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
027dh test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
0280h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
0283h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0286h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0288h mov [rsp+118h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 01 00 00
028fh lea rdx,[rsp+118h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 18 01 00 00
0297h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0299h jne short 029fh               ; JNE(Jne_rel8_64) [29Fh:jmp64]                        encoding(2 bytes) = 75 04
029bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
029dh jmp short 02a4h               ; JMP(Jmp_rel8_64) [2A4h:jmp64]                        encoding(2 bytes) = eb 05
029fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
02a4h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
02a6h mov ecx,[rsp+118h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 01 00 00
02adh cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
02b0h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
02b3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
02b6h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
02b8h mov [rsp+114h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 14 01 00 00
02bfh mov [rsp+114h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 14 01 00 00
02c6h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
02c8h je short 02dch                ; JE(Je_rel8_64) [2DCh:jmp64]                          encoding(2 bytes) = 74 12
02cah movzx ecx,byte ptr [rsp+114h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 14 01 00 00
02d2h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
02d5h mov [rsp+114h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 01 00 00
02dch movzx ecx,byte ptr [rsp+114h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 14 01 00 00
02e4h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
02e7h mov [rsp+114h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 01 00 00
02eeh mov ecx,[rsp+114h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 14 01 00 00
02f5h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
02f8h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
02fbh lea rcx,[rsp+100h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 01 00 00
0303h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0307h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
030bh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
030fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0314h lea rdx,[rsp+100h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 00 01 00 00
031ch lea r8,[rsp+60h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 60
0321h mov [r8],rax                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RAX]         encoding(3 bytes) = 49 89 00
0324h mov [r8+8],ecx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),ECX]         encoding(4 bytes) = 41 89 48 08
0328h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
032bh lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
0330h call 7FFDDBA1D728h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB2C8h:jmp64]        encoding(5 bytes) = e8 93 af ff ff
0335h vmovdqu xmm0,xmmword ptr [rsp+100h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 01 00 00
033eh vmovdqu xmmword ptr [rsp+170h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 01 00 00
0347h vmovdqu xmm0,xmmword ptr [rsp+170h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 01 00 00
0350h vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
0359h vmovdqu xmm0,xmmword ptr [rsp+0F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 00 00 00
0362h vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
036bh lea rcx,[rsp+0E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 00 00 00
0373h mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
0376h mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
037ah lea rcx,[rsp+190h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 01 00 00
0382h mov r15,[rcx]                 ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 39
0385h mov r12d,[rcx+8]              ; MOV(Mov_r32_rm32) [R12D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 61 08
0389h mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
0393h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0396h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
039ah mov r11,7FFDDB000F80h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f80h:imm64]         encoding(10 bytes) = 49 bb 80 0f 00 db fd 7f 00 00
03a4h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
03a9h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
03abh call qword ptr [7FFDDB000F80h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 6f e7 5d ff
03b1h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
03b4h jne short 03bch               ; JNE(Jne_rel8_64) [3BCh:jmp64]                        encoding(2 bytes) = 75 06
03b6h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
03b8h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
03bah jmp short 03c3h               ; JMP(Jmp_rel8_64) [3C3h:jmp64]                        encoding(2 bytes) = eb 07
03bch lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
03c0h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
03c3h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
03c6h jbe near ptr 07fah            ; JBE(Jbe_rel32_64) [7FAh:jmp64]                       encoding(6 bytes) = 0f 86 2e 04 00 00
03cch movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
03cfh mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
03d9h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
03dch mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
03dfh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
03e2h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
03e4h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
03e7h mov eax,r12d                  ; MOV(Mov_r32_rm32) [EAX,R12D]                         encoding(3 bytes) = 41 8b c4
03eah cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
03edh ja near ptr 07e8h             ; JA(Ja_rel32_64) [7E8h:jmp64]                         encoding(6 bytes) = 0f 87 f5 03 00 00
03f3h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
03f6h add rcx,r15                   ; ADD(Add_r64_rm64) [RCX,R15]                          encoding(3 bytes) = 49 03 cf
03f9h cmp r14d,edx                  ; CMP(Cmp_r32_rm32) [R14D,EDX]                         encoding(3 bytes) = 44 3b f2
03fch ja near ptr 07eeh             ; JA(Ja_rel32_64) [7EEh:jmp64]                         encoding(6 bytes) = 0f 87 ec 03 00 00
0402h mov rdx,rbp                   ; MOV(Mov_r64_rm64) [RDX,RBP]                          encoding(3 bytes) = 48 8b d5
0405h movsxd r8,r14d                ; MOVSXD(Movsxd_r64_rm32) [R8,R14D]                    encoding(3 bytes) = 4d 63 c6
0408h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F6AA0h:jmp64]                encoding(5 bytes) = e8 93 66 7f 5d
040dh vmovdqu xmm0,xmmword ptr [rsp+190h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 01 00 00
0416h vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
041fh vmovdqu xmm0,xmmword ptr [rsp+0D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 00 00 00
0428h vmovdqu xmmword ptr [rsp+0C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 00 00 00
0431h mov rbp,rsi                   ; MOV(Mov_r64_rm64) [RBP,RSI]                          encoding(3 bytes) = 48 8b ee
0434h vmovdqu xmm0,xmmword ptr [rsp+0C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 00 00 00
043dh vmovdqu xmmword ptr [rsp+50h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 50
0443h lea rcx,[rsp+50h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 50
0448h mov rdx,1E1F7836F48h          ; MOV(Mov_r64_imm64) [RDX,1e1f7836f48h:imm64]          encoding(10 bytes) = 48 ba 48 6f 83 f7 e1 01 00 00
0452h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0455h call 7FFDDBA21E40h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF9E0h:jmp64]        encoding(5 bytes) = e8 86 f5 ff ff
045ah mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
045dh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
0460h mov rax,[rbp]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RBP:br,SS:sr)]        encoding(4 bytes) = 48 8b 45 00
0464h mov rax,[rax+58h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 58
0468h call qword ptr [rax+10h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 10
046bh lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
0473h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0477h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
047bh mov rcx,7FFDDB381E60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb381e60h:imm64]         encoding(10 bytes) = 48 b9 60 1e 38 db fd 7f 00 00
0485h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F242050h:jmp64]                encoding(5 bytes) = e8 c6 1b 24 5f
048ah mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
048dh mov dword ptr [rbp+20h],7FFFFFFFh; MOV(Mov_rm32_imm32) [mem(32u,RBP:br,SS:sr),7fffffffh:imm32] encoding(7 bytes) = c7 45 20 ff ff ff 7f
0494h mov rcx,7FFDDB3806F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb3806f0h:imm64]         encoding(10 bytes) = 48 b9 f0 06 38 db fd 7f 00 00
049eh mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
04a3h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F242180h:jmp64]                encoding(5 bytes) = e8 d8 1c 24 5f
04a8h lea rcx,[rbp+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBP:br,SS:sr)]       encoding(4 bytes) = 48 8d 4d 08
04ach mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
04afh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F241190h:jmp64]                encoding(5 bytes) = e8 dc 0c 24 5f
04b4h xor r14d,r14d                 ; XOR(Xor_r32_rm32) [R14D,R14D]                        encoding(3 bytes) = 45 33 f6
04b7h mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
04c1h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
04c4h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
04c8h jle near ptr 079bh            ; JLE(Jle_rel32_64) [79Bh:jmp64]                       encoding(6 bytes) = 0f 8e cd 02 00 00
04ceh mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
04d8h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
04dbh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
04dfh mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
04e2h mov r11,7FFDDB000F88h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f88h:imm64]         encoding(10 bytes) = 49 bb 88 0f 00 db fd 7f 00 00
04ech cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
04eeh call qword ptr [7FFDDB000F88h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 34 e6 5d ff
04f4h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
04f7h jne short 04ffh               ; JNE(Jne_rel8_64) [4FFh:jmp64]                        encoding(2 bytes) = 75 06
04f9h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
04fbh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
04fdh jmp short 0506h               ; JMP(Jmp_rel8_64) [506h:jmp64]                        encoding(2 bytes) = eb 07
04ffh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0503h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0506h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0509h jbe near ptr 07fah            ; JBE(Jbe_rel32_64) [7FAh:jmp64]                       encoding(6 bytes) = 0f 86 eb 02 00 00
050fh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0512h mov rdx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 ba b8 ad 83 f7 e1 01 00 00
051ch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
051fh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0522h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0524h mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
0527h add rax,r8                    ; ADD(Add_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 03 c0
052ah mov r8d,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 00 00 00
0532h cmp rax,r8                    ; CMP(Cmp_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 3b c0
0535h ja near ptr 07f4h             ; JA(Ja_rel32_64) [7F4h:jmp64]                         encoding(6 bytes) = 0f 87 b9 02 00 00
053bh mov rax,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 d0 00 00 00
0543h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0546h add rcx,rax                   ; ADD(Add_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 03 c8
0549h lea rax,[rsp+98h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 00 00 00
0551h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0555h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0559h lea rax,[rsp+98h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 00 00 00
0561h lea r8,[rsp+60h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 60
0566h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0569h mov [r8+8],edx                ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(4 bytes) = 41 89 50 08
056dh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
0570h lea rdx,[rsp+60h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 60
0575h call 7FFDDBA1D728h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB2C8h:jmp64]        encoding(5 bytes) = e8 4e ad ff ff
057ah vmovdqu xmm0,xmmword ptr [rsp+98h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 00 00 00
0583h vmovdqu xmmword ptr [rsp+0A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 00 00 00
058ch mov r15d,1                    ; MOV(Mov_r32_imm32) [R15D,1h:imm32]                   encoding(6 bytes) = 41 bf 01 00 00 00
0592h mov r12d,1                    ; MOV(Mov_r32_imm32) [R12D,1h:imm32]                   encoding(6 bytes) = 41 bc 01 00 00 00
0598h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
059ah mov [rsp+90h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 90 00 00 00
05a2h lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
05aah mov r13,[rcx]                 ; MOV(Mov_r64_rm64) [R13,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 29
05adh mov eax,[rcx+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 41 08
05b0h mov [rsp+84h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 84 00 00 00
05b7h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
05c1h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
05c6h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F20CF80h:jmp64]                encoding(5 bytes) = e8 b5 c9 20 5f
05cbh mov rdx,1E1F783ADC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783adc8h:imm64]          encoding(10 bytes) = 48 ba c8 ad 83 f7 e1 01 00 00
05d5h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
05d8h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
05dch mov eax,[rsp+84h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 84 00 00 00
05e3h mov [rsp+74h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 74
05e7h mov [rsp+78h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 78
05ech xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
05efh mov [rsp+8Ch],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 00 00 00
05f7h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
05fah mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0604h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F242180h:jmp64]                encoding(5 bytes) = e8 77 1b 24 5f
0609h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
060ch xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
060eh mov [rsp+88h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 00 00 00
0615h cmp dword ptr [rsp+74h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(5 bytes) = 83 7c 24 74 00
061ah jle near ptr 071eh            ; JLE(Jle_rel32_64) [71Eh:jmp64]                       encoding(6 bytes) = 0f 8e fe 00 00 00
0620h mov [rsp+30h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(5 bytes) = 48 89 4c 24 30
0625h mov rcx,7FFDDB1E80C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1e80c8h:imm64]         encoding(10 bytes) = 48 b9 c8 80 1e db fd 7f 00 00
062fh mov edx,17Ch                  ; MOV(Mov_r32_imm32) [EDX,17ch:imm32]                  encoding(5 bytes) = ba 7c 01 00 00
0634h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F242450h:jmp64]                encoding(5 bytes) = e8 17 1e 24 5f
0639h mov eax,[rsp+88h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 88 00 00 00
0640h movsxd rdx,eax                ; MOVSXD(Movsxd_r64_rm32) [RDX,EAX]                    encoding(3 bytes) = 48 63 d0
0643h add rdx,r13                   ; ADD(Add_r64_rm64) [RDX,R13]                          encoding(3 bytes) = 49 03 d5
0646h movzx edx,byte ptr [rdx]      ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(3 bytes) = 0f b6 12
0649h mov rcx,1E1F78257C0h          ; MOV(Mov_r64_imm64) [RCX,1e1f78257c0h:imm64]          encoding(10 bytes) = 48 b9 c0 57 82 f7 e1 01 00 00
0653h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0656h cmp edx,[rcx+8]               ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 51 08
0659h jae near ptr 07fah            ; JAE(Jae_rel32_64) [7FAh:jmp64]                       encoding(6 bytes) = 0f 83 9b 01 00 00
065fh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0662h shl rdx,5                     ; SHL(Shl_rm64_imm8) [RDX,5h:imm8]                     encoding(4 bytes) = 48 c1 e2 05
0666h mov rdx,[rcx+rdx+10h]         ; MOV(Mov_r64_rm64) [RDX,mem(64u,RCX:br,DS:sr)]        encoding(5 bytes) = 48 8b 54 11 10
066bh test rdx,rdx                  ; TEST(Test_rm64_r64) [RDX,RDX]                        encoding(3 bytes) = 48 85 d2
066eh jne short 0677h               ; JNE(Jne_rel8_64) [677h:jmp64]                        encoding(2 bytes) = 75 07
0670h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0672h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0675h jmp short 067fh               ; JMP(Jmp_rel8_64) [67Fh:jmp64]                        encoding(2 bytes) = eb 08
0677h lea rcx,[rdx+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4a 10
067bh mov r8d,[rdx+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 42 08
067fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0681h jmp short 06dch               ; JMP(Jmp_rel8_64) [6DCh:jmp64]                        encoding(2 bytes) = eb 59
0683h mov [rsp+0BCh],r14d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R14D]       encoding(8 bytes) = 44 89 b4 24 bc 00 00 00
068bh mov [rsp+38h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(5 bytes) = 48 89 7c 24 38
0690h cmp edx,r8d                   ; CMP(Cmp_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 3b d0
0693h jae near ptr 07fah            ; JAE(Jae_rel32_64) [7FAh:jmp64]                       encoding(6 bytes) = 0f 83 61 01 00 00
0699h movsxd r11,edx                ; MOVSXD(Movsxd_r64_rm32) [R11,EDX]                    encoding(3 bytes) = 4c 63 da
069ch movzx r11d,byte ptr [rcx+r11] ; MOVZX(Movzx_r32_rm8) [R11D,mem(8u,RCX:br,DS:sr)]     encoding(5 bytes) = 46 0f b6 1c 19
06a1h mov rdi,[rsp+30h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 7c 24 30
06a6h cmp r9d,[rdi+8]               ; CMP(Cmp_r32_rm32) [R9D,mem(32u,RDI:br,DS:sr)]        encoding(4 bytes) = 44 3b 4f 08
06aah jae near ptr 07fah            ; JAE(Jae_rel32_64) [7FAh:jmp64]                       encoding(6 bytes) = 0f 83 4a 01 00 00
06b0h movsxd r14,r9d                ; MOVSXD(Movsxd_r64_rm32) [R14,R9D]                    encoding(3 bytes) = 4d 63 f1
06b3h mov [rdi+r14+10h],r11b        ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),R11L]          encoding(5 bytes) = 46 88 5c 37 10
06b8h inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
06bah inc r9d                       ; INC(Inc_rm32) [R9D]                                  encoding(3 bytes) = 41 ff c1
06bdh mov [rsp+8Ch],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 00 00 00
06c5h mov [rsp+30h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(5 bytes) = 48 89 7c 24 30
06cah mov [rsp+78h],r10             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R10]        encoding(5 bytes) = 4c 89 54 24 78
06cfh mov rdi,[rsp+38h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 7c 24 38
06d4h mov r14d,[rsp+0BCh]           ; MOV(Mov_r32_rm32) [R14D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 8b b4 24 bc 00 00 00
06dch cmp edx,8                     ; CMP(Cmp_rm32_imm8) [EDX,8h:imm32]                    encoding(3 bytes) = 83 fa 08
06dfh jge short 0700h               ; JGE(Jge_rel8_64) [700h:jmp64]                        encoding(2 bytes) = 7d 1f
06e1h mov r9d,[rsp+8Ch]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 8c 00 00 00
06e9h mov r10,[rsp+78h]             ; MOV(Mov_r64_rm64) [R10,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8b 54 24 78
06eeh cmp r9d,r10d                  ; CMP(Cmp_r32_rm32) [R9D,R10D]                         encoding(3 bytes) = 45 3b ca
06f1h jl short 0683h                ; JL(Jl_rel8_64) [683h:jmp64]                          encoding(2 bytes) = 7c 90
06f3h mov [rsp+8Ch],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 00 00 00
06fbh mov [rsp+78h],r10             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R10]        encoding(5 bytes) = 4c 89 54 24 78
0700h inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
0702h mov edx,[rsp+74h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 74
0706h cmp eax,edx                   ; CMP(Cmp_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 3b c2
0708h mov [rsp+88h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 00 00 00
070fh mov [rsp+74h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 74
0713h jl near ptr 0639h             ; JL(Jl_rel32_64) [639h:jmp64]                         encoding(6 bytes) = 0f 8c 20 ff ff ff
0719h mov rcx,[rsp+30h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 30
071eh mov [rsp+90h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 90 00 00 00
0726h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0728h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
072bh lea rdx,[rsp+90h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 00 00 00
0733h lea r8,[rsp+48h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 48
0738h mov [r8],r12b                 ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),R12L]           encoding(3 bytes) = 45 88 20
073bh mov [r8+4],r15d               ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R15D]        encoding(4 bytes) = 45 89 78 04
073fh lea r8,[rsp+40h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 40
0744h mov [r8],cl                   ; MOV(Mov_rm8_r8) [mem(8u,R8:br,DS:sr),CL]             encoding(3 bytes) = 41 88 08
0747h mov [r8+2],r9w                ; MOV(Mov_rm16_r16) [mem(16u,R8:br,DS:sr),R9W]         encoding(5 bytes) = 66 45 89 48 02
074ch mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
074fh mov r9,[rsp+48h]              ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 4c 24 48
0754h mov edx,[rsp+40h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 40
0758h mov [rsp+20h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 20
075ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
075eh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0761h call 7FFDDB81CF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFDFAB00h:jmp64]        encoding(5 bytes) = e8 9a a3 df ff
0766h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0769h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
076ch call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D7F7800h:jmp64]                encoding(5 bytes) = e8 8f 70 7f 5d
0771h call 7FFE3925E500h            ; CALL(Call_rel32_64) [5D83C0A0h:jmp64]                encoding(5 bytes) = e8 2a b9 83 5d
0776h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0779h mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
077ch call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D7F7800h:jmp64]                encoding(5 bytes) = e8 7f 70 7f 5d
0781h inc r14d                      ; INC(Inc_rm32) [R14D]                                 encoding(3 bytes) = 41 ff c6
0784h mov rcx,1E1F783ADB8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783adb8h:imm64]          encoding(10 bytes) = 48 b9 b8 ad 83 f7 e1 01 00 00
078eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0791h cmp r14d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 71 10
0795h jl near ptr 04ceh             ; JL(Jl_rel32_64) [4CEh:jmp64]                         encoding(6 bytes) = 0f 8c 33 fd ff ff
079bh mov rcx,rbp                   ; MOV(Mov_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 8b cd
079eh call 7FFE39219B10h            ; CALL(Call_rel32_64) [5D7F76B0h:jmp64]                encoding(5 bytes) = e8 0d 6f 7f 5d
07a3h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
07a6h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
07a9h mov rax,[rsi]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSI:br,DS:sr)]        encoding(3 bytes) = 48 8b 06
07ach mov rax,[rax+68h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 68
07b0h call qword ptr [rax+30h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 30
07b3h inc ebx                       ; INC(Inc_rm32) [EBX]                                  encoding(2 bytes) = ff c3
07b5h mov [rsp+38h],rdi             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(5 bytes) = 48 89 7c 24 38
07bah cmp [rdi+8],ebx               ; CMP(Cmp_rm32_r32) [mem(32u,RDI:br,DS:sr),EBX]        encoding(3 bytes) = 39 5f 08
07bdh mov rdi,[rsp+38h]             ; MOV(Mov_r64_rm64) [RDI,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 7c 24 38
07c2h jg near ptr 005dh             ; JG(Jg_rel32_64) [5Dh:jmp64]                          encoding(6 bytes) = 0f 8f 95 f8 ff ff
07c8h add rsp,1A8h                  ; ADD(Add_rm64_imm32) [RSP,1a8h:imm64]                 encoding(7 bytes) = 48 81 c4 a8 01 00 00
07cfh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
07d0h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
07d1h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
07d2h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
07d3h pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
07d5h pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
07d7h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
07d9h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
07dbh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
07dch call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71DA70h:jmp64]        encoding(5 bytes) = e8 8f d2 71 ff
07e1h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
07e2h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71DA78h:jmp64]        encoding(5 bytes) = e8 91 d2 71 ff
07e7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
07e8h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71DA70h:jmp64]        encoding(5 bytes) = e8 83 d2 71 ff
07edh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
07eeh call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71DA78h:jmp64]        encoding(5 bytes) = e8 85 d2 71 ff
07f3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
07f4h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71DA70h:jmp64]        encoding(5 bytes) = e8 77 d2 71 ff
07f9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
07fah call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F36CAA0h:jmp64]                encoding(5 bytes) = e8 a1 c2 36 5f
07ffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitUnaryOpsBytes => new byte[2048]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0xA8,0x01,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x50,0xB9,0x56,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0xE8,0x3E,0x5B,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0xBE,0xF6,0xFF,0xFF,0x48,0x8B,0xF8,0x33,0xDB,0x83,0x7F,0x08,0x00,0x0F,0x8E,0x7F,0x07,0x00,0x00,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0x23,0xCF,0x20,0x5F,0x0F,0xB6,0xD3,0x83,0xE2,0x0F,0x0F,0xB6,0xD2,0x88,0x94,0x24,0xA0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x20,0x24,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x48,0x8D,0x84,0x24,0x60,0x01,0x00,0x00,0x48,0x89,0x08,0x89,0x50,0x08,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x01,0x00,0x00,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xA6,0x20,0x24,0x5F,0x8B,0x8C,0x24,0xA0,0x01,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x01,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x58,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x01,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x58,0x01,0x00,0x00,0x83,0xF9,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x54,0x01,0x00,0x00,0x89,0x94,0x24,0x54,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x54,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x54,0x01,0x00,0x00,0x8B,0x8C,0x24,0x54,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x40,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x01,0x00,0x00,0x4C,0x8D,0x44,0x24,0x60,0x49,0x89,0x00,0x41,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x60,0xE8,0x3E,0xB1,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x20,0x01,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0x8D,0x8C,0x24,0x90,0x01,0x00,0x00,0x4C,0x8B,0x39,0x44,0x8B,0x61,0x08,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x78,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0x15,0xE9,0x5D,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xDC,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC4,0x4C,0x3B,0xC0,0x0F,0x87,0x97,0x05,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCF,0x44,0x3B,0xF2,0x0F,0x87,0x8E,0x05,0x00,0x00,0x48,0x8B,0xD5,0x4D,0x63,0xC6,0xE8,0x41,0x68,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x0D,0x1F,0x24,0x5F,0x8B,0x8C,0x24,0xA0,0x01,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x01,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x18,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x18,0x01,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x18,0x01,0x00,0x00,0x83,0xF9,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x14,0x01,0x00,0x00,0x89,0x94,0x24,0x14,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x14,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x14,0x01,0x00,0x00,0x0F,0xB6,0x8C,0x24,0x14,0x01,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x14,0x01,0x00,0x00,0x8B,0x8C,0x24,0x14,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x00,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x00,0x01,0x00,0x00,0x4C,0x8D,0x44,0x24,0x60,0x49,0x89,0x00,0x41,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x60,0xE8,0x93,0xAF,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE0,0x00,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0x8D,0x8C,0x24,0x90,0x01,0x00,0x00,0x4C,0x8B,0x39,0x44,0x8B,0x61,0x08,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x80,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x6F,0xE7,0x5D,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x2E,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC4,0x4C,0x3B,0xC0,0x0F,0x87,0xF5,0x03,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCF,0x44,0x3B,0xF2,0x0F,0x87,0xEC,0x03,0x00,0x00,0x48,0x8B,0xD5,0x4D,0x63,0xC6,0xE8,0x93,0x66,0x7F,0x5D,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x00,0x00,0x00,0x48,0x8B,0xEE,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x50,0x48,0x8D,0x4C,0x24,0x50,0x48,0xBA,0x48,0x6F,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0xE8,0x86,0xF5,0xFF,0xFF,0x48,0x8B,0xD0,0x48,0x8B,0xCD,0x48,0x8B,0x45,0x00,0x48,0x8B,0x40,0x58,0xFF,0x50,0x10,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0x60,0x1E,0x38,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x1B,0x24,0x5F,0x48,0x8B,0xE8,0xC7,0x45,0x20,0xFF,0xFF,0xFF,0x7F,0x48,0xB9,0xF0,0x06,0x38,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0xD8,0x1C,0x24,0x5F,0x48,0x8D,0x4D,0x08,0x48,0x8B,0xD0,0xE8,0xDC,0x0C,0x24,0x5F,0x45,0x33,0xF6,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0xCD,0x02,0x00,0x00,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD6,0x49,0xBB,0x88,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0x34,0xE6,0x5D,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xEB,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x8B,0xC1,0x44,0x8B,0xC2,0x49,0x03,0xC0,0x44,0x8B,0x84,0x24,0xD8,0x00,0x00,0x00,0x49,0x3B,0xC0,0x0F,0x87,0xB9,0x02,0x00,0x00,0x48,0x8B,0x84,0x24,0xD0,0x00,0x00,0x00,0x48,0x63,0xC9,0x48,0x03,0xC8,0x48,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x8D,0x84,0x24,0x98,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x60,0x49,0x89,0x08,0x41,0x89,0x50,0x08,0x48,0x8B,0xC8,0x48,0x8D,0x54,0x24,0x60,0xE8,0x4E,0xAD,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x00,0x00,0x00,0x41,0xBF,0x01,0x00,0x00,0x00,0x41,0xBC,0x01,0x00,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0x90,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0x4C,0x8B,0x29,0x8B,0x41,0x08,0x89,0x84,0x24,0x84,0x00,0x00,0x00,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0xB5,0xC9,0x20,0x5F,0x48,0xBA,0xC8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x8B,0x84,0x24,0x84,0x00,0x00,0x00,0x89,0x44,0x24,0x74,0x48,0x89,0x54,0x24,0x78,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x8C,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x77,0x1B,0x24,0x5F,0x48,0x8B,0xC8,0x33,0xC0,0x89,0x84,0x24,0x88,0x00,0x00,0x00,0x83,0x7C,0x24,0x74,0x00,0x0F,0x8E,0xFE,0x00,0x00,0x00,0x48,0x89,0x4C,0x24,0x30,0x48,0xB9,0xC8,0x80,0x1E,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7C,0x01,0x00,0x00,0xE8,0x17,0x1E,0x24,0x5F,0x8B,0x84,0x24,0x88,0x00,0x00,0x00,0x48,0x63,0xD0,0x49,0x03,0xD5,0x0F,0xB6,0x12,0x48,0xB9,0xC0,0x57,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x3B,0x51,0x08,0x0F,0x83,0x9B,0x01,0x00,0x00,0x48,0x63,0xD2,0x48,0xC1,0xE2,0x05,0x48,0x8B,0x54,0x11,0x10,0x48,0x85,0xD2,0x75,0x07,0x33,0xC9,0x45,0x33,0xC0,0xEB,0x08,0x48,0x8D,0x4A,0x10,0x44,0x8B,0x42,0x08,0x33,0xD2,0xEB,0x59,0x44,0x89,0xB4,0x24,0xBC,0x00,0x00,0x00,0x48,0x89,0x7C,0x24,0x38,0x41,0x3B,0xD0,0x0F,0x83,0x61,0x01,0x00,0x00,0x4C,0x63,0xDA,0x46,0x0F,0xB6,0x1C,0x19,0x48,0x8B,0x7C,0x24,0x30,0x44,0x3B,0x4F,0x08,0x0F,0x83,0x4A,0x01,0x00,0x00,0x4D,0x63,0xF1,0x46,0x88,0x5C,0x37,0x10,0xFF,0xC2,0x41,0xFF,0xC1,0x44,0x89,0x8C,0x24,0x8C,0x00,0x00,0x00,0x48,0x89,0x7C,0x24,0x30,0x4C,0x89,0x54,0x24,0x78,0x48,0x8B,0x7C,0x24,0x38,0x44,0x8B,0xB4,0x24,0xBC,0x00,0x00,0x00,0x83,0xFA,0x08,0x7D,0x1F,0x44,0x8B,0x8C,0x24,0x8C,0x00,0x00,0x00,0x4C,0x8B,0x54,0x24,0x78,0x45,0x3B,0xCA,0x7C,0x90,0x44,0x89,0x8C,0x24,0x8C,0x00,0x00,0x00,0x4C,0x89,0x54,0x24,0x78,0xFF,0xC0,0x8B,0x54,0x24,0x74,0x3B,0xC2,0x89,0x84,0x24,0x88,0x00,0x00,0x00,0x89,0x54,0x24,0x74,0x0F,0x8C,0x20,0xFF,0xFF,0xFF,0x48,0x8B,0x4C,0x24,0x30,0x48,0x89,0x8C,0x24,0x90,0x00,0x00,0x00,0x33,0xC9,0x45,0x33,0xC9,0x48,0x8D,0x94,0x24,0x90,0x00,0x00,0x00,0x4C,0x8D,0x44,0x24,0x48,0x45,0x88,0x20,0x45,0x89,0x78,0x04,0x4C,0x8D,0x44,0x24,0x40,0x41,0x88,0x08,0x66,0x45,0x89,0x48,0x02,0x48,0x8B,0xCA,0x4C,0x8B,0x4C,0x24,0x48,0x8B,0x54,0x24,0x40,0x89,0x54,0x24,0x20,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x9A,0xA3,0xDF,0xFF,0x48,0x8B,0xD0,0x48,0x8B,0xCD,0xE8,0x8F,0x70,0x7F,0x5D,0xE8,0x2A,0xB9,0x83,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCD,0xE8,0x7F,0x70,0x7F,0x5D,0x41,0xFF,0xC6,0x48,0xB9,0xB8,0xAD,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x71,0x10,0x0F,0x8C,0x33,0xFD,0xFF,0xFF,0x48,0x8B,0xCD,0xE8,0x0D,0x6F,0x7F,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0x48,0x8B,0x06,0x48,0x8B,0x40,0x68,0xFF,0x50,0x30,0xFF,0xC3,0x48,0x89,0x7C,0x24,0x38,0x39,0x5F,0x08,0x48,0x8B,0x7C,0x24,0x38,0x0F,0x8F,0x95,0xF8,0xFF,0xFF,0x48,0x81,0xC4,0xA8,0x01,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x8F,0xD2,0x71,0xFF,0xCC,0xE8,0x91,0xD2,0x71,0xFF,0xCC,0xE8,0x83,0xD2,0x71,0xFF,0xCC,0xE8,0x85,0xD2,0x71,0xFF,0xCC,0xE8,0x77,0xD2,0x71,0xFF,0xCC,0xE8,0xA1,0xC2,0x36,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void EmitBinaryOps(TextWriter dst)
; location: [7FFDDBA23790h, 7FFDDBA258F7h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push r13                      ; PUSH(Push_r64) [R13]                                 encoding(2 bytes) = 41 55
0006h push r12                      ; PUSH(Push_r64) [R12]                                 encoding(2 bytes) = 41 54
0008h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0009h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
000ah push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
000bh push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
000ch sub rsp,0B38h                 ; SUB(Sub_rm64_imm32) [RSP,b38h:imm64]                 encoding(7 bytes) = 48 81 ec 38 0b 00 00
0013h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0016h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0019h lea rdi,[rsp+30h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 30
001eh mov ecx,2C2h                  ; MOV(Mov_r32_imm32) [ECX,2c2h:imm32]                  encoding(5 bytes) = b9 c2 02 00 00
0023h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0025h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0027h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
002ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
002dh xor edi,edi                   ; XOR(Xor_r32_rm32) [EDI,EDI]                          encoding(2 bytes) = 33 ff
002fh mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0039h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
003eh call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F20BC50h:jmp64]                encoding(5 bytes) = e8 0d bc 20 5f
0043h movzx edx,dil                 ; MOVZX(Movzx_r32_rm8) [EDX,DIL]                       encoding(4 bytes) = 40 0f b6 d7
0047h and edx,0Fh                   ; AND(And_rm32_imm8) [EDX,fh:imm32]                    encoding(3 bytes) = 83 e2 0f
004ah mov [rsp+0A80h],dl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 80 0a 00 00
0051h movsx rdx,byte ptr [rsp+0A80h]; MOVSX(Movsx_r64_rm8) [RDX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 94 24 80 0a 00 00
005ah mov [rsp+0B30h],dl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),DL]            encoding(7 bytes) = 88 94 24 30 0b 00 00
0061h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
006bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
006eh mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
0071h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0074h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
007eh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 cd 0d 24 5f
0083h lea rcx,[rsp+0A60h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 0a 00 00
008bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
008fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0093h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0097h mov [rsp+0A58h],rcx           ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 58 0a 00 00
009fh mov rcx,[rsp+0A58h]           ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 58 0a 00 00
00a7h lea rdx,[rsp+0A60h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 0a 00 00
00afh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
00b2h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
00b5h mov [rsp+0A68h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 0a 00 00
00bch vmovdqu xmm0,xmmword ptr [rsp+0A60h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 0a 00 00
00c5h vmovdqu xmmword ptr [rsp+0A70h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 0a 00 00
00ceh vmovdqu xmm0,xmmword ptr [rsp+0A70h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 0a 00 00
00d7h vmovdqu xmmword ptr [rsp+0B20h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 0b 00 00
00e0h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
00eah mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00efh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 5c 0d 24 5f
00f4h mov ecx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0b 00 00
00fbh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
00feh test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
0101h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
0104h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0107h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0109h mov [rsp+0A50h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 0a 00 00
0110h lea rdx,[rsp+0A50h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 50 0a 00 00
0118h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
011ah jne short 0120h               ; JNE(Jne_rel8_64) [120h:jmp64]                        encoding(2 bytes) = 75 04
011ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
011eh jmp short 0125h               ; JMP(Jmp_rel8_64) [125h:jmp64]                        encoding(2 bytes) = eb 05
0120h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0125h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0127h mov ecx,[rsp+0A50h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 0a 00 00
012eh lea rdx,[rsp+0A48h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 48 0a 00 00
0136h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0138h cmp dword ptr [rsp+0A48h],1   ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 48 0a 00 00 01
0140h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0143h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0146h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0148h mov [rsp+0A40h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 0a 00 00
014fh mov edx,[rsp+0A40h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 40 0a 00 00
0156h lea r8,[rsp+0A38h]            ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 38 0a 00 00
015eh mov [r8],edx                  ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(3 bytes) = 41 89 10
0161h cmp dword ptr [rsp+0A38h],1   ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 38 0a 00 00 01
0169h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
016ch movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
016fh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0172h mov [rsp+0A30h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 30 0a 00 00
017ah mov r8d,[rsp+0A30h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 30 0a 00 00
0182h lea r9,[rsp+0A28h]            ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 28 0a 00 00
018ah mov [r9],r8d                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),R8D]         encoding(3 bytes) = 45 89 01
018dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0190h mov [rsp+0A24h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 24 0a 00 00
0198h mov [rsp+0A20h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 20 0a 00 00
01a0h mov [rsp+0A20h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 20 0a 00 00
01a8h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
01aah je short 01beh                ; JE(Je_rel8_64) [1BEh:jmp64]                          encoding(2 bytes) = 74 12
01ach movzx ecx,byte ptr [rsp+0A20h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 20 0a 00 00
01b4h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
01b7h mov [rsp+0A20h],cl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 20 0a 00 00
01beh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
01c0h je short 01d4h                ; JE(Je_rel8_64) [1D4h:jmp64]                          encoding(2 bytes) = 74 12
01c2h movzx ecx,byte ptr [rsp+0A20h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 20 0a 00 00
01cah or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
01cdh mov [rsp+0A20h],cl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 20 0a 00 00
01d4h mov ecx,[rsp+0A20h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 0a 00 00
01dbh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01deh mov [rsp+0A24h],cl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 24 0a 00 00
01e5h cmp dword ptr [rsp+0A28h],1   ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 28 0a 00 00 01
01edh jne short 0201h               ; JNE(Jne_rel8_64) [201h:jmp64]                        encoding(2 bytes) = 75 12
01efh movzx ecx,byte ptr [rsp+0A24h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 24 0a 00 00
01f7h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
01fah mov [rsp+0A24h],cl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 24 0a 00 00
0201h mov ecx,[rsp+0A24h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 24 0a 00 00
0208h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
020bh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
020eh lea rcx,[rsp+0A10h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 10 0a 00 00
0216h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
021ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
021eh lea rcx,[rsp+9F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 09 00 00
0226h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
022ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
022eh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0232h mov [rsp+9E8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 e8 09 00 00
023ah mov rcx,[rsp+9E8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e8 09 00 00
0242h lea rdx,[rsp+9F0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f0 09 00 00
024ah mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
024dh mov dword ptr [rsp+9F8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 f8 09 00 00 01 00 00 00
0258h vmovdqu xmm0,xmmword ptr [rsp+9F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 09 00 00
0261h vmovdqu xmmword ptr [rsp+0A00h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 0a 00 00
026ah lea rcx,[rsp+0A10h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 10 0a 00 00
0272h vmovdqu xmm0,xmmword ptr [rsp+0A00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0a 00 00
027bh vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
0281h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
0286h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB438h:jmp64]        encoding(5 bytes) = e8 ad b1 ff ff
028bh vmovdqu xmm0,xmmword ptr [rsp+0A10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 0a 00 00
0294h vmovdqu xmmword ptr [rsp+0AF0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 0a 00 00
029dh vmovdqu xmm0,xmmword ptr [rsp+0AF0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 0a 00 00
02a6h vmovdqu xmmword ptr [rsp+9D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 09 00 00
02afh vmovdqu xmm0,xmmword ptr [rsp+9D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 09 00 00
02b8h vmovdqu xmmword ptr [rsp+9C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 09 00 00
02c1h vmovdqu xmm0,xmmword ptr [rsp+9C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 09 00 00
02cah vmovdqu xmmword ptr [rsp+9B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 09 00 00
02d3h vmovdqu xmm0,xmmword ptr [rsp+0B20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0b 00 00
02dch vmovdqu xmmword ptr [rsp+9A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 09 00 00
02e5h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
02efh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
02f2h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
02f6h mov r11,7FFDDB000F90h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f90h:imm64]         encoding(10 bytes) = 49 bb 90 0f 00 db fd 7f 00 00
0300h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0302h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0304h call qword ptr [7FFDDB000F90h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 f6 d4 5d ff
030ah lea rcx,[rsp+978h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 09 00 00
0312h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0316h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
031ah test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
031dh jne short 0331h               ; JNE(Jne_rel8_64) [331h:jmp64]                        encoding(2 bytes) = 75 12
031fh lea rax,[rsp+978h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 78 09 00 00
0327h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
032bh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
032fh jmp short 035ah               ; JMP(Jmp_rel8_64) [35Ah:jmp64]                        encoding(2 bytes) = eb 29
0331h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0335h mov [rsp+970h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 09 00 00
033dh mov rcx,[rsp+970h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 09 00 00
0345h lea rdx,[rsp+978h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 78 09 00 00
034dh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0350h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0353h mov [rsp+980h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 09 00 00
035ah vmovdqu xmm0,xmmword ptr [rsp+978h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 09 00 00
0363h vmovdqu xmmword ptr [rsp+988h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 09 00 00
036ch cmp dword ptr [rsp+990h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 90 09 00 00 00
0374h jbe near ptr 2162h            ; JBE(Jbe_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 86 e8 1d 00 00
037ah mov rcx,[rsp+988h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 88 09 00 00
0382h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0385h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
038fh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0392h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0395h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0398h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
039ah add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
039dh mov eax,[rsp+9B0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 b0 09 00 00
03a4h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
03a6h cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
03a9h ja near ptr 2126h             ; JA(Ja_rel32_64) [2126h:jmp64]                        encoding(6 bytes) = 0f 87 77 1d 00 00
03afh mov r8,[rsp+9A8h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 a8 09 00 00
03b7h lea rax,[rsp+960h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 60 09 00 00
03bfh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03c3h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
03c7h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
03cah add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
03cdh mov [rsp+958h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 58 09 00 00
03d5h mov rcx,[rsp+958h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 58 09 00 00
03ddh lea r8,[rsp+960h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 60 09 00 00
03e5h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
03e8h mov [rsp+968h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 09 00 00
03efh vmovdqu xmm0,xmmword ptr [rsp+960h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 09 00 00
03f8h vmovdqu xmmword ptr [rsp+998h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 09 00 00
0401h vmovdqu xmm0,xmmword ptr [rsp+998h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 09 00 00
040ah vmovdqu xmmword ptr [rsp+948h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 09 00 00
0413h mov ecx,[rsp+9C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 09 00 00
041ah cmp ecx,[rsp+950h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 50 09 00 00
0421h ja near ptr 212ch             ; JA(Ja_rel32_64) [212Ch:jmp64]                        encoding(6 bytes) = 0f 87 05 1d 00 00
0427h mov rcx,[rsp+948h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 09 00 00
042fh mov rdx,[rsp+9B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 09 00 00
0437h mov r8d,[rsp+9C0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c0 09 00 00
043fh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0442h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F5770h:jmp64]                encoding(5 bytes) = e8 29 53 7f 5d
0447h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0451h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0456h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 f5 09 24 5f
045bh mov ecx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0b 00 00
0462h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0465h test cl,2                     ; TEST(Test_rm8_imm8) [CL,2h:imm8]                     encoding(3 bytes) = f6 c1 02
0468h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
046bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
046eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0470h mov [rsp+940h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 40 09 00 00
0477h lea rdx,[rsp+940h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 09 00 00
047fh test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0481h jne short 0487h               ; JNE(Jne_rel8_64) [487h:jmp64]                        encoding(2 bytes) = 75 04
0483h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0485h jmp short 048ch               ; JMP(Jmp_rel8_64) [48Ch:jmp64]                        encoding(2 bytes) = eb 05
0487h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
048ch mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
048eh mov ecx,[rsp+940h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 09 00 00
0495h lea rdx,[rsp+938h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 09 00 00
049dh mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
049fh cmp dword ptr [rsp+938h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 38 09 00 00 01
04a7h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
04aah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
04adh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
04afh mov [rsp+930h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 09 00 00
04b6h mov edx,[rsp+930h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 09 00 00
04bdh lea r8,[rsp+928h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 28 09 00 00
04c5h mov [r8],edx                  ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),EDX]         encoding(3 bytes) = 41 89 10
04c8h cmp dword ptr [rsp+928h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 28 09 00 00 01
04d0h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
04d3h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
04d6h mov dword ptr [rsp+920h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 20 09 00 00 01 00 00 00
04e1h mov r8d,[rsp+920h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 20 09 00 00
04e9h lea r9,[rsp+918h]             ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 18 09 00 00
04f1h mov [r9],r8d                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),R8D]         encoding(3 bytes) = 45 89 01
04f4h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
04f7h mov [rsp+914h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 14 09 00 00
04ffh mov [rsp+910h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 10 09 00 00
0507h mov [rsp+910h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 10 09 00 00
050fh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0511h je short 0525h                ; JE(Je_rel8_64) [525h:jmp64]                          encoding(2 bytes) = 74 12
0513h movzx ecx,byte ptr [rsp+910h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 10 09 00 00
051bh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
051eh mov [rsp+910h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 10 09 00 00
0525h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0527h je short 053bh                ; JE(Je_rel8_64) [53Bh:jmp64]                          encoding(2 bytes) = 74 12
0529h movzx ecx,byte ptr [rsp+910h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 10 09 00 00
0531h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0534h mov [rsp+910h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 10 09 00 00
053bh mov ecx,[rsp+910h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 09 00 00
0542h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0545h mov [rsp+914h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 09 00 00
054ch cmp dword ptr [rsp+918h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 18 09 00 00 01
0554h jne short 0568h               ; JNE(Jne_rel8_64) [568h:jmp64]                        encoding(2 bytes) = 75 12
0556h movzx ecx,byte ptr [rsp+914h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 14 09 00 00
055eh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0561h mov [rsp+914h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 14 09 00 00
0568h mov ecx,[rsp+914h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 14 09 00 00
056fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0572h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0575h lea rcx,[rsp+900h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 09 00 00
057dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0581h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0585h lea rcx,[rsp+8E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 08 00 00
058dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0591h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0595h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0599h mov [rsp+8D8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 d8 08 00 00
05a1h mov rcx,[rsp+8D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 08 00 00
05a9h lea rdx,[rsp+8E0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e0 08 00 00
05b1h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
05b4h mov dword ptr [rsp+8E8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 e8 08 00 00 01 00 00 00
05bfh vmovdqu xmm0,xmmword ptr [rsp+8E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 08 00 00
05c8h vmovdqu xmmword ptr [rsp+8F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 08 00 00
05d1h lea rcx,[rsp+900h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 00 09 00 00
05d9h vmovdqu xmm0,xmmword ptr [rsp+8F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 08 00 00
05e2h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
05e8h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
05edh call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB438h:jmp64]        encoding(5 bytes) = e8 46 ae ff ff
05f2h vmovdqu xmm0,xmmword ptr [rsp+900h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 09 00 00
05fbh vmovdqu xmmword ptr [rsp+0AE0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 0a 00 00
0604h vmovdqu xmm0,xmmword ptr [rsp+0AE0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 0a 00 00
060dh vmovdqu xmmword ptr [rsp+8C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 08 00 00
0616h vmovdqu xmm0,xmmword ptr [rsp+8C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 08 00 00
061fh vmovdqu xmmword ptr [rsp+8B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 08 00 00
0628h vmovdqu xmm0,xmmword ptr [rsp+8B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 08 00 00
0631h vmovdqu xmmword ptr [rsp+8A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 08 00 00
063ah vmovdqu xmm0,xmmword ptr [rsp+0B20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0b 00 00
0643h vmovdqu xmmword ptr [rsp+898h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 08 00 00
064ch mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
0656h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0659h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
065dh mov r11,7FFDDB000F98h         ; MOV(Mov_r64_imm64) [R11,7ffddb000f98h:imm64]         encoding(10 bytes) = 49 bb 98 0f 00 db fd 7f 00 00
0667h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
066ch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
066eh call qword ptr [7FFDDB000F98h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 94 d1 5d ff
0674h lea rcx,[rsp+868h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 08 00 00
067ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0680h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0684h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0687h jne short 069bh               ; JNE(Jne_rel8_64) [69Bh:jmp64]                        encoding(2 bytes) = 75 12
0689h lea rax,[rsp+868h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 68 08 00 00
0691h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0695h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0699h jmp short 06c4h               ; JMP(Jmp_rel8_64) [6C4h:jmp64]                        encoding(2 bytes) = eb 29
069bh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
069fh mov [rsp+860h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 60 08 00 00
06a7h mov rcx,[rsp+860h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 08 00 00
06afh lea rdx,[rsp+868h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 68 08 00 00
06b7h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
06bah mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
06bdh mov [rsp+870h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 70 08 00 00
06c4h vmovdqu xmm0,xmmword ptr [rsp+868h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 08 00 00
06cdh vmovdqu xmmword ptr [rsp+878h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 08 00 00
06d6h cmp dword ptr [rsp+880h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 80 08 00 00 00
06deh jbe near ptr 2162h            ; JBE(Jbe_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 86 7e 1a 00 00
06e4h mov rcx,[rsp+878h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 08 00 00
06ech movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
06efh mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
06f9h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06fch mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
06ffh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0702h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0704h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0707h cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
070ah ja near ptr 2132h             ; JA(Ja_rel32_64) [2132h:jmp64]                        encoding(6 bytes) = 0f 87 22 1a 00 00
0710h mov r8,[rsp+898h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 98 08 00 00
0718h lea rax,[rsp+850h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 50 08 00 00
0720h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0724h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0728h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
072bh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
072eh mov [rsp+848h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 48 08 00 00
0736h mov rcx,[rsp+848h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 48 08 00 00
073eh lea r8,[rsp+850h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 50 08 00 00
0746h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0749h mov [rsp+858h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 08 00 00
0750h vmovdqu xmm0,xmmword ptr [rsp+850h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 08 00 00
0759h vmovdqu xmmword ptr [rsp+888h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 08 00 00
0762h vmovdqu xmm0,xmmword ptr [rsp+888h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 08 00 00
076bh vmovdqu xmmword ptr [rsp+838h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 08 00 00
0774h mov ecx,[rsp+8B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 08 00 00
077bh cmp ecx,[rsp+840h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 40 08 00 00
0782h ja near ptr 2138h             ; JA(Ja_rel32_64) [2138h:jmp64]                        encoding(6 bytes) = 0f 87 b0 19 00 00
0788h mov rcx,[rsp+838h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 08 00 00
0790h mov rdx,[rsp+8A8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a8 08 00 00
0798h mov r8d,[rsp+8B0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b0 08 00 00
07a0h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
07a3h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F5770h:jmp64]                encoding(5 bytes) = e8 c8 4f 7f 5d
07a8h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
07b2h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
07b7h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 94 06 24 5f
07bch mov ecx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0b 00 00
07c3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
07c6h test cl,4                     ; TEST(Test_rm8_imm8) [CL,4h:imm8]                     encoding(3 bytes) = f6 c1 04
07c9h setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
07cch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
07cfh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
07d1h mov [rsp+830h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 08 00 00
07d8h lea rdx,[rsp+830h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 30 08 00 00
07e0h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
07e2h jne short 07e8h               ; JNE(Jne_rel8_64) [7E8h:jmp64]                        encoding(2 bytes) = 75 04
07e4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
07e6h jmp short 07edh               ; JMP(Jmp_rel8_64) [7EDh:jmp64]                        encoding(2 bytes) = eb 05
07e8h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
07edh mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
07efh mov ecx,[rsp+830h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 08 00 00
07f6h mov [rsp+0AD8h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 0a 00 00
07fdh mov ecx,[rsp+0AD8h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 0a 00 00
0804h mov [rsp+828h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 08 00 00
080bh cmp dword ptr [rsp+828h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 28 08 00 00 01
0813h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0816h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0819h mov dword ptr [rsp+820h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 20 08 00 00 01 00 00 00
0824h mov edx,[rsp+820h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 08 00 00
082bh mov [rsp+0AD0h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 0a 00 00
0832h mov edx,[rsp+0AD0h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 0a 00 00
0839h mov [rsp+818h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 08 00 00
0840h cmp dword ptr [rsp+818h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 18 08 00 00 01
0848h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
084bh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
084eh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0851h mov [rsp+810h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 10 08 00 00
0859h mov r8d,[rsp+810h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 10 08 00 00
0861h mov [rsp+0AC8h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c8 0a 00 00
0869h mov r8d,[rsp+0AC8h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c8 0a 00 00
0871h mov [rsp+808h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 08 08 00 00
0879h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
087ch mov [rsp+804h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 04 08 00 00
0884h mov [rsp+800h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 00 08 00 00
088ch mov [rsp+800h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 00 08 00 00
0894h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0896h je short 08aah                ; JE(Je_rel8_64) [8AAh:jmp64]                          encoding(2 bytes) = 74 12
0898h movzx ecx,byte ptr [rsp+800h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 00 08 00 00
08a0h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
08a3h mov [rsp+800h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 00 08 00 00
08aah test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
08ach je short 08c0h                ; JE(Je_rel8_64) [8C0h:jmp64]                          encoding(2 bytes) = 74 12
08aeh movzx ecx,byte ptr [rsp+800h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 00 08 00 00
08b6h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
08b9h mov [rsp+800h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 00 08 00 00
08c0h mov ecx,[rsp+800h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 08 00 00
08c7h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
08cah mov [rsp+804h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 04 08 00 00
08d1h cmp dword ptr [rsp+808h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 08 08 00 00 01
08d9h jne short 08edh               ; JNE(Jne_rel8_64) [8EDh:jmp64]                        encoding(2 bytes) = 75 12
08dbh movzx ecx,byte ptr [rsp+804h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 04 08 00 00
08e3h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
08e6h mov [rsp+804h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 04 08 00 00
08edh mov ecx,[rsp+804h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 04 08 00 00
08f4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
08f7h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
08fah lea rcx,[rsp+7F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 07 00 00
0902h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0906h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
090ah lea rcx,[rsp+7D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 07 00 00
0912h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0916h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
091ah add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
091eh mov [rsp+7C8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 c8 07 00 00
0926h mov rcx,[rsp+7C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 07 00 00
092eh lea rdx,[rsp+7D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 07 00 00
0936h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0939h mov dword ptr [rsp+7D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 07 00 00 01 00 00 00
0944h vmovdqu xmm0,xmmword ptr [rsp+7D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 07 00 00
094dh vmovdqu xmmword ptr [rsp+7E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 07 00 00
0956h lea rcx,[rsp+7F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 07 00 00
095eh vmovdqu xmm0,xmmword ptr [rsp+7E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 07 00 00
0967h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
096dh lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
0972h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB438h:jmp64]        encoding(5 bytes) = e8 c1 aa ff ff
0977h vmovdqu xmm0,xmmword ptr [rsp+7F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 07 00 00
0980h vmovdqu xmmword ptr [rsp+0AB8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 0a 00 00
0989h vmovdqu xmm0,xmmword ptr [rsp+0AB8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 0a 00 00
0992h vmovdqu xmmword ptr [rsp+7B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 07 00 00
099bh vmovdqu xmm0,xmmword ptr [rsp+7B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 07 00 00
09a4h vmovdqu xmmword ptr [rsp+7A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 07 00 00
09adh vmovdqu xmm0,xmmword ptr [rsp+7A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 07 00 00
09b6h vmovdqu xmmword ptr [rsp+798h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 07 00 00
09bfh vmovdqu xmm0,xmmword ptr [rsp+0B20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0b 00 00
09c8h vmovdqu xmmword ptr [rsp+788h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 07 00 00
09d1h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
09dbh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
09deh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
09e2h mov r11,7FFDDB000FA0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fa0h:imm64]         encoding(10 bytes) = 49 bb a0 0f 00 db fd 7f 00 00
09ech mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
09f1h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
09f3h call qword ptr [7FFDDB000FA0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 17 ce 5d ff
09f9h lea rcx,[rsp+758h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 07 00 00
0a01h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a05h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0a09h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0a0ch jne short 0a20h               ; JNE(Jne_rel8_64) [A20h:jmp64]                        encoding(2 bytes) = 75 12
0a0eh lea rax,[rsp+758h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 07 00 00
0a16h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a1ah vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0a1eh jmp short 0a49h               ; JMP(Jmp_rel8_64) [A49h:jmp64]                        encoding(2 bytes) = eb 29
0a20h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0a24h mov [rsp+750h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 50 07 00 00
0a2ch mov rcx,[rsp+750h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 07 00 00
0a34h lea rdx,[rsp+758h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 07 00 00
0a3ch mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0a3fh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0a42h mov [rsp+760h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 07 00 00
0a49h vmovdqu xmm0,xmmword ptr [rsp+758h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 07 00 00
0a52h vmovdqu xmmword ptr [rsp+768h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 07 00 00
0a5bh cmp dword ptr [rsp+770h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 70 07 00 00 00
0a63h jbe near ptr 2162h            ; JBE(Jbe_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 86 f9 16 00 00
0a69h mov rcx,[rsp+768h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 68 07 00 00
0a71h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0a74h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
0a7eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0a81h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0a84h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0a87h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0a89h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0a8ch cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
0a8fh ja near ptr 213eh             ; JA(Ja_rel32_64) [213Eh:jmp64]                        encoding(6 bytes) = 0f 87 a9 16 00 00
0a95h mov r8,[rsp+788h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 88 07 00 00
0a9dh lea rax,[rsp+740h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 07 00 00
0aa5h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0aa9h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0aadh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0ab0h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0ab3h mov [rsp+738h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 38 07 00 00
0abbh mov rcx,[rsp+738h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 07 00 00
0ac3h lea r8,[rsp+740h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 40 07 00 00
0acbh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0aceh mov [rsp+748h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 07 00 00
0ad5h vmovdqu xmm0,xmmword ptr [rsp+740h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 07 00 00
0adeh vmovdqu xmmword ptr [rsp+778h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 07 00 00
0ae7h vmovdqu xmm0,xmmword ptr [rsp+778h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 07 00 00
0af0h vmovdqu xmmword ptr [rsp+728h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 07 00 00
0af9h mov ecx,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 07 00 00
0b00h cmp ecx,[rsp+730h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 30 07 00 00
0b07h ja near ptr 2144h             ; JA(Ja_rel32_64) [2144h:jmp64]                        encoding(6 bytes) = 0f 87 37 16 00 00
0b0dh mov rcx,[rsp+728h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 07 00 00
0b15h mov rdx,[rsp+798h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 07 00 00
0b1dh mov r8d,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a0 07 00 00
0b25h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0b28h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F5770h:jmp64]                encoding(5 bytes) = e8 43 4c 7f 5d
0b2dh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0b37h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0b3ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 0f 03 24 5f
0b41h mov ecx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0b 00 00
0b48h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0b4bh test cl,8                     ; TEST(Test_rm8_imm8) [CL,8h:imm8]                     encoding(3 bytes) = f6 c1 08
0b4eh setne cl                      ; SETNE(Setne_rm8) [CL]                                encoding(3 bytes) = 0f 95 c1
0b51h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0b54h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0b56h mov [rsp+720h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 07 00 00
0b5dh lea rdx,[rsp+720h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 07 00 00
0b65h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
0b67h jne short 0b6dh               ; JNE(Jne_rel8_64) [B6Dh:jmp64]                        encoding(2 bytes) = 75 04
0b69h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0b6bh jmp short 0b72h               ; JMP(Jmp_rel8_64) [B72h:jmp64]                        encoding(2 bytes) = eb 05
0b6dh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0b72h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0b74h mov ecx,[rsp+720h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 07 00 00
0b7bh mov [rsp+0AB0h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 0a 00 00
0b82h mov ecx,[rsp+0AB0h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 0a 00 00
0b89h mov [rsp+718h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 07 00 00
0b90h cmp dword ptr [rsp+718h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 18 07 00 00 01
0b98h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0b9bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0b9eh mov dword ptr [rsp+710h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 10 07 00 00 01 00 00 00
0ba9h mov edx,[rsp+710h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 07 00 00
0bb0h mov [rsp+0AA8h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 0a 00 00
0bb7h mov edx,[rsp+0AA8h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 0a 00 00
0bbeh mov [rsp+708h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 07 00 00
0bc5h cmp dword ptr [rsp+708h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 08 07 00 00 01
0bcdh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0bd0h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0bd3h mov dword ptr [rsp+700h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 00 07 00 00 01 00 00 00
0bdeh mov r8d,[rsp+700h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 00 07 00 00
0be6h mov [rsp+0AA0h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a0 0a 00 00
0beeh mov r8d,[rsp+0AA0h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a0 0a 00 00
0bf6h mov [rsp+6F8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f8 06 00 00
0bfeh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0c01h mov [rsp+6F4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f4 06 00 00
0c09h mov [rsp+6F0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f0 06 00 00
0c11h mov [rsp+6F0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f0 06 00 00
0c19h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0c1bh je short 0c2fh                ; JE(Je_rel8_64) [C2Fh:jmp64]                          encoding(2 bytes) = 74 12
0c1dh movzx ecx,byte ptr [rsp+6F0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 f0 06 00 00
0c25h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0c28h mov [rsp+6F0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 f0 06 00 00
0c2fh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0c31h je short 0c45h                ; JE(Je_rel8_64) [C45h:jmp64]                          encoding(2 bytes) = 74 12
0c33h movzx ecx,byte ptr [rsp+6F0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 f0 06 00 00
0c3bh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0c3eh mov [rsp+6F0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 f0 06 00 00
0c45h mov ecx,[rsp+6F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 06 00 00
0c4ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0c4fh mov [rsp+6F4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 f4 06 00 00
0c56h cmp dword ptr [rsp+6F8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 f8 06 00 00 01
0c5eh jne short 0c72h               ; JNE(Jne_rel8_64) [C72h:jmp64]                        encoding(2 bytes) = 75 12
0c60h movzx ecx,byte ptr [rsp+6F4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 f4 06 00 00
0c68h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0c6bh mov [rsp+6F4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 f4 06 00 00
0c72h mov ecx,[rsp+6F4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f4 06 00 00
0c79h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0c7ch mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0c7fh lea rcx,[rsp+6E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 06 00 00
0c87h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c8bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0c8fh lea rcx,[rsp+6C0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c0 06 00 00
0c97h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c9bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0c9fh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0ca3h mov [rsp+6B8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 b8 06 00 00
0cabh mov rcx,[rsp+6B8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b8 06 00 00
0cb3h lea rdx,[rsp+6C0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c0 06 00 00
0cbbh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0cbeh mov dword ptr [rsp+6C8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c8 06 00 00 01 00 00 00
0cc9h vmovdqu xmm0,xmmword ptr [rsp+6C0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c0 06 00 00
0cd2h vmovdqu xmmword ptr [rsp+6D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 06 00 00
0cdbh lea rcx,[rsp+6E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 06 00 00
0ce3h vmovdqu xmm0,xmmword ptr [rsp+6D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 06 00 00
0cech vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
0cf2h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
0cf7h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB438h:jmp64]        encoding(5 bytes) = e8 3c a7 ff ff
0cfch vmovdqu xmm0,xmmword ptr [rsp+6E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 06 00 00
0d05h vmovdqu xmmword ptr [rsp+0A90h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 0a 00 00
0d0eh vmovdqu xmm0,xmmword ptr [rsp+0A90h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 0a 00 00
0d17h vmovdqu xmmword ptr [rsp+6A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 06 00 00
0d20h vmovdqu xmm0,xmmword ptr [rsp+6A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 06 00 00
0d29h vmovdqu xmmword ptr [rsp+698h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 06 00 00
0d32h vmovdqu xmm0,xmmword ptr [rsp+698h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 06 00 00
0d3bh vmovdqu xmmword ptr [rsp+688h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 06 00 00
0d44h vmovdqu xmm0,xmmword ptr [rsp+0B20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0b 00 00
0d4dh vmovdqu xmmword ptr [rsp+678h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 06 00 00
0d56h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
0d60h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0d63h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0d67h mov r11,7FFDDB000FA8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fa8h:imm64]         encoding(10 bytes) = 49 bb a8 0f 00 db fd 7f 00 00
0d71h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0d76h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0d78h call qword ptr [7FFDDB000FA8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 9a ca 5d ff
0d7eh lea rcx,[rsp+648h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 06 00 00
0d86h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d8ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0d8eh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0d91h jne short 0da5h               ; JNE(Jne_rel8_64) [DA5h:jmp64]                        encoding(2 bytes) = 75 12
0d93h lea rax,[rsp+648h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 48 06 00 00
0d9bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d9fh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0da3h jmp short 0dceh               ; JMP(Jmp_rel8_64) [DCEh:jmp64]                        encoding(2 bytes) = eb 29
0da5h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0da9h mov [rsp+640h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 40 06 00 00
0db1h mov rcx,[rsp+640h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 40 06 00 00
0db9h lea rdx,[rsp+648h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 48 06 00 00
0dc1h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0dc4h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0dc7h mov [rsp+650h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 06 00 00
0dceh vmovdqu xmm0,xmmword ptr [rsp+648h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 06 00 00
0dd7h vmovdqu xmmword ptr [rsp+658h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 06 00 00
0de0h cmp dword ptr [rsp+660h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 60 06 00 00 00
0de8h jbe near ptr 2162h            ; JBE(Jbe_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 86 74 13 00 00
0deeh mov rcx,[rsp+658h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 58 06 00 00
0df6h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0df9h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
0e03h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0e06h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0e09h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0e0ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0e0eh add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0e11h cmp r8,rbx                    ; CMP(Cmp_r64_rm64) [R8,RBX]                           encoding(3 bytes) = 4c 3b c3
0e14h ja near ptr 214ah             ; JA(Ja_rel32_64) [214Ah:jmp64]                        encoding(6 bytes) = 0f 87 30 13 00 00
0e1ah mov r8,[rsp+678h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 78 06 00 00
0e22h lea rax,[rsp+630h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 30 06 00 00
0e2ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0e2eh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0e32h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0e35h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0e38h mov [rsp+628h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 28 06 00 00
0e40h mov rcx,[rsp+628h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 06 00 00
0e48h lea r8,[rsp+630h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 30 06 00 00
0e50h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0e53h mov [rsp+638h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 06 00 00
0e5ah vmovdqu xmm0,xmmword ptr [rsp+630h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 06 00 00
0e63h vmovdqu xmmword ptr [rsp+668h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 06 00 00
0e6ch vmovdqu xmm0,xmmword ptr [rsp+668h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 06 00 00
0e75h vmovdqu xmmword ptr [rsp+618h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 06 00 00
0e7eh mov ecx,[rsp+690h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 06 00 00
0e85h cmp ecx,[rsp+620h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 20 06 00 00
0e8ch ja near ptr 2150h             ; JA(Ja_rel32_64) [2150h:jmp64]                        encoding(6 bytes) = 0f 87 be 12 00 00
0e92h mov rcx,[rsp+618h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 06 00 00
0e9ah mov rdx,[rsp+688h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 88 06 00 00
0ea2h mov r8d,[rsp+690h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 90 06 00 00
0eaah movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0eadh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F5770h:jmp64]                encoding(5 bytes) = e8 be 48 7f 5d
0eb2h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
0ebch mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0ebfh mov ebp,[rcx+14h]             ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 14
0ec2h add ebp,0FFFFFFFDh            ; ADD(Add_rm32_imm8) [EBP,fffffffffffffffdh:imm32]     encoding(3 bytes) = 83 c5 fd
0ec5h mov word ptr [rsp+610h],0     ; MOV(Mov_rm16_imm16) [mem(16u,RSP:br,SS:sr),0h:imm16] encoding(10 bytes) = 66 c7 84 24 10 06 00 00 00 00
0ecfh movsx rcx,word ptr [rsp+610h] ; MOVSX(Movsx_r64_rm16) [RCX,mem(16i,RSP:br,SS:sr)]    encoding(9 bytes) = 48 0f bf 8c 24 10 06 00 00
0ed8h mov [rsp+5E0h],cx             ; MOV(Mov_rm16_r16) [mem(16u,RSP:br,SS:sr),CX]         encoding(8 bytes) = 66 89 8c 24 e0 05 00 00
0ee0h movsx rcx,word ptr [rsp+5E0h] ; MOVSX(Movsx_r64_rm16) [RCX,mem(16i,RSP:br,SS:sr)]    encoding(9 bytes) = 48 0f bf 8c 24 e0 05 00 00
0ee9h mov [rsp+5C8h],cx             ; MOV(Mov_rm16_r16) [mem(16u,RSP:br,SS:sr),CX]         encoding(8 bytes) = 66 89 8c 24 c8 05 00 00
0ef1h lea rcx,[rsp+5D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 05 00 00
0ef9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0efdh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0f01h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0f0bh mov edx,9                     ; MOV(Mov_r32_imm32) [EDX,9h:imm32]                    encoding(5 bytes) = ba 09 00 00 00
0f10h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F20BC50h:jmp64]                encoding(5 bytes) = e8 3b ad 20 5f
0f15h mov edx,[7FFDDBAA28D8h]       ; MOV(Mov_r32_rm32) [EDX,mem(32u,RIP:br,DS:sr)]        encoding(6 bytes) = 8b 15 2d e2 07 00
0f1bh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0f1eh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0f28h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 23 ff 23 5f
0f2dh lea rcx,[rsp+5A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 05 00 00
0f35h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0f39h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0f3dh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0f41h mov [rsp+5A0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a0 05 00 00
0f49h mov rcx,[rsp+5A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 05 00 00
0f51h lea rdx,[rsp+5A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 05 00 00
0f59h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0f5ch mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0f5fh mov [rsp+5B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 05 00 00
0f66h vmovdqu xmm0,xmmword ptr [rsp+5A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 05 00 00
0f6fh vmovdqu xmmword ptr [rsp+5D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 05 00 00
0f78h cmp byte ptr [rsp+5C8h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 c8 05 00 00 00
0f80h je short 0fa5h                ; JE(Je_rel8_64) [FA5h:jmp64]                          encoding(2 bytes) = 74 23
0f82h cmp byte ptr [rsp+5C8h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 c8 05 00 00 00
0f8ah je near ptr 2156h             ; JE(Je_rel32_64) [2156h:jmp64]                        encoding(6 bytes) = 0f 84 c6 11 00 00
0f90h lea rcx,[rsp+5D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 05 00 00
0f98h movzx edx,byte ptr [rsp+5C9h] ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 94 24 c9 05 00 00
0fa0h call 7FFDDB151A10h            ; CALL(Call_rel32_64) [FFFFFFFFFF72E280h:jmp64]        encoding(5 bytes) = e8 db d2 72 ff
0fa5h lea rcx,[rsp+5B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 05 00 00
0fadh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0fb1h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0fb5h lea rcx,[rsp+5B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 05 00 00
0fbdh vmovdqu xmm0,xmmword ptr [rsp+5D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 05 00 00
0fc6h vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
0fcch lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
0fd1h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBEB0h:jmp64]        encoding(5 bytes) = e8 da ae ff ff
0fd6h vmovdqu xmm0,xmmword ptr [rsp+5B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 05 00 00
0fdfh vmovdqu xmmword ptr [rsp+600h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 06 00 00
0fe8h xor r14d,r14d                 ; XOR(Xor_r32_rm32) [R14D,R14D]                        encoding(3 bytes) = 45 33 f6
0febh mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
0ff5h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0ff8h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
0ffch jle near ptr 12dfh            ; JLE(Jle_rel32_64) [12DFh:jmp64]                      encoding(6 bytes) = 0f 8e dd 02 00 00
1002h movzx ecx,r14b                ; MOVZX(Movzx_r32_rm8) [ECX,R14L]                      encoding(4 bytes) = 41 0f b6 ce
1006h mov [rsp+598h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 05 00 00
100dh mov ecx,[rsp+598h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 05 00 00
1014h mov [rsp+5F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 05 00 00
101bh mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
1025h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1028h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
102ch mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
102fh mov r11,7FFDDB000FB0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fb0h:imm64]         encoding(10 bytes) = 49 bb b0 0f 00 db fd 7f 00 00
1039h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
103bh call qword ptr [7FFDDB000FB0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 df c7 5d ff
1041h lea rcx,[rsp+558h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 05 00 00
1049h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
104dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1051h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1054h jne short 1068h               ; JNE(Jne_rel8_64) [1068h:jmp64]                       encoding(2 bytes) = 75 12
1056h lea rax,[rsp+558h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 05 00 00
105eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1062h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1066h jmp short 1091h               ; JMP(Jmp_rel8_64) [1091h:jmp64]                       encoding(2 bytes) = eb 29
1068h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
106ch mov [rsp+550h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 50 05 00 00
1074h mov rcx,[rsp+550h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 05 00 00
107ch lea rdx,[rsp+558h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 05 00 00
1084h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1087h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
108ah mov [rsp+560h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 05 00 00
1091h vmovdqu xmm0,xmmword ptr [rsp+558h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 05 00 00
109ah vmovdqu xmmword ptr [rsp+588h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 05 00 00
10a3h cmp ebp,[rsp+590h]            ; CMP(Cmp_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b ac 24 90 05 00 00
10aah jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 b2 10 00 00
10b0h movsxd rcx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBP]                    encoding(3 bytes) = 48 63 cd
10b3h shl rcx,4                     ; SHL(Shl_rm64_imm8) [RCX,4h:imm8]                     encoding(4 bytes) = 48 c1 e1 04
10b7h add rcx,[rsp+588h]            ; ADD(Add_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 8c 24 88 05 00 00
10bfh vmovdqu xmm0,xmmword ptr [rcx]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RCX:br,DS:sr)] encoding(VEX, 4 bytes) = c5 fa 6f 01
10c3h vmovdqu xmmword ptr [rsp+578h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 05 00 00
10cch vmovdqu xmm0,xmmword ptr [rsp+0B20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0b 00 00
10d5h vmovdqu xmmword ptr [rsp+568h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 05 00 00
10deh movzx ecx,word ptr [rsp+578h] ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RSP:br,SS:sr)]    encoding(8 bytes) = 0f b7 8c 24 78 05 00 00
10e6h cmp ecx,[rsp+570h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 70 05 00 00
10edh jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 6f 10 00 00
10f3h mov rax,[rsp+568h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 68 05 00 00
10fbh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
10feh movzx ecx,byte ptr [rax+rcx]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RAX:br,DS:sr)]      encoding(4 bytes) = 0f b6 0c 08
1102h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1104h mov [rsp+540h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 40 05 00 00
110bh lea rax,[rsp+540h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 05 00 00
1113h movzx edx,byte ptr [rsp+57Ah] ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 94 24 7a 05 00 00
111bh bt ecx,edx                    ; BT(Bt_rm32_r32) [ECX,EDX]                            encoding(3 bytes) = 0f a3 d1
111eh jb short 1124h                ; JB(Jb_rel8_64) [1124h:jmp64]                         encoding(2 bytes) = 72 04
1120h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1122h jmp short 1129h               ; JMP(Jmp_rel8_64) [1129h:jmp64]                       encoding(2 bytes) = eb 05
1124h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
1129h mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
112bh mov ecx,[rsp+540h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 05 00 00
1132h mov [rsp+548h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 05 00 00
1139h mov ecx,[rsp+548h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 05 00 00
1140h mov [rsp+538h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 05 00 00
1147h cmp dword ptr [rsp+538h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 38 05 00 00 01
114fh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
1152h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1155h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1157h mov [rsp+530h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 05 00 00
115eh lea rax,[rsp+530h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 30 05 00 00
1166h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
1168h jne short 116eh               ; JNE(Jne_rel8_64) [116Eh:jmp64]                       encoding(2 bytes) = 75 04
116ah xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
116ch jmp short 1173h               ; JMP(Jmp_rel8_64) [1173h:jmp64]                       encoding(2 bytes) = eb 05
116eh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
1173h mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
1175h mov ecx,[rsp+530h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 05 00 00
117ch mov [rsp+5F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 05 00 00
1183h mov ecx,[rsp+5F0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f0 05 00 00
118ah mov [rsp+528h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 05 00 00
1191h mov ecx,[rsp+528h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 05 00 00
1198h mov [rsp+520h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 05 00 00
119fh cmp dword ptr [rsp+520h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 20 05 00 00 01
11a7h je short 11bch                ; JE(Je_rel8_64) [11BCh:jmp64]                         encoding(2 bytes) = 74 13
11a9h mov byte ptr [rsp+518h],0     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = c6 84 24 18 05 00 00 00
11b1h movsx rcx,byte ptr [rsp+518h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 18 05 00 00
11bah jmp short 11cdh               ; JMP(Jmp_rel8_64) [11CDh:jmp64]                       encoding(2 bytes) = eb 11
11bch mov byte ptr [rsp+510h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 10 05 00 00 01
11c4h movsx rcx,byte ptr [rsp+510h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 10 05 00 00
11cdh mov [rsp+5E8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e8 05 00 00
11d4h mov ecx,[rsp+5F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 05 00 00
11dbh mov [rsp+508h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 05 00 00
11e2h movsx rcx,byte ptr [rsp+5E8h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 e8 05 00 00
11ebh mov [rsp+500h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 00 05 00 00
11f2h mov ecx,[rsp+508h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 05 00 00
11f9h mov [rsp+4F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 04 00 00
1200h movsx rcx,byte ptr [rsp+500h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 00 05 00 00
1209h mov [rsp+4E0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e0 04 00 00
1210h mov rcx,1E1F783AF00h          ; MOV(Mov_r64_imm64) [RCX,1e1f783af00h:imm64]          encoding(10 bytes) = 48 b9 00 af 83 f7 e1 01 00 00
121ah mov r15,[rcx]                 ; MOV(Mov_r64_rm64) [R15,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 39
121dh mov ecx,[rsp+4F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 04 00 00
1224h call 7FFDDBA1F710h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBF80h:jmp64]        encoding(5 bytes) = e8 57 ad ff ff
1229h cmp eax,[r15+8]               ; CMP(Cmp_r32_rm32) [EAX,mem(32u,R15:br,DS:sr)]        encoding(4 bytes) = 41 3b 47 08
122dh jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 2f 0f 00 00
1233h movsxd rcx,eax                ; MOVSXD(Movsxd_r64_rm32) [RCX,EAX]                    encoding(3 bytes) = 48 63 c8
1236h lea rcx,[r15+rcx*4+10h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,R15:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 8f 10
123bh vmovdqu xmm0,xmmword ptr [rsp+600h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 06 00 00
1244h vmovdqu xmmword ptr [rsp+4E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 04 00 00
124dh movzx edx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [EDX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 11
1250h cmp edx,[rsp+4F0h]            ; CMP(Cmp_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 94 24 f0 04 00 00
1257h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 05 0f 00 00
125dh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1260h add rdx,[rsp+4E8h]            ; ADD(Add_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 94 24 e8 04 00 00
1268h movzx ecx,byte ptr [rcx+2]    ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 49 02
126ch movsx rax,byte ptr [rsp+4E0h] ; MOVSX(Movsx_r64_rm8) [RAX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 84 24 e0 04 00 00
1275h mov [rsp+4D8h],al             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(7 bytes) = 88 84 24 d8 04 00 00
127ch movsx rax,byte ptr [rsp+4D8h] ; MOVSX(Movsx_r64_rm8) [RAX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 84 24 d8 04 00 00
1285h mov [rsp+4D0h],al             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(7 bytes) = 88 84 24 d0 04 00 00
128ch movsx rax,byte ptr [rsp+4D0h] ; MOVSX(Movsx_r64_rm8) [RAX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 84 24 d0 04 00 00
1295h mov [rsp+4C8h],al             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(7 bytes) = 88 84 24 c8 04 00 00
129ch cmp byte ptr [rsp+4C8h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 c8 04 00 00 00
12a4h je short 12b4h                ; JE(Je_rel8_64) [12B4h:jmp64]                         encoding(2 bytes) = 74 0e
12a6h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
12abh shl eax,cl                    ; SHL(Shl_rm32_CL) [EAX,CL]                            encoding(2 bytes) = d3 e0
12adh movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
12b0h or [rdx],cl                   ; OR(Or_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]              encoding(2 bytes) = 08 0a
12b2h jmp short 12c5h               ; JMP(Jmp_rel8_64) [12C5h:jmp64]                       encoding(2 bytes) = eb 11
12b4h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
12b9h shl eax,cl                    ; SHL(Shl_rm32_CL) [EAX,CL]                            encoding(2 bytes) = d3 e0
12bbh movzx ecx,al                  ; MOVZX(Movzx_r32_rm8) [ECX,AL]                        encoding(3 bytes) = 0f b6 c8
12beh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
12c0h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
12c3h and [rdx],cl                  ; AND(And_rm8_r8) [mem(8u,RDX:br,DS:sr),CL]            encoding(2 bytes) = 20 0a
12c5h inc r14d                      ; INC(Inc_rm32) [R14D]                                 encoding(3 bytes) = 41 ff c6
12c8h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
12d2h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
12d5h cmp r14d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 71 10
12d9h jl near ptr 1002h             ; JL(Jl_rel32_64) [1002h:jmp64]                        encoding(6 bytes) = 0f 8c 23 fd ff ff
12dfh vmovdqu xmm0,xmmword ptr [rsp+600h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 06 00 00
12e8h vmovdqu xmmword ptr [rsp+0B10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 0b 00 00
12f1h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
12fbh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1300h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 4b fb 23 5f
1305h mov ecx,[rsp+0B30h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 0b 00 00
130ch mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
130fh lea rcx,[rsp+4B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 04 00 00
1317h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
131bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
131fh lea rcx,[rsp+498h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 04 00 00
1327h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
132bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
132fh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
1333h mov [rsp+490h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 90 04 00 00
133bh mov rcx,[rsp+490h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 04 00 00
1343h lea rdx,[rsp+498h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 98 04 00 00
134bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
134eh mov dword ptr [rsp+4A0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 a0 04 00 00 01 00 00 00
1359h vmovdqu xmm0,xmmword ptr [rsp+498h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 04 00 00
1362h vmovdqu xmmword ptr [rsp+4A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 04 00 00
136bh lea rcx,[rsp+4B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 04 00 00
1373h vmovdqu xmm0,xmmword ptr [rsp+4A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 04 00 00
137ch vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1382h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
1387h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFBEB0h:jmp64]        encoding(5 bytes) = e8 24 ab ff ff
138ch vmovdqu xmm0,xmmword ptr [rsp+4B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 04 00 00
1395h vmovdqu xmmword ptr [rsp+0B00h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 0b 00 00
139eh vmovdqu xmm0,xmmword ptr [rsp+0B10h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 0b 00 00
13a7h vmovdqu xmmword ptr [rsp+480h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 04 00 00
13b0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
13b2h mov [rsp+478h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 78 04 00 00
13bah vmovdqu xmm0,xmmword ptr [rsp+480h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 04 00 00
13c3h vmovdqu xmmword ptr [rsp+450h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 04 00 00
13cch lea rdx,[rsp+440h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 04 00 00
13d4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
13d8h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
13dch mov rdx,1E1F783AED8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aed8h:imm64]          encoding(10 bytes) = 48 ba d8 ae 83 f7 e1 01 00 00
13e6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
13e9h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
13edh mov [rsp+438h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 38 04 00 00
13f5h mov rdx,[rsp+438h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 38 04 00 00
13fdh mov [rsp+430h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 30 04 00 00
1405h mov rdx,[rsp+430h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 30 04 00 00
140dh lea rcx,[rsp+448h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 04 00 00
1415h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1418h mov byte ptr [rsp+440h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 40 04 00 00 01
1420h vmovdqu xmm0,xmmword ptr [rsp+450h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 04 00 00
1429h vmovdqu xmmword ptr [rsp+3E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 03 00 00
1432h vmovdqu xmm0,xmmword ptr [rsp+440h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 04 00 00
143bh vmovdqu xmmword ptr [rsp+418h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 04 00 00
1444h mov qword ptr [rsp+3C0h],8    ; MOV(Mov_rm64_imm32) [mem(64u,RSP:br,SS:sr),8h:imm64] encoding(12 bytes) = 48 c7 84 24 c0 03 00 00 08 00 00 00
1450h mov rdx,[rsp+3C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 03 00 00
1458h mov [rsp+428h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 28 04 00 00
1460h vmovdqu xmm0,xmmword ptr [rsp+418h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 04 00 00
1469h vmovdqu xmmword ptr [rsp+408h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 04 00 00
1472h cmp byte ptr [rsp+408h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 08 04 00 00 00
147ah jne short 14e9h               ; JNE(Jne_rel8_64) [14E9h:jmp64]                       encoding(2 bytes) = 75 6d
147ch mov edx,[rsp+3F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 03 00 00
1483h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1486h mov [rsp+3B8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b8 03 00 00
148eh mov rdx,[rsp+3B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 03 00 00
1496h mov [rsp+3C8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 c8 03 00 00
149eh mov rdx,[rsp+428h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 04 00 00
14a6h mov [rsp+3B0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b0 03 00 00
14aeh mov rdx,[rsp+3C8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c8 03 00 00
14b6h mov [rsp+3A8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a8 03 00 00
14beh mov rdx,[rsp+3B0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b0 03 00 00
14c6h imul rdx,[rsp+3A8h]           ; IMUL(Imul_r64_rm64) [RDX,mem(64i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f af 94 24 a8 03 00 00
14cfh mov [rsp+3A0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a0 03 00 00
14d7h mov rdx,[rsp+3A0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a0 03 00 00
14dfh mov [rsp+400h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 00 04 00 00
14e7h jmp short 14f9h               ; JMP(Jmp_rel8_64) [14F9h:jmp64]                       encoding(2 bytes) = eb 10
14e9h mov rdx,[rsp+410h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 10 04 00 00
14f1h mov [rsp+400h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 00 04 00 00
14f9h mov rdx,[rsp+400h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 00 04 00 00
1501h mov [rsp+3F8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f8 03 00 00
1509h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
150bh mov rdx,[rsp+3F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 03 00 00
1513h mov [rsp+398h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 98 03 00 00
151bh mov edx,[rsp+398h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 03 00 00
1522h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1525h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
152fh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 1c f9 23 5f
1534h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
1537h xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
153ah cmp dword ptr [rsp+3F0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 f0 03 00 00 00
1542h jle near ptr 169bh            ; JLE(Jle_rel32_64) [169Bh:jmp64]                      encoding(6 bytes) = 0f 8e 53 01 00 00
1548h mov rcx,7FFDDB1E80C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1e80c8h:imm64]         encoding(10 bytes) = 48 b9 c8 80 1e db fd 7f 00 00
1552h mov edx,17Ch                  ; MOV(Mov_r32_imm32) [EDX,17ch:imm32]                  encoding(5 bytes) = ba 7c 01 00 00
1557h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F241120h:jmp64]                encoding(5 bytes) = e8 c4 fb 23 5f
155ch cmp r15d,[rsp+3F0h]           ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b bc 24 f0 03 00 00
1564h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 f8 0b 00 00
156ah movsxd rax,r15d               ; MOVSXD(Movsxd_r64_rm32) [RAX,R15D]                   encoding(3 bytes) = 49 63 c7
156dh add rax,[rsp+3E8h]            ; ADD(Add_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 84 24 e8 03 00 00
1575h movzx eax,byte ptr [rax]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RAX:br,DS:sr)]      encoding(3 bytes) = 0f b6 00
1578h mov rdx,1E1F78257C0h          ; MOV(Mov_r64_imm64) [RDX,1e1f78257c0h:imm64]          encoding(10 bytes) = 48 ba c0 57 82 f7 e1 01 00 00
1582h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1585h cmp eax,[rdx+8]               ; CMP(Cmp_r32_rm32) [EAX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 3b 42 08
1588h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 d4 0b 00 00
158eh movsxd rax,eax                ; MOVSXD(Movsxd_r64_rm32) [RAX,EAX]                    encoding(3 bytes) = 48 63 c0
1591h shl rax,5                     ; SHL(Shl_rm64_imm8) [RAX,5h:imm8]                     encoding(4 bytes) = 48 c1 e0 05
1595h mov rax,[rdx+rax+10h]         ; MOV(Mov_r64_rm64) [RAX,mem(64u,RDX:br,DS:sr)]        encoding(5 bytes) = 48 8b 44 02 10
159ah lea rdx,[rsp+368h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 68 03 00 00
15a2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
15a6h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
15aah test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
15adh jne short 15c1h               ; JNE(Jne_rel8_64) [15C1h:jmp64]                       encoding(2 bytes) = 75 12
15afh lea rax,[rsp+368h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 68 03 00 00
15b7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
15bbh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
15bfh jmp short 15ech               ; JMP(Jmp_rel8_64) [15ECh:jmp64]                       encoding(2 bytes) = eb 2b
15c1h cmp [rax],eax                 ; CMP(Cmp_rm32_r32) [mem(32u,RAX:br,DS:sr),EAX]        encoding(2 bytes) = 39 00
15c3h lea rdx,[rax+10h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 50 10
15c7h mov [rsp+360h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 60 03 00 00
15cfh mov rdx,[rsp+360h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 60 03 00 00
15d7h lea rcx,[rsp+368h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 68 03 00 00
15dfh mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
15e2h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
15e5h mov [rsp+370h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 70 03 00 00
15ech vmovdqu xmm0,xmmword ptr [rsp+368h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 03 00 00
15f5h vmovdqu xmmword ptr [rsp+378h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 03 00 00
15feh vmovdqu xmm0,xmmword ptr [rsp+378h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 03 00 00
1607h vmovdqu xmmword ptr [rsp+388h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 03 00 00
1610h vmovdqu xmm0,xmmword ptr [rsp+388h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 03 00 00
1619h vmovdqu xmmword ptr [rsp+3D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 03 00 00
1622h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1624h jmp short 1658h               ; JMP(Jmp_rel8_64) [1658h:jmp64]                       encoding(2 bytes) = eb 32
1626h cmp eax,[rsp+3E0h]            ; CMP(Cmp_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 84 24 e0 03 00 00
162dh jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 2f 0b 00 00
1633h mov rdx,[rsp+3D8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d8 03 00 00
163bh movsxd rcx,eax                ; MOVSXD(Movsxd_r64_rm32) [RCX,EAX]                    encoding(3 bytes) = 48 63 c8
163eh movzx edx,byte ptr [rdx+rcx]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(4 bytes) = 0f b6 14 0a
1642h cmp ebp,[r14+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R14:br,DS:sr)]        encoding(4 bytes) = 41 3b 6e 08
1646h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 16 0b 00 00
164ch movsxd rcx,ebp                ; MOVSXD(Movsxd_r64_rm32) [RCX,EBP]                    encoding(3 bytes) = 48 63 cd
164fh mov [r14+rcx+10h],dl          ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),DL]            encoding(5 bytes) = 41 88 54 0e 10
1654h inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
1656h inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
1658h mov rdx,[rsp+428h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 04 00 00
1660h mov [rsp+358h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 58 03 00 00
1668h cmp eax,[rsp+358h]            ; CMP(Cmp_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 84 24 58 03 00 00
166fh jge short 168ah               ; JGE(Jge_rel8_64) [168Ah:jmp64]                       encoding(2 bytes) = 7d 19
1671h mov rdx,[rsp+3F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 03 00 00
1679h mov [rsp+350h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 50 03 00 00
1681h cmp ebp,[rsp+350h]            ; CMP(Cmp_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b ac 24 50 03 00 00
1688h jl short 1626h                ; JL(Jl_rel8_64) [1626h:jmp64]                         encoding(2 bytes) = 7c 9c
168ah inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
168dh cmp r15d,[rsp+3F0h]           ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b bc 24 f0 03 00 00
1695h jl near ptr 155ch             ; JL(Jl_rel32_64) [155Ch:jmp64]                        encoding(6 bytes) = 0f 8c c1 fe ff ff
169bh mov [rsp+3D0h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 d0 03 00 00
16a3h mov rdx,[rsp+3D0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d0 03 00 00
16abh mov [rsp+478h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 78 04 00 00
16b3h vmovdqu xmm0,xmmword ptr [rsp+0B00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0b 00 00
16bch vmovdqu xmmword ptr [rsp+468h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 04 00 00
16c5h vmovdqu xmm0,xmmword ptr [rsp+468h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 04 00 00
16ceh vmovdqu xmmword ptr [rsp+340h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 03 00 00
16d7h lea rdx,[rsp+330h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 30 03 00 00
16dfh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
16e3h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
16e7h mov rdx,1E1F783AED8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aed8h:imm64]          encoding(10 bytes) = 48 ba d8 ae 83 f7 e1 01 00 00
16f1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
16f4h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
16f8h mov [rsp+328h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 28 03 00 00
1700h mov rdx,[rsp+328h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 03 00 00
1708h mov [rsp+320h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 20 03 00 00
1710h mov rdx,[rsp+320h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 03 00 00
1718h lea rcx,[rsp+338h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 03 00 00
1720h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1723h mov byte ptr [rsp+330h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 30 03 00 00 01
172bh vmovdqu xmm0,xmmword ptr [rsp+340h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 03 00 00
1734h vmovdqu xmmword ptr [rsp+2D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 02 00 00
173dh vmovdqu xmm0,xmmword ptr [rsp+330h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 03 00 00
1746h vmovdqu xmmword ptr [rsp+308h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 03 00 00
174fh mov qword ptr [rsp+2B0h],8    ; MOV(Mov_rm64_imm32) [mem(64u,RSP:br,SS:sr),8h:imm64] encoding(12 bytes) = 48 c7 84 24 b0 02 00 00 08 00 00 00
175bh mov rdx,[rsp+2B0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b0 02 00 00
1763h mov [rsp+318h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 18 03 00 00
176bh vmovdqu xmm0,xmmword ptr [rsp+308h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 03 00 00
1774h vmovdqu xmmword ptr [rsp+2F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 02 00 00
177dh cmp byte ptr [rsp+2F8h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 f8 02 00 00 00
1785h jne short 17f4h               ; JNE(Jne_rel8_64) [17F4h:jmp64]                       encoding(2 bytes) = 75 6d
1787h mov edx,[rsp+2E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 02 00 00
178eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1791h mov [rsp+2A8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a8 02 00 00
1799h mov rdx,[rsp+2A8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a8 02 00 00
17a1h mov [rsp+2B8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b8 02 00 00
17a9h mov rdx,[rsp+318h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 18 03 00 00
17b1h mov [rsp+2A0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a0 02 00 00
17b9h mov rdx,[rsp+2B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 02 00 00
17c1h mov [rsp+298h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 98 02 00 00
17c9h mov rdx,[rsp+2A0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a0 02 00 00
17d1h imul rdx,[rsp+298h]           ; IMUL(Imul_r64_rm64) [RDX,mem(64i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f af 94 24 98 02 00 00
17dah mov [rsp+290h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 90 02 00 00
17e2h mov rdx,[rsp+290h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 90 02 00 00
17eah mov [rsp+2F0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f0 02 00 00
17f2h jmp short 1804h               ; JMP(Jmp_rel8_64) [1804h:jmp64]                       encoding(2 bytes) = eb 10
17f4h mov rdx,[rsp+300h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 00 03 00 00
17fch mov [rsp+2F0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f0 02 00 00
1804h mov rdx,[rsp+2F0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f0 02 00 00
180ch mov [rsp+2E8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 e8 02 00 00
1814h xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
1817h mov rdx,[rsp+2E8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e8 02 00 00
181fh mov [rsp+288h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 88 02 00 00
1827h mov edx,[rsp+288h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 02 00 00
182eh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1831h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
183bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 10 f6 23 5f
1840h mov rbp,rax                   ; MOV(Mov_r64_rm64) [RBP,RAX]                          encoding(3 bytes) = 48 8b e8
1843h xor r14d,r14d                 ; XOR(Xor_r32_rm32) [R14D,R14D]                        encoding(3 bytes) = 45 33 f6
1846h cmp dword ptr [rsp+2E0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 e0 02 00 00 00
184eh jle near ptr 19a8h            ; JLE(Jle_rel32_64) [19A8h:jmp64]                      encoding(6 bytes) = 0f 8e 54 01 00 00
1854h mov rcx,7FFDDB1E80C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1e80c8h:imm64]         encoding(10 bytes) = 48 b9 c8 80 1e db fd 7f 00 00
185eh mov edx,17Ch                  ; MOV(Mov_r32_imm32) [EDX,17ch:imm32]                  encoding(5 bytes) = ba 7c 01 00 00
1863h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F241120h:jmp64]                encoding(5 bytes) = e8 b8 f8 23 5f
1868h cmp r14d,[rsp+2E0h]           ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b b4 24 e0 02 00 00
1870h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 ec 08 00 00
1876h movsxd rcx,r14d               ; MOVSXD(Movsxd_r64_rm32) [RCX,R14D]                   encoding(3 bytes) = 49 63 ce
1879h add rcx,[rsp+2D8h]            ; ADD(Add_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 8c 24 d8 02 00 00
1881h movzx ecx,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 09
1884h mov rdx,1E1F78257C0h          ; MOV(Mov_r64_imm64) [RDX,1e1f78257c0h:imm64]          encoding(10 bytes) = 48 ba c0 57 82 f7 e1 01 00 00
188eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1891h cmp ecx,[rdx+8]               ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 3b 4a 08
1894h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 c8 08 00 00
189ah movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
189dh shl rcx,5                     ; SHL(Shl_rm64_imm8) [RCX,5h:imm8]                     encoding(4 bytes) = 48 c1 e1 05
18a1h mov rcx,[rdx+rcx+10h]         ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c 0a 10
18a6h lea rdx,[rsp+258h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 02 00 00
18aeh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
18b2h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
18b6h test rcx,rcx                  ; TEST(Test_rm64_r64) [RCX,RCX]                        encoding(3 bytes) = 48 85 c9
18b9h jne short 18cdh               ; JNE(Jne_rel8_64) [18CDh:jmp64]                       encoding(2 bytes) = 75 12
18bbh lea rcx,[rsp+258h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 02 00 00
18c3h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
18c7h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
18cbh jmp short 18f8h               ; JMP(Jmp_rel8_64) [18F8h:jmp64]                       encoding(2 bytes) = eb 2b
18cdh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
18cfh lea rdx,[rcx+10h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 51 10
18d3h mov [rsp+250h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 50 02 00 00
18dbh mov rdx,[rsp+250h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 50 02 00 00
18e3h lea rax,[rsp+258h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 02 00 00
18ebh mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
18eeh mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
18f1h mov [rsp+260h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 02 00 00
18f8h vmovdqu xmm0,xmmword ptr [rsp+258h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 02 00 00
1901h vmovdqu xmmword ptr [rsp+268h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 02 00 00
190ah vmovdqu xmm0,xmmword ptr [rsp+268h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 02 00 00
1913h vmovdqu xmmword ptr [rsp+278h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 02 00 00
191ch vmovdqu xmm0,xmmword ptr [rsp+278h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 02 00 00
1925h vmovdqu xmmword ptr [rsp+2C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 02 00 00
192eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1930h jmp short 1964h               ; JMP(Jmp_rel8_64) [1964h:jmp64]                       encoding(2 bytes) = eb 32
1932h cmp ecx,[rsp+2D0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 d0 02 00 00
1939h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 23 08 00 00
193fh mov rdx,[rsp+2C8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c8 02 00 00
1947h movsxd rax,ecx                ; MOVSXD(Movsxd_r64_rm32) [RAX,ECX]                    encoding(3 bytes) = 48 63 c1
194ah movzx edx,byte ptr [rdx+rax]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(4 bytes) = 0f b6 14 02
194eh cmp r15d,[rbp+8]              ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RBP:br,SS:sr)]       encoding(4 bytes) = 44 3b 7d 08
1952h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 0a 08 00 00
1958h movsxd rax,r15d               ; MOVSXD(Movsxd_r64_rm32) [RAX,R15D]                   encoding(3 bytes) = 49 63 c7
195bh mov [rbp+rax+10h],dl          ; MOV(Mov_rm8_r8) [mem(8u,RBP:br,SS:sr),DL]            encoding(4 bytes) = 88 54 05 10
195fh inc ecx                       ; INC(Inc_rm32) [ECX]                                  encoding(2 bytes) = ff c1
1961h inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
1964h mov rdx,[rsp+318h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 18 03 00 00
196ch mov [rsp+248h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 48 02 00 00
1974h cmp ecx,[rsp+248h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 48 02 00 00
197bh jge short 1997h               ; JGE(Jge_rel8_64) [1997h:jmp64]                       encoding(2 bytes) = 7d 1a
197dh mov rdx,[rsp+2E8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 e8 02 00 00
1985h mov [rsp+240h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 40 02 00 00
198dh cmp r15d,[rsp+240h]           ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b bc 24 40 02 00 00
1995h jl short 1932h                ; JL(Jl_rel8_64) [1932h:jmp64]                         encoding(2 bytes) = 7c 9b
1997h inc r14d                      ; INC(Inc_rm32) [R14D]                                 encoding(3 bytes) = 41 ff c6
199ah cmp r14d,[rsp+2E0h]           ; CMP(Cmp_r32_rm32) [R14D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b b4 24 e0 02 00 00
19a2h jl near ptr 1868h             ; JL(Jl_rel32_64) [1868h:jmp64]                        encoding(6 bytes) = 0f 8c c0 fe ff ff
19a8h mov [rsp+2C0h],rbp            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RBP]        encoding(8 bytes) = 48 89 ac 24 c0 02 00 00
19b0h mov rdx,[rsp+2C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 02 00 00
19b8h mov [rsp+460h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 60 04 00 00
19c0h mov rdx,[rsp+460h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 60 04 00 00
19c8h mov [rsp+230h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 30 02 00 00
19d0h mov rdx,[rsp+478h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 78 04 00 00
19d8h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
19dbh mov rcx,[rsp+478h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 04 00 00
19e3h mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
19e6h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
19e8h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
19eah test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
19ech jl short 1a13h                ; JL(Jl_rel8_64) [1A13h:jmp64]                         encoding(2 bytes) = 7c 25
19eeh mov r8,[rsp+478h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 78 04 00 00
19f6h cmp ecx,[r8+8]                ; CMP(Cmp_r32_rm32) [ECX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 48 08
19fah jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 62 07 00 00
1a00h movsxd r9,ecx                 ; MOVSXD(Movsxd_r64_rm32) [R9,ECX]                     encoding(3 bytes) = 4c 63 c9
1a03h cmp byte ptr [r8+r9+10h],0    ; CMP(Cmp_rm8_imm8) [mem(8u,R8:br,DS:sr),0h:imm8]      encoding(6 bytes) = 43 80 7c 08 10 00
1a09h jne short 1a13h               ; JNE(Jne_rel8_64) [1A13h:jmp64]                       encoding(2 bytes) = 75 08
1a0bh inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
1a0dh dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
1a0fh test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
1a11h jge short 19eeh               ; JGE(Jge_rel8_64) [19EEh:jmp64]                       encoding(2 bytes) = 7d db
1a13h sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
1a15h lea rcx,[rsp+478h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 04 00 00
1a1dh call 7FFDDB81CF28h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF9798h:jmp64]        encoding(5 bytes) = e8 76 7d df ff
1a22h mov [rsp+238h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 38 02 00 00
1a2ah mov rdx,[rsp+230h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 30 02 00 00
1a32h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
1a35h mov rcx,[rsp+230h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 02 00 00
1a3dh mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
1a40h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
1a42h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1a44h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
1a46h jl short 1a6dh                ; JL(Jl_rel8_64) [1A6Dh:jmp64]                         encoding(2 bytes) = 7c 25
1a48h mov r8,[rsp+230h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 30 02 00 00
1a50h cmp ecx,[r8+8]                ; CMP(Cmp_r32_rm32) [ECX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 48 08
1a54h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 08 07 00 00
1a5ah movsxd r9,ecx                 ; MOVSXD(Movsxd_r64_rm32) [R9,ECX]                     encoding(3 bytes) = 4c 63 c9
1a5dh cmp byte ptr [r8+r9+10h],0    ; CMP(Cmp_rm8_imm8) [mem(8u,R8:br,DS:sr),0h:imm8]      encoding(6 bytes) = 43 80 7c 08 10 00
1a63h jne short 1a6dh               ; JNE(Jne_rel8_64) [1A6Dh:jmp64]                       encoding(2 bytes) = 75 08
1a65h inc eax                       ; INC(Inc_rm32) [EAX]                                  encoding(2 bytes) = ff c0
1a67h dec ecx                       ; DEC(Dec_rm32) [ECX]                                  encoding(2 bytes) = ff c9
1a69h test ecx,ecx                  ; TEST(Test_rm32_r32) [ECX,ECX]                        encoding(2 bytes) = 85 c9
1a6bh jge short 1a48h               ; JGE(Jge_rel8_64) [1A48h:jmp64]                       encoding(2 bytes) = 7d db
1a6dh sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
1a6fh lea rcx,[rsp+230h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 02 00 00
1a77h call 7FFDDB81CF28h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF9798h:jmp64]        encoding(5 bytes) = e8 1c 7d df ff
1a7ch mov [rsp+228h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 28 02 00 00
1a84h mov r8,[rsp+238h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 38 02 00 00
1a8ch mov r14d,[r8+8]               ; MOV(Mov_r32_rm32) [R14D,mem(32u,R8:br,DS:sr)]        encoding(4 bytes) = 45 8b 70 08
1a90h mov r8d,r14d                  ; MOV(Mov_r32_rm32) [R8D,R14D]                         encoding(3 bytes) = 45 8b c6
1a93h mov rdx,[rsp+228h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 02 00 00
1a9bh mov r15d,[rdx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RDX:br,DS:sr)]       encoding(4 bytes) = 44 8b 7a 08
1a9fh cmp r15d,r8d                  ; CMP(Cmp_r32_rm32) [R15D,R8D]                         encoding(3 bytes) = 45 3b f8
1aa2h je short 1aa8h                ; JE(Je_rel8_64) [1AA8h:jmp64]                         encoding(2 bytes) = 74 04
1aa4h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
1aa6h jmp short 1af4h               ; JMP(Jmp_rel8_64) [1AF4h:jmp64]                       encoding(2 bytes) = eb 4c
1aa8h xor r12d,r12d                 ; XOR(Xor_r32_rm32) [R12D,R12D]                        encoding(3 bytes) = 45 33 e4
1aabh test r14d,r14d                ; TEST(Test_rm32_r32) [R14D,R14D]                      encoding(3 bytes) = 45 85 f6
1aaeh jle short 1aebh               ; JLE(Jle_rel8_64) [1AEBh:jmp64]                       encoding(2 bytes) = 7e 3b
1ab0h mov rcx,[rsp+238h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 02 00 00
1ab8h cmp r12d,r14d                 ; CMP(Cmp_r32_rm32) [R12D,R14D]                        encoding(3 bytes) = 45 3b e6
1abbh jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 a1 06 00 00
1ac1h movsxd rdx,r12d               ; MOVSXD(Movsxd_r64_rm32) [RDX,R12D]                   encoding(3 bytes) = 49 63 d4
1ac4h movzx ecx,byte ptr [rcx+rdx+10h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]    encoding(5 bytes) = 0f b6 4c 11 10
1ac9h mov rdx,[rsp+228h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 02 00 00
1ad1h cmp r12d,r15d                 ; CMP(Cmp_r32_rm32) [R12D,R15D]                        encoding(3 bytes) = 45 3b e7
1ad4h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 88 06 00 00
1adah movsxd rax,r12d               ; MOVSXD(Movsxd_r64_rm32) [RAX,R12D]                   encoding(3 bytes) = 49 63 c4
1addh cmp cl,[rdx+rax+10h]          ; CMP(Cmp_r8_rm8) [CL,mem(8u,RDX:br,DS:sr)]            encoding(4 bytes) = 3a 4c 02 10
1ae1h jne short 1af2h               ; JNE(Jne_rel8_64) [1AF2h:jmp64]                       encoding(2 bytes) = 75 0f
1ae3h inc r12d                      ; INC(Inc_rm32) [R12D]                                 encoding(3 bytes) = 41 ff c4
1ae6h cmp r14d,r12d                 ; CMP(Cmp_r32_rm32) [R14D,R12D]                        encoding(3 bytes) = 45 3b f4
1ae9h jg short 1ab0h                ; JG(Jg_rel8_64) [1AB0h:jmp64]                         encoding(2 bytes) = 7f c5
1aebh mov ebp,1                     ; MOV(Mov_r32_imm32) [EBP,1h:imm32]                    encoding(5 bytes) = bd 01 00 00 00
1af0h jmp short 1af4h               ; JMP(Jmp_rel8_64) [1AF4h:jmp64]                       encoding(2 bytes) = eb 02
1af2h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
1af4h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1af7h mov [rsp+0A88h],r8            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(8 bytes) = 4c 89 84 24 88 0a 00 00
1affh mov dword ptr [rsp+0A8Ch],9Bh ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),9bh:imm32] encoding(11 bytes) = c7 84 24 8c 0a 00 00 9b 00 00 00
1b0ah mov byte ptr [rsp+0A88h],1    ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 88 0a 00 00 01
1b12h mov r8,[rsp+0A88h]            ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 88 0a 00 00
1b1ah mov [rsp+220h],r8             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(8 bytes) = 4c 89 84 24 20 02 00 00
1b22h test bpl,bpl                  ; TEST(Test_rm8_r8) [BPL,BPL]                          encoding(3 bytes) = 40 84 ed
1b25h jne short 1b50h               ; JNE(Jne_rel8_64) [1B50h:jmp64]                       encoding(2 bytes) = 75 29
1b27h mov r8,1E1F7836F50h           ; MOV(Mov_r64_imm64) [R8,1e1f7836f50h:imm64]           encoding(10 bytes) = 49 b8 50 6f 83 f7 e1 01 00 00
1b31h mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
1b34h mov rdx,1E1F7836F50h          ; MOV(Mov_r64_imm64) [RDX,1e1f7836f50h:imm64]          encoding(10 bytes) = 48 ba 50 6f 83 f7 e1 01 00 00
1b3eh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1b41h mov r9,[rsp+220h]             ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 8c 24 20 02 00 00
1b49h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1b4bh call 7FFDDB131420h            ; CALL(Call_rel32_64) [FFFFFFFFFF70DC90h:jmp64]        encoding(5 bytes) = e8 40 c1 70 ff
1b50h vmovdqu xmm0,xmmword ptr [rsp+0B20h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 0b 00 00
1b59h vmovdqu xmmword ptr [rsp+210h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 02 00 00
1b62h vmovdqu xmm0,xmmword ptr [rsp+210h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 02 00 00
1b6bh vmovdqu xmmword ptr [rsp+200h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 02 00 00
1b74h mov r14,rsi                   ; MOV(Mov_r64_rm64) [R14,RSI]                          encoding(3 bytes) = 4c 8b f6
1b77h vmovdqu xmm0,xmmword ptr [rsp+200h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 02 00 00
1b80h vmovdqu xmmword ptr [rsp+30h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 30
1b86h lea rcx,[rsp+30h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 30
1b8bh mov rdx,1E1F7836F48h          ; MOV(Mov_r64_imm64) [RDX,1e1f7836f48h:imm64]          encoding(10 bytes) = 48 ba 48 6f 83 f7 e1 01 00 00
1b95h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1b98h call 7FFDDBA233D8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFC48h:jmp64]        encoding(5 bytes) = e8 ab e0 ff ff
1b9dh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1ba0h mov rcx,r14                   ; MOV(Mov_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 8b ce
1ba3h mov rax,[r14]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,R14:br,DS:sr)]        encoding(3 bytes) = 49 8b 06
1ba6h mov rax,[rax+58h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 58
1baah call qword ptr [rax+10h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 10
1badh mov rcx,7FFDDB381E60h         ; MOV(Mov_r64_imm64) [RCX,7ffddb381e60h:imm64]         encoding(10 bytes) = 48 b9 60 1e 38 db fd 7f 00 00
1bb7h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F240D20h:jmp64]                encoding(5 bytes) = e8 64 f1 23 5f
1bbch mov r12,rax                   ; MOV(Mov_r64_rm64) [R12,RAX]                          encoding(3 bytes) = 4c 8b e0
1bbfh mov dword ptr [r12+20h],7FFFFFFFh; MOV(Mov_rm32_imm32) [mem(32u,R12:br,DS:sr),7fffffffh:imm32] encoding(9 bytes) = 41 c7 44 24 20 ff ff ff 7f
1bc8h mov rcx,7FFDDB3806F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb3806f0h:imm64]         encoding(10 bytes) = 48 b9 f0 06 38 db fd 7f 00 00
1bd2h mov edx,10h                   ; MOV(Mov_r32_imm32) [EDX,10h:imm32]                   encoding(5 bytes) = ba 10 00 00 00
1bd7h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 74 f2 23 5f
1bdch lea rcx,[r12+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,R12:br,DS:sr)]       encoding(5 bytes) = 49 8d 4c 24 08
1be1h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
1be4h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F23FE60h:jmp64]                encoding(5 bytes) = e8 77 e2 23 5f
1be9h xor r15d,r15d                 ; XOR(Xor_r32_rm32) [R15D,R15D]                        encoding(3 bytes) = 45 33 ff
1bech mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
1bf6h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1bf9h cmp dword ptr [rcx+10h],0     ; CMP(Cmp_rm32_imm8) [mem(32u,RCX:br,DS:sr),0h:imm32]  encoding(4 bytes) = 83 79 10 00
1bfdh jle near ptr 20efh            ; JLE(Jle_rel32_64) [20EFh:jmp64]                      encoding(6 bytes) = 0f 8e ec 04 00 00
1c03h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
1c0dh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1c10h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1c14h mov edx,r15d                  ; MOV(Mov_r32_rm32) [EDX,R15D]                         encoding(3 bytes) = 41 8b d7
1c17h mov r11,7FFDDB000FB8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fb8h:imm64]         encoding(10 bytes) = 49 bb b8 0f 00 db fd 7f 00 00
1c21h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1c23h call qword ptr [7FFDDB000FB8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 ff bb 5d ff
1c29h lea rcx,[rsp+1B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 01 00 00
1c31h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c35h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1c39h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1c3ch jne short 1c50h               ; JNE(Jne_rel8_64) [1C50h:jmp64]                       encoding(2 bytes) = 75 12
1c3eh lea rax,[rsp+1B8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b8 01 00 00
1c46h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1c4ah vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1c4eh jmp short 1c7bh               ; JMP(Jmp_rel8_64) [1C7Bh:jmp64]                       encoding(2 bytes) = eb 2b
1c50h cmp [rax],eax                 ; CMP(Cmp_rm32_r32) [mem(32u,RAX:br,DS:sr),EAX]        encoding(2 bytes) = 39 00
1c52h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1c56h mov [rsp+1B0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 b0 01 00 00
1c5eh mov rcx,[rsp+1B0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b0 01 00 00
1c66h lea rdx,[rsp+1B8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b8 01 00 00
1c6eh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1c71h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
1c74h mov [rsp+1C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 01 00 00
1c7bh vmovdqu xmm0,xmmword ptr [rsp+1B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 01 00 00
1c84h vmovdqu xmmword ptr [rsp+1C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 01 00 00
1c8dh cmp dword ptr [rsp+1D0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 d0 01 00 00 00
1c95h jbe near ptr 2162h            ; JBE(Jbe_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 86 c7 04 00 00
1c9bh mov rcx,[rsp+1C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 01 00 00
1ca3h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1ca6h mov rdx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 ba 40 ae 83 f7 e1 01 00 00
1cb0h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1cb3h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1cb6h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
1cb8h mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
1cbbh add rax,r8                    ; ADD(Add_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 03 c0
1cbeh cmp rax,rbx                   ; CMP(Cmp_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 3b c3
1cc1h ja near ptr 215ch             ; JA(Ja_rel32_64) [215Ch:jmp64]                        encoding(6 bytes) = 0f 87 95 04 00 00
1cc7h mov rax,[rsp+210h]            ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 84 24 10 02 00 00
1ccfh lea r8,[rsp+1A0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 a0 01 00 00
1cd7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1cdbh vmovdqu xmmword ptr [r8],xmm0 ; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,R8:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c4 c1 7a 7f 00
1ce0h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1ce3h add rcx,rax                   ; ADD(Add_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 03 c8
1ce6h mov [rsp+198h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 01 00 00
1ceeh mov rcx,[rsp+198h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 01 00 00
1cf6h lea rax,[rsp+1A0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a0 01 00 00
1cfeh mov [rax],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 08
1d01h mov [rsp+1A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 01 00 00
1d08h vmovdqu xmm0,xmmword ptr [rsp+1A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 01 00 00
1d11h vmovdqu xmmword ptr [rsp+1D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 01 00 00
1d1ah vmovdqu xmm0,xmmword ptr [rsp+1D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 01 00 00
1d23h vmovdqu xmmword ptr [rsp+188h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 01 00 00
1d2ch lea rcx,[rsp+178h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 01 00 00
1d34h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1d38h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1d3ch lea rcx,[rsp+178h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 01 00 00
1d44h vmovdqu xmm0,xmmword ptr [rsp+188h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 01 00 00
1d4dh vmovdqu xmmword ptr [rsp+40h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 40
1d53h lea rdx,[rsp+40h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 40
1d58h call 7FFDDBA1EBC8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFB438h:jmp64]        encoding(5 bytes) = e8 db 96 ff ff
1d5dh vmovdqu xmm0,xmmword ptr [rsp+178h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 01 00 00
1d66h vmovdqu xmmword ptr [rsp+1F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 01 00 00
1d6fh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1d71h mov [rsp+1E8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e8 01 00 00
1d79h mov dword ptr [rsp+1ECh],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 ec 01 00 00 01 00 00 00
1d84h mov byte ptr [rsp+1E8h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 e8 01 00 00 01
1d8ch mov rcx,[rsp+1E8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e8 01 00 00
1d94h mov [rsp+168h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 68 01 00 00
1d9ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1d9eh mov [rsp+170h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 01 00 00
1da6h vmovdqu xmm0,xmmword ptr [rsp+1F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 01 00 00
1dafh vmovdqu xmmword ptr [rsp+150h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 01 00 00
1db8h lea rcx,[rsp+140h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 01 00 00
1dc0h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1dc4h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1dc8h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
1dd2h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1dd7h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F20BC50h:jmp64]                encoding(5 bytes) = e8 74 9e 20 5f
1ddch mov rdx,1E1F783AE50h          ; MOV(Mov_r64_imm64) [RDX,1e1f783ae50h:imm64]          encoding(10 bytes) = 48 ba 50 ae 83 f7 e1 01 00 00
1de6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1de9h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
1dedh mov [rsp+138h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 38 01 00 00
1df5h mov rdx,[rsp+138h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 38 01 00 00
1dfdh mov [rsp+130h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 30 01 00 00
1e05h mov rdx,[rsp+130h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 30 01 00 00
1e0dh lea rcx,[rsp+148h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 01 00 00
1e15h mov [rcx],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 11
1e18h mov byte ptr [rsp+140h],1     ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),1h:imm8]     encoding(8 bytes) = c6 84 24 40 01 00 00 01
1e20h vmovdqu xmm0,xmmword ptr [rsp+150h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 01 00 00
1e29h vmovdqu xmmword ptr [rsp+0E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 00 00 00
1e32h vmovdqu xmm0,xmmword ptr [rsp+140h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 01 00 00
1e3bh vmovdqu xmmword ptr [rsp+118h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 01 00 00
1e44h mov qword ptr [rsp+0C0h],8    ; MOV(Mov_rm64_imm32) [mem(64u,RSP:br,SS:sr),8h:imm64] encoding(12 bytes) = 48 c7 84 24 c0 00 00 00 08 00 00 00
1e50h mov rdx,[rsp+0C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 00 00 00
1e58h mov [rsp+128h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 28 01 00 00
1e60h vmovdqu xmm0,xmmword ptr [rsp+118h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 01 00 00
1e69h vmovdqu xmmword ptr [rsp+108h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 01 00 00
1e72h cmp byte ptr [rsp+108h],0     ; CMP(Cmp_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(8 bytes) = 80 bc 24 08 01 00 00 00
1e7ah jne short 1ee9h               ; JNE(Jne_rel8_64) [1EE9h:jmp64]                       encoding(2 bytes) = 75 6d
1e7ch mov edx,[rsp+0F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 00 00 00
1e83h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1e86h mov [rsp+0B8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b8 00 00 00
1e8eh mov rdx,[rsp+0B8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b8 00 00 00
1e96h mov [rsp+0C8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 c8 00 00 00
1e9eh mov rdx,[rsp+128h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 01 00 00
1ea6h mov [rsp+0B0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 b0 00 00 00
1eaeh mov rdx,[rsp+0C8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c8 00 00 00
1eb6h mov [rsp+0A8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a8 00 00 00
1ebeh mov rdx,[rsp+0B0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 b0 00 00 00
1ec6h imul rdx,[rsp+0A8h]           ; IMUL(Imul_r64_rm64) [RDX,mem(64i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f af 94 24 a8 00 00 00
1ecfh mov [rsp+0A0h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 a0 00 00 00
1ed7h mov rdx,[rsp+0A0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 a0 00 00 00
1edfh mov [rsp+100h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 00 01 00 00
1ee7h jmp short 1ef9h               ; JMP(Jmp_rel8_64) [1EF9h:jmp64]                       encoding(2 bytes) = eb 10
1ee9h mov rdx,[rsp+110h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 10 01 00 00
1ef1h mov [rsp+100h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 00 01 00 00
1ef9h mov rdx,[rsp+100h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 00 01 00 00
1f01h mov [rsp+0F8h],rdx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 f8 00 00 00
1f09h xor ebp,ebp                   ; XOR(Xor_r32_rm32) [EBP,EBP]                          encoding(2 bytes) = 33 ed
1f0bh mov rdx,[rsp+0F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 00 00 00
1f13h mov [rsp+98h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(8 bytes) = 48 89 94 24 98 00 00 00
1f1bh mov edx,[rsp+98h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 00 00 00
1f22h movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
1f25h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1f2fh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F240E50h:jmp64]                encoding(5 bytes) = e8 1c ef 23 5f
1f34h mov r14,rax                   ; MOV(Mov_r64_rm64) [R14,RAX]                          encoding(3 bytes) = 4c 8b f0
1f37h xor r13d,r13d                 ; XOR(Xor_r32_rm32) [R13D,R13D]                        encoding(3 bytes) = 45 33 ed
1f3ah cmp dword ptr [rsp+0F0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 f0 00 00 00 00
1f42h jle near ptr 2074h            ; JLE(Jle_rel32_64) [2074h:jmp64]                      encoding(6 bytes) = 0f 8e 2c 01 00 00
1f48h mov rcx,7FFDDB1E80C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb1e80c8h:imm64]         encoding(10 bytes) = 48 b9 c8 80 1e db fd 7f 00 00
1f52h mov edx,17Ch                  ; MOV(Mov_r32_imm32) [EDX,17ch:imm32]                  encoding(5 bytes) = ba 7c 01 00 00
1f57h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F241120h:jmp64]                encoding(5 bytes) = e8 c4 f1 23 5f
1f5ch cmp r13d,[rsp+0F0h]           ; CMP(Cmp_r32_rm32) [R13D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b ac 24 f0 00 00 00
1f64h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 f8 01 00 00
1f6ah movsxd rcx,r13d               ; MOVSXD(Movsxd_r64_rm32) [RCX,R13D]                   encoding(3 bytes) = 49 63 cd
1f6dh add rcx,[rsp+0E8h]            ; ADD(Add_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 03 8c 24 e8 00 00 00
1f75h movzx ecx,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 09
1f78h mov rdx,1E1F78257C0h          ; MOV(Mov_r64_imm64) [RDX,1e1f78257c0h:imm64]          encoding(10 bytes) = 48 ba c0 57 82 f7 e1 01 00 00
1f82h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
1f85h cmp ecx,[rdx+8]               ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 3b 4a 08
1f88h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 d4 01 00 00
1f8eh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1f91h shl rcx,5                     ; SHL(Shl_rm64_imm8) [RCX,5h:imm8]                     encoding(4 bytes) = 48 c1 e1 05
1f95h mov rcx,[rdx+rcx+10h]         ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDX:br,DS:sr)]        encoding(5 bytes) = 48 8b 4c 0a 10
1f9ah lea rdx,[rsp+68h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 68
1f9fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1fa3h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
1fa7h test rcx,rcx                  ; TEST(Test_rm64_r64) [RCX,RCX]                        encoding(3 bytes) = 48 85 c9
1faah jne short 1fbbh               ; JNE(Jne_rel8_64) [1FBBh:jmp64]                       encoding(2 bytes) = 75 0f
1fach lea rcx,[rsp+68h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 68
1fb1h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1fb5h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1fb9h jmp short 1fdah               ; JMP(Jmp_rel8_64) [1FDAh:jmp64]                       encoding(2 bytes) = eb 1f
1fbbh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1fbdh lea rdx,[rcx+10h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 51 10
1fc1h mov [rsp+60h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 60
1fc6h mov rdx,[rsp+60h]             ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 54 24 60
1fcbh lea rax,[rsp+68h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 68
1fd0h mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
1fd3h mov ecx,[rcx+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 08
1fd6h mov [rsp+70h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 70
1fdah vmovdqu xmm0,xmmword ptr [rsp+68h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 68
1fe0h vmovdqu xmmword ptr [rsp+78h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 78
1fe6h vmovdqu xmm0,xmmword ptr [rsp+78h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 78
1fech vmovdqu xmmword ptr [rsp+88h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 00 00 00
1ff5h vmovdqu xmm0,xmmword ptr [rsp+88h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 00 00 00
1ffeh vmovdqu xmmword ptr [rsp+0D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 00 00 00
2007h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
2009h jmp short 203dh               ; JMP(Jmp_rel8_64) [203Dh:jmp64]                       encoding(2 bytes) = eb 32
200bh cmp ecx,[rsp+0E0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 e0 00 00 00
2012h jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 4a 01 00 00
2018h mov rdx,[rsp+0D8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d8 00 00 00
2020h movsxd rax,ecx                ; MOVSXD(Movsxd_r64_rm32) [RAX,ECX]                    encoding(3 bytes) = 48 63 c1
2023h movzx edx,byte ptr [rdx+rax]  ; MOVZX(Movzx_r32_rm8) [EDX,mem(8u,RDX:br,DS:sr)]      encoding(4 bytes) = 0f b6 14 02
2027h cmp ebp,[r14+8]               ; CMP(Cmp_r32_rm32) [EBP,mem(32u,R14:br,DS:sr)]        encoding(4 bytes) = 41 3b 6e 08
202bh jae near ptr 2162h            ; JAE(Jae_rel32_64) [2162h:jmp64]                      encoding(6 bytes) = 0f 83 31 01 00 00
2031h movsxd rax,ebp                ; MOVSXD(Movsxd_r64_rm32) [RAX,EBP]                    encoding(3 bytes) = 48 63 c5
2034h mov [r14+rax+10h],dl          ; MOV(Mov_rm8_r8) [mem(8u,R14:br,DS:sr),DL]            encoding(5 bytes) = 41 88 54 06 10
2039h inc ecx                       ; INC(Inc_rm32) [ECX]                                  encoding(2 bytes) = ff c1
203bh inc ebp                       ; INC(Inc_rm32) [EBP]                                  encoding(2 bytes) = ff c5
203dh mov rdx,[rsp+128h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 01 00 00
2045h mov [rsp+58h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 58
204ah cmp ecx,[rsp+58h]             ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 3b 4c 24 58
204eh jge short 2063h               ; JGE(Jge_rel8_64) [2063h:jmp64]                       encoding(2 bytes) = 7d 13
2050h mov rdx,[rsp+0F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 00 00 00
2058h mov [rsp+50h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDX]        encoding(5 bytes) = 48 89 54 24 50
205dh cmp ebp,[rsp+50h]             ; CMP(Cmp_r32_rm32) [EBP,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 3b 6c 24 50
2061h jl short 200bh                ; JL(Jl_rel8_64) [200Bh:jmp64]                         encoding(2 bytes) = 7c a8
2063h inc r13d                      ; INC(Inc_rm32) [R13D]                                 encoding(3 bytes) = 41 ff c5
2066h cmp r13d,[rsp+0F0h]           ; CMP(Cmp_r32_rm32) [R13D,mem(32u,RSP:br,SS:sr)]       encoding(8 bytes) = 44 3b ac 24 f0 00 00 00
206eh jl near ptr 1f5ch             ; JL(Jl_rel32_64) [1F5Ch:jmp64]                        encoding(6 bytes) = 0f 8c e8 fe ff ff
2074h mov [rsp+0D0h],r14            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R14]        encoding(8 bytes) = 4c 89 b4 24 d0 00 00 00
207ch mov rcx,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 00 00 00
2084h mov [rsp+170h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 01 00 00
208ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
208eh mov [rsp+160h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 01 00 00
2095h mov ecx,[rsp+160h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 01 00 00
209ch mov [rsp+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 20
20a0h lea rcx,[rsp+170h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 70 01 00 00
20a8h mov r9,[rsp+168h]             ; MOV(Mov_r64_rm64) [R9,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 8c 24 68 01 00 00
20b0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
20b2h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
20b5h call 7FFDDB81CF60h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF97D0h:jmp64]        encoding(5 bytes) = e8 16 77 df ff
20bah mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
20bdh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
20c0h call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D7F64D0h:jmp64]                encoding(5 bytes) = e8 0b 44 7f 5d
20c5h call 7FFE3925E500h            ; CALL(Call_rel32_64) [5D83AD70h:jmp64]                encoding(5 bytes) = e8 a6 8c 83 5d
20cah mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
20cdh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
20d0h call 7FFE39219C60h            ; CALL(Call_rel32_64) [5D7F64D0h:jmp64]                encoding(5 bytes) = e8 fb 43 7f 5d
20d5h inc r15d                      ; INC(Inc_rm32) [R15D]                                 encoding(3 bytes) = 41 ff c7
20d8h mov rcx,1E1F783AE40h          ; MOV(Mov_r64_imm64) [RCX,1e1f783ae40h:imm64]          encoding(10 bytes) = 48 b9 40 ae 83 f7 e1 01 00 00
20e2h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
20e5h cmp r15d,[rcx+10h]            ; CMP(Cmp_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 3b 79 10
20e9h jl near ptr 1c03h             ; JL(Jl_rel32_64) [1C03h:jmp64]                        encoding(6 bytes) = 0f 8c 14 fb ff ff
20efh mov rcx,r12                   ; MOV(Mov_r64_rm64) [RCX,R12]                          encoding(3 bytes) = 49 8b cc
20f2h call 7FFE39219B10h            ; CALL(Call_rel32_64) [5D7F6380h:jmp64]                encoding(5 bytes) = e8 89 42 7f 5d
20f7h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
20fah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
20fdh mov rax,[rsi]                 ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSI:br,DS:sr)]        encoding(3 bytes) = 48 8b 06
2100h mov rax,[rax+68h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 68
2104h call qword ptr [rax+30h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 30
2107h inc edi                       ; INC(Inc_rm32) [EDI]                                  encoding(2 bytes) = ff c7
2109h cmp edi,10h                   ; CMP(Cmp_rm32_imm8) [EDI,10h:imm32]                   encoding(3 bytes) = 83 ff 10
210ch jl near ptr 0043h             ; JL(Jl_rel32_64) [43h:jmp64]                          encoding(6 bytes) = 0f 8c 31 df ff ff
2112h add rsp,0B38h                 ; ADD(Add_rm64_imm32) [RSP,b38h:imm64]                 encoding(7 bytes) = 48 81 c4 38 0b 00 00
2119h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
211ah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
211bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
211ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
211dh pop r12                       ; POP(Pop_r64) [R12]                                   encoding(2 bytes) = 41 5c
211fh pop r13                       ; POP(Pop_r64) [R13]                                   encoding(2 bytes) = 41 5d
2121h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
2123h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
2125h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
2126h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C740h:jmp64]        encoding(5 bytes) = e8 15 a6 71 ff
212bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
212ch call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C748h:jmp64]        encoding(5 bytes) = e8 17 a6 71 ff
2131h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
2132h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C740h:jmp64]        encoding(5 bytes) = e8 09 a6 71 ff
2137h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
2138h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C748h:jmp64]        encoding(5 bytes) = e8 0b a6 71 ff
213dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
213eh call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C740h:jmp64]        encoding(5 bytes) = e8 fd a5 71 ff
2143h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
2144h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C748h:jmp64]        encoding(5 bytes) = e8 ff a5 71 ff
2149h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
214ah call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C740h:jmp64]        encoding(5 bytes) = e8 f1 a5 71 ff
214fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
2150h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C748h:jmp64]        encoding(5 bytes) = e8 f3 a5 71 ff
2155h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
2156h call 7FFDDB140000h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C870h:jmp64]        encoding(5 bytes) = e8 15 a7 71 ff
215bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
215ch call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71C740h:jmp64]        encoding(5 bytes) = e8 df a5 71 ff
2161h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
2162h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F36B770h:jmp64]                encoding(5 bytes) = e8 09 96 36 5f
2167h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitBinaryOpsBytes => new byte[8552]{0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x38,0x0B,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x30,0xB9,0xC2,0x02,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0x33,0xFF,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x0D,0xBC,0x20,0x5F,0x40,0x0F,0xB6,0xD7,0x83,0xE2,0x0F,0x88,0x94,0x24,0x80,0x0A,0x00,0x00,0x48,0x0F,0xBE,0x94,0x24,0x80,0x0A,0x00,0x00,0x88,0x94,0x24,0x30,0x0B,0x00,0x00,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCD,0x0D,0x24,0x5F,0x48,0x8D,0x8C,0x24,0x60,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x58,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x58,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x0A,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x68,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x0B,0x00,0x00,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x5C,0x0D,0x24,0x5F,0x8B,0x8C,0x24,0x30,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x01,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x50,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x50,0x0A,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x50,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x48,0x0A,0x00,0x00,0x89,0x0A,0x83,0xBC,0x24,0x48,0x0A,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x40,0x0A,0x00,0x00,0x8B,0x94,0x24,0x40,0x0A,0x00,0x00,0x4C,0x8D,0x84,0x24,0x38,0x0A,0x00,0x00,0x41,0x89,0x10,0x83,0xBC,0x24,0x38,0x0A,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x30,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x30,0x0A,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x28,0x0A,0x00,0x00,0x45,0x89,0x01,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x24,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0x20,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0x20,0x0A,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x20,0x0A,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x20,0x0A,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x20,0x0A,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x20,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x20,0x0A,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x24,0x0A,0x00,0x00,0x83,0xBC,0x24,0x28,0x0A,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x24,0x0A,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x24,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x24,0x0A,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x10,0x0A,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xF0,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xE8,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE8,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0xF0,0x09,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xF8,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x0A,0x00,0x00,0x48,0x8D,0x8C,0x24,0x10,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0xAD,0xB1,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x09,0x00,0x00,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x90,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0xF6,0xD4,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x78,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x78,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x70,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x78,0x09,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x80,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x09,0x00,0x00,0x83,0xBC,0x24,0x90,0x09,0x00,0x00,0x00,0x0F,0x86,0xE8,0x1D,0x00,0x00,0x48,0x8B,0x8C,0x24,0x88,0x09,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xB0,0x09,0x00,0x00,0x8B,0xD8,0x4C,0x3B,0xC3,0x0F,0x87,0x77,0x1D,0x00,0x00,0x4C,0x8B,0x84,0x24,0xA8,0x09,0x00,0x00,0x48,0x8D,0x84,0x24,0x60,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x58,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x58,0x09,0x00,0x00,0x4C,0x8D,0x84,0x24,0x60,0x09,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x68,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x09,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x09,0x00,0x00,0x3B,0x8C,0x24,0x50,0x09,0x00,0x00,0x0F,0x87,0x05,0x1D,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x09,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xC0,0x09,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x29,0x53,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xF5,0x09,0x24,0x5F,0x8B,0x8C,0x24,0x30,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x02,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x40,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x09,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x40,0x09,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x09,0x00,0x00,0x89,0x0A,0x83,0xBC,0x24,0x38,0x09,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x30,0x09,0x00,0x00,0x8B,0x94,0x24,0x30,0x09,0x00,0x00,0x4C,0x8D,0x84,0x24,0x28,0x09,0x00,0x00,0x41,0x89,0x10,0x83,0xBC,0x24,0x28,0x09,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x20,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x20,0x09,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x18,0x09,0x00,0x00,0x45,0x89,0x01,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x14,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0x10,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0x10,0x09,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x10,0x09,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x10,0x09,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x10,0x09,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x10,0x09,0x00,0x00,0x8B,0x8C,0x24,0x10,0x09,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x14,0x09,0x00,0x00,0x83,0xBC,0x24,0x18,0x09,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x14,0x09,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x14,0x09,0x00,0x00,0x8B,0x8C,0x24,0x14,0x09,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x00,0x09,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xE0,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xD8,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0xE0,0x08,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xE8,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x08,0x00,0x00,0x48,0x8D,0x8C,0x24,0x00,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x46,0xAE,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x08,0x00,0x00,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x98,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x94,0xD1,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x68,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x68,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x60,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x68,0x08,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x70,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x08,0x00,0x00,0x83,0xBC,0x24,0x80,0x08,0x00,0x00,0x00,0x0F,0x86,0x7E,0x1A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x08,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC3,0x0F,0x87,0x22,0x1A,0x00,0x00,0x4C,0x8B,0x84,0x24,0x98,0x08,0x00,0x00,0x48,0x8D,0x84,0x24,0x50,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x48,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x48,0x08,0x00,0x00,0x4C,0x8D,0x84,0x24,0x50,0x08,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x58,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x08,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x08,0x00,0x00,0x3B,0x8C,0x24,0x40,0x08,0x00,0x00,0x0F,0x87,0xB0,0x19,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x08,0x00,0x00,0x48,0x8B,0x94,0x24,0xA8,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0xB0,0x08,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xC8,0x4F,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x94,0x06,0x24,0x5F,0x8B,0x8C,0x24,0x30,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x04,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x30,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x30,0x08,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x30,0x08,0x00,0x00,0x89,0x8C,0x24,0xD8,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x0A,0x00,0x00,0x89,0x8C,0x24,0x28,0x08,0x00,0x00,0x83,0xBC,0x24,0x28,0x08,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0x20,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x20,0x08,0x00,0x00,0x89,0x94,0x24,0xD0,0x0A,0x00,0x00,0x8B,0x94,0x24,0xD0,0x0A,0x00,0x00,0x89,0x94,0x24,0x18,0x08,0x00,0x00,0x83,0xBC,0x24,0x18,0x08,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x10,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x10,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0xC8,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0xC8,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0x08,0x08,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x04,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x00,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x00,0x08,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x00,0x08,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x00,0x08,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x00,0x08,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x00,0x08,0x00,0x00,0x8B,0x8C,0x24,0x00,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x04,0x08,0x00,0x00,0x83,0xBC,0x24,0x08,0x08,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x04,0x08,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x04,0x08,0x00,0x00,0x8B,0x8C,0x24,0x04,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xF0,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD0,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xC8,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x07,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xD8,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x07,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0xC1,0xAA,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x07,0x00,0x00,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xA0,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x17,0xCE,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x58,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x58,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x50,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x07,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x60,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x07,0x00,0x00,0x83,0xBC,0x24,0x70,0x07,0x00,0x00,0x00,0x0F,0x86,0xF9,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0x68,0x07,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC3,0x0F,0x87,0xA9,0x16,0x00,0x00,0x4C,0x8B,0x84,0x24,0x88,0x07,0x00,0x00,0x48,0x8D,0x84,0x24,0x40,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x38,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x07,0x00,0x00,0x4C,0x8D,0x84,0x24,0x40,0x07,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x48,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x07,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x07,0x00,0x00,0x3B,0x8C,0x24,0x30,0x07,0x00,0x00,0x0F,0x87,0x37,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x07,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0xA0,0x07,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x43,0x4C,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x0F,0x03,0x24,0x5F,0x8B,0x8C,0x24,0x30,0x0B,0x00,0x00,0x0F,0xB6,0xC9,0xF6,0xC1,0x08,0x0F,0x95,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x20,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x07,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x20,0x07,0x00,0x00,0x89,0x8C,0x24,0xB0,0x0A,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x0A,0x00,0x00,0x89,0x8C,0x24,0x18,0x07,0x00,0x00,0x83,0xBC,0x24,0x18,0x07,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0x10,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x10,0x07,0x00,0x00,0x89,0x94,0x24,0xA8,0x0A,0x00,0x00,0x8B,0x94,0x24,0xA8,0x0A,0x00,0x00,0x89,0x94,0x24,0x08,0x07,0x00,0x00,0x83,0xBC,0x24,0x08,0x07,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x00,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x00,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0xA0,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0xA0,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0xF8,0x06,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xF4,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0xF0,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0xF0,0x06,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xF0,0x06,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xF0,0x06,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xF0,0x06,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xF0,0x06,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xF4,0x06,0x00,0x00,0x83,0xBC,0x24,0xF8,0x06,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xF4,0x06,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xF4,0x06,0x00,0x00,0x8B,0x8C,0x24,0xF4,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xE0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xC0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xB8,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB8,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xC0,0x06,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xC8,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x3C,0xA7,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x06,0x00,0x00,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xA8,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x9A,0xCA,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x48,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x48,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x40,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x40,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x48,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x50,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x06,0x00,0x00,0x83,0xBC,0x24,0x60,0x06,0x00,0x00,0x00,0x0F,0x86,0x74,0x13,0x00,0x00,0x48,0x8B,0x8C,0x24,0x58,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x4C,0x3B,0xC3,0x0F,0x87,0x30,0x13,0x00,0x00,0x4C,0x8B,0x84,0x24,0x78,0x06,0x00,0x00,0x48,0x8D,0x84,0x24,0x30,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x28,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0x30,0x06,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x38,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x06,0x00,0x00,0x8B,0x8C,0x24,0x90,0x06,0x00,0x00,0x3B,0x8C,0x24,0x20,0x06,0x00,0x00,0x0F,0x87,0xBE,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x06,0x00,0x00,0x48,0x8B,0x94,0x24,0x88,0x06,0x00,0x00,0x44,0x8B,0x84,0x24,0x90,0x06,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xBE,0x48,0x7F,0x5D,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x8B,0x69,0x14,0x83,0xC5,0xFD,0x66,0xC7,0x84,0x24,0x10,0x06,0x00,0x00,0x00,0x00,0x48,0x0F,0xBF,0x8C,0x24,0x10,0x06,0x00,0x00,0x66,0x89,0x8C,0x24,0xE0,0x05,0x00,0x00,0x48,0x0F,0xBF,0x8C,0x24,0xE0,0x05,0x00,0x00,0x66,0x89,0x8C,0x24,0xC8,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD0,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x09,0x00,0x00,0x00,0xE8,0x3B,0xAD,0x20,0x5F,0x8B,0x15,0x2D,0xE2,0x07,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x23,0xFF,0x23,0x5F,0x48,0x8D,0x8C,0x24,0xA8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xA0,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xB0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x05,0x00,0x00,0x80,0xBC,0x24,0xC8,0x05,0x00,0x00,0x00,0x74,0x23,0x80,0xBC,0x24,0xC8,0x05,0x00,0x00,0x00,0x0F,0x84,0xC6,0x11,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD0,0x05,0x00,0x00,0x0F,0xB6,0x94,0x24,0xC9,0x05,0x00,0x00,0xE8,0xDB,0xD2,0x72,0xFF,0x48,0x8D,0x8C,0x24,0xB8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xB8,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0xDA,0xAE,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x06,0x00,0x00,0x45,0x33,0xF6,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0xDD,0x02,0x00,0x00,0x41,0x0F,0xB6,0xCE,0x89,0x8C,0x24,0x98,0x05,0x00,0x00,0x8B,0x8C,0x24,0x98,0x05,0x00,0x00,0x89,0x8C,0x24,0xF8,0x05,0x00,0x00,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD6,0x49,0xBB,0xB0,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xDF,0xC7,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x58,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x58,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x50,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x60,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x05,0x00,0x00,0x3B,0xAC,0x24,0x90,0x05,0x00,0x00,0x0F,0x83,0xB2,0x10,0x00,0x00,0x48,0x63,0xCD,0x48,0xC1,0xE1,0x04,0x48,0x03,0x8C,0x24,0x88,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x01,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x05,0x00,0x00,0x0F,0xB7,0x8C,0x24,0x78,0x05,0x00,0x00,0x3B,0x8C,0x24,0x70,0x05,0x00,0x00,0x0F,0x83,0x6F,0x10,0x00,0x00,0x48,0x8B,0x84,0x24,0x68,0x05,0x00,0x00,0x48,0x63,0xC9,0x0F,0xB6,0x0C,0x08,0x33,0xC0,0x89,0x84,0x24,0x40,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x40,0x05,0x00,0x00,0x0F,0xB6,0x94,0x24,0x7A,0x05,0x00,0x00,0x0F,0xA3,0xD1,0x72,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x08,0x8B,0x8C,0x24,0x40,0x05,0x00,0x00,0x89,0x8C,0x24,0x48,0x05,0x00,0x00,0x8B,0x8C,0x24,0x48,0x05,0x00,0x00,0x89,0x8C,0x24,0x38,0x05,0x00,0x00,0x83,0xBC,0x24,0x38,0x05,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xC0,0x89,0x84,0x24,0x30,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x30,0x05,0x00,0x00,0x85,0xC9,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x08,0x8B,0x8C,0x24,0x30,0x05,0x00,0x00,0x89,0x8C,0x24,0xF0,0x05,0x00,0x00,0x8B,0x8C,0x24,0xF0,0x05,0x00,0x00,0x89,0x8C,0x24,0x28,0x05,0x00,0x00,0x8B,0x8C,0x24,0x28,0x05,0x00,0x00,0x89,0x8C,0x24,0x20,0x05,0x00,0x00,0x83,0xBC,0x24,0x20,0x05,0x00,0x00,0x01,0x74,0x13,0xC6,0x84,0x24,0x18,0x05,0x00,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0x18,0x05,0x00,0x00,0xEB,0x11,0xC6,0x84,0x24,0x10,0x05,0x00,0x00,0x01,0x48,0x0F,0xBE,0x8C,0x24,0x10,0x05,0x00,0x00,0x88,0x8C,0x24,0xE8,0x05,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x05,0x00,0x00,0x89,0x8C,0x24,0x08,0x05,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0xE8,0x05,0x00,0x00,0x88,0x8C,0x24,0x00,0x05,0x00,0x00,0x8B,0x8C,0x24,0x08,0x05,0x00,0x00,0x89,0x8C,0x24,0xF8,0x04,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0x00,0x05,0x00,0x00,0x88,0x8C,0x24,0xE0,0x04,0x00,0x00,0x48,0xB9,0x00,0xAF,0x83,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x39,0x8B,0x8C,0x24,0xF8,0x04,0x00,0x00,0xE8,0x57,0xAD,0xFF,0xFF,0x41,0x3B,0x47,0x08,0x0F,0x83,0x2F,0x0F,0x00,0x00,0x48,0x63,0xC8,0x49,0x8D,0x4C,0x8F,0x10,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x04,0x00,0x00,0x0F,0xB7,0x11,0x3B,0x94,0x24,0xF0,0x04,0x00,0x00,0x0F,0x83,0x05,0x0F,0x00,0x00,0x48,0x63,0xD2,0x48,0x03,0x94,0x24,0xE8,0x04,0x00,0x00,0x0F,0xB6,0x49,0x02,0x48,0x0F,0xBE,0x84,0x24,0xE0,0x04,0x00,0x00,0x88,0x84,0x24,0xD8,0x04,0x00,0x00,0x48,0x0F,0xBE,0x84,0x24,0xD8,0x04,0x00,0x00,0x88,0x84,0x24,0xD0,0x04,0x00,0x00,0x48,0x0F,0xBE,0x84,0x24,0xD0,0x04,0x00,0x00,0x88,0x84,0x24,0xC8,0x04,0x00,0x00,0x80,0xBC,0x24,0xC8,0x04,0x00,0x00,0x00,0x74,0x0E,0xB8,0x01,0x00,0x00,0x00,0xD3,0xE0,0x0F,0xB6,0xC8,0x08,0x0A,0xEB,0x11,0xB8,0x01,0x00,0x00,0x00,0xD3,0xE0,0x0F,0xB6,0xC8,0xF7,0xD1,0x0F,0xB6,0xC9,0x20,0x0A,0x41,0xFF,0xC6,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x71,0x10,0x0F,0x8C,0x23,0xFD,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x0B,0x00,0x00,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x4B,0xFB,0x23,0x5F,0x8B,0x8C,0x24,0x30,0x0B,0x00,0x00,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xB8,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x98,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x90,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x98,0x04,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xA0,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB8,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0x24,0xAB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x04,0x00,0x00,0x33,0xD2,0x48,0x89,0x94,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0xD8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x89,0x94,0x24,0x38,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x38,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x30,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x30,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0x48,0x04,0x00,0x00,0x48,0x89,0x11,0xC6,0x84,0x24,0x40,0x04,0x00,0x00,0x01,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x04,0x00,0x00,0x48,0xC7,0x84,0x24,0xC0,0x03,0x00,0x00,0x08,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x28,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x04,0x00,0x00,0x80,0xBC,0x24,0x08,0x04,0x00,0x00,0x00,0x75,0x6D,0x8B,0x94,0x24,0xF0,0x03,0x00,0x00,0x48,0x63,0xD2,0x48,0x89,0x94,0x24,0xB8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xC8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0xB0,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xC8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xA8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xB0,0x03,0x00,0x00,0x48,0x0F,0xAF,0x94,0x24,0xA8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xA0,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xA0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x00,0x04,0x00,0x00,0xEB,0x10,0x48,0x8B,0x94,0x24,0x10,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x00,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x00,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0xF8,0x03,0x00,0x00,0x33,0xED,0x48,0x8B,0x94,0x24,0xF8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x98,0x03,0x00,0x00,0x8B,0x94,0x24,0x98,0x03,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0xF9,0x23,0x5F,0x4C,0x8B,0xF0,0x45,0x33,0xFF,0x83,0xBC,0x24,0xF0,0x03,0x00,0x00,0x00,0x0F,0x8E,0x53,0x01,0x00,0x00,0x48,0xB9,0xC8,0x80,0x1E,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7C,0x01,0x00,0x00,0xE8,0xC4,0xFB,0x23,0x5F,0x44,0x3B,0xBC,0x24,0xF0,0x03,0x00,0x00,0x0F,0x83,0xF8,0x0B,0x00,0x00,0x49,0x63,0xC7,0x48,0x03,0x84,0x24,0xE8,0x03,0x00,0x00,0x0F,0xB6,0x00,0x48,0xBA,0xC0,0x57,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x3B,0x42,0x08,0x0F,0x83,0xD4,0x0B,0x00,0x00,0x48,0x63,0xC0,0x48,0xC1,0xE0,0x05,0x48,0x8B,0x44,0x02,0x10,0x48,0x8D,0x94,0x24,0x68,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x68,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x2B,0x39,0x00,0x48,0x8D,0x50,0x10,0x48,0x89,0x94,0x24,0x60,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x60,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x68,0x03,0x00,0x00,0x48,0x89,0x11,0x8B,0x40,0x08,0x89,0x84,0x24,0x70,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x03,0x00,0x00,0x33,0xC0,0xEB,0x32,0x3B,0x84,0x24,0xE0,0x03,0x00,0x00,0x0F,0x83,0x2F,0x0B,0x00,0x00,0x48,0x8B,0x94,0x24,0xD8,0x03,0x00,0x00,0x48,0x63,0xC8,0x0F,0xB6,0x14,0x0A,0x41,0x3B,0x6E,0x08,0x0F,0x83,0x16,0x0B,0x00,0x00,0x48,0x63,0xCD,0x41,0x88,0x54,0x0E,0x10,0xFF,0xC0,0xFF,0xC5,0x48,0x8B,0x94,0x24,0x28,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x58,0x03,0x00,0x00,0x3B,0x84,0x24,0x58,0x03,0x00,0x00,0x7D,0x19,0x48,0x8B,0x94,0x24,0xF8,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x50,0x03,0x00,0x00,0x3B,0xAC,0x24,0x50,0x03,0x00,0x00,0x7C,0x9C,0x41,0xFF,0xC7,0x44,0x3B,0xBC,0x24,0xF0,0x03,0x00,0x00,0x0F,0x8C,0xC1,0xFE,0xFF,0xFF,0x4C,0x89,0xB4,0x24,0xD0,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0xD0,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x30,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0xBA,0xD8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x89,0x94,0x24,0x28,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x20,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x20,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x38,0x03,0x00,0x00,0x48,0x89,0x11,0xC6,0x84,0x24,0x30,0x03,0x00,0x00,0x01,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x03,0x00,0x00,0x48,0xC7,0x84,0x24,0xB0,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xB0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x18,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x02,0x00,0x00,0x80,0xBC,0x24,0xF8,0x02,0x00,0x00,0x00,0x75,0x6D,0x8B,0x94,0x24,0xE0,0x02,0x00,0x00,0x48,0x63,0xD2,0x48,0x89,0x94,0x24,0xA8,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xA8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xB8,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x18,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xA0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x98,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xA0,0x02,0x00,0x00,0x48,0x0F,0xAF,0x94,0x24,0x98,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x90,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x90,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xF0,0x02,0x00,0x00,0xEB,0x10,0x48,0x8B,0x94,0x24,0x00,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0xF0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xF0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0xE8,0x02,0x00,0x00,0x45,0x33,0xFF,0x48,0x8B,0x94,0x24,0xE8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x88,0x02,0x00,0x00,0x8B,0x94,0x24,0x88,0x02,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x10,0xF6,0x23,0x5F,0x48,0x8B,0xE8,0x45,0x33,0xF6,0x83,0xBC,0x24,0xE0,0x02,0x00,0x00,0x00,0x0F,0x8E,0x54,0x01,0x00,0x00,0x48,0xB9,0xC8,0x80,0x1E,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7C,0x01,0x00,0x00,0xE8,0xB8,0xF8,0x23,0x5F,0x44,0x3B,0xB4,0x24,0xE0,0x02,0x00,0x00,0x0F,0x83,0xEC,0x08,0x00,0x00,0x49,0x63,0xCE,0x48,0x03,0x8C,0x24,0xD8,0x02,0x00,0x00,0x0F,0xB6,0x09,0x48,0xBA,0xC0,0x57,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x3B,0x4A,0x08,0x0F,0x83,0xC8,0x08,0x00,0x00,0x48,0x63,0xC9,0x48,0xC1,0xE1,0x05,0x48,0x8B,0x4C,0x0A,0x10,0x48,0x8D,0x94,0x24,0x58,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0x85,0xC9,0x75,0x12,0x48,0x8D,0x8C,0x24,0x58,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0xEB,0x2B,0x39,0x09,0x48,0x8D,0x51,0x10,0x48,0x89,0x94,0x24,0x50,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x50,0x02,0x00,0x00,0x48,0x8D,0x84,0x24,0x58,0x02,0x00,0x00,0x48,0x89,0x10,0x8B,0x49,0x08,0x89,0x8C,0x24,0x60,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x02,0x00,0x00,0x33,0xC9,0xEB,0x32,0x3B,0x8C,0x24,0xD0,0x02,0x00,0x00,0x0F,0x83,0x23,0x08,0x00,0x00,0x48,0x8B,0x94,0x24,0xC8,0x02,0x00,0x00,0x48,0x63,0xC1,0x0F,0xB6,0x14,0x02,0x44,0x3B,0x7D,0x08,0x0F,0x83,0x0A,0x08,0x00,0x00,0x49,0x63,0xC7,0x88,0x54,0x05,0x10,0xFF,0xC1,0x41,0xFF,0xC7,0x48,0x8B,0x94,0x24,0x18,0x03,0x00,0x00,0x48,0x89,0x94,0x24,0x48,0x02,0x00,0x00,0x3B,0x8C,0x24,0x48,0x02,0x00,0x00,0x7D,0x1A,0x48,0x8B,0x94,0x24,0xE8,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x40,0x02,0x00,0x00,0x44,0x3B,0xBC,0x24,0x40,0x02,0x00,0x00,0x7C,0x9B,0x41,0xFF,0xC6,0x44,0x3B,0xB4,0x24,0xE0,0x02,0x00,0x00,0x0F,0x8C,0xC0,0xFE,0xFF,0xFF,0x48,0x89,0xAC,0x24,0xC0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x02,0x00,0x00,0x48,0x89,0x94,0x24,0x60,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0x60,0x04,0x00,0x00,0x48,0x89,0x94,0x24,0x30,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x78,0x04,0x00,0x00,0x8B,0x52,0x08,0x48,0x8B,0x8C,0x24,0x78,0x04,0x00,0x00,0x8B,0x49,0x08,0xFF,0xC9,0x33,0xC0,0x85,0xC9,0x7C,0x25,0x4C,0x8B,0x84,0x24,0x78,0x04,0x00,0x00,0x41,0x3B,0x48,0x08,0x0F,0x83,0x62,0x07,0x00,0x00,0x4C,0x63,0xC9,0x43,0x80,0x7C,0x08,0x10,0x00,0x75,0x08,0xFF,0xC0,0xFF,0xC9,0x85,0xC9,0x7D,0xDB,0x2B,0xD0,0x48,0x8D,0x8C,0x24,0x78,0x04,0x00,0x00,0xE8,0x76,0x7D,0xDF,0xFF,0x48,0x89,0x84,0x24,0x38,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x30,0x02,0x00,0x00,0x8B,0x52,0x08,0x48,0x8B,0x8C,0x24,0x30,0x02,0x00,0x00,0x8B,0x49,0x08,0xFF,0xC9,0x33,0xC0,0x85,0xC9,0x7C,0x25,0x4C,0x8B,0x84,0x24,0x30,0x02,0x00,0x00,0x41,0x3B,0x48,0x08,0x0F,0x83,0x08,0x07,0x00,0x00,0x4C,0x63,0xC9,0x43,0x80,0x7C,0x08,0x10,0x00,0x75,0x08,0xFF,0xC0,0xFF,0xC9,0x85,0xC9,0x7D,0xDB,0x2B,0xD0,0x48,0x8D,0x8C,0x24,0x30,0x02,0x00,0x00,0xE8,0x1C,0x7D,0xDF,0xFF,0x48,0x89,0x84,0x24,0x28,0x02,0x00,0x00,0x4C,0x8B,0x84,0x24,0x38,0x02,0x00,0x00,0x45,0x8B,0x70,0x08,0x45,0x8B,0xC6,0x48,0x8B,0x94,0x24,0x28,0x02,0x00,0x00,0x44,0x8B,0x7A,0x08,0x45,0x3B,0xF8,0x74,0x04,0x33,0xED,0xEB,0x4C,0x45,0x33,0xE4,0x45,0x85,0xF6,0x7E,0x3B,0x48,0x8B,0x8C,0x24,0x38,0x02,0x00,0x00,0x45,0x3B,0xE6,0x0F,0x83,0xA1,0x06,0x00,0x00,0x49,0x63,0xD4,0x0F,0xB6,0x4C,0x11,0x10,0x48,0x8B,0x94,0x24,0x28,0x02,0x00,0x00,0x45,0x3B,0xE7,0x0F,0x83,0x88,0x06,0x00,0x00,0x49,0x63,0xC4,0x3A,0x4C,0x02,0x10,0x75,0x0F,0x41,0xFF,0xC4,0x45,0x3B,0xF4,0x7F,0xC5,0xBD,0x01,0x00,0x00,0x00,0xEB,0x02,0x33,0xED,0x45,0x33,0xC0,0x4C,0x89,0x84,0x24,0x88,0x0A,0x00,0x00,0xC7,0x84,0x24,0x8C,0x0A,0x00,0x00,0x9B,0x00,0x00,0x00,0xC6,0x84,0x24,0x88,0x0A,0x00,0x00,0x01,0x4C,0x8B,0x84,0x24,0x88,0x0A,0x00,0x00,0x4C,0x89,0x84,0x24,0x20,0x02,0x00,0x00,0x40,0x84,0xED,0x75,0x29,0x49,0xB8,0x50,0x6F,0x83,0xF7,0xE1,0x01,0x00,0x00,0x4D,0x8B,0x00,0x48,0xBA,0x50,0x6F,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x4C,0x8B,0x8C,0x24,0x20,0x02,0x00,0x00,0x33,0xC9,0xE8,0x40,0xC1,0x70,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x0B,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x02,0x00,0x00,0x4C,0x8B,0xF6,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x30,0x48,0x8D,0x4C,0x24,0x30,0x48,0xBA,0x48,0x6F,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0xE8,0xAB,0xE0,0xFF,0xFF,0x48,0x8B,0xD0,0x49,0x8B,0xCE,0x49,0x8B,0x06,0x48,0x8B,0x40,0x58,0xFF,0x50,0x10,0x48,0xB9,0x60,0x1E,0x38,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xF1,0x23,0x5F,0x4C,0x8B,0xE0,0x41,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0x7F,0x48,0xB9,0xF0,0x06,0x38,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x10,0x00,0x00,0x00,0xE8,0x74,0xF2,0x23,0x5F,0x49,0x8D,0x4C,0x24,0x08,0x48,0x8B,0xD0,0xE8,0x77,0xE2,0x23,0x5F,0x45,0x33,0xFF,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x83,0x79,0x10,0x00,0x0F,0x8E,0xEC,0x04,0x00,0x00,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x41,0x8B,0xD7,0x49,0xBB,0xB8,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x39,0x09,0xFF,0x15,0xFF,0xBB,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0xB8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xB8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x2B,0x39,0x00,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xB0,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xB8,0x01,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xC0,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x01,0x00,0x00,0x83,0xBC,0x24,0xD0,0x01,0x00,0x00,0x00,0x0F,0x86,0xC7,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x8B,0xC1,0x44,0x8B,0xC2,0x49,0x03,0xC0,0x48,0x3B,0xC3,0x0F,0x87,0x95,0x04,0x00,0x00,0x48,0x8B,0x84,0x24,0x10,0x02,0x00,0x00,0x4C,0x8D,0x84,0x24,0xA0,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC4,0xC1,0x7A,0x7F,0x00,0x48,0x63,0xC9,0x48,0x03,0xC8,0x48,0x89,0x8C,0x24,0x98,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0xA0,0x01,0x00,0x00,0x48,0x89,0x08,0x89,0x94,0x24,0xA8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x78,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x78,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x40,0x48,0x8D,0x54,0x24,0x40,0xE8,0xDB,0x96,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x01,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0xE8,0x01,0x00,0x00,0xC7,0x84,0x24,0xEC,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0xC6,0x84,0x24,0xE8,0x01,0x00,0x00,0x01,0x48,0x8B,0x8C,0x24,0xE8,0x01,0x00,0x00,0x48,0x89,0x8C,0x24,0x68,0x01,0x00,0x00,0x33,0xC9,0x48,0x89,0x8C,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x40,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0x74,0x9E,0x20,0x5F,0x48,0xBA,0x50,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x48,0x8B,0x52,0x08,0x48,0x89,0x94,0x24,0x38,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x38,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0x30,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x30,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x48,0x01,0x00,0x00,0x48,0x89,0x11,0xC6,0x84,0x24,0x40,0x01,0x00,0x00,0x01,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x01,0x00,0x00,0x48,0xC7,0x84,0x24,0xC0,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x01,0x00,0x00,0x80,0xBC,0x24,0x08,0x01,0x00,0x00,0x00,0x75,0x6D,0x8B,0x94,0x24,0xF0,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0x89,0x94,0x24,0xB8,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xB8,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xC8,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0xB0,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xC8,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xA8,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xB0,0x00,0x00,0x00,0x48,0x0F,0xAF,0x94,0x24,0xA8,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0xA0,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x00,0x01,0x00,0x00,0xEB,0x10,0x48,0x8B,0x94,0x24,0x10,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0x00,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x00,0x01,0x00,0x00,0x48,0x89,0x94,0x24,0xF8,0x00,0x00,0x00,0x33,0xED,0x48,0x8B,0x94,0x24,0xF8,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x98,0x00,0x00,0x00,0x8B,0x94,0x24,0x98,0x00,0x00,0x00,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1C,0xEF,0x23,0x5F,0x4C,0x8B,0xF0,0x45,0x33,0xED,0x83,0xBC,0x24,0xF0,0x00,0x00,0x00,0x00,0x0F,0x8E,0x2C,0x01,0x00,0x00,0x48,0xB9,0xC8,0x80,0x1E,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x7C,0x01,0x00,0x00,0xE8,0xC4,0xF1,0x23,0x5F,0x44,0x3B,0xAC,0x24,0xF0,0x00,0x00,0x00,0x0F,0x83,0xF8,0x01,0x00,0x00,0x49,0x63,0xCD,0x48,0x03,0x8C,0x24,0xE8,0x00,0x00,0x00,0x0F,0xB6,0x09,0x48,0xBA,0xC0,0x57,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x3B,0x4A,0x08,0x0F,0x83,0xD4,0x01,0x00,0x00,0x48,0x63,0xC9,0x48,0xC1,0xE1,0x05,0x48,0x8B,0x4C,0x0A,0x10,0x48,0x8D,0x54,0x24,0x68,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0x48,0x85,0xC9,0x75,0x0F,0x48,0x8D,0x4C,0x24,0x68,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0xEB,0x1F,0x39,0x09,0x48,0x8D,0x51,0x10,0x48,0x89,0x54,0x24,0x60,0x48,0x8B,0x54,0x24,0x60,0x48,0x8D,0x44,0x24,0x68,0x48,0x89,0x10,0x8B,0x49,0x08,0x89,0x4C,0x24,0x70,0xC5,0xFA,0x6F,0x44,0x24,0x68,0xC5,0xFA,0x7F,0x44,0x24,0x78,0xC5,0xFA,0x6F,0x44,0x24,0x78,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x00,0x00,0x00,0x33,0xC9,0xEB,0x32,0x3B,0x8C,0x24,0xE0,0x00,0x00,0x00,0x0F,0x83,0x4A,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0xD8,0x00,0x00,0x00,0x48,0x63,0xC1,0x0F,0xB6,0x14,0x02,0x41,0x3B,0x6E,0x08,0x0F,0x83,0x31,0x01,0x00,0x00,0x48,0x63,0xC5,0x41,0x88,0x54,0x06,0x10,0xFF,0xC1,0xFF,0xC5,0x48,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x48,0x89,0x54,0x24,0x58,0x3B,0x4C,0x24,0x58,0x7D,0x13,0x48,0x8B,0x94,0x24,0xF8,0x00,0x00,0x00,0x48,0x89,0x54,0x24,0x50,0x3B,0x6C,0x24,0x50,0x7C,0xA8,0x41,0xFF,0xC5,0x44,0x3B,0xAC,0x24,0xF0,0x00,0x00,0x00,0x0F,0x8C,0xE8,0xFE,0xFF,0xFF,0x4C,0x89,0xB4,0x24,0xD0,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x00,0x00,0x00,0x48,0x89,0x8C,0x24,0x70,0x01,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x60,0x01,0x00,0x00,0x8B,0x8C,0x24,0x60,0x01,0x00,0x00,0x89,0x4C,0x24,0x20,0x48,0x8D,0x8C,0x24,0x70,0x01,0x00,0x00,0x4C,0x8B,0x8C,0x24,0x68,0x01,0x00,0x00,0x33,0xD2,0x45,0x33,0xC0,0xE8,0x16,0x77,0xDF,0xFF,0x48,0x8B,0xD0,0x49,0x8B,0xCC,0xE8,0x0B,0x44,0x7F,0x5D,0xE8,0xA6,0x8C,0x83,0x5D,0x48,0x8B,0xD0,0x49,0x8B,0xCC,0xE8,0xFB,0x43,0x7F,0x5D,0x41,0xFF,0xC7,0x48,0xB9,0x40,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x44,0x3B,0x79,0x10,0x0F,0x8C,0x14,0xFB,0xFF,0xFF,0x49,0x8B,0xCC,0xE8,0x89,0x42,0x7F,0x5D,0x48,0x8B,0xD0,0x48,0x8B,0xCE,0x48,0x8B,0x06,0x48,0x8B,0x40,0x68,0xFF,0x50,0x30,0xFF,0xC7,0x83,0xFF,0x10,0x0F,0x8C,0x31,0xDF,0xFF,0xFF,0x48,0x81,0xC4,0x38,0x0B,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x15,0xA6,0x71,0xFF,0xCC,0xE8,0x17,0xA6,0x71,0xFF,0xCC,0xE8,0x09,0xA6,0x71,0xFF,0xCC,0xE8,0x0B,0xA6,0x71,0xFF,0xCC,0xE8,0xFD,0xA5,0x71,0xFF,0xCC,0xE8,0xFF,0xA5,0x71,0xFF,0xCC,0xE8,0xF1,0xA5,0x71,0xFF,0xCC,0xE8,0xF3,0xA5,0x71,0xFF,0xCC,0xE8,0x15,0xA7,0x71,0xFF,0xCC,0xE8,0xDF,0xA5,0x71,0xFF,0xCC,0xE8,0x09,0x96,0x36,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void EmitTernaryOps(TextWriter dst)
; location: [7FFDDBA25A20h, 7FFDDBA27867h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,0A68h                 ; SUB(Sub_rm64_imm32) [RSP,a68h:imm64]                 encoding(7 bytes) = 48 81 ec 68 0a 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,290h                  ; MOV(Mov_r32_imm32) [ECX,290h:imm32]                  encoding(5 bytes) = b9 90 02 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0029h xor edi,edi                   ; XOR(Xor_r32_rm32) [EDI,EDI]                          encoding(2 bytes) = 33 ff
002bh movzx ecx,dil                 ; MOVZX(Movzx_r32_rm8) [ECX,DIL]                       encoding(4 bytes) = 40 0f b6 cf
002fh mov [rsp+8A0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 a0 08 00 00
0036h movsx rcx,byte ptr [rsp+8A0h] ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RSP:br,SS:sr)]      encoding(9 bytes) = 48 0f be 8c 24 a0 08 00 00
003fh mov [rsp+0A60h],cl            ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 60 0a 00 00
0046h mov rcx,7FFDDB2490E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb2490e8h:imm64]         encoding(10 bytes) = 48 b9 e8 90 24 db fd 7f 00 00
0050h mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
0055h call 7FFE3AC2F3E0h            ; CALL(Call_rel32_64) [5F2099C0h:jmp64]                encoding(5 bytes) = e8 66 99 20 5f
005ah mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0064h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0067h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
006ah movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
006dh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0077h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 44 eb 23 5f
007ch lea rcx,[rsp+880h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 08 00 00
0084h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0088h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
008ch lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0090h mov [rsp+878h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 78 08 00 00
0098h mov rcx,[rsp+878h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 08 00 00
00a0h lea rdx,[rsp+880h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 08 00 00
00a8h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
00abh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
00aeh mov [rsp+888h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 08 00 00
00b5h vmovdqu xmm0,xmmword ptr [rsp+880h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 08 00 00
00beh vmovdqu xmmword ptr [rsp+890h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 08 00 00
00c7h vmovdqu xmm0,xmmword ptr [rsp+890h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 08 00 00
00d0h vmovdqu xmmword ptr [rsp+0A50h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 0a 00 00
00d9h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
00e3h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00e8h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 d3 ea 23 5f
00edh movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
00f5h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f7h mov [rsp+870h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 08 00 00
00feh lea rdx,[rsp+870h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 70 08 00 00
0106h test cl,1                     ; TEST(Test_rm8_imm8) [CL,1h:imm8]                     encoding(3 bytes) = f6 c1 01
0109h jne short 010fh               ; JNE(Jne_rel8_64) [10Fh:jmp64]                        encoding(2 bytes) = 75 04
010bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
010dh jmp short 0114h               ; JMP(Jmp_rel8_64) [114h:jmp64]                        encoding(2 bytes) = eb 05
010fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0114h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0116h mov ecx,[rsp+870h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 08 00 00
011dh mov [rsp+0A28h],ecx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 0a 00 00
0124h mov ecx,[rsp+0A28h]           ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 0a 00 00
012bh mov [rsp+868h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 08 00 00
0132h cmp dword ptr [rsp+868h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 68 08 00 00 01
013ah sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
013dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0140h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0142h mov [rsp+860h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 08 00 00
0149h mov edx,[rsp+860h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 08 00 00
0150h mov [rsp+0A20h],edx           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 0a 00 00
0157h mov edx,[rsp+0A20h]           ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 20 0a 00 00
015eh mov [rsp+858h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 58 08 00 00
0165h cmp dword ptr [rsp+858h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 58 08 00 00 01
016dh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0170h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0173h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0176h mov [rsp+850h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 50 08 00 00
017eh mov r8d,[rsp+850h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 50 08 00 00
0186h mov [rsp+0A18h],r8d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 18 0a 00 00
018eh mov r8d,[rsp+0A18h]           ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 18 0a 00 00
0196h mov [rsp+848h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 48 08 00 00
019eh cmp dword ptr [rsp+848h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 48 08 00 00 01
01a6h sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
01aah movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
01aeh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
01b1h mov [rsp+840h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 40 08 00 00
01b9h mov r9d,[rsp+840h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 40 08 00 00
01c1h mov [rsp+0A10h],r9d           ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 10 0a 00 00
01c9h mov r9d,[rsp+0A10h]           ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 10 0a 00 00
01d1h mov [rsp+838h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 38 08 00 00
01d9h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
01dch mov [rsp+834h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 34 08 00 00
01e4h mov [rsp+830h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 30 08 00 00
01ech mov [rsp+82Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 2c 08 00 00
01f4h mov [rsp+82Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 2c 08 00 00
01fch test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
01feh je short 0212h                ; JE(Je_rel8_64) [212h:jmp64]                          encoding(2 bytes) = 74 12
0200h movzx ecx,byte ptr [rsp+82Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 2c 08 00 00
0208h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
020bh mov [rsp+82Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 2c 08 00 00
0212h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0214h je short 0228h                ; JE(Je_rel8_64) [228h:jmp64]                          encoding(2 bytes) = 74 12
0216h movzx ecx,byte ptr [rsp+82Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 2c 08 00 00
021eh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0221h mov [rsp+82Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 2c 08 00 00
0228h mov ecx,[rsp+82Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 2c 08 00 00
022fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0232h mov [rsp+830h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 30 08 00 00
0239h test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
023ch je short 0250h                ; JE(Je_rel8_64) [250h:jmp64]                          encoding(2 bytes) = 74 12
023eh movzx ecx,byte ptr [rsp+830h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 30 08 00 00
0246h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0249h mov [rsp+830h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 30 08 00 00
0250h mov ecx,[rsp+830h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 08 00 00
0257h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
025ah mov [rsp+834h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 34 08 00 00
0261h cmp dword ptr [rsp+838h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 38 08 00 00 01
0269h jne short 027dh               ; JNE(Jne_rel8_64) [27Dh:jmp64]                        encoding(2 bytes) = 75 12
026bh movzx ecx,byte ptr [rsp+834h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 34 08 00 00
0273h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0276h mov [rsp+834h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 34 08 00 00
027dh mov ecx,[rsp+834h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 34 08 00 00
0284h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0287h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
028ah lea rcx,[rsp+818h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 08 00 00
0292h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0296h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
029ah lea rcx,[rsp+7F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 07 00 00
02a2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02a6h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
02aah add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
02aeh mov [rsp+7F0h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 f0 07 00 00
02b6h mov rcx,[rsp+7F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 07 00 00
02beh lea rdx,[rsp+7F8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 07 00 00
02c6h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
02c9h mov dword ptr [rsp+800h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 00 08 00 00 01 00 00 00
02d4h vmovdqu xmm0,xmmword ptr [rsp+7F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 07 00 00
02ddh vmovdqu xmmword ptr [rsp+808h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 08 00 00
02e6h lea rcx,[rsp+818h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 08 00 00
02eeh vmovdqu xmm0,xmmword ptr [rsp+808h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 08 00 00
02f7h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
02fdh lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
0302h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 19 99 ff ff
0307h vmovdqu xmm0,xmmword ptr [rsp+818h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 08 00 00
0310h vmovdqu xmmword ptr [rsp+0A00h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 0a 00 00
0319h vmovdqu xmm0,xmmword ptr [rsp+0A00h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 0a 00 00
0322h vmovdqu xmmword ptr [rsp+7E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 07 00 00
032bh vmovdqu xmm0,xmmword ptr [rsp+7E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 07 00 00
0334h vmovdqu xmmword ptr [rsp+7D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 07 00 00
033dh vmovdqu xmm0,xmmword ptr [rsp+7D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 07 00 00
0346h vmovdqu xmmword ptr [rsp+7C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 07 00 00
034fh vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
0358h vmovdqu xmmword ptr [rsp+7B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 07 00 00
0361h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
036bh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
036eh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0372h mov r11,7FFDDB000FC0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fc0h:imm64]         encoding(10 bytes) = 49 bb c0 0f 00 db fd 7f 00 00
037ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
037eh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0380h call qword ptr [7FFDDB000FC0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 1a b2 5d ff
0386h lea rcx,[rsp+780h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 07 00 00
038eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0392h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0396h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0399h jne short 03adh               ; JNE(Jne_rel8_64) [3ADh:jmp64]                        encoding(2 bytes) = 75 12
039bh lea rax,[rsp+780h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 80 07 00 00
03a3h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03a7h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
03abh jmp short 03d6h               ; JMP(Jmp_rel8_64) [3D6h:jmp64]                        encoding(2 bytes) = eb 29
03adh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
03b1h mov [rsp+778h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 78 07 00 00
03b9h mov rcx,[rsp+778h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 07 00 00
03c1h lea rdx,[rsp+780h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 07 00 00
03c9h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
03cch mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
03cfh mov [rsp+788h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 07 00 00
03d6h vmovdqu xmm0,xmmword ptr [rsp+780h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 07 00 00
03dfh vmovdqu xmmword ptr [rsp+790h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 07 00 00
03e8h cmp dword ptr [rsp+798h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 98 07 00 00 00
03f0h jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 4c 1a 00 00
03f6h mov rcx,[rsp+790h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 07 00 00
03feh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0401h mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
040bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
040eh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0411h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0414h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0416h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0419h mov eax,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 b8 07 00 00
0420h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0423h ja near ptr 1deeh             ; JA(Ja_rel32_64) [1DEEh:jmp64]                        encoding(6 bytes) = 0f 87 c5 19 00 00
0429h mov r8,[rsp+7B0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 b0 07 00 00
0431h lea rax,[rsp+768h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 68 07 00 00
0439h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
043dh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0441h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0444h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0447h mov [rsp+760h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 60 07 00 00
044fh mov rcx,[rsp+760h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 07 00 00
0457h lea r8,[rsp+768h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 68 07 00 00
045fh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0462h mov [rsp+770h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 07 00 00
0469h vmovdqu xmm0,xmmword ptr [rsp+768h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 07 00 00
0472h vmovdqu xmmword ptr [rsp+7A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 07 00 00
047bh vmovdqu xmm0,xmmword ptr [rsp+7A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 07 00 00
0484h vmovdqu xmmword ptr [rsp+750h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 07 00 00
048dh mov ecx,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 07 00 00
0494h cmp ecx,[rsp+758h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 58 07 00 00
049bh ja near ptr 1df4h             ; JA(Ja_rel32_64) [1DF4h:jmp64]                        encoding(6 bytes) = 0f 87 53 19 00 00
04a1h mov rcx,[rsp+750h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 07 00 00
04a9h mov rdx,[rsp+7C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 07 00 00
04b1h mov r8d,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c8 07 00 00
04b9h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
04bch call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F34E0h:jmp64]                encoding(5 bytes) = e8 1f 30 7f 5d
04c1h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
04cbh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
04d0h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 eb e6 23 5f
04d5h movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
04ddh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
04dfh mov [rsp+748h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 07 00 00
04e6h lea rdx,[rsp+748h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 48 07 00 00
04eeh test cl,2                     ; TEST(Test_rm8_imm8) [CL,2h:imm8]                     encoding(3 bytes) = f6 c1 02
04f1h jne short 04f7h               ; JNE(Jne_rel8_64) [4F7h:jmp64]                        encoding(2 bytes) = 75 04
04f3h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
04f5h jmp short 04fch               ; JMP(Jmp_rel8_64) [4FCh:jmp64]                        encoding(2 bytes) = eb 05
04f7h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
04fch mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
04feh mov ecx,[rsp+748h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 07 00 00
0505h mov [rsp+9F8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f8 09 00 00
050ch mov ecx,[rsp+9F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 09 00 00
0513h mov [rsp+740h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 07 00 00
051ah cmp dword ptr [rsp+740h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 40 07 00 00 01
0522h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0525h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0528h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
052ah mov [rsp+738h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 07 00 00
0531h mov edx,[rsp+738h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 07 00 00
0538h mov [rsp+9F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 09 00 00
053fh mov edx,[rsp+9F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 09 00 00
0546h mov [rsp+730h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 07 00 00
054dh cmp dword ptr [rsp+730h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 30 07 00 00 01
0555h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0558h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
055bh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
055eh mov [rsp+728h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 28 07 00 00
0566h mov r8d,[rsp+728h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 07 00 00
056eh mov [rsp+9E8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e8 09 00 00
0576h mov r8d,[rsp+9E8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e8 09 00 00
057eh mov [rsp+720h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 20 07 00 00
0586h cmp dword ptr [rsp+720h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 20 07 00 00 01
058eh sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
0592h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
0596h mov dword ptr [rsp+718h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 18 07 00 00 01 00 00 00
05a1h mov r9d,[rsp+718h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 18 07 00 00
05a9h mov [rsp+9E0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 e0 09 00 00
05b1h mov r9d,[rsp+9E0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 e0 09 00 00
05b9h mov [rsp+710h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 10 07 00 00
05c1h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
05c4h mov [rsp+70Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 0c 07 00 00
05cch mov [rsp+708h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 08 07 00 00
05d4h mov [rsp+704h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 04 07 00 00
05dch mov [rsp+704h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 04 07 00 00
05e4h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
05e6h je short 05fah                ; JE(Je_rel8_64) [5FAh:jmp64]                          encoding(2 bytes) = 74 12
05e8h movzx ecx,byte ptr [rsp+704h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 04 07 00 00
05f0h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
05f3h mov [rsp+704h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 04 07 00 00
05fah test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
05fch je short 0610h                ; JE(Je_rel8_64) [610h:jmp64]                          encoding(2 bytes) = 74 12
05feh movzx ecx,byte ptr [rsp+704h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 04 07 00 00
0606h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0609h mov [rsp+704h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 04 07 00 00
0610h mov ecx,[rsp+704h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 04 07 00 00
0617h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
061ah mov [rsp+708h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 08 07 00 00
0621h test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
0624h je short 0638h                ; JE(Je_rel8_64) [638h:jmp64]                          encoding(2 bytes) = 74 12
0626h movzx ecx,byte ptr [rsp+708h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 08 07 00 00
062eh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0631h mov [rsp+708h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 08 07 00 00
0638h mov ecx,[rsp+708h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 07 00 00
063fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0642h mov [rsp+70Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 0c 07 00 00
0649h cmp dword ptr [rsp+710h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 10 07 00 00 01
0651h jne short 0665h               ; JNE(Jne_rel8_64) [665h:jmp64]                        encoding(2 bytes) = 75 12
0653h movzx ecx,byte ptr [rsp+70Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 0c 07 00 00
065bh or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
065eh mov [rsp+70Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 0c 07 00 00
0665h mov ecx,[rsp+70Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 0c 07 00 00
066ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
066fh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0672h lea rcx,[rsp+6F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 06 00 00
067ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
067eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0682h lea rcx,[rsp+6D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 06 00 00
068ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
068eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0692h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0696h mov [rsp+6C8h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 c8 06 00 00
069eh mov rcx,[rsp+6C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 06 00 00
06a6h lea rdx,[rsp+6D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 06 00 00
06aeh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
06b1h mov dword ptr [rsp+6D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 06 00 00 01 00 00 00
06bch vmovdqu xmm0,xmmword ptr [rsp+6D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 06 00 00
06c5h vmovdqu xmmword ptr [rsp+6E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 06 00 00
06ceh lea rcx,[rsp+6F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 06 00 00
06d6h vmovdqu xmm0,xmmword ptr [rsp+6E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 06 00 00
06dfh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
06e5h lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
06eah call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 31 95 ff ff
06efh vmovdqu xmm0,xmmword ptr [rsp+6F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 06 00 00
06f8h vmovdqu xmmword ptr [rsp+9D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 09 00 00
0701h vmovdqu xmm0,xmmword ptr [rsp+9D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 09 00 00
070ah vmovdqu xmmword ptr [rsp+6B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 06 00 00
0713h vmovdqu xmm0,xmmword ptr [rsp+6B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 06 00 00
071ch vmovdqu xmmword ptr [rsp+6A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 06 00 00
0725h vmovdqu xmm0,xmmword ptr [rsp+6A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 06 00 00
072eh vmovdqu xmmword ptr [rsp+698h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 06 00 00
0737h vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
0740h vmovdqu xmmword ptr [rsp+688h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 06 00 00
0749h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
0753h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0756h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
075ah mov r11,7FFDDB000FC8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fc8h:imm64]         encoding(10 bytes) = 49 bb c8 0f 00 db fd 7f 00 00
0764h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0769h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
076bh call qword ptr [7FFDDB000FC8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 37 ae 5d ff
0771h lea rcx,[rsp+658h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 06 00 00
0779h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
077dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0781h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0784h jne short 0798h               ; JNE(Jne_rel8_64) [798h:jmp64]                        encoding(2 bytes) = 75 12
0786h lea rax,[rsp+658h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 06 00 00
078eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0792h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0796h jmp short 07c1h               ; JMP(Jmp_rel8_64) [7C1h:jmp64]                        encoding(2 bytes) = eb 29
0798h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
079ch mov [rsp+650h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 50 06 00 00
07a4h mov rcx,[rsp+650h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 06 00 00
07ach lea rdx,[rsp+658h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 06 00 00
07b4h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
07b7h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
07bah mov [rsp+660h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 06 00 00
07c1h vmovdqu xmm0,xmmword ptr [rsp+658h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 06 00 00
07cah vmovdqu xmmword ptr [rsp+668h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 06 00 00
07d3h cmp dword ptr [rsp+670h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 70 06 00 00 00
07dbh jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 61 16 00 00
07e1h mov rcx,[rsp+668h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 68 06 00 00
07e9h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
07ech mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
07f6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
07f9h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
07fch mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
07ffh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0801h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0804h mov eax,[rsp+690h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 06 00 00
080bh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
080eh ja near ptr 1dfah             ; JA(Ja_rel32_64) [1DFAh:jmp64]                        encoding(6 bytes) = 0f 87 e6 15 00 00
0814h mov r8,[rsp+688h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 88 06 00 00
081ch lea rax,[rsp+640h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 06 00 00
0824h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0828h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
082ch movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
082fh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0832h mov [rsp+638h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 38 06 00 00
083ah mov rcx,[rsp+638h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 06 00 00
0842h lea r8,[rsp+640h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 40 06 00 00
084ah mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
084dh mov [rsp+648h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 06 00 00
0854h vmovdqu xmm0,xmmword ptr [rsp+640h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 06 00 00
085dh vmovdqu xmmword ptr [rsp+678h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 06 00 00
0866h vmovdqu xmm0,xmmword ptr [rsp+678h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 06 00 00
086fh vmovdqu xmmword ptr [rsp+628h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 06 00 00
0878h mov ecx,[rsp+6A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 06 00 00
087fh cmp ecx,[rsp+630h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 30 06 00 00
0886h ja near ptr 1e00h             ; JA(Ja_rel32_64) [1E00h:jmp64]                        encoding(6 bytes) = 0f 87 74 15 00 00
088ch mov rcx,[rsp+628h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 06 00 00
0894h mov rdx,[rsp+698h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 06 00 00
089ch mov r8d,[rsp+6A0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a0 06 00 00
08a4h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
08a7h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F34E0h:jmp64]                encoding(5 bytes) = e8 34 2c 7f 5d
08ach mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
08b6h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
08bbh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 00 e3 23 5f
08c0h movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
08c8h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
08cah mov [rsp+620h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 06 00 00
08d1h lea rdx,[rsp+620h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 06 00 00
08d9h test cl,4                     ; TEST(Test_rm8_imm8) [CL,4h:imm8]                     encoding(3 bytes) = f6 c1 04
08dch jne short 08e2h               ; JNE(Jne_rel8_64) [8E2h:jmp64]                        encoding(2 bytes) = 75 04
08deh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
08e0h jmp short 08e7h               ; JMP(Jmp_rel8_64) [8E7h:jmp64]                        encoding(2 bytes) = eb 05
08e2h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
08e7h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
08e9h mov ecx,[rsp+620h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 06 00 00
08f0h mov [rsp+9C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 09 00 00
08f7h mov ecx,[rsp+9C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 09 00 00
08feh mov [rsp+618h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 18 06 00 00
0905h cmp dword ptr [rsp+618h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 18 06 00 00 01
090dh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0910h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0913h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0915h mov [rsp+610h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 06 00 00
091ch mov edx,[rsp+610h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 06 00 00
0923h mov [rsp+9C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 09 00 00
092ah mov edx,[rsp+9C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 09 00 00
0931h mov [rsp+608h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 08 06 00 00
0938h cmp dword ptr [rsp+608h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 08 06 00 00 01
0940h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0943h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0946h mov dword ptr [rsp+600h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 00 06 00 00 01 00 00 00
0951h mov r8d,[rsp+600h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 00 06 00 00
0959h mov [rsp+9B8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 b8 09 00 00
0961h mov r8d,[rsp+9B8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b8 09 00 00
0969h mov [rsp+5F8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f8 05 00 00
0971h cmp dword ptr [rsp+5F8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 f8 05 00 00 01
0979h sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
097dh movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
0981h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0984h mov [rsp+5F0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 f0 05 00 00
098ch mov r9d,[rsp+5F0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 f0 05 00 00
0994h mov [rsp+9B0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 b0 09 00 00
099ch mov r9d,[rsp+9B0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 b0 09 00 00
09a4h mov [rsp+5E8h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 e8 05 00 00
09ach xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
09afh mov [rsp+5E4h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 e4 05 00 00
09b7h mov [rsp+5E0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 e0 05 00 00
09bfh mov [rsp+5DCh],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 dc 05 00 00
09c7h mov [rsp+5DCh],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 dc 05 00 00
09cfh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
09d1h je short 09e5h                ; JE(Je_rel8_64) [9E5h:jmp64]                          encoding(2 bytes) = 74 12
09d3h movzx ecx,byte ptr [rsp+5DCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 dc 05 00 00
09dbh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
09deh mov [rsp+5DCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 dc 05 00 00
09e5h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
09e7h je short 09fbh                ; JE(Je_rel8_64) [9FBh:jmp64]                          encoding(2 bytes) = 74 12
09e9h movzx ecx,byte ptr [rsp+5DCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 dc 05 00 00
09f1h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
09f4h mov [rsp+5DCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 dc 05 00 00
09fbh mov ecx,[rsp+5DCh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 dc 05 00 00
0a02h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a05h mov [rsp+5E0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e0 05 00 00
0a0ch test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
0a0fh je short 0a23h                ; JE(Je_rel8_64) [A23h:jmp64]                          encoding(2 bytes) = 74 12
0a11h movzx ecx,byte ptr [rsp+5E0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 e0 05 00 00
0a19h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0a1ch mov [rsp+5E0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e0 05 00 00
0a23h mov ecx,[rsp+5E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 05 00 00
0a2ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a2dh mov [rsp+5E4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e4 05 00 00
0a34h cmp dword ptr [rsp+5E8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 e8 05 00 00 01
0a3ch jne short 0a50h               ; JNE(Jne_rel8_64) [A50h:jmp64]                        encoding(2 bytes) = 75 12
0a3eh movzx ecx,byte ptr [rsp+5E4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 e4 05 00 00
0a46h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0a49h mov [rsp+5E4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 e4 05 00 00
0a50h mov ecx,[rsp+5E4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e4 05 00 00
0a57h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a5ah mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0a5dh lea rcx,[rsp+5C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 05 00 00
0a65h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a69h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0a6dh lea rcx,[rsp+5A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 05 00 00
0a75h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0a79h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0a7dh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0a81h mov [rsp+5A0h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 a0 05 00 00
0a89h mov rcx,[rsp+5A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 05 00 00
0a91h lea rdx,[rsp+5A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 05 00 00
0a99h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0a9ch mov dword ptr [rsp+5B0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 b0 05 00 00 01 00 00 00
0aa7h vmovdqu xmm0,xmmword ptr [rsp+5A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 05 00 00
0ab0h vmovdqu xmmword ptr [rsp+5B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 05 00 00
0ab9h lea rcx,[rsp+5C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 05 00 00
0ac1h vmovdqu xmm0,xmmword ptr [rsp+5B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 05 00 00
0acah vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0ad0h lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
0ad5h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 46 91 ff ff
0adah vmovdqu xmm0,xmmword ptr [rsp+5C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 05 00 00
0ae3h vmovdqu xmmword ptr [rsp+9A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 09 00 00
0aech vmovdqu xmm0,xmmword ptr [rsp+9A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 09 00 00
0af5h vmovdqu xmmword ptr [rsp+590h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 05 00 00
0afeh vmovdqu xmm0,xmmword ptr [rsp+590h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 05 00 00
0b07h vmovdqu xmmword ptr [rsp+580h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 05 00 00
0b10h vmovdqu xmm0,xmmword ptr [rsp+580h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 05 00 00
0b19h vmovdqu xmmword ptr [rsp+570h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 05 00 00
0b22h vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
0b2bh vmovdqu xmmword ptr [rsp+560h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 05 00 00
0b34h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
0b3eh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0b41h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0b45h mov r11,7FFDDB000FD0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fd0h:imm64]         encoding(10 bytes) = 49 bb d0 0f 00 db fd 7f 00 00
0b4fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0b54h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0b56h call qword ptr [7FFDDB000FD0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 54 aa 5d ff
0b5ch lea rcx,[rsp+530h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 05 00 00
0b64h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0b68h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0b6ch test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0b6fh jne short 0b83h               ; JNE(Jne_rel8_64) [B83h:jmp64]                        encoding(2 bytes) = 75 12
0b71h lea rax,[rsp+530h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 30 05 00 00
0b79h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0b7dh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0b81h jmp short 0bach               ; JMP(Jmp_rel8_64) [BACh:jmp64]                        encoding(2 bytes) = eb 29
0b83h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0b87h mov [rsp+528h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 28 05 00 00
0b8fh mov rcx,[rsp+528h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 05 00 00
0b97h lea rdx,[rsp+530h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 30 05 00 00
0b9fh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0ba2h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0ba5h mov [rsp+538h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 05 00 00
0bach vmovdqu xmm0,xmmword ptr [rsp+530h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 05 00 00
0bb5h vmovdqu xmmword ptr [rsp+540h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 05 00 00
0bbeh cmp dword ptr [rsp+548h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 48 05 00 00 00
0bc6h jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 76 12 00 00
0bcch mov rcx,[rsp+540h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 40 05 00 00
0bd4h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0bd7h mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0be1h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0be4h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0be7h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0beah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0bech add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0befh mov eax,[rsp+568h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 68 05 00 00
0bf6h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0bf9h ja near ptr 1e06h             ; JA(Ja_rel32_64) [1E06h:jmp64]                        encoding(6 bytes) = 0f 87 07 12 00 00
0bffh mov r8,[rsp+560h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 60 05 00 00
0c07h lea rax,[rsp+518h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 18 05 00 00
0c0fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0c13h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0c17h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0c1ah add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0c1dh mov [rsp+510h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 10 05 00 00
0c25h mov rcx,[rsp+510h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 10 05 00 00
0c2dh lea r8,[rsp+518h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 18 05 00 00
0c35h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0c38h mov [rsp+520h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 20 05 00 00
0c3fh vmovdqu xmm0,xmmword ptr [rsp+518h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 05 00 00
0c48h vmovdqu xmmword ptr [rsp+550h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 05 00 00
0c51h vmovdqu xmm0,xmmword ptr [rsp+550h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 05 00 00
0c5ah vmovdqu xmmword ptr [rsp+500h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 05 00 00
0c63h mov ecx,[rsp+578h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 05 00 00
0c6ah cmp ecx,[rsp+508h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 08 05 00 00
0c71h ja near ptr 1e0ch             ; JA(Ja_rel32_64) [1E0Ch:jmp64]                        encoding(6 bytes) = 0f 87 95 11 00 00
0c77h mov rcx,[rsp+500h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 05 00 00
0c7fh mov rdx,[rsp+570h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 70 05 00 00
0c87h mov r8d,[rsp+578h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 78 05 00 00
0c8fh movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0c92h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F34E0h:jmp64]                encoding(5 bytes) = e8 49 28 7f 5d
0c97h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
0ca1h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0ca6h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 15 df 23 5f
0cabh movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
0cb3h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0cb5h mov [rsp+4F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 04 00 00
0cbch lea rdx,[rsp+4F8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 f8 04 00 00
0cc4h test cl,8                     ; TEST(Test_rm8_imm8) [CL,8h:imm8]                     encoding(3 bytes) = f6 c1 08
0cc7h jne short 0ccdh               ; JNE(Jne_rel8_64) [CCDh:jmp64]                        encoding(2 bytes) = 75 04
0cc9h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0ccbh jmp short 0cd2h               ; JMP(Jmp_rel8_64) [CD2h:jmp64]                        encoding(2 bytes) = eb 05
0ccdh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0cd2h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
0cd4h mov ecx,[rsp+4F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 04 00 00
0cdbh mov [rsp+998h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 09 00 00
0ce2h mov ecx,[rsp+998h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 09 00 00
0ce9h mov [rsp+4F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 04 00 00
0cf0h cmp dword ptr [rsp+4F0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 f0 04 00 00 01
0cf8h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0cfbh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0cfeh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0d00h mov [rsp+4E8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e8 04 00 00
0d07h mov edx,[rsp+4E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 04 00 00
0d0eh mov [rsp+990h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 09 00 00
0d15h mov edx,[rsp+990h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 09 00 00
0d1ch mov [rsp+4E0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 e0 04 00 00
0d23h cmp dword ptr [rsp+4E0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 e0 04 00 00 01
0d2bh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0d2eh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0d31h mov dword ptr [rsp+4D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 04 00 00 01 00 00 00
0d3ch mov r8d,[rsp+4D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 04 00 00
0d44h mov [rsp+988h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 88 09 00 00
0d4ch mov r8d,[rsp+988h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 09 00 00
0d54h mov [rsp+4D0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 d0 04 00 00
0d5ch cmp dword ptr [rsp+4D0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 d0 04 00 00 01
0d64h sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
0d68h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
0d6ch mov dword ptr [rsp+4C8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c8 04 00 00 01 00 00 00
0d77h mov r9d,[rsp+4C8h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 c8 04 00 00
0d7fh mov [rsp+980h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 80 09 00 00
0d87h mov r9d,[rsp+980h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 80 09 00 00
0d8fh mov [rsp+4C0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 c0 04 00 00
0d97h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0d9ah mov [rsp+4BCh],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 bc 04 00 00
0da2h mov [rsp+4B8h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 b8 04 00 00
0daah mov [rsp+4B4h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 b4 04 00 00
0db2h mov [rsp+4B4h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 b4 04 00 00
0dbah test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0dbch je short 0dd0h                ; JE(Je_rel8_64) [DD0h:jmp64]                          encoding(2 bytes) = 74 12
0dbeh movzx ecx,byte ptr [rsp+4B4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 b4 04 00 00
0dc6h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0dc9h mov [rsp+4B4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 b4 04 00 00
0dd0h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0dd2h je short 0de6h                ; JE(Je_rel8_64) [DE6h:jmp64]                          encoding(2 bytes) = 74 12
0dd4h movzx ecx,byte ptr [rsp+4B4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 b4 04 00 00
0ddch or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0ddfh mov [rsp+4B4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 b4 04 00 00
0de6h mov ecx,[rsp+4B4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b4 04 00 00
0dedh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0df0h mov [rsp+4B8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 b8 04 00 00
0df7h test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
0dfah je short 0e0eh                ; JE(Je_rel8_64) [E0Eh:jmp64]                          encoding(2 bytes) = 74 12
0dfch movzx ecx,byte ptr [rsp+4B8h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 b8 04 00 00
0e04h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0e07h mov [rsp+4B8h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 b8 04 00 00
0e0eh mov ecx,[rsp+4B8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 04 00 00
0e15h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0e18h mov [rsp+4BCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 bc 04 00 00
0e1fh cmp dword ptr [rsp+4C0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 c0 04 00 00 01
0e27h jne short 0e3bh               ; JNE(Jne_rel8_64) [E3Bh:jmp64]                        encoding(2 bytes) = 75 12
0e29h movzx ecx,byte ptr [rsp+4BCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 bc 04 00 00
0e31h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0e34h mov [rsp+4BCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 bc 04 00 00
0e3bh mov ecx,[rsp+4BCh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 bc 04 00 00
0e42h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0e45h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
0e48h lea rcx,[rsp+4A0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a0 04 00 00
0e50h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0e54h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0e58h lea rcx,[rsp+480h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 04 00 00
0e60h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0e64h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0e68h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
0e6ch mov [rsp+478h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 78 04 00 00
0e74h mov rcx,[rsp+478h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 78 04 00 00
0e7ch lea rdx,[rsp+480h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 04 00 00
0e84h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0e87h mov dword ptr [rsp+488h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 88 04 00 00 01 00 00 00
0e92h vmovdqu xmm0,xmmword ptr [rsp+480h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 04 00 00
0e9bh vmovdqu xmmword ptr [rsp+490h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 04 00 00
0ea4h lea rcx,[rsp+4A0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a0 04 00 00
0each vmovdqu xmm0,xmmword ptr [rsp+490h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 04 00 00
0eb5h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0ebbh lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
0ec0h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 5b 8d ff ff
0ec5h vmovdqu xmm0,xmmword ptr [rsp+4A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 04 00 00
0eceh vmovdqu xmmword ptr [rsp+970h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 09 00 00
0ed7h vmovdqu xmm0,xmmword ptr [rsp+970h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 09 00 00
0ee0h vmovdqu xmmword ptr [rsp+468h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 04 00 00
0ee9h vmovdqu xmm0,xmmword ptr [rsp+468h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 04 00 00
0ef2h vmovdqu xmmword ptr [rsp+458h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 58 04 00 00
0efbh vmovdqu xmm0,xmmword ptr [rsp+458h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 04 00 00
0f04h vmovdqu xmmword ptr [rsp+448h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 04 00 00
0f0dh vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
0f16h vmovdqu xmmword ptr [rsp+438h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 04 00 00
0f1fh mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
0f29h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0f2ch mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0f30h mov r11,7FFDDB000FD8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fd8h:imm64]         encoding(10 bytes) = 49 bb d8 0f 00 db fd 7f 00 00
0f3ah mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0f3fh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0f41h call qword ptr [7FFDDB000FD8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 71 a6 5d ff
0f47h lea rcx,[rsp+408h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 04 00 00
0f4fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0f53h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0f57h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0f5ah jne short 0f6eh               ; JNE(Jne_rel8_64) [F6Eh:jmp64]                        encoding(2 bytes) = 75 12
0f5ch lea rax,[rsp+408h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 08 04 00 00
0f64h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0f68h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0f6ch jmp short 0f97h               ; JMP(Jmp_rel8_64) [F97h:jmp64]                        encoding(2 bytes) = eb 29
0f6eh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0f72h mov [rsp+400h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 00 04 00 00
0f7ah mov rcx,[rsp+400h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 04 00 00
0f82h lea rdx,[rsp+408h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 08 04 00 00
0f8ah mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0f8dh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0f90h mov [rsp+410h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 04 00 00
0f97h vmovdqu xmm0,xmmword ptr [rsp+408h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 04 00 00
0fa0h vmovdqu xmmword ptr [rsp+418h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 04 00 00
0fa9h cmp dword ptr [rsp+420h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 20 04 00 00 00
0fb1h jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 8b 0e 00 00
0fb7h mov rcx,[rsp+418h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 04 00 00
0fbfh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0fc2h mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
0fcch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0fcfh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0fd2h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0fd5h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0fd7h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0fdah mov eax,[rsp+440h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 40 04 00 00
0fe1h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0fe4h ja near ptr 1e12h             ; JA(Ja_rel32_64) [1E12h:jmp64]                        encoding(6 bytes) = 0f 87 28 0e 00 00
0feah mov r8,[rsp+438h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 38 04 00 00
0ff2h lea rax,[rsp+3F0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 f0 03 00 00
0ffah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0ffeh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1002h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1005h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1008h mov [rsp+3E8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e8 03 00 00
1010h mov rcx,[rsp+3E8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e8 03 00 00
1018h lea r8,[rsp+3F0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 f0 03 00 00
1020h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1023h mov [rsp+3F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 03 00 00
102ah vmovdqu xmm0,xmmword ptr [rsp+3F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 03 00 00
1033h vmovdqu xmmword ptr [rsp+428h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 04 00 00
103ch vmovdqu xmm0,xmmword ptr [rsp+428h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 04 00 00
1045h vmovdqu xmmword ptr [rsp+3D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 03 00 00
104eh mov ecx,[rsp+450h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 04 00 00
1055h cmp ecx,[rsp+3E0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 e0 03 00 00
105ch ja near ptr 1e18h             ; JA(Ja_rel32_64) [1E18h:jmp64]                        encoding(6 bytes) = 0f 87 b6 0d 00 00
1062h mov rcx,[rsp+3D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 03 00 00
106ah mov rdx,[rsp+448h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 48 04 00 00
1072h mov r8d,[rsp+450h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 50 04 00 00
107ah movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
107dh call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F34E0h:jmp64]                encoding(5 bytes) = e8 5e 24 7f 5d
1082h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
108ch mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1091h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 2a db 23 5f
1096h movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
109eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
10a0h mov [rsp+3D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 03 00 00
10a7h lea rdx,[rsp+3D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 03 00 00
10afh test cl,10h                   ; TEST(Test_rm8_imm8) [CL,10h:imm8]                    encoding(3 bytes) = f6 c1 10
10b2h jne short 10b8h               ; JNE(Jne_rel8_64) [10B8h:jmp64]                       encoding(2 bytes) = 75 04
10b4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
10b6h jmp short 10bdh               ; JMP(Jmp_rel8_64) [10BDh:jmp64]                       encoding(2 bytes) = eb 05
10b8h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
10bdh mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
10bfh mov ecx,[rsp+3D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 03 00 00
10c6h mov [rsp+968h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 68 09 00 00
10cdh mov ecx,[rsp+968h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 09 00 00
10d4h mov [rsp+3C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 03 00 00
10dbh cmp dword ptr [rsp+3C8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 c8 03 00 00 01
10e3h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
10e6h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
10e9h mov dword ptr [rsp+3C0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 c0 03 00 00 01 00 00 00
10f4h mov edx,[rsp+3C0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c0 03 00 00
10fbh mov [rsp+960h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 60 09 00 00
1102h mov edx,[rsp+960h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 60 09 00 00
1109h mov [rsp+3B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 03 00 00
1110h cmp dword ptr [rsp+3B8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 b8 03 00 00 01
1118h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
111bh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
111eh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1121h mov [rsp+3B0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 b0 03 00 00
1129h mov r8d,[rsp+3B0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b0 03 00 00
1131h mov [rsp+958h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 58 09 00 00
1139h mov r8d,[rsp+958h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 58 09 00 00
1141h mov [rsp+3A8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a8 03 00 00
1149h cmp dword ptr [rsp+3A8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 a8 03 00 00 01
1151h sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
1155h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
1159h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
115ch mov [rsp+3A0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 a0 03 00 00
1164h mov r9d,[rsp+3A0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 a0 03 00 00
116ch mov [rsp+950h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 50 09 00 00
1174h mov r9d,[rsp+950h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 50 09 00 00
117ch mov [rsp+398h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 98 03 00 00
1184h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
1187h mov [rsp+394h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 94 03 00 00
118fh mov [rsp+390h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 90 03 00 00
1197h mov [rsp+38Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 03 00 00
119fh mov [rsp+38Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 8c 03 00 00
11a7h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
11a9h je short 11bdh                ; JE(Je_rel8_64) [11BDh:jmp64]                         encoding(2 bytes) = 74 12
11abh movzx ecx,byte ptr [rsp+38Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 8c 03 00 00
11b3h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
11b6h mov [rsp+38Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 8c 03 00 00
11bdh test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
11bfh je short 11d3h                ; JE(Je_rel8_64) [11D3h:jmp64]                         encoding(2 bytes) = 74 12
11c1h movzx ecx,byte ptr [rsp+38Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 8c 03 00 00
11c9h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
11cch mov [rsp+38Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 8c 03 00 00
11d3h mov ecx,[rsp+38Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 8c 03 00 00
11dah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
11ddh mov [rsp+390h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 90 03 00 00
11e4h test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
11e7h je short 11fbh                ; JE(Je_rel8_64) [11FBh:jmp64]                         encoding(2 bytes) = 74 12
11e9h movzx ecx,byte ptr [rsp+390h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 90 03 00 00
11f1h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
11f4h mov [rsp+390h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 90 03 00 00
11fbh mov ecx,[rsp+390h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 03 00 00
1202h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1205h mov [rsp+394h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 94 03 00 00
120ch cmp dword ptr [rsp+398h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 98 03 00 00 01
1214h jne short 1228h               ; JNE(Jne_rel8_64) [1228h:jmp64]                       encoding(2 bytes) = 75 12
1216h movzx ecx,byte ptr [rsp+394h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 94 03 00 00
121eh or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
1221h mov [rsp+394h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 94 03 00 00
1228h mov ecx,[rsp+394h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 94 03 00 00
122fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1232h mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1235h lea rcx,[rsp+378h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 03 00 00
123dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1241h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1245h lea rcx,[rsp+358h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 03 00 00
124dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1251h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1255h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
1259h mov [rsp+350h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 50 03 00 00
1261h mov rcx,[rsp+350h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 03 00 00
1269h lea rdx,[rsp+358h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 03 00 00
1271h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1274h mov dword ptr [rsp+360h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 60 03 00 00 01 00 00 00
127fh vmovdqu xmm0,xmmword ptr [rsp+358h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 03 00 00
1288h vmovdqu xmmword ptr [rsp+368h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 03 00 00
1291h lea rcx,[rsp+378h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 78 03 00 00
1299h vmovdqu xmm0,xmmword ptr [rsp+368h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 68 03 00 00
12a2h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
12a8h lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
12adh call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 6e 89 ff ff
12b2h vmovdqu xmm0,xmmword ptr [rsp+378h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 03 00 00
12bbh vmovdqu xmmword ptr [rsp+940h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 09 00 00
12c4h vmovdqu xmm0,xmmword ptr [rsp+940h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 09 00 00
12cdh vmovdqu xmmword ptr [rsp+340h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 03 00 00
12d6h vmovdqu xmm0,xmmword ptr [rsp+340h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 03 00 00
12dfh vmovdqu xmmword ptr [rsp+330h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 03 00 00
12e8h vmovdqu xmm0,xmmword ptr [rsp+330h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 03 00 00
12f1h vmovdqu xmmword ptr [rsp+320h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 20 03 00 00
12fah vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
1303h vmovdqu xmmword ptr [rsp+310h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 03 00 00
130ch mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1316h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1319h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
131dh mov r11,7FFDDB000FE0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fe0h:imm64]         encoding(10 bytes) = 49 bb e0 0f 00 db fd 7f 00 00
1327h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
132ch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
132eh call qword ptr [7FFDDB000FE0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 8c a2 5d ff
1334h lea rcx,[rsp+2E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 02 00 00
133ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1340h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1344h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1347h jne short 135bh               ; JNE(Jne_rel8_64) [135Bh:jmp64]                       encoding(2 bytes) = 75 12
1349h lea rax,[rsp+2E0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 e0 02 00 00
1351h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1355h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1359h jmp short 1384h               ; JMP(Jmp_rel8_64) [1384h:jmp64]                       encoding(2 bytes) = eb 29
135bh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
135fh mov [rsp+2D8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 d8 02 00 00
1367h mov rcx,[rsp+2D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 02 00 00
136fh lea rdx,[rsp+2E0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e0 02 00 00
1377h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
137ah mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
137dh mov [rsp+2E8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 02 00 00
1384h vmovdqu xmm0,xmmword ptr [rsp+2E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 02 00 00
138dh vmovdqu xmmword ptr [rsp+2F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 02 00 00
1396h cmp dword ptr [rsp+2F8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 f8 02 00 00 00
139eh jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 9e 0a 00 00
13a4h mov rcx,[rsp+2F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 02 00 00
13ach movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
13afh mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
13b9h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
13bch mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
13bfh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
13c2h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
13c4h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
13c7h mov eax,[rsp+318h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 18 03 00 00
13ceh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
13d1h ja near ptr 1e1eh             ; JA(Ja_rel32_64) [1E1Eh:jmp64]                        encoding(6 bytes) = 0f 87 47 0a 00 00
13d7h mov r8,[rsp+310h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 10 03 00 00
13dfh lea rax,[rsp+2C8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c8 02 00 00
13e7h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
13ebh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
13efh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
13f2h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
13f5h mov [rsp+2C0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 c0 02 00 00
13fdh mov rcx,[rsp+2C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 02 00 00
1405h lea r8,[rsp+2C8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 c8 02 00 00
140dh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1410h mov [rsp+2D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 02 00 00
1417h vmovdqu xmm0,xmmword ptr [rsp+2C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 02 00 00
1420h vmovdqu xmmword ptr [rsp+300h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 00 03 00 00
1429h vmovdqu xmm0,xmmword ptr [rsp+300h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 00 03 00 00
1432h vmovdqu xmmword ptr [rsp+2B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 02 00 00
143bh mov ecx,[rsp+328h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 28 03 00 00
1442h cmp ecx,[rsp+2B8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 b8 02 00 00
1449h ja near ptr 1e24h             ; JA(Ja_rel32_64) [1E24h:jmp64]                        encoding(6 bytes) = 0f 87 d5 09 00 00
144fh mov rcx,[rsp+2B0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b0 02 00 00
1457h mov rdx,[rsp+320h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 20 03 00 00
145fh mov r8d,[rsp+328h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 03 00 00
1467h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
146ah call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F34E0h:jmp64]                encoding(5 bytes) = e8 71 20 7f 5d
146fh mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1479h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
147eh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 3d d7 23 5f
1483h movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
148bh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
148dh mov [rsp+2A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 02 00 00
1494h lea rdx,[rsp+2A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 02 00 00
149ch test cl,20h                   ; TEST(Test_rm8_imm8) [CL,20h:imm8]                    encoding(3 bytes) = f6 c1 20
149fh jne short 14a5h               ; JNE(Jne_rel8_64) [14A5h:jmp64]                       encoding(2 bytes) = 75 04
14a1h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
14a3h jmp short 14aah               ; JMP(Jmp_rel8_64) [14AAh:jmp64]                       encoding(2 bytes) = eb 05
14a5h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
14aah mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
14ach mov ecx,[rsp+2A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 02 00 00
14b3h mov [rsp+938h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 09 00 00
14bah mov ecx,[rsp+938h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 38 09 00 00
14c1h mov [rsp+2A0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 02 00 00
14c8h cmp dword ptr [rsp+2A0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 a0 02 00 00 01
14d0h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
14d3h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
14d6h mov dword ptr [rsp+298h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 98 02 00 00 01 00 00 00
14e1h mov edx,[rsp+298h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 98 02 00 00
14e8h mov [rsp+930h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 09 00 00
14efh mov edx,[rsp+930h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 09 00 00
14f6h mov [rsp+290h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 90 02 00 00
14fdh cmp dword ptr [rsp+290h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 90 02 00 00 01
1505h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
1508h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
150bh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
150eh mov [rsp+288h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 88 02 00 00
1516h mov r8d,[rsp+288h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 02 00 00
151eh mov [rsp+928h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 28 09 00 00
1526h mov r8d,[rsp+928h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 09 00 00
152eh mov [rsp+280h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 80 02 00 00
1536h cmp dword ptr [rsp+280h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 80 02 00 00 01
153eh sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
1542h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
1546h mov dword ptr [rsp+278h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 78 02 00 00 01 00 00 00
1551h mov r9d,[rsp+278h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 78 02 00 00
1559h mov [rsp+920h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 20 09 00 00
1561h mov r9d,[rsp+920h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 20 09 00 00
1569h mov [rsp+270h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 70 02 00 00
1571h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
1574h mov [rsp+26Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 6c 02 00 00
157ch mov [rsp+268h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 68 02 00 00
1584h mov [rsp+264h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 64 02 00 00
158ch mov [rsp+264h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 64 02 00 00
1594h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
1596h je short 15aah                ; JE(Je_rel8_64) [15AAh:jmp64]                         encoding(2 bytes) = 74 12
1598h movzx ecx,byte ptr [rsp+264h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 64 02 00 00
15a0h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
15a3h mov [rsp+264h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 64 02 00 00
15aah test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
15ach je short 15c0h                ; JE(Je_rel8_64) [15C0h:jmp64]                         encoding(2 bytes) = 74 12
15aeh movzx ecx,byte ptr [rsp+264h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 64 02 00 00
15b6h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
15b9h mov [rsp+264h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 64 02 00 00
15c0h mov ecx,[rsp+264h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 64 02 00 00
15c7h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
15cah mov [rsp+268h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 68 02 00 00
15d1h test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
15d4h je short 15e8h                ; JE(Je_rel8_64) [15E8h:jmp64]                         encoding(2 bytes) = 74 12
15d6h movzx ecx,byte ptr [rsp+268h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 68 02 00 00
15deh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
15e1h mov [rsp+268h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 68 02 00 00
15e8h mov ecx,[rsp+268h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 02 00 00
15efh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
15f2h mov [rsp+26Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 6c 02 00 00
15f9h cmp dword ptr [rsp+270h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 70 02 00 00 01
1601h jne short 1615h               ; JNE(Jne_rel8_64) [1615h:jmp64]                       encoding(2 bytes) = 75 12
1603h movzx ecx,byte ptr [rsp+26Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 6c 02 00 00
160bh or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
160eh mov [rsp+26Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 6c 02 00 00
1615h mov ecx,[rsp+26Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 6c 02 00 00
161ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
161fh mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1622h lea rcx,[rsp+250h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 02 00 00
162ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
162eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1632h lea rcx,[rsp+230h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 02 00 00
163ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
163eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1642h add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
1646h mov [rsp+228h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 28 02 00 00
164eh mov rcx,[rsp+228h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 02 00 00
1656h lea rdx,[rsp+230h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 30 02 00 00
165eh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1661h mov dword ptr [rsp+238h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 38 02 00 00 01 00 00 00
166ch vmovdqu xmm0,xmmword ptr [rsp+230h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 30 02 00 00
1675h vmovdqu xmmword ptr [rsp+240h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 02 00 00
167eh lea rcx,[rsp+250h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 02 00 00
1686h vmovdqu xmm0,xmmword ptr [rsp+240h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 02 00 00
168fh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
1695h lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
169ah call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 81 85 ff ff
169fh vmovdqu xmm0,xmmword ptr [rsp+250h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 02 00 00
16a8h vmovdqu xmmword ptr [rsp+910h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 10 09 00 00
16b1h vmovdqu xmm0,xmmword ptr [rsp+910h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 10 09 00 00
16bah vmovdqu xmmword ptr [rsp+218h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 02 00 00
16c3h vmovdqu xmm0,xmmword ptr [rsp+218h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 02 00 00
16cch vmovdqu xmmword ptr [rsp+208h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 02 00 00
16d5h vmovdqu xmm0,xmmword ptr [rsp+208h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 02 00 00
16deh vmovdqu xmmword ptr [rsp+1F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 01 00 00
16e7h vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
16f0h vmovdqu xmmword ptr [rsp+1E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 01 00 00
16f9h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1703h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1706h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
170ah mov r11,7FFDDB000FE8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000fe8h:imm64]         encoding(10 bytes) = 49 bb e8 0f 00 db fd 7f 00 00
1714h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
1719h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
171bh call qword ptr [7FFDDB000FE8h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 a7 9e 5d ff
1721h lea rcx,[rsp+1B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 01 00 00
1729h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
172dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1731h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1734h jne short 1748h               ; JNE(Jne_rel8_64) [1748h:jmp64]                       encoding(2 bytes) = 75 12
1736h lea rax,[rsp+1B8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b8 01 00 00
173eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1742h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1746h jmp short 1771h               ; JMP(Jmp_rel8_64) [1771h:jmp64]                       encoding(2 bytes) = eb 29
1748h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
174ch mov [rsp+1B0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 b0 01 00 00
1754h mov rcx,[rsp+1B0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b0 01 00 00
175ch lea rdx,[rsp+1B8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b8 01 00 00
1764h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1767h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
176ah mov [rsp+1C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 01 00 00
1771h vmovdqu xmm0,xmmword ptr [rsp+1B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 01 00 00
177ah vmovdqu xmmword ptr [rsp+1C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 01 00 00
1783h cmp dword ptr [rsp+1D0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 d0 01 00 00 00
178bh jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 b1 06 00 00
1791h mov rcx,[rsp+1C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 01 00 00
1799h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
179ch mov rdx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RDX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 ba c8 ae 83 f7 e1 01 00 00
17a6h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
17a9h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
17ach mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
17afh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
17b1h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
17b4h mov eax,[rsp+1F0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f0 01 00 00
17bbh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
17beh ja near ptr 1e2ah             ; JA(Ja_rel32_64) [1E2Ah:jmp64]                        encoding(6 bytes) = 0f 87 66 06 00 00
17c4h mov r8,[rsp+1E8h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 e8 01 00 00
17cch lea rax,[rsp+1A0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 a0 01 00 00
17d4h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
17d8h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
17dch movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
17dfh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
17e2h mov [rsp+198h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 98 01 00 00
17eah mov rcx,[rsp+198h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 01 00 00
17f2h lea r8,[rsp+1A0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 a0 01 00 00
17fah mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
17fdh mov [rsp+1A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 01 00 00
1804h vmovdqu xmm0,xmmword ptr [rsp+1A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 01 00 00
180dh vmovdqu xmmword ptr [rsp+1D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 01 00 00
1816h vmovdqu xmm0,xmmword ptr [rsp+1D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 01 00 00
181fh vmovdqu xmmword ptr [rsp+188h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 01 00 00
1828h mov ecx,[rsp+200h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 00 02 00 00
182fh cmp ecx,[rsp+190h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 90 01 00 00
1836h ja near ptr 1e30h             ; JA(Ja_rel32_64) [1E30h:jmp64]                        encoding(6 bytes) = 0f 87 f4 05 00 00
183ch mov rcx,[rsp+188h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 88 01 00 00
1844h mov rdx,[rsp+1F8h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 f8 01 00 00
184ch mov r8d,[rsp+200h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 00 02 00 00
1854h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1857h call 7FFE39218F00h            ; CALL(Call_rel32_64) [5D7F34E0h:jmp64]                encoding(5 bytes) = e8 84 1c 7f 5d
185ch mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1866h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
186bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 50 d3 23 5f
1870h movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
1878h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
187ah mov [rsp+180h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 01 00 00
1881h lea rdx,[rsp+180h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 01 00 00
1889h test cl,40h                   ; TEST(Test_rm8_imm8) [CL,40h:imm8]                    encoding(3 bytes) = f6 c1 40
188ch jne short 1892h               ; JNE(Jne_rel8_64) [1892h:jmp64]                       encoding(2 bytes) = 75 04
188eh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1890h jmp short 1897h               ; JMP(Jmp_rel8_64) [1897h:jmp64]                       encoding(2 bytes) = eb 05
1892h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
1897h mov [rdx],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(2 bytes) = 89 0a
1899h mov ecx,[rsp+180h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 01 00 00
18a0h mov [rsp+908h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 09 00 00
18a7h mov ecx,[rsp+908h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 09 00 00
18aeh mov [rsp+178h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 01 00 00
18b5h cmp dword ptr [rsp+178h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 78 01 00 00 01
18bdh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
18c0h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
18c3h mov dword ptr [rsp+170h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 70 01 00 00 01 00 00 00
18ceh mov edx,[rsp+170h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 01 00 00
18d5h mov [rsp+900h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 09 00 00
18dch mov edx,[rsp+900h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 09 00 00
18e3h mov [rsp+168h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 01 00 00
18eah cmp dword ptr [rsp+168h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 68 01 00 00 01
18f2h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
18f5h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
18f8h mov dword ptr [rsp+160h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 60 01 00 00 01 00 00 00
1903h mov r8d,[rsp+160h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 60 01 00 00
190bh mov [rsp+8F8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 f8 08 00 00
1913h mov r8d,[rsp+8F8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 f8 08 00 00
191bh mov [rsp+158h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 58 01 00 00
1923h cmp dword ptr [rsp+158h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 58 01 00 00 01
192bh sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
192fh movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
1933h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
1936h mov [rsp+150h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 50 01 00 00
193eh mov r9d,[rsp+150h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 50 01 00 00
1946h mov [rsp+8F0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 f0 08 00 00
194eh mov r9d,[rsp+8F0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 f0 08 00 00
1956h mov [rsp+148h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 48 01 00 00
195eh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
1961h mov [rsp+144h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 44 01 00 00
1969h mov [rsp+140h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 40 01 00 00
1971h mov [rsp+13Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 3c 01 00 00
1979h mov [rsp+13Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 3c 01 00 00
1981h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
1983h je short 1997h                ; JE(Je_rel8_64) [1997h:jmp64]                         encoding(2 bytes) = 74 12
1985h movzx ecx,byte ptr [rsp+13Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 3c 01 00 00
198dh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
1990h mov [rsp+13Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 3c 01 00 00
1997h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
1999h je short 19adh                ; JE(Je_rel8_64) [19ADh:jmp64]                         encoding(2 bytes) = 74 12
199bh movzx ecx,byte ptr [rsp+13Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 3c 01 00 00
19a3h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
19a6h mov [rsp+13Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 3c 01 00 00
19adh mov ecx,[rsp+13Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 3c 01 00 00
19b4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
19b7h mov [rsp+140h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 40 01 00 00
19beh test r8b,r8b                  ; TEST(Test_rm8_r8) [R8L,R8L]                          encoding(3 bytes) = 45 84 c0
19c1h je short 19d5h                ; JE(Je_rel8_64) [19D5h:jmp64]                         encoding(2 bytes) = 74 12
19c3h movzx ecx,byte ptr [rsp+140h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 40 01 00 00
19cbh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
19ceh mov [rsp+140h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 40 01 00 00
19d5h mov ecx,[rsp+140h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 01 00 00
19dch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
19dfh mov [rsp+144h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 44 01 00 00
19e6h cmp dword ptr [rsp+148h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 48 01 00 00 01
19eeh jne short 1a02h               ; JNE(Jne_rel8_64) [1A02h:jmp64]                       encoding(2 bytes) = 75 12
19f0h movzx ecx,byte ptr [rsp+144h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 44 01 00 00
19f8h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
19fbh mov [rsp+144h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 44 01 00 00
1a02h mov ecx,[rsp+144h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 44 01 00 00
1a09h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1a0ch mov [rax+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RAX:br,DS:sr),CL]            encoding(3 bytes) = 88 48 10
1a0fh lea rcx,[rsp+128h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 01 00 00
1a17h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1a1bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1a1fh lea rcx,[rsp+108h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 01 00 00
1a27h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1a2bh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1a2fh add rax,10h                   ; ADD(Add_rm64_imm8) [RAX,10h:imm64]                   encoding(4 bytes) = 48 83 c0 10
1a33h mov [rsp+100h],rax            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(8 bytes) = 48 89 84 24 00 01 00 00
1a3bh mov rcx,[rsp+100h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 01 00 00
1a43h lea rdx,[rsp+108h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 08 01 00 00
1a4bh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1a4eh mov dword ptr [rsp+110h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 10 01 00 00 01 00 00 00
1a59h vmovdqu xmm0,xmmword ptr [rsp+108h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 01 00 00
1a62h vmovdqu xmmword ptr [rsp+118h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 01 00 00
1a6bh lea rcx,[rsp+128h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 01 00 00
1a73h vmovdqu xmm0,xmmword ptr [rsp+118h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 01 00 00
1a7ch vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
1a82h lea rdx,[rsp+48h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 48
1a87h call 7FFDDBA1F640h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9C20h:jmp64]        encoding(5 bytes) = e8 94 81 ff ff
1a8ch vmovdqu xmm0,xmmword ptr [rsp+128h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 01 00 00
1a95h vmovdqu xmmword ptr [rsp+8E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 08 00 00
1a9eh vmovdqu xmm0,xmmword ptr [rsp+8E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 08 00 00
1aa7h vmovdqu xmmword ptr [rsp+0F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 00 00 00
1ab0h vmovdqu xmm0,xmmword ptr [rsp+0F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 00 00 00
1ab9h vmovdqu xmmword ptr [rsp+0E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 00 00 00
1ac2h vmovdqu xmm0,xmmword ptr [rsp+0E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 00 00 00
1acbh vmovdqu xmmword ptr [rsp+0D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 00 00 00
1ad4h vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
1addh vmovdqu xmmword ptr [rsp+0C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 00 00 00
1ae6h mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1af0h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1af3h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1af7h mov r11,7FFDDB000FF0h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ff0h:imm64]         encoding(10 bytes) = 49 bb f0 0f 00 db fd 7f 00 00
1b01h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
1b06h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1b08h call qword ptr [7FFDDB000FF0h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 c2 9a 5d ff
1b0eh lea r8,[rsp+90h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 90 00 00 00
1b16h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b1ah vmovdqu xmmword ptr [r8],xmm0 ; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,R8:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c4 c1 7a 7f 00
1b1fh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1b22h jne short 1b36h               ; JNE(Jne_rel8_64) [1B36h:jmp64]                       encoding(2 bytes) = 75 12
1b24h lea rax,[rsp+90h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 90 00 00 00
1b2ch vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1b30h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1b34h jmp short 1b61h               ; JMP(Jmp_rel8_64) [1B61h:jmp64]                       encoding(2 bytes) = eb 2b
1b36h lea r8,[rax+10h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RAX:br,DS:sr)]        encoding(4 bytes) = 4c 8d 40 10
1b3ah mov [rsp+88h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(8 bytes) = 4c 89 84 24 88 00 00 00
1b42h mov r8,[rsp+88h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 88 00 00 00
1b4ah lea rcx,[rsp+90h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 00 00 00
1b52h mov [rcx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 01
1b55h mov r8d,[rax+8]               ; MOV(Mov_r32_rm32) [R8D,mem(32u,RAX:br,DS:sr)]        encoding(4 bytes) = 44 8b 40 08
1b59h mov [rsp+98h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 98 00 00 00
1b61h vmovdqu xmm0,xmmword ptr [rsp+90h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 00 00 00
1b6ah vmovdqu xmmword ptr [rsp+0A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 00 00 00
1b73h cmp dword ptr [rsp+0A8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 a8 00 00 00 00
1b7bh jbe near ptr 1e42h            ; JBE(Jbe_rel32_64) [1E42h:jmp64]                      encoding(6 bytes) = 0f 86 c1 02 00 00
1b81h mov r8,[rsp+0A0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 a0 00 00 00
1b89h movzx r8d,word ptr [r8]       ; MOVZX(Movzx_r32_rm16) [R8D,mem(16u,R8:br,DS:sr)]     encoding(4 bytes) = 45 0f b7 00
1b8dh mov rcx,1E1F783AEC8h          ; MOV(Mov_r64_imm64) [RCX,1e1f783aec8h:imm64]          encoding(10 bytes) = 48 b9 c8 ae 83 f7 e1 01 00 00
1b97h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
1b9ah mov ecx,[rcx+18h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 18
1b9dh mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
1ba0h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
1ba2h add rdx,rax                   ; ADD(Add_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 03 d0
1ba5h mov eax,[rsp+0C8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c8 00 00 00
1bach cmp rdx,rax                   ; CMP(Cmp_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 3b d0
1bafh ja near ptr 1e36h             ; JA(Ja_rel32_64) [1E36h:jmp64]                        encoding(6 bytes) = 0f 87 81 02 00 00
1bb5h mov rdx,[rsp+0C0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 c0 00 00 00
1bbdh lea rax,[rsp+78h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 78
1bc2h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1bc6h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1bcah movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1bcdh add r8,rdx                    ; ADD(Add_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 03 c2
1bd0h mov [rsp+70h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(5 bytes) = 4c 89 44 24 70
1bd5h mov r8,[rsp+70h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 44 24 70
1bdah lea rdx,[rsp+78h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 78
1bdfh mov [rdx],r8                  ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),R8]         encoding(3 bytes) = 4c 89 02
1be2h mov [rsp+80h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 00 00 00
1be9h vmovdqu xmm0,xmmword ptr [rsp+78h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 78
1befh vmovdqu xmmword ptr [rsp+0B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 00 00 00
1bf8h vmovdqu xmm0,xmmword ptr [rsp+0B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 00 00 00
1c01h vmovdqu xmmword ptr [rsp+60h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 60
1c07h mov r8d,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 00 00 00
1c0fh cmp r8d,[rsp+68h]             ; CMP(Cmp_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 3b 44 24 68
1c14h ja near ptr 1e3ch             ; JA(Ja_rel32_64) [1E3Ch:jmp64]                        encoding(6 bytes) = 0f 87 22 02 00 00
1c1ah mov r8d,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 00 00 00
1c22h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
1c25h mov rcx,[rsp+60h]             ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 4c 24 60
1c2ah mov rdx,[rsp+0D0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d0 00 00 00
1c32h call 7FFDDB641FF8h            ; CALL(Call_rel32_64) [FFFFFFFFFFC1C5D8h:jmp64]        encoding(5 bytes) = e8 a1 a9 c1 ff
1c37h mov rcx,7FFDDB0FEA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb0fea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 0f db fd 7f 00 00
1c41h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1c46h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23EBC0h:jmp64]                encoding(5 bytes) = e8 75 cf 23 5f
1c4bh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
1c4eh movzx ecx,byte ptr [rsp+0A60h]; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 60 0a 00 00
1c56h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1c58h mov [rsp+58h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 58
1c5ch lea rax,[rsp+58h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 58
1c61h test cl,80h                   ; TEST(Test_rm8_imm8) [CL,80h:imm8]                    encoding(3 bytes) = f6 c1 80
1c64h jne short 1c6ah               ; JNE(Jne_rel8_64) [1C6Ah:jmp64]                       encoding(2 bytes) = 75 04
1c66h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1c68h jmp short 1c6fh               ; JMP(Jmp_rel8_64) [1C6Fh:jmp64]                       encoding(2 bytes) = eb 05
1c6ah mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
1c6fh mov [rax],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(2 bytes) = 89 08
1c71h mov ecx,[rsp+58h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 58
1c75h mov [rsp+8D8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 08 00 00
1c7ch mov ecx,[rsp+8D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 08 00 00
1c83h call 7FFDDB7F3300h            ; CALL(Call_rel32_64) [FFFFFFFFFFDCD8E0h:jmp64]        encoding(5 bytes) = e8 58 bc dc ff
1c88h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
1c8ah call 7FFDDB131748h            ; CALL(Call_rel32_64) [FFFFFFFFFF70BD28h:jmp64]        encoding(5 bytes) = e8 99 a0 70 ff
1c8fh mov [rsp+8D0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d0 08 00 00
1c96h mov ecx,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 08 00 00
1c9dh call 7FFDDB7F3300h            ; CALL(Call_rel32_64) [FFFFFFFFFFDCD8E0h:jmp64]        encoding(5 bytes) = e8 3e bc dc ff
1ca2h mov r14d,eax                  ; MOV(Mov_r32_rm32) [R14D,EAX]                         encoding(3 bytes) = 44 8b f0
1ca5h call 7FFDDB131748h            ; CALL(Call_rel32_64) [FFFFFFFFFF70BD28h:jmp64]        encoding(5 bytes) = e8 7e a0 70 ff
1caah mov [rsp+8C8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c8 08 00 00
1cb1h mov ecx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 08 00 00
1cb8h call 7FFDDB7F3300h            ; CALL(Call_rel32_64) [FFFFFFFFFFDCD8E0h:jmp64]        encoding(5 bytes) = e8 23 bc dc ff
1cbdh mov r15d,eax                  ; MOV(Mov_r32_rm32) [R15D,EAX]                         encoding(3 bytes) = 44 8b f8
1cc0h call 7FFDDB131748h            ; CALL(Call_rel32_64) [FFFFFFFFFF70BD28h:jmp64]        encoding(5 bytes) = e8 63 a0 70 ff
1cc5h mov [rsp+8C0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 08 00 00
1ccch mov ecx,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 08 00 00
1cd3h call 7FFDDB7F3300h            ; CALL(Call_rel32_64) [FFFFFFFFFFDCD8E0h:jmp64]        encoding(5 bytes) = e8 08 bc dc ff
1cd8h mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
1cdbh mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
1cdeh mov r8d,r15d                  ; MOV(Mov_r32_rm32) [R8D,R15D]                         encoding(3 bytes) = 45 8b c7
1ce1h mov ecx,ebp                   ; MOV(Mov_r32_rm32) [ECX,EBP]                          encoding(2 bytes) = 8b cd
1ce3h call 7FFDDB822130h            ; CALL(Call_rel32_64) [FFFFFFFFFFDFC710h:jmp64]        encoding(5 bytes) = e8 28 aa df ff
1ce8h mov [rbx+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RBX:br,DS:sr),AL]            encoding(3 bytes) = 88 43 10
1cebh lea rcx,[rsp+8B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 08 00 00
1cf3h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
1cf6h call 7FFDDBA1E4F8h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF8AD8h:jmp64]        encoding(5 bytes) = e8 dd 6d ff ff
1cfbh lea rcx,[rsp+0A50h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 0a 00 00
1d03h vmovdqu xmm0,xmmword ptr [rsp+8B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 08 00 00
1d0ch vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
1d12h lea r8,[rsp+38h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 38
1d17h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1d1ch call 7FFDDBA1F4D0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9AB0h:jmp64]        encoding(5 bytes) = e8 8f 7d ff ff
1d21h lea rcx,[rsp+0A50h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 0a 00 00
1d29h lea rdx,[rsp+0A40h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 0a 00 00
1d31h mov r8d,3                     ; MOV(Mov_r32_imm32) [R8D,3h:imm32]                    encoding(6 bytes) = 41 b8 03 00 00 00
1d37h call 7FFDDBA1F530h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF9B10h:jmp64]        encoding(5 bytes) = e8 d4 7d ff ff
1d3ch lea rcx,[rsp+0A30h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 0a 00 00
1d44h lea rdx,[rsp+0A60h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 0a 00 00
1d4ch call 7FFDDB81AA40h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF5020h:jmp64]        encoding(5 bytes) = e8 cf 32 df ff
1d51h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
1d53h mov [rsp+8A8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a8 08 00 00
1d5bh lea rcx,[rsp+0A40h]           ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 0a 00 00
1d63h lea rdx,[rsp+0A30h]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 30 0a 00 00
1d6bh call 7FFDDBA23460h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFDA40h:jmp64]        encoding(5 bytes) = e8 d0 bc ff ff
1d70h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
1d72h lea rcx,[rsp+8A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 08 00 00
1d7ah mov edx,0AEh                  ; MOV(Mov_r32_imm32) [EDX,aeh:imm32]                   encoding(5 bytes) = ba ae 00 00 00
1d7fh call 7FFE3952AFD0h            ; CALL(Call_rel32_64) [5DB055B0h:jmp64]                encoding(5 bytes) = e8 2c 38 b0 5d
1d84h mov r8,[rsp+8A8h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 a8 08 00 00
1d8ch mov [rsp+20h],r8              ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),R8]         encoding(5 bytes) = 4c 89 44 24 20
1d91h mov r8,1E1F7836F50h           ; MOV(Mov_r64_imm64) [R8,1e1f7836f50h:imm64]           encoding(10 bytes) = 49 b8 50 6f 83 f7 e1 01 00 00
1d9bh mov r8,[r8]                   ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(3 bytes) = 4d 8b 00
1d9eh mov r9,1E1F7836F50h           ; MOV(Mov_r64_imm64) [R9,1e1f7836f50h:imm64]           encoding(10 bytes) = 49 b9 50 6f 83 f7 e1 01 00 00
1da8h mov r9,[r9]                   ; MOV(Mov_r64_rm64) [R9,mem(64u,R9:br,DS:sr)]          encoding(3 bytes) = 4d 8b 09
1dabh mov ecx,ebx                   ; MOV(Mov_r32_rm32) [ECX,EBX]                          encoding(2 bytes) = 8b cb
1dadh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1dafh call 7FFDDB130F60h            ; CALL(Call_rel32_64) [FFFFFFFFFF70B540h:jmp64]        encoding(5 bytes) = e8 8c 97 70 ff
1db4h vmovdqu xmm0,xmmword ptr [rsp+0A50h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 0a 00 00
1dbdh vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
1dc3h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
1dc8h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
1dcbh call 7FFDDBA23590h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFDB70h:jmp64]        encoding(5 bytes) = e8 a0 bd ff ff
1dd0h inc edi                       ; INC(Inc_rm32) [EDI]                                  encoding(2 bytes) = ff c7
1dd2h cmp edi,100h                  ; CMP(Cmp_rm32_imm32) [EDI,100h:imm32]                 encoding(6 bytes) = 81 ff 00 01 00 00
1dd8h jl near ptr 002bh             ; JL(Jl_rel32_64) [2Bh:jmp64]                          encoding(6 bytes) = 0f 8c 4d e2 ff ff
1ddeh add rsp,0A68h                 ; ADD(Add_rm64_imm32) [RSP,a68h:imm64]                 encoding(7 bytes) = 48 81 c4 68 0a 00 00
1de5h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1de6h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1de7h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1de8h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1de9h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1debh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1dedh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1deeh call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 bd 86 71 ff
1df3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1df4h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 bf 86 71 ff
1df9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1dfah call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 b1 86 71 ff
1dffh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e00h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 b3 86 71 ff
1e05h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e06h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 a5 86 71 ff
1e0bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e0ch call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 a7 86 71 ff
1e11h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e12h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 99 86 71 ff
1e17h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e18h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 9b 86 71 ff
1e1dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e1eh call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 8d 86 71 ff
1e23h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e24h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 8f 86 71 ff
1e29h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e2ah call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 81 86 71 ff
1e2fh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e30h call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 83 86 71 ff
1e35h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e36h call 7FFDDB13FED0h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B0h:jmp64]        encoding(5 bytes) = e8 75 86 71 ff
1e3bh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e3ch call 7FFDDB13FED8h            ; CALL(Call_rel32_64) [FFFFFFFFFF71A4B8h:jmp64]        encoding(5 bytes) = e8 77 86 71 ff
1e41h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1e42h call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F3694E0h:jmp64]                encoding(5 bytes) = e8 99 76 36 5f
1e47h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> EmitTernaryOpsBytes => new byte[7752]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x68,0x0A,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x90,0x02,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xF1,0x33,0xFF,0x40,0x0F,0xB6,0xCF,0x88,0x8C,0x24,0xA0,0x08,0x00,0x00,0x48,0x0F,0xBE,0x8C,0x24,0xA0,0x08,0x00,0x00,0x88,0x8C,0x24,0x60,0x0A,0x00,0x00,0x48,0xB9,0xE8,0x90,0x24,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x66,0x99,0x20,0x5F,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0xEB,0x23,0x5F,0x48,0x8D,0x8C,0x24,0x80,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x78,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x08,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x88,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x0A,0x00,0x00,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xD3,0xEA,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x70,0x08,0x00,0x00,0x48,0x8D,0x94,0x24,0x70,0x08,0x00,0x00,0xF6,0xC1,0x01,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x70,0x08,0x00,0x00,0x89,0x8C,0x24,0x28,0x0A,0x00,0x00,0x8B,0x8C,0x24,0x28,0x0A,0x00,0x00,0x89,0x8C,0x24,0x68,0x08,0x00,0x00,0x83,0xBC,0x24,0x68,0x08,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x60,0x08,0x00,0x00,0x8B,0x94,0x24,0x60,0x08,0x00,0x00,0x89,0x94,0x24,0x20,0x0A,0x00,0x00,0x8B,0x94,0x24,0x20,0x0A,0x00,0x00,0x89,0x94,0x24,0x58,0x08,0x00,0x00,0x83,0xBC,0x24,0x58,0x08,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x50,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x50,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x18,0x0A,0x00,0x00,0x44,0x8B,0x84,0x24,0x18,0x0A,0x00,0x00,0x44,0x89,0x84,0x24,0x48,0x08,0x00,0x00,0x83,0xBC,0x24,0x48,0x08,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x40,0x08,0x00,0x00,0x44,0x8B,0x8C,0x24,0x40,0x08,0x00,0x00,0x44,0x89,0x8C,0x24,0x10,0x0A,0x00,0x00,0x44,0x8B,0x8C,0x24,0x10,0x0A,0x00,0x00,0x44,0x89,0x8C,0x24,0x38,0x08,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x34,0x08,0x00,0x00,0x44,0x89,0x8C,0x24,0x30,0x08,0x00,0x00,0x44,0x89,0x8C,0x24,0x2C,0x08,0x00,0x00,0x44,0x89,0x8C,0x24,0x2C,0x08,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x2C,0x08,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x2C,0x08,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x2C,0x08,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x2C,0x08,0x00,0x00,0x8B,0x8C,0x24,0x2C,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x30,0x08,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x30,0x08,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x30,0x08,0x00,0x00,0x8B,0x8C,0x24,0x30,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x34,0x08,0x00,0x00,0x83,0xBC,0x24,0x38,0x08,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x34,0x08,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x34,0x08,0x00,0x00,0x8B,0x8C,0x24,0x34,0x08,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x18,0x08,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xF8,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xF0,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0xF8,0x07,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x00,0x08,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x08,0x00,0x00,0x48,0x8D,0x8C,0x24,0x18,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x19,0x99,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x07,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xC0,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0x1A,0xB2,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x80,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x80,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x78,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x07,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x88,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x07,0x00,0x00,0x83,0xBC,0x24,0x98,0x07,0x00,0x00,0x00,0x0F,0x86,0x4C,0x1A,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x07,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xB8,0x07,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xC5,0x19,0x00,0x00,0x4C,0x8B,0x84,0x24,0xB0,0x07,0x00,0x00,0x48,0x8D,0x84,0x24,0x68,0x07,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x60,0x07,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x07,0x00,0x00,0x4C,0x8D,0x84,0x24,0x68,0x07,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x70,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x07,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x07,0x00,0x00,0x3B,0x8C,0x24,0x58,0x07,0x00,0x00,0x0F,0x87,0x53,0x19,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x07,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0xC8,0x07,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x1F,0x30,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xEB,0xE6,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x48,0x07,0x00,0x00,0x48,0x8D,0x94,0x24,0x48,0x07,0x00,0x00,0xF6,0xC1,0x02,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x48,0x07,0x00,0x00,0x89,0x8C,0x24,0xF8,0x09,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x09,0x00,0x00,0x89,0x8C,0x24,0x40,0x07,0x00,0x00,0x83,0xBC,0x24,0x40,0x07,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x38,0x07,0x00,0x00,0x8B,0x94,0x24,0x38,0x07,0x00,0x00,0x89,0x94,0x24,0xF0,0x09,0x00,0x00,0x8B,0x94,0x24,0xF0,0x09,0x00,0x00,0x89,0x94,0x24,0x30,0x07,0x00,0x00,0x83,0xBC,0x24,0x30,0x07,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x28,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0xE8,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xE8,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0x20,0x07,0x00,0x00,0x83,0xBC,0x24,0x20,0x07,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0x18,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x8C,0x24,0x18,0x07,0x00,0x00,0x44,0x89,0x8C,0x24,0xE0,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0xE0,0x09,0x00,0x00,0x44,0x89,0x8C,0x24,0x10,0x07,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x0C,0x07,0x00,0x00,0x44,0x89,0x8C,0x24,0x08,0x07,0x00,0x00,0x44,0x89,0x8C,0x24,0x04,0x07,0x00,0x00,0x44,0x89,0x8C,0x24,0x04,0x07,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x04,0x07,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x04,0x07,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x04,0x07,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x04,0x07,0x00,0x00,0x8B,0x8C,0x24,0x04,0x07,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x08,0x07,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x08,0x07,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x08,0x07,0x00,0x00,0x8B,0x8C,0x24,0x08,0x07,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x0C,0x07,0x00,0x00,0x83,0xBC,0x24,0x10,0x07,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x0C,0x07,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x0C,0x07,0x00,0x00,0x8B,0x8C,0x24,0x0C,0x07,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xF0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD0,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xC8,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x06,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xD8,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x31,0x95,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x06,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xC8,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x37,0xAE,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x58,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x58,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x50,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x60,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x06,0x00,0x00,0x83,0xBC,0x24,0x70,0x06,0x00,0x00,0x00,0x0F,0x86,0x61,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0x68,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x90,0x06,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xE6,0x15,0x00,0x00,0x4C,0x8B,0x84,0x24,0x88,0x06,0x00,0x00,0x48,0x8D,0x84,0x24,0x40,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x38,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0x40,0x06,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x48,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x06,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x06,0x00,0x00,0x3B,0x8C,0x24,0x30,0x06,0x00,0x00,0x0F,0x87,0x74,0x15,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x06,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x06,0x00,0x00,0x44,0x8B,0x84,0x24,0xA0,0x06,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x34,0x2C,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x00,0xE3,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x20,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x06,0x00,0x00,0xF6,0xC1,0x04,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x20,0x06,0x00,0x00,0x89,0x8C,0x24,0xC8,0x09,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x09,0x00,0x00,0x89,0x8C,0x24,0x18,0x06,0x00,0x00,0x83,0xBC,0x24,0x18,0x06,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x10,0x06,0x00,0x00,0x8B,0x94,0x24,0x10,0x06,0x00,0x00,0x89,0x94,0x24,0xC0,0x09,0x00,0x00,0x8B,0x94,0x24,0xC0,0x09,0x00,0x00,0x89,0x94,0x24,0x08,0x06,0x00,0x00,0x83,0xBC,0x24,0x08,0x06,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x00,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x00,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0xB8,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0xB8,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0xF8,0x05,0x00,0x00,0x83,0xBC,0x24,0xF8,0x05,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0xF0,0x05,0x00,0x00,0x44,0x8B,0x8C,0x24,0xF0,0x05,0x00,0x00,0x44,0x89,0x8C,0x24,0xB0,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0xB0,0x09,0x00,0x00,0x44,0x89,0x8C,0x24,0xE8,0x05,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0xE4,0x05,0x00,0x00,0x44,0x89,0x8C,0x24,0xE0,0x05,0x00,0x00,0x44,0x89,0x8C,0x24,0xDC,0x05,0x00,0x00,0x44,0x89,0x8C,0x24,0xDC,0x05,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xDC,0x05,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xDC,0x05,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xDC,0x05,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xDC,0x05,0x00,0x00,0x8B,0x8C,0x24,0xDC,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xE0,0x05,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xE0,0x05,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xE0,0x05,0x00,0x00,0x8B,0x8C,0x24,0xE0,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xE4,0x05,0x00,0x00,0x83,0xBC,0x24,0xE8,0x05,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xE4,0x05,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0xE4,0x05,0x00,0x00,0x8B,0x8C,0x24,0xE4,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xC8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xA8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0xA0,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x05,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xB0,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC8,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x46,0x91,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x05,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xD0,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x54,0xAA,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x30,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x30,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x28,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x30,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x38,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x05,0x00,0x00,0x83,0xBC,0x24,0x48,0x05,0x00,0x00,0x00,0x0F,0x86,0x76,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0x40,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x68,0x05,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x07,0x12,0x00,0x00,0x4C,0x8B,0x84,0x24,0x60,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x18,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x10,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x10,0x05,0x00,0x00,0x4C,0x8D,0x84,0x24,0x18,0x05,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x20,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x05,0x00,0x00,0x8B,0x8C,0x24,0x78,0x05,0x00,0x00,0x3B,0x8C,0x24,0x08,0x05,0x00,0x00,0x0F,0x87,0x95,0x11,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x05,0x00,0x00,0x48,0x8B,0x94,0x24,0x70,0x05,0x00,0x00,0x44,0x8B,0x84,0x24,0x78,0x05,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x49,0x28,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x15,0xDF,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0xF8,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0xF8,0x04,0x00,0x00,0xF6,0xC1,0x08,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0xF8,0x04,0x00,0x00,0x89,0x8C,0x24,0x98,0x09,0x00,0x00,0x8B,0x8C,0x24,0x98,0x09,0x00,0x00,0x89,0x8C,0x24,0xF0,0x04,0x00,0x00,0x83,0xBC,0x24,0xF0,0x04,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xE8,0x04,0x00,0x00,0x8B,0x94,0x24,0xE8,0x04,0x00,0x00,0x89,0x94,0x24,0x90,0x09,0x00,0x00,0x8B,0x94,0x24,0x90,0x09,0x00,0x00,0x89,0x94,0x24,0xE0,0x04,0x00,0x00,0x83,0xBC,0x24,0xE0,0x04,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0xD8,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xD8,0x04,0x00,0x00,0x44,0x89,0x84,0x24,0x88,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0xD0,0x04,0x00,0x00,0x83,0xBC,0x24,0xD0,0x04,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0xC8,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x8C,0x24,0xC8,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0x80,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x80,0x09,0x00,0x00,0x44,0x89,0x8C,0x24,0xC0,0x04,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0xBC,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0xB8,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0xB4,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0xB4,0x04,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xB4,0x04,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xB4,0x04,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xB4,0x04,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xB4,0x04,0x00,0x00,0x8B,0x8C,0x24,0xB4,0x04,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xB8,0x04,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xB8,0x04,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xB8,0x04,0x00,0x00,0x8B,0x8C,0x24,0xB8,0x04,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xBC,0x04,0x00,0x00,0x83,0xBC,0x24,0xC0,0x04,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xBC,0x04,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0xBC,0x04,0x00,0x00,0x8B,0x8C,0x24,0xBC,0x04,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0xA0,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x80,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x78,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x78,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x04,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x88,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x5B,0x8D,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x58,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x04,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xD8,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x71,0xA6,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0x08,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x08,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x00,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x08,0x04,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x10,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x04,0x00,0x00,0x83,0xBC,0x24,0x20,0x04,0x00,0x00,0x00,0x0F,0x86,0x8B,0x0E,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x40,0x04,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x28,0x0E,0x00,0x00,0x4C,0x8B,0x84,0x24,0x38,0x04,0x00,0x00,0x48,0x8D,0x84,0x24,0xF0,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xE8,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE8,0x03,0x00,0x00,0x4C,0x8D,0x84,0x24,0xF0,0x03,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xF8,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x03,0x00,0x00,0x8B,0x8C,0x24,0x50,0x04,0x00,0x00,0x3B,0x8C,0x24,0xE0,0x03,0x00,0x00,0x0F,0x87,0xB6,0x0D,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x48,0x04,0x00,0x00,0x44,0x8B,0x84,0x24,0x50,0x04,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x5E,0x24,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x2A,0xDB,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0xD0,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x03,0x00,0x00,0xF6,0xC1,0x10,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0xD0,0x03,0x00,0x00,0x89,0x8C,0x24,0x68,0x09,0x00,0x00,0x8B,0x8C,0x24,0x68,0x09,0x00,0x00,0x89,0x8C,0x24,0xC8,0x03,0x00,0x00,0x83,0xBC,0x24,0xC8,0x03,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0xC0,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xC0,0x03,0x00,0x00,0x89,0x94,0x24,0x60,0x09,0x00,0x00,0x8B,0x94,0x24,0x60,0x09,0x00,0x00,0x89,0x94,0x24,0xB8,0x03,0x00,0x00,0x83,0xBC,0x24,0xB8,0x03,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xB0,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0xB0,0x03,0x00,0x00,0x44,0x89,0x84,0x24,0x58,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x58,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0xA8,0x03,0x00,0x00,0x83,0xBC,0x24,0xA8,0x03,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0xA0,0x03,0x00,0x00,0x44,0x8B,0x8C,0x24,0xA0,0x03,0x00,0x00,0x44,0x89,0x8C,0x24,0x50,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x50,0x09,0x00,0x00,0x44,0x89,0x8C,0x24,0x98,0x03,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x94,0x03,0x00,0x00,0x44,0x89,0x8C,0x24,0x90,0x03,0x00,0x00,0x44,0x89,0x8C,0x24,0x8C,0x03,0x00,0x00,0x44,0x89,0x8C,0x24,0x8C,0x03,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x8C,0x03,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x8C,0x03,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x8C,0x03,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x8C,0x03,0x00,0x00,0x8B,0x8C,0x24,0x8C,0x03,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x90,0x03,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x90,0x03,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x90,0x03,0x00,0x00,0x8B,0x8C,0x24,0x90,0x03,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x94,0x03,0x00,0x00,0x83,0xBC,0x24,0x98,0x03,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x94,0x03,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x94,0x03,0x00,0x00,0x8B,0x8C,0x24,0x94,0x03,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x78,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x58,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x50,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x03,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x60,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x68,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x6E,0x89,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x20,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x03,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xE0,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x8C,0xA2,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0xE0,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xE0,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xD8,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0xE0,0x02,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xE8,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x02,0x00,0x00,0x83,0xBC,0x24,0xF8,0x02,0x00,0x00,0x00,0x0F,0x86,0x9E,0x0A,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x18,0x03,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x47,0x0A,0x00,0x00,0x4C,0x8B,0x84,0x24,0x10,0x03,0x00,0x00,0x48,0x8D,0x84,0x24,0xC8,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xC0,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x02,0x00,0x00,0x4C,0x8D,0x84,0x24,0xC8,0x02,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xD0,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x00,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x00,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x02,0x00,0x00,0x8B,0x8C,0x24,0x28,0x03,0x00,0x00,0x3B,0x8C,0x24,0xB8,0x02,0x00,0x00,0x0F,0x87,0xD5,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB0,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0x20,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x03,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x71,0x20,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x3D,0xD7,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0xA8,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x02,0x00,0x00,0xF6,0xC1,0x20,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0xA8,0x02,0x00,0x00,0x89,0x8C,0x24,0x38,0x09,0x00,0x00,0x8B,0x8C,0x24,0x38,0x09,0x00,0x00,0x89,0x8C,0x24,0xA0,0x02,0x00,0x00,0x83,0xBC,0x24,0xA0,0x02,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0x98,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x98,0x02,0x00,0x00,0x89,0x94,0x24,0x30,0x09,0x00,0x00,0x8B,0x94,0x24,0x30,0x09,0x00,0x00,0x89,0x94,0x24,0x90,0x02,0x00,0x00,0x83,0xBC,0x24,0x90,0x02,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x88,0x02,0x00,0x00,0x44,0x8B,0x84,0x24,0x88,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0x28,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0x80,0x02,0x00,0x00,0x83,0xBC,0x24,0x80,0x02,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0xC7,0x84,0x24,0x78,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x8C,0x24,0x78,0x02,0x00,0x00,0x44,0x89,0x8C,0x24,0x20,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x20,0x09,0x00,0x00,0x44,0x89,0x8C,0x24,0x70,0x02,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x6C,0x02,0x00,0x00,0x44,0x89,0x8C,0x24,0x68,0x02,0x00,0x00,0x44,0x89,0x8C,0x24,0x64,0x02,0x00,0x00,0x44,0x89,0x8C,0x24,0x64,0x02,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x64,0x02,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x64,0x02,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x64,0x02,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x64,0x02,0x00,0x00,0x8B,0x8C,0x24,0x64,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x68,0x02,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x68,0x02,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x68,0x02,0x00,0x00,0x8B,0x8C,0x24,0x68,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x6C,0x02,0x00,0x00,0x83,0xBC,0x24,0x70,0x02,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x6C,0x02,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x6C,0x02,0x00,0x00,0x8B,0x8C,0x24,0x6C,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x50,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x30,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x28,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0x30,0x02,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x38,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x30,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x02,0x00,0x00,0x48,0x8D,0x8C,0x24,0x50,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x81,0x85,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x10,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x10,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x01,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xE8,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xA7,0x9E,0x5D,0xFF,0x48,0x8D,0x8C,0x24,0xB8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xB8,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xB0,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB0,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xB8,0x01,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xC0,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x01,0x00,0x00,0x83,0xBC,0x24,0xD0,0x01,0x00,0x00,0x00,0x0F,0x86,0xB1,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x01,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xF0,0x01,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x66,0x06,0x00,0x00,0x4C,0x8B,0x84,0x24,0xE8,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0xA0,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x98,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x01,0x00,0x00,0x4C,0x8D,0x84,0x24,0xA0,0x01,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xA8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x01,0x00,0x00,0x8B,0x8C,0x24,0x00,0x02,0x00,0x00,0x3B,0x8C,0x24,0x90,0x01,0x00,0x00,0x0F,0x87,0xF4,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x88,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0xF8,0x01,0x00,0x00,0x44,0x8B,0x84,0x24,0x00,0x02,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x84,0x1C,0x7F,0x5D,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x50,0xD3,0x23,0x5F,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xD2,0x89,0x94,0x24,0x80,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x01,0x00,0x00,0xF6,0xC1,0x40,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x0A,0x8B,0x8C,0x24,0x80,0x01,0x00,0x00,0x89,0x8C,0x24,0x08,0x09,0x00,0x00,0x8B,0x8C,0x24,0x08,0x09,0x00,0x00,0x89,0x8C,0x24,0x78,0x01,0x00,0x00,0x83,0xBC,0x24,0x78,0x01,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0xC7,0x84,0x24,0x70,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x70,0x01,0x00,0x00,0x89,0x94,0x24,0x00,0x09,0x00,0x00,0x8B,0x94,0x24,0x00,0x09,0x00,0x00,0x89,0x94,0x24,0x68,0x01,0x00,0x00,0x83,0xBC,0x24,0x68,0x01,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0xC7,0x84,0x24,0x60,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x60,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0xF8,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0xF8,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x58,0x01,0x00,0x00,0x83,0xBC,0x24,0x58,0x01,0x00,0x00,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x50,0x01,0x00,0x00,0x44,0x8B,0x8C,0x24,0x50,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0xF0,0x08,0x00,0x00,0x44,0x8B,0x8C,0x24,0xF0,0x08,0x00,0x00,0x44,0x89,0x8C,0x24,0x48,0x01,0x00,0x00,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x44,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x40,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x3C,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x3C,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x3C,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x3C,0x01,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x3C,0x01,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x3C,0x01,0x00,0x00,0x8B,0x8C,0x24,0x3C,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x40,0x01,0x00,0x00,0x45,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x40,0x01,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x40,0x01,0x00,0x00,0x8B,0x8C,0x24,0x40,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x44,0x01,0x00,0x00,0x83,0xBC,0x24,0x48,0x01,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x44,0x01,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x44,0x01,0x00,0x00,0x8B,0x8C,0x24,0x44,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x48,0x10,0x48,0x8D,0x8C,0x24,0x28,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x08,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC0,0x10,0x48,0x89,0x84,0x24,0x00,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x08,0x01,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x10,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x8D,0x54,0x24,0x48,0xE8,0x94,0x81,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x00,0x00,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0xF0,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xC2,0x9A,0x5D,0xFF,0x4C,0x8D,0x84,0x24,0x90,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC4,0xC1,0x7A,0x7F,0x00,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x90,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x2B,0x4C,0x8D,0x40,0x10,0x4C,0x89,0x84,0x24,0x88,0x00,0x00,0x00,0x4C,0x8B,0x84,0x24,0x88,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0x90,0x00,0x00,0x00,0x4C,0x89,0x01,0x44,0x8B,0x40,0x08,0x44,0x89,0x84,0x24,0x98,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x00,0x00,0x00,0x83,0xBC,0x24,0xA8,0x00,0x00,0x00,0x00,0x0F,0x86,0xC1,0x02,0x00,0x00,0x4C,0x8B,0x84,0x24,0xA0,0x00,0x00,0x00,0x45,0x0F,0xB7,0x00,0x48,0xB9,0xC8,0xAE,0x83,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x8B,0x49,0x18,0x41,0x8B,0xD0,0x8B,0xC1,0x48,0x03,0xD0,0x8B,0x84,0x24,0xC8,0x00,0x00,0x00,0x48,0x3B,0xD0,0x0F,0x87,0x81,0x02,0x00,0x00,0x48,0x8B,0x94,0x24,0xC0,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x78,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x4D,0x63,0xC0,0x4C,0x03,0xC2,0x4C,0x89,0x44,0x24,0x70,0x4C,0x8B,0x44,0x24,0x70,0x48,0x8D,0x54,0x24,0x78,0x4C,0x89,0x02,0x89,0x8C,0x24,0x80,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x44,0x24,0x78,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x60,0x44,0x8B,0x84,0x24,0xD8,0x00,0x00,0x00,0x44,0x3B,0x44,0x24,0x68,0x0F,0x87,0x22,0x02,0x00,0x00,0x44,0x8B,0x84,0x24,0xD8,0x00,0x00,0x00,0x4D,0x63,0xC0,0x48,0x8B,0x4C,0x24,0x60,0x48,0x8B,0x94,0x24,0xD0,0x00,0x00,0x00,0xE8,0xA1,0xA9,0xC1,0xFF,0x48,0xB9,0x10,0xEA,0x0F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x75,0xCF,0x23,0x5F,0x48,0x8B,0xD8,0x0F,0xB6,0x8C,0x24,0x60,0x0A,0x00,0x00,0x33,0xC0,0x89,0x44,0x24,0x58,0x48,0x8D,0x44,0x24,0x58,0xF6,0xC1,0x80,0x75,0x04,0x33,0xC9,0xEB,0x05,0xB9,0x01,0x00,0x00,0x00,0x89,0x08,0x8B,0x4C,0x24,0x58,0x89,0x8C,0x24,0xD8,0x08,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x08,0x00,0x00,0xE8,0x58,0xBC,0xDC,0xFF,0x8B,0xE8,0xE8,0x99,0xA0,0x70,0xFF,0x89,0x84,0x24,0xD0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x08,0x00,0x00,0xE8,0x3E,0xBC,0xDC,0xFF,0x44,0x8B,0xF0,0xE8,0x7E,0xA0,0x70,0xFF,0x89,0x84,0x24,0xC8,0x08,0x00,0x00,0x8B,0x8C,0x24,0xC8,0x08,0x00,0x00,0xE8,0x23,0xBC,0xDC,0xFF,0x44,0x8B,0xF8,0xE8,0x63,0xA0,0x70,0xFF,0x89,0x84,0x24,0xC0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x08,0x00,0x00,0xE8,0x08,0xBC,0xDC,0xFF,0x44,0x8B,0xC8,0x41,0x8B,0xD6,0x45,0x8B,0xC7,0x8B,0xCD,0xE8,0x28,0xAA,0xDF,0xFF,0x88,0x43,0x10,0x48,0x8D,0x8C,0x24,0xB0,0x08,0x00,0x00,0x48,0x8B,0xD3,0xE8,0xDD,0x6D,0xFF,0xFF,0x48,0x8D,0x8C,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x4C,0x8D,0x44,0x24,0x38,0xBA,0x07,0x00,0x00,0x00,0xE8,0x8F,0x7D,0xFF,0xFF,0x48,0x8D,0x8C,0x24,0x50,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x0A,0x00,0x00,0x41,0xB8,0x03,0x00,0x00,0x00,0xE8,0xD4,0x7D,0xFF,0xFF,0x48,0x8D,0x8C,0x24,0x30,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x0A,0x00,0x00,0xE8,0xCF,0x32,0xDF,0xFF,0x33,0xC9,0x48,0x89,0x8C,0x24,0xA8,0x08,0x00,0x00,0x48,0x8D,0x8C,0x24,0x40,0x0A,0x00,0x00,0x48,0x8D,0x94,0x24,0x30,0x0A,0x00,0x00,0xE8,0xD0,0xBC,0xFF,0xFF,0x8B,0xD8,0x48,0x8D,0x8C,0x24,0xA8,0x08,0x00,0x00,0xBA,0xAE,0x00,0x00,0x00,0xE8,0x2C,0x38,0xB0,0x5D,0x4C,0x8B,0x84,0x24,0xA8,0x08,0x00,0x00,0x4C,0x89,0x44,0x24,0x20,0x49,0xB8,0x50,0x6F,0x83,0xF7,0xE1,0x01,0x00,0x00,0x4D,0x8B,0x00,0x49,0xB9,0x50,0x6F,0x83,0xF7,0xE1,0x01,0x00,0x00,0x4D,0x8B,0x09,0x8B,0xCB,0x33,0xD2,0xE8,0x8C,0x97,0x70,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x0A,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x48,0x8B,0xD6,0xE8,0xA0,0xBD,0xFF,0xFF,0xFF,0xC7,0x81,0xFF,0x00,0x01,0x00,0x00,0x0F,0x8C,0x4D,0xE2,0xFF,0xFF,0x48,0x81,0xC4,0x68,0x0A,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0xBD,0x86,0x71,0xFF,0xCC,0xE8,0xBF,0x86,0x71,0xFF,0xCC,0xE8,0xB1,0x86,0x71,0xFF,0xCC,0xE8,0xB3,0x86,0x71,0xFF,0xCC,0xE8,0xA5,0x86,0x71,0xFF,0xCC,0xE8,0xA7,0x86,0x71,0xFF,0xCC,0xE8,0x99,0x86,0x71,0xFF,0xCC,0xE8,0x9B,0x86,0x71,0xFF,0xCC,0xE8,0x8D,0x86,0x71,0xFF,0xCC,0xE8,0x8F,0x86,0x71,0xFF,0xCC,0xE8,0x81,0x86,0x71,0xFF,0xCC,0xE8,0x83,0x86,0x71,0xFF,0xCC,0xE8,0x75,0x86,0x71,0xFF,0xCC,0xE8,0x77,0x86,0x71,0xFF,0xCC,0xE8,0x99,0x76,0x36,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:461
; function: bit zero()
; location: [7FFDDBA27A40h, 7FFDDBA27A47h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> zeroBytes => new byte[8]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit identity(bit a)
; location: [7FFDDBA27A60h, 7FFDDBA27A67h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> identityBytes => new byte[8]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit one()
; location: [7FFDDBA27A80h, 7FFDDBA27A8Ah]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
000ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> oneBytes => new byte[11]{0x0F,0x1F,0x44,0x00,0x00,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit false(bit a, bit b)
; location: [7FFDDBA27AA0h, 7FFDDBA27AAFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> falseBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit false(bit a, bit b, bit c)
; location: [7FFDDBA27AC0h, 7FFDDBA27AD4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> falseBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit false(bit a)
; location: [7FFDDBA27AF0h, 7FFDDBA27AFBh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
000bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> falseBytes => new byte[12]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit true(bit a)
; location: [7FFDDBA27B10h, 7FFDDBA27B1Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> trueBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit true(bit a, bit b)
; location: [7FFDDBA27B30h, 7FFDDBA27B42h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0012h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> trueBytes => new byte[19]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit true(bit a, bit b, bit c)
; location: [7FFDDBA27B60h, 7FFDDBA27B77h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0017h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> trueBytes => new byte[24]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit not(bit a)
; location: [7FFDDBA27B90h, 7FFDDBA27B9Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit and(bit a, bit b)
; location: [7FFDDBA27BB0h, 7FFDDBA27BB9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> andBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit nand(bit a, bit b)
; location: [7FFDDBA27BD0h, 7FFDDBA27BDEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> nandBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit or(bit a, bit b)
; location: [7FFDDBA27BF0h, 7FFDDBA27BF9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> orBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit nor(bit a, bit b)
; location: [7FFDDBA27C10h, 7FFDDBA27C1Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> norBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit xor(bit a, bit b)
; location: [7FFDDBA27C30h, 7FFDDBA27C39h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0009h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xorBytes => new byte[10]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit xnor(bit a, bit b)
; location: [7FFDDBA27C50h, 7FFDDBA27C5Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xnorBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit imply(bit a, bit b)
; location: [7FFDDBA27C70h, 7FFDDBA27C7Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or eax,ecx                    ; OR(Or_r32_rm32) [EAX,ECX]                            encoding(2 bytes) = 0b c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> implyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit notimply(bit a, bit b)
; location: [7FFDDBA27C90h, 7FFDDBA27C9Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> notimplyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit left(bit a, bit b)
; location: [7FFDDBA27CB0h, 7FFDDBA27CBBh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> leftBytes => new byte[12]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit right(bit a, bit b)
; location: [7FFDDBA27CD0h, 7FFDDBA27CDBh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rightBytes => new byte[12]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit lnot(bit a, bit b)
; location: [7FFDDBA27CF0h, 7FFDDBA27D00h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> lnotBytes => new byte[17]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit rnot(bit a, bit b)
; location: [7FFDDBA27D20h, 7FFDDBA27D30h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> rnotBytes => new byte[17]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit cimply(bit a, bit b)
; location: [7FFDDBA27D50h, 7FFDDBA27D5Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cimplyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit cnotimply(bit a, bit b)
; location: [7FFDDBA27D70h, 7FFDDBA27D7Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> cnotimplyBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit same(bit a, bit b)
; location: [7FFDDBA27D90h, 7FFDDBA27DB4h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(3 bytes) = 89 04 24
000ah lea rax,[rsp]                 ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 04 24
000eh cmp ecx,edx                   ; CMP(Cmp_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 3b ca
0010h je short 0016h                ; JE(Je_rel8_64) [16h:jmp64]                           encoding(2 bytes) = 74 04
0012h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0014h jmp short 001bh               ; JMP(Jmp_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = eb 05
0016h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
001bh mov [rax],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(2 bytes) = 89 10
001dh mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0020h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> sameBytes => new byte[37]{0x50,0x0F,0x1F,0x40,0x00,0x33,0xC0,0x89,0x04,0x24,0x48,0x8D,0x04,0x24,0x3B,0xCA,0x74,0x04,0x33,0xD2,0xEB,0x05,0xBA,0x01,0x00,0x00,0x00,0x89,0x10,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit xor1(bit a)
; location: [7FFDDBA27DD0h, 7FFDDBA27DDFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,1                     ; XOR(Xor_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f1 01
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> xor1Bytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF1,0x01,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit select(bit a, bit b, bit c)
; location: [7FFDDBA27DF0h, 7FFDDBA27E03h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000eh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> selectBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC1,0xF7,0xD0,0x41,0x23,0xC0,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f00(bit a, bit b, bit c)
; location: [7FFDDBA27E20h, 7FFDDBA27E34h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f00Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f01(bit a, bit b, bit c)
; location: [7FFDDBA27E50h, 7FFDDBA27E61h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f01Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f02(bit a, bit b, bit c)
; location: [7FFDDBA27E80h, 7FFDDBA27E91h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f02Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f03(bit a, bit b, bit c)
; location: [7FFDDBA27EB0h, 7FFDDBA27EC3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f03Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f04(bit a, bit b, bit c)
; location: [7FFDDBA27EE0h, 7FFDDBA27EF1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f04Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f05(bit a, bit b, bit c)
; location: [7FFDDBA27F10h, 7FFDDBA27F23h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000ch mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f05Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f06(bit a, bit b, bit c)
; location: [7FFDDBA27F40h, 7FFDDBA27F51h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f06Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f07(bit a, bit b, bit c)
; location: [7FFDDBA27F70h, 7FFDDBA27F81h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f07Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f08(bit a, bit b, bit c)
; location: [7FFDDBA27FA0h, 7FFDDBA27FB1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f08Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f09(bit a, bit b, bit c)
; location: [7FFDDBA27FD0h, 7FFDDBA27FE1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f09Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0a(bit a, bit b, bit c)
; location: [7FFDDBA28000h, 7FFDDBA28013h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0aBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0b(bit a, bit b, bit c)
; location: [7FFDDBA28030h, 7FFDDBA28044h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
000fh or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0bBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF2,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0c(bit a, bit b, bit c)
; location: [7FFDDBA28060h, 7FFDDBA28073h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0cBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0d(bit a, bit b, bit c)
; location: [7FFDDBA28090h, 7FFDDBA280A5h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0010h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0013h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0dBytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x83,0xF0,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0e(bit a, bit b, bit c)
; location: [7FFDDBA280C0h, 7FFDDBA280D1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0eBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0f(bit a, bit b, bit c)
; location: [7FFDDBA280F0h, 7FFDDBA28105h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000eh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0fBytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f10(bit a, bit b, bit c)
; location: [7FFDDBA28120h, 7FFDDBA28131h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f10Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f11(bit a, bit b, bit c)
; location: [7FFDDBA28150h, 7FFDDBA28163h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f11Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f12(bit a, bit b, bit c)
; location: [7FFDDBA28180h, 7FFDDBA28191h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f12Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f13(bit a, bit b, bit c)
; location: [7FFDDBA281B0h, 7FFDDBA281C1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f13Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f14(bit a, bit b, bit c)
; location: [7FFDDBA281E0h, 7FFDDBA281F1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f14Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f15(bit a, bit b, bit c)
; location: [7FFDDBA28210h, 7FFDDBA28221h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f15Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f16(bit a, bit b, bit c)
; location: [7FFDDBA28240h, 7FFDDBA2825Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0012h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0014h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f16Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x0B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f17(bit a, bit b, bit c)
; location: [7FFDDBA28270h, 7FFDDBA2828Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000ah and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000dh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0013h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0015h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0018h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f17Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x0B,0xC0,0x41,0x23,0xD0,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f18(bit a, bit b, bit c)
; location: [7FFDDBA282A0h, 7FFDDBA282AEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f18Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f19(bit a, bit b, bit c)
; location: [7FFDDBA282C0h, 7FFDDBA282D1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
000ah and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000fh xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f19Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x33,0xC0,0x41,0x23,0xD0,0x23,0xD1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1a(bit a, bit b, bit c)
; location: [7FFDDBA282F0h, 7FFDDBA28303h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1aBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x41,0x33,0xC8,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1b(bit a, bit b, bit c)
; location: [7FFDDBA28320h, 7FFDDBA28340h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0011h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0014h mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
0017h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0019h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001bh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0020h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1bBytes => new byte[33]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1c(bit a, bit b, bit c)
; location: [7FFDDBA28360h, 7FFDDBA28374h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,ecx                   ; AND(And_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 23 c1
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1cBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC1,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1d(bit a, bit b, bit c)
; location: [7FFDDBA28390h, 7FFDDBA283AFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0014h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0016h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0018h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001ah or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1dBytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1e(bit a, bit b, bit c)
; location: [7FFDDBA283C0h, 7FFDDBA283CCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1eBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x8B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1f(bit a, bit b, bit c)
; location: [7FFDDBA283E0h, 7FFDDBA283F1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1fBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f20(bit a, bit b, bit c)
; location: [7FFDDBA28410h, 7FFDDBA28421h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f20Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f21(bit a, bit b, bit c)
; location: [7FFDDBA28440h, 7FFDDBA28451h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f21Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f22(bit a, bit b, bit c)
; location: [7FFDDBA28470h, 7FFDDBA28483h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f22Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f23(bit a, bit b, bit c)
; location: [7FFDDBA284A0h, 7FFDDBA284BBh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,1                     ; XOR(Xor_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f1 01
000fh mov edx,ecx                   ; MOV(Mov_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 8b d1
0011h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0013h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0016h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0019h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f23Bytes => new byte[28]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF1,0x01,0x8B,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f24(bit a, bit b, bit c)
; location: [7FFDDBA284D0h, 7FFDDBA284DEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,edx                   ; XOR(Xor_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 33 ca
0007h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f24Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xCA,0x41,0x33,0xD0,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f25(bit a, bit b, bit c)
; location: [7FFDDBA284F0h, 7FFDDBA2850Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0012h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0015h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0017h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
001ah xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
001ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f25Bytes => new byte[31]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x83,0xF0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f26(bit a, bit b, bit c)
; location: [7FFDDBA28520h, 7FFDDBA28533h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,edx                   ; AND(And_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 23 ca
0007h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f26Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xCA,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f27(bit a, bit b, bit c)
; location: [7FFDDBA28550h, 7FFDDBA28574h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0013h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0015h mov ecx,edx                   ; MOV(Mov_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 8b ca
0017h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
001ah and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
001dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001fh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0021h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f27Bytes => new byte[37]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x8B,0xCA,0x83,0xE1,0x01,0x41,0x23,0xC0,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f28(bit a, bit b, bit c)
; location: [7FFDDBA28590h, 7FFDDBA2859Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f28Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x8B,0xC0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f29(bit a, bit b, bit c)
; location: [7FFDDBA285B0h, 7FFDDBA285CFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
0009h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000bh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000dh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
0016h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0018h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001ah or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f29Bytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x33,0xC1,0x0B,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2a(bit a, bit b, bit c)
; location: [7FFDDBA285E0h, 7FFDDBA285F1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2aBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2b(bit a, bit b, bit c)
; location: [7FFDDBA28610h, 7FFDDBA28634h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0010h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0012h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0015h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0018h mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
001bh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
001dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001fh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0021h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0024h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2bBytes => new byte[37]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x23,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2c(bit a, bit b, bit c)
; location: [7FFDDBA28650h, 7FFDDBA2865Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or r8d,edx                    ; OR(Or_r32_rm32) [R8D,EDX]                            encoding(3 bytes) = 44 0b c2
0008h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000ah mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000dh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2cBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x0B,0xC2,0x33,0xD1,0x41,0x8B,0xC0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2d(bit a, bit b, bit c)
; location: [7FFDDBA28670h, 7FFDDBA28681h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
000fh xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2dBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2e(bit a, bit b, bit c)
; location: [7FFDDBA286A0h, 7FFDDBA286AFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or r8d,edx                    ; OR(Or_r32_rm32) [R8D,EDX]                            encoding(3 bytes) = 44 0b c2
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000dh xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2eBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x0B,0xC2,0x0B,0xD1,0x41,0x8B,0xC0,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f2f(bit a, bit b, bit c)
; location: [7FFDDBA286C0h, 7FFDDBA286D6h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0011h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0014h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0016h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f2fBytes => new byte[23]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x23,0xD0,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f30(bit a, bit b, bit c)
; location: [7FFDDBA286F0h, 7FFDDBA28703h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f30Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f31(bit a, bit b, bit c)
; location: [7FFDDBA28720h, 7FFDDBA2873Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0010h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0013h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0015h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0018h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
001ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f31Bytes => new byte[29]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x83,0xF0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f32(bit a, bit b, bit c)
; location: [7FFDDBA28750h, 7FFDDBA28761h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f32Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f33(bit a, bit b, bit c)
; location: [7FFDDBA28780h, 7FFDDBA28795h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000eh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f33Bytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x44,0x89,0x44,0x24,0x18,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f34(bit a, bit b, bit c)
; location: [7FFDDBA287B0h, 7FFDDBA287C4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,edx                   ; AND(And_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 23 c2
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f34Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC2,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f35(bit a, bit b, bit c)
; location: [7FFDDBA287E0h, 7FFDDBA287FFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
000fh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0011h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0014h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0016h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0018h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001ah or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f35Bytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f36(bit a, bit b, bit c)
; location: [7FFDDBA28810h, 7FFDDBA2881Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f36Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x8B,0xC2,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f37(bit a, bit b, bit c)
; location: [7FFDDBA28830h, 7FFDDBA28841h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f37Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f38(bit a, bit b, bit c)
; location: [7FFDDBA28860h, 7FFDDBA2886Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or r8d,ecx                    ; OR(Or_r32_rm32) [R8D,ECX]                            encoding(3 bytes) = 44 0b c1
0008h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000ah mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000dh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f38Bytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x0B,0xC1,0x33,0xD1,0x41,0x8B,0xC0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f39(bit a, bit b, bit c)
; location: [7FFDDBA28880h, 7FFDDBA28895h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor r8d,1                     ; XOR(Xor_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f0 01
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h or eax,ecx                    ; OR(Or_r32_rm32) [EAX,ECX]                            encoding(2 bytes) = 0b c1
0013h xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f39Bytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x83,0xF0,0x01,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3a(bit a, bit b, bit c)
; location: [7FFDDBA288B0h, 7FFDDBA288CAh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh mov edx,ecx                   ; MOV(Mov_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 8b d1
0010h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0012h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0015h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0017h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3aBytes => new byte[27]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0x8B,0xD1,0xF7,0xD2,0x41,0x23,0xD0,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3b(bit a, bit b, bit c)
; location: [7FFDDBA288E0h, 7FFDDBA288F9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000fh xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0012h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0014h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0017h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3bBytes => new byte[26]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0x83,0xF2,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3c(bit a, bit b, bit c)
; location: [7FFDDBA28910h, 7FFDDBA2891Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3cBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC2,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3d(bit a, bit b, bit c)
; location: [7FFDDBA28930h, 7FFDDBA28943h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3dBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3e(bit a, bit b, bit c)
; location: [7FFDDBA28960h, 7FFDDBA28973h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000fh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0011h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3eBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0x33,0xD1,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f3f(bit a, bit b, bit c)
; location: [7FFDDBA28990h, 7FFDDBA289A3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f3fBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f40(bit a, bit b, bit c)
; location: [7FFDDBA289C0h, 7FFDDBA289D1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f40Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f41(bit a, bit b, bit c)
; location: [7FFDDBA289F0h, 7FFDDBA28A01h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f41Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f42(bit a, bit b, bit c)
; location: [7FFDDBA28A20h, 7FFDDBA28A2Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000bh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000dh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f42Bytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x41,0x33,0xD0,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f43(bit a, bit b, bit c)
; location: [7FFDDBA28A40h, 7FFDDBA28A5Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,ecx                   ; AND(And_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 23 c1
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0013h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0015h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0018h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
001ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
001ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f43Bytes => new byte[29]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC1,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF2,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f44(bit a, bit b, bit c)
; location: [7FFDDBA28A70h, 7FFDDBA28A83h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f44Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f45(bit a, bit b, bit c)
; location: [7FFDDBA28AA0h, 7FFDDBA28AB9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor ecx,1                     ; XOR(Xor_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f1 01
0010h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0012h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0015h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0017h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f45Bytes => new byte[26]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF1,0x01,0xF7,0xD1,0x83,0xE1,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f46(bit a, bit b, bit c)
; location: [7FFDDBA28AD0h, 7FFDDBA28AE4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f46Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f47(bit a, bit b, bit c)
; location: [7FFDDBA28B00h, 7FFDDBA28B1Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
000fh and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f47Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f48(bit a, bit b, bit c)
; location: [7FFDDBA28B30h, 7FFDDBA28B3Ch]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f48Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f49(bit a, bit b, bit c)
; location: [7FFDDBA28B50h, 7FFDDBA28B6Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
000ah or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000dh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
000fh and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f49Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x41,0x33,0xC0,0x41,0x0B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4a(bit a, bit b, bit c)
; location: [7FFDDBA28B80h, 7FFDDBA28B8Fh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000bh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000dh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4aBytes => new byte[16]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4b(bit a, bit b, bit c)
; location: [7FFDDBA28BA0h, 7FFDDBA28BB1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000fh xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4bBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC0,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4c(bit a, bit b, bit c)
; location: [7FFDDBA28BD0h, 7FFDDBA28BE1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4cBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4d(bit a, bit b, bit c)
; location: [7FFDDBA28C00h, 7FFDDBA28C22h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0012h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0014h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0017h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0019h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
001bh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
001dh or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001fh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0022h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4dBytes => new byte[35]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0x41,0x23,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xC2,0xF7,0xD2,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4e(bit a, bit b, bit c)
; location: [7FFDDBA28C40h, 7FFDDBA28C5Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
000fh mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
0012h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0014h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0016h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0018h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4eBytes => new byte[28]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0x41,0x8B,0xC8,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f4f(bit a, bit b, bit c)
; location: [7FFDDBA28C70h, 7FFDDBA28C88h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0014h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0016h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0018h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f4fBytes => new byte[25]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x23,0xD1,0x0B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f50(bit a, bit b, bit c)
; location: [7FFDDBA28CA0h, 7FFDDBA28CB3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f50Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f51(bit a, bit b, bit c)
; location: [7FFDDBA28CD0h, 7FFDDBA28CE9h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0010h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0012h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0015h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0017h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0019h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f51Bytes => new byte[26]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF2,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f52(bit a, bit b, bit c)
; location: [7FFDDBA28D00h, 7FFDDBA28D14h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0012h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f52Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f53(bit a, bit b, bit c)
; location: [7FFDDBA28D30h, 7FFDDBA28D4Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000fh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0012h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0014h not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0016h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0018h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f53Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x23,0xC1,0xF7,0xD1,0x23,0xD1,0x0B,0xC2,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f54(bit a, bit b, bit c)
; location: [7FFDDBA28D60h, 7FFDDBA28D71h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f54Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f55(bit a, bit b, bit c)
; location: [7FFDDBA28D90h, 7FFDDBA28DA5h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f55Bytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f56(bit a, bit b, bit c)
; location: [7FFDDBA28DC0h, 7FFDDBA28DCCh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ah xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f56Bytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x41,0x8B,0xC0,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f57(bit a, bit b, bit c)
; location: [7FFDDBA28DE0h, 7FFDDBA28DF1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f57Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x41,0x23,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f58(bit a, bit b, bit c)
; location: [7FFDDBA28E10h, 7FFDDBA28E1Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f58Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f59(bit a, bit b, bit c)
; location: [7FFDDBA28E30h, 7FFDDBA28E44h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,1                     ; XOR(Xor_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 f2 01
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh or eax,ecx                    ; OR(Or_r32_rm32) [EAX,ECX]                            encoding(2 bytes) = 0b c1
0011h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f59Bytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x83,0xF2,0x01,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x0B,0xC1,0x41,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5a(bit a, bit b, bit c)
; location: [7FFDDBA28E60h, 7FFDDBA28E6Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000ch xor eax,ecx                   ; XOR(Xor_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 33 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5aBytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0x33,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5b(bit a, bit b, bit c)
; location: [7FFDDBA28E80h, 7FFDDBA28E94h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5bBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5c(bit a, bit b, bit c)
; location: [7FFDDBA28EB0h, 7FFDDBA28EC4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5cBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5d(bit a, bit b, bit c)
; location: [7FFDDBA28EE0h, 7FFDDBA28EF4h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5dBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5e(bit a, bit b, bit c)
; location: [7FFDDBA28F10h, 7FFDDBA28F24h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5eBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f5f(bit a, bit b, bit c)
; location: [7FFDDBA28F40h, 7FFDDBA28F54h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f5fBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x33,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit faa(bit a, bit b, bit c)
; location: [7FFDDBA28F70h, 7FFDDBA28F80h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0010h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> faaBytes => new byte[17]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x41,0x8B,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit fff(bit a, bit b, bit c)
; location: [7FFDDBA28FA0h, 7FFDDBA28FB7h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
000dh mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
0012h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0017h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> fffBytes => new byte[24]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0xB8,0x01,0x00,0x00,0x00,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:498
; function: bit mux(bit c0, bit i0, bit i1)
; location: [7FFDDBA28FD0h, 7FFDDBA28FE7h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
000fh je short 0015h                ; JE(Je_rel8_64) [15h:jmp64]                           encoding(2 bytes) = 74 04
0011h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0015h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0017h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[24]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x83,0xF8,0x01,0x74,0x04,0x41,0x8B,0xC0,0xC3,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(bit c0, bit c1, bit i0, bit i1, bit i2, bit i3)
; location: [7FFDDBA29000h, 7FFDDBA29065h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
000eh je short 001fh                ; JE(Je_rel8_64) [1Fh:jmp64]                           encoding(2 bytes) = 74 0f
0010h mov r10d,edx                  ; MOV(Mov_r32_rm32) [R10D,EDX]                         encoding(3 bytes) = 44 8b d2
0013h not r10d                      ; NOT(Not_rm32) [R10D]                                 encoding(3 bytes) = 41 f7 d2
0016h and r10d,1                    ; AND(And_rm32_imm8) [R10D,1h:imm32]                   encoding(4 bytes) = 41 83 e2 01
001ah and eax,r10d                  ; AND(And_r32_rm32) [EAX,R10D]                         encoding(3 bytes) = 41 23 c2
001dh jmp short 0021h               ; JMP(Jmp_rel8_64) [21h:jmp64]                         encoding(2 bytes) = eb 02
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0024h jne short 002ah               ; JNE(Jne_rel8_64) [2Ah:jmp64]                         encoding(2 bytes) = 75 04
0026h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
002ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
002ch test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
002eh je short 003bh                ; JE(Je_rel8_64) [3Bh:jmp64]                           encoding(2 bytes) = 74 0b
0030h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0032h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0034h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0037h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0039h jmp short 003dh               ; JMP(Jmp_rel8_64) [3Dh:jmp64]                         encoding(2 bytes) = eb 02
003bh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
003dh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0040h jne short 0046h               ; JNE(Jne_rel8_64) [46h:jmp64]                         encoding(2 bytes) = 75 04
0042h mov eax,r9d                   ; MOV(Mov_r32_rm32) [EAX,R9D]                          encoding(3 bytes) = 41 8b c1
0045h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0046h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0048h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
004ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
004dh test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
004fh je short 0055h                ; JE(Je_rel8_64) [55h:jmp64]                           encoding(2 bytes) = 74 04
0051h and edx,eax                   ; AND(And_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 23 d0
0053h jmp short 0057h               ; JMP(Jmp_rel8_64) [57h:jmp64]                         encoding(2 bytes) = eb 02
0055h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0057h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
005ah jne short 0061h               ; JNE(Jne_rel8_64) [61h:jmp64]                         encoding(2 bytes) = 75 05
005ch mov eax,[rsp+28h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 28
0060h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0061h mov eax,[rsp+30h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 30
0065h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[102]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x85,0xC0,0x74,0x0F,0x44,0x8B,0xD2,0x41,0xF7,0xD2,0x41,0x83,0xE2,0x01,0x41,0x23,0xC2,0xEB,0x02,0x33,0xC0,0x83,0xF8,0x01,0x75,0x04,0x41,0x8B,0xC0,0xC3,0x8B,0xC1,0x85,0xC0,0x74,0x0B,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xEB,0x02,0x8B,0xC1,0x83,0xF8,0x01,0x75,0x04,0x41,0x8B,0xC1,0xC3,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x85,0xC0,0x74,0x04,0x23,0xD0,0xEB,0x02,0x33,0xD2,0x83,0xFA,0x01,0x75,0x05,0x8B,0x44,0x24,0x28,0xC3,0x8B,0x44,0x24,0x30,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(BitVector4 control, BitVector8 input)
; location: [7FFDDBA29080h, 7FFDDBA290ABh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
000bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000dh mov [rsp],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(3 bytes) = 89 0c 24
0010h lea rcx,[rsp]                 ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 0c 24
0014h bt edx,eax                    ; BT(Bt_rm32_r32) [EDX,EAX]                            encoding(3 bytes) = 0f a3 c2
0017h jb short 001dh                ; JB(Jb_rel8_64) [1Dh:jmp64]                           encoding(2 bytes) = 72 04
0019h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001bh jmp short 0022h               ; JMP(Jmp_rel8_64) [22h:jmp64]                         encoding(2 bytes) = eb 05
001dh mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0022h mov [rcx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(2 bytes) = 89 01
0024h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0027h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[44]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0xC1,0x0F,0xB6,0xD2,0x33,0xC9,0x89,0x0C,0x24,0x48,0x8D,0x0C,0x24,0x0F,0xA3,0xC2,0x72,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x01,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit mux(BitVector4 control, BitVector16 input)
; location: [7FFDDBA290C0h, 7FFDDBA290EBh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h movzx edx,dx                  ; MOVZX(Movzx_r32_rm16) [EDX,DX]                       encoding(3 bytes) = 0f b7 d2
000bh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000dh mov [rsp],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(3 bytes) = 89 0c 24
0010h lea rcx,[rsp]                 ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 0c 24
0014h bt edx,eax                    ; BT(Bt_rm32_r32) [EDX,EAX]                            encoding(3 bytes) = 0f a3 c2
0017h jb short 001dh                ; JB(Jb_rel8_64) [1Dh:jmp64]                           encoding(2 bytes) = 72 04
0019h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001bh jmp short 0022h               ; JMP(Jmp_rel8_64) [22h:jmp64]                         encoding(2 bytes) = eb 05
001dh mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0022h mov [rcx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(2 bytes) = 89 01
0024h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
0027h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> muxBytes => new byte[44]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0xC1,0x0F,0xB7,0xD2,0x33,0xC9,0x89,0x0C,0x24,0x48,0x8D,0x0C,0x24,0x0F,0xA3,0xC2,0x72,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x01,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:539
; function: Mux8Control Define(bit c0, bit c1, bit c2)
; location: [7FFDDBA291C0h, 7FFDDBA29249h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov byte ptr [rsp+20h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 20 00
000ah mov byte ptr [rsp+18h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 18 00
000fh mov byte ptr [rsp+10h],0      ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 10 00
0014h mov byte ptr [rsp+8],0        ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),0h:imm8]     encoding(5 bytes) = c6 44 24 08 00
0019h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001bh cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
001eh jne short 0025h               ; JNE(Jne_rel8_64) [25h:jmp64]                         encoding(2 bytes) = 75 05
0020h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0025h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
0028h jne short 002dh               ; JNE(Jne_rel8_64) [2Dh:jmp64]                         encoding(2 bytes) = 75 03
002ah or eax,2                      ; OR(Or_rm32_imm8) [EAX,2h:imm32]                      encoding(3 bytes) = 83 c8 02
002dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0030h and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
0033h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0036h mov [rsp+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 10
003ah cmp r8d,1                     ; CMP(Cmp_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f8 01
003eh jne short 0062h               ; JNE(Jne_rel8_64) [62h:jmp64]                         encoding(2 bytes) = 75 22
0040h mov byte ptr [rsp+8],4        ; MOV(Mov_rm8_imm8) [mem(8u,RSP:br,SS:sr),4h:imm8]     encoding(5 bytes) = c6 44 24 08 04
0045h mov eax,[rsp+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 10
0049h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
004ch mov edx,[rsp+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 08
0050h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0053h or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
0055h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0058h and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
005bh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
005eh mov [rsp+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 10
0062h mov eax,[rsp+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 10
0066h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0069h and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
006ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
006fh mov [rsp+20h],al              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 20
0073h mov eax,[rsp+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 20
0077h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
007ah mov [rsp+4],al                ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 04
007eh mov eax,[rsp+4]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 04
0082h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0085h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0089h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[138]{0x48,0x83,0xEC,0x28,0x90,0xC6,0x44,0x24,0x20,0x00,0xC6,0x44,0x24,0x18,0x00,0xC6,0x44,0x24,0x10,0x00,0xC6,0x44,0x24,0x08,0x00,0x33,0xC0,0x83,0xF9,0x01,0x75,0x05,0xB8,0x01,0x00,0x00,0x00,0x83,0xFA,0x01,0x75,0x03,0x83,0xC8,0x02,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x10,0x41,0x83,0xF8,0x01,0x75,0x22,0xC6,0x44,0x24,0x08,0x04,0x8B,0x44,0x24,0x10,0x0F,0xB6,0xC0,0x8B,0x54,0x24,0x08,0x0F,0xB6,0xD2,0x0B,0xC2,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x10,0x8B,0x44,0x24,0x10,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x20,0x8B,0x44,0x24,0x20,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x04,0x8B,0x44,0x24,0x04,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: Mux8Control Define(BitVector4 selector)
; location: [7FFDDBA29260h, 7FFDDBA292A1h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
000ch movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
000fh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0012h sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
0014h inc edx                       ; INC(Inc_rm32) [EDX]                                  encoding(2 bytes) = ff c2
0016h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0019h shl edx,8                     ; SHL(Shl_rm32_imm8) [EDX,8h:imm8]                     encoding(3 bytes) = c1 e2 08
001ch or eax,edx                    ; OR(Or_r32_rm32) [EAX,EDX]                            encoding(2 bytes) = 0b c2
001eh movzx eax,ax                  ; MOVZX(Movzx_r32_rm16) [EAX,AX]                       encoding(3 bytes) = 0f b7 c0
0021h movzx edx,cl                  ; MOVZX(Movzx_r32_rm8) [EDX,CL]                        encoding(3 bytes) = 0f b6 d1
0024h bextr eax,edx,eax             ; BEXTR(VEX_Bextr_r32_rm32_r32) [EAX,EDX,EAX]          encoding(VEX, 5 bytes) = c4 e2 78 f7 c2
0029h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
002ch and eax,0Fh                   ; AND(And_rm32_imm8) [EAX,fh:imm32]                    encoding(3 bytes) = 83 e0 0f
002fh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0032h mov [rsp+4],al                ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),AL]            encoding(4 bytes) = 88 44 24 04
0036h mov eax,[rsp+4]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 04
003ah movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
003dh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0041h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> DefineBytes => new byte[66]{0x50,0x0F,0x1F,0x40,0x00,0x33,0xC0,0xBA,0x02,0x00,0x00,0x00,0x0F,0xB6,0xC0,0x0F,0xB6,0xD2,0x2B,0xD0,0xFF,0xC2,0x0F,0xB6,0xD2,0xC1,0xE2,0x08,0x0B,0xC2,0x0F,0xB7,0xC0,0x0F,0xB6,0xD1,0xC4,0xE2,0x78,0xF7,0xC2,0x0F,0xB6,0xC0,0x83,0xE0,0x0F,0x0F,0xB6,0xC0,0x88,0x44,0x24,0x04,0x8B,0x44,0x24,0x04,0x0F,0xB6,0xC0,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: byte get_Scalar()
; location: [7FFDDBA292C0h, 7FFDDBA292C8h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ScalarBytes => new byte[9]{0x0F,0x1F,0x44,0x00,0x00,0x0F,0xB6,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_C0()
; location: [7FFDDBA292E0h, 7FFDDBA2930Fh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h test al,1                     ; TEST(Test_AL_imm8) [AL,1h:imm8]                      encoding(2 bytes) = a8 01
000ah setne al                      ; SETNE(Setne_rm8) [AL]                                encoding(3 bytes) = 0f 95 c0
000dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0015h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0019h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
001bh jne short 0021h               ; JNE(Jne_rel8_64) [21h:jmp64]                         encoding(2 bytes) = 75 04
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 05
0021h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0026h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0028h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
002bh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_C0Bytes => new byte[48]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0x01,0xA8,0x01,0x0F,0x95,0xC0,0x0F,0xB6,0xC0,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0x85,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x02,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_C1()
; location: [7FFDDBA29330h, 7FFDDBA2935Fh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h test al,2                     ; TEST(Test_AL_imm8) [AL,2h:imm8]                      encoding(2 bytes) = a8 02
000ah setne al                      ; SETNE(Setne_rm8) [AL]                                encoding(3 bytes) = 0f 95 c0
000dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0015h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0019h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
001bh jne short 0021h               ; JNE(Jne_rel8_64) [21h:jmp64]                         encoding(2 bytes) = 75 04
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 05
0021h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0026h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0028h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
002bh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_C1Bytes => new byte[48]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0x01,0xA8,0x02,0x0F,0x95,0xC0,0x0F,0xB6,0xC0,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0x85,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x02,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit get_C2()
; location: [7FFDDBA29380h, 7FFDDBA293AFh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h movzx eax,byte ptr [rcx]      ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(3 bytes) = 0f b6 01
0008h test al,4                     ; TEST(Test_AL_imm8) [AL,4h:imm8]                      encoding(2 bytes) = a8 04
000ah setne al                      ; SETNE(Setne_rm8) [AL]                                encoding(3 bytes) = 0f 95 c0
000dh movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0010h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0012h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0015h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0019h test eax,eax                  ; TEST(Test_rm32_r32) [EAX,EAX]                        encoding(2 bytes) = 85 c0
001bh jne short 0021h               ; JNE(Jne_rel8_64) [21h:jmp64]                         encoding(2 bytes) = 75 04
001dh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
001fh jmp short 0026h               ; JMP(Jmp_rel8_64) [26h:jmp64]                         encoding(2 bytes) = eb 05
0021h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
0026h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0028h mov eax,[rsp]                 ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 04 24
002bh add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_C2Bytes => new byte[48]{0x50,0x0F,0x1F,0x40,0x00,0x0F,0xB6,0x01,0xA8,0x04,0x0F,0x95,0xC0,0x0F,0xB6,0xC0,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0x85,0xC0,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x89,0x02,0x8B,0x04,0x24,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:578
; function: string ChoiceLabel(uint index)
; location: [7FFDDBA293D0h, 7FFDDBA294C0h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0005h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0007h mov [rsp+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RAX]        encoding(5 bytes) = 48 89 44 24 20
000ch mov esi,ecx                   ; MOV(Mov_r32_rm32) [ESI,ECX]                          encoding(2 bytes) = 8b f1
000eh cmp esi,1Ah                   ; CMP(Cmp_rm32_imm8) [ESI,1ah:imm32]                   encoding(3 bytes) = 83 fe 1a
0011h jae short 005ch               ; JAE(Jae_rel8_64) [5Ch:jmp64]                         encoding(2 bytes) = 73 49
0013h mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
001dh mov edx,0BCh                  ; MOV(Mov_r32_imm32) [EDX,bch:imm32]                   encoding(5 bytes) = ba bc 00 00 00
0022h call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F23B4E0h:jmp64]                encoding(5 bytes) = e8 b9 b4 23 5f
0027h mov rcx,1E1F7826E88h          ; MOV(Mov_r64_imm64) [RCX,1e1f7826e88h:imm64]          encoding(10 bytes) = 48 b9 88 6e 82 f7 e1 01 00 00
0031h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0034h cmp esi,[rcx+8]               ; CMP(Cmp_r32_rm32) [ESI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 3b 71 08
0037h jae near ptr 00ebh            ; JAE(Jae_rel32_64) [EBh:jmp64]                        encoding(6 bytes) = 0f 83 ae 00 00 00
003dh movsxd rax,esi                ; MOVSXD(Movsxd_r64_rm32) [RAX,ESI]                    encoding(3 bytes) = 48 63 c6
0040h lea rcx,[rcx+rax*2+10h]       ; LEA(Lea_r64_m) [RCX,mem(Unknown,RCX:br,DS:sr)]       encoding(5 bytes) = 48 8d 4c 41 10
0045h movzx esi,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ESI,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 31
0048h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
004dh call 7FFDDB1244A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF6FB0D8h:jmp64]        encoding(5 bytes) = e8 86 b0 6f ff
0052h mov [rax+0Ch],si              ; MOV(Mov_rm16_r16) [mem(16u,RAX:br,DS:sr),SI]         encoding(4 bytes) = 66 89 70 0c
0056h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
005ah pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
005ch mov rcx,7FFDDB285770h         ; MOV(Mov_r64_imm64) [RCX,7ffddb285770h:imm64]         encoding(10 bytes) = 48 b9 70 57 28 db fd 7f 00 00
0066h mov edx,0BCh                  ; MOV(Mov_r32_imm32) [EDX,bch:imm32]                   encoding(5 bytes) = ba bc 00 00 00
006bh call 7FFE3AC648B0h            ; CALL(Call_rel32_64) [5F23B4E0h:jmp64]                encoding(5 bytes) = e8 70 b4 23 5f
0070h mov rax,1E1F7826E88h          ; MOV(Mov_r64_imm64) [RAX,1e1f7826e88h:imm64]          encoding(10 bytes) = 48 b8 88 6e 82 f7 e1 01 00 00
007ah mov r8,[rax]                  ; MOV(Mov_r64_rm64) [R8,mem(64u,RAX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 00
007dh mov edx,4EC4EC4Fh             ; MOV(Mov_r32_imm32) [EDX,4ec4ec4fh:imm32]             encoding(5 bytes) = ba 4f ec c4 4e
0082h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
0084h mul edx                       ; MUL(Mul_rm32) [EDX]                                  encoding(2 bytes) = f7 e2
0086h shr edx,3                     ; SHR(Shr_rm32_imm8) [EDX,3h:imm8]                     encoding(3 bytes) = c1 ea 03
0089h imul eax,edx,1Ah              ; IMUL(Imul_r32_rm32_imm8) [EAX,EDX,1ah:imm32]         encoding(3 bytes) = 6b c2 1a
008ch mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
008eh sub edx,eax                   ; SUB(Sub_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 2b d0
0090h cmp edx,[r8+8]                ; CMP(Cmp_r32_rm32) [EDX,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 41 3b 50 08
0094h jae short 00ebh               ; JAE(Jae_rel8_64) [EBh:jmp64]                         encoding(2 bytes) = 73 55
0096h movsxd rax,edx                ; MOVSXD(Movsxd_r64_rm32) [RAX,EDX]                    encoding(3 bytes) = 48 63 c2
0099h movzx ecx,word ptr [r8+rax*2+10h]; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,R8:br,DS:sr)]  encoding(6 bytes) = 41 0f b7 4c 40 10
009fh mov edx,4EC4EC4Fh             ; MOV(Mov_r32_imm32) [EDX,4ec4ec4fh:imm32]             encoding(5 bytes) = ba 4f ec c4 4e
00a4h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
00a6h mul edx                       ; MUL(Mul_rm32) [EDX]                                  encoding(2 bytes) = f7 e2
00a8h mov r8d,edx                   ; MOV(Mov_r32_rm32) [R8D,EDX]                          encoding(3 bytes) = 44 8b c2
00abh shr r8d,3                     ; SHR(Shr_rm32_imm8) [R8D,3h:imm8]                     encoding(4 bytes) = 41 c1 e8 03
00afh inc r8d                       ; INC(Inc_rm32) [R8D]                                  encoding(3 bytes) = 41 ff c0
00b2h mov edx,ecx                   ; MOV(Mov_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 8b d1
00b4h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00b6h call 7FFDDB124568h            ; CALL(Call_rel32_64) [FFFFFFFFFF6FB198h:jmp64]        encoding(5 bytes) = e8 dd b0 6f ff
00bbh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
00beh jne short 00c6h               ; JNE(Jne_rel8_64) [C6h:jmp64]                         encoding(2 bytes) = 75 06
00c0h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00c4h jmp short 00cdh               ; JMP(Jmp_rel8_64) [CDh:jmp64]                         encoding(2 bytes) = eb 07
00c6h lea rdx,[rax+0Ch]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 50 0c
00cah mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
00cdh lea rax,[rsp+20h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 20
00d2h mov [rax],rdx                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDX]        encoding(3 bytes) = 48 89 10
00d5h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
00d8h lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
00ddh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00dfh call 7FFDDB124578h            ; CALL(Call_rel32_64) [FFFFFFFFFF6FB1A8h:jmp64]        encoding(5 bytes) = e8 c4 b0 6f ff
00e4h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
00e5h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
00e9h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00eah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
00ebh call 7FFE3AD8EF00h            ; CALL(Call_rel32_64) [5F365B30h:jmp64]                encoding(5 bytes) = e8 40 5a 36 5f
00f0h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> ChoiceLabelBytes => new byte[241]{0x56,0x48,0x83,0xEC,0x30,0x33,0xC0,0x48,0x89,0x44,0x24,0x20,0x8B,0xF1,0x83,0xFE,0x1A,0x73,0x49,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xBC,0x00,0x00,0x00,0xE8,0xB9,0xB4,0x23,0x5F,0x48,0xB9,0x88,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x48,0x8B,0x09,0x3B,0x71,0x08,0x0F,0x83,0xAE,0x00,0x00,0x00,0x48,0x63,0xC6,0x48,0x8D,0x4C,0x41,0x10,0x0F,0xB7,0x31,0xB9,0x01,0x00,0x00,0x00,0xE8,0x86,0xB0,0x6F,0xFF,0x66,0x89,0x70,0x0C,0x48,0x83,0xC4,0x30,0x5E,0xC3,0x48,0xB9,0x70,0x57,0x28,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0xBC,0x00,0x00,0x00,0xE8,0x70,0xB4,0x23,0x5F,0x48,0xB8,0x88,0x6E,0x82,0xF7,0xE1,0x01,0x00,0x00,0x4C,0x8B,0x00,0xBA,0x4F,0xEC,0xC4,0x4E,0x8B,0xC6,0xF7,0xE2,0xC1,0xEA,0x03,0x6B,0xC2,0x1A,0x8B,0xD6,0x2B,0xD0,0x41,0x3B,0x50,0x08,0x73,0x55,0x48,0x63,0xC2,0x41,0x0F,0xB7,0x4C,0x40,0x10,0xBA,0x4F,0xEC,0xC4,0x4E,0x8B,0xC6,0xF7,0xE2,0x44,0x8B,0xC2,0x41,0xC1,0xE8,0x03,0x41,0xFF,0xC0,0x8B,0xD1,0x33,0xC9,0xE8,0xDD,0xB0,0x6F,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xD2,0x33,0xC9,0xEB,0x07,0x48,0x8D,0x50,0x0C,0x8B,0x48,0x08,0x48,0x8D,0x44,0x24,0x20,0x48,0x89,0x10,0x89,0x48,0x08,0x48,0x8D,0x54,0x24,0x20,0x33,0xC9,0xE8,0xC4,0xB0,0x6F,0xFF,0x90,0x48,0x83,0xC4,0x30,0x5E,0xC3,0xE8,0x40,0x5A,0x36,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:669
; function: LiteralLogicSeq <bitcombo>b__32_0(bit a)
; location: [7FFDDBA294E0h, 7FFDDBA29529h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0012h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0017h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23B100h:jmp64]                encoding(5 bytes) = e8 e4 b0 23 5f
001ch mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
001fh mov [rdi+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 10
0022h mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
002ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AFD0h:jmp64]                encoding(5 bytes) = e8 9f af 23 5f
0031h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0034h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0038h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
003bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F23A110h:jmp64]                encoding(5 bytes) = e8 d0 a0 23 5f
0040h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0043h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0047h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0048h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0049h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_0Bytes => new byte[74]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xE4,0xB0,0x23,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x10,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0xAF,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xD0,0xA0,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_1(bit a)
; location: [7FFDDBA29550h, 7FFDDBA2957Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23B090h:jmp64]                encoding(5 bytes) = e8 73 b0 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_1Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x73,0xB0,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_2(bit a, bit b)
; location: [7FFDDBA295A0h, 7FFDDBA295F1h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0009h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000ch mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0016h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
001bh call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23B040h:jmp64]                encoding(5 bytes) = e8 20 b0 23 5f
0020h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0023h mov [rbx+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 10
0026h mov [rbx+14h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 14
0029h mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0033h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AF10h:jmp64]                encoding(5 bytes) = e8 d8 ae 23 5f
0038h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003fh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0042h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F23A050h:jmp64]                encoding(5 bytes) = e8 09 a0 23 5f
0047h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
004ah add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
004eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
004fh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0050h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0051h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_2Bytes => new byte[82]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x20,0xB0,0x23,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x10,0x89,0x7B,0x14,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD8,0xAE,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x09,0xA0,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_3(bit a)
; location: [7FFDDBA29610h, 7FFDDBA2963Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AFD0h:jmp64]                encoding(5 bytes) = e8 b3 af 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_3Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB3,0xAF,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_4(bit a, bit b)
; location: [7FFDDBA29660h, 7FFDDBA29686h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AE50h:jmp64]                encoding(5 bytes) = e8 36 ae 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_4Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x36,0xAE,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_5(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA296A0h, 7FFDDBA296C9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AF40h:jmp64]                encoding(5 bytes) = e8 27 af 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_5Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x27,0xAF,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_6(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA296E0h, 7FFDDBA2973Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AF00h:jmp64]                encoding(5 bytes) = e8 df ae 23 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov ecx,[rsi+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 08
0027h mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
002ah mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
002dh mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
0030h mov [rbx+18h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 18
0033h mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
003dh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23ADD0h:jmp64]                encoding(5 bytes) = e8 8e ad 23 5f
0042h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0045h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0049h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
004ch call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239F10h:jmp64]                encoding(5 bytes) = e8 bf 9e 23 5f
0051h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0054h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0058h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0059h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
005bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_6Bytes => new byte[92]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0xDF,0xAE,0x23,0x5F,0x48,0x8B,0xD8,0x8B,0x4E,0x08,0x89,0x4B,0x10,0x8B,0x4E,0x10,0x89,0x4B,0x14,0x89,0x7B,0x18,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8E,0xAD,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xBF,0x9E,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_7(bit a)
; location: [7FFDDBA29760h, 7FFDDBA2978Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AE80h:jmp64]                encoding(5 bytes) = e8 63 ae 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_7Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x63,0xAE,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_8(bit a, bit b)
; location: [7FFDDBA297B0h, 7FFDDBA297D6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AD00h:jmp64]                encoding(5 bytes) = e8 e6 ac 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_8Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0xAC,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_9(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA297F0h, 7FFDDBA29819h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23ADF0h:jmp64]                encoding(5 bytes) = e8 d7 ad 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_9Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xD7,0xAD,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_10(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA29830h, 7FFDDBA29868h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AC80h:jmp64]                encoding(5 bytes) = e8 64 ac 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239DC0h:jmp64]                encoding(5 bytes) = e8 95 9d 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_10Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xAC,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x95,0x9D,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_11(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA29890h, 7FFDDBA298B9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AD50h:jmp64]                encoding(5 bytes) = e8 37 ad 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_11Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x37,0xAD,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_12(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA298D0h, 7FFDDBA29938h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AD10h:jmp64]                encoding(5 bytes) = e8 ef ac 23 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
002eh mov [rbx+10h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 10
0031h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0034h mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
0037h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
003ah mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
003dh mov [rbx+1Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 1c
0040h mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
004ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23ABE0h:jmp64]                encoding(5 bytes) = e8 91 ab 23 5f
004fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0052h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0056h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0059h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239D20h:jmp64]                encoding(5 bytes) = e8 c2 9c 23 5f
005eh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0061h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0065h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0066h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0067h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0068h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_12Bytes => new byte[105]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0xEF,0xAC,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x8B,0x40,0x08,0x89,0x43,0x10,0x8B,0x49,0x10,0x89,0x4B,0x14,0x8B,0x4E,0x10,0x89,0x4B,0x18,0x89,0x7B,0x1C,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x91,0xAB,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xC2,0x9C,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_13(bit a)
; location: [7FFDDBA29960h, 7FFDDBA2998Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AC80h:jmp64]                encoding(5 bytes) = e8 63 ac 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_13Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x63,0xAC,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_14(bit a, bit b)
; location: [7FFDDBA299B0h, 7FFDDBA299D6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AB00h:jmp64]                encoding(5 bytes) = e8 e6 aa 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_14Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0xAA,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_15(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA299F0h, 7FFDDBA29A19h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23ABF0h:jmp64]                encoding(5 bytes) = e8 d7 ab 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_15Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xD7,0xAB,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_16(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA29A30h, 7FFDDBA29A68h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23AA80h:jmp64]                encoding(5 bytes) = e8 64 aa 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239BC0h:jmp64]                encoding(5 bytes) = e8 95 9b 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_16Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x64,0xAA,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x95,0x9B,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_17(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA29A90h, 7FFDDBA29AB9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AB50h:jmp64]                encoding(5 bytes) = e8 37 ab 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_17Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x37,0xAB,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_18(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA29AD0h, 7FFDDBA29B08h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A9E0h:jmp64]                encoding(5 bytes) = e8 c4 a9 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239B20h:jmp64]                encoding(5 bytes) = e8 f5 9a 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_18Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0xA9,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xF5,0x9A,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_19(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA29B30h, 7FFDDBA29B59h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AAB0h:jmp64]                encoding(5 bytes) = e8 97 aa 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_19Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0xAA,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_20(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA29B70h, 7FFDDBA29BE5h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23AA70h:jmp64]                encoding(5 bytes) = e8 4f aa 23 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
0035h mov [rbx+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 10
0038h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
003bh mov [rbx+14h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 14
003eh mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0041h mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
0044h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0047h mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
004ah mov [rbx+20h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 20
004dh mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0057h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A940h:jmp64]                encoding(5 bytes) = e8 e4 a8 23 5f
005ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
005fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0063h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0066h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239A80h:jmp64]                encoding(5 bytes) = e8 15 9a 23 5f
006bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
006eh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0072h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0073h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0074h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0075h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_20Bytes => new byte[118]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0x4F,0xAA,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x8B,0x52,0x08,0x89,0x53,0x10,0x8B,0x40,0x10,0x89,0x43,0x14,0x8B,0x49,0x10,0x89,0x4B,0x18,0x8B,0x4E,0x10,0x89,0x4B,0x1C,0x89,0x7B,0x20,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE4,0xA8,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x15,0x9A,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_21(bit a)
; location: [7FFDDBA29C00h, 7FFDDBA29C2Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A9E0h:jmp64]                encoding(5 bytes) = e8 c3 a9 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_21Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC3,0xA9,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_22(bit a, bit b)
; location: [7FFDDBA29C50h, 7FFDDBA29C76h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A860h:jmp64]                encoding(5 bytes) = e8 46 a8 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_22Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x46,0xA8,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_23(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA29C90h, 7FFDDBA29CB9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A950h:jmp64]                encoding(5 bytes) = e8 37 a9 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_23Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x37,0xA9,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_24(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA29CD0h, 7FFDDBA29D08h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A7E0h:jmp64]                encoding(5 bytes) = e8 c4 a7 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239920h:jmp64]                encoding(5 bytes) = e8 f5 98 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_24Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xC4,0xA7,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xF5,0x98,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_25(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA29D30h, 7FFDDBA29D59h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A8B0h:jmp64]                encoding(5 bytes) = e8 97 a8 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_25Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0xA8,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_26(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA29D70h, 7FFDDBA29DA8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A740h:jmp64]                encoding(5 bytes) = e8 24 a7 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239880h:jmp64]                encoding(5 bytes) = e8 55 98 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_26Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0xA7,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x55,0x98,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_27(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA29DD0h, 7FFDDBA29DF9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A810h:jmp64]                encoding(5 bytes) = e8 f7 a7 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_27Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xF7,0xA7,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__32_28(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA29E10h, 7FFDDBA29E48h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 2f a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A6A0h:jmp64]                encoding(5 bytes) = e8 84 a6 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2397E0h:jmp64]                encoding(5 bytes) = e8 b5 97 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_28Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xA8,0x2F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0xA6,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB5,0x97,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_29(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDBA29E70h, 7FFDDBA29E99h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A770h:jmp64]                encoding(5 bytes) = e8 57 a7 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_29Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x57,0xA7,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_30(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDBA29EB0h, 7FFDDBA29F34h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A730h:jmp64]                encoding(5 bytes) = e8 0f a7 23 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0036h mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
0039h mov r8d,[r8+8]                ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 08
003dh mov [rbx+10h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 10
0041h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0044h mov [rbx+14h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 14
0047h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
004ah mov [rbx+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 18
004dh mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0050h mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
0053h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0056h mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
0059h mov [rbx+24h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 24
005ch mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0066h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A600h:jmp64]                encoding(5 bytes) = e8 95 a5 23 5f
006bh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006eh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0072h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0075h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239740h:jmp64]                encoding(5 bytes) = e8 c6 96 23 5f
007ah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
007dh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0081h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0082h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0083h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0084h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_30Bytes => new byte[133]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x0F,0xA7,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x45,0x8B,0x40,0x08,0x44,0x89,0x43,0x10,0x8B,0x52,0x10,0x89,0x53,0x14,0x8B,0x40,0x10,0x89,0x43,0x18,0x8B,0x49,0x10,0x89,0x4B,0x1C,0x8B,0x4E,0x10,0x89,0x4B,0x20,0x89,0x7B,0x24,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x95,0xA5,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xC6,0x96,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_31(bit a)
; location: [7FFDDBA29F50h, 7FFDDBA29F7Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A690h:jmp64]                encoding(5 bytes) = e8 73 a6 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_31Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x73,0xA6,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_32(bit a, bit b)
; location: [7FFDDBA29FA0h, 7FFDDBA29FC6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A510h:jmp64]                encoding(5 bytes) = e8 f6 a4 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_32Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0xA4,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_33(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA29FE0h, 7FFDDBA2A009h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A600h:jmp64]                encoding(5 bytes) = e8 e7 a5 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_33Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0xA5,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_34(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2A020h, 7FFDDBA2A058h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A490h:jmp64]                encoding(5 bytes) = e8 74 a4 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2395D0h:jmp64]                encoding(5 bytes) = e8 a5 95 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_34Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0xA4,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0x95,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_35(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2A080h, 7FFDDBA2A0A9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A560h:jmp64]                encoding(5 bytes) = e8 47 a5 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_35Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0xA5,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_36(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2A0C0h, 7FFDDBA2A0F8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A3F0h:jmp64]                encoding(5 bytes) = e8 d4 a3 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239530h:jmp64]                encoding(5 bytes) = e8 05 95 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_36Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0xA3,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x05,0x95,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_37(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA2A120h, 7FFDDBA2A149h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A4C0h:jmp64]                encoding(5 bytes) = e8 a7 a4 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_37Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA7,0xA4,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__32_38(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA2A160h, 7FFDDBA2A198h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 2f a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A350h:jmp64]                encoding(5 bytes) = e8 34 a3 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239490h:jmp64]                encoding(5 bytes) = e8 65 94 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_38Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xA8,0x2F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0xA3,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x65,0x94,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_39(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDBA2A1C0h, 7FFDDBA2A1E9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A420h:jmp64]                encoding(5 bytes) = e8 07 a4 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_39Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x07,0xA4,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__32_40(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDBA2A200h, 7FFDDBA2A238h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA03418h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03418h:imm64]         encoding(10 bytes) = 48 b9 18 34 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A2B0h:jmp64]                encoding(5 bytes) = e8 94 a2 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2393F0h:jmp64]                encoding(5 bytes) = e8 c5 93 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_40Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x18,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0xA2,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC5,0x93,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_41(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDBA2A260h, 7FFDDBA2A289h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A380h:jmp64]                encoding(5 bytes) = e8 67 a3 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_41Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x67,0xA3,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_42(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDBA2A2A0h, 7FFDDBA2A333h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A340h:jmp64]                encoding(5 bytes) = e8 1f a3 23 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0036h mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
0039h mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
003dh mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0040h mov r9d,[r9+8]                ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 08
0044h mov [rbx+10h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 10
0048h mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
004ch mov [rbx+14h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 14
0050h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0053h mov [rbx+18h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 18
0056h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
0059h mov [rbx+1Ch],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 1c
005ch mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
005fh mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
0062h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0065h mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
0068h mov [rbx+28h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 28
006bh mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0075h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A210h:jmp64]                encoding(5 bytes) = e8 96 a1 23 5f
007ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0081h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0084h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239350h:jmp64]                encoding(5 bytes) = e8 c7 92 23 5f
0089h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
008ch add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0090h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0091h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0092h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0093h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_42Bytes => new byte[148]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0x1F,0xA3,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x45,0x8B,0x49,0x08,0x44,0x89,0x4B,0x10,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x14,0x8B,0x52,0x10,0x89,0x53,0x18,0x8B,0x40,0x10,0x89,0x43,0x1C,0x8B,0x49,0x10,0x89,0x4B,0x20,0x8B,0x4E,0x10,0x89,0x4B,0x24,0x89,0x7B,0x28,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x96,0xA1,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xC7,0x92,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_43(bit a)
; location: [7FFDDBA2A350h, 7FFDDBA2A37Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A290h:jmp64]                encoding(5 bytes) = e8 73 a2 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_43Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x73,0xA2,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__32_44(bit a, bit b)
; location: [7FFDDBA2A3A0h, 7FFDDBA2A3C6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A110h:jmp64]                encoding(5 bytes) = e8 f6 a0 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_44Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0xA0,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_45(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2A3E0h, 7FFDDBA2A409h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A200h:jmp64]                encoding(5 bytes) = e8 e7 a1 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_45Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0xA1,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__32_46(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2A420h, 7FFDDBA2A458h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F23A090h:jmp64]                encoding(5 bytes) = e8 74 a0 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2391D0h:jmp64]                encoding(5 bytes) = e8 a5 91 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_46Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0xA0,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0x91,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_47(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2A480h, 7FFDDBA2A4A9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A160h:jmp64]                encoding(5 bytes) = e8 47 a1 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_47Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0xA1,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__32_48(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2A4C0h, 7FFDDBA2A4F8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239FF0h:jmp64]                encoding(5 bytes) = e8 d4 9f 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239130h:jmp64]                encoding(5 bytes) = e8 05 91 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_48Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0x9F,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x05,0x91,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_49(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA2A520h, 7FFDDBA2A549h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A0C0h:jmp64]                encoding(5 bytes) = e8 a7 a0 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_49Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA7,0xA0,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__32_50(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA2A560h, 7FFDDBA2A598h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 2f a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239F50h:jmp64]                encoding(5 bytes) = e8 34 9f 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F239090h:jmp64]                encoding(5 bytes) = e8 65 90 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_50Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xA8,0x2F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0x9F,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x65,0x90,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_51(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDBA2A5C0h, 7FFDDBA2A5E9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F23A020h:jmp64]                encoding(5 bytes) = e8 07 a0 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_51Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x07,0xA0,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__32_52(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDBA2A600h, 7FFDDBA2A638h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA03418h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03418h:imm64]         encoding(10 bytes) = 48 b9 18 34 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239EB0h:jmp64]                encoding(5 bytes) = e8 94 9e 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238FF0h:jmp64]                encoding(5 bytes) = e8 c5 8f 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_52Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x18,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x9E,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC5,0x8F,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_53(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDBA2A660h, 7FFDDBA2A689h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239F80h:jmp64]                encoding(5 bytes) = e8 67 9f 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_53Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x67,0x9F,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <bitcombo>b__32_54(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDBA2A6A0h, 7FFDDBA2A6D8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA03888h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03888h:imm64]         encoding(10 bytes) = 48 b9 88 38 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239E10h:jmp64]                encoding(5 bytes) = e8 f4 9d 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238F50h:jmp64]                encoding(5 bytes) = e8 25 8f 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_54Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x88,0x38,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF4,0x9D,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x25,0x8F,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__32_55(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5)
; location: [7FFDDBA2A700h, 7FFDDBA2A729h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239EE0h:jmp64]                encoding(5 bytes) = e8 c7 9e 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_55Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC7,0x9E,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: LiteralLogicSeq <bitcombo>b__32_56(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5, bit h)
; location: [7FFDDBA2A740h, 7FFDDBA2A7E2h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239EA0h:jmp64]                encoding(5 bytes) = e8 7f 9e 23 5f
0021h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0024h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0028h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
002bh mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
002fh mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0032h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
0036h mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
0039h mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
003dh mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0040h mov r9,[r9+8]                 ; MOV(Mov_r64_rm64) [R9,mem(64u,R9:br,DS:sr)]          encoding(4 bytes) = 4d 8b 49 08
0044h mov r10,r9                    ; MOV(Mov_r64_rm64) [R10,R9]                           encoding(3 bytes) = 4d 8b d1
0047h mov r10d,[r10+8]              ; MOV(Mov_r32_rm32) [R10D,mem(32u,R10:br,DS:sr)]       encoding(4 bytes) = 45 8b 52 08
004bh mov [rbx+10h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R10D]       encoding(4 bytes) = 44 89 53 10
004fh mov r9d,[r9+10h]              ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 10
0053h mov [rbx+14h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 14
0057h mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
005bh mov [rbx+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 18
005fh mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0062h mov [rbx+1Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 1c
0065h mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
0068h mov [rbx+20h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 20
006bh mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
006eh mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
0071h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0074h mov [rbx+28h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 28
0077h mov [rbx+2Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 2c
007ah mov rcx,7FFDDB9E59E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9e59e0h:imm64]         encoding(10 bytes) = 48 b9 e0 59 9e db fd 7f 00 00
0084h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239D70h:jmp64]                encoding(5 bytes) = e8 e7 9c 23 5f
0089h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
008ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0090h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0093h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238EB0h:jmp64]                encoding(5 bytes) = e8 18 8e 23 5f
0098h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
009bh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
009fh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a0h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a1h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00a2h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__32_56Bytes => new byte[163]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x7F,0x9E,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x4D,0x8B,0x49,0x08,0x4D,0x8B,0xD1,0x45,0x8B,0x52,0x08,0x44,0x89,0x53,0x10,0x45,0x8B,0x49,0x10,0x44,0x89,0x4B,0x14,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x18,0x8B,0x52,0x10,0x89,0x53,0x1C,0x8B,0x40,0x10,0x89,0x43,0x20,0x8B,0x49,0x10,0x89,0x4B,0x24,0x8B,0x4E,0x10,0x89,0x4B,0x28,0x89,0x7B,0x2C,0x48,0xB9,0xE0,0x59,0x9E,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE7,0x9C,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x18,0x8E,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__34_0(bit a)
; location: [7FFDDBA2A800h, 7FFDDBA2A82Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239DE0h:jmp64]                encoding(5 bytes) = e8 c3 9d 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__34_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xC3,0x9D,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__35_0(bit a)
; location: [7FFDDBA2A850h, 7FFDDBA2A87Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239D90h:jmp64]                encoding(5 bytes) = e8 73 9d 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__35_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x73,0x9D,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__35_1(bit a, bit b)
; location: [7FFDDBA2A8A0h, 7FFDDBA2A8C6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239C10h:jmp64]                encoding(5 bytes) = e8 f6 9b 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__35_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x9B,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__35_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2A8E0h, 7FFDDBA2A909h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239D00h:jmp64]                encoding(5 bytes) = e8 e7 9c 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__35_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0x9C,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__36_0(bit a)
; location: [7FFDDBA2A920h, 7FFDDBA2A94Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239CC0h:jmp64]                encoding(5 bytes) = e8 a3 9c 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA3,0x9C,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__36_1(bit a, bit b)
; location: [7FFDDBA2A970h, 7FFDDBA2A996h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239B40h:jmp64]                encoding(5 bytes) = e8 26 9b 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x26,0x9B,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__36_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2A9B0h, 7FFDDBA2A9D9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239C30h:jmp64]                encoding(5 bytes) = e8 17 9c 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x17,0x9C,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__36_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2A9F0h, 7FFDDBA2AA28h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239AC0h:jmp64]                encoding(5 bytes) = e8 a4 9a 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238C00h:jmp64]                encoding(5 bytes) = e8 d5 8b 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0x9A,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD5,0x8B,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__36_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2AA50h, 7FFDDBA2AA79h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239B90h:jmp64]                encoding(5 bytes) = e8 77 9b 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__36_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0x9B,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_0(bit a)
; location: [7FFDDBA2AA90h, 7FFDDBA2AABDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239B50h:jmp64]                encoding(5 bytes) = e8 33 9b 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x33,0x9B,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__37_1(bit a, bit b)
; location: [7FFDDBA2AAE0h, 7FFDDBA2AB06h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2399D0h:jmp64]                encoding(5 bytes) = e8 b6 99 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xB6,0x99,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2AB20h, 7FFDDBA2AB49h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239AC0h:jmp64]                encoding(5 bytes) = e8 a7 9a 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA7,0x9A,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__37_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2AB60h, 7FFDDBA2AB98h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239950h:jmp64]                encoding(5 bytes) = e8 34 99 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238A90h:jmp64]                encoding(5 bytes) = e8 65 8a 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0x99,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x65,0x8A,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2ABC0h, 7FFDDBA2ABE9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239A20h:jmp64]                encoding(5 bytes) = e8 07 9a 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x07,0x9A,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__37_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2AC00h, 7FFDDBA2AC38h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2398B0h:jmp64]                encoding(5 bytes) = e8 94 98 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2389F0h:jmp64]                encoding(5 bytes) = e8 c5 89 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x98,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC5,0x89,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__37_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA2AC60h, 7FFDDBA2AC89h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239980h:jmp64]                encoding(5 bytes) = e8 67 99 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__37_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x67,0x99,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_0(bit a)
; location: [7FFDDBA2ACA0h, 7FFDDBA2ACCDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239940h:jmp64]                encoding(5 bytes) = e8 23 99 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x23,0x99,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__38_1(bit a, bit b)
; location: [7FFDDBA2ACF0h, 7FFDDBA2AD16h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2397C0h:jmp64]                encoding(5 bytes) = e8 a6 97 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0x97,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2AD30h, 7FFDDBA2AD59h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2398B0h:jmp64]                encoding(5 bytes) = e8 97 98 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0x98,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__38_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2AD70h, 7FFDDBA2ADA8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239740h:jmp64]                encoding(5 bytes) = e8 24 97 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238880h:jmp64]                encoding(5 bytes) = e8 55 88 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0x97,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x55,0x88,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2ADD0h, 7FFDDBA2ADF9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239810h:jmp64]                encoding(5 bytes) = e8 f7 97 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xF7,0x97,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__38_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2AE10h, 7FFDDBA2AE48h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2396A0h:jmp64]                encoding(5 bytes) = e8 84 96 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2387E0h:jmp64]                encoding(5 bytes) = e8 b5 87 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0x96,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB5,0x87,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA2AE70h, 7FFDDBA2AE99h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239770h:jmp64]                encoding(5 bytes) = e8 57 97 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x57,0x97,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__38_7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA2AEB0h, 7FFDDBA2AEE8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 2f a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239600h:jmp64]                encoding(5 bytes) = e8 e4 95 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238740h:jmp64]                encoding(5 bytes) = e8 15 87 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_7Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xA8,0x2F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE4,0x95,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x15,0x87,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__38_8(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDBA2AF10h, 7FFDDBA2AF39h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2396D0h:jmp64]                encoding(5 bytes) = e8 b7 96 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__38_8Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB7,0x96,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_0(bit a)
; location: [7FFDDBA2AF50h, 7FFDDBA2AF7Dh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239690h:jmp64]                encoding(5 bytes) = e8 73 96 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x73,0x96,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__39_1(bit a, bit b)
; location: [7FFDDBA2AFA0h, 7FFDDBA2AFC6h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239510h:jmp64]                encoding(5 bytes) = e8 f6 94 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x94,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2AFE0h, 7FFDDBA2B009h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239600h:jmp64]                encoding(5 bytes) = e8 e7 95 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xE7,0x95,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__39_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2B020h, 7FFDDBA2B058h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239490h:jmp64]                encoding(5 bytes) = e8 74 94 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2385D0h:jmp64]                encoding(5 bytes) = e8 a5 85 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x94,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0x85,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2B080h, 7FFDDBA2B0A9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239560h:jmp64]                encoding(5 bytes) = e8 47 95 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x47,0x95,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__39_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2B0C0h, 7FFDDBA2B0F8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2393F0h:jmp64]                encoding(5 bytes) = e8 d4 93 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238530h:jmp64]                encoding(5 bytes) = e8 05 85 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD4,0x93,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x05,0x85,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA2B120h, 7FFDDBA2B149h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2394C0h:jmp64]                encoding(5 bytes) = e8 a7 94 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xA7,0x94,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__39_7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA2B160h, 7FFDDBA2B198h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 2f a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239350h:jmp64]                encoding(5 bytes) = e8 34 93 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238490h:jmp64]                encoding(5 bytes) = e8 65 84 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_7Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xA8,0x2F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x34,0x93,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x65,0x84,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_8(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDBA2B1C0h, 7FFDDBA2B1E9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239420h:jmp64]                encoding(5 bytes) = e8 07 94 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_8Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x07,0x94,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__39_9(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDBA2B200h, 7FFDDBA2B238h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA03418h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03418h:imm64]         encoding(10 bytes) = 48 b9 18 34 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2392B0h:jmp64]                encoding(5 bytes) = e8 94 92 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2383F0h:jmp64]                encoding(5 bytes) = e8 c5 83 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_9Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x18,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x92,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xC5,0x83,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__39_10(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDBA2B260h, 7FFDDBA2B289h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239380h:jmp64]                encoding(5 bytes) = e8 67 93 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__39_10Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x67,0x93,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_0(bit a)
; location: [7FFDDBA2B2A0h, 7FFDDBA2B2CDh]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov [rsp+38h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 38
0009h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0013h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0018h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239340h:jmp64]                encoding(5 bytes) = e8 23 93 23 5f
001dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001fh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
0022h mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0029h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
002dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_0Bytes => new byte[46]{0x48,0x83,0xEC,0x28,0x90,0x89,0x54,0x24,0x38,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x23,0x93,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType0<bit,bit> <bitcombo>b__40_1(bit a, bit b)
; location: [7FFDDBA2B2F0h, 7FFDDBA2B316h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000bh mov rcx,7FFDDBA01DE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba01de0h:imm64]         encoding(10 bytes) = 48 b9 e0 1d a0 db fd 7f 00 00
0015h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2391C0h:jmp64]                encoding(5 bytes) = e8 a6 91 23 5f
001ah mov [rax+8],esi               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ESI]        encoding(3 bytes) = 89 70 08
001dh mov [rax+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDI]        encoding(3 bytes) = 89 78 10
0020h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0024h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0025h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0026h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_1Bytes => new byte[39]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xE0,0x1D,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA6,0x91,0x23,0x5F,0x89,0x70,0x08,0x89,0x78,0x10,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_2(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0)
; location: [7FFDDBA2B330h, 7FFDDBA2B359h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2392B0h:jmp64]                encoding(5 bytes) = e8 97 92 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_2Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x97,0x92,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <bitcombo>b__40_3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2B370h, 7FFDDBA2B3A8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02490h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02490h:imm64]         encoding(10 bytes) = 48 b9 90 24 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239140h:jmp64]                encoding(5 bytes) = e8 24 91 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238280h:jmp64]                encoding(5 bytes) = e8 55 82 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_3Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x90,0x24,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x24,0x91,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x55,0x82,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_4(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1)
; location: [7FFDDBA2B3D0h, 7FFDDBA2B3F9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239210h:jmp64]                encoding(5 bytes) = e8 f7 91 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_4Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xF7,0x91,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <bitcombo>b__40_5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2B410h, 7FFDDBA2B448h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02B38h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02b38h:imm64]         encoding(10 bytes) = 48 b9 38 2b a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2390A0h:jmp64]                encoding(5 bytes) = e8 84 90 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2381E0h:jmp64]                encoding(5 bytes) = e8 b5 81 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_5Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x38,0x2B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x84,0x90,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xB5,0x81,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_6(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2)
; location: [7FFDDBA2B470h, 7FFDDBA2B499h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239170h:jmp64]                encoding(5 bytes) = e8 57 91 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_6Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x57,0x91,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <bitcombo>b__40_7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA2B4B0h, 7FFDDBA2B4E8h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA02FA8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba02fa8h:imm64]         encoding(10 bytes) = 48 b9 a8 2f a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F239000h:jmp64]                encoding(5 bytes) = e8 e4 8f 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238140h:jmp64]                encoding(5 bytes) = e8 15 81 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_7Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0xA8,0x2F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xE4,0x8F,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x15,0x81,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_8(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3)
; location: [7FFDDBA2B510h, 7FFDDBA2B539h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2390D0h:jmp64]                encoding(5 bytes) = e8 b7 90 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_8Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0xB7,0x90,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <bitcombo>b__40_9(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDBA2B550h, 7FFDDBA2B588h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA03418h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03418h:imm64]         encoding(10 bytes) = 48 b9 18 34 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238F60h:jmp64]                encoding(5 bytes) = e8 44 8f 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2380A0h:jmp64]                encoding(5 bytes) = e8 75 80 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_9Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x18,0x34,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x44,0x8F,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0x75,0x80,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_10(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4)
; location: [7FFDDBA2B5B0h, 7FFDDBA2B5D9h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F239030h:jmp64]                encoding(5 bytes) = e8 17 90 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_10Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x17,0x90,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: <>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <bitcombo>b__40_11(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDBA2B5F0h, 7FFDDBA2B628h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh mov rcx,7FFDDBA03888h         ; MOV(Mov_r64_imm64) [RCX,7ffddba03888h:imm64]         encoding(10 bytes) = 48 b9 88 38 a0 db fd 7f 00 00
0017h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238EC0h:jmp64]                encoding(5 bytes) = e8 a4 8e 23 5f
001ch mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
001fh lea rcx,[rbx+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RBX:br,DS:sr)]       encoding(4 bytes) = 48 8d 4b 08
0023h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0026h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F238000h:jmp64]                encoding(5 bytes) = e8 d5 7f 23 5f
002bh mov [rbx+10h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 10
002eh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0031h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0035h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0036h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0037h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0038h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_11Bytes => new byte[57]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0xB9,0x88,0x38,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0x8E,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8D,0x4B,0x08,0x48,0x8B,0xD6,0xE8,0xD5,0x7F,0x23,0x5F,0x89,0x7B,0x10,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<bit> <bitcombo>b__40_12(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5)
; location: [7FFDDBA2B650h, 7FFDDBA2B679h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
000fh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0014h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F238F90h:jmp64]                encoding(5 bytes) = e8 77 8f 23 5f
0019h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
001bh mov [rax+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),EDX]        encoding(3 bytes) = 89 50 10
001eh mov dword ptr [rax+14h],1     ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(7 bytes) = c7 40 14 01 00 00 00
0025h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__40_12Bytes => new byte[42]{0x48,0x83,0xEC,0x28,0x90,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x77,0x8F,0x23,0x5F,0x33,0xD2,0x89,0x50,0x10,0xC7,0x40,0x14,0x01,0x00,0x00,0x00,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:705
; function: LiteralLogicSeq<N1> <bitcombo>b__0(bit a)
; location: [7FFDDBA2BBB0h, 7FFDDBA2BBFEh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0006h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0008h movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
000dh mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
0017h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
001ch call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F238A30h:jmp64]                encoding(5 bytes) = e8 0f 8a 23 5f
0021h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0024h mov [rdi+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RDI:br,DS:sr),ESI]        encoding(3 bytes) = 89 77 10
0027h mov rcx,7FFDDBA047C8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba047c8h:imm64]         encoding(10 bytes) = 48 b9 c8 47 a0 db fd 7f 00 00
0031h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238900h:jmp64]                encoding(5 bytes) = e8 ca 88 23 5f
0036h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0039h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
003dh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0040h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F237A40h:jmp64]                encoding(5 bytes) = e8 fb 79 23 5f
0045h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0048h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
004ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
004dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
004eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__0Bytes => new byte[79]{0x57,0x56,0x48,0x83,0xEC,0x28,0x8B,0xF2,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x0F,0x8A,0x23,0x5F,0x48,0x8B,0xF8,0x89,0x77,0x10,0x48,0xB9,0xC8,0x47,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xCA,0x88,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD7,0xE8,0xFB,0x79,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x28,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:730
; function: LiteralLogicSeq<N2> <bitcombo>b__1(bit a, bit b)
; location: [7FFDDBA2BC20h, 7FFDDBA2BC76h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0009h mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000ch movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0011h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001bh mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0020h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2389C0h:jmp64]                encoding(5 bytes) = e8 9b 89 23 5f
0025h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0028h mov [rbx+10h],esi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ESI]        encoding(3 bytes) = 89 73 10
002bh mov [rbx+14h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 14
002eh mov rcx,7FFDDBA04B90h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04b90h:imm64]         encoding(10 bytes) = 48 b9 90 4b a0 db fd 7f 00 00
0038h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238890h:jmp64]                encoding(5 bytes) = e8 53 88 23 5f
003dh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0040h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0044h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0047h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2379D0h:jmp64]                encoding(5 bytes) = e8 84 79 23 5f
004ch mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
004fh add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0053h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0054h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0055h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0056h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__1Bytes => new byte[87]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x9B,0x89,0x23,0x5F,0x48,0x8B,0xD8,0x89,0x73,0x10,0x89,0x7B,0x14,0x48,0xB9,0x90,0x4B,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x53,0x88,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x84,0x79,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:758
; function: LiteralLogicSeq<N3> <bitcombo>b__3(<>f__AnonymousType0<bit,bit> <>h__TransparentIdentifier0, bit c)
; location: [7FFDDBA2BC90h, 7FFDDBA2BCF0h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001ch mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F238950h:jmp64]                encoding(5 bytes) = e8 2a 89 23 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov ecx,[rsi+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 08
002ch mov [rbx+10h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 10
002fh mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0032h mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
0035h mov [rbx+18h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 18
0038h mov rcx,7FFDDBA04F68h         ; MOV(Mov_r64_imm64) [RCX,7ffddba04f68h:imm64]         encoding(10 bytes) = 48 b9 68 4f a0 db fd 7f 00 00
0042h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238820h:jmp64]                encoding(5 bytes) = e8 d9 87 23 5f
0047h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
004ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
004eh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0051h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F237960h:jmp64]                encoding(5 bytes) = e8 0a 79 23 5f
0056h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0059h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
005dh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
005eh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
005fh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0060h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__3Bytes => new byte[97]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0xE8,0x2A,0x89,0x23,0x5F,0x48,0x8B,0xD8,0x8B,0x4E,0x08,0x89,0x4B,0x10,0x8B,0x4E,0x10,0x89,0x4B,0x14,0x89,0x7B,0x18,0x48,0xB9,0x68,0x4F,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xD9,0x87,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x0A,0x79,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:783
; function: LiteralLogicSeq<N4> <bitcombo>b__5(<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit> <>h__TransparentIdentifier1, bit d)
; location: [7FFDDBA2BD10h, 7FFDDBA2BD7Dh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001ch mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2388D0h:jmp64]                encoding(5 bytes) = e8 aa 88 23 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
0033h mov [rbx+10h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 10
0036h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0039h mov [rbx+14h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 14
003ch mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
003fh mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
0042h mov [rbx+1Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 1c
0045h mov rcx,7FFDDBA05340h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05340h:imm64]         encoding(10 bytes) = 48 b9 40 53 a0 db fd 7f 00 00
004fh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2387A0h:jmp64]                encoding(5 bytes) = e8 4c 87 23 5f
0054h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0057h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
005bh mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
005eh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2378E0h:jmp64]                encoding(5 bytes) = e8 7d 78 23 5f
0063h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0066h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
006ah pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
006bh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__5Bytes => new byte[110]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0xE8,0xAA,0x88,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x8B,0x40,0x08,0x89,0x43,0x10,0x8B,0x49,0x10,0x89,0x4B,0x14,0x8B,0x4E,0x10,0x89,0x4B,0x18,0x89,0x7B,0x1C,0x48,0xB9,0x40,0x53,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x4C,0x87,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x7D,0x78,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:39:815
; function: LiteralLogicSeq<N5> <bitcombo>b__7(<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit> <>h__TransparentIdentifier2, bit e)
; location: [7FFDDBA2BDA0h, 7FFDDBA2BE1Ah]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001ch mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F238840h:jmp64]                encoding(5 bytes) = e8 1a 88 23 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov edx,[rdx+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 08
003ah mov [rbx+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 10
003dh mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
0040h mov [rbx+14h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 14
0043h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0046h mov [rbx+18h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 18
0049h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
004ch mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
004fh mov [rbx+20h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 20
0052h mov rcx,7FFDDBA05718h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05718h:imm64]         encoding(10 bytes) = 48 b9 18 57 a0 db fd 7f 00 00
005ch call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238710h:jmp64]                encoding(5 bytes) = e8 af 86 23 5f
0061h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0064h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0068h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
006bh call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F237850h:jmp64]                encoding(5 bytes) = e8 e0 77 23 5f
0070h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0073h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0077h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0078h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0079h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
007ah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__7Bytes => new byte[123]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x05,0x00,0x00,0x00,0xE8,0x1A,0x88,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x8B,0x52,0x08,0x89,0x53,0x10,0x8B,0x40,0x10,0x89,0x43,0x14,0x8B,0x49,0x10,0x89,0x4B,0x18,0x8B,0x4E,0x10,0x89,0x4B,0x1C,0x89,0x7B,0x20,0x48,0xB9,0x18,0x57,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xAF,0x86,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xE0,0x77,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:123
; function: LiteralLogicSeq<N6> <bitcombo>b__9(<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit> <>h__TransparentIdentifier3, bit f)
; location: [7FFDDBA2C240h, 7FFDDBA2C2C9h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001ch mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2383A0h:jmp64]                encoding(5 bytes) = e8 7a 83 23 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
003bh mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
003eh mov r8d,[r8+8]                ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 08
0042h mov [rbx+10h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 10
0046h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0049h mov [rbx+14h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 14
004ch mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
004fh mov [rbx+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 18
0052h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0055h mov [rbx+1Ch],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 1c
0058h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
005bh mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
005eh mov [rbx+24h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 24
0061h mov rcx,7FFDDBA05AF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05af0h:imm64]         encoding(10 bytes) = 48 b9 f0 5a a0 db fd 7f 00 00
006bh call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238270h:jmp64]                encoding(5 bytes) = e8 00 82 23 5f
0070h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0073h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0077h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
007ah call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F2373B0h:jmp64]                encoding(5 bytes) = e8 31 73 23 5f
007fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0082h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0086h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0087h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0088h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0089h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__9Bytes => new byte[138]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x06,0x00,0x00,0x00,0xE8,0x7A,0x83,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x45,0x8B,0x40,0x08,0x44,0x89,0x43,0x10,0x8B,0x52,0x10,0x89,0x53,0x14,0x8B,0x40,0x10,0x89,0x43,0x18,0x8B,0x49,0x10,0x89,0x4B,0x1C,0x8B,0x4E,0x10,0x89,0x4B,0x20,0x89,0x7B,0x24,0x48,0xB9,0xF0,0x5A,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x00,0x82,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x31,0x73,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:149
; function: LiteralLogicSeq<N7> <bitcombo>b__11(<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier4, bit g)
; location: [7FFDDBA2C2F0h, 7FFDDBA2C388h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001ch mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F2382F0h:jmp64]                encoding(5 bytes) = e8 ca 82 23 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
003bh mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
003eh mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
0042h mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0045h mov r9d,[r9+8]                ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 08
0049h mov [rbx+10h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 10
004dh mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
0051h mov [rbx+14h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 14
0055h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0058h mov [rbx+18h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 18
005bh mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
005eh mov [rbx+1Ch],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 1c
0061h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0064h mov [rbx+20h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 20
0067h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
006ah mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
006dh mov [rbx+28h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 28
0070h mov rcx,7FFDDBA05EC8h         ; MOV(Mov_r64_imm64) [RCX,7ffddba05ec8h:imm64]         encoding(10 bytes) = 48 b9 c8 5e a0 db fd 7f 00 00
007ah call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F2381C0h:jmp64]                encoding(5 bytes) = e8 41 81 23 5f
007fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0082h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0086h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0089h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F237300h:jmp64]                encoding(5 bytes) = e8 72 72 23 5f
008eh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0091h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
0095h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0096h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0097h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0098h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__11Bytes => new byte[153]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x07,0x00,0x00,0x00,0xE8,0xCA,0x82,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x45,0x8B,0x49,0x08,0x44,0x89,0x4B,0x10,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x14,0x8B,0x52,0x10,0x89,0x53,0x18,0x8B,0x40,0x10,0x89,0x43,0x1C,0x8B,0x49,0x10,0x89,0x4B,0x20,0x8B,0x4E,0x10,0x89,0x4B,0x24,0x89,0x7B,0x28,0x48,0xB9,0xC8,0x5E,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x41,0x81,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0x72,0x72,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:177
; function: LiteralLogicSeq<N8> <bitcombo>b__13(<>f__AnonymousType5<<>f__AnonymousType4<<>f__AnonymousType3<<>f__AnonymousType2<<>f__AnonymousType1<<>f__AnonymousType0<bit,bit>,bit>,bit>,bit>,bit>,bit> <>h__TransparentIdentifier5, bit h)
; location: [7FFDDBA2C3B0h, 7FFDDBA2C457h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0007h mov rsi,rdx                   ; MOV(Mov_r64_rm64) [RSI,RDX]                          encoding(3 bytes) = 48 8b f2
000ah mov edi,r8d                   ; MOV(Mov_r32_rm32) [EDI,R8D]                          encoding(3 bytes) = 41 8b f8
000dh movsx rcx,byte ptr [rcx+8]    ; MOVSX(Movsx_r64_rm8) [RCX,mem(8i,RCX:br,DS:sr)]      encoding(5 bytes) = 48 0f be 49 08
0012h mov rcx,7FFDDB9A6048h         ; MOV(Mov_r64_imm64) [RCX,7ffddb9a6048h:imm64]         encoding(10 bytes) = 48 b9 48 60 9a db fd 7f 00 00
001ch mov edx,8                     ; MOV(Mov_r32_imm32) [EDX,8h:imm32]                    encoding(5 bytes) = ba 08 00 00 00
0021h call 7FFE3AC645E0h            ; CALL(Call_rel32_64) [5F238230h:jmp64]                encoding(5 bytes) = e8 0a 82 23 5f
0026h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
0029h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
002dh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0030h mov rax,[rax+8]               ; MOV(Mov_r64_rm64) [RAX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 40 08
0034h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0037h mov rdx,[rdx+8]               ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(4 bytes) = 48 8b 52 08
003bh mov r8,rdx                    ; MOV(Mov_r64_rm64) [R8,RDX]                           encoding(3 bytes) = 4c 8b c2
003eh mov r8,[r8+8]                 ; MOV(Mov_r64_rm64) [R8,mem(64u,R8:br,DS:sr)]          encoding(4 bytes) = 4d 8b 40 08
0042h mov r9,r8                     ; MOV(Mov_r64_rm64) [R9,R8]                            encoding(3 bytes) = 4d 8b c8
0045h mov r9,[r9+8]                 ; MOV(Mov_r64_rm64) [R9,mem(64u,R9:br,DS:sr)]          encoding(4 bytes) = 4d 8b 49 08
0049h mov r10,r9                    ; MOV(Mov_r64_rm64) [R10,R9]                           encoding(3 bytes) = 4d 8b d1
004ch mov r10d,[r10+8]              ; MOV(Mov_r32_rm32) [R10D,mem(32u,R10:br,DS:sr)]       encoding(4 bytes) = 45 8b 52 08
0050h mov [rbx+10h],r10d            ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R10D]       encoding(4 bytes) = 44 89 53 10
0054h mov r9d,[r9+10h]              ; MOV(Mov_r32_rm32) [R9D,mem(32u,R9:br,DS:sr)]         encoding(4 bytes) = 45 8b 49 10
0058h mov [rbx+14h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4b 14
005ch mov r8d,[r8+10h]              ; MOV(Mov_r32_rm32) [R8D,mem(32u,R8:br,DS:sr)]         encoding(4 bytes) = 45 8b 40 10
0060h mov [rbx+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),R8D]        encoding(4 bytes) = 44 89 43 18
0064h mov edx,[rdx+10h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 10
0067h mov [rbx+1Ch],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 1c
006ah mov eax,[rax+10h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 10
006dh mov [rbx+20h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EAX]        encoding(3 bytes) = 89 43 20
0070h mov ecx,[rcx+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 49 10
0073h mov [rbx+24h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 24
0076h mov ecx,[rsi+10h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSI:br,DS:sr)]        encoding(3 bytes) = 8b 4e 10
0079h mov [rbx+28h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4b 28
007ch mov [rbx+2Ch],edi             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDI]        encoding(3 bytes) = 89 7b 2c
007fh mov rcx,7FFDDBA062A0h         ; MOV(Mov_r64_imm64) [RCX,7ffddba062a0h:imm64]         encoding(10 bytes) = 48 b9 a0 62 a0 db fd 7f 00 00
0089h call 7FFE3AC644B0h            ; CALL(Call_rel32_64) [5F238100h:jmp64]                encoding(5 bytes) = e8 72 80 23 5f
008eh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0091h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0095h mov rdx,rbx                   ; MOV(Mov_r64_rm64) [RDX,RBX]                          encoding(3 bytes) = 48 8b d3
0098h call 7FFE3AC635F0h            ; CALL(Call_rel32_64) [5F237240h:jmp64]                encoding(5 bytes) = e8 a3 71 23 5f
009dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00a0h add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
00a4h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00a5h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00a6h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00a7h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <bitcombo>b__13Bytes => new byte[168]{0x57,0x56,0x53,0x48,0x83,0xEC,0x20,0x48,0x8B,0xF2,0x41,0x8B,0xF8,0x48,0x0F,0xBE,0x49,0x08,0x48,0xB9,0x48,0x60,0x9A,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x08,0x00,0x00,0x00,0xE8,0x0A,0x82,0x23,0x5F,0x48,0x8B,0xD8,0x48,0x8B,0x4E,0x08,0x48,0x8B,0xC1,0x48,0x8B,0x40,0x08,0x48,0x8B,0xD0,0x48,0x8B,0x52,0x08,0x4C,0x8B,0xC2,0x4D,0x8B,0x40,0x08,0x4D,0x8B,0xC8,0x4D,0x8B,0x49,0x08,0x4D,0x8B,0xD1,0x45,0x8B,0x52,0x08,0x44,0x89,0x53,0x10,0x45,0x8B,0x49,0x10,0x44,0x89,0x4B,0x14,0x45,0x8B,0x40,0x10,0x44,0x89,0x43,0x18,0x8B,0x52,0x10,0x89,0x53,0x1C,0x8B,0x40,0x10,0x89,0x43,0x20,0x8B,0x49,0x10,0x89,0x4B,0x24,0x8B,0x4E,0x10,0x89,0x4B,0x28,0x89,0x7B,0x2C,0x48,0xB9,0xA0,0x62,0xA0,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x72,0x80,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD3,0xE8,0xA3,0x71,0x23,0x5F,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:210
; function: string <FormatTuple>b__18_0(IOperator t)
; location: [7FFDDBA2C470h, 7FFDDBA2C48Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0008h mov r11,7FFDDB000FF8h         ; MOV(Mov_r64_imm64) [R11,7ffddb000ff8h:imm64]         encoding(10 bytes) = 49 bb f8 0f 00 db fd 7f 00 00
0012h mov rax,[7FFDDB000FF8h]       ; MOV(Mov_r64_rm64) [RAX,mem(64u,RIP:br,DS:sr)]        encoding(7 bytes) = 48 8b 05 6f 4b 5d ff
0019h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
001bh jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(3 bytes) = 48 ff e0
; static ReadOnlySpan<byte> <FormatTuple>b__18_0Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x48,0x8B,0xCA,0x49,0xBB,0xF8,0x0F,0x00,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x8B,0x05,0x6F,0x4B,0x5D,0xFF,0x39,0x09,0x48,0xFF,0xE0};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:235
; function: void <Emit>b__0(UnaryLogicOpKind:uint k)
; location: [7FFDDBA2C4A0h, 7FFDDBA2C509h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,58h                   ; SUB(Sub_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 ec 58
0006h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0009h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ch lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
0011h mov ecx,0Ch                   ; MOV(Mov_r32_imm32) [ECX,ch:imm32]                    encoding(5 bytes) = b9 0c 00 00 00
0016h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0018h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
001dh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
001fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0023h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0028h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
002ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0030h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0035h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0037h call 7FFDDBA1E620h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2180h:jmp64]        encoding(5 bytes) = e8 44 21 ff ff
003ch vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
0042h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
0048h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004dh mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
004fh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0052h call 7FFDDBA1E600h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF2160h:jmp64]        encoding(5 bytes) = e8 09 21 ff ff
0057h vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
005dh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0063h add rsp,58h                   ; ADD(Add_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 c4 58
0067h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0068h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0069h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <Emit>b__0Bytes => new byte[106]{0x57,0x56,0x48,0x83,0xEC,0x58,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x0C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x8B,0xF2,0x48,0x8B,0x79,0x08,0x48,0x8D,0x4C,0x24,0x38,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x4C,0x24,0x38,0x8B,0xD6,0xE8,0x44,0x21,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x8B,0xD6,0x4C,0x8B,0xC7,0xE8,0x09,0x21,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x83,0xC4,0x58,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:264
; function: void <Emit>b__0(BinaryLogicOpKind:uint k)
; location: [7FFDDBA2C530h, 7FFDDBA2C599h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,58h                   ; SUB(Sub_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 ec 58
0006h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0009h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ch lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
0011h mov ecx,0Ch                   ; MOV(Mov_r32_imm32) [ECX,ch:imm32]                    encoding(5 bytes) = b9 0c 00 00 00
0016h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0018h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
001dh mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
001fh mov rdi,[rcx+8]               ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 79 08
0023h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0028h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
002ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0030h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0035h mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
0037h call 7FFDDBA1ECF0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF27C0h:jmp64]        encoding(5 bytes) = e8 84 27 ff ff
003ch vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
0042h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
0048h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004dh mov edx,esi                   ; MOV(Mov_r32_rm32) [EDX,ESI]                          encoding(2 bytes) = 8b d6
004fh mov r8,rdi                    ; MOV(Mov_r64_rm64) [R8,RDI]                           encoding(3 bytes) = 4c 8b c7
0052h call 7FFDDBA21B38h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5608h:jmp64]        encoding(5 bytes) = e8 b1 55 ff ff
0057h vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
005dh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0063h add rsp,58h                   ; ADD(Add_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 c4 58
0067h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0068h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0069h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <Emit>b__0Bytes => new byte[106]{0x57,0x56,0x48,0x83,0xEC,0x58,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x0C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x8B,0xF2,0x48,0x8B,0x79,0x08,0x48,0x8D,0x4C,0x24,0x38,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x4C,0x24,0x38,0x8B,0xD6,0xE8,0x84,0x27,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x8B,0xD6,0x4C,0x8B,0xC7,0xE8,0xB1,0x55,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x83,0xC4,0x58,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; 2019-10-31 21:45:40:294
; function: void <Emit>b__0(TernaryOpKind:byte k)
; location: [7FFDDBA2C5C0h, 7FFDDBA2C62Bh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h sub rsp,58h                   ; SUB(Sub_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 ec 58
0006h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0009h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000ch lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
0011h mov ecx,0Ch                   ; MOV(Mov_r32_imm32) [ECX,ch:imm32]                    encoding(5 bytes) = b9 0c 00 00 00
0016h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0018h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001ah mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
001dh mov rsi,[rcx+8]               ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 71 08
0021h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0026h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
002ah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
002eh movzx edi,dl                  ; MOVZX(Movzx_r32_rm8) [EDI,DL]                        encoding(4 bytes) = 40 0f b6 fa
0032h mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0034h lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0039h call 7FFDDBA1F770h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF31B0h:jmp64]        encoding(5 bytes) = e8 72 31 ff ff
003eh vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
0044h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
004ah lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
004fh mov edx,edi                   ; MOV(Mov_r32_rm32) [EDX,EDI]                          encoding(2 bytes) = 8b d7
0051h mov r8,rsi                    ; MOV(Mov_r64_rm64) [R8,RSI]                           encoding(3 bytes) = 4c 8b c6
0054h call 7FFDDBA21B48h            ; CALL(Call_rel32_64) [FFFFFFFFFFFF5588h:jmp64]        encoding(5 bytes) = e8 2f 55 ff ff
0059h vmovdqu xmm0,xmmword ptr [rsp+38h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 38
005fh vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
0065h add rsp,58h                   ; ADD(Add_rm64_imm8) [RSP,58h:imm64]                   encoding(4 bytes) = 48 83 c4 58
0069h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
006ah pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
006bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> <Emit>b__0Bytes => new byte[108]{0x57,0x56,0x48,0x83,0xEC,0x58,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x0C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0x71,0x08,0x48,0x8D,0x4C,0x24,0x38,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x40,0x0F,0xB6,0xFA,0x8B,0xD7,0x48,0x8D,0x4C,0x24,0x38,0xE8,0x72,0x31,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x48,0x8D,0x4C,0x24,0x28,0x8B,0xD7,0x4C,0x8B,0xC6,0xE8,0x2F,0x55,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x38,0xC5,0xFA,0x7F,0x44,0x24,0x48,0x48,0x83,0xC4,0x58,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
