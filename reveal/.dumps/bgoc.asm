; 2019-11-05 06:49:43:819
; function: bit bitread(in ulong src, int M, int N, int row, int col)
; location: [7FFDDBAE0CA0h, 7FFDDBAE0CC5h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h imul r8d,r9d                  ; IMUL(Imul_r32_rm32) [R8D,R9D]                        encoding(4 bytes) = 45 0f af c1
0009h add r8d,[rsp+28h]             ; ADD(Add_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 03 44 24 28
000eh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0011h sar eax,6                     ; SAR(Sar_rm32_imm8) [EAX,6h:imm8]                     encoding(3 bytes) = c1 f8 06
0014h movsxd rax,eax                ; MOVSXD(Movsxd_r64_rm32) [RAX,EAX]                    encoding(3 bytes) = 48 63 c0
0017h mov rax,[rcx+rax*8]           ; MOV(Mov_r64_rm64) [RAX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 04 c1
001bh bt rax,r8                     ; BT(Bt_rm64_r64) [RAX,R8]                             encoding(4 bytes) = 4c 0f a3 c0
001fh setb al                       ; SETB(Setb_rm8) [AL]                                  encoding(3 bytes) = 0f 92 c0
0022h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0025h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bitreadBytes => new byte[38]{0x0F,0x1F,0x44,0x00,0x00,0x45,0x0F,0xAF,0xC1,0x44,0x03,0x44,0x24,0x28,0x41,0x8B,0xC0,0xC1,0xF8,0x06,0x48,0x63,0xC0,0x48,0x8B,0x04,0xC1,0x4C,0x0F,0xA3,0xC0,0x0F,0x92,0xC0,0x0F,0xB6,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: void bitset(ref ulong src, int M, int N, int row, int col, bit state)
; location: [7FFDDBAE0CE0h, 7FFDDBAE0D3Bh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,[rsp+30h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 30
0009h imul r8d,r9d                  ; IMUL(Imul_r32_rm32) [R8D,R9D]                        encoding(4 bytes) = 45 0f af c1
000dh add r8d,[rsp+28h]             ; ADD(Add_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 03 44 24 28
0012h mov edx,r8d                   ; MOV(Mov_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 8b d0
0015h sar edx,6                     ; SAR(Sar_rm32_imm8) [EDX,6h:imm8]                     encoding(3 bytes) = c1 fa 06
0018h mov r9d,r8d                   ; MOV(Mov_r32_rm32) [R9D,R8D]                          encoding(3 bytes) = 45 8b c8
001bh sar r9d,1Fh                   ; SAR(Sar_rm32_imm8) [R9D,1fh:imm8]                    encoding(4 bytes) = 41 c1 f9 1f
001fh and r9d,3Fh                   ; AND(And_rm32_imm8) [R9D,3fh:imm32]                   encoding(4 bytes) = 41 83 e1 3f
0023h add r9d,r8d                   ; ADD(Add_r32_rm32) [R9D,R8D]                          encoding(3 bytes) = 45 03 c8
0026h and r9d,0FFFFFFC0h            ; AND(And_rm32_imm8) [R9D,ffffffffffffffc0h:imm32]     encoding(4 bytes) = 41 83 e1 c0
002ah sub r8d,r9d                   ; SUB(Sub_r32_rm32) [R8D,R9D]                          encoding(3 bytes) = 45 2b c1
002dh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0030h lea rdx,[rcx+rdx*8]           ; LEA(Lea_r64_m) [RDX,mem(Unknown,RCX:br,DS:sr)]       encoding(4 bytes) = 48 8d 14 d1
0034h mov ecx,eax                   ; MOV(Mov_r32_rm32) [ECX,EAX]                          encoding(2 bytes) = 8b c8
0036h mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
0039h not rax                       ; NOT(Not_rm64) [RAX]                                  encoding(3 bytes) = 48 f7 d0
003ch inc rax                       ; INC(Inc_rm64) [RAX]                                  encoding(3 bytes) = 48 ff c0
003fh mov r9,[rdx]                  ; MOV(Mov_r64_rm64) [R9,mem(64u,RDX:br,DS:sr)]         encoding(3 bytes) = 4c 8b 0a
0042h xor rax,r9                    ; XOR(Xor_r64_rm64) [RAX,R9]                           encoding(3 bytes) = 49 33 c1
0045h movzx ecx,r8b                 ; MOVZX(Movzx_r32_rm8) [ECX,R8L]                       encoding(4 bytes) = 41 0f b6 c8
0049h mov r8d,1                     ; MOV(Mov_r32_imm32) [R8D,1h:imm32]                    encoding(6 bytes) = 41 b8 01 00 00 00
004fh shl r8,cl                     ; SHL(Shl_rm64_CL) [R8,CL]                             encoding(3 bytes) = 49 d3 e0
0052h and rax,r8                    ; AND(And_r64_rm64) [RAX,R8]                           encoding(3 bytes) = 49 23 c0
0055h xor rax,r9                    ; XOR(Xor_r64_rm64) [RAX,R9]                           encoding(3 bytes) = 49 33 c1
0058h mov [rdx],rax                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RAX]        encoding(3 bytes) = 48 89 02
005bh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bitsetBytes => new byte[92]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0x44,0x24,0x30,0x45,0x0F,0xAF,0xC1,0x44,0x03,0x44,0x24,0x28,0x41,0x8B,0xD0,0xC1,0xFA,0x06,0x45,0x8B,0xC8,0x41,0xC1,0xF9,0x1F,0x41,0x83,0xE1,0x3F,0x45,0x03,0xC8,0x41,0x83,0xE1,0xC0,0x45,0x2B,0xC1,0x48,0x63,0xD2,0x48,0x8D,0x14,0xD1,0x8B,0xC8,0x48,0x8B,0xC1,0x48,0xF7,0xD0,0x48,0xFF,0xC0,0x4C,0x8B,0x0A,0x49,0x33,0xC1,0x41,0x0F,0xB6,0xC8,0x41,0xB8,0x01,0x00,0x00,0x00,0x49,0xD3,0xE0,0x49,0x23,0xC0,0x49,0x33,0xC1,0x48,0x89,0x02,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit bitread(in byte src, int M, int N, int row, int col)
; location: [7FFDDBAE0D50h, 7FFDDBAE0D75h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h imul r8d,r9d                  ; IMUL(Imul_r32_rm32) [R8D,R9D]                        encoding(4 bytes) = 45 0f af c1
0009h add r8d,[rsp+28h]             ; ADD(Add_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 03 44 24 28
000eh mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0011h sar eax,3                     ; SAR(Sar_rm32_imm8) [EAX,3h:imm8]                     encoding(3 bytes) = c1 f8 03
0014h movsxd rax,eax                ; MOVSXD(Movsxd_r64_rm32) [RAX,EAX]                    encoding(3 bytes) = 48 63 c0
0017h movzx eax,byte ptr [rcx+rax]  ; MOVZX(Movzx_r32_rm8) [EAX,mem(8u,RCX:br,DS:sr)]      encoding(4 bytes) = 0f b6 04 01
001bh bt eax,r8d                    ; BT(Bt_rm32_r32) [EAX,R8D]                            encoding(4 bytes) = 44 0f a3 c0
001fh setb al                       ; SETB(Setb_rm8) [AL]                                  encoding(3 bytes) = 0f 92 c0
0022h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0025h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bitreadBytes => new byte[38]{0x0F,0x1F,0x44,0x00,0x00,0x45,0x0F,0xAF,0xC1,0x44,0x03,0x44,0x24,0x28,0x41,0x8B,0xC0,0xC1,0xF8,0x03,0x48,0x63,0xC0,0x0F,0xB6,0x04,0x01,0x44,0x0F,0xA3,0xC0,0x0F,0x92,0xC0,0x0F,0xB6,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitGrid<uint> bg_load_32x32x32(Span<uint> src)
; location: [7FFDDBAE1190h, 7FFDDBAE120Eh]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,50h                   ; SUB(Sub_rm64_imm8) [RSP,50h:imm64]                   encoding(4 bytes) = 48 83 ec 50
0007h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000ah mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
000dh lea rdi,[rsp+20h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 20
0012h mov ecx,0Ch                   ; MOV(Mov_r32_imm32) [ECX,ch:imm32]                    encoding(5 bytes) = b9 0c 00 00 00
0017h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0019h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
001bh mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
001eh mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0021h mov rcx,[rdx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 0a
0024h mov r9d,[rdx+8]               ; MOV(Mov_r32_rm32) [R9D,mem(32u,RDX:br,DS:sr)]        encoding(4 bytes) = 44 8b 4a 08
0028h lea rdx,[rsp+30h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 30
002dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0031h vmovdqu xmmword ptr [rdx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 02
0035h vmovdqu xmmword ptr [rdx+10h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RDX:br,DS:sr),XMM0] encoding(VEX, 5 bytes) = c5 fa 7f 42 10
003ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
003fh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0042h mov [rdx+8],r9d               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),R9D]        encoding(4 bytes) = 44 89 4a 08
0046h lea rcx,[rsp+20h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 20
004bh lea r9,[rsp+30h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 4c 24 30
0050h mov edx,20h                   ; MOV(Mov_r32_imm32) [EDX,20h:imm32]                   encoding(5 bytes) = ba 20 00 00 00
0055h mov r8d,20h                   ; MOV(Mov_r32_imm32) [R8D,20h:imm32]                   encoding(6 bytes) = 41 b8 20 00 00 00
005bh call 7FFDDBAE0F10h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFD80h:jmp64]        encoding(5 bytes) = e8 20 fd ff ff
0060h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0063h mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0066h call 7FFE3AF23690h            ; CALL(Call_rel32_64) [5F442500h:jmp64]                encoding(5 bytes) = e8 95 24 44 5f
006bh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
006dh call 7FFE3AF23690h            ; CALL(Call_rel32_64) [5F442500h:jmp64]                encoding(5 bytes) = e8 8e 24 44 5f
0072h movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0074h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0077h add rsp,50h                   ; ADD(Add_rm64_imm8) [RSP,50h:imm64]                   encoding(4 bytes) = 48 83 c4 50
007bh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
007ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
007dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
007eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bg_load_32x32x32Bytes => new byte[127]{0x57,0x56,0x53,0x48,0x83,0xEC,0x50,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x20,0xB9,0x0C,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x48,0x8B,0x0A,0x44,0x8B,0x4A,0x08,0x48,0x8D,0x54,0x24,0x30,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x02,0xC5,0xFA,0x7F,0x42,0x10,0x48,0x8D,0x54,0x24,0x20,0x48,0x89,0x0A,0x44,0x89,0x4A,0x08,0x48,0x8D,0x4C,0x24,0x20,0x4C,0x8D,0x4C,0x24,0x30,0xBA,0x20,0x00,0x00,0x00,0x41,0xB8,0x20,0x00,0x00,0x00,0xE8,0x20,0xFD,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0x8B,0xFB,0xE8,0x95,0x24,0x44,0x5F,0x48,0xA5,0xE8,0x8E,0x24,0x44,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x83,0xC4,0x50,0x5B,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: GridSpec bg_specify(int rows, int cols, int segwidth)
; location: [7FFDDBAE1230h, 7FFDDBAE1308h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0003h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0004h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0008h vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
000bh mov r10d,edx                  ; MOV(Mov_r32_rm32) [R10D,EDX]                         encoding(3 bytes) = 44 8b d2
000eh mov r11d,r10d                 ; MOV(Mov_r32_rm32) [R11D,R10D]                        encoding(3 bytes) = 45 8b da
0011h imul r11d,r8d                 ; IMUL(Imul_r32_rm32) [R11D,R8D]                       encoding(4 bytes) = 45 0f af d8
0015h mov eax,r11d                  ; MOV(Mov_r32_rm32) [EAX,R11D]                         encoding(3 bytes) = 41 8b c3
0018h mov rdx,2000000000000000h     ; MOV(Mov_r64_imm64) [RDX,2000000000000000h:imm64]     encoding(10 bytes) = 48 ba 00 00 00 00 00 00 00 20
0022h mulx rdx,rdx,rax              ; MULX(VEX_Mulx_r64_r64_rm64) [RDX,RDX,RAX]            encoding(VEX, 5 bytes) = c4 e2 eb f6 d0
0027h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
0029h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
002ch shl rdx,3Dh                   ; SHL(Shl_rm64_imm8) [RDX,3dh:imm8]                    encoding(4 bytes) = 48 c1 e2 3d
0030h mov eax,8                     ; MOV(Mov_r32_imm32) [EAX,8h:imm32]                    encoding(5 bytes) = b8 08 00 00 00
0035h mulx rdx,rdx,rax              ; MULX(VEX_Mulx_r64_r64_rm64) [RDX,RDX,RAX]            encoding(VEX, 5 bytes) = c4 e2 eb f6 d0
003ah test edx,edx                  ; TEST(Test_rm32_r32) [EDX,EDX]                        encoding(2 bytes) = 85 d2
003ch jne short 0042h               ; JNE(Jne_rel8_64) [42h:jmp64]                         encoding(2 bytes) = 75 04
003eh xor edi,edi                   ; XOR(Xor_r32_rm32) [EDI,EDI]                          encoding(2 bytes) = 33 ff
0040h jmp short 0047h               ; JMP(Jmp_rel8_64) [47h:jmp64]                         encoding(2 bytes) = eb 05
0042h mov edi,1                     ; MOV(Mov_r32_imm32) [EDI,1h:imm32]                    encoding(5 bytes) = bf 01 00 00 00
0047h add esi,edi                   ; ADD(Add_r32_rm32) [ESI,EDI]                          encoding(2 bytes) = 03 f7
0049h mov edi,esi                   ; MOV(Mov_r32_rm32) [EDI,ESI]                          encoding(2 bytes) = 8b fe
004bh shl edi,3                     ; SHL(Shl_rm32_imm8) [EDI,3h:imm8]                     encoding(3 bytes) = c1 e7 03
004eh mov eax,r9d                   ; MOV(Mov_r32_rm32) [EAX,R9D]                          encoding(3 bytes) = 41 8b c1
0051h mov rdx,2000000000000000h     ; MOV(Mov_r64_imm64) [RDX,2000000000000000h:imm64]     encoding(10 bytes) = 48 ba 00 00 00 00 00 00 00 20
005bh mulx rax,rax,rax              ; MULX(VEX_Mulx_r64_r64_rm64) [RAX,RAX,RAX]            encoding(VEX, 5 bytes) = c4 e2 fb f6 c0
0060h mov ebx,eax                   ; MOV(Mov_r32_rm32) [EBX,EAX]                          encoding(2 bytes) = 8b d8
0062h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
0064h cdq                           ; CDQ(Cdq)                                             encoding(1 byte ) = 99
0065h idiv ebx                      ; IDIV(Idiv_rm32) [EBX]                                encoding(2 bytes) = f7 fb
0067h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
0069h mov eax,esi                   ; MOV(Mov_r32_rm32) [EAX,ESI]                          encoding(2 bytes) = 8b c6
006bh cdq                           ; CDQ(Cdq)                                             encoding(1 byte ) = 99
006ch idiv ebx                      ; IDIV(Idiv_rm32) [EBX]                                encoding(2 bytes) = f7 fb
006eh test edx,edx                  ; TEST(Test_rm32_r32) [EDX,EDX]                        encoding(2 bytes) = 85 d2
0070h jne short 0076h               ; JNE(Jne_rel8_64) [76h:jmp64]                         encoding(2 bytes) = 75 04
0072h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0074h jmp short 007bh               ; JMP(Jmp_rel8_64) [7Bh:jmp64]                         encoding(2 bytes) = eb 05
0076h mov eax,1                     ; MOV(Mov_r32_imm32) [EAX,1h:imm32]                    encoding(5 bytes) = b8 01 00 00 00
007bh add eax,ebp                   ; ADD(Add_r32_rm32) [EAX,EBP]                          encoding(2 bytes) = 03 c5
007dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
007fh lea rbx,[rsp+8]               ; LEA(Lea_r64_m) [RBX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 5c 24 08
0084h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0088h vmovdqu xmmword ptr [rbx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RBX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 03
008ch mov [rbx+10h],rdx             ; MOV(Mov_rm64_r64) [mem(64u,RBX:br,DS:sr),RDX]        encoding(4 bytes) = 48 89 53 10
0090h mov [rbx+18h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RBX:br,DS:sr),EDX]        encoding(3 bytes) = 89 53 18
0093h mov [rsp+8],r10d              ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R10D]       encoding(5 bytes) = 44 89 54 24 08
0098h mov [rsp+0Ch],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 0c
009dh mov [rsp+14h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 14
00a2h mov [rsp+10h],r11d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R11D]       encoding(5 bytes) = 44 89 5c 24 10
00a7h mov [rsp+1Ch],esi             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ESI]        encoding(4 bytes) = 89 74 24 1c
00abh mov [rsp+18h],edi             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDI]        encoding(4 bytes) = 89 7c 24 18
00afh mov [rsp+20h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 20
00b3h vmovdqu xmm0,xmmword ptr [rsp+8]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 08
00b9h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
00bdh mov rax,[rsp+18h]             ; MOV(Mov_r64_rm64) [RAX,mem(64u,RSP:br,SS:sr)]        encoding(5 bytes) = 48 8b 44 24 18
00c2h mov [rcx+10h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RCX:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 41 10
00c6h mov eax,[rsp+20h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 20
00cah mov [rcx+18h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EAX]        encoding(3 bytes) = 89 41 18
00cdh mov rax,rcx                   ; MOV(Mov_r64_rm64) [RAX,RCX]                          encoding(3 bytes) = 48 8b c1
00d0h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
00d4h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
00d5h pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
00d6h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
00d7h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
00d8h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> bg_specifyBytes => new byte[217]{0x57,0x56,0x55,0x53,0x48,0x83,0xEC,0x28,0xC5,0xF8,0x77,0x44,0x8B,0xD2,0x45,0x8B,0xDA,0x45,0x0F,0xAF,0xD8,0x41,0x8B,0xC3,0x48,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xC4,0xE2,0xEB,0xF6,0xD0,0x8B,0xF2,0x48,0x8B,0xD0,0x48,0xC1,0xE2,0x3D,0xB8,0x08,0x00,0x00,0x00,0xC4,0xE2,0xEB,0xF6,0xD0,0x85,0xD2,0x75,0x04,0x33,0xFF,0xEB,0x05,0xBF,0x01,0x00,0x00,0x00,0x03,0xF7,0x8B,0xFE,0xC1,0xE7,0x03,0x41,0x8B,0xC1,0x48,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xC4,0xE2,0xFB,0xF6,0xC0,0x8B,0xD8,0x8B,0xC6,0x99,0xF7,0xFB,0x8B,0xE8,0x8B,0xC6,0x99,0xF7,0xFB,0x85,0xD2,0x75,0x04,0x33,0xC0,0xEB,0x05,0xB8,0x01,0x00,0x00,0x00,0x03,0xC5,0x33,0xD2,0x48,0x8D,0x5C,0x24,0x08,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x03,0x48,0x89,0x53,0x10,0x89,0x53,0x18,0x44,0x89,0x54,0x24,0x08,0x44,0x89,0x44,0x24,0x0C,0x44,0x89,0x4C,0x24,0x14,0x44,0x89,0x5C,0x24,0x10,0x89,0x74,0x24,0x1C,0x89,0x7C,0x24,0x18,0x89,0x44,0x24,0x20,0xC5,0xFA,0x6F,0x44,0x24,0x08,0xC5,0xFA,0x7F,0x01,0x48,0x8B,0x44,0x24,0x18,0x48,0x89,0x41,0x10,0x8B,0x44,0x24,0x20,0x89,0x41,0x18,0x48,0x8B,0xC1,0x48,0x83,0xC4,0x28,0x5B,0x5D,0x5E,0x5F,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
