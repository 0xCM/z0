// 2019-10-24 05:24:41:505
Sign:int signum_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.SByte)
    IL_0006: ret

}
Sign:int signum_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.SByte>(System.SByte)
    IL_0006: ret

}
Sign:int signum_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.Byte)
    IL_0006: ret

}
Sign:int signum_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.Byte>(System.Byte)
    IL_0006: ret

}
Sign:int signum_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.Int16)
    IL_0006: ret

}
Sign:int signum_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.Int16>(System.Int16)
    IL_0006: ret

}
Sign:int signum_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.UInt16)
    IL_0006: ret

}
Sign:int signum_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.UInt16>(System.UInt16)
    IL_0006: ret

}
Sign:int signum_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.Int32)
    IL_0006: ret

}
Sign:int signum_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.Int32>(System.Int32)
    IL_0006: ret

}
Sign:int signum_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.UInt32)
    IL_0006: ret

}
Sign:int signum_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.UInt32>(System.UInt32)
    IL_0006: ret

}
Sign:int signum_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.Int64)
    IL_0006: ret

}
Sign:int signum_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.Int64>(System.Int64)
    IL_0006: ret

}
Sign:int signum_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.math::signum(System.UInt64)
    IL_0006: ret

}
Sign:int signum_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Sign Z0.gmath::signum<System.UInt64>(System.UInt64)
    IL_0006: ret

}
sbyte square_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.math::square(System.SByte)
    IL_0006: ret

}
sbyte square_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::square<System.SByte>(System.SByte)
    IL_0006: ret

}
byte square_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.math::square(System.Byte)
    IL_0006: ret

}
byte square_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.gmath::square<System.Byte>(System.Byte)
    IL_0006: ret

}
short square_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::square(System.Int16)
    IL_0006: ret

}
short square_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::square<System.Int16>(System.Int16)
    IL_0006: ret

}
ushort square_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.math::square(System.UInt16)
    IL_0006: ret

}
ushort square_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.gmath::square<System.UInt16>(System.UInt16)
    IL_0006: ret

}
int square_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::square(System.Int32)
    IL_0006: ret

}
int square_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::square<System.Int32>(System.Int32)
    IL_0006: ret

}
uint square_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.math::square(System.UInt32)
    IL_0006: ret

}
uint square_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gmath::square<System.UInt32>(System.UInt32)
    IL_0006: ret

}
long square_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::square(System.Int64)
    IL_0006: ret

}
long square_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::square<System.Int64>(System.Int64)
    IL_0006: ret

}
ulong square_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.math::square(System.UInt64)
    IL_0006: ret

}
ulong square_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.gmath::square<System.UInt64>(System.UInt64)
    IL_0006: ret

}
sbyte sub_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::sub(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte sub_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::sub<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte sub_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::sub(System.Byte,System.Byte)
    IL_0007: ret

}
byte sub_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::sub<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short sub_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::sub(System.Int16,System.Int16)
    IL_0007: ret

}
short sub_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::sub<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort sub_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::sub(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort sub_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::sub<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int sub_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::sub(System.Int32,System.Int32)
    IL_0007: ret

}
int sub_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::sub<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint sub_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::sub(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint sub_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::sub<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long sub_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::sub(System.Int64,System.Int64)
    IL_0007: ret

}
long sub_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::sub<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong sub_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::sub(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong sub_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::sub<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
int mod_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::mod(System.Int32,System.Int32)
    IL_0007: ret

}
int mod_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::mod<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint mod_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::mod(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint mod_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::mod<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long mod_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::mod(System.Int64,System.Int64)
    IL_0007: ret

}
long mod_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::mod<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong mod_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::mod(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong mod_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::mod<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float mod_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::mod(System.Single,System.Single)
    IL_0007: ret

}
float mod_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::mod<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double mod_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::mod(System.Double,System.Double)
    IL_0007: ret

}
double mod_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::mod<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte mul_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::mul(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte mul_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::mul<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte mul_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::mul(System.Byte,System.Byte)
    IL_0007: ret

}
byte mul_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::mul<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short mul_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::mul(System.Int16,System.Int16)
    IL_0007: ret

}
short mul_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::mul<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort mul_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::mul(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort mul_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::mul<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int mul_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::mul(System.Int32,System.Int32)
    IL_0007: ret

}
int mul_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::mul<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint mul_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::mul(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint mul_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::mul<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long mul_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::mul(System.Int64,System.Int64)
    IL_0007: ret

}
long mul_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::mul<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong mul_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::mul(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong mul_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::mul<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte negate_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.math::negate(System.SByte)
    IL_0006: ret

}
sbyte negate_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::negate<System.SByte>(System.SByte)
    IL_0006: ret

}
byte negate_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.math::negate(System.Byte)
    IL_0006: ret

}
byte negate_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.gmath::negate<System.Byte>(System.Byte)
    IL_0006: ret

}
short negate_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::negate(System.Int16)
    IL_0006: ret

}
short negate_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::negate<System.Int16>(System.Int16)
    IL_0006: ret

}
ushort negate_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.math::negate(System.UInt16)
    IL_0006: ret

}
ushort negate_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.gmath::negate<System.UInt16>(System.UInt16)
    IL_0006: ret

}
int negate_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::negate(System.Int32)
    IL_0006: ret

}
int negate_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::negate<System.Int32>(System.Int32)
    IL_0006: ret

}
uint negate_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.math::negate(System.UInt32)
    IL_0006: ret

}
uint negate_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gmath::negate<System.UInt32>(System.UInt32)
    IL_0006: ret

}
long negate_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::negate(System.Int64)
    IL_0006: ret

}
long negate_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::negate<System.Int64>(System.Int64)
    IL_0006: ret

}
ulong negate_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.math::negate(System.UInt64)
    IL_0006: ret

}
ulong negate_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.gmath::negate<System.UInt64>(System.UInt64)
    IL_0006: ret

}
float negate_g32f(float x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Single Z0.gfp::negate<System.Single>(System.Single)
    IL_0006: ret

}
float negate_d32f(float x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Single Z0.fmath::negate(System.Single)
    IL_0006: ret

}
double negate_d64f(double x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Double Z0.fmath::negate(System.Double)
    IL_0006: ret

}
double negate_g64f(double x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Double Z0.gfp::negate<System.Double>(System.Double)
    IL_0006: ret

}
bool negative_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.math::negative(System.SByte)
    IL_0006: ret

}
bool negative_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::negative<System.SByte>(System.SByte)
    IL_0006: ret

}
bool negative_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.math::negative(System.Int16)
    IL_0006: ret

}
bool negative_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::negative<System.Int16>(System.Int16)
    IL_0006: ret

}
bool negative_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.math::negative(System.Int32)
    IL_0006: ret

}
bool negative_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::negative<System.Int32>(System.Int32)
    IL_0006: ret

}
bool negative_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.math::negative(System.Int64)
    IL_0006: ret

}
bool negative_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::negative<System.Int64>(System.Int64)
    IL_0006: ret

}
bool negative_d32f(float x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.math::negative(System.Single)
    IL_0006: ret

}
bool negative_g32f(float x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::negative<System.Single>(System.Single)
    IL_0006: ret

}
bool negative_d64f(double x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.math::negative(System.Double)
    IL_0006: ret

}
bool negative_g64f(double x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::negative<System.Double>(System.Double)
    IL_0006: ret

}
bool nonzero_n8i(sbyte x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: call System.Boolean System.SByte::Equals(System.SByte)
    IL_0008: ldc.i4.0
    IL_0009: ceq
    IL_000B: ret

}
bool nonzero_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.SByte>(System.SByte)
    IL_0006: ret

}
bool nonzero_n8u(byte x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: call System.Boolean System.Byte::Equals(System.Byte)
    IL_0008: ldc.i4.0
    IL_0009: ceq
    IL_000B: ret

}
bool nonzero_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.Byte>(System.Byte)
    IL_0006: ret

}
bool nonzero_n16i(short x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: call System.Boolean System.Int16::Equals(System.Int16)
    IL_0008: ldc.i4.0
    IL_0009: ceq
    IL_000B: ret

}
bool nonzero_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.Int16>(System.Int16)
    IL_0006: ret

}
bool nonzero_n16u(ushort x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: call System.Boolean System.UInt16::Equals(System.UInt16)
    IL_0008: ldc.i4.0
    IL_0009: ceq
    IL_000B: ret

}
bool nonzero_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.UInt16>(System.UInt16)
    IL_0006: ret

}
bool nonzero_n32i(int x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: call System.Boolean System.Int32::Equals(System.Int32)
    IL_0008: ldc.i4.0
    IL_0009: ceq
    IL_000B: ret

}
bool nonzero_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.Int32>(System.Int32)
    IL_0006: ret

}
bool nonzero_n32u(uint x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: call System.Boolean System.UInt32::Equals(System.UInt32)
    IL_0008: ldc.i4.0
    IL_0009: ceq
    IL_000B: ret

}
bool nonzero_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.UInt32>(System.UInt32)
    IL_0006: ret

}
bool nonzero_n64i(long x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: conv.i8
    IL_0004: call System.Boolean System.Int64::Equals(System.Int64)
    IL_0009: ldc.i4.0
    IL_000A: ceq
    IL_000C: ret

}
bool nonzero_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.Int64>(System.Int64)
    IL_0006: ret

}
bool nonzero_n64u(ulong x)
{
    IL_0000: ldarga.s x
    IL_0002: ldc.i4.0
    IL_0003: conv.i8
    IL_0004: call System.Boolean System.UInt64::Equals(System.UInt64)
    IL_0009: ldc.i4.0
    IL_000A: ceq
    IL_000C: ret

}
bool nonzero_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::nonzero<System.UInt64>(System.UInt64)
    IL_0006: ret

}
sbyte parse_d8i(string src, out sbyte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::parse(System.String,System.SByte&)
    IL_0007: ret

}
sbyte parse_g8i(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::parse<System.SByte>(System.String)
    IL_0006: ret

}
byte parse_d8u(string src, out byte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::parse(System.String,System.Byte&)
    IL_0007: ret

}
byte parse_g8u(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.gmath::parse<System.Byte>(System.String)
    IL_0006: ret

}
short parse_d16i(string src, out short dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::parse(System.String,System.Int16&)
    IL_0007: ret

}
short parse_g16i(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::parse<System.Int16>(System.String)
    IL_0006: ret

}
ushort parse_d16u(string src, out ushort dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::parse(System.String,System.UInt16&)
    IL_0007: ret

}
ushort parse_g16u(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.gmath::parse<System.UInt16>(System.String)
    IL_0006: ret

}
int parse_d32i(string src, out int dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::parse(System.String,System.Int32&)
    IL_0007: ret

}
int parse_g32i(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::parse<System.Int32>(System.String)
    IL_0006: ret

}
uint parse_d32u(string src, out uint dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::parse(System.String,System.UInt32&)
    IL_0007: ret

}
uint parse_g32u(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gmath::parse<System.UInt32>(System.String)
    IL_0006: ret

}
long parse_d64i(string src, out long dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::parse(System.String,System.Int64&)
    IL_0007: ret

}
long parse_g64i(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::parse<System.Int64>(System.String)
    IL_0006: ret

}
ulong parse_d64u(string src, out ulong dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::parse(System.String,System.UInt64&)
    IL_0007: ret

}
ulong parse_g64u(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.gmath::parse<System.UInt64>(System.String)
    IL_0006: ret

}
float parse_d32f(string src, out float dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.math::parse(System.String,System.Single&)
    IL_0007: ret

}
float parse_g32f(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Single Z0.gmath::parse<System.Single>(System.String)
    IL_0006: ret

}
double parse_d64f(string src, out double dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.math::parse(System.String,System.Double&)
    IL_0007: ret

}
double parse_g64f(string src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Double Z0.gmath::parse<System.Double>(System.String)
    IL_0006: ret

}
bool positive_n8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: cgt
    IL_0004: ret

}
bool positive_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.SByte>(System.SByte)
    IL_0006: ret

}
bool positive_n8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: cgt
    IL_0004: ret

}
bool positive_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.Byte>(System.Byte)
    IL_0006: ret

}
bool positive_n16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: cgt
    IL_0004: ret

}
bool positive_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.Int16>(System.Int16)
    IL_0006: ret

}
bool positive_n16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: cgt
    IL_0004: ret

}
bool positive_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.UInt16>(System.UInt16)
    IL_0006: ret

}
bool positive_n32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: cgt
    IL_0004: ret

}
bool positive_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.Int32>(System.Int32)
    IL_0006: ret

}
bool positive_n32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: cgt.un
    IL_0004: ret

}
bool positive_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.UInt32>(System.UInt32)
    IL_0006: ret

}
bool positive_n64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: conv.i8
    IL_0003: cgt
    IL_0005: ret

}
bool positive_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.Int64>(System.Int64)
    IL_0006: ret

}
bool positive_n64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: conv.i8
    IL_0003: cgt.un
    IL_0005: ret

}
bool positive_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::positive<System.UInt64>(System.UInt64)
    IL_0006: ret

}
sbyte pow_b8i(sbyte b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::pow(System.SByte,System.UInt32)
    IL_0007: ret

}
sbyte pow_g8i(sbyte b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::pow<System.SByte>(System.SByte,System.UInt32)
    IL_0007: ret

}
byte pow_b8u(byte b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::pow(System.Byte,System.UInt32)
    IL_0007: ret

}
byte pow_g8u(byte b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::pow<System.Byte>(System.Byte,System.UInt32)
    IL_0007: ret

}
short pow_b16i(short b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::pow(System.Int16,System.UInt32)
    IL_0007: ret

}
short pow_g16i(short b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::pow<System.Int16>(System.Int16,System.UInt32)
    IL_0007: ret

}
ushort pow_b16u(ushort b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::pow(System.UInt16,System.UInt32)
    IL_0007: ret

}
ushort pow_g16u(ushort b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::pow<System.UInt16>(System.UInt16,System.UInt32)
    IL_0007: ret

}
int pow_b32i(int b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::pow(System.Int32,System.UInt32)
    IL_0007: ret

}
int pow_g32i(int b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::pow<System.Int32>(System.Int32,System.UInt32)
    IL_0007: ret

}
uint pow_b32u(uint b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::pow(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint pow_g32u(uint b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::pow<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long pow_b64i(long b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::pow(System.Int64,System.UInt32)
    IL_0007: ret

}
long pow_g64i(long b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::pow<System.Int64>(System.Int64,System.UInt32)
    IL_0007: ret

}
ulong pow_b64u(ulong b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::pow(System.UInt64,System.UInt32)
    IL_0007: ret

}
ulong pow_g64u(ulong b, uint exp)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::pow<System.UInt64>(System.UInt64,System.UInt32)
    IL_0007: ret

}
bool gt_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.Byte,System.Byte)
    IL_0007: ret

}
bool gt_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool gt_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.Int16,System.Int16)
    IL_0007: ret

}
bool gt_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool gt_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool gt_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool gt_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.Int32,System.Int32)
    IL_0007: ret

}
bool gt_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool gt_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool gt_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool gt_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.Int64,System.Int64)
    IL_0007: ret

}
bool gt_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool gt_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool gt_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool gt_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::gt(System.Single,System.Single)
    IL_0007: ret

}
bool gt_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::gt<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
bool gt_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::gt(System.Double,System.Double)
    IL_0007: ret

}
bool gt_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::gt<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
bool gteq_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.SByte,System.SByte)
    IL_0007: ret

}
bool gteq_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
bool gteq_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.Byte,System.Byte)
    IL_0007: ret

}
bool gteq_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool gteq_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.Int16,System.Int16)
    IL_0007: ret

}
bool gteq_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool gteq_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool gteq_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool gteq_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.Int32,System.Int32)
    IL_0007: ret

}
bool gteq_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool gteq_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool gteq_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool gteq_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.Int64,System.Int64)
    IL_0007: ret

}
bool gteq_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool gteq_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gteq(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool gteq_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gteq<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool gteq_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::gteq(System.Single,System.Single)
    IL_0007: ret

}
bool gteq_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::gteq<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
bool gteq_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::gteq(System.Double,System.Double)
    IL_0007: ret

}
bool gteq_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::gteq<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte inc_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.math::inc(System.SByte)
    IL_0006: ret

}
sbyte inc_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::inc<System.SByte>(System.SByte)
    IL_0006: ret

}
byte inc_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.math::inc(System.Byte)
    IL_0006: ret

}
byte inc_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.gmath::inc<System.Byte>(System.Byte)
    IL_0006: ret

}
short inc_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::inc(System.Int16)
    IL_0006: ret

}
short inc_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::inc<System.Int16>(System.Int16)
    IL_0006: ret

}
ushort inc_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.math::inc(System.UInt16)
    IL_0006: ret

}
ushort inc_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.gmath::inc<System.UInt16>(System.UInt16)
    IL_0006: ret

}
int inc_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::inc(System.Int32)
    IL_0006: ret

}
int inc_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::inc<System.Int32>(System.Int32)
    IL_0006: ret

}
uint inc_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.math::inc(System.UInt32)
    IL_0006: ret

}
uint inc_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gmath::inc<System.UInt32>(System.UInt32)
    IL_0006: ret

}
long inc_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::inc(System.Int64)
    IL_0006: ret

}
long inc_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::inc<System.Int64>(System.Int64)
    IL_0006: ret

}
ulong inc_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.math::inc(System.UInt64)
    IL_0006: ret

}
ulong inc_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.gmath::inc<System.UInt64>(System.UInt64)
    IL_0006: ret

}
bool lt_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.SByte,System.SByte)
    IL_0007: ret

}
bool lt_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
bool lt_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.Byte,System.Byte)
    IL_0007: ret

}
bool lt_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool lt_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.Int16,System.Int16)
    IL_0007: ret

}
bool lt_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool lt_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool lt_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool lt_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.Int32,System.Int32)
    IL_0007: ret

}
bool lt_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool lt_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool lt_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool lt_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.Int64,System.Int64)
    IL_0007: ret

}
bool lt_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool lt_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lt(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool lt_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lt<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool lteq_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.SByte,System.SByte)
    IL_0007: ret

}
bool lteq_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
bool lteq_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.Byte,System.Byte)
    IL_0007: ret

}
bool lteq_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool lteq_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.Int16,System.Int16)
    IL_0007: ret

}
bool lteq_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool lteq_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool lteq_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool lteq_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.Int32,System.Int32)
    IL_0007: ret

}
bool lteq_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool lteq_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool lteq_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool lteq_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.Int64,System.Int64)
    IL_0007: ret

}
bool lteq_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool lteq_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::lteq(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool lteq_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::lteq<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte max_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::max(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte max_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::max<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte max_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::max(System.Byte,System.Byte)
    IL_0007: ret

}
byte max_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::max<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short max_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::max(System.Int16,System.Int16)
    IL_0007: ret

}
short max_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::max<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort max_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::max(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort max_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::max<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int max_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::max(System.Int32,System.Int32)
    IL_0007: ret

}
int max_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::max<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint max_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::max(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint max_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::max<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long max_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::max(System.Int64,System.Int64)
    IL_0007: ret

}
long max_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::max<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong max_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::max(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong max_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::max<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte min_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::min(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte min_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::min<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte min_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::min(System.Byte,System.Byte)
    IL_0007: ret

}
byte min_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::min<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short min_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::min(System.Int16,System.Int16)
    IL_0007: ret

}
short min_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::min<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort min_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::min(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort min_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::min<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int min_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::min(System.Int32,System.Int32)
    IL_0007: ret

}
int min_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::min<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint min_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::min(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint min_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::min<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long min_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::min(System.Int64,System.Int64)
    IL_0007: ret

}
long min_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::min<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong min_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::min(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong min_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::min<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte mod_n8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: rem
    IL_0003: conv.i1
    IL_0004: ret

}
sbyte mod_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::mod(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte mod_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::mod<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte mod_n8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: rem
    IL_0003: conv.u1
    IL_0004: ret

}
byte mod_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::mod(System.Byte,System.Byte)
    IL_0007: ret

}
byte mod_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::mod<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short mod_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::mod(System.Int16,System.Int16)
    IL_0007: ret

}
short mod_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::mod<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort mod_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::mod(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort mod_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::mod<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort div_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::div(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort div_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::div<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int div_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::div(System.Int32,System.Int32)
    IL_0007: ret

}
int div_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::div<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint div_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::div(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint div_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::div<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long div_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::div(System.Int64,System.Int64)
    IL_0007: ret

}
long div_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::div<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong div_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::div(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong div_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::div<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float div_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::div(System.Single,System.Single)
    IL_0007: ret

}
float div_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::div<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double div_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::div(System.Double,System.Double)
    IL_0007: ret

}
double div_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::div<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
bool divides_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.SByte,System.SByte)
    IL_0007: ret

}
bool divides_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
bool divides_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.Byte,System.Byte)
    IL_0007: ret

}
bool divides_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool divides_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.Int16,System.Int16)
    IL_0007: ret

}
bool divides_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool divides_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool divides_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool divides_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.Int32,System.Int32)
    IL_0007: ret

}
bool divides_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool divides_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool divides_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool divides_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.Int64,System.Int64)
    IL_0007: ret

}
bool divides_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool divides_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::divides(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool divides_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::divides<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool divides_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::divides(System.Single,System.Single)
    IL_0007: ret

}
bool divides_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::divides<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
bool divides_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::divides(System.Double,System.Double)
    IL_0007: ret

}
bool divides_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::divides<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
bool eq_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.SByte,System.SByte)
    IL_0007: ret

}
bool eq_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
bool eq_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.Byte,System.Byte)
    IL_0007: ret

}
bool eq_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool eq_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.Int16,System.Int16)
    IL_0007: ret

}
bool eq_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool eq_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool eq_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool eq_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.Int32,System.Int32)
    IL_0007: ret

}
bool eq_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool eq_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool eq_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool eq_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.Int64,System.Int64)
    IL_0007: ret

}
bool eq_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool eq_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::eq(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool eq_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::eq<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool eq_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::eq(System.Single,System.Single)
    IL_0007: ret

}
bool eq_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::eq<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
bool eq_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::eq(System.Double,System.Double)
    IL_0007: ret

}
bool eq_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::eq<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
bool neq_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.SByte,System.SByte)
    IL_0007: ret

}
bool neq_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
bool neq_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.Byte,System.Byte)
    IL_0007: ret

}
bool neq_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
bool neq_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.Int16,System.Int16)
    IL_0007: ret

}
bool neq_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
bool neq_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool neq_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
bool neq_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.Int32,System.Int32)
    IL_0007: ret

}
bool neq_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
bool neq_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool neq_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
bool neq_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.Int64,System.Int64)
    IL_0007: ret

}
bool neq_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
bool neq_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::neq(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool neq_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::neq<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool neq_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::neq(System.Single,System.Single)
    IL_0007: ret

}
bool neq_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::neq<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
bool neq_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.fmath::neq(System.Double,System.Double)
    IL_0007: ret

}
bool neq_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gfp::neq<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
bool even_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.SByte)
    IL_0006: ret

}
bool even_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.SByte>(System.SByte)
    IL_0006: ret

}
bool even_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.Byte)
    IL_0006: ret

}
bool even_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.Byte>(System.Byte)
    IL_0006: ret

}
bool even_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.Int16)
    IL_0006: ret

}
bool even_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.Int16>(System.Int16)
    IL_0006: ret

}
bool even_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.UInt16)
    IL_0006: ret

}
bool even_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.UInt16>(System.UInt16)
    IL_0006: ret

}
bool even_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.Int32)
    IL_0006: ret

}
bool even_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.Int32>(System.Int32)
    IL_0006: ret

}
bool even_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.UInt32)
    IL_0006: ret

}
bool even_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.UInt32>(System.UInt32)
    IL_0006: ret

}
bool even_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.Int64)
    IL_0006: ret

}
bool even_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.Int64>(System.Int64)
    IL_0006: ret

}
bool even_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::even(System.UInt64)
    IL_0006: ret

}
bool even_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::even<System.UInt64>(System.UInt64)
    IL_0006: ret

}
bool odd_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.SByte)
    IL_0006: ret

}
bool odd_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.SByte>(System.SByte)
    IL_0006: ret

}
bool odd_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.Byte)
    IL_0006: ret

}
bool odd_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.Byte>(System.Byte)
    IL_0006: ret

}
bool odd_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.Int16)
    IL_0006: ret

}
bool odd_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.Int16>(System.Int16)
    IL_0006: ret

}
bool odd_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.UInt16)
    IL_0006: ret

}
bool odd_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.UInt16>(System.UInt16)
    IL_0006: ret

}
bool odd_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.Int32)
    IL_0006: ret

}
bool odd_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.Int32>(System.Int32)
    IL_0006: ret

}
bool odd_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.UInt32)
    IL_0006: ret

}
bool odd_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.UInt32>(System.UInt32)
    IL_0006: ret

}
bool odd_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.Int64)
    IL_0006: ret

}
bool odd_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.Int64>(System.Int64)
    IL_0006: ret

}
bool odd_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean zfunc::odd(System.UInt64)
    IL_0006: ret

}
bool odd_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Boolean Z0.gmath::odd<System.UInt64>(System.UInt64)
    IL_0006: ret

}
sbyte fma_d8i(sbyte x, sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.SByte Z0.math::fma(System.SByte,System.SByte,System.SByte)
    IL_0008: ret

}
sbyte fma_g8i(sbyte x, sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.SByte Z0.gmath::fma<System.SByte>(System.SByte,System.SByte,System.SByte)
    IL_0008: ret

}
byte fma_d8u(byte x, byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Byte Z0.math::fma(System.Byte,System.Byte,System.Byte)
    IL_0008: ret

}
byte fma_g8u(byte x, byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Byte Z0.gmath::fma<System.Byte>(System.Byte,System.Byte,System.Byte)
    IL_0008: ret

}
short fma_d16i(short x, short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int16 Z0.math::fma(System.Int16,System.Int16,System.Int16)
    IL_0008: ret

}
short fma_g16i(short x, short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int16 Z0.gmath::fma<System.Int16>(System.Int16,System.Int16,System.Int16)
    IL_0008: ret

}
ushort fma_d16u(ushort x, ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt16 Z0.math::fma(System.UInt16,System.UInt16,System.UInt16)
    IL_0008: ret

}
ushort fma_g16u(ushort x, ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt16 Z0.gmath::fma<System.UInt16>(System.UInt16,System.UInt16,System.UInt16)
    IL_0008: ret

}
int fma_d32i(int x, int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int32 Z0.math::fma(System.Int32,System.Int32,System.Int32)
    IL_0008: ret

}
int fma_g32i(int x, int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int32 Z0.gmath::fma<System.Int32>(System.Int32,System.Int32,System.Int32)
    IL_0008: ret

}
uint fma_d32u(uint x, uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt32 Z0.math::fma(System.UInt32,System.UInt32,System.UInt32)
    IL_0008: ret

}
uint fma_g32u(uint x, uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt32 Z0.gmath::fma<System.UInt32>(System.UInt32,System.UInt32,System.UInt32)
    IL_0008: ret

}
long fma_d64i(long x, long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int64 Z0.math::fma(System.Int64,System.Int64,System.Int64)
    IL_0008: ret

}
long fma_g64i(long x, long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int64 Z0.gmath::fma<System.Int64>(System.Int64,System.Int64,System.Int64)
    IL_0008: ret

}
ulong fma_d64u(ulong x, ulong a, ulong b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt64 Z0.math::fma(System.UInt64,System.UInt64,System.UInt64)
    IL_0008: ret

}
double fma_d64f(double x, double a, double b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Double Z0.fmath::fma(System.Double,System.Double,System.Double)
    IL_0008: ret

}
double fma_g64f(double x, double a, double b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Double Z0.gmath::fma<System.Double>(System.Double,System.Double,System.Double)
    IL_0008: ret

}
bool gt_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.math::gt(System.SByte,System.SByte)
    IL_0007: ret

}
bool gt_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.gmath::gt<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte add_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::add(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte add_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::add<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte add_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::add(System.Byte,System.Byte)
    IL_0007: ret

}
byte add_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::add<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short add_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::add(System.Int16,System.Int16)
    IL_0007: ret

}
short add_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::add<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort add_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::add(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort add_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::add<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int add_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::add(System.Int32,System.Int32)
    IL_0007: ret

}
int add_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::add<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint add_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::add(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint add_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::add<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long add_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::add(System.Int64,System.Int64)
    IL_0007: ret

}
long add_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::add<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong add_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::add(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong add_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::add<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
bool between_d8i(sbyte x, sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.SByte,System.SByte,System.SByte)
    IL_0008: ret

}
bool between_g8i(sbyte x, sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.SByte>(System.SByte,System.SByte,System.SByte)
    IL_0008: ret

}
bool between_d8u(byte x, byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Byte,System.Byte,System.Byte)
    IL_0008: ret

}
bool between_g8u(byte x, byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Byte>(System.Byte,System.Byte,System.Byte)
    IL_0008: ret

}
bool between_d16i(short x, short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Int16,System.Int16,System.Int16)
    IL_0008: ret

}
bool between_g16i(short x, short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Int16>(System.Int16,System.Int16,System.Int16)
    IL_0008: ret

}
bool between_d16u(ushort x, ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.UInt16,System.UInt16,System.UInt16)
    IL_0008: ret

}
bool between_g16u(ushort x, ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.UInt16>(System.UInt16,System.UInt16,System.UInt16)
    IL_0008: ret

}
bool between_d32i(int x, int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Int32,System.Int32,System.Int32)
    IL_0008: ret

}
bool between_g32i(int x, int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Int32>(System.Int32,System.Int32,System.Int32)
    IL_0008: ret

}
bool between_d32u(uint x, uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.UInt32,System.UInt32,System.UInt32)
    IL_0008: ret

}
bool between_g32u(uint x, uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.UInt32>(System.UInt32,System.UInt32,System.UInt32)
    IL_0008: ret

}
bool between_d64i(long x, long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Int64,System.Int64,System.Int64)
    IL_0008: ret

}
bool between_g64i(long x, long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Int64>(System.Int64,System.Int64,System.Int64)
    IL_0008: ret

}
bool between_d64u(ulong x, ulong a, ulong b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.UInt64,System.UInt64,System.UInt64)
    IL_0008: ret

}
bool between_g64u(ulong x, ulong a, ulong b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.UInt64>(System.UInt64,System.UInt64,System.UInt64)
    IL_0008: ret

}
sbyte one_n8i()
{
    IL_0000: ldc.i4.1
    IL_0001: ret

}
sbyte one_g8i()
{
    IL_0000: call System.SByte Z0.gmath::one<System.SByte>()
    IL_0005: ret

}
byte one_n8u()
{
    IL_0000: ldc.i4.1
    IL_0001: ret

}
byte one_g8u()
{
    IL_0000: call System.Byte Z0.gmath::one<System.Byte>()
    IL_0005: ret

}
short one_n16i()
{
    IL_0000: ldc.i4.1
    IL_0001: ret

}
short one_g16i()
{
    IL_0000: call System.Int16 Z0.gmath::one<System.Int16>()
    IL_0005: ret

}
ushort one_n16u()
{
    IL_0000: ldc.i4.1
    IL_0001: ret

}
ushort one_g16u()
{
    IL_0000: call System.UInt16 Z0.gmath::one<System.UInt16>()
    IL_0005: ret

}
int one_n32i()
{
    IL_0000: ldc.i4.1
    IL_0001: ret

}
int one_g32i()
{
    IL_0000: call System.Int32 Z0.gmath::one<System.Int32>()
    IL_0005: ret

}
uint one_n32u()
{
    IL_0000: ldc.i4.1
    IL_0001: ret

}
uint one_g32u()
{
    IL_0000: call System.UInt32 Z0.gmath::one<System.UInt32>()
    IL_0005: ret

}
long one_n64i()
{
    IL_0000: ldc.i4.1
    IL_0001: conv.i8
    IL_0002: ret

}
long one_g64i()
{
    IL_0000: call System.Int64 Z0.gmath::one<System.Int64>()
    IL_0005: ret

}
ulong one_n64u()
{
    IL_0000: ldc.i4.1
    IL_0001: conv.i8
    IL_0002: ret

}
ulong one_g64u()
{
    IL_0000: call System.UInt64 Z0.gmath::one<System.UInt64>()
    IL_0005: ret

}
float one_n32f()
{
    IL_0000: ldc.r4 1
    IL_0005: ret

}
float one_g32f()
{
    IL_0000: call System.Single Z0.gmath::one<System.Single>()
    IL_0005: ret

}
double one_n64f()
{
    IL_0000: ldc.r8 1
    IL_0009: ret

}
double one_g64f()
{
    IL_0000: call System.Double Z0.gmath::one<System.Double>()
    IL_0005: ret

}
sbyte zero_g8i()
{
    IL_0000: call System.SByte Z0.gmath::zero<System.SByte>()
    IL_0005: ret

}
byte zero_g8u()
{
    IL_0000: call System.Byte Z0.gmath::zero<System.Byte>()
    IL_0005: ret

}
short zero_g16i()
{
    IL_0000: call System.Int16 Z0.gmath::zero<System.Int16>()
    IL_0005: ret

}
ushort zero_g16u()
{
    IL_0000: call System.UInt16 Z0.gmath::zero<System.UInt16>()
    IL_0005: ret

}
int zero_g32i()
{
    IL_0000: call System.Int32 Z0.gmath::zero<System.Int32>()
    IL_0005: ret

}
uint zero_g32u()
{
    IL_0000: call System.UInt32 Z0.gmath::zero<System.UInt32>()
    IL_0005: ret

}
long zero_g64i()
{
    IL_0000: call System.Int64 Z0.gmath::zero<System.Int64>()
    IL_0005: ret

}
ulong zero_g64u()
{
    IL_0000: call System.UInt64 Z0.gmath::zero<System.UInt64>()
    IL_0005: ret

}
float zero_g32f()
{
    IL_0000: call System.Single Z0.gmath::zero<System.Single>()
    IL_0005: ret

}
double zero_g64f()
{
    IL_0000: call System.Double Z0.gmath::one<System.Double>()
    IL_0005: ret

}
sbyte minval_n8i()
{
    IL_0000: ldc.i4.s -128
    IL_0002: ret

}
sbyte minval_g8i()
{
    IL_0000: call System.SByte Z0.gmath::minval<System.SByte>()
    IL_0005: ret

}
byte minval_n8u()
{
    IL_0000: ldc.i4.0
    IL_0001: ret

}
byte minval_g8u()
{
    IL_0000: call System.Byte Z0.gmath::minval<System.Byte>()
    IL_0005: ret

}
short minval_n16i()
{
    IL_0000: ldc.i4 -32768
    IL_0005: ret

}
short minval_g16i()
{
    IL_0000: call System.Int16 Z0.gmath::minval<System.Int16>()
    IL_0005: ret

}
ushort minval_g16u()
{
    IL_0000: call System.UInt16 Z0.gmath::minval<System.UInt16>()
    IL_0005: ret

}
int minval_32i()
{
    IL_0000: ldc.i4 -2147483648
    IL_0005: ret

}
int minval_g32i()
{
    IL_0000: call System.Int32 Z0.gmath::minval<System.Int32>()
    IL_0005: ret

}
uint minval_32u()
{
    IL_0000: ldc.i4.0
    IL_0001: ret

}
uint minval_g32u()
{
    IL_0000: call System.UInt32 Z0.gmath::minval<System.UInt32>()
    IL_0005: ret

}
long minval_g64i()
{
    IL_0000: call System.Int64 Z0.gmath::minval<System.Int64>()
    IL_0005: ret

}
ulong minval_g64u()
{
    IL_0000: call System.UInt64 Z0.gmath::minval<System.UInt64>()
    IL_0005: ret

}
float minval_g32f()
{
    IL_0000: call System.Single Z0.gmath::minval<System.Single>()
    IL_0005: ret

}
double minval_g64f()
{
    IL_0000: call System.Double Z0.gmath::minval<System.Double>()
    IL_0005: ret

}
sbyte maxval_g8i()
{
    IL_0000: call System.SByte Z0.gmath::maxval<System.SByte>()
    IL_0005: ret

}
byte maxval_g8u()
{
    IL_0000: call System.Byte Z0.gmath::maxval<System.Byte>()
    IL_0005: ret

}
short maxval_g16i()
{
    IL_0000: call System.Int16 Z0.gmath::maxval<System.Int16>()
    IL_0005: ret

}
ushort maxval_g16u()
{
    IL_0000: call System.UInt16 Z0.gmath::maxval<System.UInt16>()
    IL_0005: ret

}
int maxval_n32i()
{
    IL_0000: ldc.i4 2147483647
    IL_0005: ret

}
int maxval_g32i()
{
    IL_0000: call System.Int32 Z0.gmath::maxval<System.Int32>()
    IL_0005: ret

}
uint maxval_n32u()
{
    IL_0000: ldc.i4.m1
    IL_0001: ret

}
uint maxval_g32u()
{
    IL_0000: call System.UInt32 Z0.gmath::maxval<System.UInt32>()
    IL_0005: ret

}
long maxval_g64i()
{
    IL_0000: call System.Int64 Z0.gmath::maxval<System.Int64>()
    IL_0005: ret

}
ulong maxval_g64u()
{
    IL_0000: call System.UInt64 Z0.gmath::maxval<System.UInt64>()
    IL_0005: ret

}
float maxval_g32f()
{
    IL_0000: call System.Single Z0.gmath::maxval<System.Single>()
    IL_0005: ret

}
double maxval_n64f()
{
    IL_0000: ldc.r8 1.7976931348623157E+308
    IL_0009: ret

}
double maxval_g64f()
{
    IL_0000: call System.Double Z0.gmath::maxval<System.Double>()
    IL_0005: ret

}
sbyte dec_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.math::dec(System.SByte)
    IL_0006: ret

}
sbyte dec_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::dec<System.SByte>(System.SByte)
    IL_0006: ret

}
byte dec_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.math::dec(System.Byte)
    IL_0006: ret

}
byte dec_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.gmath::dec<System.Byte>(System.Byte)
    IL_0006: ret

}
short dec_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::dec(System.Int16)
    IL_0006: ret

}
short dec_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::dec<System.Int16>(System.Int16)
    IL_0006: ret

}
ushort dec_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.math::dec(System.UInt16)
    IL_0006: ret

}
ushort dec_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.gmath::dec<System.UInt16>(System.UInt16)
    IL_0006: ret

}
int dec_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::dec(System.Int32)
    IL_0006: ret

}
int dec_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::dec<System.Int32>(System.Int32)
    IL_0006: ret

}
uint dec_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.math::dec(System.UInt32)
    IL_0006: ret

}
uint dec_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gmath::dec<System.UInt32>(System.UInt32)
    IL_0006: ret

}
long dec_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::dec(System.Int64)
    IL_0006: ret

}
long dec_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::dec<System.Int64>(System.Int64)
    IL_0006: ret

}
ulong dec_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.math::dec(System.UInt64)
    IL_0006: ret

}
ulong dec_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.gmath::dec<System.UInt64>(System.UInt64)
    IL_0006: ret

}
ulong dist_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.SByte,System.SByte)
    IL_0007: ret

}
ulong dist_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
ulong dist_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.Byte,System.Byte)
    IL_0007: ret

}
ulong dist_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
ulong dist_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.Int16,System.Int16)
    IL_0007: ret

}
ulong dist_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ulong dist_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.UInt16,System.UInt16)
    IL_0007: ret

}
ulong dist_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
ulong dist_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.Int32,System.Int32)
    IL_0007: ret

}
ulong dist_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
ulong dist_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.UInt32,System.UInt32)
    IL_0007: ret

}
ulong dist_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
ulong dist_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.Int64,System.Int64)
    IL_0007: ret

}
ulong dist_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong dist_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::dist(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong dist_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::dist<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte div_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::div(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte div_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::div<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte div_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::div(System.Byte,System.Byte)
    IL_0007: ret

}
byte div_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::div<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short div_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::div(System.Int16,System.Int16)
    IL_0007: ret

}
short div_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::div<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
sbyte and_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::and(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte and_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::and<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte and_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::and(System.Byte,System.Byte)
    IL_0007: ret

}
byte and_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::and<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short and_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::and(System.Int16,System.Int16)
    IL_0007: ret

}
short and_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::and<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort and_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::and(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort and_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::and<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int and_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::and(System.Int32,System.Int32)
    IL_0007: ret

}
int and_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::and<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint and_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::and(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint and_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::and<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long and_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::and(System.Int64,System.Int64)
    IL_0007: ret

}
long and_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::and<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong and_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::and(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong and_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::and<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float and_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::and(System.Single,System.Single)
    IL_0007: ret

}
float and_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::and<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double and_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::and(System.Double,System.Double)
    IL_0007: ret

}
double and_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::and<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte not_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.math::not(System.SByte)
    IL_0006: ret

}
sbyte not_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::not<System.SByte>(System.SByte)
    IL_0006: ret

}
byte not_d8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.math::not(System.Byte)
    IL_0006: ret

}
byte not_g8u(byte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.gmath::not<System.Byte>(System.Byte)
    IL_0006: ret

}
short not_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::not(System.Int16)
    IL_0006: ret

}
short not_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::not<System.Int16>(System.Int16)
    IL_0006: ret

}
ushort not_d16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.math::not(System.UInt16)
    IL_0006: ret

}
ushort not_g16u(ushort x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.gmath::not<System.UInt16>(System.UInt16)
    IL_0006: ret

}
int not_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::not(System.Int32)
    IL_0006: ret

}
int not_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::not<System.Int32>(System.Int32)
    IL_0006: ret

}
uint not_d32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.math::not(System.UInt32)
    IL_0006: ret

}
uint not_g32u(uint x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.gmath::not<System.UInt32>(System.UInt32)
    IL_0006: ret

}
long not_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::not(System.Int64)
    IL_0006: ret

}
long not_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::not<System.Int64>(System.Int64)
    IL_0006: ret

}
ulong not_d64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.math::not(System.UInt64)
    IL_0006: ret

}
ulong not_g64u(ulong x)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.gmath::not<System.UInt64>(System.UInt64)
    IL_0006: ret

}
sbyte or_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::or(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte or_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::or<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte or_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::or(System.Byte,System.Byte)
    IL_0007: ret

}
byte or_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::or<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short or_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::or(System.Int16,System.Int16)
    IL_0007: ret

}
short or_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::or<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort or_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::or(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort or_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::or<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int or_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::or(System.Int32,System.Int32)
    IL_0007: ret

}
int or_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::or<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint or_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::or(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint or_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::or<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long or_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::or(System.Int64,System.Int64)
    IL_0007: ret

}
long or_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::or<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong or_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::or(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong or_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::or<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float or_d32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::or(System.Single,System.Single)
    IL_0007: ret

}
float or_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::or<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double or_d64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::or(System.Double,System.Double)
    IL_0007: ret

}
double or_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::or<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte sal_d8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::sal(System.SByte,System.Int32)
    IL_0007: ret

}
sbyte sal_g8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::sal<System.SByte>(System.SByte,System.Int32)
    IL_0007: ret

}
byte sal_d8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::sal(System.Byte,System.Int32)
    IL_0007: ret

}
byte sal_g8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::sal<System.Byte>(System.Byte,System.Int32)
    IL_0007: ret

}
short sal_d16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::sal(System.Int16,System.Int32)
    IL_0007: ret

}
short sal_g16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::sal<System.Int16>(System.Int16,System.Int32)
    IL_0007: ret

}
ushort sal_d16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::sal(System.UInt16,System.Int32)
    IL_0007: ret

}
ushort sal_g16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::sal<System.UInt16>(System.UInt16,System.Int32)
    IL_0007: ret

}
int sal_d32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::sal(System.Int32,System.Int32)
    IL_0007: ret

}
int sal_g32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::sal<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint sal_d32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::sal(System.UInt32,System.Int32)
    IL_0007: ret

}
uint sal_g32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::sal<System.UInt32>(System.UInt32,System.Int32)
    IL_0007: ret

}
long sal_d64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::sal(System.Int64,System.Int32)
    IL_0007: ret

}
long sal_g64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::sal<System.Int64>(System.Int64,System.Int32)
    IL_0007: ret

}
ulong sal_d64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::sal(System.UInt64,System.Int32)
    IL_0007: ret

}
ulong sal_g64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::sal<System.UInt64>(System.UInt64,System.Int32)
    IL_0007: ret

}
sbyte sar_b8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::sar(System.SByte,System.Int32)
    IL_0007: ret

}
sbyte sar_g8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::sar<System.SByte>(System.SByte,System.Int32)
    IL_0007: ret

}
byte sar_b8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::sar(System.Byte,System.Int32)
    IL_0007: ret

}
byte sar_g8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::sar<System.Byte>(System.Byte,System.Int32)
    IL_0007: ret

}
short sar_b16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::sar(System.Int16,System.Int32)
    IL_0007: ret

}
short sar_g16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::sar<System.Int16>(System.Int16,System.Int32)
    IL_0007: ret

}
ushort sar_b16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::sar(System.UInt16,System.Int32)
    IL_0007: ret

}
ushort sar_g16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::sar<System.UInt16>(System.UInt16,System.Int32)
    IL_0007: ret

}
int sar_b32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::sar(System.Int32,System.Int32)
    IL_0007: ret

}
int sar_g32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::sar<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint sar_b32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::sar(System.UInt32,System.Int32)
    IL_0007: ret

}
uint sar_g32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::sar<System.UInt32>(System.UInt32,System.Int32)
    IL_0007: ret

}
long sar_b64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::sar(System.Int64,System.Int32)
    IL_0007: ret

}
long sar_g64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::sar<System.Int64>(System.Int64,System.Int32)
    IL_0007: ret

}
ulong sar_b64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::sar(System.UInt64,System.Int32)
    IL_0007: ret

}
ulong sar_g64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::sar<System.UInt64>(System.UInt64,System.Int32)
    IL_0007: ret

}
sbyte srl_d8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::srl(System.SByte,System.Int32)
    IL_0007: ret

}
sbyte srl_g8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::srl<System.SByte>(System.SByte,System.Int32)
    IL_0007: ret

}
byte srl_d8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::srl(System.Byte,System.Int32)
    IL_0007: ret

}
byte srl_g8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::srl<System.Byte>(System.Byte,System.Int32)
    IL_0007: ret

}
short srl_d16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::srl(System.Int16,System.Int32)
    IL_0007: ret

}
short srl_g16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::srl<System.Int16>(System.Int16,System.Int32)
    IL_0007: ret

}
ushort srl_d16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::srl(System.UInt16,System.Int32)
    IL_0007: ret

}
ushort srl_g16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::srl<System.UInt16>(System.UInt16,System.Int32)
    IL_0007: ret

}
int srl_d32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::srl(System.Int32,System.Int32)
    IL_0007: ret

}
int srl_g32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::srl<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint srl_d32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::srl(System.UInt32,System.Int32)
    IL_0007: ret

}
uint srl_g32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::srl<System.UInt32>(System.UInt32,System.Int32)
    IL_0007: ret

}
long srl_d64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::srl(System.Int64,System.Int32)
    IL_0007: ret

}
long srl_g64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::srl<System.Int64>(System.Int64,System.Int32)
    IL_0007: ret

}
ulong srl_d64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::srl(System.UInt64,System.Int32)
    IL_0007: ret

}
ulong srl_g64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::srl<System.UInt64>(System.UInt64,System.Int32)
    IL_0007: ret

}
sbyte xor_d8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::xor(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte xor_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::xor<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte xor_d8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::xor(System.Byte,System.Byte)
    IL_0007: ret

}
byte xor_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::xor<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short xor_d16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::xor(System.Int16,System.Int16)
    IL_0007: ret

}
short xor_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::xor<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort xor_d16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::xor(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort xor_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::xor<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int xor_d32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::xor(System.Int32,System.Int32)
    IL_0007: ret

}
int xor_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::xor<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint xor_d32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::xor(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint xor_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::xor<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long xor_d64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::xor(System.Int64,System.Int64)
    IL_0007: ret

}
long xor_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::xor<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong xor_d64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::xor(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong xor_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::xor<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte abs_d8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.math::abs(System.SByte)
    IL_0006: ret

}
sbyte abs_g8i(sbyte x)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte Z0.gmath::abs<System.SByte>(System.SByte)
    IL_0006: ret

}
short abs_d16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::abs(System.Int16)
    IL_0006: ret

}
short abs_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::abs<System.Int16>(System.Int16)
    IL_0006: ret

}
int abs_d32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::abs(System.Int32)
    IL_0006: ret

}
int abs_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::abs<System.Int32>(System.Int32)
    IL_0006: ret

}
long abs_d64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::abs(System.Int64)
    IL_0006: ret

}
long abs_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::abs<System.Int64>(System.Int64)
    IL_0006: ret

}
