// 2019-09-26 23:57:13:206
float or_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::or(System.Single,System.Single)
    IL_0007: ret

}
float or_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::or<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double or_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::or(System.Double,System.Double)
    IL_0007: ret

}
double or_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::or<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte sal_8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::sal(System.SByte,System.Int32)
    IL_0007: ret

}
sbyte sal_g8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::sal<System.SByte>(System.SByte,System.Int32)
    IL_0007: ret

}
byte sal_8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::sal(System.Byte,System.Int32)
    IL_0007: ret

}
byte sal_g8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::sal<System.Byte>(System.Byte,System.Int32)
    IL_0007: ret

}
short sal_16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::sal(System.Int16,System.Int32)
    IL_0007: ret

}
short sal_g16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::sal<System.Int16>(System.Int16,System.Int32)
    IL_0007: ret

}
ushort sal_16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::sal(System.UInt16,System.Int32)
    IL_0007: ret

}
ushort sal_g16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::sal<System.UInt16>(System.UInt16,System.Int32)
    IL_0007: ret

}
int sal_32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::sal(System.Int32,System.Int32)
    IL_0007: ret

}
int sal_g32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::sal<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint sal_32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::sal(System.UInt32,System.Int32)
    IL_0007: ret

}
uint sal_g32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::sal<System.UInt32>(System.UInt32,System.Int32)
    IL_0007: ret

}
long sal_64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::sal(System.Int64,System.Int32)
    IL_0007: ret

}
long sal_g64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::sal<System.Int64>(System.Int64,System.Int32)
    IL_0007: ret

}
ulong sal_64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::sal(System.UInt64,System.Int32)
    IL_0007: ret

}
ulong sal_g64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::sal<System.UInt64>(System.UInt64,System.Int32)
    IL_0007: ret

}
sbyte srl_8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::srl(System.SByte,System.Int32)
    IL_0007: ret

}
sbyte srl_g8i(sbyte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::srl<System.SByte>(System.SByte,System.Int32)
    IL_0007: ret

}
byte srl_8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::srl(System.Byte,System.Int32)
    IL_0007: ret

}
byte srl_g8u(byte lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::srl<System.Byte>(System.Byte,System.Int32)
    IL_0007: ret

}
short srl_16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::srl(System.Int16,System.Int32)
    IL_0007: ret

}
short srl_g16i(short lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::srl<System.Int16>(System.Int16,System.Int32)
    IL_0007: ret

}
ushort srl_16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::srl(System.UInt16,System.Int32)
    IL_0007: ret

}
ushort srl_g16u(ushort lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::srl<System.UInt16>(System.UInt16,System.Int32)
    IL_0007: ret

}
int srl_32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::srl(System.Int32,System.Int32)
    IL_0007: ret

}
int srl_g32i(int lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::srl<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint srl_32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::srl(System.UInt32,System.Int32)
    IL_0007: ret

}
uint srl_g32u(uint lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::srl<System.UInt32>(System.UInt32,System.Int32)
    IL_0007: ret

}
long srl_64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::srl(System.Int64,System.Int32)
    IL_0007: ret

}
long srl_g64i(long lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::srl<System.Int64>(System.Int64,System.Int32)
    IL_0007: ret

}
ulong srl_64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::srl(System.UInt64,System.Int32)
    IL_0007: ret

}
ulong srl_g64u(ulong lhs, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::srl<System.UInt64>(System.UInt64,System.Int32)
    IL_0007: ret

}
sbyte sub_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::sub(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte sub_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::sub<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte sub_8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::sub(System.Byte,System.Byte)
    IL_0007: ret

}
byte sub_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::sub<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short sub_16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::sub(System.Int16,System.Int16)
    IL_0007: ret

}
short sub_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::sub<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort sub_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::sub(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort sub_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::sub<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int sub_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::sub(System.Int32,System.Int32)
    IL_0007: ret

}
int sub_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::sub<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint sub_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::sub(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint sub_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::sub<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long sub_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::sub(System.Int64,System.Int64)
    IL_0007: ret

}
long sub_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::sub<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong sub_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::sub(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong sub_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::sub<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float sub_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::sub(System.Single,System.Single)
    IL_0007: ret

}
float sub_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::sub<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double sub_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::sub(System.Double,System.Double)
    IL_0007: ret

}
double sub_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::sub<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte xor_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::xor(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte xor_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::xor<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte xor_8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::xor(System.Byte,System.Byte)
    IL_0007: ret

}
byte xor_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::xor<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short xor_16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::xor(System.Int16,System.Int16)
    IL_0007: ret

}
short xor_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::xor<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort xor_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::xor(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort xor_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::xor<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int xor_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::xor(System.Int32,System.Int32)
    IL_0007: ret

}
int xor_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::xor<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint xor_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::xor(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint xor_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::xor<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long xor_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::xor(System.Int64,System.Int64)
    IL_0007: ret

}
long xor_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::xor<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong xor_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::xor(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong xor_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::xor<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float xor_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::xor(System.Single,System.Single)
    IL_0007: ret

}
float xor_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::xor<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double xor_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::xor(System.Double,System.Double)
    IL_0007: ret

}
double xor_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::xor<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
short abs_8i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::abs(System.Int16)
    IL_0006: ret

}
short abs_g8i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::abs<System.Int16>(System.Int16)
    IL_0006: ret

}
short abs_16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.math::abs(System.Int16)
    IL_0006: ret

}
short abs_g16i(short x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16 Z0.gmath::abs<System.Int16>(System.Int16)
    IL_0006: ret

}
int abs_32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.math::abs(System.Int32)
    IL_0006: ret

}
int abs_g32i(int x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.gmath::abs<System.Int32>(System.Int32)
    IL_0006: ret

}
long abs_64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.math::abs(System.Int64)
    IL_0006: ret

}
float abs_g32f(float x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Single Z0.gfp::abs<System.Single>(System.Single)
    IL_0006: ret

}
long abs_g64i(long x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.gmath::abs<System.Int64>(System.Int64)
    IL_0006: ret

}
float abs_32f(float x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Single Z0.fmath::abs(System.Single)
    IL_0006: ret

}
double abs_64f(double x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Double Z0.fmath::abs(System.Double)
    IL_0006: ret

}
double abs_g64f(double x)
{
    IL_0000: ldarg.0
    IL_0001: call System.Double Z0.gfp::abs<System.Double>(System.Double)
    IL_0006: ret

}
sbyte add_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::add(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte add_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::add<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte add_8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::add(System.Byte,System.Byte)
    IL_0007: ret

}
byte add_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::add<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short add_16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::add(System.Int16,System.Int16)
    IL_0007: ret

}
short add_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::add<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort add_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::add(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort add_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::add<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int add_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::add(System.Int32,System.Int32)
    IL_0007: ret

}
int add_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::add<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint add_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::add(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint add_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::add<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long add_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::add(System.Int64,System.Int64)
    IL_0007: ret

}
long add_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::add<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong add_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::add(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong add_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::add<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float add_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::add(System.Single,System.Single)
    IL_0007: ret

}
float add_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::add<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double add_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::add(System.Double,System.Double)
    IL_0007: ret

}
double add_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::add<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte and_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::and(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte and_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::and<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte and_8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::and(System.Byte,System.Byte)
    IL_0007: ret

}
byte and_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::and<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short and_16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::and(System.Int16,System.Int16)
    IL_0007: ret

}
short and_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::and<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort and_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::and(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort and_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::and<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int and_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::and(System.Int32,System.Int32)
    IL_0007: ret

}
int and_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::and<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint and_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::and(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint and_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::and<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long and_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::and(System.Int64,System.Int64)
    IL_0007: ret

}
long and_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::and<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong and_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::and(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong and_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::and<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float and_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::and(System.Single,System.Single)
    IL_0007: ret

}
float and_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::and<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double and_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::and(System.Double,System.Double)
    IL_0007: ret

}
double and_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::and<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
bool between_8i(sbyte x, sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.SByte,System.SByte,System.SByte)
    IL_0008: ret

}
bool between_g8i(sbyte x, sbyte a, sbyte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.SByte>(System.SByte,System.SByte,System.SByte)
    IL_0008: ret

}
bool between_8u(byte x, byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Byte,System.Byte,System.Byte)
    IL_0008: ret

}
bool between_g8u(byte x, byte a, byte b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Byte>(System.Byte,System.Byte,System.Byte)
    IL_0008: ret

}
bool between_16i(short x, short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Int16,System.Int16,System.Int16)
    IL_0008: ret

}
bool between_g16i(short x, short a, short b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Int16>(System.Int16,System.Int16,System.Int16)
    IL_0008: ret

}
bool between_16u(ushort x, ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.UInt16,System.UInt16,System.UInt16)
    IL_0008: ret

}
bool between_g16u(ushort x, ushort a, ushort b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.UInt16>(System.UInt16,System.UInt16,System.UInt16)
    IL_0008: ret

}
bool between_32i(int x, int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Int32,System.Int32,System.Int32)
    IL_0008: ret

}
bool between_g32i(int x, int a, int b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Int32>(System.Int32,System.Int32,System.Int32)
    IL_0008: ret

}
bool between_32u(uint x, uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.UInt32,System.UInt32,System.UInt32)
    IL_0008: ret

}
bool between_g32u(uint x, uint a, uint b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.UInt32>(System.UInt32,System.UInt32,System.UInt32)
    IL_0008: ret

}
bool between_64i(long x, long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.Int64,System.Int64,System.Int64)
    IL_0008: ret

}
bool between_g64i(long x, long a, long b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Int64>(System.Int64,System.Int64,System.Int64)
    IL_0008: ret

}
bool between_64u(ulong x, ulong a, ulong b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.math::between(System.UInt64,System.UInt64,System.UInt64)
    IL_0008: ret

}
bool between_g64u(ulong x, ulong a, ulong b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.UInt64>(System.UInt64,System.UInt64,System.UInt64)
    IL_0008: ret

}
bool between_32f(float x, float a, float b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.fmath::between(System.Single,System.Single,System.Single)
    IL_0008: ret

}
bool between_g32f(float x, float a, float b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Single>(System.Single,System.Single,System.Single)
    IL_0008: ret

}
bool between_64f(double x, double a, double b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.fmath::between(System.Double,System.Double,System.Double)
    IL_0008: ret

}
bool between_g64f(double x, double a, double b)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Boolean Z0.gmath::between<System.Double>(System.Double,System.Double,System.Double)
    IL_0008: ret

}
sbyte div_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::div(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte div_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::div<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte div_8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::div(System.Byte,System.Byte)
    IL_0007: ret

}
byte div_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::div<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short div_16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::div(System.Int16,System.Int16)
    IL_0007: ret

}
short div_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::div<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort div_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::div(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort div_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::div<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int div_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::div(System.Int32,System.Int32)
    IL_0007: ret

}
int div_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::div<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint div_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::div(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint div_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::div<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long div_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::div(System.Int64,System.Int64)
    IL_0007: ret

}
long div_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::div<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong div_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::div(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong div_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::div<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float div_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::div(System.Single,System.Single)
    IL_0007: ret

}
float div_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::div<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double div_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::div(System.Double,System.Double)
    IL_0007: ret

}
double div_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::div<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte mod_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::mod(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte mod_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::mod<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
short mod_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::mod<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort mod_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::mod(System.UInt16,System.UInt16)
    IL_0007: ret

}
int mod_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::mod(System.Int32,System.Int32)
    IL_0007: ret

}
int mod_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::mod<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint mod_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::mod(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint mod_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::mod<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long mod_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::mod(System.Int64,System.Int64)
    IL_0007: ret

}
long mod_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::mod<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong mod_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::mod(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong mod_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::mod<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
float mod_32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.fmath::mod(System.Single,System.Single)
    IL_0007: ret

}
float mod_g32f(float lhs, float rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Single Z0.gfp::mod<System.Single>(System.Single,System.Single)
    IL_0007: ret

}
double mod_64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.fmath::mod(System.Double,System.Double)
    IL_0007: ret

}
double mod_g64f(double lhs, double rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Double Z0.gfp::mod<System.Double>(System.Double,System.Double)
    IL_0007: ret

}
sbyte or_8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.math::or(System.SByte,System.SByte)
    IL_0007: ret

}
sbyte or_g8i(sbyte lhs, sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.SByte Z0.gmath::or<System.SByte>(System.SByte,System.SByte)
    IL_0007: ret

}
byte or_8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.math::or(System.Byte,System.Byte)
    IL_0007: ret

}
byte or_g8u(byte lhs, byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.gmath::or<System.Byte>(System.Byte,System.Byte)
    IL_0007: ret

}
short or_16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.math::or(System.Int16,System.Int16)
    IL_0007: ret

}
short or_g16i(short lhs, short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int16 Z0.gmath::or<System.Int16>(System.Int16,System.Int16)
    IL_0007: ret

}
ushort or_16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.math::or(System.UInt16,System.UInt16)
    IL_0007: ret

}
ushort or_g16u(ushort lhs, ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.gmath::or<System.UInt16>(System.UInt16,System.UInt16)
    IL_0007: ret

}
int or_32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.math::or(System.Int32,System.Int32)
    IL_0007: ret

}
int or_g32i(int lhs, int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int32 Z0.gmath::or<System.Int32>(System.Int32,System.Int32)
    IL_0007: ret

}
uint or_32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.math::or(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint or_g32u(uint lhs, uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.gmath::or<System.UInt32>(System.UInt32,System.UInt32)
    IL_0007: ret

}
long or_64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.math::or(System.Int64,System.Int64)
    IL_0007: ret

}
long or_g64i(long lhs, long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Int64 Z0.gmath::or<System.Int64>(System.Int64,System.Int64)
    IL_0007: ret

}
ulong or_64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.math::or(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong or_g64u(ulong lhs, ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.gmath::or<System.UInt64>(System.UInt64,System.UInt64)
    IL_0007: ret

}
