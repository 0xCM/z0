; 2019-10-16 02:15:35:928
; function: bit f01(bit a, bit b, bit c)
; location: [7FFDDBF7D960h, 7FFDDBF7D971h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f01Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f02(bit a, bit b, bit c)
; location: [7FFDDBF7D990h, 7FFDDBF7D9A1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f02Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f03(bit a, bit b, bit c)
; location: [7FFDDBF7D9C0h, 7FFDDBF7D9D3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f03Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f04(bit a, bit b, bit c)
; location: [7FFDDBF7D9F0h, 7FFDDBF7DA01h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f04Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f05(bit a, bit b, bit c)
; location: [7FFDDBF7DA20h, 7FFDDBF7DA33h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h or ecx,r8d                    ; OR(Or_r32_rm32) [ECX,R8D]                            encoding(3 bytes) = 41 0b c8
000ch mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f05Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x41,0x0B,0xC8,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f06(bit a, bit b, bit c)
; location: [7FFDDBF7DA50h, 7FFDDBF7DA61h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f06Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f07(bit a, bit b, bit c)
; location: [7FFDDBF7DA80h, 7FFDDBF7DA91h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f07Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f08(bit a, bit b, bit c)
; location: [7FFDDBF7DAB0h, 7FFDDBF7DAC1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f08Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f09(bit a, bit b, bit c)
; location: [7FFDDBF7DAE0h, 7FFDDBF7DAF1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f09Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xD0,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0a(bit a, bit b, bit c)
; location: [7FFDDBF7DB10h, 7FFDDBF7DB23h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0aBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0b(bit a, bit b, bit c)
; location: [7FFDDBF7DB40h, 7FFDDBF7DB69h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000eh mov [rsp],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(3 bytes) = 89 0c 24
0011h lea rcx,[rsp]                 ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 0c 24
0015h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
001bh mov ecx,[rsp]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 0c 24
001eh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0020h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0023h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0025h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0bBytes => new byte[42]{0x50,0x0F,0x1F,0x40,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xC9,0x89,0x0C,0x24,0x48,0x8D,0x0C,0x24,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x0C,0x24,0x33,0xD1,0x41,0x0B,0xD0,0x23,0xC2,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0c(bit a, bit b, bit c)
; location: [7FFDDBF7DB80h, 7FFDDBF7DB93h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0cBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x89,0x44,0x24,0x18,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0d(bit a, bit b, bit c)
; location: [7FFDDBF7DBB0h, 7FFDDBF7DBD9h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000eh mov [rsp],ecx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(3 bytes) = 89 0c 24
0011h lea rcx,[rsp]                 ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 0c 24
0015h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
001bh mov ecx,[rsp]                 ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 0c 24
001eh xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0021h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
0023h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0025h add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0029h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0dBytes => new byte[42]{0x50,0x0F,0x1F,0x40,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xC9,0x89,0x0C,0x24,0x48,0x8D,0x0C,0x24,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x0C,0x24,0x41,0x33,0xC8,0x0B,0xD1,0x23,0xC2,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0e(bit a, bit b, bit c)
; location: [7FFDDBF7DBF0h, 7FFDDBF7DC01h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0eBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x0B,0xD0,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f0f(bit a, bit b, bit c)
; location: [7FFDDBF7DC20h, 7FFDDBF7DC35h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+10h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 10
0009h mov [rsp+18h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 18
000eh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0010h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0012h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0015h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f0fBytes => new byte[22]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x54,0x24,0x10,0x44,0x89,0x44,0x24,0x18,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f10(bit a, bit b, bit c)
; location: [7FFDDBF7DC50h, 7FFDDBF7DC61h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f10Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f11(bit a, bit b, bit c)
; location: [7FFDDBF7DC80h, 7FFDDBF7DC93h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f11Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f12(bit a, bit b, bit c)
; location: [7FFDDBF7DCB0h, 7FFDDBF7DCC1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000fh and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f12Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xC8,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f13(bit a, bit b, bit c)
; location: [7FFDDBF7DCE0h, 7FFDDBF7DCF1h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and ecx,r8d                   ; AND(And_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 23 c8
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f13Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x23,0xC8,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f14(bit a, bit b, bit c)
; location: [7FFDDBF7DD10h, 7FFDDBF7DD21h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
0008h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000dh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
000fh and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f14Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f15(bit a, bit b, bit c)
; location: [7FFDDBF7DD40h, 7FFDDBF7DD51h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f15Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x41,0x0B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f16(bit a, bit b, bit c)
; location: [7FFDDBF7DD70h, 7FFDDBF7DD8Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000ah not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000ch and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000fh xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0012h cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
0015h je short 0019h                ; JE(Je_rel8_64) [19h:jmp64]                           encoding(2 bytes) = 74 02
0017h jmp short 001bh               ; JMP(Jmp_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = eb 02
0019h mov edx,eax                   ; MOV(Mov_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 8b d0
001bh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f16Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x0B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x33,0xD0,0x83,0xF9,0x01,0x74,0x02,0xEB,0x02,0x8B,0xD0,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f17(bit a, bit b, bit c)
; location: [7FFDDBF7DDA0h, 7FFDDBF7DDBDh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h or eax,r8d                    ; OR(Or_r32_rm32) [EAX,R8D]                            encoding(3 bytes) = 41 0b c0
000ah and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000dh cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
0010h je short 0014h                ; JE(Je_rel8_64) [14h:jmp64]                           encoding(2 bytes) = 74 02
0012h jmp short 0016h               ; JMP(Jmp_rel8_64) [16h:jmp64]                         encoding(2 bytes) = eb 02
0014h mov edx,eax                   ; MOV(Mov_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 8b d0
0016h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0018h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
001ah and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f17Bytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x0B,0xC0,0x41,0x23,0xD0,0x83,0xF9,0x01,0x74,0x02,0xEB,0x02,0x8B,0xD0,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f18(bit a, bit b, bit c)
; location: [7FFDDBF7DDD0h, 7FFDDBF7DDDEh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f18Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xD1,0x41,0x33,0xC8,0x8B,0xC2,0x23,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f19(bit a, bit b, bit c)
; location: [7FFDDBF7DDF0h, 7FFDDBF7DE01h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h xor eax,r8d                   ; XOR(Xor_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 33 c0
000ah and edx,r8d                   ; AND(And_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 23 d0
000dh and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000fh xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f19Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0x41,0x33,0xC0,0x41,0x23,0xD0,0x23,0xD1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1a(bit a, bit b, bit c)
; location: [7FFDDBF7DE20h, 7FFDDBF7DE33h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
000ah and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ch mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000eh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1aBytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x23,0xD1,0x41,0x33,0xC8,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1b(bit a, bit b, bit c)
; location: [7FFDDBF7DE50h, 7FFDDBF7DE6Dh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
000eh and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0011h cmp r8d,1                     ; CMP(Cmp_rm32_imm8) [R8D,1h:imm32]                    encoding(4 bytes) = 41 83 f8 01
0015h je short 0019h                ; JE(Je_rel8_64) [19h:jmp64]                           encoding(2 bytes) = 74 02
0017h jmp short 001bh               ; JMP(Jmp_rel8_64) [1Bh:jmp64]                         encoding(2 bytes) = eb 02
0019h mov edx,eax                   ; MOV(Mov_r32_rm32) [EDX,EAX]                          encoding(2 bytes) = 8b d0
001bh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
001dh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1bBytes => new byte[30]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x83,0xF8,0x01,0x74,0x02,0xEB,0x02,0x8B,0xD0,0x8B,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1c(bit a, bit b, bit c)
; location: [7FFDDBF7DE80h, 7FFDDBF7DE94h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h and r8d,ecx                   ; AND(And_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 23 c1
0008h mov eax,r8d                   ; MOV(Mov_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 8b c0
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0010h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0012h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
0014h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1cBytes => new byte[21]{0x0F,0x1F,0x44,0x00,0x00,0x44,0x23,0xC1,0x41,0x8B,0xC0,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1d(bit a, bit b, bit c)
; location: [7FFDDBF7DEB0h, 7FFDDBF7DECFh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch mov ecx,r8d                   ; MOV(Mov_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 8b c8
000fh not ecx                       ; NOT(Not_rm32) [ECX]                                  encoding(2 bytes) = f7 d1
0011h and ecx,1                     ; AND(And_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 e1 01
0014h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
0017h je short 001bh                ; JE(Je_rel8_64) [1Bh:jmp64]                           encoding(2 bytes) = 74 02
0019h jmp short 001dh               ; JMP(Jmp_rel8_64) [1Dh:jmp64]                         encoding(2 bytes) = eb 02
001bh mov ecx,eax                   ; MOV(Mov_r32_rm32) [ECX,EAX]                          encoding(2 bytes) = 8b c8
001dh mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
001fh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1dBytes => new byte[32]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC1,0xF7,0xD0,0x83,0xE0,0x01,0x41,0x8B,0xC8,0xF7,0xD1,0x83,0xE1,0x01,0x83,0xFA,0x01,0x74,0x02,0xEB,0x02,0x8B,0xC8,0x8B,0xC1,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1e(bit a, bit b, bit c)
; location: [7FFDDBF7DEE0h, 7FFDDBF7DEECh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ah xor eax,edx                   ; XOR(Xor_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 33 c2
000ch ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1eBytes => new byte[13]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x8B,0xC1,0x33,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f1f(bit a, bit b, bit c)
; location: [7FFDDBF7DF00h, 7FFDDBF7DF11h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0008h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f1fBytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x0B,0xD0,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f20(bit a, bit b, bit c)
; location: [7FFDDBF7DF30h, 7FFDDBF7DF41h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,ecx                   ; AND(And_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 23 c1
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f20Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x8B,0xC2,0xF7,0xD0,0x23,0xC1,0x83,0xE0,0x01,0x41,0x23,0xC0,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f21(bit a, bit b, bit c)
; location: [7FFDDBF7DF60h, 7FFDDBF7DF71h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,r8d                   ; XOR(Xor_r32_rm32) [ECX,R8D]                          encoding(3 bytes) = 41 33 c8
0008h or edx,ecx                    ; OR(Or_r32_rm32) [EDX,ECX]                            encoding(2 bytes) = 0b d1
000ah mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000ch not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000eh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0011h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f21Bytes => new byte[18]{0x0F,0x1F,0x44,0x00,0x00,0x41,0x33,0xC8,0x0B,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f22(bit a, bit b, bit c)
; location: [7FFDDBF7DF90h, 7FFDDBF7DFA3h]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h mov [rsp+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(4 bytes) = 89 4c 24 08
0009h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
000bh not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000dh and eax,r8d                   ; AND(And_r32_rm32) [EAX,R8D]                          encoding(3 bytes) = 41 23 c0
0010h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
0013h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f22Bytes => new byte[20]{0x0F,0x1F,0x44,0x00,0x00,0x89,0x4C,0x24,0x08,0x8B,0xC2,0xF7,0xD0,0x41,0x23,0xC0,0x83,0xE0,0x01,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f23(bit a, bit b, bit c)
; location: [7FFDDBF7DFC0h, 7FFDDBF7DFEEh]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0007h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
0009h and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000ch xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
000eh mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0011h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0015h mov dword ptr [rdx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 02 01 00 00 00
001bh mov edx,[rsp]                 ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 14 24
001eh xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
0020h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0022h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0025h or edx,r8d                    ; OR(Or_r32_rm32) [EDX,R8D]                            encoding(3 bytes) = 41 0b d0
0028h and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
002ah add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
002eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f23Bytes => new byte[47]{0x50,0x0F,0x1F,0x40,0x00,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0xC7,0x02,0x01,0x00,0x00,0x00,0x8B,0x14,0x24,0x33,0xD1,0xF7,0xD2,0x83,0xE2,0x01,0x41,0x0B,0xD0,0x23,0xC2,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f24(bit a, bit b, bit c)
; location: [7FFDDBF7E010h, 7FFDDBF7E01Eh]
0000h nop dword ptr [rax+rax]       ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(5 bytes) = 0f 1f 44 00 00
0005h xor ecx,edx                   ; XOR(Xor_r32_rm32) [ECX,EDX]                          encoding(2 bytes) = 33 ca
0007h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
000ah mov eax,ecx                   ; MOV(Mov_r32_rm32) [EAX,ECX]                          encoding(2 bytes) = 8b c1
000ch and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
000eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f24Bytes => new byte[15]{0x0F,0x1F,0x44,0x00,0x00,0x33,0xCA,0x41,0x33,0xD0,0x8B,0xC1,0x23,0xC2,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: bit f25(bit a, bit b, bit c)
; location: [7FFDDBF7E030h, 7FFDDBF7E060h]
0000h push rax                      ; PUSH(Push_r64) [RAX]                                 encoding(1 byte ) = 50
0001h nop dword ptr [rax]           ; NOP(Nop_rm32) [mem(32u,RAX:br,DS:sr)]                encoding(4 bytes) = 0f 1f 40 00
0005h and edx,ecx                   ; AND(And_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 23 d1
0007h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0009h not eax                       ; NOT(Not_rm32) [EAX]                                  encoding(2 bytes) = f7 d0
000bh and eax,1                     ; AND(And_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 e0 01
000eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0010h mov [rsp],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(3 bytes) = 89 14 24
0013h lea rdx,[rsp]                 ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(4 bytes) = 48 8d 14 24
0017h mov dword ptr [rdx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 02 01 00 00 00
001dh mov edx,[rsp]                 ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(3 bytes) = 8b 14 24
0020h xor edx,r8d                   ; XOR(Xor_r32_rm32) [EDX,R8D]                          encoding(3 bytes) = 41 33 d0
0023h not edx                       ; NOT(Not_rm32) [EDX]                                  encoding(2 bytes) = f7 d2
0025h and edx,1                     ; AND(And_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 e2 01
0028h xor edx,ecx                   ; XOR(Xor_r32_rm32) [EDX,ECX]                          encoding(2 bytes) = 33 d1
002ah and eax,edx                   ; AND(And_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 23 c2
002ch add rsp,8                     ; ADD(Add_rm64_imm8) [RSP,8h:imm64]                    encoding(4 bytes) = 48 83 c4 08
0030h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> f25Bytes => new byte[49]{0x50,0x0F,0x1F,0x40,0x00,0x23,0xD1,0x8B,0xC2,0xF7,0xD0,0x83,0xE0,0x01,0x33,0xD2,0x89,0x14,0x24,0x48,0x8D,0x14,0x24,0xC7,0x02,0x01,0x00,0x00,0x00,0x8B,0x14,0x24,0x41,0x33,0xD0,0xF7,0xD2,0x83,0xE2,0x01,0x33,0xD1,0x23,0xC2,0x48,0x83,0xC4,0x08,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: UnaryOp<bit> unaryop(UnaryLogic:uint id)
; location: [7FFDDBF7E080h, 7FFDDBF7E177h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0007h cmp ecx,1                     ; CMP(Cmp_rm32_imm8) [ECX,1h:imm32]                    encoding(3 bytes) = 83 f9 01
000ah je short 005ah                ; JE(Je_rel8_64) [5Ah:jmp64]                           encoding(2 bytes) = 74 4e
000ch cmp ecx,2                     ; CMP(Cmp_rm32_imm8) [ECX,2h:imm32]                    encoding(3 bytes) = 83 f9 02
000fh jne near ptr 009fh            ; JNE(Jne_rel32_64) [9Fh:jmp64]                        encoding(6 bytes) = 0f 85 8a 00 00 00
0015h mov rcx,7FFDDC022510h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022510h:imm64]         encoding(10 bytes) = 48 b9 10 25 02 dc fd 7f 00 00
001fh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236430h:jmp64]                encoding(5 bytes) = e8 0c 64 23 5f
0024h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0027h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
002bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
002eh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235570h:jmp64]                encoding(5 bytes) = e8 3d 55 23 5f
0033h mov rax,7FFDDB56DDB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb56ddb0h:imm64]         encoding(10 bytes) = 48 b8 b0 dd 56 db fd 7f 00 00
003dh mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
0041h mov rax,7FFDDBD769A8h         ; MOV(Mov_r64_imm64) [RAX,7ffddbd769a8h:imm64]         encoding(10 bytes) = 48 b8 a8 69 d7 db fd 7f 00 00
004bh mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
004fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0052h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
0056h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
0057h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0058h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0059h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
005ah mov rcx,7FFDDC022510h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022510h:imm64]         encoding(10 bytes) = 48 b9 10 25 02 dc fd 7f 00 00
0064h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236430h:jmp64]                encoding(5 bytes) = e8 c7 63 23 5f
0069h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
006ch lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0070h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0073h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235570h:jmp64]                encoding(5 bytes) = e8 f8 54 23 5f
0078h mov rax,7FFDDB56DDB0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb56ddb0h:imm64]         encoding(10 bytes) = 48 b8 b0 dd 56 db fd 7f 00 00
0082h mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
0086h mov rax,7FFDDBD769C8h         ; MOV(Mov_r64_imm64) [RAX,7ffddbd769c8h:imm64]         encoding(10 bytes) = 48 b8 c8 69 d7 db fd 7f 00 00
0090h mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
0094h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0097h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
009bh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
009ch pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
009dh pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
009eh ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
009fh mov esi,0D4h                  ; MOV(Mov_r32_imm32) [ESI,d4h:imm32]                   encoding(5 bytes) = be d4 00 00 00
00a4h mov edi,1                     ; MOV(Mov_r32_imm32) [EDI,1h:imm32]                    encoding(5 bytes) = bf 01 00 00 00
00a9h mov ecx,219h                  ; MOV(Mov_r32_imm32) [ECX,219h:imm32]                  encoding(5 bytes) = b9 19 02 00 00
00aeh mov rdx,7FFDDB7FC220h         ; MOV(Mov_r64_imm64) [RDX,7ffddb7fc220h:imm64]         encoding(10 bytes) = 48 ba 20 c2 7f db fd 7f 00 00
00b8h call 7FFE3B2DF6E0h            ; CALL(Call_rel32_64) [5F361660h:jmp64]                encoding(5 bytes) = e8 a3 15 36 5f
00bdh mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
00c0h mov ecx,219h                  ; MOV(Mov_r32_imm32) [ECX,219h:imm32]                  encoding(5 bytes) = b9 19 02 00 00
00c5h mov rdx,7FFDDB7FC220h         ; MOV(Mov_r64_imm64) [RDX,7ffddb7fc220h:imm64]         encoding(10 bytes) = 48 ba 20 c2 7f db fd 7f 00 00
00cfh call 7FFE3B2DF6E0h            ; CALL(Call_rel32_64) [5F361660h:jmp64]                encoding(5 bytes) = e8 8c 15 36 5f
00d4h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
00d7h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
00dch mov [rcx],dil                 ; MOV(Mov_rm8_r8) [mem(8u,RCX:br,DS:sr),DIL]           encoding(3 bytes) = 40 88 39
00dfh mov [rcx+4],esi               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),ESI]        encoding(3 bytes) = 89 71 04
00e2h mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
00e5h mov r8,[rsp+28h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 44 24 28
00eah call 7FFDDBF7C6B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE630h:jmp64]        encoding(5 bytes) = e8 41 e5 ff ff
00efh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
00f2h call 7FFE3B16A4F0h            ; CALL(Call_rel32_64) [5F1EC470h:jmp64]                encoding(5 bytes) = e8 79 c3 1e 5f
00f7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> unaryopBytes => new byte[248]{0x57,0x56,0x53,0x48,0x83,0xEC,0x30,0x83,0xF9,0x01,0x74,0x4E,0x83,0xF9,0x02,0x0F,0x85,0x8A,0x00,0x00,0x00,0x48,0xB9,0x10,0x25,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x0C,0x64,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x3D,0x55,0x23,0x5F,0x48,0xB8,0xB0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0xA8,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3,0x48,0xB9,0x10,0x25,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xC7,0x63,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xF8,0x54,0x23,0x5F,0x48,0xB8,0xB0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0xC8,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3,0xBE,0xD4,0x00,0x00,0x00,0xBF,0x01,0x00,0x00,0x00,0xB9,0x19,0x02,0x00,0x00,0x48,0xBA,0x20,0xC2,0x7F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0xA3,0x15,0x36,0x5F,0x48,0x8B,0xD8,0xB9,0x19,0x02,0x00,0x00,0x48,0xBA,0x20,0xC2,0x7F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x8C,0x15,0x36,0x5F,0x48,0x8B,0xD0,0x48,0x8D,0x4C,0x24,0x28,0x40,0x88,0x39,0x89,0x71,0x04,0x48,0x8B,0xCB,0x4C,0x8B,0x44,0x24,0x28,0xE8,0x41,0xE5,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x79,0xC3,0x1E,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BinaryOp<bit> binop(BinaryLogic:uint id)
; location: [7FFDDBF7E190h, 7FFDDBF7E3E3h]
0000h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0001h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0002h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0003h sub rsp,30h                   ; SUB(Sub_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 ec 30
0007h lea esi,[rcx-1]               ; LEA(Lea_r32_m) [ESI,mem(Unknown,RCX:br,DS:sr)]       encoding(3 bytes) = 8d 71 ff
000ah cmp esi,8                     ; CMP(Cmp_rm32_imm8) [ESI,8h:imm32]                    encoding(3 bytes) = 83 fe 08
000dh ja short 0027h                ; JA(Ja_rel8_64) [27h:jmp64]                           encoding(2 bytes) = 77 18
000fh mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0011h lea rax,[7FFDDBF7E3E8h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 40 02 00 00
0018h mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001bh lea rdx,[7FFDDBF7E197h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 e5 ff ff ff
0022h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0025h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
0027h cmp ecx,0Eh                   ; CMP(Cmp_rm32_imm8) [ECX,eh:imm32]                    encoding(3 bytes) = 83 f9 0e
002ah jne near ptr 01fbh            ; JNE(Jne_rel32_64) [1FBh:jmp64]                       encoding(6 bytes) = 0f 85 cb 01 00 00
0030h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
003ah call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 e1 62 23 5f
003fh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0042h lea rcx,[rdi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RDI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4f 08
0046h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0049h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 12 54 23 5f
004eh mov rax,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RAX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b8 e0 dd 56 db fd 7f 00 00
0058h mov [rdi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 47 18
005ch mov rax,7FFDDBD769B8h         ; MOV(Mov_r64_imm64) [RAX,7ffddbd769b8h:imm64]         encoding(10 bytes) = 48 b8 b8 69 d7 db fd 7f 00 00
0066h mov [rdi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RDI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 47 20
006ah mov rax,rdi                   ; MOV(Mov_r64_rm64) [RAX,RDI]                          encoding(3 bytes) = 48 8b c7
006dh jmp near ptr 01f3h            ; JMP(Jmp_rel32_64) [1F3h:jmp64]                       encoding(5 bytes) = e9 81 01 00 00
0072h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
007ch call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 9f 62 23 5f
0081h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0084h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0088h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
008bh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 d0 53 23 5f
0090h mov rcx,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b9 e0 dd 56 db fd 7f 00 00
009ah mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
009eh mov rcx,7FFDDBD769B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbd769b0h:imm64]         encoding(10 bytes) = 48 b9 b0 69 d7 db fd 7f 00 00
00a8h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00ach mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00afh jmp near ptr 01f3h            ; JMP(Jmp_rel32_64) [1F3h:jmp64]                       encoding(5 bytes) = e9 3f 01 00 00
00b4h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
00beh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 5d 62 23 5f
00c3h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c6h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00cah mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00cdh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 8e 53 23 5f
00d2h mov rcx,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b9 e0 dd 56 db fd 7f 00 00
00dch mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
00e0h mov rcx,7FFDDBD769D0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbd769d0h:imm64]         encoding(10 bytes) = 48 b9 d0 69 d7 db fd 7f 00 00
00eah mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00eeh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00f1h jmp near ptr 01f3h            ; JMP(Jmp_rel32_64) [1F3h:jmp64]                       encoding(5 bytes) = e9 fd 00 00 00
00f6h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
0100h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 1b 62 23 5f
0105h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0108h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
010ch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
010fh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 4c 53 23 5f
0114h mov rcx,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b9 e0 dd 56 db fd 7f 00 00
011eh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0122h mov rcx,7FFDDBD769D8h         ; MOV(Mov_r64_imm64) [RCX,7ffddbd769d8h:imm64]         encoding(10 bytes) = 48 b9 d8 69 d7 db fd 7f 00 00
012ch mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0130h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0133h jmp near ptr 01f3h            ; JMP(Jmp_rel32_64) [1F3h:jmp64]                       encoding(5 bytes) = e9 bb 00 00 00
0138h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
0142h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 d9 61 23 5f
0147h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
014ah lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
014eh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0151h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 0a 53 23 5f
0156h mov rcx,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b9 e0 dd 56 db fd 7f 00 00
0160h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0164h mov rcx,7FFDDBD769C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbd769c0h:imm64]         encoding(10 bytes) = 48 b9 c0 69 d7 db fd 7f 00 00
016eh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0172h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0175h jmp short 01f3h               ; JMP(Jmp_rel8_64) [1F3h:jmp64]                        encoding(2 bytes) = eb 7c
0177h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
0181h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 9a 61 23 5f
0186h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0189h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
018dh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0190h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 cb 52 23 5f
0195h mov rcx,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b9 e0 dd 56 db fd 7f 00 00
019fh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01a3h mov rcx,7FFDDBD769E0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbd769e0h:imm64]         encoding(10 bytes) = 48 b9 e0 69 d7 db fd 7f 00 00
01adh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01b1h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01b4h jmp short 01f3h               ; JMP(Jmp_rel8_64) [1F3h:jmp64]                        encoding(2 bytes) = eb 3d
01b6h mov rcx,7FFDDC022A20h         ; MOV(Mov_r64_imm64) [RCX,7ffddc022a20h:imm64]         encoding(10 bytes) = 48 b9 20 2a 02 dc fd 7f 00 00
01c0h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236320h:jmp64]                encoding(5 bytes) = e8 5b 61 23 5f
01c5h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
01c8h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
01cch mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01cfh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235460h:jmp64]                encoding(5 bytes) = e8 8c 52 23 5f
01d4h mov rcx,7FFDDB56DDE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56dde0h:imm64]         encoding(10 bytes) = 48 b9 e0 dd 56 db fd 7f 00 00
01deh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01e2h mov rcx,7FFDDBD769E8h         ; MOV(Mov_r64_imm64) [RCX,7ffddbd769e8h:imm64]         encoding(10 bytes) = 48 b9 e8 69 d7 db fd 7f 00 00
01ech mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01f0h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01f3h add rsp,30h                   ; ADD(Add_rm64_imm8) [RSP,30h:imm64]                   encoding(4 bytes) = 48 83 c4 30
01f7h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
01f8h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
01f9h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
01fah ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
01fbh mov esi,0E4h                  ; MOV(Mov_r32_imm32) [ESI,e4h:imm32]                   encoding(5 bytes) = be e4 00 00 00
0200h mov edi,1                     ; MOV(Mov_r32_imm32) [EDI,1h:imm32]                    encoding(5 bytes) = bf 01 00 00 00
0205h mov ecx,219h                  ; MOV(Mov_r32_imm32) [ECX,219h:imm32]                  encoding(5 bytes) = b9 19 02 00 00
020ah mov rdx,7FFDDB7FC220h         ; MOV(Mov_r64_imm64) [RDX,7ffddb7fc220h:imm64]         encoding(10 bytes) = 48 ba 20 c2 7f db fd 7f 00 00
0214h call 7FFE3B2DF6E0h            ; CALL(Call_rel32_64) [5F361550h:jmp64]                encoding(5 bytes) = e8 37 13 36 5f
0219h mov rbx,rax                   ; MOV(Mov_r64_rm64) [RBX,RAX]                          encoding(3 bytes) = 48 8b d8
021ch mov ecx,219h                  ; MOV(Mov_r32_imm32) [ECX,219h:imm32]                  encoding(5 bytes) = b9 19 02 00 00
0221h mov rdx,7FFDDB7FC220h         ; MOV(Mov_r64_imm64) [RDX,7ffddb7fc220h:imm64]         encoding(10 bytes) = 48 ba 20 c2 7f db fd 7f 00 00
022bh call 7FFE3B2DF6E0h            ; CALL(Call_rel32_64) [5F361550h:jmp64]                encoding(5 bytes) = e8 20 13 36 5f
0230h mov rdx,rax                   ; MOV(Mov_r64_rm64) [RDX,RAX]                          encoding(3 bytes) = 48 8b d0
0233h lea rcx,[rsp+28h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 28
0238h mov [rcx],dil                 ; MOV(Mov_rm8_r8) [mem(8u,RCX:br,DS:sr),DIL]           encoding(3 bytes) = 40 88 39
023bh mov [rcx+4],esi               ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),ESI]        encoding(3 bytes) = 89 71 04
023eh mov rcx,rbx                   ; MOV(Mov_r64_rm64) [RCX,RBX]                          encoding(3 bytes) = 48 8b cb
0241h mov r8,[rsp+28h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 44 24 28
0246h call 7FFDDBF7C6B0h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE520h:jmp64]        encoding(5 bytes) = e8 d5 e2 ff ff
024bh mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
024eh call 7FFE3B16A4F0h            ; CALL(Call_rel32_64) [5F1EC360h:jmp64]                encoding(5 bytes) = e8 0d c1 1e 5f
0253h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> binopBytes => new byte[596]{0x57,0x56,0x53,0x48,0x83,0xEC,0x30,0x8D,0x71,0xFF,0x83,0xFE,0x08,0x77,0x18,0x8B,0xCE,0x48,0x8D,0x05,0x40,0x02,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xE5,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x83,0xF9,0x0E,0x0F,0x85,0xCB,0x01,0x00,0x00,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xE1,0x62,0x23,0x5F,0x48,0x8B,0xF8,0x48,0x8D,0x4F,0x08,0x48,0x8B,0xD7,0xE8,0x12,0x54,0x23,0x5F,0x48,0xB8,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x47,0x18,0x48,0xB8,0xB8,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x47,0x20,0x48,0x8B,0xC7,0xE9,0x81,0x01,0x00,0x00,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x9F,0x62,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD0,0x53,0x23,0x5F,0x48,0xB9,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xB0,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x3F,0x01,0x00,0x00,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x5D,0x62,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x8E,0x53,0x23,0x5F,0x48,0xB9,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xD0,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xFD,0x00,0x00,0x00,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x1B,0x62,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x4C,0x53,0x23,0x5F,0x48,0xB9,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xD8,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xBB,0x00,0x00,0x00,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xD9,0x61,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x0A,0x53,0x23,0x5F,0x48,0xB9,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xC0,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x7C,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x9A,0x61,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xCB,0x52,0x23,0x5F,0x48,0xB9,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE0,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x3D,0x48,0xB9,0x20,0x2A,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x5B,0x61,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x8C,0x52,0x23,0x5F,0x48,0xB9,0xE0,0xDD,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE8,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x30,0x5B,0x5E,0x5F,0xC3,0xBE,0xE4,0x00,0x00,0x00,0xBF,0x01,0x00,0x00,0x00,0xB9,0x19,0x02,0x00,0x00,0x48,0xBA,0x20,0xC2,0x7F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x37,0x13,0x36,0x5F,0x48,0x8B,0xD8,0xB9,0x19,0x02,0x00,0x00,0x48,0xBA,0x20,0xC2,0x7F,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x20,0x13,0x36,0x5F,0x48,0x8B,0xD0,0x48,0x8D,0x4C,0x24,0x28,0x40,0x88,0x39,0x89,0x71,0x04,0x48,0x8B,0xCB,0x4C,0x8B,0x44,0x24,0x28,0xE8,0xD5,0xE2,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0x0D,0xC1,0x1E,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: IEnumerable<TernaryLogic:byte> get_ternops()
; location: [7FFDDBF7E430h, 7FFDDBF7E466h]
0000h sub rsp,28h                   ; SUB(Sub_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 ec 28
0004h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0005h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0008h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
000ah lea rdx,[rsp+20h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 20
000fh mov [rdx],r8b                 ; MOV(Mov_rm8_r8) [mem(8u,RDX:br,DS:sr),R8L]           encoding(3 bytes) = 44 88 02
0012h mov [rdx+4],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),ECX]        encoding(3 bytes) = 89 4a 04
0015h mov r8,[rsp+20h]              ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(5 bytes) = 4c 8b 44 24 20
001ah mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
001fh mov edx,0F1Bh                 ; MOV(Mov_r32_imm32) [EDX,f1bh:imm32]                  encoding(5 bytes) = ba 1b 0f 00 00
0024h call 7FFDDBF7C720h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE2F0h:jmp64]        encoding(5 bytes) = e8 c7 e2 ff ff
0029h mov rcx,rax                   ; MOV(Mov_r64_rm64) [RCX,RAX]                          encoding(3 bytes) = 48 8b c8
002ch call 7FFDDBF7C730h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFE300h:jmp64]        encoding(5 bytes) = e8 cf e2 ff ff
0031h nop                           ; NOP(Nopd)                                            encoding(1 byte ) = 90
0032h add rsp,28h                   ; ADD(Add_rm64_imm8) [RSP,28h:imm64]                   encoding(4 bytes) = 48 83 c4 28
0036h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> get_ternopsBytes => new byte[55]{0x48,0x83,0xEC,0x28,0x90,0x45,0x33,0xC0,0x33,0xC9,0x48,0x8D,0x54,0x24,0x20,0x44,0x88,0x02,0x89,0x4A,0x04,0x4C,0x8B,0x44,0x24,0x20,0xB9,0x01,0x00,0x00,0x00,0xBA,0x1B,0x0F,0x00,0x00,0xE8,0xC7,0xE2,0xFF,0xFF,0x48,0x8B,0xC8,0xE8,0xCF,0xE2,0xFF,0xFF,0x90,0x48,0x83,0xC4,0x28,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: TernaryOp<bit> ternop(TernaryLogic:byte id)
; location: [7FFDDBF7E480h, 7FFDDBF7EE71h]
0000h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0001h sub rsp,20h                   ; SUB(Sub_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 ec 20
0005h movzx eax,cl                  ; MOVZX(Movzx_r32_rm8) [EAX,CL]                        encoding(3 bytes) = 0f b6 c1
0008h dec eax                       ; DEC(Dec_rm32) [EAX]                                  encoding(2 bytes) = ff c8
000ah cmp eax,24h                   ; CMP(Cmp_rm32_imm8) [EAX,24h:imm32]                   encoding(3 bytes) = 83 f8 24
000dh ja near ptr 09afh             ; JA(Ja_rel32_64) [9AFh:jmp64]                         encoding(6 bytes) = 0f 87 9c 09 00 00
0013h mov ecx,eax                   ; MOV(Mov_r32_rm32) [ECX,EAX]                          encoding(2 bytes) = 8b c8
0015h lea rax,[7FFDDBF7EE78h]       ; LEA(Lea_r64_m) [RAX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 05 dc 09 00 00
001ch mov eax,[rax+rcx*4]           ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 04 88
001fh lea rdx,[7FFDDBF7E485h]       ; LEA(Lea_r64_m) [RDX,mem(Unknown,RIP:br,DS:sr)]       encoding(7 bytes) = 48 8d 15 df ff ff ff
0026h add rax,rdx                   ; ADD(Add_r64_rm64) [RAX,RDX]                          encoding(3 bytes) = 48 03 c2
0029h jmp rax                       ; JMP(Jmp_rm64) [RAX]                                  encoding(2 bytes) = ff e0
002bh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0035h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 f6 5f 23 5f
003ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
003dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0041h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0044h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 27 51 23 5f
0049h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0053h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0057h mov rcx,7FFDDBF7D960h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7d960h:imm64]         encoding(10 bytes) = 48 b9 60 d9 f7 db fd 7f 00 00
0061h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0065h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0068h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 7f 09 00 00
006dh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0077h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 b4 5f 23 5f
007ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
007fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0083h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0086h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 e5 50 23 5f
008bh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0095h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0099h mov rcx,7FFDDBF7D990h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7d990h:imm64]         encoding(10 bytes) = 48 b9 90 d9 f7 db fd 7f 00 00
00a3h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00a7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00aah jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 3d 09 00 00
00afh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
00b9h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 72 5f 23 5f
00beh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00c1h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
00c5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
00c8h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 a3 50 23 5f
00cdh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
00d7h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
00dbh mov rcx,7FFDDBF7D9C0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7d9c0h:imm64]         encoding(10 bytes) = 48 b9 c0 d9 f7 db fd 7f 00 00
00e5h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
00e9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00ech jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 fb 08 00 00
00f1h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
00fbh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 30 5f 23 5f
0100h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0103h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0107h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
010ah call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 61 50 23 5f
010fh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0119h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
011dh mov rcx,7FFDDBF7D9F0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7d9f0h:imm64]         encoding(10 bytes) = 48 b9 f0 d9 f7 db fd 7f 00 00
0127h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
012bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
012eh jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 b9 08 00 00
0133h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
013dh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 ee 5e 23 5f
0142h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0145h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0149h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
014ch call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 1f 50 23 5f
0151h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
015bh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
015fh mov rcx,7FFDDBF7DA20h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7da20h:imm64]         encoding(10 bytes) = 48 b9 20 da f7 db fd 7f 00 00
0169h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
016dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0170h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 77 08 00 00
0175h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
017fh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 ac 5e 23 5f
0184h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0187h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
018bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
018eh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 dd 4f 23 5f
0193h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
019dh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01a1h mov rcx,7FFDDBF7DA50h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7da50h:imm64]         encoding(10 bytes) = 48 b9 50 da f7 db fd 7f 00 00
01abh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01afh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01b2h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 35 08 00 00
01b7h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
01c1h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 6a 5e 23 5f
01c6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
01c9h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
01cdh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
01d0h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 9b 4f 23 5f
01d5h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
01dfh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
01e3h mov rcx,7FFDDBF7DA80h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7da80h:imm64]         encoding(10 bytes) = 48 b9 80 da f7 db fd 7f 00 00
01edh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
01f1h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
01f4h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 f3 07 00 00
01f9h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0203h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 28 5e 23 5f
0208h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
020bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
020fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0212h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 59 4f 23 5f
0217h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0221h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0225h mov rcx,7FFDDBF7DAB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dab0h:imm64]         encoding(10 bytes) = 48 b9 b0 da f7 db fd 7f 00 00
022fh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0233h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0236h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 b1 07 00 00
023bh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0245h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 e6 5d 23 5f
024ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
024dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0251h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0254h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 17 4f 23 5f
0259h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0263h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0267h mov rcx,7FFDDBF7DAE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dae0h:imm64]         encoding(10 bytes) = 48 b9 e0 da f7 db fd 7f 00 00
0271h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0275h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0278h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 6f 07 00 00
027dh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0287h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 a4 5d 23 5f
028ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
028fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0293h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0296h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 d5 4e 23 5f
029bh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
02a5h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
02a9h mov rcx,7FFDDBF7DB10h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7db10h:imm64]         encoding(10 bytes) = 48 b9 10 db f7 db fd 7f 00 00
02b3h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
02b7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
02bah jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 2d 07 00 00
02bfh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
02c9h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 62 5d 23 5f
02ceh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
02d1h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
02d5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
02d8h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 93 4e 23 5f
02ddh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
02e7h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
02ebh mov rcx,7FFDDBF7DB40h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7db40h:imm64]         encoding(10 bytes) = 48 b9 40 db f7 db fd 7f 00 00
02f5h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
02f9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
02fch jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 eb 06 00 00
0301h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
030bh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 20 5d 23 5f
0310h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0313h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0317h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
031ah call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 51 4e 23 5f
031fh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0329h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
032dh mov rcx,7FFDDBF7DB80h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7db80h:imm64]         encoding(10 bytes) = 48 b9 80 db f7 db fd 7f 00 00
0337h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
033bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
033eh jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 a9 06 00 00
0343h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
034dh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 de 5c 23 5f
0352h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0355h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0359h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
035ch call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 0f 4e 23 5f
0361h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
036bh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
036fh mov rcx,7FFDDBF7DBB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dbb0h:imm64]         encoding(10 bytes) = 48 b9 b0 db f7 db fd 7f 00 00
0379h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
037dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0380h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 67 06 00 00
0385h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
038fh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 9c 5c 23 5f
0394h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0397h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
039bh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
039eh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 cd 4d 23 5f
03a3h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
03adh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
03b1h mov rcx,7FFDDBF7DBF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dbf0h:imm64]         encoding(10 bytes) = 48 b9 f0 db f7 db fd 7f 00 00
03bbh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
03bfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
03c2h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 25 06 00 00
03c7h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
03d1h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 5a 5c 23 5f
03d6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
03d9h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
03ddh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
03e0h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 8b 4d 23 5f
03e5h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
03efh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
03f3h mov rcx,7FFDDBF7DC20h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dc20h:imm64]         encoding(10 bytes) = 48 b9 20 dc f7 db fd 7f 00 00
03fdh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0401h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0404h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 e3 05 00 00
0409h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0413h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 18 5c 23 5f
0418h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
041bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
041fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0422h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 49 4d 23 5f
0427h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0431h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0435h mov rcx,7FFDDBF7DC50h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dc50h:imm64]         encoding(10 bytes) = 48 b9 50 dc f7 db fd 7f 00 00
043fh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0443h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0446h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 a1 05 00 00
044bh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0455h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 d6 5b 23 5f
045ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
045dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0461h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0464h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 07 4d 23 5f
0469h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0473h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0477h mov rcx,7FFDDBF7DC80h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dc80h:imm64]         encoding(10 bytes) = 48 b9 80 dc f7 db fd 7f 00 00
0481h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0485h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0488h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 5f 05 00 00
048dh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0497h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 94 5b 23 5f
049ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
049fh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
04a3h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
04a6h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 c5 4c 23 5f
04abh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
04b5h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
04b9h mov rcx,7FFDDBF7DCB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dcb0h:imm64]         encoding(10 bytes) = 48 b9 b0 dc f7 db fd 7f 00 00
04c3h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
04c7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
04cah jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 1d 05 00 00
04cfh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
04d9h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 52 5b 23 5f
04deh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
04e1h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
04e5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
04e8h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 83 4c 23 5f
04edh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
04f7h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
04fbh mov rcx,7FFDDBF7DCE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dce0h:imm64]         encoding(10 bytes) = 48 b9 e0 dc f7 db fd 7f 00 00
0505h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0509h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
050ch jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 db 04 00 00
0511h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
051bh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 10 5b 23 5f
0520h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0523h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0527h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
052ah call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 41 4c 23 5f
052fh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0539h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
053dh mov rcx,7FFDDBF7DD10h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dd10h:imm64]         encoding(10 bytes) = 48 b9 10 dd f7 db fd 7f 00 00
0547h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
054bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
054eh jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 99 04 00 00
0553h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
055dh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 ce 5a 23 5f
0562h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0565h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0569h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
056ch call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 ff 4b 23 5f
0571h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
057bh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
057fh mov rcx,7FFDDBF7DD40h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dd40h:imm64]         encoding(10 bytes) = 48 b9 40 dd f7 db fd 7f 00 00
0589h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
058dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0590h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 57 04 00 00
0595h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
059fh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 8c 5a 23 5f
05a4h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
05a7h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
05abh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
05aeh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 bd 4b 23 5f
05b3h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
05bdh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
05c1h mov rcx,7FFDDBF7DD70h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dd70h:imm64]         encoding(10 bytes) = 48 b9 70 dd f7 db fd 7f 00 00
05cbh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
05cfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
05d2h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 15 04 00 00
05d7h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
05e1h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 4a 5a 23 5f
05e6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
05e9h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
05edh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
05f0h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 7b 4b 23 5f
05f5h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
05ffh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0603h mov rcx,7FFDDBF7DDA0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dda0h:imm64]         encoding(10 bytes) = 48 b9 a0 dd f7 db fd 7f 00 00
060dh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0611h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0614h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 d3 03 00 00
0619h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0623h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 08 5a 23 5f
0628h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
062bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
062fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0632h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 39 4b 23 5f
0637h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0641h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0645h mov rcx,7FFDDBF7DDD0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7ddd0h:imm64]         encoding(10 bytes) = 48 b9 d0 dd f7 db fd 7f 00 00
064fh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0653h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0656h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 91 03 00 00
065bh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0665h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 c6 59 23 5f
066ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
066dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0671h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0674h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 f7 4a 23 5f
0679h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0683h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0687h mov rcx,7FFDDBF7DDF0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7ddf0h:imm64]         encoding(10 bytes) = 48 b9 f0 dd f7 db fd 7f 00 00
0691h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0695h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0698h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 4f 03 00 00
069dh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
06a7h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 84 59 23 5f
06ach mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
06afh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
06b3h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
06b6h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 b5 4a 23 5f
06bbh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
06c5h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
06c9h mov rcx,7FFDDBF7DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7de20h:imm64]         encoding(10 bytes) = 48 b9 20 de f7 db fd 7f 00 00
06d3h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
06d7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
06dah jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 0d 03 00 00
06dfh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
06e9h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 42 59 23 5f
06eeh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
06f1h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
06f5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
06f8h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 73 4a 23 5f
06fdh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0707h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
070bh mov rcx,7FFDDBF7DE50h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7de50h:imm64]         encoding(10 bytes) = 48 b9 50 de f7 db fd 7f 00 00
0715h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0719h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
071ch jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 cb 02 00 00
0721h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
072bh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 00 59 23 5f
0730h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0733h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0737h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
073ah call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 31 4a 23 5f
073fh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0749h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
074dh mov rcx,7FFDDBF7DE80h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7de80h:imm64]         encoding(10 bytes) = 48 b9 80 de f7 db fd 7f 00 00
0757h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
075bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
075eh jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 89 02 00 00
0763h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
076dh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 be 58 23 5f
0772h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0775h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0779h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
077ch call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 ef 49 23 5f
0781h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
078bh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
078fh mov rcx,7FFDDBF7DEB0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7deb0h:imm64]         encoding(10 bytes) = 48 b9 b0 de f7 db fd 7f 00 00
0799h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
079dh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
07a0h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 47 02 00 00
07a5h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
07afh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 7c 58 23 5f
07b4h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
07b7h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
07bbh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
07beh call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 ad 49 23 5f
07c3h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
07cdh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
07d1h mov rcx,7FFDDBF7DEE0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dee0h:imm64]         encoding(10 bytes) = 48 b9 e0 de f7 db fd 7f 00 00
07dbh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
07dfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
07e2h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 05 02 00 00
07e7h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
07f1h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 3a 58 23 5f
07f6h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
07f9h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
07fdh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0800h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 6b 49 23 5f
0805h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
080fh mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0813h mov rcx,7FFDDBF7DF00h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7df00h:imm64]         encoding(10 bytes) = 48 b9 00 df f7 db fd 7f 00 00
081dh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0821h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0824h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 c3 01 00 00
0829h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0833h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 f8 57 23 5f
0838h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
083bh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
083fh mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0842h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 29 49 23 5f
0847h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0851h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0855h mov rcx,7FFDDBF7DF30h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7df30h:imm64]         encoding(10 bytes) = 48 b9 30 df f7 db fd 7f 00 00
085fh mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0863h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0866h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 81 01 00 00
086bh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
0875h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 b6 57 23 5f
087ah mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
087dh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0881h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0884h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 e7 48 23 5f
0889h mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0893h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
0897h mov rcx,7FFDDBF7DF60h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7df60h:imm64]         encoding(10 bytes) = 48 b9 60 df f7 db fd 7f 00 00
08a1h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
08a5h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
08a8h jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 3f 01 00 00
08adh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
08b7h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 74 57 23 5f
08bch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
08bfh lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
08c3h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
08c6h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 a5 48 23 5f
08cbh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
08d5h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
08d9h mov rcx,7FFDDBF7DF90h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7df90h:imm64]         encoding(10 bytes) = 48 b9 90 df f7 db fd 7f 00 00
08e3h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
08e7h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
08eah jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 fd 00 00 00
08efh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
08f9h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 32 57 23 5f
08feh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0901h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0905h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0908h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 63 48 23 5f
090dh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0917h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
091bh mov rcx,7FFDDBF7DFC0h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7dfc0h:imm64]         encoding(10 bytes) = 48 b9 c0 df f7 db fd 7f 00 00
0925h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
0929h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
092ch jmp near ptr 09ech            ; JMP(Jmp_rel32_64) [9ECh:jmp64]                       encoding(5 bytes) = e9 bb 00 00 00
0931h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
093bh call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 f0 56 23 5f
0940h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0943h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0947h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
094ah call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 21 48 23 5f
094fh mov rcx,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RCX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b9 20 de 56 db fd 7f 00 00
0959h mov [rsi+18h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 18
095dh mov rcx,7FFDDBF7E010h         ; MOV(Mov_r64_imm64) [RCX,7ffddbf7e010h:imm64]         encoding(10 bytes) = 48 b9 10 e0 f7 db fd 7f 00 00
0967h mov [rsi+20h],rcx             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RCX]        encoding(4 bytes) = 48 89 4e 20
096bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
096eh jmp short 09ech               ; JMP(Jmp_rel8_64) [9ECh:jmp64]                        encoding(2 bytes) = eb 7c
0970h mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
097ah call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 b1 56 23 5f
097fh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
0982h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
0986h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
0989h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 e2 47 23 5f
098eh mov rax,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RAX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b8 20 de 56 db fd 7f 00 00
0998h mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
099ch mov rax,7FFDDBF7E030h         ; MOV(Mov_r64_imm64) [RAX,7ffddbf7e030h:imm64]         encoding(10 bytes) = 48 b8 30 e0 f7 db fd 7f 00 00
09a6h mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
09aah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
09adh jmp short 09ech               ; JMP(Jmp_rel8_64) [9ECh:jmp64]                        encoding(2 bytes) = eb 3d
09afh mov rcx,7FFDDC0231B0h         ; MOV(Mov_r64_imm64) [RCX,7ffddc0231b0h:imm64]         encoding(10 bytes) = 48 b9 b0 31 02 dc fd 7f 00 00
09b9h call 7FFE3B1B44B0h            ; CALL(Call_rel32_64) [5F236030h:jmp64]                encoding(5 bytes) = e8 72 56 23 5f
09beh mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
09c1h lea rcx,[rsi+8]               ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSI:br,DS:sr)]       encoding(4 bytes) = 48 8d 4e 08
09c5h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
09c8h call 7FFE3B1B35F0h            ; CALL(Call_rel32_64) [5F235170h:jmp64]                encoding(5 bytes) = e8 a3 47 23 5f
09cdh mov rax,7FFDDB56DE20h         ; MOV(Mov_r64_imm64) [RAX,7ffddb56de20h:imm64]         encoding(10 bytes) = 48 b8 20 de 56 db fd 7f 00 00
09d7h mov [rsi+18h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 18
09dbh mov rax,7FFDDBD769F8h         ; MOV(Mov_r64_imm64) [RAX,7ffddbd769f8h:imm64]         encoding(10 bytes) = 48 b8 f8 69 d7 db fd 7f 00 00
09e5h mov [rsi+20h],rax             ; MOV(Mov_rm64_r64) [mem(64u,RSI:br,DS:sr),RAX]        encoding(4 bytes) = 48 89 46 20
09e9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
09ech add rsp,20h                   ; ADD(Add_rm64_imm8) [RSP,20h:imm64]                   encoding(4 bytes) = 48 83 c4 20
09f0h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
09f1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
; static ReadOnlySpan<byte> ternopBytes => new byte[2546]{0x56,0x48,0x83,0xEC,0x20,0x0F,0xB6,0xC1,0xFF,0xC8,0x83,0xF8,0x24,0x0F,0x87,0x9C,0x09,0x00,0x00,0x8B,0xC8,0x48,0x8D,0x05,0xDC,0x09,0x00,0x00,0x8B,0x04,0x88,0x48,0x8D,0x15,0xDF,0xFF,0xFF,0xFF,0x48,0x03,0xC2,0xFF,0xE0,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xF6,0x5F,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x27,0x51,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x60,0xD9,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x7F,0x09,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xB4,0x5F,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xE5,0x50,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x90,0xD9,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x3D,0x09,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x72,0x5F,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xA3,0x50,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xC0,0xD9,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xFB,0x08,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x30,0x5F,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x61,0x50,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xF0,0xD9,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xB9,0x08,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xEE,0x5E,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x1F,0x50,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x20,0xDA,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x77,0x08,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xAC,0x5E,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xDD,0x4F,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x50,0xDA,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x35,0x08,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x6A,0x5E,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x9B,0x4F,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x80,0xDA,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xF3,0x07,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x28,0x5E,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x59,0x4F,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xB0,0xDA,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xB1,0x07,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xE6,0x5D,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x17,0x4F,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE0,0xDA,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x6F,0x07,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xA4,0x5D,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xD5,0x4E,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x10,0xDB,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x2D,0x07,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x62,0x5D,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x93,0x4E,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x40,0xDB,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xEB,0x06,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x20,0x5D,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x51,0x4E,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x80,0xDB,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xA9,0x06,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xDE,0x5C,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x0F,0x4E,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xB0,0xDB,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x67,0x06,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x9C,0x5C,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xCD,0x4D,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xF0,0xDB,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x25,0x06,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x5A,0x5C,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x8B,0x4D,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x20,0xDC,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xE3,0x05,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x18,0x5C,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x49,0x4D,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x50,0xDC,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xA1,0x05,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xD6,0x5B,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x07,0x4D,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x80,0xDC,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x5F,0x05,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x94,0x5B,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xC5,0x4C,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xB0,0xDC,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x1D,0x05,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x52,0x5B,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x83,0x4C,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE0,0xDC,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xDB,0x04,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x10,0x5B,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x41,0x4C,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x10,0xDD,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x99,0x04,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xCE,0x5A,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xFF,0x4B,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x40,0xDD,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x57,0x04,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x8C,0x5A,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xBD,0x4B,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x70,0xDD,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x15,0x04,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x4A,0x5A,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x7B,0x4B,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xA0,0xDD,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xD3,0x03,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x08,0x5A,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x39,0x4B,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xD0,0xDD,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x91,0x03,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xC6,0x59,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xF7,0x4A,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xF0,0xDD,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x4F,0x03,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x84,0x59,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xB5,0x4A,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x20,0xDE,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x0D,0x03,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x42,0x59,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x73,0x4A,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x50,0xDE,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xCB,0x02,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x00,0x59,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x31,0x4A,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x80,0xDE,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x89,0x02,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xBE,0x58,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xEF,0x49,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xB0,0xDE,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x47,0x02,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x7C,0x58,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xAD,0x49,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xE0,0xDE,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x05,0x02,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x3A,0x58,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x6B,0x49,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x00,0xDF,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xC3,0x01,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xF8,0x57,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x29,0x49,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x30,0xDF,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x81,0x01,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xB6,0x57,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xE7,0x48,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x60,0xDF,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0x3F,0x01,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x74,0x57,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xA5,0x48,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x90,0xDF,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xFD,0x00,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x32,0x57,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x63,0x48,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0xC0,0xDF,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xE9,0xBB,0x00,0x00,0x00,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xF0,0x56,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0x21,0x48,0x23,0x5F,0x48,0xB9,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x18,0x48,0xB9,0x10,0xE0,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x4E,0x20,0x48,0x8B,0xC6,0xEB,0x7C,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0xB1,0x56,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xE2,0x47,0x23,0x5F,0x48,0xB8,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0x30,0xE0,0xF7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0xEB,0x3D,0x48,0xB9,0xB0,0x31,0x02,0xDC,0xFD,0x7F,0x00,0x00,0xE8,0x72,0x56,0x23,0x5F,0x48,0x8B,0xF0,0x48,0x8D,0x4E,0x08,0x48,0x8B,0xD6,0xE8,0xA3,0x47,0x23,0x5F,0x48,0xB8,0x20,0xDE,0x56,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x18,0x48,0xB8,0xF8,0x69,0xD7,0xDB,0xFD,0x7F,0x00,0x00,0x48,0x89,0x46,0x20,0x48,0x8B,0xC6,0x48,0x83,0xC4,0x20,0x5E,0xC3};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N4,N3,byte> table(BinaryLogic:uint op)
; location: [7FFDDBF808F0h, 7FFDDBF8125Ch]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,1F8h                  ; SUB(Sub_rm64_imm32) [RSP,1f8h:imm64]                 encoding(7 bytes) = 48 81 ec f8 01 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,74h                   ; MOV(Mov_r32_imm32) [ECX,74h:imm32]                   encoding(5 bytes) = b9 74 00 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0029h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
002bh lea rcx,[rsp+198h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 01 00 00
0033h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0037h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
003bh mov rcx,7FFDDB7F87B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb7f87b8h:imm64]         encoding(10 bytes) = 48 b9 b8 87 7f db fd 7f 00 00
0045h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0047h call 7FFE3B17F3E0h            ; CALL(Call_rel32_64) [5F1FEAF0h:jmp64]                encoding(5 bytes) = e8 a4 ea 1f 5f
004ch mov rdx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 ba 28 f4 8b 45 ed 01 00 00
0056h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0059h mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
005ch movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
005fh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
0069h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233CF0h:jmp64]                encoding(5 bytes) = e8 82 3c 23 5f
006eh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0072h mov eax,[rax+8]               ; MOV(Mov_r32_rm32) [EAX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 40 08
0075h lea rdx,[rsp+198h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 98 01 00 00
007dh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0080h mov [rdx+8],eax               ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(3 bytes) = 89 42 08
0083h vmovdqu xmm0,xmmword ptr [rsp+198h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 01 00 00
008ch vmovdqu xmmword ptr [rsp+1E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 01 00 00
0095h mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
0097h call 7FFDDBF7E190h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD8A0h:jmp64]        encoding(5 bytes) = e8 04 d8 ff ff
009ch mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
009fh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
00a9h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00aeh call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233CF0h:jmp64]                encoding(5 bytes) = e8 3d 3c 23 5f
00b3h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00b6h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00b8h mov [rsp+190h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 01 00 00
00bfh lea rcx,[rsp+190h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 01 00 00
00c7h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00c9h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
00cbh mov edx,[rsp+190h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 90 01 00 00
00d2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00d4h mov [rsp+188h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 01 00 00
00dbh lea rcx,[rsp+188h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 01 00 00
00e3h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
00e6h mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
00e9h mov r8d,[rsp+188h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 01 00 00
00f1h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
00f4h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
00f8h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
00fbh cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
00feh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0101h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0104h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0106h mov [rsp+180h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 01 00 00
010dh lea rdx,[rsp+180h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 80 01 00 00
0115h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0117h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0119h mov edx,[rsp+180h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 01 00 00
0120h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
0123h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0126h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0129h mov [rsp+178h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 01 00 00
0130h lea rax,[rsp+178h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 78 01 00 00
0138h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
013bh mov [rax],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 00
013eh mov eax,[rsp+178h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 01 00 00
0145h mov [rsp+174h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 74 01 00 00
014dh mov [rsp+170h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 70 01 00 00
0155h mov [rsp+170h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 70 01 00 00
015dh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
015fh je short 0173h                ; JE(Je_rel8_64) [173h:jmp64]                          encoding(2 bytes) = 74 12
0161h movzx ecx,byte ptr [rsp+170h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 70 01 00 00
0169h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
016ch mov [rsp+170h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 70 01 00 00
0173h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0175h je short 0189h                ; JE(Je_rel8_64) [189h:jmp64]                          encoding(2 bytes) = 74 12
0177h movzx ecx,byte ptr [rsp+170h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 70 01 00 00
017fh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0182h mov [rsp+170h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 70 01 00 00
0189h mov ecx,[rsp+170h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 70 01 00 00
0190h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0193h mov [rsp+174h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 74 01 00 00
019ah cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
019dh jne short 01b1h               ; JNE(Jne_rel8_64) [1B1h:jmp64]                        encoding(2 bytes) = 75 12
019fh movzx ecx,byte ptr [rsp+174h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 74 01 00 00
01a7h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
01aah mov [rsp+174h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 74 01 00 00
01b1h mov ecx,[rsp+174h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 74 01 00 00
01b8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
01bbh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
01beh lea rcx,[rsp+160h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 01 00 00
01c6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
01cah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
01ceh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
01d2h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
01d7h lea rdx,[rsp+160h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 01 00 00
01dfh lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
01e4h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
01e7h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
01eah mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
01edh lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
01f2h call 7FFDDBF7FA00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF110h:jmp64]        encoding(5 bytes) = e8 19 ef ff ff
01f7h vmovdqu xmm0,xmmword ptr [rsp+160h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 01 00 00
0200h vmovdqu xmmword ptr [rsp+1D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 01 00 00
0209h vmovdqu xmm0,xmmword ptr [rsp+1D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 01 00 00
0212h vmovdqu xmmword ptr [rsp+150h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 01 00 00
021bh vmovdqu xmm0,xmmword ptr [rsp+150h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 01 00 00
0224h vmovdqu xmmword ptr [rsp+140h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 01 00 00
022dh lea rcx,[rsp+140h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 01 00 00
0235h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0238h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
023bh lea rcx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 01 00 00
0243h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
0246h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
024ah mov rcx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 b9 28 f4 8b 45 ed 01 00 00
0254h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0257h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
025bh mov r11,7FFDDB570E18h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e18h:imm64]         encoding(10 bytes) = 49 bb 18 0e 57 db fd 7f 00 00
0265h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0267h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0269h call qword ptr [7FFDDB570E18h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 b9 02 5f ff
026fh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0272h jne short 027ah               ; JNE(Jne_rel8_64) [27Ah:jmp64]                        encoding(2 bytes) = 75 06
0274h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0276h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0278h jmp short 0281h               ; JMP(Jmp_rel8_64) [281h:jmp64]                        encoding(2 bytes) = eb 07
027ah lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
027eh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
0281h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
0284h jbe near ptr 0967h            ; JBE(Jbe_rel32_64) [967h:jmp64]                       encoding(6 bytes) = 0f 86 dd 06 00 00
028ah movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
028dh mov rdx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 ba 28 f4 8b 45 ed 01 00 00
0297h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
029ah mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
029dh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
02a0h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
02a2h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
02a5h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
02a8h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
02abh ja near ptr 0937h             ; JA(Ja_rel32_64) [937h:jmp64]                         encoding(6 bytes) = 0f 87 86 06 00 00
02b1h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
02b4h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
02b7h cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
02b9h ja near ptr 093dh             ; JA(Ja_rel32_64) [93Dh:jmp64]                         encoding(6 bytes) = 0f 87 7e 06 00 00
02bfh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
02c2h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
02c5h call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB78610h:jmp64]                encoding(5 bytes) = e8 46 83 b7 5e
02cah mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
02d4h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
02d9h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233CF0h:jmp64]                encoding(5 bytes) = e8 12 3a 23 5f
02deh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
02e1h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
02e3h mov [rsp+138h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 38 01 00 00
02eah lea rcx,[rsp+138h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 01 00 00
02f2h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
02f8h mov edx,[rsp+138h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 01 00 00
02ffh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0301h mov [rsp+130h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 01 00 00
0308h lea rcx,[rsp+130h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 30 01 00 00
0310h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0313h mov [rcx],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 01
0316h mov r8d,[rsp+130h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 30 01 00 00
031eh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0321h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0325h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0328h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
032bh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
032eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0331h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0333h mov [rsp+128h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 28 01 00 00
033ah lea rdx,[rsp+128h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 28 01 00 00
0342h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0344h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0346h mov edx,[rsp+128h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 28 01 00 00
034dh cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
0350h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0353h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0356h mov [rsp+120h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 20 01 00 00
035dh lea rax,[rsp+120h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 20 01 00 00
0365h mov dword ptr [rax],1         ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 00 01 00 00 00
036bh mov eax,[rsp+120h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 20 01 00 00
0372h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0375h mov [rsp+11Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 1c 01 00 00
037dh mov [rsp+118h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 18 01 00 00
0385h mov [rsp+118h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 18 01 00 00
038dh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
038fh je short 03a3h                ; JE(Je_rel8_64) [3A3h:jmp64]                          encoding(2 bytes) = 74 12
0391h movzx ecx,byte ptr [rsp+118h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 18 01 00 00
0399h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
039ch mov [rsp+118h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 18 01 00 00
03a3h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
03a5h je short 03b9h                ; JE(Je_rel8_64) [3B9h:jmp64]                          encoding(2 bytes) = 74 12
03a7h movzx ecx,byte ptr [rsp+118h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 18 01 00 00
03afh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
03b2h mov [rsp+118h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 18 01 00 00
03b9h mov ecx,[rsp+118h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 01 00 00
03c0h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
03c3h mov [rsp+11Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 1c 01 00 00
03cah cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
03cdh jne short 03e1h               ; JNE(Jne_rel8_64) [3E1h:jmp64]                        encoding(2 bytes) = 75 12
03cfh movzx ecx,byte ptr [rsp+11Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 1c 01 00 00
03d7h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
03dah mov [rsp+11Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 1c 01 00 00
03e1h mov ecx,[rsp+11Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 1c 01 00 00
03e8h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
03ebh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
03eeh lea rcx,[rsp+108h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 01 00 00
03f6h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03fah vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
03feh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0402h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0407h lea rdx,[rsp+108h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 08 01 00 00
040fh lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
0414h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0417h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
041ah mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
041dh lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0422h call 7FFDDBF7FA00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF110h:jmp64]        encoding(5 bytes) = e8 e9 ec ff ff
0427h vmovdqu xmm0,xmmword ptr [rsp+108h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 01 00 00
0430h vmovdqu xmmword ptr [rsp+1C8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c8 01 00 00
0439h vmovdqu xmm0,xmmword ptr [rsp+1C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 01 00 00
0442h vmovdqu xmmword ptr [rsp+0F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 00 00 00
044bh vmovdqu xmm0,xmmword ptr [rsp+0F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 00 00 00
0454h vmovdqu xmmword ptr [rsp+0E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 00 00 00
045dh lea rcx,[rsp+0E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 00 00 00
0465h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
0468h mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
046bh lea rcx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 01 00 00
0473h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
0476h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
047ah mov rcx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 b9 28 f4 8b 45 ed 01 00 00
0484h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0487h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
048bh mov r11,7FFDDB570E20h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e20h:imm64]         encoding(10 bytes) = 49 bb 20 0e 57 db fd 7f 00 00
0495h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
049ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
049ch call qword ptr [7FFDDB570E20h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 8e 00 5f ff
04a2h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
04a5h jne short 04adh               ; JNE(Jne_rel8_64) [4ADh:jmp64]                        encoding(2 bytes) = 75 06
04a7h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
04a9h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
04abh jmp short 04b4h               ; JMP(Jmp_rel8_64) [4B4h:jmp64]                        encoding(2 bytes) = eb 07
04adh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
04b1h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
04b4h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
04b7h jbe near ptr 0967h            ; JBE(Jbe_rel32_64) [967h:jmp64]                       encoding(6 bytes) = 0f 86 aa 04 00 00
04bdh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
04c0h mov rdx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 ba 28 f4 8b 45 ed 01 00 00
04cah mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
04cdh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
04d0h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
04d3h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
04d5h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
04d8h mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
04dbh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
04deh ja near ptr 0943h             ; JA(Ja_rel32_64) [943h:jmp64]                         encoding(6 bytes) = 0f 87 5f 04 00 00
04e4h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
04e7h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
04eah cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
04ech ja near ptr 0949h             ; JA(Ja_rel32_64) [949h:jmp64]                         encoding(6 bytes) = 0f 87 57 04 00 00
04f2h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
04f5h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
04f8h call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB78610h:jmp64]                encoding(5 bytes) = e8 13 81 b7 5e
04fdh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
0507h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
050ch call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233CF0h:jmp64]                encoding(5 bytes) = e8 df 37 23 5f
0511h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0514h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0516h mov [rsp+0E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 00 00 00
051dh lea rcx,[rsp+0E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 00 00 00
0525h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0527h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0529h mov edx,[rsp+0E0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e0 00 00 00
0530h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0532h mov [rsp+0D8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 00 00 00
0539h lea rcx,[rsp+0D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 00 00 00
0541h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
0547h mov r8d,[rsp+0D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 00 00 00
054fh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0552h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0556h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0559h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
055ch sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
055fh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0562h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0564h mov [rsp+0D0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d0 00 00 00
056bh lea rdx,[rsp+0D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 00 00 00
0573h mov dword ptr [rdx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 02 01 00 00 00
0579h mov edx,[rsp+0D0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 d0 00 00 00
0580h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
0583h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0586h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0589h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
058bh mov [rsp+0C8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c8 00 00 00
0592h lea rax,[rsp+0C8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c8 00 00 00
059ah xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
059dh mov [rax],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 00
05a0h mov eax,[rsp+0C8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c8 00 00 00
05a7h mov [rsp+0C4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c4 00 00 00
05afh mov [rsp+0C0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c0 00 00 00
05b7h mov [rsp+0C0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 c0 00 00 00
05bfh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
05c1h je short 05d5h                ; JE(Je_rel8_64) [5D5h:jmp64]                          encoding(2 bytes) = 74 12
05c3h movzx ecx,byte ptr [rsp+0C0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 c0 00 00 00
05cbh or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
05ceh mov [rsp+0C0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c0 00 00 00
05d5h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
05d7h je short 05ebh                ; JE(Je_rel8_64) [5EBh:jmp64]                          encoding(2 bytes) = 74 12
05d9h movzx ecx,byte ptr [rsp+0C0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 c0 00 00 00
05e1h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
05e4h mov [rsp+0C0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c0 00 00 00
05ebh mov ecx,[rsp+0C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 00 00 00
05f2h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
05f5h mov [rsp+0C4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c4 00 00 00
05fch cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
05ffh jne short 0613h               ; JNE(Jne_rel8_64) [613h:jmp64]                        encoding(2 bytes) = 75 12
0601h movzx ecx,byte ptr [rsp+0C4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 c4 00 00 00
0609h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
060ch mov [rsp+0C4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 c4 00 00 00
0613h mov ecx,[rsp+0C4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c4 00 00 00
061ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
061dh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0620h lea rcx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 00 00 00
0628h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
062ch vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0630h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0634h mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0639h lea rdx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 b0 00 00 00
0641h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
0646h mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0649h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
064ch mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
064fh lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
0654h call 7FFDDBF7FA00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF110h:jmp64]        encoding(5 bytes) = e8 b7 ea ff ff
0659h vmovdqu xmm0,xmmword ptr [rsp+0B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 00 00 00
0662h vmovdqu xmmword ptr [rsp+1B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 01 00 00
066bh vmovdqu xmm0,xmmword ptr [rsp+1B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 01 00 00
0674h vmovdqu xmmword ptr [rsp+0A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 00 00 00
067dh vmovdqu xmm0,xmmword ptr [rsp+0A0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a0 00 00 00
0686h vmovdqu xmmword ptr [rsp+90h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 90 00 00 00
068fh lea rcx,[rsp+90h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 00 00 00
0697h mov rdi,[rcx]                 ; MOV(Mov_r64_rm64) [RDI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 39
069ah mov ebp,[rcx+8]               ; MOV(Mov_r32_rm32) [EBP,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 69 08
069dh lea rcx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 01 00 00
06a5h mov r14,[rcx]                 ; MOV(Mov_r64_rm64) [R14,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 4c 8b 31
06a8h mov r15d,[rcx+8]              ; MOV(Mov_r32_rm32) [R15D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 79 08
06ach mov rcx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 b9 28 f4 8b 45 ed 01 00 00
06b6h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
06b9h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
06bdh mov r11,7FFDDB570E28h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e28h:imm64]         encoding(10 bytes) = 49 bb 28 0e 57 db fd 7f 00 00
06c7h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
06cch cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
06ceh call qword ptr [7FFDDB570E28h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 64 fe 5e ff
06d4h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
06d7h jne short 06dfh               ; JNE(Jne_rel8_64) [6DFh:jmp64]                        encoding(2 bytes) = 75 06
06d9h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
06dbh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
06ddh jmp short 06e6h               ; JMP(Jmp_rel8_64) [6E6h:jmp64]                        encoding(2 bytes) = eb 07
06dfh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
06e3h mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
06e6h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
06e9h jbe near ptr 0967h            ; JBE(Jbe_rel32_64) [967h:jmp64]                       encoding(6 bytes) = 0f 86 78 02 00 00
06efh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
06f2h mov rdx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 ba 28 f4 8b 45 ed 01 00 00
06fch mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
06ffh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0702h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0705h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0707h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
070ah mov eax,r15d                  ; MOV(Mov_r32_rm32) [EAX,R15D]                         encoding(3 bytes) = 41 8b c7
070dh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0710h ja near ptr 094fh             ; JA(Ja_rel32_64) [94Fh:jmp64]                         encoding(6 bytes) = 0f 87 39 02 00 00
0716h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0719h add rcx,r14                   ; ADD(Add_r64_rm64) [RCX,R14]                          encoding(3 bytes) = 49 03 ce
071ch cmp ebp,edx                   ; CMP(Cmp_r32_rm32) [EBP,EDX]                          encoding(2 bytes) = 3b ea
071eh ja near ptr 0955h             ; JA(Ja_rel32_64) [955h:jmp64]                         encoding(6 bytes) = 0f 87 31 02 00 00
0724h mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
0727h movsxd r8,ebp                 ; MOVSXD(Movsxd_r64_rm32) [R8,EBP]                     encoding(3 bytes) = 4c 63 c5
072ah call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB78610h:jmp64]                encoding(5 bytes) = e8 e1 7e b7 5e
072fh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
0739h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
073eh call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233CF0h:jmp64]                encoding(5 bytes) = e8 ad 35 23 5f
0743h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0746h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0748h mov [rsp+88h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 88 00 00 00
074fh lea rcx,[rsp+88h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 00 00 00
0757h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
075dh mov edx,[rsp+88h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 88 00 00 00
0764h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0766h mov [rsp+80h],ecx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 80 00 00 00
076dh lea rcx,[rsp+80h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 00 00 00
0775h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
077bh mov r8d,[rsp+80h]             ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 80 00 00 00
0783h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
0787h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
078ah cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
078dh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0790h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0793h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0795h mov [rsp+78h],edx             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(4 bytes) = 89 54 24 78
0799h lea rdx,[rsp+78h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 78
079eh mov dword ptr [rdx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 02 01 00 00 00
07a4h mov edx,[rsp+78h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 54 24 78
07a8h cmp edx,1                     ; CMP(Cmp_rm32_imm8) [EDX,1h:imm32]                    encoding(3 bytes) = 83 fa 01
07abh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
07aeh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
07b1h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
07b3h mov [rsp+70h],eax             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(4 bytes) = 89 44 24 70
07b7h lea rax,[rsp+70h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 70
07bch mov dword ptr [rax],1         ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 00 01 00 00 00
07c2h mov eax,[rsp+70h]             ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 44 24 70
07c6h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
07c9h mov [rsp+6Ch],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 6c
07ceh mov [rsp+68h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 68
07d3h mov [rsp+68h],r8d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(5 bytes) = 44 89 44 24 68
07d8h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
07dah je short 07e8h                ; JE(Je_rel8_64) [7E8h:jmp64]                          encoding(2 bytes) = 74 0c
07dch movzx ecx,byte ptr [rsp+68h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 68
07e1h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
07e4h mov [rsp+68h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 68
07e8h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
07eah je short 07f8h                ; JE(Je_rel8_64) [7F8h:jmp64]                          encoding(2 bytes) = 74 0c
07ech movzx ecx,byte ptr [rsp+68h]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 68
07f1h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
07f4h mov [rsp+68h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 68
07f8h mov ecx,[rsp+68h]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 68
07fch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
07ffh mov [rsp+6Ch],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 6c
0803h cmp eax,1                     ; CMP(Cmp_rm32_imm8) [EAX,1h:imm32]                    encoding(3 bytes) = 83 f8 01
0806h jne short 0814h               ; JNE(Jne_rel8_64) [814h:jmp64]                        encoding(2 bytes) = 75 0c
0808h movzx ecx,byte ptr [rsp+6Ch]  ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(5 bytes) = 0f b6 4c 24 6c
080dh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0810h mov [rsp+6Ch],cl              ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(4 bytes) = 88 4c 24 6c
0814h mov ecx,[rsp+6Ch]             ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(4 bytes) = 8b 4c 24 6c
0818h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
081bh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
081eh lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
0823h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0827h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
082bh add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
082fh mov ecx,1                     ; MOV(Mov_r32_imm32) [ECX,1h:imm32]                    encoding(5 bytes) = b9 01 00 00 00
0834h lea rdx,[rsp+58h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 58
0839h lea rax,[rsp+28h]             ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 44 24 28
083eh mov [rax],rdi                 ; MOV(Mov_rm64_r64) [mem(64u,RAX:br,DS:sr),RDI]        encoding(3 bytes) = 48 89 38
0841h mov [rax+8],ecx               ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),ECX]        encoding(3 bytes) = 89 48 08
0844h mov rcx,rdx                   ; MOV(Mov_r64_rm64) [RCX,RDX]                          encoding(3 bytes) = 48 8b ca
0847h lea rdx,[rsp+28h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 28
084ch call 7FFDDBF7FA00h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF110h:jmp64]        encoding(5 bytes) = e8 bf e8 ff ff
0851h vmovdqu xmm0,xmmword ptr [rsp+58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 58
0857h vmovdqu xmmword ptr [rsp+1A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 01 00 00
0860h vmovdqu xmm0,xmmword ptr [rsp+1A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 01 00 00
0869h vmovdqu xmmword ptr [rsp+48h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 48
086fh vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
0875h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
087bh lea rcx,[rsp+38h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 38
0880h mov rsi,[rcx]                 ; MOV(Mov_r64_rm64) [RSI,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 31
0883h mov edi,[rcx+8]               ; MOV(Mov_r32_rm32) [EDI,mem(32u,RCX:br,DS:sr)]        encoding(3 bytes) = 8b 79 08
0886h lea rcx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 01 00 00
088eh mov rbp,[rcx]                 ; MOV(Mov_r64_rm64) [RBP,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 29
0891h mov r14d,[rcx+8]              ; MOV(Mov_r32_rm32) [R14D,mem(32u,RCX:br,DS:sr)]       encoding(4 bytes) = 44 8b 71 08
0895h mov rcx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 b9 28 f4 8b 45 ed 01 00 00
089fh mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
08a2h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
08a6h mov r11,7FFDDB570E30h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e30h:imm64]         encoding(10 bytes) = 49 bb 30 0e 57 db fd 7f 00 00
08b0h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
08b5h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
08b7h call qword ptr [7FFDDB570E30h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 83 fc 5e ff
08bdh test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
08c0h jne short 08c8h               ; JNE(Jne_rel8_64) [8C8h:jmp64]                        encoding(2 bytes) = 75 06
08c2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
08c4h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
08c6h jmp short 08d1h               ; JMP(Jmp_rel8_64) [8D1h:jmp64]                        encoding(2 bytes) = eb 09
08c8h cmp [rax],eax                 ; CMP(Cmp_rm32_r32) [mem(32u,RAX:br,DS:sr),EAX]        encoding(2 bytes) = 39 00
08cah lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
08ceh mov edx,[rax+8]               ; MOV(Mov_r32_rm32) [EDX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 50 08
08d1h cmp edx,0                     ; CMP(Cmp_rm32_imm8) [EDX,0h:imm32]                    encoding(3 bytes) = 83 fa 00
08d4h jbe near ptr 0967h            ; JBE(Jbe_rel32_64) [967h:jmp64]                       encoding(6 bytes) = 0f 86 8d 00 00 00
08dah movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
08ddh mov rdx,1ED458BF428h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf428h:imm64]          encoding(10 bytes) = 48 ba 28 f4 8b 45 ed 01 00 00
08e7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
08eah mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
08edh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
08f0h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
08f2h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
08f5h mov eax,r14d                  ; MOV(Mov_r32_rm32) [EAX,R14D]                         encoding(3 bytes) = 41 8b c6
08f8h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
08fbh ja short 095bh                ; JA(Ja_rel8_64) [95Bh:jmp64]                          encoding(2 bytes) = 77 5e
08fdh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0900h add rcx,rbp                   ; ADD(Add_r64_rm64) [RCX,RBP]                          encoding(3 bytes) = 48 03 cd
0903h cmp edi,edx                   ; CMP(Cmp_r32_rm32) [EDI,EDX]                          encoding(2 bytes) = 3b fa
0905h ja short 0961h                ; JA(Ja_rel8_64) [961h:jmp64]                          encoding(2 bytes) = 77 5a
0907h mov rdx,rsi                   ; MOV(Mov_r64_rm64) [RDX,RSI]                          encoding(3 bytes) = 48 8b d6
090ah movsxd r8,edi                 ; MOVSXD(Movsxd_r64_rm32) [R8,EDI]                     encoding(3 bytes) = 4c 63 c7
090dh call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB78610h:jmp64]                encoding(5 bytes) = e8 fe 7c b7 5e
0912h mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
0915h lea rsi,[rsp+1E8h]            ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 e8 01 00 00
091dh call 7FFE3B1B3690h            ; CALL(Call_rel32_64) [5F232DA0h:jmp64]                encoding(5 bytes) = e8 7e 24 23 5f
0922h movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
0924h mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
0927h add rsp,1F8h                  ; ADD(Add_rm64_imm32) [RSP,1f8h:imm64]                 encoding(7 bytes) = 48 81 c4 f8 01 00 00
092eh pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
092fh pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
0930h pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
0931h pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
0932h pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
0934h pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
0936h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
0937h call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB0h:jmp64]        encoding(5 bytes) = e8 74 24 73 ff
093ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
093dh call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB8h:jmp64]        encoding(5 bytes) = e8 76 24 73 ff
0942h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0943h call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB0h:jmp64]        encoding(5 bytes) = e8 68 24 73 ff
0948h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0949h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB8h:jmp64]        encoding(5 bytes) = e8 6a 24 73 ff
094eh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
094fh call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB0h:jmp64]        encoding(5 bytes) = e8 5c 24 73 ff
0954h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0955h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB8h:jmp64]        encoding(5 bytes) = e8 5e 24 73 ff
095ah int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
095bh call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB0h:jmp64]        encoding(5 bytes) = e8 50 24 73 ff
0960h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0961h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732DB8h:jmp64]        encoding(5 bytes) = e8 52 24 73 ff
0966h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
0967h call 7FFE3B2DEF00h            ; CALL(Call_rel32_64) [5F35E610h:jmp64]                encoding(5 bytes) = e8 a4 dc 35 5f
096ch int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> tableBytes => new byte[2413]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0xF8,0x01,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x74,0x00,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xF2,0x48,0x8D,0x8C,0x24,0x98,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0xB9,0xB8,0x87,0x7F,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0xE8,0xA4,0xEA,0x1F,0x5F,0x48,0xBA,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x82,0x3C,0x23,0x5F,0x48,0x8D,0x48,0x10,0x8B,0x40,0x08,0x48,0x8D,0x94,0x24,0x98,0x01,0x00,0x00,0x48,0x89,0x0A,0x89,0x42,0x08,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x01,0x00,0x00,0x8B,0xCE,0xE8,0x04,0xD8,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x3D,0x3C,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x90,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x90,0x01,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x94,0x24,0x90,0x01,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x88,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x88,0x01,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x01,0x44,0x8B,0x84,0x24,0x88,0x01,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x80,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x80,0x01,0x00,0x00,0x33,0xC0,0x89,0x02,0x8B,0x94,0x24,0x80,0x01,0x00,0x00,0x83,0xFA,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x89,0x84,0x24,0x78,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0x78,0x01,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x00,0x8B,0x84,0x24,0x78,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x74,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x70,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x70,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x70,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x70,0x01,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x70,0x01,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x70,0x01,0x00,0x00,0x8B,0x8C,0x24,0x70,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x74,0x01,0x00,0x00,0x83,0xF8,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x74,0x01,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x74,0x01,0x00,0x00,0x8B,0x8C,0x24,0x74,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x60,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x01,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0x19,0xEF,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x40,0x01,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0xE8,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x18,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0xB9,0x02,0x5F,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xDD,0x06,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x86,0x06,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x7E,0x06,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0x46,0x83,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x12,0x3A,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x38,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x38,0x01,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x38,0x01,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x30,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x30,0x01,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x01,0x44,0x8B,0x84,0x24,0x30,0x01,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x28,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x28,0x01,0x00,0x00,0x33,0xC0,0x89,0x02,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x83,0xFA,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x89,0x84,0x24,0x20,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0x20,0x01,0x00,0x00,0xC7,0x00,0x01,0x00,0x00,0x00,0x8B,0x84,0x24,0x20,0x01,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x1C,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x18,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0x18,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x18,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x18,0x01,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x18,0x01,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x18,0x01,0x00,0x00,0x8B,0x8C,0x24,0x18,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x1C,0x01,0x00,0x00,0x83,0xF8,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x1C,0x01,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x1C,0x01,0x00,0x00,0x8B,0x8C,0x24,0x1C,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x08,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0x08,0x01,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xE9,0xEC,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE8,0x00,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0xE8,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x20,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x8E,0x00,0x5F,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0xAA,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x5F,0x04,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x57,0x04,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0x13,0x81,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xDF,0x37,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0xE0,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE0,0x00,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x94,0x24,0xE0,0x00,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xD8,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD8,0x00,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xD8,0x00,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0xFF,0x50,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xD0,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x00,0x00,0x00,0xC7,0x02,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xD0,0x00,0x00,0x00,0x83,0xFA,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x84,0x24,0xC8,0x00,0x00,0x00,0x48,0x8D,0x84,0x24,0xC8,0x00,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x00,0x8B,0x84,0x24,0xC8,0x00,0x00,0x00,0x44,0x89,0x84,0x24,0xC4,0x00,0x00,0x00,0x44,0x89,0x84,0x24,0xC0,0x00,0x00,0x00,0x44,0x89,0x84,0x24,0xC0,0x00,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xC0,0x00,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xC0,0x00,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xC0,0x00,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xC0,0x00,0x00,0x00,0x8B,0x8C,0x24,0xC0,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xC4,0x00,0x00,0x00,0x83,0xF8,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xC4,0x00,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xC4,0x00,0x00,0x00,0x8B,0x8C,0x24,0xC4,0x00,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xB0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xB0,0x00,0x00,0x00,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xB7,0xEA,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x90,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0x90,0x00,0x00,0x00,0x48,0x8B,0x39,0x8B,0x69,0x08,0x48,0x8D,0x8C,0x24,0xE8,0x01,0x00,0x00,0x4C,0x8B,0x31,0x44,0x8B,0x79,0x08,0x48,0xB9,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x28,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x64,0xFE,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x07,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x78,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC7,0x4C,0x3B,0xC0,0x0F,0x87,0x39,0x02,0x00,0x00,0x48,0x63,0xC9,0x49,0x03,0xCE,0x3B,0xEA,0x0F,0x87,0x31,0x02,0x00,0x00,0x48,0x8B,0xD7,0x4C,0x63,0xC5,0xE8,0xE1,0x7E,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xAD,0x35,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x88,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0x88,0x00,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0x88,0x00,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0x80,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0x80,0x00,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x80,0x00,0x00,0x00,0x48,0x8B,0x4E,0x08,0xFF,0x56,0x18,0x83,0xF8,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x54,0x24,0x78,0x48,0x8D,0x54,0x24,0x78,0xC7,0x02,0x01,0x00,0x00,0x00,0x8B,0x54,0x24,0x78,0x83,0xFA,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x44,0x24,0x70,0x48,0x8D,0x44,0x24,0x70,0xC7,0x00,0x01,0x00,0x00,0x00,0x8B,0x44,0x24,0x70,0x45,0x33,0xC0,0x44,0x89,0x44,0x24,0x6C,0x44,0x89,0x44,0x24,0x68,0x44,0x89,0x44,0x24,0x68,0x84,0xC9,0x74,0x0C,0x0F,0xB6,0x4C,0x24,0x68,0x83,0xC9,0x01,0x88,0x4C,0x24,0x68,0x84,0xD2,0x74,0x0C,0x0F,0xB6,0x4C,0x24,0x68,0x83,0xC9,0x02,0x88,0x4C,0x24,0x68,0x8B,0x4C,0x24,0x68,0x0F,0xB6,0xC9,0x88,0x4C,0x24,0x6C,0x83,0xF8,0x01,0x75,0x0C,0x0F,0xB6,0x4C,0x24,0x6C,0x83,0xC9,0x04,0x88,0x4C,0x24,0x6C,0x8B,0x4C,0x24,0x6C,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0xB9,0x01,0x00,0x00,0x00,0x48,0x8D,0x54,0x24,0x58,0x48,0x8D,0x44,0x24,0x28,0x48,0x89,0x38,0x89,0x48,0x08,0x48,0x8B,0xCA,0x48,0x8D,0x54,0x24,0x28,0xE8,0xBF,0xE8,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x58,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x48,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x4C,0x24,0x38,0x48,0x8B,0x31,0x8B,0x79,0x08,0x48,0x8D,0x8C,0x24,0xE8,0x01,0x00,0x00,0x48,0x8B,0x29,0x44,0x8B,0x71,0x08,0x48,0xB9,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x30,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x83,0xFC,0x5E,0xFF,0x48,0x85,0xC0,0x75,0x06,0x33,0xC9,0x33,0xD2,0xEB,0x09,0x39,0x00,0x48,0x8D,0x48,0x10,0x8B,0x50,0x08,0x83,0xFA,0x00,0x0F,0x86,0x8D,0x00,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0x28,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x41,0x8B,0xC6,0x4C,0x3B,0xC0,0x77,0x5E,0x48,0x63,0xC9,0x48,0x03,0xCD,0x3B,0xFA,0x77,0x5A,0x48,0x8B,0xD6,0x4C,0x63,0xC7,0xE8,0xFE,0x7C,0xB7,0x5E,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0xE8,0x01,0x00,0x00,0xE8,0x7E,0x24,0x23,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0xF8,0x01,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x74,0x24,0x73,0xFF,0xCC,0xE8,0x76,0x24,0x73,0xFF,0xCC,0xE8,0x68,0x24,0x73,0xFF,0xCC,0xE8,0x6A,0x24,0x73,0xFF,0xCC,0xE8,0x5C,0x24,0x73,0xFF,0xCC,0xE8,0x5E,0x24,0x73,0xFF,0xCC,0xE8,0x50,0x24,0x73,0xFF,0xCC,0xE8,0x52,0x24,0x73,0xFF,0xCC,0xE8,0xA4,0xDC,0x35,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
; function: BitMatrix<N8,N4,byte> table(TernaryLogic:byte op)
; location: [7FFDDBF81460h, 7FFDDBF82F73h]
0000h push r15                      ; PUSH(Push_r64) [R15]                                 encoding(2 bytes) = 41 57
0002h push r14                      ; PUSH(Push_r64) [R14]                                 encoding(2 bytes) = 41 56
0004h push rdi                      ; PUSH(Push_r64) [RDI]                                 encoding(1 byte ) = 57
0005h push rsi                      ; PUSH(Push_r64) [RSI]                                 encoding(1 byte ) = 56
0006h push rbp                      ; PUSH(Push_r64) [RBP]                                 encoding(1 byte ) = 55
0007h push rbx                      ; PUSH(Push_r64) [RBX]                                 encoding(1 byte ) = 53
0008h sub rsp,948h                  ; SUB(Sub_rm64_imm32) [RSP,948h:imm64]                 encoding(7 bytes) = 48 81 ec 48 09 00 00
000fh vzeroupper                    ; VZEROUPPER(VEX_Vzeroupper)                           encoding(VEX, 3 bytes) = c5 f8 77
0012h mov rsi,rcx                   ; MOV(Mov_r64_rm64) [RSI,RCX]                          encoding(3 bytes) = 48 8b f1
0015h lea rdi,[rsp+28h]             ; LEA(Lea_r64_m) [RDI,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 7c 24 28
001ah mov ecx,248h                  ; MOV(Mov_r32_imm32) [ECX,248h:imm32]                  encoding(5 bytes) = b9 48 02 00 00
001fh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0021h rep stosd                     ; STOSD(Stosd_m32_EAX) [mem(32u),EAX]                  encoding(2 bytes) = f3 ab
0023h mov rcx,rsi                   ; MOV(Mov_r64_rm64) [RCX,RSI]                          encoding(3 bytes) = 48 8b ce
0026h mov rbx,rcx                   ; MOV(Mov_r64_rm64) [RBX,RCX]                          encoding(3 bytes) = 48 8b d9
0029h mov esi,edx                   ; MOV(Mov_r32_rm32) [ESI,EDX]                          encoding(2 bytes) = 8b f2
002bh mov rcx,7FFDDB7F87B8h         ; MOV(Mov_r64_imm64) [RCX,7ffddb7f87b8h:imm64]         encoding(10 bytes) = 48 b9 b8 87 7f db fd 7f 00 00
0035h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
003ah call 7FFE3B17F3E0h            ; CALL(Call_rel32_64) [5F1FDF80h:jmp64]                encoding(5 bytes) = e8 41 df 1f 5f
003fh mov rdx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 ba b0 f4 8b 45 ed 01 00 00
0049h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
004ch mov edx,[rdx+1Ch]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 1c
004fh movsxd rdx,edx                ; MOVSXD(Movsxd_r64_rm32) [RDX,EDX]                    encoding(3 bytes) = 48 63 d2
0052h mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
005ch call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 1f 31 23 5f
0061h lea rcx,[rsp+6D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 06 00 00
0069h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
006dh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0071h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0075h mov [rsp+6D0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 d0 06 00 00
007dh mov rcx,[rsp+6D0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d0 06 00 00
0085h lea rdx,[rsp+6D8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d8 06 00 00
008dh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0090h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0093h mov [rsp+6E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 06 00 00
009ah vmovdqu xmm0,xmmword ptr [rsp+6D8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d8 06 00 00
00a3h vmovdqu xmmword ptr [rsp+6E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 06 00 00
00ach vmovdqu xmm0,xmmword ptr [rsp+6E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 06 00 00
00b5h vmovdqu xmmword ptr [rsp+938h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 09 00 00
00beh movzx ecx,sil                 ; MOVZX(Movzx_r32_rm8) [ECX,SIL]                       encoding(4 bytes) = 40 0f b6 ce
00c2h call 7FFDDBF7E480h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFD020h:jmp64]        encoding(5 bytes) = e8 59 cf ff ff
00c7h mov rsi,rax                   ; MOV(Mov_r64_rm64) [RSI,RAX]                          encoding(3 bytes) = 48 8b f0
00cah mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
00d4h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
00d9h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 a2 30 23 5f
00deh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
00e1h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
00e3h mov [rsp+6C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 06 00 00
00eah lea rcx,[rsp+6C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 06 00 00
00f2h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
00f4h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
00f6h mov ecx,[rsp+6C8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c8 06 00 00
00fdh mov [rsp+930h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 30 09 00 00
0104h mov [rsp+6C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 06 00 00
010bh lea rcx,[rsp+6C0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c0 06 00 00
0113h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0115h mov ecx,[rsp+6C0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 c0 06 00 00
011ch mov [rsp+928h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 09 00 00
0123h mov [rsp+6B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 06 00 00
012ah lea rcx,[rsp+6B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 06 00 00
0132h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0134h mov ecx,[rsp+6B8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b8 06 00 00
013bh mov [rsp+920h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 09 00 00
0142h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0145h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0149h mov edx,[rsp+930h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 30 09 00 00
0150h mov r8d,[rsp+928h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 09 00 00
0158h mov r9d,[rsp+920h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 20 09 00 00
0160h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0163h mov [rsp+918h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 18 09 00 00
016ah mov ecx,[rsp+918h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 09 00 00
0171h mov [rsp+6B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 06 00 00
0178h cmp dword ptr [rsp+6B0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 b0 06 00 00 01
0180h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0183h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0186h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0188h mov [rsp+6A8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a8 06 00 00
018fh lea rdx,[rsp+6A8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 a8 06 00 00
0197h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0199h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
019bh mov edx,[rsp+6A8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a8 06 00 00
01a2h mov [rsp+910h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 09 00 00
01a9h mov edx,[rsp+910h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 09 00 00
01b0h mov [rsp+6A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 06 00 00
01b7h cmp dword ptr [rsp+6A0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 a0 06 00 00 01
01bfh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
01c2h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
01c5h mov [rsp+698h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 98 06 00 00
01cch lea rax,[rsp+698h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 98 06 00 00
01d4h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
01d7h mov [rax],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 00
01dah mov eax,[rsp+698h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 98 06 00 00
01e1h mov [rsp+908h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 08 09 00 00
01e8h mov eax,[rsp+908h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 08 09 00 00
01efh mov [rsp+690h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 90 06 00 00
01f6h cmp dword ptr [rsp+690h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 90 06 00 00 01
01feh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
0201h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0204h mov [rsp+688h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 88 06 00 00
020ch lea r8,[rsp+688h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 88 06 00 00
0214h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0217h mov [r8],r9d                  ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R9D]         encoding(3 bytes) = 45 89 08
021ah mov r8d,[rsp+688h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 88 06 00 00
0222h mov [rsp+900h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 00 09 00 00
022ah mov r8d,[rsp+900h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 00 09 00 00
0232h mov [rsp+680h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 80 06 00 00
023ah mov [rsp+67Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 7c 06 00 00
0242h mov [rsp+678h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 78 06 00 00
024ah mov [rsp+674h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 74 06 00 00
0252h mov [rsp+674h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 74 06 00 00
025ah test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
025ch je short 0270h                ; JE(Je_rel8_64) [270h:jmp64]                          encoding(2 bytes) = 74 12
025eh movzx ecx,byte ptr [rsp+674h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 74 06 00 00
0266h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0269h mov [rsp+674h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 74 06 00 00
0270h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0272h je short 0286h                ; JE(Je_rel8_64) [286h:jmp64]                          encoding(2 bytes) = 74 12
0274h movzx ecx,byte ptr [rsp+674h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 74 06 00 00
027ch or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
027fh mov [rsp+674h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 74 06 00 00
0286h mov ecx,[rsp+674h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 74 06 00 00
028dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0290h mov [rsp+678h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 78 06 00 00
0297h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0299h je short 02adh                ; JE(Je_rel8_64) [2ADh:jmp64]                          encoding(2 bytes) = 74 12
029bh movzx ecx,byte ptr [rsp+678h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 78 06 00 00
02a3h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
02a6h mov [rsp+678h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 78 06 00 00
02adh mov ecx,[rsp+678h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 78 06 00 00
02b4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
02b7h mov [rsp+67Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 7c 06 00 00
02beh cmp dword ptr [rsp+680h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 80 06 00 00 01
02c6h jne short 02dah               ; JNE(Jne_rel8_64) [2DAh:jmp64]                        encoding(2 bytes) = 75 12
02c8h movzx ecx,byte ptr [rsp+67Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 7c 06 00 00
02d0h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
02d3h mov [rsp+67Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 7c 06 00 00
02dah mov ecx,[rsp+67Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 7c 06 00 00
02e1h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
02e4h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
02e7h lea rcx,[rsp+660h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 06 00 00
02efh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
02f3h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
02f7h lea rcx,[rsp+640h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 06 00 00
02ffh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0303h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0307h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
030bh mov [rsp+638h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 38 06 00 00
0313h mov rcx,[rsp+638h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 06 00 00
031bh lea rdx,[rsp+640h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 40 06 00 00
0323h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0326h mov dword ptr [rsp+648h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 48 06 00 00 01 00 00 00
0331h vmovdqu xmm0,xmmword ptr [rsp+640h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 06 00 00
033ah vmovdqu xmmword ptr [rsp+650h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 06 00 00
0343h lea rcx,[rsp+660h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 06 00 00
034bh vmovdqu xmm0,xmmword ptr [rsp+650h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 50 06 00 00
0354h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
035ah lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
035fh call 7FFDDBF81330h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 6c fb ff ff
0364h vmovdqu xmm0,xmmword ptr [rsp+660h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 06 00 00
036dh vmovdqu xmmword ptr [rsp+8F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 08 00 00
0376h vmovdqu xmm0,xmmword ptr [rsp+8F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 08 00 00
037fh vmovdqu xmmword ptr [rsp+628h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 06 00 00
0388h vmovdqu xmm0,xmmword ptr [rsp+628h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 06 00 00
0391h vmovdqu xmmword ptr [rsp+618h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 06 00 00
039ah vmovdqu xmm0,xmmword ptr [rsp+618h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 06 00 00
03a3h vmovdqu xmmword ptr [rsp+608h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 06 00 00
03ach vmovdqu xmm0,xmmword ptr [rsp+938h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 09 00 00
03b5h vmovdqu xmmword ptr [rsp+5F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 05 00 00
03beh mov rcx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 b9 b0 f4 8b 45 ed 01 00 00
03c8h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
03cbh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
03cfh mov r11,7FFDDB570E38h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e38h:imm64]         encoding(10 bytes) = 49 bb 38 0e 57 db fd 7f 00 00
03d9h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
03dbh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
03ddh call qword ptr [7FFDDB570E38h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 f5 f5 5e ff
03e3h lea rcx,[rsp+5C8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 c8 05 00 00
03ebh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
03efh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
03f3h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
03f6h jne short 040ah               ; JNE(Jne_rel8_64) [40Ah:jmp64]                        encoding(2 bytes) = 75 12
03f8h lea rax,[rsp+5C8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 c8 05 00 00
0400h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0404h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0408h jmp short 0433h               ; JMP(Jmp_rel8_64) [433h:jmp64]                        encoding(2 bytes) = eb 29
040ah lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
040eh mov [rsp+5C0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 c0 05 00 00
0416h mov rcx,[rsp+5C0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c0 05 00 00
041eh lea rdx,[rsp+5C8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c8 05 00 00
0426h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0429h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
042ch mov [rsp+5D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 05 00 00
0433h vmovdqu xmm0,xmmword ptr [rsp+5C8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 c8 05 00 00
043ch vmovdqu xmmword ptr [rsp+5D8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d8 05 00 00
0445h cmp dword ptr [rsp+5E0h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 e0 05 00 00 00
044dh jbe near ptr 1b0eh            ; JBE(Jbe_rel32_64) [1B0Eh:jmp64]                      encoding(6 bytes) = 0f 86 bb 16 00 00
0453h mov rcx,[rsp+5D8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 d8 05 00 00
045bh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
045eh mov rdx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 ba b0 f4 8b 45 ed 01 00 00
0468h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
046bh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
046eh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0471h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0473h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0476h mov eax,[rsp+600h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 00 06 00 00
047dh cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0480h ja near ptr 1ad2h             ; JA(Ja_rel32_64) [1AD2h:jmp64]                        encoding(6 bytes) = 0f 87 4c 16 00 00
0486h mov r8,[rsp+5F8h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 f8 05 00 00
048eh lea rax,[rsp+5B0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b0 05 00 00
0496h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
049ah vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
049eh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
04a1h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
04a4h mov [rsp+5A8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 a8 05 00 00
04ach mov rcx,[rsp+5A8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a8 05 00 00
04b4h lea r8,[rsp+5B0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 b0 05 00 00
04bch mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
04bfh mov [rsp+5B8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 b8 05 00 00
04c6h vmovdqu xmm0,xmmword ptr [rsp+5B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 05 00 00
04cfh vmovdqu xmmword ptr [rsp+5E8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e8 05 00 00
04d8h vmovdqu xmm0,xmmword ptr [rsp+5E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 05 00 00
04e1h vmovdqu xmmword ptr [rsp+598h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 05 00 00
04eah mov ecx,[rsp+610h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 06 00 00
04f1h cmp ecx,[rsp+5A0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 a0 05 00 00
04f8h ja near ptr 1ad8h             ; JA(Ja_rel32_64) [1AD8h:jmp64]                        encoding(6 bytes) = 0f 87 da 15 00 00
04feh mov rcx,[rsp+598h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 98 05 00 00
0506h mov rdx,[rsp+608h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 08 06 00 00
050eh mov r8d,[rsp+610h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 10 06 00 00
0516h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0519h call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB77AA0h:jmp64]                encoding(5 bytes) = e8 82 75 b7 5e
051eh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
0528h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
052dh call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 4e 2c 23 5f
0532h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0535h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0537h mov [rsp+590h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 05 00 00
053eh lea rcx,[rsp+590h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 05 00 00
0546h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0548h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
054ah mov ecx,[rsp+590h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 90 05 00 00
0551h mov [rsp+8E8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 08 00 00
0558h mov [rsp+588h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 88 05 00 00
055fh lea rcx,[rsp+588h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 88 05 00 00
0567h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0569h mov ecx,[rsp+588h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 05 00 00
0570h mov [rsp+8E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 08 00 00
0577h mov [rsp+580h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 05 00 00
057eh lea rcx,[rsp+580h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 05 00 00
0586h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
058ch mov ecx,[rsp+580h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 80 05 00 00
0593h mov [rsp+8D8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d8 08 00 00
059ah mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
059dh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
05a1h mov edx,[rsp+8E8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 e8 08 00 00
05a8h mov r8d,[rsp+8E0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e0 08 00 00
05b0h mov r9d,[rsp+8D8h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 d8 08 00 00
05b8h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
05bbh mov [rsp+8D0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 d0 08 00 00
05c2h mov ecx,[rsp+8D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 08 00 00
05c9h mov [rsp+578h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 78 05 00 00
05d0h cmp dword ptr [rsp+578h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 78 05 00 00 01
05d8h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
05dbh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
05deh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
05e0h mov [rsp+570h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 70 05 00 00
05e7h lea rdx,[rsp+570h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 70 05 00 00
05efh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
05f1h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
05f3h mov edx,[rsp+570h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 70 05 00 00
05fah mov [rsp+8C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 08 00 00
0601h mov edx,[rsp+8C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 08 00 00
0608h mov [rsp+568h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 68 05 00 00
060fh cmp dword ptr [rsp+568h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 68 05 00 00 01
0617h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
061ah movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
061dh mov [rsp+560h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 60 05 00 00
0624h lea rax,[rsp+560h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 60 05 00 00
062ch xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
062fh mov [rax],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 00
0632h mov eax,[rsp+560h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 60 05 00 00
0639h mov [rsp+8C0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 c0 08 00 00
0640h mov eax,[rsp+8C0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c0 08 00 00
0647h mov [rsp+558h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 58 05 00 00
064eh cmp dword ptr [rsp+558h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 58 05 00 00 01
0656h sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
0659h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
065ch mov [rsp+550h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 50 05 00 00
0664h lea r8,[rsp+550h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 50 05 00 00
066ch mov dword ptr [r8],1          ; MOV(Mov_rm32_imm32) [mem(32u,R8:br,DS:sr),1h:imm32]  encoding(7 bytes) = 41 c7 00 01 00 00 00
0673h mov r8d,[rsp+550h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 50 05 00 00
067bh mov [rsp+8B8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 b8 08 00 00
0683h mov r8d,[rsp+8B8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 b8 08 00 00
068bh mov [rsp+548h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 48 05 00 00
0693h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0696h mov [rsp+544h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 44 05 00 00
069eh mov [rsp+540h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 40 05 00 00
06a6h mov [rsp+53Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 3c 05 00 00
06aeh mov [rsp+53Ch],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 3c 05 00 00
06b6h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
06b8h je short 06cch                ; JE(Je_rel8_64) [6CCh:jmp64]                          encoding(2 bytes) = 74 12
06bah movzx ecx,byte ptr [rsp+53Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 3c 05 00 00
06c2h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
06c5h mov [rsp+53Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 3c 05 00 00
06cch test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
06ceh je short 06e2h                ; JE(Je_rel8_64) [6E2h:jmp64]                          encoding(2 bytes) = 74 12
06d0h movzx ecx,byte ptr [rsp+53Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 3c 05 00 00
06d8h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
06dbh mov [rsp+53Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 3c 05 00 00
06e2h mov ecx,[rsp+53Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 3c 05 00 00
06e9h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
06ech mov [rsp+540h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 40 05 00 00
06f3h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
06f5h je short 0709h                ; JE(Je_rel8_64) [709h:jmp64]                          encoding(2 bytes) = 74 12
06f7h movzx ecx,byte ptr [rsp+540h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 40 05 00 00
06ffh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0702h mov [rsp+540h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 40 05 00 00
0709h mov ecx,[rsp+540h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 05 00 00
0710h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0713h mov [rsp+544h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 44 05 00 00
071ah cmp dword ptr [rsp+548h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 48 05 00 00 01
0722h jne short 0736h               ; JNE(Jne_rel8_64) [736h:jmp64]                        encoding(2 bytes) = 75 12
0724h movzx ecx,byte ptr [rsp+544h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 44 05 00 00
072ch or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
072fh mov [rsp+544h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 44 05 00 00
0736h mov ecx,[rsp+544h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 44 05 00 00
073dh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0740h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0743h lea rcx,[rsp+528h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 05 00 00
074bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
074fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0753h lea rcx,[rsp+508h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 08 05 00 00
075bh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
075fh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0763h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0767h mov [rsp+500h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 00 05 00 00
076fh mov rcx,[rsp+500h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 05 00 00
0777h lea rdx,[rsp+508h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 08 05 00 00
077fh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0782h mov dword ptr [rsp+510h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 10 05 00 00 01 00 00 00
078dh vmovdqu xmm0,xmmword ptr [rsp+508h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 05 00 00
0796h vmovdqu xmmword ptr [rsp+518h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 05 00 00
079fh lea rcx,[rsp+528h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 28 05 00 00
07a7h vmovdqu xmm0,xmmword ptr [rsp+518h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 05 00 00
07b0h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
07b6h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
07bbh call 7FFDDBF81330h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 10 f7 ff ff
07c0h vmovdqu xmm0,xmmword ptr [rsp+528h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 28 05 00 00
07c9h vmovdqu xmmword ptr [rsp+8A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 08 00 00
07d2h vmovdqu xmm0,xmmword ptr [rsp+8A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 08 00 00
07dbh vmovdqu xmmword ptr [rsp+4F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 04 00 00
07e4h vmovdqu xmm0,xmmword ptr [rsp+4F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 04 00 00
07edh vmovdqu xmmword ptr [rsp+4E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 04 00 00
07f6h vmovdqu xmm0,xmmword ptr [rsp+4E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 04 00 00
07ffh vmovdqu xmmword ptr [rsp+4D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 04 00 00
0808h vmovdqu xmm0,xmmword ptr [rsp+938h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 09 00 00
0811h vmovdqu xmmword ptr [rsp+4C0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 c0 04 00 00
081ah mov rcx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 b9 b0 f4 8b 45 ed 01 00 00
0824h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0827h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
082bh mov r11,7FFDDB570E40h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e40h:imm64]         encoding(10 bytes) = 49 bb 40 0e 57 db fd 7f 00 00
0835h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
083ah cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
083ch call qword ptr [7FFDDB570E40h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 9e f1 5e ff
0842h lea rcx,[rsp+490h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 90 04 00 00
084ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
084eh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0852h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0855h jne short 0869h               ; JNE(Jne_rel8_64) [869h:jmp64]                        encoding(2 bytes) = 75 12
0857h lea rax,[rsp+490h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 90 04 00 00
085fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0863h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0867h jmp short 0892h               ; JMP(Jmp_rel8_64) [892h:jmp64]                        encoding(2 bytes) = eb 29
0869h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
086dh mov [rsp+488h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 88 04 00 00
0875h mov rcx,[rsp+488h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 88 04 00 00
087dh lea rdx,[rsp+490h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 90 04 00 00
0885h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0888h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
088bh mov [rsp+498h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 04 00 00
0892h vmovdqu xmm0,xmmword ptr [rsp+490h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 90 04 00 00
089bh vmovdqu xmmword ptr [rsp+4A0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a0 04 00 00
08a4h cmp dword ptr [rsp+4A8h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 a8 04 00 00 00
08ach jbe near ptr 1b0eh            ; JBE(Jbe_rel32_64) [1B0Eh:jmp64]                      encoding(6 bytes) = 0f 86 5c 12 00 00
08b2h mov rcx,[rsp+4A0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 a0 04 00 00
08bah movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
08bdh mov rdx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 ba b0 f4 8b 45 ed 01 00 00
08c7h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
08cah mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
08cdh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
08d0h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
08d2h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
08d5h mov eax,[rsp+4C8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 c8 04 00 00
08dch cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
08dfh ja near ptr 1adeh             ; JA(Ja_rel32_64) [1ADEh:jmp64]                        encoding(6 bytes) = 0f 87 f9 11 00 00
08e5h mov r8,[rsp+4C0h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 c0 04 00 00
08edh lea rax,[rsp+478h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 78 04 00 00
08f5h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
08f9h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
08fdh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0900h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0903h mov [rsp+470h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 70 04 00 00
090bh mov rcx,[rsp+470h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 70 04 00 00
0913h lea r8,[rsp+478h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 78 04 00 00
091bh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
091eh mov [rsp+480h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 04 00 00
0925h vmovdqu xmm0,xmmword ptr [rsp+478h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 04 00 00
092eh vmovdqu xmmword ptr [rsp+4B0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b0 04 00 00
0937h vmovdqu xmm0,xmmword ptr [rsp+4B0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b0 04 00 00
0940h vmovdqu xmmword ptr [rsp+460h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 04 00 00
0949h mov ecx,[rsp+4D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 04 00 00
0950h cmp ecx,[rsp+468h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 68 04 00 00
0957h ja near ptr 1ae4h             ; JA(Ja_rel32_64) [1AE4h:jmp64]                        encoding(6 bytes) = 0f 87 87 11 00 00
095dh mov rcx,[rsp+460h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 60 04 00 00
0965h mov rdx,[rsp+4D0h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 d0 04 00 00
096dh mov r8d,[rsp+4D8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 d8 04 00 00
0975h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0978h call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB77AA0h:jmp64]                encoding(5 bytes) = e8 23 71 b7 5e
097dh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
0987h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
098ch call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 ef 27 23 5f
0991h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0994h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0996h mov [rsp+458h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 04 00 00
099dh lea rcx,[rsp+458h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 04 00 00
09a5h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
09a7h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
09a9h mov ecx,[rsp+458h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 04 00 00
09b0h mov [rsp+8A0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a0 08 00 00
09b7h mov [rsp+450h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 50 04 00 00
09beh lea rcx,[rsp+450h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 50 04 00 00
09c6h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
09cch mov ecx,[rsp+450h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 04 00 00
09d3h mov [rsp+898h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 98 08 00 00
09dah mov [rsp+448h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 04 00 00
09e1h lea rcx,[rsp+448h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 48 04 00 00
09e9h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
09ebh mov ecx,[rsp+448h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 48 04 00 00
09f2h mov [rsp+890h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 90 08 00 00
09f9h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
09fch mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0a00h mov edx,[rsp+8A0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 a0 08 00 00
0a07h mov r8d,[rsp+898h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 98 08 00 00
0a0fh mov r9d,[rsp+890h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 90 08 00 00
0a17h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0a1ah mov [rsp+888h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 88 08 00 00
0a21h mov ecx,[rsp+888h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 88 08 00 00
0a28h mov [rsp+440h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 40 04 00 00
0a2fh cmp dword ptr [rsp+440h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 40 04 00 00 01
0a37h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0a3ah movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0a3dh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0a3fh mov [rsp+438h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 04 00 00
0a46h lea rdx,[rsp+438h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 38 04 00 00
0a4eh xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0a50h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0a52h mov edx,[rsp+438h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 04 00 00
0a59h mov [rsp+880h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 80 08 00 00
0a60h mov edx,[rsp+880h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 08 00 00
0a67h mov [rsp+430h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 30 04 00 00
0a6eh cmp dword ptr [rsp+430h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 30 04 00 00 01
0a76h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0a79h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0a7ch mov [rsp+428h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 28 04 00 00
0a83h lea rax,[rsp+428h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 28 04 00 00
0a8bh mov dword ptr [rax],1         ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 00 01 00 00 00
0a91h mov eax,[rsp+428h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 28 04 00 00
0a98h mov [rsp+878h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 08 00 00
0a9fh mov eax,[rsp+878h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 78 08 00 00
0aa6h mov [rsp+420h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 20 04 00 00
0aadh cmp dword ptr [rsp+420h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 20 04 00 00 01
0ab5h sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
0ab8h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0abbh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0abeh mov [rsp+418h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 18 04 00 00
0ac6h lea r8,[rsp+418h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 18 04 00 00
0aceh xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
0ad1h mov [r8],r9d                  ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R9D]         encoding(3 bytes) = 45 89 08
0ad4h mov r8d,[rsp+418h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 18 04 00 00
0adch mov [rsp+870h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 70 08 00 00
0ae4h mov r8d,[rsp+870h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 70 08 00 00
0aech mov [rsp+410h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 10 04 00 00
0af4h mov [rsp+40Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 0c 04 00 00
0afch mov [rsp+408h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 08 04 00 00
0b04h mov [rsp+404h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 04 04 00 00
0b0ch mov [rsp+404h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 04 04 00 00
0b14h test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0b16h je short 0b2ah                ; JE(Je_rel8_64) [B2Ah:jmp64]                          encoding(2 bytes) = 74 12
0b18h movzx ecx,byte ptr [rsp+404h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 04 04 00 00
0b20h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0b23h mov [rsp+404h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 04 04 00 00
0b2ah test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0b2ch je short 0b40h                ; JE(Je_rel8_64) [B40h:jmp64]                          encoding(2 bytes) = 74 12
0b2eh movzx ecx,byte ptr [rsp+404h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 04 04 00 00
0b36h or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0b39h mov [rsp+404h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 04 04 00 00
0b40h mov ecx,[rsp+404h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 04 04 00 00
0b47h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0b4ah mov [rsp+408h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 08 04 00 00
0b51h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0b53h je short 0b67h                ; JE(Je_rel8_64) [B67h:jmp64]                          encoding(2 bytes) = 74 12
0b55h movzx ecx,byte ptr [rsp+408h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 08 04 00 00
0b5dh or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0b60h mov [rsp+408h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 08 04 00 00
0b67h mov ecx,[rsp+408h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 04 00 00
0b6eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0b71h mov [rsp+40Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 0c 04 00 00
0b78h cmp dword ptr [rsp+410h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 10 04 00 00 01
0b80h jne short 0b94h               ; JNE(Jne_rel8_64) [B94h:jmp64]                        encoding(2 bytes) = 75 12
0b82h movzx ecx,byte ptr [rsp+40Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 0c 04 00 00
0b8ah or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0b8dh mov [rsp+40Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 0c 04 00 00
0b94h mov ecx,[rsp+40Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 0c 04 00 00
0b9bh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0b9eh mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
0ba1h lea rcx,[rsp+3F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 03 00 00
0ba9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0badh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0bb1h lea rcx,[rsp+3D0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d0 03 00 00
0bb9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0bbdh vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0bc1h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
0bc5h mov [rsp+3C8h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 c8 03 00 00
0bcdh mov rcx,[rsp+3C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 03 00 00
0bd5h lea rdx,[rsp+3D0h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 d0 03 00 00
0bddh mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0be0h mov dword ptr [rsp+3D8h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 d8 03 00 00 01 00 00 00
0bebh vmovdqu xmm0,xmmword ptr [rsp+3D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 03 00 00
0bf4h vmovdqu xmmword ptr [rsp+3E0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 e0 03 00 00
0bfdh lea rcx,[rsp+3F0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f0 03 00 00
0c05h vmovdqu xmm0,xmmword ptr [rsp+3E0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e0 03 00 00
0c0eh vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
0c14h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
0c19h call 7FFDDBF81330h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 b2 f2 ff ff
0c1eh vmovdqu xmm0,xmmword ptr [rsp+3F0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f0 03 00 00
0c27h vmovdqu xmmword ptr [rsp+860h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 08 00 00
0c30h vmovdqu xmm0,xmmword ptr [rsp+860h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 08 00 00
0c39h vmovdqu xmmword ptr [rsp+3B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 03 00 00
0c42h vmovdqu xmm0,xmmword ptr [rsp+3B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 03 00 00
0c4bh vmovdqu xmmword ptr [rsp+3A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 03 00 00
0c54h vmovdqu xmm0,xmmword ptr [rsp+3A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 03 00 00
0c5dh vmovdqu xmmword ptr [rsp+398h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 98 03 00 00
0c66h vmovdqu xmm0,xmmword ptr [rsp+938h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 09 00 00
0c6fh vmovdqu xmmword ptr [rsp+388h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 03 00 00
0c78h mov rcx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 b9 b0 f4 8b 45 ed 01 00 00
0c82h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
0c85h mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
0c89h mov r11,7FFDDB570E48h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e48h:imm64]         encoding(10 bytes) = 49 bb 48 0e 57 db fd 7f 00 00
0c93h mov edx,2                     ; MOV(Mov_r32_imm32) [EDX,2h:imm32]                    encoding(5 bytes) = ba 02 00 00 00
0c98h cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
0c9ah call qword ptr [7FFDDB570E48h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 48 ed 5e ff
0ca0h lea rcx,[rsp+358h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 58 03 00 00
0ca8h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0cach vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
0cb0h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
0cb3h jne short 0cc7h               ; JNE(Jne_rel8_64) [CC7h:jmp64]                        encoding(2 bytes) = 75 12
0cb5h lea rax,[rsp+358h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 58 03 00 00
0cbdh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0cc1h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0cc5h jmp short 0cf0h               ; JMP(Jmp_rel8_64) [CF0h:jmp64]                        encoding(2 bytes) = eb 29
0cc7h lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
0ccbh mov [rsp+350h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 50 03 00 00
0cd3h mov rcx,[rsp+350h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 50 03 00 00
0cdbh lea rdx,[rsp+358h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 58 03 00 00
0ce3h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
0ce6h mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
0ce9h mov [rsp+360h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 60 03 00 00
0cf0h vmovdqu xmm0,xmmword ptr [rsp+358h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 58 03 00 00
0cf9h vmovdqu xmmword ptr [rsp+368h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 68 03 00 00
0d02h cmp dword ptr [rsp+370h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 70 03 00 00 00
0d0ah jbe near ptr 1b0eh            ; JBE(Jbe_rel32_64) [1B0Eh:jmp64]                      encoding(6 bytes) = 0f 86 fe 0d 00 00
0d10h mov rcx,[rsp+368h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 68 03 00 00
0d18h movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
0d1bh mov rdx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 ba b0 f4 8b 45 ed 01 00 00
0d25h mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
0d28h mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
0d2bh mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
0d2eh mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
0d30h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
0d33h mov eax,[rsp+390h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 90 03 00 00
0d3ah cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
0d3dh ja near ptr 1aeah             ; JA(Ja_rel32_64) [1AEAh:jmp64]                        encoding(6 bytes) = 0f 87 a7 0d 00 00
0d43h mov r8,[rsp+388h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 88 03 00 00
0d4bh lea rax,[rsp+340h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 40 03 00 00
0d53h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
0d57h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
0d5bh movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
0d5eh add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
0d61h mov [rsp+338h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 38 03 00 00
0d69h mov rcx,[rsp+338h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 38 03 00 00
0d71h lea r8,[rsp+340h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 40 03 00 00
0d79h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
0d7ch mov [rsp+348h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 48 03 00 00
0d83h vmovdqu xmm0,xmmword ptr [rsp+340h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 03 00 00
0d8ch vmovdqu xmmword ptr [rsp+378h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 78 03 00 00
0d95h vmovdqu xmm0,xmmword ptr [rsp+378h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 78 03 00 00
0d9eh vmovdqu xmmword ptr [rsp+328h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 03 00 00
0da7h mov ecx,[rsp+3A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 03 00 00
0daeh cmp ecx,[rsp+330h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 30 03 00 00
0db5h ja near ptr 1af0h             ; JA(Ja_rel32_64) [1AF0h:jmp64]                        encoding(6 bytes) = 0f 87 35 0d 00 00
0dbbh mov rcx,[rsp+328h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 28 03 00 00
0dc3h mov rdx,[rsp+398h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 98 03 00 00
0dcbh mov r8d,[rsp+3A0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a0 03 00 00
0dd3h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
0dd6h call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB77AA0h:jmp64]                encoding(5 bytes) = e8 c5 6c b7 5e
0ddbh mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
0de5h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
0deah call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 91 23 23 5f
0defh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
0df2h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
0df4h mov [rsp+320h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 20 03 00 00
0dfbh lea rcx,[rsp+320h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 03 00 00
0e03h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0e05h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
0e07h mov ecx,[rsp+320h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 03 00 00
0e0eh mov [rsp+858h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 58 08 00 00
0e15h mov [rsp+318h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 18 03 00 00
0e1ch lea rcx,[rsp+318h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 18 03 00 00
0e24h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
0e2ah mov ecx,[rsp+318h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 03 00 00
0e31h mov [rsp+850h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 50 08 00 00
0e38h mov [rsp+310h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 03 00 00
0e3fh lea rcx,[rsp+310h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 10 03 00 00
0e47h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
0e4dh mov ecx,[rsp+310h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 03 00 00
0e54h mov [rsp+848h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 48 08 00 00
0e5bh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
0e5eh mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
0e62h mov edx,[rsp+858h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 58 08 00 00
0e69h mov r8d,[rsp+850h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 50 08 00 00
0e71h mov r9d,[rsp+848h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 48 08 00 00
0e79h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
0e7ch mov [rsp+840h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 40 08 00 00
0e83h mov ecx,[rsp+840h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 40 08 00 00
0e8ah mov [rsp+308h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 03 00 00
0e91h cmp dword ptr [rsp+308h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 08 03 00 00 01
0e99h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
0e9ch movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0e9fh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
0ea1h mov [rsp+300h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 00 03 00 00
0ea8h lea rdx,[rsp+300h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 00 03 00 00
0eb0h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
0eb2h mov [rdx],eax                 ; MOV(Mov_rm32_r32) [mem(32u,RDX:br,DS:sr),EAX]        encoding(2 bytes) = 89 02
0eb4h mov edx,[rsp+300h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 00 03 00 00
0ebbh mov [rsp+838h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 38 08 00 00
0ec2h mov edx,[rsp+838h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 08 00 00
0ec9h mov [rsp+2F8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f8 02 00 00
0ed0h cmp dword ptr [rsp+2F8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 f8 02 00 00 01
0ed8h sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
0edbh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
0edeh mov [rsp+2F0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f0 02 00 00
0ee5h lea rax,[rsp+2F0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 f0 02 00 00
0eedh mov dword ptr [rax],1         ; MOV(Mov_rm32_imm32) [mem(32u,RAX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 00 01 00 00 00
0ef3h mov eax,[rsp+2F0h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 f0 02 00 00
0efah mov [rsp+830h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 08 00 00
0f01h mov eax,[rsp+830h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 30 08 00 00
0f08h mov [rsp+2E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 02 00 00
0f0fh cmp dword ptr [rsp+2E8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 e8 02 00 00 01
0f17h sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
0f1ah movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
0f1dh xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0f20h mov [rsp+2E0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e0 02 00 00
0f28h lea r8,[rsp+2E0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 e0 02 00 00
0f30h mov dword ptr [r8],1          ; MOV(Mov_rm32_imm32) [mem(32u,R8:br,DS:sr),1h:imm32]  encoding(7 bytes) = 41 c7 00 01 00 00 00
0f37h mov r8d,[rsp+2E0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e0 02 00 00
0f3fh mov [rsp+828h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 28 08 00 00
0f47h mov r8d,[rsp+828h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 28 08 00 00
0f4fh mov [rsp+2D8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 d8 02 00 00
0f57h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
0f5ah mov [rsp+2D4h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 d4 02 00 00
0f62h mov [rsp+2D0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 d0 02 00 00
0f6ah mov [rsp+2CCh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 cc 02 00 00
0f72h mov [rsp+2CCh],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 cc 02 00 00
0f7ah test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
0f7ch je short 0f90h                ; JE(Je_rel8_64) [F90h:jmp64]                          encoding(2 bytes) = 74 12
0f7eh movzx ecx,byte ptr [rsp+2CCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 cc 02 00 00
0f86h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
0f89h mov [rsp+2CCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 cc 02 00 00
0f90h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
0f92h je short 0fa6h                ; JE(Je_rel8_64) [FA6h:jmp64]                          encoding(2 bytes) = 74 12
0f94h movzx ecx,byte ptr [rsp+2CCh] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 cc 02 00 00
0f9ch or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
0f9fh mov [rsp+2CCh],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 cc 02 00 00
0fa6h mov ecx,[rsp+2CCh]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 cc 02 00 00
0fadh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0fb0h mov [rsp+2D0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 d0 02 00 00
0fb7h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
0fb9h je short 0fcdh                ; JE(Je_rel8_64) [FCDh:jmp64]                          encoding(2 bytes) = 74 12
0fbbh movzx ecx,byte ptr [rsp+2D0h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 d0 02 00 00
0fc3h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
0fc6h mov [rsp+2D0h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 d0 02 00 00
0fcdh mov ecx,[rsp+2D0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d0 02 00 00
0fd4h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
0fd7h mov [rsp+2D4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 d4 02 00 00
0fdeh cmp dword ptr [rsp+2D8h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 d8 02 00 00 01
0fe6h jne short 0ffah               ; JNE(Jne_rel8_64) [FFAh:jmp64]                        encoding(2 bytes) = 75 12
0fe8h movzx ecx,byte ptr [rsp+2D4h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 d4 02 00 00
0ff0h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
0ff3h mov [rsp+2D4h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 d4 02 00 00
0ffah mov ecx,[rsp+2D4h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d4 02 00 00
1001h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1004h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
1007h lea rcx,[rsp+2B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 02 00 00
100fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1013h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1017h lea rcx,[rsp+298h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 98 02 00 00
101fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1023h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1027h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
102bh mov [rsp+290h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 90 02 00 00
1033h mov rcx,[rsp+290h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 90 02 00 00
103bh lea rdx,[rsp+298h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 98 02 00 00
1043h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
1046h mov dword ptr [rsp+2A0h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 a0 02 00 00 01 00 00 00
1051h vmovdqu xmm0,xmmword ptr [rsp+298h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 98 02 00 00
105ah vmovdqu xmmword ptr [rsp+2A8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 a8 02 00 00
1063h lea rcx,[rsp+2B8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b8 02 00 00
106bh vmovdqu xmm0,xmmword ptr [rsp+2A8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 a8 02 00 00
1074h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
107ah lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
107fh call 7FFDDBF81330h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 4c ee ff ff
1084h vmovdqu xmm0,xmmword ptr [rsp+2B8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 b8 02 00 00
108dh vmovdqu xmmword ptr [rsp+818h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 08 00 00
1096h vmovdqu xmm0,xmmword ptr [rsp+818h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 18 08 00 00
109fh vmovdqu xmmword ptr [rsp+280h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 80 02 00 00
10a8h vmovdqu xmm0,xmmword ptr [rsp+280h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 02 00 00
10b1h vmovdqu xmmword ptr [rsp+270h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 02 00 00
10bah vmovdqu xmm0,xmmword ptr [rsp+270h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 02 00 00
10c3h vmovdqu xmmword ptr [rsp+260h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 60 02 00 00
10cch vmovdqu xmm0,xmmword ptr [rsp+938h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 09 00 00
10d5h vmovdqu xmmword ptr [rsp+250h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 50 02 00 00
10deh mov rcx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 b9 b0 f4 8b 45 ed 01 00 00
10e8h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
10ebh mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
10efh mov r11,7FFDDB570E50h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e50h:imm64]         encoding(10 bytes) = 49 bb 50 0e 57 db fd 7f 00 00
10f9h mov edx,3                     ; MOV(Mov_r32_imm32) [EDX,3h:imm32]                    encoding(5 bytes) = ba 03 00 00 00
10feh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1100h call qword ptr [7FFDDB570E50h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 ea e8 5e ff
1106h lea rcx,[rsp+220h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 20 02 00 00
110eh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1112h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1116h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
1119h jne short 112dh               ; JNE(Jne_rel8_64) [112Dh:jmp64]                       encoding(2 bytes) = 75 12
111bh lea rax,[rsp+220h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 20 02 00 00
1123h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1127h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
112bh jmp short 1156h               ; JMP(Jmp_rel8_64) [1156h:jmp64]                       encoding(2 bytes) = eb 29
112dh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1131h mov [rsp+218h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 18 02 00 00
1139h mov rcx,[rsp+218h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 18 02 00 00
1141h lea rdx,[rsp+220h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 20 02 00 00
1149h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
114ch mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
114fh mov [rsp+228h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 28 02 00 00
1156h vmovdqu xmm0,xmmword ptr [rsp+220h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 20 02 00 00
115fh vmovdqu xmmword ptr [rsp+230h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 30 02 00 00
1168h cmp dword ptr [rsp+238h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 38 02 00 00 00
1170h jbe near ptr 1b0eh            ; JBE(Jbe_rel32_64) [1B0Eh:jmp64]                      encoding(6 bytes) = 0f 86 98 09 00 00
1176h mov rcx,[rsp+230h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 30 02 00 00
117eh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
1181h mov rdx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 ba b0 f4 8b 45 ed 01 00 00
118bh mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
118eh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
1191h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
1194h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
1196h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
1199h mov eax,[rsp+258h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 58 02 00 00
11a0h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
11a3h ja near ptr 1af6h             ; JA(Ja_rel32_64) [1AF6h:jmp64]                        encoding(6 bytes) = 0f 87 4d 09 00 00
11a9h mov r8,[rsp+250h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 50 02 00 00
11b1h lea rax,[rsp+208h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 08 02 00 00
11b9h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
11bdh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
11c1h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
11c4h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
11c7h mov [rsp+200h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 00 02 00 00
11cfh mov rcx,[rsp+200h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 00 02 00 00
11d7h lea r8,[rsp+208h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 08 02 00 00
11dfh mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
11e2h mov [rsp+210h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 10 02 00 00
11e9h vmovdqu xmm0,xmmword ptr [rsp+208h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 02 00 00
11f2h vmovdqu xmmword ptr [rsp+240h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 40 02 00 00
11fbh vmovdqu xmm0,xmmword ptr [rsp+240h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 02 00 00
1204h vmovdqu xmmword ptr [rsp+1F0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f0 01 00 00
120dh mov ecx,[rsp+268h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 02 00 00
1214h cmp ecx,[rsp+1F8h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 f8 01 00 00
121bh ja near ptr 1afch             ; JA(Ja_rel32_64) [1AFCh:jmp64]                        encoding(6 bytes) = 0f 87 db 08 00 00
1221h mov rcx,[rsp+1F0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f0 01 00 00
1229h mov rdx,[rsp+260h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 60 02 00 00
1231h mov r8d,[rsp+268h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 68 02 00 00
1239h movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
123ch call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB77AA0h:jmp64]                encoding(5 bytes) = e8 5f 68 b7 5e
1241h mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
124bh mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
1250h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 2b 1f 23 5f
1255h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
1258h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
125ah mov [rsp+1E8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e8 01 00 00
1261h lea rcx,[rsp+1E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 01 00 00
1269h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
126fh mov ecx,[rsp+1E8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e8 01 00 00
1276h mov [rsp+810h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 10 08 00 00
127dh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
127fh mov [rsp+1E0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 e0 01 00 00
1286h lea rcx,[rsp+1E0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e0 01 00 00
128eh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1290h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
1292h mov ecx,[rsp+1E0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 e0 01 00 00
1299h mov [rsp+808h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 08 08 00 00
12a0h mov [rsp+1D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 01 00 00
12a7h lea rcx,[rsp+1D8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 d8 01 00 00
12afh mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
12b1h mov ecx,[rsp+1D8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 d8 01 00 00
12b8h mov [rsp+800h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 00 08 00 00
12bfh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
12c2h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
12c6h mov edx,[rsp+810h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 10 08 00 00
12cdh mov r8d,[rsp+808h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 08 08 00 00
12d5h mov r9d,[rsp+800h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 00 08 00 00
12ddh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
12e0h mov [rsp+7F8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 f8 07 00 00
12e7h mov ecx,[rsp+7F8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 f8 07 00 00
12eeh mov [rsp+1D0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 d0 01 00 00
12f5h cmp dword ptr [rsp+1D0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 d0 01 00 00 01
12fdh sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
1300h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1303h xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
1305h mov [rsp+1C8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c8 01 00 00
130ch lea rdx,[rsp+1C8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 c8 01 00 00
1314h mov dword ptr [rdx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RDX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 02 01 00 00 00
131ah mov edx,[rsp+1C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 01 00 00
1321h mov [rsp+7F0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 f0 07 00 00
1328h mov edx,[rsp+7F0h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 f0 07 00 00
132fh mov [rsp+1C0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 c0 01 00 00
1336h cmp dword ptr [rsp+1C0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 c0 01 00 00 01
133eh sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
1341h movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
1344h xor eax,eax                   ; XOR(Xor_r32_rm32) [EAX,EAX]                          encoding(2 bytes) = 33 c0
1346h mov [rsp+1B8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 b8 01 00 00
134dh lea rax,[rsp+1B8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 b8 01 00 00
1355h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
1358h mov [rax],r8d                 ; MOV(Mov_rm32_r32) [mem(32u,RAX:br,DS:sr),R8D]        encoding(3 bytes) = 44 89 00
135bh mov eax,[rsp+1B8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 b8 01 00 00
1362h mov [rsp+7E8h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 e8 07 00 00
1369h mov eax,[rsp+7E8h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 e8 07 00 00
1370h mov [rsp+1B0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 b0 01 00 00
1377h cmp dword ptr [rsp+1B0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 b0 01 00 00 01
137fh sete al                       ; SETE(Sete_rm8) [AL]                                  encoding(3 bytes) = 0f 94 c0
1382h movzx eax,al                  ; MOVZX(Movzx_r32_rm8) [EAX,AL]                        encoding(3 bytes) = 0f b6 c0
1385h mov [rsp+1A8h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a8 01 00 00
138dh lea r8,[rsp+1A8h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 a8 01 00 00
1395h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
1398h mov [r8],r9d                  ; MOV(Mov_rm32_r32) [mem(32u,R8:br,DS:sr),R9D]         encoding(3 bytes) = 45 89 08
139bh mov r8d,[rsp+1A8h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 a8 01 00 00
13a3h mov [rsp+7E0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 e0 07 00 00
13abh mov r8d,[rsp+7E0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 e0 07 00 00
13b3h mov [rsp+1A0h],r8d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R8D]        encoding(8 bytes) = 44 89 84 24 a0 01 00 00
13bbh mov [rsp+19Ch],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 9c 01 00 00
13c3h mov [rsp+198h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 98 01 00 00
13cbh mov [rsp+194h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 94 01 00 00
13d3h mov [rsp+194h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 94 01 00 00
13dbh test cl,cl                    ; TEST(Test_rm8_r8) [CL,CL]                            encoding(2 bytes) = 84 c9
13ddh je short 13f1h                ; JE(Je_rel8_64) [13F1h:jmp64]                         encoding(2 bytes) = 74 12
13dfh movzx ecx,byte ptr [rsp+194h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 94 01 00 00
13e7h or ecx,1                      ; OR(Or_rm32_imm8) [ECX,1h:imm32]                      encoding(3 bytes) = 83 c9 01
13eah mov [rsp+194h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 94 01 00 00
13f1h test dl,dl                    ; TEST(Test_rm8_r8) [DL,DL]                            encoding(2 bytes) = 84 d2
13f3h je short 1407h                ; JE(Je_rel8_64) [1407h:jmp64]                         encoding(2 bytes) = 74 12
13f5h movzx ecx,byte ptr [rsp+194h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 94 01 00 00
13fdh or ecx,2                      ; OR(Or_rm32_imm8) [ECX,2h:imm32]                      encoding(3 bytes) = 83 c9 02
1400h mov [rsp+194h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 94 01 00 00
1407h mov ecx,[rsp+194h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 94 01 00 00
140eh movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1411h mov [rsp+198h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 98 01 00 00
1418h test al,al                    ; TEST(Test_rm8_r8) [AL,AL]                            encoding(2 bytes) = 84 c0
141ah je short 142eh                ; JE(Je_rel8_64) [142Eh:jmp64]                         encoding(2 bytes) = 74 12
141ch movzx ecx,byte ptr [rsp+198h] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 98 01 00 00
1424h or ecx,4                      ; OR(Or_rm32_imm8) [ECX,4h:imm32]                      encoding(3 bytes) = 83 c9 04
1427h mov [rsp+198h],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 98 01 00 00
142eh mov ecx,[rsp+198h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 98 01 00 00
1435h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1438h mov [rsp+19Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 9c 01 00 00
143fh cmp dword ptr [rsp+1A0h],1    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 a0 01 00 00 01
1447h jne short 145bh               ; JNE(Jne_rel8_64) [145Bh:jmp64]                       encoding(2 bytes) = 75 12
1449h movzx ecx,byte ptr [rsp+19Ch] ; MOVZX(Movzx_r32_rm8) [ECX,mem(8u,RSP:br,SS:sr)]      encoding(8 bytes) = 0f b6 8c 24 9c 01 00 00
1451h or ecx,8                      ; OR(Or_rm32_imm8) [ECX,8h:imm32]                      encoding(3 bytes) = 83 c9 08
1454h mov [rsp+19Ch],cl             ; MOV(Mov_rm8_r8) [mem(8u,RSP:br,SS:sr),CL]            encoding(7 bytes) = 88 8c 24 9c 01 00 00
145bh mov ecx,[rsp+19Ch]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 9c 01 00 00
1462h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
1465h mov [rdi+10h],cl              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),CL]            encoding(3 bytes) = 88 4f 10
1468h lea rcx,[rsp+180h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 01 00 00
1470h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1474h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1478h lea rcx,[rsp+160h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 60 01 00 00
1480h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1484h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1488h add rdi,10h                   ; ADD(Add_rm64_imm8) [RDI,10h:imm64]                   encoding(4 bytes) = 48 83 c7 10
148ch mov [rsp+158h],rdi            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RDI]        encoding(8 bytes) = 48 89 bc 24 58 01 00 00
1494h mov rcx,[rsp+158h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 58 01 00 00
149ch lea rdx,[rsp+160h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 60 01 00 00
14a4h mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
14a7h mov dword ptr [rsp+168h],1    ; MOV(Mov_rm32_imm32) [mem(32u,RSP:br,SS:sr),1h:imm32] encoding(11 bytes) = c7 84 24 68 01 00 00 01 00 00 00
14b2h vmovdqu xmm0,xmmword ptr [rsp+160h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 60 01 00 00
14bbh vmovdqu xmmword ptr [rsp+170h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 70 01 00 00
14c4h lea rcx,[rsp+180h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 80 01 00 00
14cch vmovdqu xmm0,xmmword ptr [rsp+170h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 70 01 00 00
14d5h vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
14dbh lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
14e0h call 7FFDDBF81330h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 eb e9 ff ff
14e5h vmovdqu xmm0,xmmword ptr [rsp+180h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 80 01 00 00
14eeh vmovdqu xmmword ptr [rsp+7D0h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 d0 07 00 00
14f7h vmovdqu xmm0,xmmword ptr [rsp+7D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 07 00 00
1500h vmovdqu xmmword ptr [rsp+148h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 48 01 00 00
1509h vmovdqu xmm0,xmmword ptr [rsp+148h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 48 01 00 00
1512h vmovdqu xmmword ptr [rsp+138h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 38 01 00 00
151bh vmovdqu xmm0,xmmword ptr [rsp+138h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 01 00 00
1524h vmovdqu xmmword ptr [rsp+128h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 28 01 00 00
152dh vmovdqu xmm0,xmmword ptr [rsp+938h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 38 09 00 00
1536h vmovdqu xmmword ptr [rsp+118h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 18 01 00 00
153fh mov rcx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RCX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 b9 b0 f4 8b 45 ed 01 00 00
1549h mov rcx,[rcx]                 ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(3 bytes) = 48 8b 09
154ch mov rcx,[rcx+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RCX:br,DS:sr)]        encoding(4 bytes) = 48 8b 49 08
1550h mov r11,7FFDDB570E58h         ; MOV(Mov_r64_imm64) [R11,7ffddb570e58h:imm64]         encoding(10 bytes) = 49 bb 58 0e 57 db fd 7f 00 00
155ah mov edx,4                     ; MOV(Mov_r32_imm32) [EDX,4h:imm32]                    encoding(5 bytes) = ba 04 00 00 00
155fh cmp [rcx],ecx                 ; CMP(Cmp_rm32_r32) [mem(32u,RCX:br,DS:sr),ECX]        encoding(2 bytes) = 39 09
1561h call qword ptr [7FFDDB570E58h]; CALL(Call_rm64) [mem(QwordOffset,RIP:br,DS:sr)]      encoding(6 bytes) = ff 15 91 e4 5e ff
1567h lea rcx,[rsp+0E8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 e8 00 00 00
156fh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1573h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1577h test rax,rax                  ; TEST(Test_rm64_r64) [RAX,RAX]                        encoding(3 bytes) = 48 85 c0
157ah jne short 158eh               ; JNE(Jne_rel8_64) [158Eh:jmp64]                       encoding(2 bytes) = 75 12
157ch lea rax,[rsp+0E8h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 e8 00 00 00
1584h vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1588h vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
158ch jmp short 15b7h               ; JMP(Jmp_rel8_64) [15B7h:jmp64]                       encoding(2 bytes) = eb 29
158eh lea rcx,[rax+10h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RAX:br,DS:sr)]       encoding(4 bytes) = 48 8d 48 10
1592h mov [rsp+0E0h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 e0 00 00 00
159ah mov rcx,[rsp+0E0h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 e0 00 00 00
15a2h lea rdx,[rsp+0E8h]            ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 94 24 e8 00 00 00
15aah mov [rdx],rcx                 ; MOV(Mov_rm64_r64) [mem(64u,RDX:br,DS:sr),RCX]        encoding(3 bytes) = 48 89 0a
15adh mov ecx,[rax+8]               ; MOV(Mov_r32_rm32) [ECX,mem(32u,RAX:br,DS:sr)]        encoding(3 bytes) = 8b 48 08
15b0h mov [rsp+0F0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 f0 00 00 00
15b7h vmovdqu xmm0,xmmword ptr [rsp+0E8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 e8 00 00 00
15c0h vmovdqu xmmword ptr [rsp+0F8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 f8 00 00 00
15c9h cmp dword ptr [rsp+100h],0    ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),0h:imm32]  encoding(8 bytes) = 83 bc 24 00 01 00 00 00
15d1h jbe near ptr 1b0eh            ; JBE(Jbe_rel32_64) [1B0Eh:jmp64]                      encoding(6 bytes) = 0f 86 37 05 00 00
15d7h mov rcx,[rsp+0F8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 f8 00 00 00
15dfh movzx ecx,word ptr [rcx]      ; MOVZX(Movzx_r32_rm16) [ECX,mem(16u,RCX:br,DS:sr)]    encoding(3 bytes) = 0f b7 09
15e2h mov rdx,1ED458BF4B0h          ; MOV(Mov_r64_imm64) [RDX,1ed458bf4b0h:imm64]          encoding(10 bytes) = 48 ba b0 f4 8b 45 ed 01 00 00
15ech mov rdx,[rdx]                 ; MOV(Mov_r64_rm64) [RDX,mem(64u,RDX:br,DS:sr)]        encoding(3 bytes) = 48 8b 12
15efh mov edx,[rdx+18h]             ; MOV(Mov_r32_rm32) [EDX,mem(32u,RDX:br,DS:sr)]        encoding(3 bytes) = 8b 52 18
15f2h mov r8d,ecx                   ; MOV(Mov_r32_rm32) [R8D,ECX]                          encoding(3 bytes) = 44 8b c1
15f5h mov eax,edx                   ; MOV(Mov_r32_rm32) [EAX,EDX]                          encoding(2 bytes) = 8b c2
15f7h add r8,rax                    ; ADD(Add_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 03 c0
15fah mov eax,[rsp+120h]            ; MOV(Mov_r32_rm32) [EAX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 84 24 20 01 00 00
1601h cmp r8,rax                    ; CMP(Cmp_r64_rm64) [R8,RAX]                           encoding(3 bytes) = 4c 3b c0
1604h ja near ptr 1b02h             ; JA(Ja_rel32_64) [1B02h:jmp64]                        encoding(6 bytes) = 0f 87 f8 04 00 00
160ah mov r8,[rsp+118h]             ; MOV(Mov_r64_rm64) [R8,mem(64u,RSP:br,SS:sr)]         encoding(8 bytes) = 4c 8b 84 24 18 01 00 00
1612h lea rax,[rsp+0D0h]            ; LEA(Lea_r64_m) [RAX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 84 24 d0 00 00 00
161ah vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
161eh vmovdqu xmmword ptr [rax],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RAX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 00
1622h movsxd rcx,ecx                ; MOVSXD(Movsxd_r64_rm32) [RCX,ECX]                    encoding(3 bytes) = 48 63 c9
1625h add rcx,r8                    ; ADD(Add_r64_rm64) [RCX,R8]                           encoding(3 bytes) = 49 03 c8
1628h mov [rsp+0C8h],rcx            ; MOV(Mov_rm64_r64) [mem(64u,RSP:br,SS:sr),RCX]        encoding(8 bytes) = 48 89 8c 24 c8 00 00 00
1630h mov rcx,[rsp+0C8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 c8 00 00 00
1638h lea r8,[rsp+0D0h]             ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 84 24 d0 00 00 00
1640h mov [r8],rcx                  ; MOV(Mov_rm64_r64) [mem(64u,R8:br,DS:sr),RCX]         encoding(3 bytes) = 49 89 08
1643h mov [rsp+0D8h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 d8 00 00 00
164ah vmovdqu xmm0,xmmword ptr [rsp+0D0h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 d0 00 00 00
1653h vmovdqu xmmword ptr [rsp+108h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 08 01 00 00
165ch vmovdqu xmm0,xmmword ptr [rsp+108h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 08 01 00 00
1665h vmovdqu xmmword ptr [rsp+0B8h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 b8 00 00 00
166eh mov ecx,[rsp+130h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 30 01 00 00
1675h cmp ecx,[rsp+0C0h]            ; CMP(Cmp_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 3b 8c 24 c0 00 00 00
167ch ja near ptr 1b08h             ; JA(Ja_rel32_64) [1B08h:jmp64]                        encoding(6 bytes) = 0f 87 86 04 00 00
1682h mov rcx,[rsp+0B8h]            ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 8c 24 b8 00 00 00
168ah mov rdx,[rsp+128h]            ; MOV(Mov_r64_rm64) [RDX,mem(64u,RSP:br,SS:sr)]        encoding(8 bytes) = 48 8b 94 24 28 01 00 00
1692h mov r8d,[rsp+130h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 30 01 00 00
169ah movsxd r8,r8d                 ; MOVSXD(Movsxd_r64_rm32) [R8,R8D]                     encoding(3 bytes) = 4d 63 c0
169dh call 7FFE3AAF8F00h            ; CALL(Call_rel32_64) [5EB77AA0h:jmp64]                encoding(5 bytes) = e8 fe 63 b7 5e
16a2h mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
16ach mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
16b1h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 ca 1a 23 5f
16b6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
16b9h xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
16bbh mov [rsp+0B0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b0 00 00 00
16c2h lea rcx,[rsp+0B0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 b0 00 00 00
16cah mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
16d0h mov ecx,[rsp+0B0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 b0 00 00 00
16d7h mov [rsp+7C8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c8 07 00 00
16deh xor ecx,ecx                   ; XOR(Xor_r32_rm32) [ECX,ECX]                          encoding(2 bytes) = 33 c9
16e0h mov [rsp+0A8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 a8 00 00 00
16e7h lea rcx,[rsp+0A8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a8 00 00 00
16efh xor edx,edx                   ; XOR(Xor_r32_rm32) [EDX,EDX]                          encoding(2 bytes) = 33 d2
16f1h mov [rcx],edx                 ; MOV(Mov_rm32_r32) [mem(32u,RCX:br,DS:sr),EDX]        encoding(2 bytes) = 89 11
16f3h mov ecx,[rsp+0A8h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a8 00 00 00
16fah mov [rsp+7C0h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 c0 07 00 00
1701h mov [rsp+0A0h],edx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EDX]        encoding(7 bytes) = 89 94 24 a0 00 00 00
1708h lea rcx,[rsp+0A0h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 a0 00 00 00
1710h mov dword ptr [rcx],1         ; MOV(Mov_rm32_imm32) [mem(32u,RCX:br,DS:sr),1h:imm32] encoding(6 bytes) = c7 01 01 00 00 00
1716h mov ecx,[rsp+0A0h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 a0 00 00 00
171dh mov [rsp+7B8h],ecx            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),ECX]        encoding(7 bytes) = 89 8c 24 b8 07 00 00
1724h mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
1727h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
172bh mov edx,[rsp+7C8h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 c8 07 00 00
1732h mov r8d,[rsp+7C0h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 c0 07 00 00
173ah mov r9d,[rsp+7B8h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 b8 07 00 00
1742h call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
1745h mov [rsp+7B0h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 b0 07 00 00
174ch mov r9d,[rsp+7B0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 b0 07 00 00
1754h mov [rsp+98h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 98 00 00 00
175ch cmp dword ptr [rsp+98h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 98 00 00 00 01
1764h sete cl                       ; SETE(Sete_rm8) [CL]                                  encoding(3 bytes) = 0f 94 c1
1767h movzx ecx,cl                  ; MOVZX(Movzx_r32_rm8) [ECX,CL]                        encoding(3 bytes) = 0f b6 c9
176ah xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
176dh mov [rsp+90h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 90 00 00 00
1775h lea r9,[rsp+90h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 90 00 00 00
177dh mov dword ptr [r9],1          ; MOV(Mov_rm32_imm32) [mem(32u,R9:br,DS:sr),1h:imm32]  encoding(7 bytes) = 41 c7 01 01 00 00 00
1784h mov r9d,[rsp+90h]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 90 00 00 00
178ch mov [rsp+7A8h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 a8 07 00 00
1794h mov r9d,[rsp+7A8h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 a8 07 00 00
179ch mov [rsp+88h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 88 00 00 00
17a4h cmp dword ptr [rsp+88h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(8 bytes) = 83 bc 24 88 00 00 00 01
17ach sete dl                       ; SETE(Sete_rm8) [DL]                                  encoding(3 bytes) = 0f 94 c2
17afh movzx edx,dl                  ; MOVZX(Movzx_r32_rm8) [EDX,DL]                        encoding(3 bytes) = 0f b6 d2
17b2h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
17b5h mov [rsp+80h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 80 00 00 00
17bdh lea r9,[rsp+80h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(8 bytes) = 4c 8d 8c 24 80 00 00 00
17c5h xor r8d,r8d                   ; XOR(Xor_r32_rm32) [R8D,R8D]                          encoding(3 bytes) = 45 33 c0
17c8h mov [r9],r8d                  ; MOV(Mov_rm32_r32) [mem(32u,R9:br,DS:sr),R8D]         encoding(3 bytes) = 45 89 01
17cbh mov r9d,[rsp+80h]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 80 00 00 00
17d3h mov [rsp+7A0h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 a0 07 00 00
17dbh mov r9d,[rsp+7A0h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 a0 07 00 00
17e3h mov [rsp+78h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 78
17e8h cmp dword ptr [rsp+78h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(5 bytes) = 83 7c 24 78 01
17edh sete r8b                      ; SETE(Sete_rm8) [R8L]                                 encoding(4 bytes) = 41 0f 94 c0
17f1h movzx r8d,r8b                 ; MOVZX(Movzx_r32_rm8) [R8D,R8L]                       encoding(4 bytes) = 45 0f b6 c0
17f5h xor r9d,r9d                   ; XOR(Xor_r32_rm32) [R9D,R9D]                          encoding(3 bytes) = 45 33 c9
17f8h mov [rsp+70h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 70
17fdh lea r9,[rsp+70h]              ; LEA(Lea_r64_m) [R9,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 4c 24 70
1802h mov dword ptr [r9],1          ; MOV(Mov_rm32_imm32) [mem(32u,R9:br,DS:sr),1h:imm32]  encoding(7 bytes) = 41 c7 01 01 00 00 00
1809h mov r9d,[rsp+70h]             ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(5 bytes) = 44 8b 4c 24 70
180eh mov [rsp+798h],r9d            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(8 bytes) = 44 89 8c 24 98 07 00 00
1816h mov r9d,[rsp+798h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 98 07 00 00
181eh mov [rsp+68h],r9d             ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),R9D]        encoding(5 bytes) = 44 89 4c 24 68
1823h cmp dword ptr [rsp+68h],1     ; CMP(Cmp_rm32_imm8) [mem(32u,RSP:br,SS:sr),1h:imm32]  encoding(5 bytes) = 83 7c 24 68 01
1828h sete r9b                      ; SETE(Sete_rm8) [R9L]                                 encoding(4 bytes) = 41 0f 94 c1
182ch movzx r9d,r9b                 ; MOVZX(Movzx_r32_rm8) [R9D,R9L]                       encoding(4 bytes) = 45 0f b6 c9
1830h call 7FFDDBD5B640h            ; CALL(Call_rel32_64) [FFFFFFFFFFDDA1E0h:jmp64]        encoding(5 bytes) = e8 ab 89 dd ff
1835h mov [rdi+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),AL]            encoding(3 bytes) = 88 47 10
1838h lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
183dh vxorps xmm0,xmm0,xmm0         ; VXORPS(VEX_Vxorps_xmm_xmm_xmmm128) [XMM0,XMM0,XMM0]  encoding(VEX, 4 bytes) = c5 f8 57 c0
1841h vmovdqu xmmword ptr [rcx],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RCX:br,DS:sr),XMM0] encoding(VEX, 4 bytes) = c5 fa 7f 01
1845h lea rcx,[rsp+48h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 48
184ah mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
184dh call 7FFDDBD4AAE0h            ; CALL(Call_rel32_64) [FFFFFFFFFFDC9680h:jmp64]        encoding(5 bytes) = e8 2e 7e dc ff
1852h lea rcx,[rsp+58h]             ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 4c 24 58
1857h vmovdqu xmm0,xmmword ptr [rsp+48h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 48
185dh vmovdqu xmmword ptr [rsp+38h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 38
1863h lea rdx,[rsp+38h]             ; LEA(Lea_r64_m) [RDX,mem(Unknown,RSP:br,SS:sr)]       encoding(5 bytes) = 48 8d 54 24 38
1868h call 7FFDDBF81330h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFFED0h:jmp64]        encoding(5 bytes) = e8 63 e6 ff ff
186dh vmovdqu xmm0,xmmword ptr [rsp+58h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 6 bytes) = c5 fa 6f 44 24 58
1873h vmovdqu xmmword ptr [rsp+788h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 9 bytes) = c5 fa 7f 84 24 88 07 00 00
187ch lea rcx,[rsp+938h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 09 00 00
1884h vmovdqu xmm0,xmmword ptr [rsp+788h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 88 07 00 00
188dh vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
1893h lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
1898h mov edx,5                     ; MOV(Mov_r32_imm32) [EDX,5h:imm32]                    encoding(5 bytes) = ba 05 00 00 00
189dh call 7FFDDBF80740h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF2E0h:jmp64]        encoding(5 bytes) = e8 3e da ff ff
18a2h mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
18ach mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
18b1h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 ca 18 23 5f
18b6h mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
18b9h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 0a 3c df ff
18beh mov [rsp+780h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 80 07 00 00
18c5h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 fe 3b df ff
18cah mov [rsp+778h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 78 07 00 00
18d1h call 7FFDDBD76930h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54D0h:jmp64]        encoding(5 bytes) = e8 fa 3b df ff
18d6h mov [rsp+770h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 70 07 00 00
18ddh mov rax,rsi                   ; MOV(Mov_r64_rm64) [RAX,RSI]                          encoding(3 bytes) = 48 8b c6
18e0h mov rcx,[rax+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RAX:br,DS:sr)]        encoding(4 bytes) = 48 8b 48 08
18e4h mov edx,[rsp+780h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 80 07 00 00
18ebh mov r8d,[rsp+778h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 78 07 00 00
18f3h mov r9d,[rsp+770h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 70 07 00 00
18fbh call qword ptr [rax+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RAX:br,DS:sr)]      encoding(3 bytes) = ff 50 18
18feh mov [rsp+768h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 68 07 00 00
1905h mov ecx,[rsp+768h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 68 07 00 00
190ch call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 df 3b df ff
1911h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
1913h call 7FFDDBD76930h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54D0h:jmp64]        encoding(5 bytes) = e8 b8 3b df ff
1918h mov [rsp+760h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 60 07 00 00
191fh mov ecx,[rsp+760h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 60 07 00 00
1926h call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 c5 3b df ff
192bh mov r14d,eax                  ; MOV(Mov_r32_rm32) [R14D,EAX]                         encoding(3 bytes) = 44 8b f0
192eh call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 95 3b df ff
1933h mov [rsp+758h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 58 07 00 00
193ah mov ecx,[rsp+758h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 58 07 00 00
1941h call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 aa 3b df ff
1946h mov r15d,eax                  ; MOV(Mov_r32_rm32) [R15D,EAX]                         encoding(3 bytes) = 44 8b f8
1949h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 7a 3b df ff
194eh mov [rsp+750h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 50 07 00 00
1955h mov ecx,[rsp+750h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 50 07 00 00
195ch call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 8f 3b df ff
1961h mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
1964h mov edx,r14d                  ; MOV(Mov_r32_rm32) [EDX,R14D]                         encoding(3 bytes) = 41 8b d6
1967h mov r8d,r15d                  ; MOV(Mov_r32_rm32) [R8D,R15D]                         encoding(3 bytes) = 45 8b c7
196ah mov ecx,ebp                   ; MOV(Mov_r32_rm32) [ECX,EBP]                          encoding(2 bytes) = 8b cd
196ch call 7FFDDBD5B640h            ; CALL(Call_rel32_64) [FFFFFFFFFFDDA1E0h:jmp64]        encoding(5 bytes) = e8 6f 88 dd ff
1971h mov [rdi+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),AL]            encoding(3 bytes) = 88 47 10
1974h lea rcx,[rsp+740h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 40 07 00 00
197ch mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
197fh call 7FFDDBF80830h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF3D0h:jmp64]        encoding(5 bytes) = e8 4c da ff ff
1984h lea rcx,[rsp+938h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 09 00 00
198ch vmovdqu xmm0,xmmword ptr [rsp+740h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 40 07 00 00
1995h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
199bh lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
19a0h mov edx,6                     ; MOV(Mov_r32_imm32) [EDX,6h:imm32]                    encoding(5 bytes) = ba 06 00 00 00
19a5h call 7FFDDBF80740h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF2E0h:jmp64]        encoding(5 bytes) = e8 36 d9 ff ff
19aah mov rcx,7FFDDB66EA10h         ; MOV(Mov_r64_imm64) [RCX,7ffddb66ea10h:imm64]         encoding(10 bytes) = 48 b9 10 ea 66 db fd 7f 00 00
19b4h mov edx,1                     ; MOV(Mov_r32_imm32) [EDX,1h:imm32]                    encoding(5 bytes) = ba 01 00 00 00
19b9h call 7FFE3B1B45E0h            ; CALL(Call_rel32_64) [5F233180h:jmp64]                encoding(5 bytes) = e8 c2 17 23 5f
19beh mov rdi,rax                   ; MOV(Mov_r64_rm64) [RDI,RAX]                          encoding(3 bytes) = 48 8b f8
19c1h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 02 3b df ff
19c6h mov [rsp+738h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 38 07 00 00
19cdh call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 f6 3a df ff
19d2h mov [rsp+730h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 30 07 00 00
19d9h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 ea 3a df ff
19deh mov [rsp+728h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 28 07 00 00
19e5h mov rcx,[rsi+8]               ; MOV(Mov_r64_rm64) [RCX,mem(64u,RSI:br,DS:sr)]        encoding(4 bytes) = 48 8b 4e 08
19e9h mov edx,[rsp+738h]            ; MOV(Mov_r32_rm32) [EDX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 94 24 38 07 00 00
19f0h mov r8d,[rsp+730h]            ; MOV(Mov_r32_rm32) [R8D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 84 24 30 07 00 00
19f8h mov r9d,[rsp+728h]            ; MOV(Mov_r32_rm32) [R9D,mem(32u,RSP:br,SS:sr)]        encoding(8 bytes) = 44 8b 8c 24 28 07 00 00
1a00h call qword ptr [rsi+18h]      ; CALL(Call_rm64) [mem(QwordOffset,RSI:br,DS:sr)]      encoding(3 bytes) = ff 56 18
1a03h mov [rsp+720h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 20 07 00 00
1a0ah mov ecx,[rsp+720h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 20 07 00 00
1a11h call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 da 3a df ff
1a16h mov esi,eax                   ; MOV(Mov_r32_rm32) [ESI,EAX]                          encoding(2 bytes) = 8b f0
1a18h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 ab 3a df ff
1a1dh mov [rsp+718h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 18 07 00 00
1a24h mov ecx,[rsp+718h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 18 07 00 00
1a2bh call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 c0 3a df ff
1a30h mov ebp,eax                   ; MOV(Mov_r32_rm32) [EBP,EAX]                          encoding(2 bytes) = 8b e8
1a32h call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 91 3a df ff
1a37h mov [rsp+710h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 10 07 00 00
1a3eh mov ecx,[rsp+710h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 10 07 00 00
1a45h call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 a6 3a df ff
1a4ah mov r14d,eax                  ; MOV(Mov_r32_rm32) [R14D,EAX]                         encoding(3 bytes) = 44 8b f0
1a4dh call 7FFDDBD76928h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54C8h:jmp64]        encoding(5 bytes) = e8 76 3a df ff
1a52h mov [rsp+708h],eax            ; MOV(Mov_rm32_r32) [mem(32u,RSP:br,SS:sr),EAX]        encoding(7 bytes) = 89 84 24 08 07 00 00
1a59h mov ecx,[rsp+708h]            ; MOV(Mov_r32_rm32) [ECX,mem(32u,RSP:br,SS:sr)]        encoding(7 bytes) = 8b 8c 24 08 07 00 00
1a60h call 7FFDDBD76950h            ; CALL(Call_rel32_64) [FFFFFFFFFFDF54F0h:jmp64]        encoding(5 bytes) = e8 8b 3a df ff
1a65h mov r9d,eax                   ; MOV(Mov_r32_rm32) [R9D,EAX]                          encoding(3 bytes) = 44 8b c8
1a68h mov edx,ebp                   ; MOV(Mov_r32_rm32) [EDX,EBP]                          encoding(2 bytes) = 8b d5
1a6ah mov r8d,r14d                  ; MOV(Mov_r32_rm32) [R8D,R14D]                         encoding(3 bytes) = 45 8b c6
1a6dh mov ecx,esi                   ; MOV(Mov_r32_rm32) [ECX,ESI]                          encoding(2 bytes) = 8b ce
1a6fh call 7FFDDBD5B640h            ; CALL(Call_rel32_64) [FFFFFFFFFFDDA1E0h:jmp64]        encoding(5 bytes) = e8 6c 87 dd ff
1a74h mov [rdi+10h],al              ; MOV(Mov_rm8_r8) [mem(8u,RDI:br,DS:sr),AL]            encoding(3 bytes) = 88 47 10
1a77h lea rcx,[rsp+6F8h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 f8 06 00 00
1a7fh mov rdx,rdi                   ; MOV(Mov_r64_rm64) [RDX,RDI]                          encoding(3 bytes) = 48 8b d7
1a82h call 7FFDDBF80830h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF3D0h:jmp64]        encoding(5 bytes) = e8 49 d9 ff ff
1a87h lea rcx,[rsp+938h]            ; LEA(Lea_r64_m) [RCX,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d 8c 24 38 09 00 00
1a8fh vmovdqu xmm0,xmmword ptr [rsp+6F8h]; VMOVDQU(VEX_Vmovdqu_xmm_xmmm128) [XMM0,mem(Packed128_Int32,RSP:br,SS:sr)] encoding(VEX, 9 bytes) = c5 fa 6f 84 24 f8 06 00 00
1a98h vmovdqu xmmword ptr [rsp+28h],xmm0; VMOVDQU(VEX_Vmovdqu_xmmm128_xmm) [mem(Packed128_Int32,RSP:br,SS:sr),XMM0] encoding(VEX, 6 bytes) = c5 fa 7f 44 24 28
1a9eh lea r8,[rsp+28h]              ; LEA(Lea_r64_m) [R8,mem(Unknown,RSP:br,SS:sr)]        encoding(5 bytes) = 4c 8d 44 24 28
1aa3h mov edx,7                     ; MOV(Mov_r32_imm32) [EDX,7h:imm32]                    encoding(5 bytes) = ba 07 00 00 00
1aa8h call 7FFDDBF80740h            ; CALL(Call_rel32_64) [FFFFFFFFFFFFF2E0h:jmp64]        encoding(5 bytes) = e8 33 d8 ff ff
1aadh mov rdi,rbx                   ; MOV(Mov_r64_rm64) [RDI,RBX]                          encoding(3 bytes) = 48 8b fb
1ab0h lea rsi,[rsp+938h]            ; LEA(Lea_r64_m) [RSI,mem(Unknown,RSP:br,SS:sr)]       encoding(8 bytes) = 48 8d b4 24 38 09 00 00
1ab8h call 7FFE3B1B3690h            ; CALL(Call_rel32_64) [5F232230h:jmp64]                encoding(5 bytes) = e8 73 07 23 5f
1abdh movsq                         ; MOVSQ(Movsq_m64_m64) [mem(64u),mem(64u,DS:sr)]       encoding(2 bytes) = 48 a5
1abfh mov rax,rbx                   ; MOV(Mov_r64_rm64) [RAX,RBX]                          encoding(3 bytes) = 48 8b c3
1ac2h add rsp,948h                  ; ADD(Add_rm64_imm32) [RSP,948h:imm64]                 encoding(7 bytes) = 48 81 c4 48 09 00 00
1ac9h pop rbx                       ; POP(Pop_r64) [RBX]                                   encoding(1 byte ) = 5b
1acah pop rbp                       ; POP(Pop_r64) [RBP]                                   encoding(1 byte ) = 5d
1acbh pop rsi                       ; POP(Pop_r64) [RSI]                                   encoding(1 byte ) = 5e
1acch pop rdi                       ; POP(Pop_r64) [RDI]                                   encoding(1 byte ) = 5f
1acdh pop r14                       ; POP(Pop_r64) [R14]                                   encoding(2 bytes) = 41 5e
1acfh pop r15                       ; POP(Pop_r64) [R15]                                   encoding(2 bytes) = 41 5f
1ad1h ret                           ; RET(Retnq)                                           encoding(1 byte ) = c3
1ad2h call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732240h:jmp64]        encoding(5 bytes) = e8 69 07 73 ff
1ad7h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ad8h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732248h:jmp64]        encoding(5 bytes) = e8 6b 07 73 ff
1addh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1adeh call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732240h:jmp64]        encoding(5 bytes) = e8 5d 07 73 ff
1ae3h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1ae4h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732248h:jmp64]        encoding(5 bytes) = e8 5f 07 73 ff
1ae9h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1aeah call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732240h:jmp64]        encoding(5 bytes) = e8 51 07 73 ff
1aefh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1af0h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732248h:jmp64]        encoding(5 bytes) = e8 53 07 73 ff
1af5h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1af6h call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732240h:jmp64]        encoding(5 bytes) = e8 45 07 73 ff
1afbh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1afch call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732248h:jmp64]        encoding(5 bytes) = e8 47 07 73 ff
1b01h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1b02h call 7FFDDB6B36A0h            ; CALL(Call_rel32_64) [FFFFFFFFFF732240h:jmp64]        encoding(5 bytes) = e8 39 07 73 ff
1b07h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1b08h call 7FFDDB6B36A8h            ; CALL(Call_rel32_64) [FFFFFFFFFF732248h:jmp64]        encoding(5 bytes) = e8 3b 07 73 ff
1b0dh int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
1b0eh call 7FFE3B2DEF00h            ; CALL(Call_rel32_64) [5F35DAA0h:jmp64]                encoding(5 bytes) = e8 8d bf 35 5f
1b13h int 3                         ; INT(Int3)                                            encoding(1 byte ) = cc
; static ReadOnlySpan<byte> tableBytes => new byte[6932]{0x41,0x57,0x41,0x56,0x57,0x56,0x55,0x53,0x48,0x81,0xEC,0x48,0x09,0x00,0x00,0xC5,0xF8,0x77,0x48,0x8B,0xF1,0x48,0x8D,0x7C,0x24,0x28,0xB9,0x48,0x02,0x00,0x00,0x33,0xC0,0xF3,0xAB,0x48,0x8B,0xCE,0x48,0x8B,0xD9,0x8B,0xF2,0x48,0xB9,0xB8,0x87,0x7F,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0xE8,0x41,0xDF,0x1F,0x5F,0x48,0xBA,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x1C,0x48,0x63,0xD2,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xE8,0x1F,0x31,0x23,0x5F,0x48,0x8D,0x8C,0x24,0xD8,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xD0,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD0,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xD8,0x06,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xE0,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x09,0x00,0x00,0x40,0x0F,0xB6,0xCE,0xE8,0x59,0xCF,0xFF,0xFF,0x48,0x8B,0xF0,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xA2,0x30,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0xC8,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC8,0x06,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x8C,0x24,0xC8,0x06,0x00,0x00,0x89,0x8C,0x24,0x30,0x09,0x00,0x00,0x89,0x94,0x24,0xC0,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0xC0,0x06,0x00,0x00,0x89,0x11,0x8B,0x8C,0x24,0xC0,0x06,0x00,0x00,0x89,0x8C,0x24,0x28,0x09,0x00,0x00,0x89,0x94,0x24,0xB8,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB8,0x06,0x00,0x00,0x89,0x11,0x8B,0x8C,0x24,0xB8,0x06,0x00,0x00,0x89,0x8C,0x24,0x20,0x09,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x30,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x09,0x00,0x00,0x44,0x8B,0x8C,0x24,0x20,0x09,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x18,0x09,0x00,0x00,0x8B,0x8C,0x24,0x18,0x09,0x00,0x00,0x89,0x8C,0x24,0xB0,0x06,0x00,0x00,0x83,0xBC,0x24,0xB0,0x06,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xA8,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0xA8,0x06,0x00,0x00,0x33,0xC0,0x89,0x02,0x8B,0x94,0x24,0xA8,0x06,0x00,0x00,0x89,0x94,0x24,0x10,0x09,0x00,0x00,0x8B,0x94,0x24,0x10,0x09,0x00,0x00,0x89,0x94,0x24,0xA0,0x06,0x00,0x00,0x83,0xBC,0x24,0xA0,0x06,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x89,0x84,0x24,0x98,0x06,0x00,0x00,0x48,0x8D,0x84,0x24,0x98,0x06,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x00,0x8B,0x84,0x24,0x98,0x06,0x00,0x00,0x89,0x84,0x24,0x08,0x09,0x00,0x00,0x8B,0x84,0x24,0x08,0x09,0x00,0x00,0x89,0x84,0x24,0x90,0x06,0x00,0x00,0x83,0xBC,0x24,0x90,0x06,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x44,0x89,0x84,0x24,0x88,0x06,0x00,0x00,0x4C,0x8D,0x84,0x24,0x88,0x06,0x00,0x00,0x45,0x33,0xC9,0x45,0x89,0x08,0x44,0x8B,0x84,0x24,0x88,0x06,0x00,0x00,0x44,0x89,0x84,0x24,0x00,0x09,0x00,0x00,0x44,0x8B,0x84,0x24,0x00,0x09,0x00,0x00,0x44,0x89,0x84,0x24,0x80,0x06,0x00,0x00,0x44,0x89,0x8C,0x24,0x7C,0x06,0x00,0x00,0x44,0x89,0x8C,0x24,0x78,0x06,0x00,0x00,0x44,0x89,0x8C,0x24,0x74,0x06,0x00,0x00,0x44,0x89,0x8C,0x24,0x74,0x06,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x74,0x06,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x74,0x06,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x74,0x06,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x74,0x06,0x00,0x00,0x8B,0x8C,0x24,0x74,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x78,0x06,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x78,0x06,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x78,0x06,0x00,0x00,0x8B,0x8C,0x24,0x78,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x7C,0x06,0x00,0x00,0x83,0xBC,0x24,0x80,0x06,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x7C,0x06,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x7C,0x06,0x00,0x00,0x8B,0x8C,0x24,0x7C,0x06,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x60,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x40,0x06,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x38,0x06,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x06,0x00,0x00,0x48,0x8D,0x94,0x24,0x40,0x06,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x48,0x06,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x06,0x00,0x00,0x48,0x8D,0x8C,0x24,0x60,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x50,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x6C,0xFB,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x06,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x05,0x00,0x00,0x48,0xB9,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x38,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0x33,0xD2,0x39,0x09,0xFF,0x15,0xF5,0xF5,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0xC8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xC8,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xC0,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC0,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0xC8,0x05,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xD0,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xC8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD8,0x05,0x00,0x00,0x83,0xBC,0x24,0xE0,0x05,0x00,0x00,0x00,0x0F,0x86,0xBB,0x16,0x00,0x00,0x48,0x8B,0x8C,0x24,0xD8,0x05,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x00,0x06,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x4C,0x16,0x00,0x00,0x4C,0x8B,0x84,0x24,0xF8,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0xB0,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xA8,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA8,0x05,0x00,0x00,0x4C,0x8D,0x84,0x24,0xB0,0x05,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xB8,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE8,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x05,0x00,0x00,0x8B,0x8C,0x24,0x10,0x06,0x00,0x00,0x3B,0x8C,0x24,0xA0,0x05,0x00,0x00,0x0F,0x87,0xDA,0x15,0x00,0x00,0x48,0x8B,0x8C,0x24,0x98,0x05,0x00,0x00,0x48,0x8B,0x94,0x24,0x08,0x06,0x00,0x00,0x44,0x8B,0x84,0x24,0x10,0x06,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x82,0x75,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x4E,0x2C,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x90,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0x90,0x05,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x8C,0x24,0x90,0x05,0x00,0x00,0x89,0x8C,0x24,0xE8,0x08,0x00,0x00,0x89,0x94,0x24,0x88,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0x88,0x05,0x00,0x00,0x89,0x11,0x8B,0x8C,0x24,0x88,0x05,0x00,0x00,0x89,0x8C,0x24,0xE0,0x08,0x00,0x00,0x89,0x94,0x24,0x80,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0x80,0x05,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x80,0x05,0x00,0x00,0x89,0x8C,0x24,0xD8,0x08,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xE8,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0xE0,0x08,0x00,0x00,0x44,0x8B,0x8C,0x24,0xD8,0x08,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xD0,0x08,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x08,0x00,0x00,0x89,0x8C,0x24,0x78,0x05,0x00,0x00,0x83,0xBC,0x24,0x78,0x05,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x70,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x70,0x05,0x00,0x00,0x33,0xC0,0x89,0x02,0x8B,0x94,0x24,0x70,0x05,0x00,0x00,0x89,0x94,0x24,0xC8,0x08,0x00,0x00,0x8B,0x94,0x24,0xC8,0x08,0x00,0x00,0x89,0x94,0x24,0x68,0x05,0x00,0x00,0x83,0xBC,0x24,0x68,0x05,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x89,0x84,0x24,0x60,0x05,0x00,0x00,0x48,0x8D,0x84,0x24,0x60,0x05,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x00,0x8B,0x84,0x24,0x60,0x05,0x00,0x00,0x89,0x84,0x24,0xC0,0x08,0x00,0x00,0x8B,0x84,0x24,0xC0,0x08,0x00,0x00,0x89,0x84,0x24,0x58,0x05,0x00,0x00,0x83,0xBC,0x24,0x58,0x05,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x44,0x89,0x84,0x24,0x50,0x05,0x00,0x00,0x4C,0x8D,0x84,0x24,0x50,0x05,0x00,0x00,0x41,0xC7,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0x50,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0xB8,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0xB8,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x48,0x05,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x44,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x40,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x3C,0x05,0x00,0x00,0x44,0x89,0x84,0x24,0x3C,0x05,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x3C,0x05,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x3C,0x05,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x3C,0x05,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x3C,0x05,0x00,0x00,0x8B,0x8C,0x24,0x3C,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x40,0x05,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x40,0x05,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x40,0x05,0x00,0x00,0x8B,0x8C,0x24,0x40,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x44,0x05,0x00,0x00,0x83,0xBC,0x24,0x48,0x05,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x44,0x05,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x44,0x05,0x00,0x00,0x8B,0x8C,0x24,0x44,0x05,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x28,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x08,0x05,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x00,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x05,0x00,0x00,0x48,0x8D,0x94,0x24,0x08,0x05,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x10,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x05,0x00,0x00,0x48,0x8D,0x8C,0x24,0x28,0x05,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x10,0xF7,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x28,0x05,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xC0,0x04,0x00,0x00,0x48,0xB9,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x40,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x9E,0xF1,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0x90,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x90,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x88,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x88,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x90,0x04,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x98,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x90,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA0,0x04,0x00,0x00,0x83,0xBC,0x24,0xA8,0x04,0x00,0x00,0x00,0x0F,0x86,0x5C,0x12,0x00,0x00,0x48,0x8B,0x8C,0x24,0xA0,0x04,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0xC8,0x04,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xF9,0x11,0x00,0x00,0x4C,0x8B,0x84,0x24,0xC0,0x04,0x00,0x00,0x48,0x8D,0x84,0x24,0x78,0x04,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x70,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0x70,0x04,0x00,0x00,0x4C,0x8D,0x84,0x24,0x78,0x04,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x80,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB0,0x04,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB0,0x04,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x04,0x00,0x00,0x8B,0x8C,0x24,0xD8,0x04,0x00,0x00,0x3B,0x8C,0x24,0x68,0x04,0x00,0x00,0x0F,0x87,0x87,0x11,0x00,0x00,0x48,0x8B,0x8C,0x24,0x60,0x04,0x00,0x00,0x48,0x8B,0x94,0x24,0xD0,0x04,0x00,0x00,0x44,0x8B,0x84,0x24,0xD8,0x04,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x23,0x71,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xEF,0x27,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x58,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0x58,0x04,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x8C,0x24,0x58,0x04,0x00,0x00,0x89,0x8C,0x24,0xA0,0x08,0x00,0x00,0x89,0x94,0x24,0x50,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0x50,0x04,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x50,0x04,0x00,0x00,0x89,0x8C,0x24,0x98,0x08,0x00,0x00,0x89,0x94,0x24,0x48,0x04,0x00,0x00,0x48,0x8D,0x8C,0x24,0x48,0x04,0x00,0x00,0x89,0x11,0x8B,0x8C,0x24,0x48,0x04,0x00,0x00,0x89,0x8C,0x24,0x90,0x08,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xA0,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x98,0x08,0x00,0x00,0x44,0x8B,0x8C,0x24,0x90,0x08,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x88,0x08,0x00,0x00,0x8B,0x8C,0x24,0x88,0x08,0x00,0x00,0x89,0x8C,0x24,0x40,0x04,0x00,0x00,0x83,0xBC,0x24,0x40,0x04,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x38,0x04,0x00,0x00,0x48,0x8D,0x94,0x24,0x38,0x04,0x00,0x00,0x33,0xC0,0x89,0x02,0x8B,0x94,0x24,0x38,0x04,0x00,0x00,0x89,0x94,0x24,0x80,0x08,0x00,0x00,0x8B,0x94,0x24,0x80,0x08,0x00,0x00,0x89,0x94,0x24,0x30,0x04,0x00,0x00,0x83,0xBC,0x24,0x30,0x04,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x89,0x84,0x24,0x28,0x04,0x00,0x00,0x48,0x8D,0x84,0x24,0x28,0x04,0x00,0x00,0xC7,0x00,0x01,0x00,0x00,0x00,0x8B,0x84,0x24,0x28,0x04,0x00,0x00,0x89,0x84,0x24,0x78,0x08,0x00,0x00,0x8B,0x84,0x24,0x78,0x08,0x00,0x00,0x89,0x84,0x24,0x20,0x04,0x00,0x00,0x83,0xBC,0x24,0x20,0x04,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0x18,0x04,0x00,0x00,0x4C,0x8D,0x84,0x24,0x18,0x04,0x00,0x00,0x45,0x33,0xC9,0x45,0x89,0x08,0x44,0x8B,0x84,0x24,0x18,0x04,0x00,0x00,0x44,0x89,0x84,0x24,0x70,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x70,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0x10,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0x0C,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0x08,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0x04,0x04,0x00,0x00,0x44,0x89,0x8C,0x24,0x04,0x04,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x04,0x04,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x04,0x04,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x04,0x04,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x04,0x04,0x00,0x00,0x8B,0x8C,0x24,0x04,0x04,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x08,0x04,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x08,0x04,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x08,0x04,0x00,0x00,0x8B,0x8C,0x24,0x08,0x04,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x0C,0x04,0x00,0x00,0x83,0xBC,0x24,0x10,0x04,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x0C,0x04,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x0C,0x04,0x00,0x00,0x8B,0x8C,0x24,0x0C,0x04,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xF0,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0xD0,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0xC8,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0xD0,0x03,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xD8,0x03,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xE0,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0xF0,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE0,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0xB2,0xF2,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xF0,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x98,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x03,0x00,0x00,0x48,0xB9,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x48,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x02,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x48,0xED,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0x58,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x58,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x50,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x50,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x58,0x03,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x60,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x58,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x68,0x03,0x00,0x00,0x83,0xBC,0x24,0x70,0x03,0x00,0x00,0x00,0x0F,0x86,0xFE,0x0D,0x00,0x00,0x48,0x8B,0x8C,0x24,0x68,0x03,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x90,0x03,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xA7,0x0D,0x00,0x00,0x4C,0x8B,0x84,0x24,0x88,0x03,0x00,0x00,0x48,0x8D,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x38,0x03,0x00,0x00,0x48,0x8B,0x8C,0x24,0x38,0x03,0x00,0x00,0x4C,0x8D,0x84,0x24,0x40,0x03,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x48,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x78,0x03,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x03,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x03,0x00,0x00,0x3B,0x8C,0x24,0x30,0x03,0x00,0x00,0x0F,0x87,0x35,0x0D,0x00,0x00,0x48,0x8B,0x8C,0x24,0x28,0x03,0x00,0x00,0x48,0x8B,0x94,0x24,0x98,0x03,0x00,0x00,0x44,0x8B,0x84,0x24,0xA0,0x03,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xC5,0x6C,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x91,0x23,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0x20,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x20,0x03,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x8C,0x24,0x20,0x03,0x00,0x00,0x89,0x8C,0x24,0x58,0x08,0x00,0x00,0x89,0x94,0x24,0x18,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x18,0x03,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x18,0x03,0x00,0x00,0x89,0x8C,0x24,0x50,0x08,0x00,0x00,0x89,0x94,0x24,0x10,0x03,0x00,0x00,0x48,0x8D,0x8C,0x24,0x10,0x03,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0x10,0x03,0x00,0x00,0x89,0x8C,0x24,0x48,0x08,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x58,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x50,0x08,0x00,0x00,0x44,0x8B,0x8C,0x24,0x48,0x08,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x40,0x08,0x00,0x00,0x8B,0x8C,0x24,0x40,0x08,0x00,0x00,0x89,0x8C,0x24,0x08,0x03,0x00,0x00,0x83,0xBC,0x24,0x08,0x03,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0x00,0x03,0x00,0x00,0x48,0x8D,0x94,0x24,0x00,0x03,0x00,0x00,0x33,0xC0,0x89,0x02,0x8B,0x94,0x24,0x00,0x03,0x00,0x00,0x89,0x94,0x24,0x38,0x08,0x00,0x00,0x8B,0x94,0x24,0x38,0x08,0x00,0x00,0x89,0x94,0x24,0xF8,0x02,0x00,0x00,0x83,0xBC,0x24,0xF8,0x02,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x89,0x84,0x24,0xF0,0x02,0x00,0x00,0x48,0x8D,0x84,0x24,0xF0,0x02,0x00,0x00,0xC7,0x00,0x01,0x00,0x00,0x00,0x8B,0x84,0x24,0xF0,0x02,0x00,0x00,0x89,0x84,0x24,0x30,0x08,0x00,0x00,0x8B,0x84,0x24,0x30,0x08,0x00,0x00,0x89,0x84,0x24,0xE8,0x02,0x00,0x00,0x83,0xBC,0x24,0xE8,0x02,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xE0,0x02,0x00,0x00,0x4C,0x8D,0x84,0x24,0xE0,0x02,0x00,0x00,0x41,0xC7,0x00,0x01,0x00,0x00,0x00,0x44,0x8B,0x84,0x24,0xE0,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0x28,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x28,0x08,0x00,0x00,0x44,0x89,0x84,0x24,0xD8,0x02,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x84,0x24,0xD4,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xD0,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xCC,0x02,0x00,0x00,0x44,0x89,0x84,0x24,0xCC,0x02,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xCC,0x02,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0xCC,0x02,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xCC,0x02,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0xCC,0x02,0x00,0x00,0x8B,0x8C,0x24,0xCC,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xD0,0x02,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0xD0,0x02,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0xD0,0x02,0x00,0x00,0x8B,0x8C,0x24,0xD0,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0xD4,0x02,0x00,0x00,0x83,0xBC,0x24,0xD8,0x02,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0xD4,0x02,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0xD4,0x02,0x00,0x00,0x8B,0x8C,0x24,0xD4,0x02,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0xB8,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x98,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x90,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x90,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0x98,0x02,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0xA0,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x98,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xA8,0x02,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB8,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xA8,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x4C,0xEE,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0xB8,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x08,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x18,0x08,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x80,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x60,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x50,0x02,0x00,0x00,0x48,0xB9,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x50,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x03,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0xEA,0xE8,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0x20,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0x20,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0x18,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x18,0x02,0x00,0x00,0x48,0x8D,0x94,0x24,0x20,0x02,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0x28,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x20,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x30,0x02,0x00,0x00,0x83,0xBC,0x24,0x38,0x02,0x00,0x00,0x00,0x0F,0x86,0x98,0x09,0x00,0x00,0x48,0x8B,0x8C,0x24,0x30,0x02,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x58,0x02,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0x4D,0x09,0x00,0x00,0x4C,0x8B,0x84,0x24,0x50,0x02,0x00,0x00,0x48,0x8D,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0x00,0x02,0x00,0x00,0x48,0x8B,0x8C,0x24,0x00,0x02,0x00,0x00,0x4C,0x8D,0x84,0x24,0x08,0x02,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0x10,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x40,0x02,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x02,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF0,0x01,0x00,0x00,0x8B,0x8C,0x24,0x68,0x02,0x00,0x00,0x3B,0x8C,0x24,0xF8,0x01,0x00,0x00,0x0F,0x87,0xDB,0x08,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF0,0x01,0x00,0x00,0x48,0x8B,0x94,0x24,0x60,0x02,0x00,0x00,0x44,0x8B,0x84,0x24,0x68,0x02,0x00,0x00,0x4D,0x63,0xC0,0xE8,0x5F,0x68,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0x2B,0x1F,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0xE8,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE8,0x01,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xE8,0x01,0x00,0x00,0x89,0x8C,0x24,0x10,0x08,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xE0,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0xE0,0x01,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x8C,0x24,0xE0,0x01,0x00,0x00,0x89,0x8C,0x24,0x08,0x08,0x00,0x00,0x89,0x94,0x24,0xD8,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0xD8,0x01,0x00,0x00,0x89,0x11,0x8B,0x8C,0x24,0xD8,0x01,0x00,0x00,0x89,0x8C,0x24,0x00,0x08,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x10,0x08,0x00,0x00,0x44,0x8B,0x84,0x24,0x08,0x08,0x00,0x00,0x44,0x8B,0x8C,0x24,0x00,0x08,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xF8,0x07,0x00,0x00,0x8B,0x8C,0x24,0xF8,0x07,0x00,0x00,0x89,0x8C,0x24,0xD0,0x01,0x00,0x00,0x83,0xBC,0x24,0xD0,0x01,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x33,0xD2,0x89,0x94,0x24,0xC8,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0xC8,0x01,0x00,0x00,0xC7,0x02,0x01,0x00,0x00,0x00,0x8B,0x94,0x24,0xC8,0x01,0x00,0x00,0x89,0x94,0x24,0xF0,0x07,0x00,0x00,0x8B,0x94,0x24,0xF0,0x07,0x00,0x00,0x89,0x94,0x24,0xC0,0x01,0x00,0x00,0x83,0xBC,0x24,0xC0,0x01,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x33,0xC0,0x89,0x84,0x24,0xB8,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0xB8,0x01,0x00,0x00,0x45,0x33,0xC0,0x44,0x89,0x00,0x8B,0x84,0x24,0xB8,0x01,0x00,0x00,0x89,0x84,0x24,0xE8,0x07,0x00,0x00,0x8B,0x84,0x24,0xE8,0x07,0x00,0x00,0x89,0x84,0x24,0xB0,0x01,0x00,0x00,0x83,0xBC,0x24,0xB0,0x01,0x00,0x00,0x01,0x0F,0x94,0xC0,0x0F,0xB6,0xC0,0x44,0x89,0x84,0x24,0xA8,0x01,0x00,0x00,0x4C,0x8D,0x84,0x24,0xA8,0x01,0x00,0x00,0x45,0x33,0xC9,0x45,0x89,0x08,0x44,0x8B,0x84,0x24,0xA8,0x01,0x00,0x00,0x44,0x89,0x84,0x24,0xE0,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0xE0,0x07,0x00,0x00,0x44,0x89,0x84,0x24,0xA0,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x9C,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x98,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x94,0x01,0x00,0x00,0x44,0x89,0x8C,0x24,0x94,0x01,0x00,0x00,0x84,0xC9,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x94,0x01,0x00,0x00,0x83,0xC9,0x01,0x88,0x8C,0x24,0x94,0x01,0x00,0x00,0x84,0xD2,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x94,0x01,0x00,0x00,0x83,0xC9,0x02,0x88,0x8C,0x24,0x94,0x01,0x00,0x00,0x8B,0x8C,0x24,0x94,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x98,0x01,0x00,0x00,0x84,0xC0,0x74,0x12,0x0F,0xB6,0x8C,0x24,0x98,0x01,0x00,0x00,0x83,0xC9,0x04,0x88,0x8C,0x24,0x98,0x01,0x00,0x00,0x8B,0x8C,0x24,0x98,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x8C,0x24,0x9C,0x01,0x00,0x00,0x83,0xBC,0x24,0xA0,0x01,0x00,0x00,0x01,0x75,0x12,0x0F,0xB6,0x8C,0x24,0x9C,0x01,0x00,0x00,0x83,0xC9,0x08,0x88,0x8C,0x24,0x9C,0x01,0x00,0x00,0x8B,0x8C,0x24,0x9C,0x01,0x00,0x00,0x0F,0xB6,0xC9,0x88,0x4F,0x10,0x48,0x8D,0x8C,0x24,0x80,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x8C,0x24,0x60,0x01,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x83,0xC7,0x10,0x48,0x89,0xBC,0x24,0x58,0x01,0x00,0x00,0x48,0x8B,0x8C,0x24,0x58,0x01,0x00,0x00,0x48,0x8D,0x94,0x24,0x60,0x01,0x00,0x00,0x48,0x89,0x0A,0xC7,0x84,0x24,0x68,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x60,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x70,0x01,0x00,0x00,0x48,0x8D,0x8C,0x24,0x80,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x70,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0xEB,0xE9,0xFF,0xFF,0xC5,0xFA,0x6F,0x84,0x24,0x80,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xD0,0x07,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x48,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x28,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x18,0x01,0x00,0x00,0x48,0xB9,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x09,0x48,0x8B,0x49,0x08,0x49,0xBB,0x58,0x0E,0x57,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x04,0x00,0x00,0x00,0x39,0x09,0xFF,0x15,0x91,0xE4,0x5E,0xFF,0x48,0x8D,0x8C,0x24,0xE8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x85,0xC0,0x75,0x12,0x48,0x8D,0x84,0x24,0xE8,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0xEB,0x29,0x48,0x8D,0x48,0x10,0x48,0x89,0x8C,0x24,0xE0,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xE0,0x00,0x00,0x00,0x48,0x8D,0x94,0x24,0xE8,0x00,0x00,0x00,0x48,0x89,0x0A,0x8B,0x48,0x08,0x89,0x8C,0x24,0xF0,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xE8,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xF8,0x00,0x00,0x00,0x83,0xBC,0x24,0x00,0x01,0x00,0x00,0x00,0x0F,0x86,0x37,0x05,0x00,0x00,0x48,0x8B,0x8C,0x24,0xF8,0x00,0x00,0x00,0x0F,0xB7,0x09,0x48,0xBA,0xB0,0xF4,0x8B,0x45,0xED,0x01,0x00,0x00,0x48,0x8B,0x12,0x8B,0x52,0x18,0x44,0x8B,0xC1,0x8B,0xC2,0x4C,0x03,0xC0,0x8B,0x84,0x24,0x20,0x01,0x00,0x00,0x4C,0x3B,0xC0,0x0F,0x87,0xF8,0x04,0x00,0x00,0x4C,0x8B,0x84,0x24,0x18,0x01,0x00,0x00,0x48,0x8D,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x00,0x48,0x63,0xC9,0x49,0x03,0xC8,0x48,0x89,0x8C,0x24,0xC8,0x00,0x00,0x00,0x48,0x8B,0x8C,0x24,0xC8,0x00,0x00,0x00,0x4C,0x8D,0x84,0x24,0xD0,0x00,0x00,0x00,0x49,0x89,0x08,0x89,0x94,0x24,0xD8,0x00,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xD0,0x00,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0x08,0x01,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x08,0x01,0x00,0x00,0xC5,0xFA,0x7F,0x84,0x24,0xB8,0x00,0x00,0x00,0x8B,0x8C,0x24,0x30,0x01,0x00,0x00,0x3B,0x8C,0x24,0xC0,0x00,0x00,0x00,0x0F,0x87,0x86,0x04,0x00,0x00,0x48,0x8B,0x8C,0x24,0xB8,0x00,0x00,0x00,0x48,0x8B,0x94,0x24,0x28,0x01,0x00,0x00,0x44,0x8B,0x84,0x24,0x30,0x01,0x00,0x00,0x4D,0x63,0xC0,0xE8,0xFE,0x63,0xB7,0x5E,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xCA,0x1A,0x23,0x5F,0x48,0x8B,0xF8,0x33,0xC9,0x89,0x8C,0x24,0xB0,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xB0,0x00,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xB0,0x00,0x00,0x00,0x89,0x8C,0x24,0xC8,0x07,0x00,0x00,0x33,0xC9,0x89,0x8C,0x24,0xA8,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA8,0x00,0x00,0x00,0x33,0xD2,0x89,0x11,0x8B,0x8C,0x24,0xA8,0x00,0x00,0x00,0x89,0x8C,0x24,0xC0,0x07,0x00,0x00,0x89,0x94,0x24,0xA0,0x00,0x00,0x00,0x48,0x8D,0x8C,0x24,0xA0,0x00,0x00,0x00,0xC7,0x01,0x01,0x00,0x00,0x00,0x8B,0x8C,0x24,0xA0,0x00,0x00,0x00,0x89,0x8C,0x24,0xB8,0x07,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0xC8,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0xC0,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0xB8,0x07,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0xB0,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0xB0,0x07,0x00,0x00,0x44,0x89,0x8C,0x24,0x98,0x00,0x00,0x00,0x83,0xBC,0x24,0x98,0x00,0x00,0x00,0x01,0x0F,0x94,0xC1,0x0F,0xB6,0xC9,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x90,0x00,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x90,0x00,0x00,0x00,0x41,0xC7,0x01,0x01,0x00,0x00,0x00,0x44,0x8B,0x8C,0x24,0x90,0x00,0x00,0x00,0x44,0x89,0x8C,0x24,0xA8,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0xA8,0x07,0x00,0x00,0x44,0x89,0x8C,0x24,0x88,0x00,0x00,0x00,0x83,0xBC,0x24,0x88,0x00,0x00,0x00,0x01,0x0F,0x94,0xC2,0x0F,0xB6,0xD2,0x45,0x33,0xC9,0x44,0x89,0x8C,0x24,0x80,0x00,0x00,0x00,0x4C,0x8D,0x8C,0x24,0x80,0x00,0x00,0x00,0x45,0x33,0xC0,0x45,0x89,0x01,0x44,0x8B,0x8C,0x24,0x80,0x00,0x00,0x00,0x44,0x89,0x8C,0x24,0xA0,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0xA0,0x07,0x00,0x00,0x44,0x89,0x4C,0x24,0x78,0x83,0x7C,0x24,0x78,0x01,0x41,0x0F,0x94,0xC0,0x45,0x0F,0xB6,0xC0,0x45,0x33,0xC9,0x44,0x89,0x4C,0x24,0x70,0x4C,0x8D,0x4C,0x24,0x70,0x41,0xC7,0x01,0x01,0x00,0x00,0x00,0x44,0x8B,0x4C,0x24,0x70,0x44,0x89,0x8C,0x24,0x98,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0x98,0x07,0x00,0x00,0x44,0x89,0x4C,0x24,0x68,0x83,0x7C,0x24,0x68,0x01,0x41,0x0F,0x94,0xC1,0x45,0x0F,0xB6,0xC9,0xE8,0xAB,0x89,0xDD,0xFF,0x88,0x47,0x10,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xF8,0x57,0xC0,0xC5,0xFA,0x7F,0x01,0x48,0x8D,0x4C,0x24,0x48,0x48,0x8B,0xD7,0xE8,0x2E,0x7E,0xDC,0xFF,0x48,0x8D,0x4C,0x24,0x58,0xC5,0xFA,0x6F,0x44,0x24,0x48,0xC5,0xFA,0x7F,0x44,0x24,0x38,0x48,0x8D,0x54,0x24,0x38,0xE8,0x63,0xE6,0xFF,0xFF,0xC5,0xFA,0x6F,0x44,0x24,0x58,0xC5,0xFA,0x7F,0x84,0x24,0x88,0x07,0x00,0x00,0x48,0x8D,0x8C,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x88,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x4C,0x8D,0x44,0x24,0x28,0xBA,0x05,0x00,0x00,0x00,0xE8,0x3E,0xDA,0xFF,0xFF,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xCA,0x18,0x23,0x5F,0x48,0x8B,0xF8,0xE8,0x0A,0x3C,0xDF,0xFF,0x89,0x84,0x24,0x80,0x07,0x00,0x00,0xE8,0xFE,0x3B,0xDF,0xFF,0x89,0x84,0x24,0x78,0x07,0x00,0x00,0xE8,0xFA,0x3B,0xDF,0xFF,0x89,0x84,0x24,0x70,0x07,0x00,0x00,0x48,0x8B,0xC6,0x48,0x8B,0x48,0x08,0x8B,0x94,0x24,0x80,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0x78,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0x70,0x07,0x00,0x00,0xFF,0x50,0x18,0x89,0x84,0x24,0x68,0x07,0x00,0x00,0x8B,0x8C,0x24,0x68,0x07,0x00,0x00,0xE8,0xDF,0x3B,0xDF,0xFF,0x8B,0xE8,0xE8,0xB8,0x3B,0xDF,0xFF,0x89,0x84,0x24,0x60,0x07,0x00,0x00,0x8B,0x8C,0x24,0x60,0x07,0x00,0x00,0xE8,0xC5,0x3B,0xDF,0xFF,0x44,0x8B,0xF0,0xE8,0x95,0x3B,0xDF,0xFF,0x89,0x84,0x24,0x58,0x07,0x00,0x00,0x8B,0x8C,0x24,0x58,0x07,0x00,0x00,0xE8,0xAA,0x3B,0xDF,0xFF,0x44,0x8B,0xF8,0xE8,0x7A,0x3B,0xDF,0xFF,0x89,0x84,0x24,0x50,0x07,0x00,0x00,0x8B,0x8C,0x24,0x50,0x07,0x00,0x00,0xE8,0x8F,0x3B,0xDF,0xFF,0x44,0x8B,0xC8,0x41,0x8B,0xD6,0x45,0x8B,0xC7,0x8B,0xCD,0xE8,0x6F,0x88,0xDD,0xFF,0x88,0x47,0x10,0x48,0x8D,0x8C,0x24,0x40,0x07,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x4C,0xDA,0xFF,0xFF,0x48,0x8D,0x8C,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0x40,0x07,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x4C,0x8D,0x44,0x24,0x28,0xBA,0x06,0x00,0x00,0x00,0xE8,0x36,0xD9,0xFF,0xFF,0x48,0xB9,0x10,0xEA,0x66,0xDB,0xFD,0x7F,0x00,0x00,0xBA,0x01,0x00,0x00,0x00,0xE8,0xC2,0x17,0x23,0x5F,0x48,0x8B,0xF8,0xE8,0x02,0x3B,0xDF,0xFF,0x89,0x84,0x24,0x38,0x07,0x00,0x00,0xE8,0xF6,0x3A,0xDF,0xFF,0x89,0x84,0x24,0x30,0x07,0x00,0x00,0xE8,0xEA,0x3A,0xDF,0xFF,0x89,0x84,0x24,0x28,0x07,0x00,0x00,0x48,0x8B,0x4E,0x08,0x8B,0x94,0x24,0x38,0x07,0x00,0x00,0x44,0x8B,0x84,0x24,0x30,0x07,0x00,0x00,0x44,0x8B,0x8C,0x24,0x28,0x07,0x00,0x00,0xFF,0x56,0x18,0x89,0x84,0x24,0x20,0x07,0x00,0x00,0x8B,0x8C,0x24,0x20,0x07,0x00,0x00,0xE8,0xDA,0x3A,0xDF,0xFF,0x8B,0xF0,0xE8,0xAB,0x3A,0xDF,0xFF,0x89,0x84,0x24,0x18,0x07,0x00,0x00,0x8B,0x8C,0x24,0x18,0x07,0x00,0x00,0xE8,0xC0,0x3A,0xDF,0xFF,0x8B,0xE8,0xE8,0x91,0x3A,0xDF,0xFF,0x89,0x84,0x24,0x10,0x07,0x00,0x00,0x8B,0x8C,0x24,0x10,0x07,0x00,0x00,0xE8,0xA6,0x3A,0xDF,0xFF,0x44,0x8B,0xF0,0xE8,0x76,0x3A,0xDF,0xFF,0x89,0x84,0x24,0x08,0x07,0x00,0x00,0x8B,0x8C,0x24,0x08,0x07,0x00,0x00,0xE8,0x8B,0x3A,0xDF,0xFF,0x44,0x8B,0xC8,0x8B,0xD5,0x45,0x8B,0xC6,0x8B,0xCE,0xE8,0x6C,0x87,0xDD,0xFF,0x88,0x47,0x10,0x48,0x8D,0x8C,0x24,0xF8,0x06,0x00,0x00,0x48,0x8B,0xD7,0xE8,0x49,0xD9,0xFF,0xFF,0x48,0x8D,0x8C,0x24,0x38,0x09,0x00,0x00,0xC5,0xFA,0x6F,0x84,0x24,0xF8,0x06,0x00,0x00,0xC5,0xFA,0x7F,0x44,0x24,0x28,0x4C,0x8D,0x44,0x24,0x28,0xBA,0x07,0x00,0x00,0x00,0xE8,0x33,0xD8,0xFF,0xFF,0x48,0x8B,0xFB,0x48,0x8D,0xB4,0x24,0x38,0x09,0x00,0x00,0xE8,0x73,0x07,0x23,0x5F,0x48,0xA5,0x48,0x8B,0xC3,0x48,0x81,0xC4,0x48,0x09,0x00,0x00,0x5B,0x5D,0x5E,0x5F,0x41,0x5E,0x41,0x5F,0xC3,0xE8,0x69,0x07,0x73,0xFF,0xCC,0xE8,0x6B,0x07,0x73,0xFF,0xCC,0xE8,0x5D,0x07,0x73,0xFF,0xCC,0xE8,0x5F,0x07,0x73,0xFF,0xCC,0xE8,0x51,0x07,0x73,0xFF,0xCC,0xE8,0x53,0x07,0x73,0xFF,0xCC,0xE8,0x45,0x07,0x73,0xFF,0xCC,0xE8,0x47,0x07,0x73,0xFF,0xCC,0xE8,0x39,0x07,0x73,0xFF,0xCC,0xE8,0x3B,0x07,0x73,0xFF,0xCC,0xE8,0x8D,0xBF,0x35,0x5F,0xCC};
----------------------------------------------------------------------------------------------------------------------------------------------------------------
