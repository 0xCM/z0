// 2019-11-20 15:08:32:584
BitMatrix4 and_4x4(in BitMatrix4 A, in BitMatrix4 B)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix4 Z0.BitMatrix::and(Z0.BitMatrix4&,Z0.BitMatrix4&)
    IL_0007: ret

}
BitMatrix8 and_8x8(in BitMatrix8 A, in BitMatrix8 B)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix8 Z0.BitMatrix::and(Z0.BitMatrix8&,Z0.BitMatrix8&)
    IL_0007: ret

}
BitMatrix<byte> and_8x8g(in BitMatrix<byte> A, in BitMatrix<byte> B)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix`1<System.Byte> Z0.BitMatrix::and<System.Byte>(Z0.BitMatrix`1<System.Byte>&,Z0.BitMatrix`1<System.Byte>&)
    IL_0007: ret

}
ref BitMatrix8 and_8x8_ref(in BitMatrix8 A, in BitMatrix8 B, ref BitMatrix8 Z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitMatrix8& Z0.BitMatrix::and(Z0.BitMatrix8&,Z0.BitMatrix8&,Z0.BitMatrix8&)
    IL_0008: ret

}
ref BitMatrix<byte> and_8x8g_ref(in BitMatrix<byte> A, in BitMatrix<byte> B, ref BitMatrix<byte> C)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitMatrix`1<System.Byte>& Z0.BitMatrix::and<System.Byte>(Z0.BitMatrix`1<System.Byte>&,Z0.BitMatrix`1<System.Byte>&,Z0.BitMatrix`1<System.Byte>&)
    IL_0008: ret

}
BitMatrix16 and_16x16(in BitMatrix16 A, in BitMatrix16 B)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix16 Z0.BitMatrix::and(Z0.BitMatrix16&,Z0.BitMatrix16&)
    IL_0007: ret

}
ref BitMatrix<ushort> and_16x16g_ref(in BitMatrix<ushort> A, in BitMatrix<ushort> B, ref BitMatrix<ushort> C)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitMatrix`1<System.UInt16>& Z0.BitMatrix::and<System.UInt16>(Z0.BitMatrix`1<System.UInt16>&,Z0.BitMatrix`1<System.UInt16>&,Z0.BitMatrix`1<System.UInt16>&)
    IL_0008: ret

}
BitMatrix32 and_32x32(in BitMatrix32 A, in BitMatrix32 B)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix32 Z0.BitMatrix::and(Z0.BitMatrix32&,Z0.BitMatrix32&)
    IL_0007: ret

}
BitMatrix<uint> and_32x32g(in BitMatrix<uint> A, in BitMatrix<uint> B)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix`1<System.UInt32> Z0.BitMatrix::and<System.UInt32>(Z0.BitMatrix`1<System.UInt32>&,Z0.BitMatrix`1<System.UInt32>&)
    IL_0007: ret

}
ref BitMatrix32 and_32x32_ref(in BitMatrix32 A, in BitMatrix32 B, ref BitMatrix32 Z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitMatrix32& Z0.BitMatrix::and(Z0.BitMatrix32&,Z0.BitMatrix32&,Z0.BitMatrix32&)
    IL_0008: ret

}
ref BitMatrix<uint> and_32x32g_ref(in BitMatrix<uint> A, in BitMatrix<uint> B, ref BitMatrix<uint> C)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitMatrix`1<System.UInt32>& Z0.BitMatrix::and<System.UInt32>(Z0.BitMatrix`1<System.UInt32>&,Z0.BitMatrix`1<System.UInt32>&,Z0.BitMatrix`1<System.UInt32>&)
    IL_0008: ret

}
ref BitMatrix<ulong> and_64x64g_ref(in BitMatrix<ulong> A, in BitMatrix<ulong> B, ref BitMatrix<ulong> C)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call Z0.BitMatrix`1<System.UInt64>& Z0.BitMatrix::and<System.UInt64>(Z0.BitMatrix`1<System.UInt64>&,Z0.BitMatrix`1<System.UInt64>&,Z0.BitMatrix`1<System.UInt64>&)
    IL_0008: ret

}
ref BitMatrix8 transpose_8x8_ref(in BitMatrix8 A, ref BitMatrix8 Z)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitMatrix8& Z0.BitMatrix::transpose(Z0.BitMatrix8&,Z0.BitMatrix8&)
    IL_0007: ret

}
