| M:Z0.XTend.Join``1(``0[][])                       | 
            <summary>
            Sequenteially condenses a sequence of arrays into a single array
            </summary>
            <param name="src">The many</param>
            <typeparam name="T">The array element type</typeparam>
        
| M:Z0.XTend.Mapi``2(``0[],System.Func{System.Int32,``0,``1})| 
            <summary>
            Transforms an array via an indexed mapping function
            </summary>
            <param name="src">The source array</param>
            <param name="f">The mapping function</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.Reverse``1(``0[])                      | 
            <summary>
            Reverses an array in-place
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Cast``1(System.Object[])               | 
            <summary>
            Populates a target array by casting each elements of a source aray to the target element type
            </summary>
            <param name="src"></param>
            <typeparam name="T"></typeparam>
        
| M:Z0.XTend.OrderBy``2(``0[],System.Func{``0,``1}) | 
            <summary>
            Linq orderby operator specialized for arrays
            </summary>
            <param name="src">The source array</param>
            <param name="f">The order criterion selector</param>
            <typeparam name="T">The array element type</typeparam>
            <typeparam name="K">The order criterion type</typeparam>
        
| M:Z0.XTend.Select``2(``0[],System.Func{``0,``1})  | 
            <summary>
            Defines an array-specific select operator
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
            <param name="src">The source sequence</param>
            <param name="f">The mapping function</param>
        
| M:Z0.XTend.map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})| 
            <summary>
            Applies a function to an input sequence to yield a transformed output sequence
            </summary>
            <param name="src">The source sequence</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.Where``1(``0[],System.Func{``0,System.Boolean})| 
            <summary>
            Linq where operator specialized for arrays
            </summary>
            <param name="src">The source array</param>
            <param name="f"></param>
            <typeparam name="T">The array element type</typeparam>
        
| M:Z0.XTend.Where``2(``0[],System.Func{``0,System.Boolean},System.Func{``0,``1})| 
            <summary>
            Result = Filter + Project
            </summary>
            <param name="src"></param>
            <param name="test"></param>
            <param name="project"></param>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
        
| M:Z0.XTend.filter``1(``0[],System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and populates a new array by filtering the source array with 
            a specified predicate
            </summary>
            <param name="src">The soruce array</param>
            <param name="f">The predicate</param>
            <typeparam name="T">The array element type</typeparam>
        
| M:Z0.XTend.AddRange``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Adds a collection of items to a bag
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="bag">The destination bag</param>
            <param name="items">The items to add</param>
        
| M:Z0.XTend.HasAnyKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Determines whether the dictionary has any the keys that are specified in a set
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="subject">The dictionary to evaluate</param>
            <param name="keys">The keys to check</param>
        
| M:Z0.XTend.HasAllKeys``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Determines whether the dictionary has all of the keys that are specified in a set
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="subject">The dictionary to evaluate</param>
            <param name="keys">The keys to check</param>
        
| M:Z0.XTend.Force``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Forces enumerable evaluation
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)| 
            <summary>
            Returns the first element if it exists; otherwise returns the supplied default
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="src">The items to search</param>
            <param name="default">The replacement value if the sequence is empty</param>
        
| M:Z0.XTend.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})| 
            <summary>
            Returns the first element if it exists; otherwise returns the value supplied
            by invoking the default function
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="src">The items to search</param>
            <param name="default">The function invoked to produce a default value</param>
        
| M:Z0.XTend.OnFirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Func{``0,``1})| 
            <summary>
            Applies a function to the first item in the list that satisfies the predicate if such an item exists.
            If no such item exists, the function is applied to the default value of the item
            </summary>
            <typeparam name="T">The item type</typeparam>
            <typeparam name="R">The function result type</typeparam>
            <param name="items">The items to search</param>
            <param name="predicate">The predicate applied during the search</param>
            <param name="f">The function to apply to the identified item</param>
        
| M:Z0.XTend.Intersperse``1(System.Collections.Generic.IEnumerable{``0},``0)| 
            <summary>
            Interleaves a specified value between each element of the source
            </summary>
            <param name="src">The source stream</param>
            <param name="x">The value to interleave</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)| 
            <summary>
            Applies an action to each member of the collection
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="items">The items to enumerate</param>
            <param name="action">The action to apply</param>
            <param name="pll">Indicates whether the action should be applied concurrently</param>
        
| M:Z0.XTend.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0,``0})| 
            <summary>
            Enumerates stream elements in pairs, until one of the streams is exhausted,
            invoking a traversal action for each enumerated pair
            </summary>
            <param name="lhs">The left stream</param>
            <param name="rhs">The right stream</param>
            <param name="f">The side-effect</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)| 
            <summary>
            Returns the last element if it exists; otherwise returns the supplied default
            </summary>
            <param name="src">The source sequence</param>
            <param name="default">The replacement value if the sequence is empty</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})| 
            <summary>
            Returns the last element if it exists; otherwise returns the value supplied
            by invoking the default function
            </summary>
            <param name="src">The source sequence</param>
            <param name="default">The function invoked to produce a default value</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})| 
            <summary>
            Applies a function to an input sequence to yield a transformed output sequence
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
            <param name="src">The source sequence</param>
            <param name="f">The mapping function</param>
        
| M:Z0.XTend.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Partitions a source stream into sub-arrays of a maximum length
            </summary>
            <param name="src">The source stream</param>
            <param name="max">The maximum sub-array length</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Partition``1(``0[],System.Int32)       | 
            <summary>
            Partitions the source array into a sequence of array segments
            </summary>
            <param name="src">The source array</param>
            <param name="width">The maximal segment width</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Runs through an enumerable in batches
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="source">The item source</param>
            <param name="max">The maximum number of elements per batch</param>
            <remarks>
            Implementation inspired from https://github.com/morelinq/MoreLINQ
            </remarks>
        
| M:Z0.XTend.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])| 
            <summary>
            Prepends one or more items to the head of the sequence
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="src">The sequence that will be prependend</param>
            <param name="preceding">The items that will be prepended</param>
        
| M:Z0.XTend.SecondOrDefault``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Returns the second term of the sequence if it exists; otherwise returns the default value
            </summary>
            <param name="src">The source sequence</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.Singletons``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Constructs a sequence of singleton sequences from a sequence of elements
            </summary>
            <param name="src">The source sequence</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.Collapse``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})| 
            <summary>
            Reduces a stream of element streams to an element stream
            </summary>
            <param name="src">The element streams</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.StreamTo``1(System.Collections.Generic.IEnumerable{``0},System.Span{``0})| 
            <summary>
            Fills an allocated span from a sequence
            </summary>
            <param name="src">The source sequence</param>
            <param name="dst">The target spn</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)| 
            <summary>
            Defines missing Take(stream,n:uint) method
            </summary>
            <param name="src">The source stream</param>
            <param name="count">The number of elements to remove from the from of the stream</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})| 
            <summary>
            Creates a transformed array
            </summary>
            <typeparam name="S">The source item type</typeparam>
            <typeparam name="T">The target item type</typeparam>
            <param name="src">The source sequence</param>
            <param name="transform">The transformation function</param>
        
| M:Z0.XTend.ToConcurrentDictionary``2(System.Collections.Generic.IDictionary{``0,``1})| 
            <summary>
            Creates a concurrent dictionary from an ordinary dictionary
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="d">The source dictionary</param>
        
| M:Z0.XTend.ToConcurrentDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})| 
            <summary>
            Creates a concurrent dictionary from the input sequence
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <param name="values">The input sequence</param>
            <param name="keySelector"></param>
        
| M:Z0.XTend.ToConcurrentDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})| 
            <summary>
            Creates a concurrent dictionary from the input sequence
            </summary>
            <typeparam name="S">The input sequence type</typeparam>
            <typeparam name="K">The dictionary key type</typeparam>
            <typeparam name="V">The type of the indexed valuie</typeparam>
            <param name="sources">The input sequence</param>
            <param name="keySelector">Function that selects the key</param>
            <param name="valueSelector">Function that selects the value</param>
        
| M:Z0.XTend.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})| 
            <summary>
            Constructs a mutable dictionary from a sequence of key-value pairs
            </summary>
            <param name="key">The key</param>
            <param name="value">The indexed value</param>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| M:Z0.XTend.ReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})| 
            <summary>
            Creates a read-only dictionary from an existing mutable dictionary
            </summary>
            <typeparam name="K">The dictionary key type</typeparam>
            <typeparam name="V">The dictionary value type</typeparam>
            <param name="src">The extended type</param>
        
| M:Z0.XTend.ToReadOnlySpan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Constructs a span of specified length from a sequence
            </summary>
            <param name="src">The source sequence</param>
            <param name="length">The length of the result span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToReadOnlySpan``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)| 
            <summary>
            Constructs a span of specified length from the sequence obtained by skipping a specified number of leading elements
            </summary>
            <param name="src">The source sequence</param>
            <param name="skip">The number of elements to skip</param>
            <param name="length">The length of the result span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToReadOnlySpan``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Constructs a span from a (presumeably finite) sequence selection
            </summary>
            <param name="src">The source sequence</param>
            <param name="offset">The number of elements to skip from the head of the sequence</param>
            <param name="length">The number of elements to take from the sequence</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToReadOnlySpan``1(``0[])               | 
            <summary>
            Constructs a span from an aray
            </summary>
            <param name="src">The source aray</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSet``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Creates a set from an item stream
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="items">The item sequence</param>
        
| M:Z0.XTend.ToSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})| 
            <summary>
            Creates a set from a sequence projection
            </summary>
            <typeparam name="T">The source element type</typeparam>
            <typeparam name="U">The targert element type</typeparam>
            <param name="items">The item sequence</param>
        
| M:Z0.XTend.ReadOnly``1(System.Span{``0})          | 
            <summary>
            Presents a mutable span as a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSpan``1(``0[])                       | 
            <summary>
            Constructs a span from an array
            </summary>
            <param name="src">The source sequence</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSpan``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Constructs a span from a (presumeably finite) sequence selection
            </summary>
            <param name="src">The source sequence</param>
            <param name="offset">The number of elements to skip from the head of the sequence</param>
            <param name="length">The number of elements to take from the sequence</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSpan``1(System.ReadOnlySpan{``0})    | 
            <summary>
            Constructs a span from a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSpan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Constructs a span of specified length from a sequence
            </summary>
            <param name="src">The source sequence</param>
            <param name="length">The length of the result span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSpan``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)| 
            <summary>
            Constructs a span of specified length from the sequence obtained by skipping a specified number of leading elements
            </summary>
            <param name="src">The source sequence</param>
            <param name="offset">The number of elements to skip</param>
            <param name="length">The length of the result span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int32)| 
            <summary>
            Removes a specified number of items from a queue
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="queue">The queue from which items will be removed</param>
            <param name="count">The (maximum) number of items to remove</param>
        
| M:Z0.XTend.Dequeue``1(System.Collections.Concurrent.ConcurrentQueue{``0})| 
            <summary>
            Pops all items off the queue
            </summary>
            <typeparam name="T">The type of value contained int he queue</typeparam>
            <param name="q">The queue to manipulate</param>
        
| M:Z0.XTend.Dequeue``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Int32)| 
            <summary>
            Pops a sequence of items off a queue
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="q">The queue to manipulate</param>
            <param name="max">The maximum number of items to remove</param>
        
| M:Z0.XTend.Enqueue``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Enqueues a stream
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="queue">The destination queue</param>
            <param name="items">The items to enqueue</param>
        
| M:Z0.XTend.Enqueue``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Pushes a sequence of items into queue and returns the number of items enqueued
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="q">The queue to manipulate</param>
            <param name="items">The items to place on the qeeue</param>
        
| M:Z0.XTend.Include``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Adds items from a stream to a target set
            </summary>
            <param name="dst">The target set</param>
            <param name="src">The source stream</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.Include``1(System.Collections.Generic.ISet{``0},``0[])| 
            <summary>
            Adds items from a parameter array to a target set
            </summary>
            <param name="dst">The target set</param>
            <param name="src">The source stream</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.Intersect``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0}[])| 
            <summary>
            Computes the intersection of a target set with source sets specified in a parameter array
            </summary>
            <param name="dst">The target set</param>
            <param name="src">The source sets</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.IsEmpty``1(System.Collections.Generic.ISet{``0})| 
            <summary>
            Determines whether a set is empty
            </summary>
            <typeparam name="T">The type of element that may be contained in the set</typeparam>
            <param name="set">The set under examination</param>
        
| M:Z0.XTend.IsNonEmpty``1(System.Collections.Generic.ISet{``0})| 
            <summary>
            Determines whether a set is nonempty
            </summary>
            <typeparam name="T">The type of element that may be contained in the set</typeparam>
            <param name="set">The set under examination</param>
        
| M:Z0.XTend.IsEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0})| 
            <summary>
            Determines whether a collection contains any elements
            </summary>
            <typeparam name="T">The type of item contained by the collection</typeparam>
            <param name="src">The collection to examine</param>
        
| M:Z0.XTend.ToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Creates a read-only list from a source sequence
            </summary>
            <param name="src">The source sequence</param>
        
| M:Z0.XTend.Unions``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0}[])| 
            <summary>
            Adds all items from sets specified in a parameter array to a target set
            </summary>
            <param name="dst">The target set</param>
            <param name="src">The source sets</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.WithItems``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Adds a stream of items to a target set
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="dst">The target set</param>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.WithItems``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Adds a stream of items to a target set
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="dst">The target set</param>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.WithItems``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})| 
            <summary>
            Addes the entries of the source dictionary to the destination dictionary
            </summary>
            <typeparam name="TKey">The common dictionary key type</typeparam>
            <typeparam name="TValue">The common dictionary value type</typeparam>
            <param name="dst">The target dictionary</param>
            <param name="src">The source dictionary</param>
        
| M:Z0.XTend.WithItems``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})| 
            <summary>
            Addes the key-value pairs to the extended dictionary
            </summary>
            <param name="dst">The extended dictionary</param>
            <param name="src">The items to add</param>
            <typeparam name="K">The dictionary key type</typeparam>
            <typeparam name="V">The dictionary value type</typeparam>
        
| M:Z0.XTend.WithItems``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Adds items to a list
            </summary>
            <param name="dst">The list to modify</param>
            <param name="src">The items to add</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.CopyTo``1(System.Span{``0},System.Span{``0},System.Int32)| 
            <summary>
            Copies the source span to a target span begininning at a specified target offset
            </summary>
            <param name="src">The source span</param>
            <param name="dst">The target span</param>
            <param name="offset">The target offset</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.XTend.CopyTo``1(System.ReadOnlySpan{``0},System.Span{``0},System.Int32)| 
            <summary>
            Copies the source span to a target span begininning at a specified target offset
            </summary>
            <param name="src">The source span</param>
            <param name="dst">The target span</param>
            <param name="offset">The target offset</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.XTend.Concat``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})| 
            <summary>
            Forms a new span by the concatenation [head,tail]
            </summary>
            <param name="head">The first span</param>
            <param name="tail">The second span</param>
            <typeparam name="T">The span element type</typeparam>
        
| M:Z0.XTend.Concat``1(System.Span{``0},System.ReadOnlySpan{``0})| 
            <summary>
            Forms a new span by the concatenation [head,tail]
            </summary>
            <param name="head">The first span</param>
            <param name="tail">The second span</param>
            <typeparam name="T">The span element type</typeparam>
        
| M:Z0.XTend.Ignored(System.Reflection.MemberInfo)  | 
            <summary>
            Returns true if the [Ignore] attributed is applied to the target 
            </summary>
            <param name="target">The target</param>
        
| M:Z0.XTend.NotIgnored(System.Reflection.MemberInfo)| 
            <summary>
            Returns true if the target is not attributed with the [Ignore] attribute
            </summary>
            <param name="target">The target</param>
        
| M:Z0.XTend.Ignore``1(``0[])                       | 
            <summary>
            Excludes members with ignored metadata
            </summary>
            <param name="src">The members to filter</param>
        
| M:Z0.XTend.Ignore``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Excludes members with ignored metadata
            </summary>
            <param name="src">The members to filter</param>
        
| M:Z0.XTend.ToPointer``1(System.RuntimeFieldHandle)| 
            <summary>
            Gets the void* for the identified field
            </summary>
            <param name="src">The runtime field handle</param>
        
| M:Z0.XTend.ToVoid(System.IntPtr)                  | 
            <summary>
            Uses the (void*) explicit operator defined by the source type to
            present said source as a void*
            </summary>
            <param name="src">The source pointer representative</param>
        
| M:Z0.XTend.Angled(System.String)                  | 
            <summary>
            Encloses text between less than and greater than characters
            </summary>
            <param name="content">The content to enclose</param>
        
| M:Z0.XTend.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Char})| 
            <summary>
            Determines whether a string contains any of the characters in a supplied sequence
            </summary>
            <param name="src">The string to test</param>
            <param name="chars">The characters for which to search</param>
        
| M:Z0.XTend.ContainsAny(System.String,System.ReadOnlySpan{System.Char})| 
            <summary>
            Determines whether a string contains any of the characters in a supplied sequence
            </summary>
            <param name="src">The string to test</param>
            <param name="chars">The characters for which to search</param>
        
| M:Z0.XTend.ContainsAny(System.String,System.String[])| 
            <summary>
            Determines whether a string contains any of the supplied substrings
            </summary>
            <param name="src">The string to test</param>
            <param name="substrings">The characters for which to search</param>
        
| M:Z0.XTend.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String})| 
            <summary>
            Determines whether a string contains any of the supplied substrings
            </summary>
            <param name="src">The string to test</param>
            <param name="substrings">The characters for which to search</param>
        
| M:Z0.XTend.SelectionSubject``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Gets the expression that directly identifies the selected subject
            </summary>
            <typeparam name="M">The member type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.SelectionSubject``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Gets the expression that directly identifies the selected subject
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="M">The member type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.SelectedPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Determines the name of the property as identified by an expression delegate
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.CalledMethod(System.Linq.Expressions.Expression)| 
            <summary>
            Returns the method invoked by an expression, if any
            </summary>
            <param name="x">The expression to test</param>
        
| M:Z0.XTend.Conjunction``1(``0)                    | 
            <summary>
            Returns the expression if it is a logical conjunction and None otherwise
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.Disjunction``1(``0)                    | 
            <summary>
            Returns the expression if it is a logical disjunction and None otherwise
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.Constant(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts a value from a constant expression if possible
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.Func``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a delegate for an emitter
            </summary>
            <param name="host">The declaring type instance, if applicable</param>
            <typeparam name="X">The result type</typeparam>
        
| M:Z0.XTend.Func``2(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a delegate for a function f:X-&gt;Y realized by a specified method
            </summary>
            <typeparam name="X1">The type of the first parameter</typeparam>
            <typeparam name="X2">The type of the second parameter</typeparam>
            <typeparam name="Y">The result type</typeparam>
            <param name="member">The source method</param>
            <param name="host">An instance of the declaring type, if applicable</param>
        
| M:Z0.XTend.Func``3(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a delegate for a function f:X1-&gt;X2-&gt;Y realized by a specified method
            </summary>
            <typeparam name="X1">The type of the first parameter</typeparam>
            <typeparam name="X2">The type of the second parameter</typeparam>
            <typeparam name="Y">The result type</typeparam>
            <param name="member">The source method</param>
            <param name="host">An instance of the declaring type, if applicable</param>
        
| M:Z0.XTend.Func``4(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a delegate for a function f:X1-&gt;X2-&gt;X3-&gt;Y realized by a specified method
            </summary>
            <typeparam name="X1">The type of the first parameter</typeparam>
            <typeparam name="X2">The type of the second parameter</typeparam>
            <typeparam name="X3">Tye type of the third parameter</typeparam>
            <typeparam name="Y">The result type</typeparam>
            <param name="member">The source method</param>
            <param name="host">An instance of the declaring type, if applicable</param>
        
| M:Z0.XTend.Func``5(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a delegate for a function f:X1-&gt;X2-&gt;X3-&gt;X4-&gt;Y realized by a specified method
            </summary>
            <typeparam name="X1">The type of the first parameter</typeparam>
            <typeparam name="X2">The type of the second parameter</typeparam>
            <typeparam name="X3">Tye type of the third parameter</typeparam>
            <typeparam name="X4">Tye type of the fourth parameter</typeparam>
            <typeparam name="Y">The result type</typeparam>
            <param name="member">The source method</param>
            <param name="host">An instance of the declaring type, if applicable</param>
        
| M:Z0.XTend.GetValueMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the name of the value member referenced by an expression delegate
            </summary>
            <typeparam name="T">The member selector</typeparam>
            <typeparam name="M">The member type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.GetAccessedProperty(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts property info from a member expression, if possbile, and otherwise returns null
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.AccessedMember(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts member info from an expression, if possbile; otherwise returns none
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.AccesedProperty(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts property info from an expression, if possbile; otherwise returns none
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.GetField``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Extracts the field info for the field referenced by an expression delegate
            </summary>
            <typeparam name="F">The field type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.GetField``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the field info for the field referenced by an expression delegate
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the member info for the member referenced by an expression delegate
            </summary>
            <typeparam name="T">The first selector parameter</typeparam>
            <typeparam name="M">The member type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.GetValueMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the <see cref="T:Z0.ValueMember" /> for the member referenced by a an expression delegate
            </summary>
            <typeparam name="T">The member selector</typeparam>
            <typeparam name="M">The member type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.GetMethod``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T">The function return type</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XTend.GetMethod``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first function argument</typeparam>
            <typeparam name="T2">The function return type</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XTend.GetMethod``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first function argument</typeparam>
            <typeparam name="T2">The second function argument</typeparam>
            <typeparam name="R">The function return type</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XTend.GetMethod``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first function argument</typeparam>
            <typeparam name="T2">The second function argument</typeparam>
            <typeparam name="T3">The third function argument</typeparam>
            <typeparam name="R">The function return type</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XTend.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})| 
            <summary>
            Extracts the method for the action referenced by an an expression delegate
            </summary>
            <typeparam name="T">The action argument</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XTend.GetMethod``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})| 
            <summary>
            Extracts the method info for the action referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first action argument</typeparam>
            <typeparam name="T2">The second action argument</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XTend.GetMethod``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})| 
            <summary>
            Extracts the method info for the action referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first action argument</typeparam>
            <typeparam name="T2">The second action argument</typeparam>
            <typeparam name="T3">The third action argument</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XTend.GetMethod``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})| 
            <summary>
            Extracts the method info for the action referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first action argument</typeparam>
            <typeparam name="T2">The second action argument</typeparam>
            <typeparam name="T3">The third action argument</typeparam>
            <typeparam name="T4">The fourth action argument</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XTend.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Extracts the property info for the property referenced by an expression delegate
            </summary>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the property info for the property referenced by an expression delegate
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XTend.IsConversion(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a conversion
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsConversion``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Tests whether a member is wrapped in a conversion
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="R">The member type</typeparam>
            <param name="selector">Expression that identifies the member</param>
        
| M:Z0.XTend.IsMemberAccess(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether the test expression is a member access expression
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsCall(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether the test expression is a function call
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsSelect(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is an application of the LINQ select operator
            </summary>
            <param name="x">The expression to test</param>
        
| M:Z0.XTend.IsLogical(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a logical operator
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsLambda(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a lambda expression
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsDisjunction``1(``0)                  | 
            <summary>
            Tests whether an expression is a logical disjunction
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsConjunction``1(``0)                  | 
            <summary>
            Tests whether an expression is a logical conjunction
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XTend.IsJunction(System.Linq.Expressions.Expression)| 
            <summary>
            Deterines whether the test expression is either a logical conjuntion or disjunction
            </summary>
            <param name="X">The expression to examine</param>
        
| M:Z0.XTend.IsOneOf``2(System.Linq.Expressions.Expression)| 
            <summary>
            Performs a type-test on an expression
            </summary>
            <typeparam name="X1">The first candidate type</typeparam>
            <typeparam name="X2">The second candidate type</typeparam>
            <param name="x">The expression to test</param>
        
| M:Z0.XTend.IsOneOf``3(System.Linq.Expressions.Expression)| 
            <summary>
            Performs a type-test on an expression
            </summary>
            <typeparam name="X1">The first candidate type</typeparam>
            <typeparam name="X2">The second candidate type</typeparam>
            <typeparam name="X3">The third candidate type</typeparam>
            <param name="x">The expression to test</param>
        
| M:Z0.XTend.IsOneOf``4(System.Linq.Expressions.Expression)| 
            <summary>
            Performs a type-test on an expression
            </summary>
            <typeparam name="X1">The first candidate type</typeparam>
            <typeparam name="X2">The second candidate type</typeparam>
            <typeparam name="X3">The third candidate type</typeparam>
            <typeparam name="X4">The fourth candidate type</typeparam>
            <param name="x">The expression to test</param>
        
| M:Z0.XTend.TryFind``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Returns the first element of the sequence that satisifies the predicate, if any.
            </summary>
            <param name="src">The sequence to search</param>
            <param name="predicate">The predicate to satiisfy</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.TryFind``2(System.Collections.Generic.Dictionary{``0,``1},``0)| 
            <summary>
            Retrieves the key-identified value if possible
            </summary>
            <typeparam name="K">The key</typeparam>
            <typeparam name="V">The type of value identified by the key</typeparam>
            <param name="subject">The collection to query</param>
            <param name="key">The key that identifies the value</param>
        
| M:Z0.XTend.TryFind``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)| 
            <summary>
            Retrieves the key-identified value if possible
            </summary>
            <typeparam name="K">The key</typeparam>
            <typeparam name="V">The type of value identified by the key</typeparam>
            <param name="subject">The collection to query</param>
            <param name="key">The key that identifies the value</param>
        
| M:Z0.XTend.TryDequeue``1(System.Collections.Concurrent.ConcurrentQueue{``0})| 
            <summary>
            Removes an element from the queue if one exists
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="q">the queue</param>
        
| M:Z0.XTend.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)| 
            <summary>
            Removes the key-identified value if possible
            </summary>
            <typeparam name="K">The key</typeparam>
            <typeparam name="V">The type of value identified by the key</typeparam>
            <param name="subject">The collection to query</param>
            <param name="key">The key that identifies the value</param>
        
| M:Z0.XTend.TryTake``1(System.Collections.Concurrent.ConcurrentBag{``0})| 
            <summary>
            A functional rendition of <see cref="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)" /> 
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="source">The collection to search</param>
        
| M:Z0.XTend.TryGetSingle``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Returns a value if the source stream yeilds exactly one value; otherwise, returns none
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The stream element type</typeparam>
        
| M:Z0.XTend.TryGetSingle``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Returns a value if the source stream yeilds exactly one value that satisfied a predicate; otherwise, returns none
            </summary>
            <param name="stream">The stream to search</param>
            <param name="predicate">The predicate to match</param>
            <typeparam name="T">The stream item type</typeparam>
        
| M:Z0.XTend.First``1(Z0.Option{``0[]})             | 
            <summary>
            Returns the value of the first element of an optional array, if extant; otherwise, raises an exception
            </summary>
            <param name="src">The optional array</param>
            <typeparam name="P">The array element type</typeparam>
        
| M:Z0.XTend.FirstOrDefault``1(Z0.Option{``0[]})    | 
            <summary>
            Returns the value of the first element of an optional array, if extant; otherwise, returns a parametric default
            </summary>
            <param name="src">The optional array</param>
            <typeparam name="P">The array element type</typeparam>
        
| M:Z0.XTend.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Searches for the first element in the stream that satisfies a predicate and returns the element if found; otherwise, returns None
            </summary>
            <typeparam name="X">The stream item type</typeparam>
            <param name="src">The stream to search</param>
            <param name="predicate">The predicate to match</param>
        
| M:Z0.XTend.TryGetFirst``1(System.Collections.Generic.IEnumerable{Z0.Option{``0}})| 
            <summary>
            Returns the the first realized value as a valued option, if extant, from a stream of potential values; 
            otherwise, returns a non-valued option
            </summary>
            <param name="src">The potentials</param>
            <typeparam name="T">The potential value type</typeparam>
        
| M:Z0.XTend.TryPop``1(System.Collections.Generic.Queue{``0})| 
            <summary>
            Removes an element from the queue if one exists
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="q">the queue</param>
        
| M:Z0.XTend.ToOption``1(System.Nullable{``0})      | 
            <summary>
            Lifts a nullable value type into the option monad
            </summary>
            <param name="src">The potential value</param>
            <typeparam name="T">The potential value type</typeparam>
        
| M:Z0.XTend.ToNullable``1(Z0.Option{``0})          | 
            <summary>
            Extracts a nulluable value from an option over a nullable value type
            </summary>
            <param name="src">The potential value</param>
            <typeparam name="T">The potential value type</typeparam>
        
| M:Z0.XTend.ToOption(System.Type)                  | 
            <summary>
            Lifts a type value to an option that is valued iff the source type is non-void
            </summary>
            <param name="src">The value to lift</param>
        
| M:Z0.XTend.MapRequired``2(Z0.Option{``0},System.Func{``0,``1})| 
            <summary>
            Applies a map to a valued option; otherwise, raises an exception
            </summary>
            <param name="x">The optional value</param>
            <param name="f">The mapping function</param>
            <typeparam name="X">The source type</typeparam>
            <typeparam name="Y">The target type</typeparam>
        
| M:Z0.XTend.Value``1(Z0.Option{``0})               | 
            <summary>
            Extracts the encapsluated value if present; otherwise returns the default value of the type
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="x">The optional value</param>
        
| M:Z0.XTend.WhereSome``1(System.Collections.Generic.IEnumerable{Z0.Option{``0}})| 
            <summary>
            Selects the subsequence for which values exist, if any
            </summary>
            <typeparam name="T">The potential value type</typeparam>
            <param name="options">The sequence of options to examine</param>
        
| M:Z0.XTend.Satisfies``1(Z0.Option{``0},System.Predicate{``0})| 
            <summary>
            Returns true if an optioal value exists an a specified predicate over the value is satisfied
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="x">The value to examine</param>
            <param name="predicate">The adjudicating predicate</param>
        
| M:Z0.XTend.Split``1(System.Collections.Generic.IEnumerable{Z0.Option{``0}})| 
            <summary>
            Bifurcates a stream of optional values into the haves/have nots
            </summary>
            <typeparam name="T">The optional value type</typeparam>
            <param name="options">The stream of options to evaluate</param>
        
| M:Z0.XTend.All(Z0.IOption[])                      | 
            <summary>
            Evaluates to true iff all options have values
            </summary>
            <param name="options">The options to evaluate</param>
        
| M:Z0.XTend.WhenAll``2(Z0.Option{``0},Z0.Option{``1},System.Action{``0,``1})| 
            <summary>
            Invokes an action when all supplied options have value
            </summary>
            <typeparam name="X1">The type of the first potential item</typeparam>
            <typeparam name="X2">The type of the second potential item</typeparam>
            <param name="x1">The first potential value</param>
            <param name="x2">The second potential value</param>
            <param name="f">The action to conditionally invoke</param>
        
| M:Z0.XTend.WhenAll``3(Z0.Option{``0},Z0.Option{``1},Z0.Option{``2},System.Action{``0,``1,``2})| 
            <summary>
            Invokes the supplied action if all values exist
            </summary>
            <typeparam name="X1">The type of the first potential value</typeparam>
            <typeparam name="X2">The type of the second potential value</typeparam>
            <typeparam name="X3">The type of the third potential value</typeparam>
            <param name="x1">The first potential value</param>
            <param name="x2">The second potential value</param>
            <param name="x3">The third potential value</param>
            <param name="f">The action to conditionally invoke</param>
        
| M:Z0.XTend.OnValue``1(System.Nullable{``0},System.Action{``0})| 
            <summary>
            Invokes an action if a nullable value type is valued
            </summary>
            <param name="src">The potential source value</param>
            <param name="f">The action to invoke over a realized value, if extant</param>
            <typeparam name="T">The potential value type</typeparam>
        
| M:Z0.XTend.ValueOrDefault``1(Z0.Option{System.Nullable{``0}},System.Nullable{``0})| 
            <summary>
            Extracts the encapsluated value if present; otherwise reutrns the underlying value type default
            </summary>
            <param name="x">The optional value</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.XTend.ValueOrNone``1(System.Nullable{``0})   | 
            <summary>
            Transforms a nulluble value into an optional value
            </summary>
            <typeparam name="T">The underlying value type</typeparam>
            <param name="x">The potential value</param>
        
| M:Z0.XTend.AssemblyVersion(System.Reflection.Assembly)| 
            <summary>
            Convenience accessor for the assembly's version
            </summary>
            <param name="a">The source assembly</param>
        
| M:Z0.XTend.GetSimpleName(System.Reflection.Assembly)| 
            <summary>
            Gets the simple name of an assembly
            </summary>
            <param name="a">The source assembly</param>
        
| M:Z0.XTend.GetTag``1(System.Reflection.Assembly)  | 
            <summary>
            Gets the identified assembly attribute if present, otherwise NULL
            </summary>
            <param name="a">The source assembly</param>
            <typeparam name="A">The type of attribute for which to search</typeparam>
        
| M:Z0.XTend.IndexTaggedTypes``1(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})| 
            <summary>
            Gets the type attributions for the specified assembly
            </summary>
            <param name="a">The source assembly</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.Product(System.Reflection.Assembly)    | 
            <summary>
            Gets the value of <see cref="T:System.Reflection.AssemblyProductAttribute" /> if it exists
            </summary>
            <param name="a">The source assembly</param>
        
| M:Z0.XTend.Title(System.Reflection.Assembly)      | 
            <summary>
            Gets the value of <see cref="T:System.Reflection.AssemblyTitleAttribute" /> if it exists
            </summary>
            <param name="a">The source assembly</param>
        
| M:Z0.XTend.Company(System.Reflection.Assembly)    | 
            <summary>
            Gets the value of <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> if it exists
            </summary>
            <param name="a">The source assembly</param>
        
| M:Z0.XTend.DefaultAlias(System.Reflection.Assembly)| 
            <summary>
            Gets the value of <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> if it exists
            </summary>
            <param name="a">The source assembly</param>
        
| M:Z0.XTend.Tag``1(System.Reflection.Assembly)     | 
            <summary>
            Gets the identified assembly attribute if present, otherwise NULL
            </summary>
            <param name="a">The source assembly</param>
            <typeparam name="A">The type of attribute for which to search</typeparam>
        
| M:Z0.XTend.Tagged``1(System.Reflection.Assembly)  | 
            <summary>
            Determines whether an assembly has an attribute of a given type
            </summary>
            <param name="a">The source assembly</param>
            <typeparam name="T">The attribute type</typeparam>
        
| M:Z0.XTend.Mutable(System.Reflection.FieldInfo[]) | 
            <summary>
            Selects the mmutable fields from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Immutable(System.Reflection.FieldInfo[])| 
            <summary>
            Selects the immutable fields from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Literals(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})| 
            <summary>
            Selects literal fields from the source
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.XTend.Literals(System.Reflection.FieldInfo[])| 
            <summary>
            Selects literal fields from the source
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.XTend.Literals(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo},System.Type)| 
            <summary>
            Selects literal fields from the source
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.XTend.Literals(System.Reflection.FieldInfo[],System.Type)| 
            <summary>
            Selects literal fields of specified type from the source
            </summary>
            <param name="src">The data source</param>
            <param name="match">The field type to match</param>
        
| M:Z0.XTend.LiteralValues(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})| 
            <summary>
            Queries literal fields for their values
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.LiteralValues(System.Reflection.FieldInfo[])| 
            <summary>
            Queries literal fields for their values
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.LiteralValues``1(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})| 
            <summary>
            Queries literal fields for values of parametric type
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Public(System.Reflection.FieldInfo[])  | 
            <summary>
            Selects the public fields from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.NonPublic(System.Reflection.FieldInfo[])| 
            <summary>
            Selects the non-public fields from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Static(System.Reflection.FieldInfo[])  | 
            <summary>
            Selects the static fields from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Instance(System.Reflection.FieldInfo[])| 
            <summary>
            Selects the instance fields from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.WithTypeNameLike(System.Reflection.FieldInfo[],System.String)| 
            <summary>
            Selects the fields from the stream for which the field type name contains the search string
            </summary>
            <param name="src">The source stream</param>
            <param name="search">The search string</param>
        
| M:Z0.XTend.IsCompilerGenerated(System.Reflection.FieldInfo)| 
            <summary>
            Determines whether a field has been generated by the compiler
            </summary>
            <param name="f">The field to examine</param>
        
| M:Z0.XTend.Value(System.Reflection.FieldInfo,System.Object)| 
            <summary>
            Attempts to retrieve the value of an instance or static field
            </summary>
            <param name="field">The field</param>
            <param name="instance">The object instance, if applicable</param>
        
| M:Z0.XTend.Value``1(System.Reflection.FieldInfo,System.Object)| 
            <summary>
            Attempts to retrieves the value of a field
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="member">The field</param>
            <param name="instance">The object instance, if applicable</param>
        
| M:Z0.XTend.Tagged``1(System.Collections.Generic.IEnumerable{``0},System.Type)| 
            <summary>
            Selects the members with a particular attribute
            </summary>
            <param name="src">The members to examine</param>
            <param name="name">The name to match</param>
        
| M:Z0.XTend.WithName``1(System.Collections.Generic.IEnumerable{``0},System.String)| 
            <summary>
            Selects the members with a particular name
            </summary>
            <param name="src">The members to examine</param>
            <param name="name">The name to match</param>
        
| M:Z0.XTend.WithName``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.HashSet{System.String})| 
            <summary>
            Selects the members with a name that exists within a supplied set
            </summary>
            <param name="src">The members to examine</param>
            <param name="name">The name to match</param>
        
| M:Z0.XTend.WithNameLike``1(System.Collections.Generic.IEnumerable{``0},System.String)| 
            <summary>
            Selects the members with names that contain the supplied search field
            </summary>
            <param name="src">The members to examine</param>
            <param name="search">The name to match</param>
        
| M:Z0.XTend.WithNameLike``1(``0[],System.String)   | 
            <summary>
            Selects the members with names that contain the supplied search field
            </summary>
            <param name="src">The members to examine</param>
            <param name="search">The name to match</param>
        
| M:Z0.XTend.WithNameLike``1(``0[],System.String[]) | 
            <summary>
            Selects the members with names that contain the supplied search field
            </summary>
            <param name="src">The members to examine</param>
            <param name="search">The name to match</param>
        
| M:Z0.XTend.WithNameStartingWith``1(``0[],System.String[])| 
            <summary>
            Selects the members with names that contain the supplied search field
            </summary>
            <param name="src">The members to examine</param>
            <param name="search">The name to match</param>
        
| M:Z0.XTend.MemberValue(System.Reflection.MemberInfo,System.Object)| 
            <summary>
            Gets the value of a specified field or property
            </summary>
            <param name="m">The field or property</param>
            <param name="o">The object on which the member is defined</param>
        
| M:Z0.XTend.MemberValue``1(System.Reflection.MemberInfo,System.Object)| 
            <summary>
            Gets the value of the identified member field or property
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="m">The member</param>
            <param name="o">The instance from which to access the member</param>
        
| M:Z0.XTend.Tag``1(System.Reflection.MemberInfo)   | 
            <summary>
            Gets the value of a member attribute if it exists 
            </summary>
            <typeparam name="A">The attribute type</typeparam>
            <param name="m">The member</param>
        
| M:Z0.XTend.ConversionOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the conversion operators from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.WithoutConversionOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Reomoves any conversion operations from the stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Abstract(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the abstract methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Instance(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the instance methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.NonPublic(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the non-public methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Returns``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the methods from a stream that return a particular type of value
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Returns``1(System.Reflection.MethodInfo[])| 
            <summary>
            Selects the methods from a stream that return a particular type of value
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Returns(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)| 
            <summary>
            Selects methods from a stream that return a particular type of value
            </summary>
            <param name="src">The methods to examine</param>
            <param name="rt">The method return type</param>
        
| M:Z0.XTend.ClosedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the closed generic methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Concrete(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the concrete (not abstract) methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.CreateDelegate``1(System.Reflection.MethodInfo)| 
            <summary>
            Creates a delegate for a static method via the expression api
            </summary>
            <typeparam name="D">The type of the constructed delegate</typeparam>
            <param name="m">The method that will be invoked when delegate is activated</param>
        
| M:Z0.XTend.angled(System.String)                  | 
            <summary>
            Encloses text between less than and greater than characters
            </summary>
            <param name="content">The content to enclose</param>
        
| M:Z0.XTend.DisplayName(System.Reflection.MethodInfo)| 
            <summary>
            Constructs a display name for a method
            </summary>
            <param name="src">The source method</param>
        
| M:Z0.XTend.DisplayName``1(System.Reflection.MethodBase)| 
            <summary>
            Constructs a display name for a generic method specialized for a specified type
            </summary>
            <typeparam name="T">The relative type</typeparam>
            <param name="src">The source method</param> 
        
| M:Z0.XTend.FullDisplayName(System.Reflection.MethodInfo)| 
            <summary>
            Constructs a display name for a method
            </summary>
            <param name="src">The source method</param>
        
| M:Z0.XTend.GenericArguments(System.Reflection.MethodInfo)| 
            <summary>
            Returns the arguments supplied to a constructed generic method; if the method is 
            nongeneric, a generic type definition or some other variant, an empty result is returned
            </summary>
            <param name="src">The method to examine</param>
        
| M:Z0.XTend.GenericDefinitions(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            For the generic methods in a stream, selects their respective definitions
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.GenericParameters(System.Reflection.MethodInfo,System.Boolean)| 
            <summary>
            If a method is non-generic, returns an emtpy list.
            If a method is open generic, returns a list describing the open parameters
            If a method is closed generic, returns a list describing the closed parameters
            </summary>
            <param name="m">The method to examine</param>
            <param name="effective">Whether to yield effective types or types as reported by the framework reflection api</param>
        
| M:Z0.XTend.GenericParameters(System.Reflection.MethodInfo)| 
            <summary>
            Returns the generic parameters specified by a generic method definition or, if constructed,
            the parameters specified by the definition on which the construction was predicated. If nongeneric,
            returns an empty result
            </summary>
            <param name="src">The method to examine</param>
        
| M:Z0.XTend.KindId(System.Reflection.MethodInfo)   | 
            <summary>
            Returns the source method's kind identifier if it exists
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.MakeGenericMethods(System.Reflection.MethodInfo,System.Type[])| 
            <summary>
            Creates generic methods of parametric arity *1*
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        
| M:Z0.XTend.MemberOf(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.GenericPartition)| 
            <summary>
            For the generic methods in a stream, selects their respective definitions
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.NonGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the non-generic methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.OpenGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the open generic methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.OpenGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Int32)| 
            <summary>
            Selects the open generic methods from a stream with a specified argument count
            </summary>
            <param name="src">The methods to examine</param>
            <param name="args">The target argument count</param>
        
| M:Z0.XTend.OpenTypeParameters(System.Reflection.MethodInfo,System.Boolean)| 
            <summary>
            For a non-constructed generic method or a generic method definition, returns an array of the method's type parameters; otherwise, returns an empty array
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.Parameters(System.Reflection.MethodInfo,System.Func{System.Reflection.ParameterInfo,System.Boolean})| 
            <summary>
            Selects the method parameters that satisfy a predicate
            </summary>
            <param name="src">The method to examine</param>
            <param name="predicate">The predicate to match</param>
        
| M:Z0.XTend.WithParameter(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Func{System.Reflection.ParameterInfo,System.Boolean})| 
            <summary>
            Selects the methods from a stream where at least one parameter satisfies a specified predicate
            </summary>
            <param name="src">The method to examine</param>
            <param name="predicate">The predicate to match</param>
        
| M:Z0.XTend.IsOpenGeneric(System.Reflection.MethodInfo)| 
            <summary>
            Returns true if the method accepts generic parameters, false otherwise
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.IsOpenGeneric(System.Reflection.MethodInfo,System.Int32)| 
            <summary>
            Returns true if the method has a specified count of open generic parameters, false otherwise
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.IsClosedGeneric(System.Reflection.MethodInfo)| 
            <summary>
            Returns true if the method has unspecified generic parameters, false otherwise
            </summary>
            <param name="src">The method to examine</param>
        
| M:Z0.XTend.IsNonGeneric(System.Reflection.MethodInfo)| 
            <summary>
            Returns true if the method has unspecified generic parameters, false otherwise
            </summary>
            <param name="src">The method to examine</param>
        
| M:Z0.XTend.HasVoidReturn(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether a method has a void return and, consequently, cannot be a function
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.IsAction(System.Reflection.MethodInfo) | 
            <summary>
            Dtermines whether a method has a void return
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.IsFunction(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether a method is a function
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.ArityValue(System.Reflection.MethodInfo)| 
            <summary>
            Determines the number of parameters defined by a method
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.HasArityValue(System.Reflection.MethodInfo,System.Int32)| 
            <summary>
            Determines whether a method has a speicied arity
            </summary>
            <param name="m">The method to examine</param>
            <param name="arity">The arity to match</param>
        
| M:Z0.XTend.IsImplicitConverter(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether the method is an implicit conversion operator
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.IsExplicitConverter(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether the method is an explicit conversion operator
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.IsConversionOperator(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether a method is an implict or explicit conversion operation
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.ParameterTypes(System.Reflection.MethodInfo)| 
            <summary>
            Returns a method's parameter types
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.EffectiveParameterTypes(System.Reflection.MethodInfo)| 
            <summary>
            Returns a method's parameter types
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.ParameterTypes(System.Reflection.MethodInfo,System.Boolean)| 
            <summary>
            Returns a method's parameter types
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.ParameterType(System.Reflection.MethodInfo,System.Int32)| 
            <summary>
            Determines the type of an index-identified parameter
            </summary>
            <param name="m">The method to examine</param>
            <param name="index">The parameter index</param>
        
| M:Z0.XTend.Reify(System.Reflection.MethodInfo,System.Type[])| 
            <summary>
            Reifies a method if it is open generic; otherwise, returns the original method
            </summary>
            <param name="m">The source method</param>
            <param name="args">The types over which to close the method</param>
        
| M:Z0.XTend.Reify``1(System.Reflection.MethodInfo) | 
            <summary>
            Reifies a 1-parameter generic method with a parametric type argument
            </summary>
            <param name="src">The source method</param>
            <param name="args">The type arguments</param>
        
| M:Z0.XTend.Reify``2(System.Reflection.MethodInfo) | 
            <summary>
            Reifies a 2-parameter generic method with a parametric type argument
            </summary>
            <param name="src">The source method</param>
            <param name="args">The type arguments</param>
        
| M:Z0.XTend.Reify(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type[])| 
            <summary>
            Reifies generic source methods with supplied type arguments
            </summary>
            <param name="src">The source method</param>
            <param name="args">The type arguments</param>
        
| M:Z0.XTend.Static(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the static methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.Static(System.Reflection.MethodInfo[]) | 
            <summary>
            Selects the static methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.SuppliedTypeArgs(System.Reflection.MethodInfo,System.Boolean)| 
            <summary>
            For a closed generic method, returns the supplied arguments; otherwise, returns an empty array
            </summary>
            <param name="m">The method to examine</param>
            <param name="effective">Whether to yield effective types or types as reported by the framework reflection api</param>
        
| M:Z0.XTend.Tag``1(System.Reflection.MethodInfo)   | 
            <summary>
            Gets the value of a member attribute if it exists 
            </summary>
            <typeparam name="A">The attribute type</typeparam>
            <param name="m">The member</param>
        
| M:Z0.XTend.Tagged``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the methods that are adorned with parametrically-identified attribute
            </summary>
            <param name="src">The methods to examine</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.Tagged``1(System.Reflection.MethodInfo[])| 
            <summary>
            Selects the methods that are adorned with parametrically-identified attribute
            </summary>
            <param name="src">The methods to examine</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.WithArity(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Int32)| 
            <summary>
            Selects functions from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.XTend.WithParameterCount(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Int32)| 
            <summary>
             Selects methods from a stream that have a specified parameter count
            </summary>
            <param name="src">The methods to examine</param>
            <param name="t">The parameter type to match</param>
        
| M:Z0.XTend.WithGenericParameterType(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)| 
            <summary>
            Selects generic methods from a stream that have a specified generic type definition parameter
            </summary>
            <param name="src">The methods to examine</param>
            <param name="typedef">The type definition to match</param>
        
| M:Z0.XTend.WithParameterType(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type)| 
            <summary>
             Selects methods from a stream that declare a parameter that has a specifid type
            </summary>
            <param name="src">The methods to examine</param>
            <param name="t">The parameter type to match</param>
        
| M:Z0.XTend.WithParameterTypes(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Type[])| 
            <summary>
             Selects methods from a stream that have specified parameter types
            </summary>
            <param name="src">The methods to examine</param>
            <param name="t">The parameter type to match</param>
        
| M:Z0.XTend.ReferenceKind(System.Reflection.ParameterInfo)| 
            <summary>
            Determines the variance of a parameter
            </summary>
            <param name="src">The source parameter</param>
        
| M:Z0.XTend.Tagged``1(System.Reflection.ParameterInfo)| 
            <summary>
            Determines whether a parameter has a parametrically-identified attribute
            </summary>
            <param name="p">The parameter to examine</param>
            <typeparam name="A">The attribute type to check</typeparam>
        
| M:Z0.XTend.Instance(System.Reflection.PropertyInfo[])| 
            <summary>
            Selects the instance properties from an array
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Static(System.Reflection.PropertyInfo[])| 
            <summary>
            Selects the static properties from an array
            </summary>
            <param name="src">The source array</param>
        
| M:Z0.XTend.WithPropertyType(System.Reflection.PropertyInfo[],System.Type[])| 
            <summary>
            Selects the source properties with property types that match one of the types in a caller-supplied parameter array
            </summary>
            <param name="src">The properties to filter</param>
            <param name="match">The property type match target</param>
        
| M:Z0.XTend.WithSet(System.Reflection.PropertyInfo[])| 
            <summary>
            Selects the properties with set methods from the stream
            </summary>
            <param name="src">The properties to examine</param>
        
| M:Z0.XTend.WithPublicSet(System.Reflection.PropertyInfo[])| 
            <summary>
            Selects the properties from a stream that have public manipulators
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.HasPublicGetter(System.Reflection.PropertyInfo)| 
            <summary>
            Determines whether the property has a public getter
            </summary>
            <param name="p">The property to examine</param>
        
| M:Z0.XTend.HasPublicGetterAndSetter(System.Reflection.PropertyInfo)| 
            <summary>
            Determines whether the property has both a public getter and setter
            </summary>
            <param name="p">The property to examine</param>
        
| M:Z0.XTend.HasPublicSetter(System.Reflection.PropertyInfo)| 
            <summary>
            Determines whether the property has a public setter
            </summary>
            <param name="p">The property to examine</param>
        
| M:Z0.XTend.IsIndexer(System.Reflection.PropertyInfo)| 
            <summary>
            Determines whether a property is an indexer
            </summary>
            <param name="p">The property to examine</param>
        
| M:Z0.XTend.PropertyTypes(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})| 
            <summary>
            Selects the property type from each source property
            </summary>
            <param name="src">The source properties</param>
        
| M:Z0.XTend.Read(System.Reflection.PropertyInfo,System.Object)| 
            <summary>
            Attempts to retrieve the value of an instance or static property
            </summary>
            <param name="p">The property</param>
            <param name="instance">The object instance, if applicable</param>
        
| M:Z0.XTend.Reifies(System.Reflection.PropertyInfo[],System.Type)| 
            <summary>
            Selects the properties from a stream that reify a specified interface type
            </summary>
            <param name="src">The source stream</param>
            <param name="tInterface">The inteface type</param>
        
| M:Z0.XTend.Static(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})| 
            <summary>
            Selects the static properties from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Tagged``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})| 
            <summary>
            Selects properaties from a source stream to which a parametrically-identified attribute is attached
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.Value``1(System.Reflection.PropertyInfo,System.Object)| 
            <summary>
            Attempts to retrieves the value of a static or instance property
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="member">The property</param>
            <param name="instance">The object instance, if applicable</param>
        
| M:Z0.XTend.WithGet(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})| 
            <summary>
            Selects the properties with get methods from the stream
            </summary>
            <param name="src">The properties to examine</param>
        
| M:Z0.XTend.WithPublicGet(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})| 
            <summary>
            Selects the properties from a stream that have public accessesors
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.WithGetAndSet(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})| 
            <summary>
            Selects the properties with both get/set methods from the stream
            </summary>
            <param name="src">The properties to examine</param>
        
| M:Z0.XTend.WithPropertyType(System.Reflection.PropertyInfo[],System.Type)| 
            <summary>
            Selects the properties from a stream of a specified type
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Abstract(System.Type[])                | 
            <summary>
            Selects the abstract types from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Delegates(System.Type[])               | 
            <summary>
            Returns all source types which are delegates
            </summary>
            <param name="src">The source types</param>
        
| M:Z0.XTend.Nested(System.Type[])                  | 
            <summary>
            Selects the nested types from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.NonPublic(System.Type[])               | 
            <summary>
            Selects the non-public types from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Public(System.Type[])                  | 
            <summary>
            Selects the public types from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Realize``1(System.Collections.Generic.IEnumerable{System.Type})| 
            <summary>
            Selects the types from a stream that implement a specific interface
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The interface type</typeparam>
        
| M:Z0.XTend.Static(System.Type[])                  | 
            <summary>
            Selects the static types from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Tagged``1(System.Collections.Generic.IEnumerable{System.Type})| 
            <summary>
            Selects source types from the stream to wich a parametrically-identified attribute is applied
            </summary>
            <param name="src">The source stypes</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.Tagged``1(System.Type[])               | 
            <summary>
            Selects source types from the stream to wich a parametrically-identified attribute is applied
            </summary>
            <param name="src">The source stypes</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.CloseEnumerableType(System.Type)       | 
            <summary>
            Recursively close an IEnumerable generic type
            </summary>
            <param name="seq">The sequence type</param>
            <remarks>
            Adapted from https://blogs.msdn.microsoft.com/mattwar/2007/07/30/linq-building-an-iqueryable-provider-part-i/
            </remarks>
        
| M:Z0.XTend.DeclaredFields(System.Type)            | 
            <summary>
            Selects all instance/static and public/non-public fields declared by a type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.DeclaredMethods(System.Type,System.Boolean)| 
            <summary>
            Selects all methods declared by a type; however, property getters/setters and other 
            compiler-generated artifacts are excluded
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.DeclaredProperties(System.Type)        | 
            <summary>
            Retrieves all properties declared by a by a type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.DeclaredStaticProperties(System.Type)  | 
            <summary>
            Retrieves the public and non-public static properties declared by a type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.DisplayName(System.Type)               | 
            <summary>
            Constructs a display name for a type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.Fields(System.Type)                    | 
            <summary>
            Selects all instance/static and public/non-public fields declared or inherited by a type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.InheritedPublicFields(System.Type)     | 
            <summary>
            Retrieves the public instance Fields declared by a supertype
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.FlaggedMethods(System.Type,System.Reflection.BindingFlags)| 
            <summary>
            Returns the methods from the source type per the binding flags
            </summary>
            <param name="src">The type to examine</param>
            <param name="flags">The reflection query flags</param>
        
| M:Z0.XTend.GenericDefinition2(System.Type)        | 
            <summary>
            For a generic type or reference to a generic type, retrieves the generic type definition;
            otherwise, returns the void type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.GenericParameters(System.Type,System.Boolean)| 
            <summary>
            If a type is non-generic, returns an emtpy list.
            If a type is open generic, returns a list of generic arguments
            If a type is closed generic, returns a list of the types that were supplied as arguments to construct the type
            </summary>
            <param name="m">The method to examine</param>
        
| M:Z0.XTend.HasDefaultPublicConstructor(System.Type)| 
            <summary>
            Determines whether a type has a public default constructor
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.HasDefaultPublicConstructor``1         | 
            <summary>
            Determines whether a type has a public default constructor
            </summary>
            <typeparam name="T">The type to examine</typeparam>
        
| M:Z0.XTend.Instantiate``1(System.Type,System.Object[])| 
            <summary>
            Creates an instance of a type and casts the instance value as specified by a type parameter
            </summary>
            <typeparam name="T">The cast instance type</typeparam>
            <param name="t">The type for which an instance will be created</param>
            <param name="args">Arguments matched with/passed to an instance constructor defined by the type</param>
        
| M:Z0.XTend.Interfaces(System.Type)                | 
            <summary>
            Returns all interfaces realized by the type, including those inherited from
            supertypes
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsClosedGeneric(System.Type,System.Boolean)| 
            <summary>
            Determines whether a type is a constructed generic type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsConcrete(System.Type)                | 
            <summary>
            Returns true if the source type is either non-generic or a generic type that has been closed over all parameters
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsDelegate(System.Type)                | 
            <summary>
            Determines whether the specified type is a delegate type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsEmpty(System.Type)                   | 
            <summary>
            Returns true if the source type is null or void; otherwise, returns false
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsFloatingPoint(System.Type)           | 
            <summary>
            Determines whether a type is a system-defined and architecture-supported floating-point type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsGenericRef(System.Type)              | 
            <summary>
            Determines whether a type is a reference to a generic type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsIntegral(System.Type)                | 
            <summary>
            Determines whether a type is a system-defined and architecture-supported integral type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsLiteral``1(``0)                      | 
            <summary>
            Determines whether the enum value corresponds to a defined literal
            </summary>
            <param name="src">The enum value to check</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.XTend.IsNonEmpty(System.Type)                | 
            <summary>
            Returns true if the source type is non-null and non-void; otherwise, returns false
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsNullableType(System.Type)            | 
            <summary>
            Determines whether a type is nullable
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsNullable``1(System.Type)             | 
            <summary>
            Determine whether a type is a nullable type with a given underlying type
            </summary>
            <typeparam name="T">The underlying type</typeparam>
            <param name="t">The type to check</param>
            <returns>
            Returns true if t is both a nullable type and is of type T
            </returns>
        
| M:Z0.XTend.IsByte(System.Type)                    | 
            <summary>
            Determines whether a type is the sytem-defined 8-bit unsigned integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsSByte(System.Type)                   | 
            <summary>
            Determines whether a type the sytem-defined 8-bit signed integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsUInt8(System.Type)                   | 
            <summary>
            Determines whether a type the sytem-defined 8-bit unsigned integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsInt8(System.Type)                    | 
            <summary>
            Determines whether a type the sytem-defined 8-bit signed integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsUInt16(System.Type)                  | 
            <summary>
            Determines whether a type the sytem-defined 16-bit unsigned integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsInt16(System.Type)                   | 
            <summary>
            Determines whether a type the sytem-defined 16-bit signed integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsUInt32(System.Type)                  | 
            <summary>
            Determines whether a type the sytem-defined 32-bit unsigned integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsInt32(System.Type)                   | 
            <summary>
            Determines whether a type the sytem-defined 32-bit signed integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsUInt64(System.Type)                  | 
            <summary>
            Determines whether a type the sytem-defined 64-bit unsigned integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsInt64(System.Type)                   | 
            <summary>
            Determines whether a type the sytem-defined 64-bit signed integer type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsSingle(System.Type)                  | 
            <summary>
            Determines whether a type the sytem-defined 32-bit floating-point type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsFloat32(System.Type)                 | 
            <summary>
            Determines whether a type the sytem-defined 32-bit floating-point type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsDouble(System.Type)                  | 
            <summary>
            Determines whether a type the sytem-defined 64-bit floating-point type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsFloat64(System.Type)                 | 
            <summary>
            Determines whether a type the sytem-defined 64-bit floating-point type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsDecimal(System.Type)                 | 
            <summary>
            Determines whether a supplied type is predicated on a double, including enums, nullable wrappers and references
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsOpenGeneric(System.Type,System.Boolean)| 
            <summary>
            Determines whether a type is an unconstructed generic type, also called an open generic type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsPrimalNumeric(System.Type)           | 
            <summary>
            Determines whether a type is a system-defined and architecture-suppored numeric type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsRef(System.Type)                     | 
            <summary>
            Determines whether the type is a (memory) reference
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsSignedInt(System.Type)               | 
            <summary>
            Determines whether a type is a system-defined and architecture-supported unsigned integral type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.IsSpecial(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether a method is non-special as determined by either the IsSpecialName property 
            or the presence of a compiler-generated character in the method name
            </summary>
            <param name="src">The method to examine</param>
        
| M:Z0.XTend.IsNonSpecial(System.Reflection.MethodInfo)| 
            <summary>
            Determines whether a method is special as determined by either the IsSpecialName property 
            or the presence of a compiler-generated character in the method name
            </summary>
            <param name="src">The method to examine</param>
        
| M:Z0.XTend.IsStatic(System.Type)                  | 
            <summary>
            Determines whether a type is static
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsStruct(System.Type)                  | 
            <summary>
            Determines whether a type is a struct
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsSystemDefined(System.Type)           | 
            <summary>
            Determines whether a type is system-defined primitive
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsBool(System.Type)                    | 
            <summary>
            Determines whether a supplied type is predicated on a bool, including nullable wrappers and references
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsString(System.Type)                  | 
            <summary>
            Determines whether a supplied type is predicated on a string, including references
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsObject(System.Type)                  | 
            <summary>
            Determines whether a supplied type is predicated on a string, including references
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsVoid(System.Type)                    | 
            <summary>
            Determines whether a supplied type is of type Void
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsChar(System.Type)                    | 
            <summary>
            Determines whether a supplied type is predicated on a char, including nullable wrappers and references
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.IsTypeOf(System.Type,System.Type)      | 
            <summary>
            Determines whether a source type is predicated on a specified match type, including nullable wrappers, references and enums
            </summary>
            <typeparam name="T">The type to match</typeparam>
            <param name="candidate">The source type</param>
            <param name="match">The type to match</param>
        
| M:Z0.XTend.IsTypeOf``1(System.Type)               | 
            <summary>
            Determines whether a source type is predicated on a parametric type, including nullable wrappers, references and enums
            </summary>
            <param name="match">The source type</param>
            <typeparam name="T">The type to match</typeparam>
        
| M:Z0.XTend.IsUnManaged(System.Type)               | 
            <summary>
            Determines whether a type is unmanaged
            </summary>
            <param name="t">The type to test</param>
            <remarks>Idea from https://stackoverflow.com/questions/53968920/how-do-i-check-if-a-type-fits-the-unmanaged-constraint-in-c</remarks>
        
| M:Z0.XTend.IsUnsignedInt(System.Type)             | 
            <summary>
            Determines whether a type is a system-defined and architecture-supported signed integral type or a system-defined variation thereof
            </summary>
            <param name="t">The type to examine</param>
            <remarks>
            Variations accounted for include
            A) System-defined nullable parametric closures over the type 
            B) System-defined reference types that cover the type, including ref/out parameters and such
            C) THe sytem-defined pseudo-refinement mechanism known as an Enum
            </remarks>
        
| M:Z0.XTend.LiteralFields(System.Type)             | 
            <summary>
            Selects the literal fields defined by a type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.LiteralFields(System.Type,System.Type) | 
            <summary>
            Selects the literal fields declared by a type that are of specified type 
            </summary>
            <param name="src">The source type</param>
            <param name="match">The type to match</param>
        
| M:Z0.XTend.LiteralFields``1(System.Type)          | 
            <summary>
            Selects the literal fields declared by a parametric type that are of specified type 
            </summary>
            <param name="match">The type to match</param>
        
| M:Z0.XTend.LiteralFieldValues``1(System.Type)     | 
            <summary>
            Selects the literal values declared by a type that are of specified parametric type
            </summary>
            <param name="src">The source type</param>
            <typeparam name="T">The literal value type</typeparam>
        
| M:Z0.XTend.LiteralFieldValues``2(System.Type)     | 
            <summary>
            Selects the literal values declared by a type that are of specified parametric type
            </summary>
            <param name="src">The source type</param>
            <typeparam name="T">The literal value type</typeparam>
        
| M:Z0.XTend.LiteralValues``1(System.Type)          | 
            <summary>
            Selects the literal fields defined by a type and extracts/casts their values
            </summary>
            <param name="src">The source type</param>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.XTend.LiteralValueIndex``1(System.Type,System.String,System.Nullable{System.Int32})| 
            <summary>
            Enumerates the literals defined by a type indexed by declaration order and which have names that match a specified filter
            </summary>
            <param name="src">The source type</param>
            <param name="declared">Whether a literal is rquired to be declared by the type</param>
        
| M:Z0.XTend.MatchMethod(System.Type,System.String,System.Type[])| 
            <summary>
            Searches a type for any method that matches the supplied signature
            </summary>
            <param name="declarer">The type to search</param>
            <param name="name">The name of the method</param>
            <param name="paramTypes">The method parameter types in ordinal position</param>
        
| M:Z0.XTend.Method(System.Type,System.String)      | 
            <summary>
            Selects the first method found on the type, if any, that has a specified name
            </summary>
            <param name="src">The type to examine</param>
            <param name="name">The name to match</param>
        
| M:Z0.XTend.Methods(System.Type,System.Boolean)    | 
            <summary>
            Selects the methods available through the type, including those that were inherited; 
            however, property getters/setters and other compiler-generated artifacts may be excluded 
            via the nonspecial option
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.UndeclaredMethods(System.Type,System.Boolean)| 
            <summary>
            Selects the methods available through the type that were not declared by the type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.DeclaredMethods(System.Type,System.String,System.Boolean)| 
            <summary>
            Selects the public/non-public static/instance methods declared by a type that have a specific name
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.DeclaredMethods(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)| 
            <summary>
            Selects the public/non-public static/instance methods declared by a stream of types
            </summary>
            <param name="src">The types to examine</param>
        
| M:Z0.XTend.StaticMethods(System.Type,System.Boolean)| 
            <summary>
            Gets the static methods defined on a specified type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.DeclaredStaticMethods(System.Type,System.Boolean)| 
            <summary>
            Retrieves the public and non-public static methods declared by a type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.DeclaredStaticMethods(System.Type,System.String,System.Boolean)| 
            <summary>
            Retrieves the public and non-public static methods declared by a type that have a specific name
            </summary>
            <param name="t">The type to examine</param>
            <param name="InstanceType">Whether to selct static or instance </param>
        
| M:Z0.XTend.DeclaredInstanceMethods(System.Type,System.Boolean)| 
            <summary>
            Retrieves the public and non-public instance methods declared by a type
            </summary>
            <param name="t">The type to examine</param>
            <param name="InstanceType">Whether to selct static or instance </param>
        
| M:Z0.XTend.OpenTypeParameters(System.Type)        | 
            <summary>
            For a non-constructed generic type or a generic type definition, returns an
            array of defined type parameters; otherwise, returns an empty array
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.OpenTypeParameterCount(System.Type)    | 
            <summary>
            Returns the number of open generic paramters defined by the source type
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.Properties(System.Type)                | 
            <summary>
            Retrieves all declared or inheraited by a type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.PublicFields(System.Type)              | 
            <summary>
            Selects all public static/instance fields from the source
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.PublicInstanceFields(System.Type)      | 
            <summary>
            Selects all public instance fields from the source
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.Reifies(System.Type,System.Type)       | 
            <summary>
            Determines whether a type implements a specified interface
            </summary>
            <param name="src">The type to examine</param>
            <param name="tInterface">The interface type to test</param>
        
| M:Z0.XTend.Reifies``1(System.Type)                | 
            <summary>
            Determines whether a type implements a parametrically-specific interface
            </summary>
            <typeparam name="T">The interface type</typeparam>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.RootType(System.Type)                  | 
            <summary>
            If a value type and not an enum, returns the type; 
            If an enum returns the unerlying integral type; 
            If a nullable value typethat is not an enum, returns the underlying type; 
            if nullable enum, returns the non-nullable underlying integral type
            If a pointer returns the pointee type
            Otherwise, reurns the effective type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.SpecialMethods(System.Type,System.Reflection.BindingFlags)| 
            <summary>
            Returns the methods from the source type per the binding flags; however, only those with special names are included
            </summary>
            <param name="src">The type to examine</param>
            <param name="flags">The reflection query flags</param>
        
| M:Z0.XTend.NonSpecialMethods(System.Type,System.Reflection.BindingFlags)| 
            <summary>
            Returns the methods from the source type per the binding flags, exluding those with special names
            </summary>
            <param name="src">The type to examine</param>
            <param name="flags">The reflection query flags</param>
        
| M:Z0.XTend.StaticProperties(System.Type)          | 
            <summary>
            Gets the static methods defined on a specified type
            </summary>
            <param name="this">The type to examine</param>
        
| M:Z0.XTend.StaticProperties(System.Type,System.Boolean)| 
            <summary>
            Gets the static methods defined on a specified type
            </summary>
            <param name="this">The type to examine</param>
            <param name="get">Specifies whether to require selected properties to provide get accessors</param>
        
| M:Z0.XTend.StaticProperties(System.Type,System.Boolean,System.Boolean)| 
            <summary>
            Gets the static properties defined on a specified type that provided get/set accessors/manipulators 
            per the provided specifiation
            </summary>
            <param name="this">The type to examine</param>
            <param name="get">Specifies whether to include or exclude properties with get accessors</param>
            <param name="set">Specifies whether to include or exclude properties with set accessors</param>
        
| M:Z0.XTend.SystemKeyword(System.Type)             | 
            <summary>
            For a system-defined type, returns the C#-specific keyword for the type if it has one; 
            otherwise, returns an empty string
            </summary>
            <param name="src">The type to test</param>
        
| M:Z0.XTend.Tag``1(System.Type,System.Boolean)     | 
            <summary>
            Gets the value of a member attribute if it exists 
            </summary>
            <typeparam name="A">The attribute type</typeparam>
            <param name="m">The member</param>
        
| M:Z0.XTend.Tagged``1(System.Type)                 | 
            <summary>
            Determines whether an attribute is applied to a type
            </summary>
            <param name="src">The source type</param>
            <typeparam name="A">The attribute type</typeparam>
        
| M:Z0.XTend.TEffective(System.Type)                | 
            <summary>
            If the source type is a type reference, returns the referenced type; otherwise, returns the original type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.TEnumBase(System.Type)                 | 
            <summary>
            If source type is an enum, returns the integral base type; otherwise returns the empty type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.TNullableBase(System.Type)             | 
            <summary>
            If source type is n nullable value type, returns the underlying type; otherwise returns the empty type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.TPointer(System.Type)                  | 
            <summary>
            If the source type is a pointer, returns the type to which the pointer points; otherwise, returns the empty type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.Concrete(System.Type[])                | 
            <summary>
            Selects the concrete types from a stream
            </summary>
            <param name="src">The source stream</param>
        
| M:Z0.XTend.Interfaces(System.Type[])              | 
            <summary>
            Returns all source types which ar interfaces
            </summary>
            <param name="src">The source types</param>
        
| M:Z0.XTend.Classes(System.Type[])                 | 
            <summary>
            Returns all source types which are classes
            </summary>
            <param name="src">The source types</param>
        
| M:Z0.XTend.Structs(System.Type[])                 | 
            <summary>
            Returns all source types which are structs
            </summary>
            <param name="src">The source types</param>
        
| M:Z0.XTend.Enums(System.Type[])                   | 
            <summary>
            Returns all source types which are enums
            </summary>
            <param name="src">The source types</param>
        
| M:Z0.XTend.InNamespace(System.Type[],System.String)| 
            <summary>
            Selects the types from a specified namespace
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.Unwrap(System.Type)                    | 
            <summary>
            Returns the underlying system type if enclosed by a source type, otherwise returns the source type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.XTend.BlockPartition(System.String,System.Int32,System.String)| 
            <summary>
            Block-formats a string using specified block length and separator
            </summary>
            <param name="src">The source string</param>
            <param name="blocklen">The number of characters in each block, save the last</param>
            <param name="sep">The block separator</param>
        
| M:Z0.XTend.BlockPartition(System.String,System.Int32,System.Char)| 
            <summary>
            Block-formats a string using specified block length and separator
            </summary>
            <param name="src">The source string</param>
            <param name="blocklen">The number of characters in each block, save the last</param>
            <param name="sep">The block separator</param>
        
| M:Z0.XTend.BlockPartition(System.String,System.Int32,System.Char,System.String)| 
            <summary>
            Block-formats a string using specified block length, separator and block prefix
            </summary>
            <param name="src">The source string</param>
            <param name="blocklen">The number of characters in each block, save the last</param>
            <param name="sep">The block separator</param>
            <param name="prefix">Content that immediately precedes each block</param>
        
| M:Z0.XTend.Label(System.Text.StringBuilder,System.String,System.Char)| 
            <summary>
            Appends a label suffixed by a separator to produce '{label}{sep}'
            </summary>
            <param name="sb">The target builder</param>
            <param name="label">The label text</param>
            <param name="sep">A character that denotes the end of a label and indicate that what follows is content</param>
        
| M:Z0.XTend.Label(System.Text.StringBuilder,System.String,System.Char,System.Object)| 
            <summary>
            Appends labeled content to produce: '{label}{sep} {content}'
            </summary>
            <param name="sb">The target builder</param>
            <param name="label">The label text</param>
            <param name="sep">A character that denotes the end of a label and indicate that what follows is content</param>
            <param name="content">The content to append</param>
        
| M:Z0.XTend.Label``1(System.Text.StringBuilder,System.String,``0,System.Char)| 
            <summary>
            Appends labeled formattable content to produce: '{label}{sep} {content}'
            </summary>
            <param name="sb">The target builder</param>
            <param name="label">The label text</param>
            <param name="sep">A character that denotes the end of a label and indicate that what follows is content</param>
            <param name="content">The content to append</param>
        
| M:Z0.XTend.Label``1(System.Text.StringBuilder,System.String,System.Char,``0,Z0.Padding,System.Char)| 
            <summary>
            Delimits labeled formattable content to produce '{delimiter} {label}{sep} {content}'
            </summary>
            <param name="sb">The target builder</param>
            <param name="label">The label text</param>
            <param name="sep">A character that denotes the end of a label and indicate that what follows is content</param>
            <param name="content">The content to delimit</param>
            <param name="pad">The right-padded content width</param>
            <param name="delimiter">The content delimiter</param>
        
| M:Z0.XTend.build                                  | 
            <summary>
            Creates a new stringbuilder
            </summary>
        
| M:Z0.XTend.Concat(System.Collections.Generic.IEnumerable{System.String},System.String)| 
            <summary>
            Joins the strings provided by the enumerable with an optional separator
            </summary>
            <param name="src">The source strings</param>
            <param name="sep">The separator, if any</param>
        
| M:Z0.XTend.Concat(System.Collections.Generic.IEnumerable{System.Char},System.Char)| 
            <summary>
            Joins a sequence of source characters interspersed with a supplied separator
            </summary>
            <param name="chars">The characters to join</param>
            <param name="sep">The character to intersperse</param>
        
| M:Z0.XTend.Concat(System.Collections.Generic.IEnumerable{System.Char})| 
            <summary>
            Forms a string by source character justapostion
            </summary>
            <param name="src">The characters to concatenate</param>
        
| M:Z0.XTend.Concat(System.Char[])                  | 
            <summary>
            Forms a string from a character array
            </summary>
            <param name="src">The source array</param>
        
| M:Z0.XTend.Concat(System.ReadOnlySpan{System.Char})| 
            <summary>
            Forms a string by source character justapostion
            </summary>
            <param name="src">The source span</param>
        
| M:Z0.XTend.Concat(System.Span{System.Char})       | 
            <summary>
            Forms a string by source character justapostion
            </summary>
            <param name="src">The source span</param>
        
| M:Z0.XTend.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})| 
            <summary>
            Forms a string by source character justapostion
            </summary>
            <param name="src">The source span</param>
        
| M:Z0.XTend.Concat(System.Span{System.String})     | 
            <summary>
            Sequentially concatenates each indexed cell to the next without deimiters/interspersal
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.XTend.Concat(System.Span{System.String},System.Char)| 
            <summary>
            Sequentially concatenates each indexed cell to the next, separated by a specified character
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.XTend.ContentEqual(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.XTend.ContentEqual(System.Span{System.Char},System.ReadOnlySpan{System.Char})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.XTend.ContentEqual(System.Span{System.Char},System.Span{System.Char})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.XTend.DelimitLabel(System.Text.StringBuilder,System.String,System.Char,System.Object,Z0.Padding,System.Char)| 
            <summary>
            Delimits labeled content to produce '{delimiter} {label}{sep} {content}'
            </summary>
            <param name="sb">The target builder</param>
            <param name="label">The label text</param>
            <param name="sep">A character that denotes the end of a label and indicate that what follows is content</param>
            <param name="content">The content to delimit</param>
            <param name="pad">The right-padded content width</param>
            <param name="delimiter">The content delimiter</param>
        
| M:Z0.XTend.EnclosedBy(System.String,System.String,System.String,System.StringComparison)| 
            <summary>
            Determines whether the subject is contained betwee specified left and right markers
            </summary>
            <param name="s">The subject to test</param>
            <param name="left">The left marker</param>
            <param name="right">The right marker</param>
            <param name="compare">Th comparison type</param>
        
| M:Z0.XTend.EnclosedBy(System.String,System.Char,System.Char)| 
            <summary>
            Determines whether the subject is contained betwee specified left and right markers
            </summary>
            <param name="s">The string to search</param>
            <param name="left">The left marker</param>
            <param name="right">The right marker</param>
        
| M:Z0.XTend.EndsWith(System.String,System.Char)    | 
            <summary>
            Determines whether a string ends with a specific character
            </summary>
            <param name="s">The string to search</param>
            <param name="c">The character to match</param>
        
| M:Z0.XTend.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})| 
            <summary>
            Determines whether a string terminates with a value from a supplied set
            </summary>
            <param name="src">The string to examine</param>
            <param name="values">The characters for which to search</param>
        
| M:Z0.XTend.EndsWithDigit(System.String)           | 
            <summary>
            Determines whether a string ends with a digit
            </summary>
            <param name="s">The string to search</param>
        
| M:Z0.XTend.Enquote(System.String)                 | 
            <summary>
            Encloses supplied text in quotation marks
            </summary>
            <param name="content">The content to be quoted</param>
        
| M:Z0.XTend.FirstIndexOf(System.String,System.Char)| 
            <summary>
            Searches a string for the first occurrence of a specified character
            </summary>
            <param name="s">The string to search</param>
            <param name="match">The character to match</param>
        
| M:Z0.XTend.FirstIndexOf(System.String,System.String)| 
            <summary>
            Searches a string for the first occurrence of a specified substring
            </summary>
            <param name="s">The string to search</param>
            <param name="match">The substring to match</param>
        
| M:Z0.XTend.IfBlank(System.String,System.String)   | 
            <summary>
            Returns the source string if it is not blank; otherwise, returns an alternate string
            </summary>
            <param name="src">The soruce string</param>
            <param name="alt">The alternate string</param>
        
| M:Z0.XTend.Intersperse(System.String,System.Char) | 
            <summary>
            Creates a new string by weaving a specified character between each character in the source
            </summary>
            <param name="src">The source string</param>
            <param name="c">The character to intersperse</param>
        
| M:Z0.XTend.Intersperse(System.String,System.String)| 
            <summary>
            Creates a new string by weaving a substring between each character in the source
            </summary>
            <param name="src">The source string</param>
            <param name="sep">The value to intersperse</param>
        
| M:Z0.XTend.IsBlank(System.String)                 | 
            <summary>
            Returns true if a string is null or whitespace; otherwise, returns false
            </summary>
            <param name="s">The string to evaluate</param>
        
| M:Z0.XTend.IsNotBlank(System.String)              | 
            <summary>
            Returns true if a string has at least one character that is not considered whitespace
            </summary>
            <param name="s">The string to evaluate</param>
        
| M:Z0.XTend.LastIndexOf(System.String,System.Char) | 
            <summary>
            Searches for the last index of a specified character in a string
            </summary>
            <param name="s">The string to search</param>
            <param name="match">The character to match</param>
        
| M:Z0.XTend.LastIndexOf(System.String,System.String)| 
            <summary>
            Searches for the last index of a specified character in a string
            </summary>
            <param name="s">The string to search</param>
            <param name="match">The substring to match</param>
        
| M:Z0.XTend.Partition(System.String,System.Int32)  | 
            <summary>
            Partitions a string into parts of a specified maximum width
            </summary>
            <param name="src">The source string</param>
            <param name="maxlen">The maximum length of a partition</param>
        
| M:Z0.XTend.Replicate(System.String,System.Int32)  | 
            <summary>
            Creates a stream of replicated strings
            </summary>
            <param name="src">The character to replicate</param>
            <param name="count">The replication count</param>
        
| M:Z0.XTend.Replicate(System.Char,System.Int32)    | 
            <summary>
            Creates a span of replicated characters 
            </summary>
            <param name="src">The character to replicate</param>
            <param name="count">The replication count</param>
        
| M:Z0.XTend.RightOf(System.String,System.Char)     | 
            <summary>
            Gets the string to the right of, but not including, the first instance of a specified character
            </summary>
            <param name="s">The string to search</param>
            <param name="c">The character</param>
        
| M:Z0.XTend.Unfence(System.String,System.Char,System.Char)| 
            <summary>
            Extracts content demarcated by left/right character boundaries
            </summary>
            <param name="src">The source text</param>
            <param name="left">The left marker</param>
            <param name="right">THe rigt marker</param>
        
| M:Z0.XTend.RightOf(System.String,System.Int32)    | 
            <summary>
            Gets the string to the right of, but not including, a specified index
            </summary>
            <param name="src">The string to search</param>
            <param name="idx">The index</param>
        
| M:Z0.XTend.RightOf(System.String,System.String)   | 
            <summary>
            Gets the string to the right of, but not including, a specified substring
            </summary>
            <param name="s">The string to search</param>
            <param name="substring">The substring to match</param>
        
| M:Z0.XTend.RightOfLast(System.String,System.String)| 
            <summary>
            Retrieves the substring that follows the last occurrence of a marker
            </summary>
            <param name="s">The string to search</param>
            <param name="match">The substring to match</param>
        
| M:Z0.XTend.LeftOfLast(System.String,System.Char)  | 
            <summary>
            Retrieves the substring that precedes the last occurence of a marker
            </summary>
            <param name="s">The string to search</param>
            <param name="match">The substring to match</param>
        
| M:Z0.XTend.CommaSeparated(System.Int16)           | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.UInt16)          | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.Int32)           | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.UInt32)          | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.Int64)           | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.UInt64)          | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.Single)          | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.CommaSeparated(System.Double)          | 
            <summary>
            Formamats a number with comma separators
            </summary>
            <param name="src">The source number</param>
        
| M:Z0.XTend.SplitClean(System.String,System.String)| 
            <summary>
            Splits the source string predicated on a string delimiter, removing any empy entries
            </summary>
            <param name="s">The string to split</param>
            <param name="delimiter">The delimiter</param>
        
| M:Z0.XTend.SplitClean(System.String,System.Char)  | 
            <summary>
            Splits the source string predicated on a character delimiter, removing any empy entries
            </summary>
            <param name="s">The string to split</param>
            <param name="delimiter">The delimiter</param>
        
| M:Z0.XTend.StartsWith(System.String,System.Char)  | 
            <summary>
            Determines whether a string begins with a specific character
            </summary>
            <param name="s">The string to search</param>
            <param name="c">The character to match</param>
        
| M:Z0.XTend.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})| 
            <summary>
            Determines whether a string starts with a value from a supplied set
            </summary>
            <param name="src">The string to examine</param>
            <param name="values">The characters for which to search</param>
        
| M:Z0.XTend.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.Char})| 
            <summary>
            Determines whether a string leads with any of a specified set of characters
            </summary>
            <param name="src">The string to examine</param>
            <param name="chars">The characters for which to search</param>
        
| M:Z0.XTend.StartsWithDigit(System.String)         | 
            <summary>
            Determines whether a string starts with a digit
            </summary>
            <param name="s">The string to search</param>
        
| M:Z0.XTend.TakeBefore(System.String,System.Char)  | 
            <summary>
            Selects the substring prior to the first occurrence of a specified character if it is found in the string; otherwise, 
            returns the original string
            </summary>
            <param name="s">The string to search</param>
            <param name="c">The marking character</param>
        
| M:Z0.XTend.TakeAfter(System.String,System.Char)   | 
            <summary>
            Selects the substring after the first ocurrence of a specified character it is found in the string; otherwise, 
            returns the original string
            </summary>
            <param name="s">The string to search</param>
            <param name="c">The marking character</param>
        
| T:Z0.DescriptionAttribute                         | 
            <summary>
            Describes anything, or at least something
            </summary>
        
| M:Z0.DescriptionAttribute.TargetDescription(System.Reflection.MemberInfo)| 
            <summary>
            Returns the a target description, if attributed; otherwise, returns the target's system-defined name
            </summary>
            <typeparam name="T">The label target</typeparam>
        
| M:Z0.DescriptionAttribute.TargetDescription``1    | 
            <summary>
            Returns the description of a parametric type, if attributed; otherwise, returns the type's name
            </summary>
            <typeparam name="T">The label target</typeparam>
        
| T:Z0.FactoryAttribute                             | 
            <summary>
            Identifies a factory method which, by definition, is an emitter or a unary function
            </summary>
        
| T:Z0.ConstAttribute                               | 
            <summary>
            Identifies a referentially-transparent method that produces literal values, structural values or sequences of such values
            </summary>
        
| T:Z0.FunctionalServiceAttribute                   | 
            <summary>
            Identifies a type that defines an interface-contracted api surface
            </summary>
        
| M:Z0.IdentityProviderAttribute.#ctor              | 
            <summary>
            Use of this constructor implies that the attribution target provides identies
            for what are likely unattributable types, such as framework-defined types, for example
            </summary>
        
| T:Z0.IgnoreAttribute                              | 
            <summary>
            Applies to an element to exclude it from metadata discovery processes
            </summary>
        
| T:Z0.LabelAttribute                               | 
            <summary>
            Labels anything since the system-defined DisplayNameAttribute has ridiculously stupid target restrictions
            </summary>
        
| M:Z0.LabelAttribute.TargetLabel(System.Reflection.MemberInfo)| 
            <summary>
            Returns the a target label, if attributed; otherwise, returns the target's system-defined name
            </summary>
            <typeparam name="T">The label target</typeparam>
        
| M:Z0.LabelAttribute.TargetLabel``1                | 
            <summary>
            Returns the label of a parametric type, if attributed; otherwise, returns the type's name
            </summary>
            <typeparam name="T">The label target</typeparam>
        
| T:Z0.NameAttribute                                | 
            <summary>
            Describes anything, or at least something
            </summary>
        
| M:Z0.NameAttribute.TargetName(System.Reflection.MemberInfo)| 
            <summary>
            Returns the a target description, if attributed; otherwise, returns the target's system-defined name
            </summary>
            <typeparam name="T">The label target</typeparam>
        
| M:Z0.NameAttribute.TargetName``1                  | 
            <summary>
            Returns the description of a parametric type, if attributed; otherwise, returns the type's name
            </summary>
            <typeparam name="T">The label target</typeparam>
        
| T:Z0.NumericBaseAttribute                         | 
            <summary>
            Indicates the target's numeric base preference
            </summary>
        
| T:Z0.PurposeAttribute                             | 
            <summary>
            Describes the reason for a thing to be
            </summary>
        
| T:Z0.SpanOpAttribute                              | 
            <summary>
            Identifies operations that accept one or more spans and computes a result that is stored in a caller-supplied target span
            </summary>
        
| T:Z0.IMonoid`2                                    | 
            <summary>
            Characterizes monoidal structure
            </summary>
            <typeparam name="S">The classified structure</typeparam>
            <typeparam name="T">The underlying type</typeparam>
        
| M:Z0.IInvertible`1.Invert                         | 
            <summary>
            Unary structural negation
            </summary>
        
| P:Z0.IEquivalenceClass`1.Rep                      | 
            <summary>
            The class representative
            </summary>
        
| T:Z0.IEquivalenceClass`2                          | 
            <summary>
            Characterizes an equivalence class, i.e. a segment of a partition effected via 
            an equivalence relation
            </summary>
            <typeparam name="T">The classified type</typeparam>
        
| T:Z0.IQuotientSet`2                               | 
            <summary>
            Characterizes a partition over a set effected via an equivalence relation. 
            In this context, a parition is a collection of mutually disjoint subsets 
            of a given set whose union recovers the original set
            </summary>
            <typeparam name="C">The equivalence class type</typeparam>
            <typeparam name="T">The set domain</typeparam>
        
| M:Z0.IQuotientSet`2.Partition                     | 
            <summary>
            Effects a partition via the equivalence
            </summary>
        
| M:Z0.IQuotientSet`2.Project(`1)                   | 
            <summary>
            The canonical surjective projection from the underlying set to the equivalence 
            partitions that maps a given element to the equivalence class in which it
            resides
            </summary>
            <param name="src">The source value</param>
        
| T:Z0.IOrdered`1                                   | 
            <summary>
            Characterizes a totally ordered structure
            </summary>
            <typeparam name="S">The structure reification type</typeparam>
        
| T:Z0.IBiconverter                                 | 
            <summary>
            Characterizes a weakly-byped two-way converter
            </summary>
        
| P:Z0.IBiconverter.TargetType                      | 
            <summary>
            The supported type
            </summary>
        
| M:Z0.IBiconverter.ConvertToTarget(System.Object)  | 
            <summary>
            Converts an incoming value to a value of target type, if possible
            </summary>
            <param name="incoming">The value to conver</param>
        
| M:Z0.IBiconverter.ConvertFromTarget(System.Object,System.Type)| 
            <summary>
            Converts an incoming value of the target type to a value of specified type, if possible
            </summary>
            <param name="incoming">The value to convert</param>
        
| T:Z0.IBiconverter`1                               | 
            <summary>
            Characterizes a strongly-byped two-way converter
            </summary>
        
| T:Z0.IContainer`1                                 | 
            <summary>
            Characterizes a parametric container
            </summary>
            <typeparam name="C"></typeparam>
        
| T:Z0.ISequential`2                                | 
            <summary>
            Characterizes a refified container over sequentially enumerable content
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.IReadOnly`1                                  | 
            <summary>
            Characterizes an immutable container
            </summary>
            <typeparam name="C">The content type</typeparam>
        
| T:Z0.IContented`1                                 | 
            <summary>
            Characterizes a container that owns content
            </summary>
            <typeparam name="C">The content type</typeparam>
        
| T:Z0.IContented`2                                 | 
            <summary>
            Characterizes reified container
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="C">The content type</typeparam>
        
| M:Z0.IContented`2.WithContent(`1)                 | 
            <summary>
            Assigns content; whether existing content is replaced, accrued or
            if a new container is created is determined by the reifying type 
            and its purpose in life
            </summary>
            <param name="content">The source content</param>
        
| T:Z0.IReversible`1                                | 
            <summary>
            Characterizes a reversible structure
            </summary>
            <typeparam name="S">The structure type</typeparam>
        
| T:Z0.IReadOnly`2                                  | 
            <summary>
            Characterizes a reified immutable container
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="C">The content type</typeparam>
        
| T:Z0.IContented`3                                 | 
            <summary>
            Characterizes a reified container with T-stratified content
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="C">The content type</typeparam>
            <typeparam name="T">The type over which the content is stratified</typeparam>
        
| T:Z0.IReadOnly`3                                  | 
            <summary>
            Characterizes a reified immutable container with T-stratified content
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="C">The content type</typeparam>
            <typeparam name="T">The type over which the content is stratified</typeparam>
        
| T:Z0.IFinite                                      | 
            <summary>
            Characterizes a type for which a well-defined Count() function can be implemented
            such types will be referred to as "countable" athough this terminology unfortunately conflicts
            with mathematical countability wich only requries the existence of a bijection with
            the subject and the natural numbers which does imply that the cardinality is finite
            </summary>
        
| M:Z0.IFinite.Count                                | 
            <summary>
            Counts the finite things
            </summary>
        
| T:Z0.IFinite`1                                    | 
            <summary>
            Characterizes a finite type type with a parametric count emitter since not all
            countable things can be counted with a 32-bit integer
            </summary>
            <typeparam name="T">The count type</typeparam>
        
| T:Z0.ICounted                                     | 
            <summary>
            Characterizes a finite thing that yeilds a count value that does not require computation/enumeration 
            to reveal; in other words, the count function for counted things is free, as evinced by
            the default implementation
            </summary>
        
| P:Z0.ICounted.Count                               | 
            <summary>
            The count value
            </summary>
        
| T:Z0.ICounted`1                                   | 
            <summary>
            Characterizes a countable type with a parametric count type since not all
            countable things can be counted with a 32-bit integer
            </summary>
            <typeparam name="T">The count type</typeparam>
        
| T:Z0.ILengthwise                                  | 
            <summary>
            Characterizes a type that exhibits a notion of finite length
            </summary>
        
| T:Z0.ILengthwise`1                                | 
            <summary>
            Characterizes a refiied type that  exhibits a notion of length
            </summary>
        
| T:Z0.IFreeMonoid`1                                | 
            <summary>
            Characterizes a free monoidal structure
            </summary>
            <typeparam name="S">The structure type</typeparam>
            <typeparam name="T">The underlying type</typeparam>
        
| T:Z0.IConcatenable`1                              | 
            <summary>
            Characterizes a reification that defines an intrinsic concatentation operator
            </summary>
            <typeparam name="S">The reifying type</typeparam>
        
| M:Z0.IConcatenable`1.Concat(`0)                   | 
            <summary>
            Concatenates the intrinsic value with a suplied value 
            </summary>
            <param name="rhs">The right value supplied to the concatenation operator</param>
        
| T:Z0.IElements`1                                  | 
            <summary>
            Characterizes a container over discrete/enumerable content which need not be finite
            </summary>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.IElements`2                                  | 
            <summary>
            Characterizes a reified container over discrete/enumerable content which need not be finite
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.IDiscreteSet`1                               | 
            <summary>
            Characterizes a set over a collection of elements and need not be finite
            </summary>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.IDiscreteSet`2                               | 
            <summary>
            Characteriizes refied discrete set
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="T">The member type</typeparam>
        
| T:Z0.INonempySet`1                                | 
            <summary>
            Characterizes a reified nonempty set
            </summary>
            <typeparam name="F">The reifying type</typeparam>
        
| T:Z0.NonempySet`2                                 | 
            <summary>
            Characterizes a reified nonempty set with evidence of non-absence
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="T">The member type</typeparam>
        
| T:Z0.IElementSet`1                                | 
            <summary>
            Characterizes a finite set over elements of parametric type
            </summary>
        
| M:Z0.IElementSet`1.Contains(`0)                   | 
            <summary>
            Determines whether a value is a member
            </summary>
            <param name="candidate">The potential member</param>
        
| T:Z0.IElementSet`2                                | 
            <summary>
            Characterizes a reified set over elements of parametric type
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.IElementSet`2.IsSubset(`0,System.Boolean)    | 
            <summary>
            Determines whether the current set is a subset of a specified set.
            </summary>
            <param name="rhs">The candidate superset</param>
            <param name="proper">Specifies whether only proper subsets are considered "subsets"</param>
        
| M:Z0.IElementSet`2.IsSuperset(`0,System.Boolean)  | 
            <summary>
            Determines whether the current set is a superset of a specified set.
            </summary>
            <param name="rhs">The candidate subset</param>
            <param name="proper">Specifies whether only proper subsets are considered "subsets"</param>
        
| M:Z0.IElementSet`2.Intersect(`0)                  | 
            <summary>
            Calculates the intersection between the current set and a specified set and
            returns a new set that embodies this result
            </summary>
            <param name="rhs">The set with which to intersect</param>
        
| M:Z0.IElementSet`2.Difference(`0,System.Boolean)  | 
            <summary>
            Calculates the set difference, or symmetric difference, between the current 
            set and a specified set and returns a new set that embodies this result
            </summary>
            <param name="rhs">The set that should be differenced</param>
            <remarks>See https://en.wikipedia.org/wiki/Symmetric_difference</remarks>
        
| T:Z0.IIndexed                                     | 
            <summary>
            Characterizes an individual that can be uniquely associatd with an integer in the range 0..n-1 
            within the context of a container with a capacity of n items
            </summary>
        
| P:Z0.IIndexed.Position                            | 
            <summary>
            The 0-based position of the item in an enclosing container
            </summary>
        
| T:Z0.IIndexedContent`1                            | 
            <summary>
            Characterizes a finite container over sequentially-indexed discrete content - an array
            </summary>
            <typeparam name="T">The element type</typeparam>
        
| P:Z0.IIndexedContent`1.Item(System.Int32)         | 
            <summary>
            Retrieves a mutable reference to an index-identified item
            </summary>
        
| T:Z0.ISeq`2                                       | 
            <summary>
            Characterizes a concatenable container with discrete content 
            </summary>
            <typeparam name="S">The container type</typeparam>
            <typeparam name="T">The contained type</typeparam>
        
| T:Z0.IFiniteSeq`1                                 | 
            <summary>
            Characterizes an element sequence that is known to be finite, but may require enumeration
            to find the count; consequently, there is a "Count()" operation defined but no
            "Counted" property
            </summary>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.IFiniteSeq`2                                 | 
            <summary>
            Characterizes a reifed finite  sequence
            </summary>
            <typeparam name="S">The reifying type</typeparam>
            <typeparam name="T">The sequence element type</typeparam>
        
| T:Z0.IIndexedSeq`2                                | 
            <summary>
            Characterizes a reifed finite indexed sequence
            </summary>
            <typeparam name="S">The reifying type</typeparam>
            <typeparam name="T">The sequence element type</typeparam>
        
| P:Z0.IListed`1.Head                               | 
            <summary>
            Returns the first constituent if extant; othewise, returns the monoidal 0
            </summary>
        
| P:Z0.IListed`1.Tail                               | 
            <summary>
            Returns the last constituent if extant; othewise, returns the monoidal 0
            </summary>
        
| M:Z0.IListed`2.Redefine(System.Collections.Generic.IEnumerable{`1})| 
            <summary>
            Replaces the existing list with a new list with specified content
            </summary>
            <param name="src"></param>
        
| T:Z0.IStepwise`1                                  | 
            <summary>
            Characterizes a structure over which both incrementing and decrementing 
            operations are defined
            </summary>
            <typeparam name="S">The structure type</typeparam>
        
| T:Z0.IConverter`2                                 | 
            <summary>
            Characterizes a one-way converter
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.IDescribed                                   | 
            <summary>
            Characterizes type that defines a Description facet
            </summary>
        
| T:Z0.IDescribed`1                                 | 
            <summary>
            Characterizes an F-bound polymorphic type that defines a Description facet
            </summary>
        
| T:Z0.IFactory`1                                   | 
            <summary>
            Characterizes a factory where the production type is T-parametric
            </summary>
            <typeparam name="T">A type which paremetrizes the production type</typeparam>
        
| T:Z0.Factory`1                                    | 
            <summary>
            Refies a factory that produces no T-parametric values; the use case is
            to make it convenient to create factories that do produce values that are T-parametric
            </summary>
            <typeparam name="T">A type which paremetrizes the production type</typeparam>
        
| T:Z0.IHashed                                      | 
            <summary>
            Characterizes a hash code provider
            </summary>
        
| P:Z0.IHashed.Hash                                 | 
            <summary>
            The hash code as an usigned 32-bit integer
            </summary>
        
| P:Z0.IHashed.HashCode                             | 
            <summary>
            The hash code that C# knows/loves as an inappropriately-ubiquitous signed 32-bit integer
            </summary>
        
| T:Z0.IHashed`2                                    | 
            <summary>
            Characterizes an F-bound polymorphic hash code provider for structual types
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="C">The hashed content type</typeparam>
        
| T:Z0.ILabeled                                     | 
            <summary>
            Characterizes type that defines a Label facet
            </summary>
        
| T:Z0.ILabeled`1                                   | 
            <summary>
            Characterizes an F-bound polymorphic type that defines a Lable facet
            </summary>
        
| T:Z0.IMultiplicative`2                            | 
            <summary>
            Characterizes structural multiplication
            </summary>
            <typeparam name="S">The structure type</typeparam>
            <typeparam name="T">The individual type</typeparam>
        
| T:Z0.INamed                                       | 
            <summary>
            Characterizes type that defines a Name facet
            </summary>
        
| T:Z0.INamed`1                                     | 
            <summary>
            Characterizes an F-bound polymorphic type that defines a Name facet
            </summary>
        
| T:Z0.INonEmpty`1                                  | 
            <summary>
            Characterizes a reification of the counterpoint to a nullary thing
            </summary>
            <typeparam name="F">The thing which cannot be empty</typeparam>
        
| T:Z0.INonEmpty`2                                  | 
            <summary>
            Characterizes a T-parametric nonempty thing that provides evidence of non-abscence
            </summary>
            <typeparam name="F">The thing which cannot be empty</typeparam>
        
| P:Z0.INonEmpty`2.Individual                       | 
            <summary>
            Proof
            </summary>
        
| T:Z0.IPair`2                                      | 
            <summary>
            Characterizes an homogenous 2-tuple
            </summary>
            <typeparam name="K">The reifying type</typeparam>
            <typeparam name="T">The member type</typeparam>
        
| P:Z0.IPair`2.Left                                 | 
            <summary>
            The left member 
            </summary>
        
| P:Z0.IPair`2.Right                                | 
            <summary>
            The right member 
            </summary>
        
| T:Z0.IPaired`2                                    | 
            <summary>
            Characterizes a parametric join of arity 2
            </summary>
            <typeparam name="L">The left value type</typeparam>
            <typeparam name="R">The right value type</typeparam>
        
| P:Z0.IPaired`2.Left                               | 
            <summary>
            The left value
            </summary>
        
| P:Z0.IPaired`2.Right                              | 
            <summary>
            The right value
            </summary>
        
| T:Z0.IQuad`2                                      | 
            <summary>
            Characterizes an homogenous 4-tuple
            </summary>
            <typeparam name="K">The reifying type</typeparam>
            <typeparam name="T">The member type</typeparam>
        
| T:Z0.IReified`1                                   | 
            <summary>
            Characterizes an F-bound polymorphic reifiable abstraction
            </summary>
            <typeparam name="F">The reifying type</typeparam>
        
| T:Z0.ISequential                                  | 
            <summary>
            Characterizes an individual that can be identified, relative to other
            sequentials (within the same set), by a term s(i) of a monotonic sequence 
            s = {0,..,n - 1} where s(i) = i
            </summary>
        
| P:Z0.ISequential.Sequence                         | 
            <summary>
            The sequence number assigned to the individual
            </summary>
        
| T:Z0.ITriple`2                                    | 
            <summary>
            Characterizes an homogenous 3-tuple
            </summary>
            <typeparam name="K">The reifying type</typeparam>
            <typeparam name="T">The member type</typeparam>
        
| T:Z0.ITuple                                       | 
            <summary>
            Common non-parametric tuple contract
            </summary>
        
| T:Z0.ITuple`1                                     | 
            <summary>
            Common parametric tuple contract
            </summary>
            <typeparam name="K">The reifying type</typeparam>
        
| T:Z0.ITupled`3                                    | 
            <summary>
            Characterizes a potentially non-homogenous 2-tuple
            </summary>
            <typeparam name="K">The reifying type</typeparam>
            <typeparam name="T0">The first member type</typeparam>
            <typeparam name="T1">The second member type</typeparam>
        
| P:Z0.ITupled`3.Left                               | 
            <summary>
            The left member 
            </summary>
        
| P:Z0.ITupled`3.Right                              | 
            <summary>
            The right member 
            </summary>
        
| T:Z0.ITupled`4                                    | 
            <summary>
            Characterizes a potentially non-homogenous 3-tuple
            </summary>
            <typeparam name="K">The reifying type</typeparam>
            <typeparam name="T0">The first member type</typeparam>
            <typeparam name="T1">The second member type</typeparam>
            <typeparam name="T2">The third member type</typeparam>
        
| T:Z0.ITupled`5                                    | 
            <summary>
            Characterizes a potentially non-homogenous 4-tuple
            </summary>
            <typeparam name="K">The reifying type</typeparam>
            <typeparam name="T0">The first member type</typeparam>
            <typeparam name="T1">The second member type</typeparam>
            <typeparam name="T2">The third member type</typeparam>
            <typeparam name="T3">The fourth member type</typeparam>
        
| T:Z0.Hashed                                       | 
            <summary>
            Captures a hash code
            </summary>
        
| T:Z0.Hashed`1                                     | 
            <summary>
            Captures a hash code for structured content
            </summary>
        
| T:Z0.KeyedValue`2                                 | 
            <summary>
            Correlates a value with a key that uniquely identifies the value within some context
            </summary>
        
| F:Z0.KeyedValue`2.Key                             | 
            <summary>
            The key that identifies the value
            </summary>
        
| F:Z0.KeyedValue`2.Value                           | 
            <summary>
            The value identified by the key
            </summary>
        
| T:Z0.XFunc`1                                      | 
            <summary>
            Wraps a delegate that implicitly converts into a LINQ expression
            </summary>
            <typeparam name="X">The function return type</typeparam>
        
| M:Z0.XFunc`1.op_Implicit(Z0.XFunc{`0})~System.Linq.Expressions.Expression{System.Func{`0}}| 
            <summary>
            Implicitly converts a func expression to linq expression
            </summary>
            <param name="fx">The source func expression</param>
        
| M:Z0.XFunc`1.op_Implicit(System.Func{`0})~Z0.XFunc{`0}| 
            <summary>
            Implicitly constructs a func expression from a func
            </summary>
            <param name="f">The source function</param>
        
| P:Z0.XFunc`1.Fx                                   | 
            <summary>
            The expression derived from the source function
            </summary>
        
| T:Z0.XFunc`2                                      | 
            <summary>
            Wraps a delegate that implicitly converts into a LINQ expression
            </summary>
            <typeparam name="X">The function argument type</typeparam>
            <typeparam name="Y">The function return type</typeparam>
        
| M:Z0.XFunc`2.op_Implicit(Z0.XFunc{`0,`1})~System.Linq.Expressions.Expression{System.Func{`0,`1}}| 
            <summary>
            Implicitly converts a func expression to linq expression
            </summary>
            <param name="fx">The source func expression</param>
        
| M:Z0.XFunc`2.op_Implicit(System.Func{`0,`1})~Z0.XFunc{`0,`1}| 
            <summary>
            Implicitly constructs a func expression from a func
            </summary>
            <param name="f">The source function</param>
        
| P:Z0.XFunc`2.Fx                                   | 
            <summary>
            The expression derived from the source function
            </summary>
        
| T:Z0.XFunc`3                                      | 
            <summary>
            Wraps a delegate that implicitly converts into a LINQ expression
            </summary>
            <typeparam name="X1">The type of the first argument</typeparam>
            <typeparam name="X2">The type of the second argument</typeparam>
            <typeparam name="Y">The function return type</typeparam>
        
| M:Z0.XFunc`3.op_Implicit(Z0.XFunc{`0,`1,`2})~System.Linq.Expressions.Expression{System.Func{`0,`1,`2}}| 
            <summary>
            Implicitly converts a func expression to linq expression
            </summary>
            <param name="fx">The source func expression</param>
        
| M:Z0.XFunc`3.op_Implicit(System.Func{`0,`1,`2})~Z0.XFunc{`0,`1,`2}| 
            <summary>
            Implicitly constructs a func expression from a func
            </summary>
            <param name="f">The source function</param>
        
| P:Z0.XFunc`3.Fx                                   | 
            <summary>
            The expression derived from the source function
            </summary>
        
| T:Z0.XFunc`4                                      | 
            <summary>
            Wraps a delegate that implicitly converts into a LINQ expression
            </summary>
            <typeparam name="X1">The type of the first argument</typeparam>
            <typeparam name="X2">The type of the second argument</typeparam>
            <typeparam name="X3">The type of the third argument</typeparam>
            <typeparam name="Y">The function return type</typeparam>
        
| M:Z0.XFunc`4.op_Implicit(Z0.XFunc{`0,`1,`2,`3})~System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}}| 
            <summary>
            Implicitly converts a func expression to linq expression
            </summary>
            <param name="fx">The source func expression</param>
        
| M:Z0.XFunc`4.op_Implicit(System.Func{`0,`1,`2,`3})~Z0.XFunc{`0,`1,`2,`3}| 
            <summary>
            Implicitly constructs a func expression from a func
            </summary>
            <param name="f">The source function</param>
        
| P:Z0.XFunc`4.Fx                                   | 
            <summary>
            The expression derived from the source function
            </summary>
        
| T:Z0.NamedValue`1                                 | 
            <summary>
            Names a value
            </summary>
        
| F:Z0.NamedValue`1.Name                            | 
            <summary>
            The name of the value
            </summary>
        
| F:Z0.NamedValue`1.Value                           | 
            <summary>
            The named value
            </summary>
        
| M:Z0.XPress.and(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)| 
            <summary>
            Creates a conjunction of a left and right expression
            </summary>
            <param name="lhs">The left expression</param>
            <param name="rhs">The right expression</param>
        
| M:Z0.XPress.and``2(System.Func{``0,System.Boolean},System.Func{``1,System.Boolean})| 
            <summary>
            Forms a conjunction from two function predicates
            </summary>
            <typeparam name="X1">The first predicate argument type</typeparam>
            <typeparam name="X2">The second predicate argument type</typeparam>
            <param name="p1">The first predicate</param>
            <param name="p2">The second predicate</param>
        
| M:Z0.XPress.call(System.Object,System.Reflection.MethodInfo,System.Linq.Expressions.ParameterExpression[])| 
            <summary>
            Creates an expression that invokes a static or instance method
            </summary>
            <param name="Host">The object that exposes the method if not static; otherwise null</param>
            <param name="m">The method to be invoked</param>
            <param name="args">The arguments supplied to the method when invoked</param>
        
| M:Z0.XPress.call(System.Reflection.MethodInfo,System.Linq.Expressions.ParameterExpression[])| 
            <summary>
            Creates an expression that invokes a static method
            </summary>
            <param name="m">The method to be invoked</param>
            <param name="args">The arguments supplied to the method when invoked</param>
        
| M:Z0.XPress.constant(System.Object)               | 
            <summary>
            Creates a constant expression
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.XPress.convert(System.Linq.Expressions.Expression,System.Type)| 
            <summary>
            Defines a conversion from a source expression to a target type
            </summary>
            <param name="e">The source expression</param>
            <param name="dstType">The target type</param>
        
| M:Z0.XPress.convert``1(System.Linq.Expressions.Expression)| 
            <summary>
            Defines a conversion from a source expression to a target type
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="e">The source expression</param>
        
| M:Z0.XPress.factory``1                            | 
            <summary>
            Defines a function that will invoke the default constructor to create
            an instance of type <typeparamref name="X" />
            </summary>
            <typeparam name="X">The type of instance to create</typeparam>
        
| M:Z0.XPress.factory``2                            | 
            <summary>                                                               
            Defines a strongly-typed function that will invoke a one-parameter constructor to create a target type instance
            </summary>
            <typeparam name="X">The constructor parameter type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XPress.factory(System.Type,System.Type)      | 
            <summary>
            Defines a weakly-typed function that will invoke a one-parameter constructor to create a target type instance
            </summary>
            <param name="arg">The constuctor argument type</param>
            <param name="target">The target type</param>
        
| M:Z0.XPress.factory``3                            | 
            <summary>                                                               
            Defines a strongly-typed function that will invoke a two-parameter constructor to create a target type instance
            </summary>
            <typeparam name="X1">The first constructor parameter type</typeparam>
            <typeparam name="X2">The second constructor parameter type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XPress.factory(System.Type,System.Type,System.Type)| 
            <summary>
            Defines a weakly-typed function that will invoke a two-parameter constructor to create a target type instance
            </summary>
            <param name="arg1">The first constuctor parameter type</param>
            <param name="arg1">The second constuctor parameter type</param>
            <param name="target">The target type</param>
        
| M:Z0.XPress.factory``4                            | 
            <summary>                                                               
            Defines a strongly-typed function that will invoke a three-parameter constructor to create a target type instance
            </summary>
            <typeparam name="X1">The first constructor parameter type</typeparam>
            <typeparam name="X2">The second constructor parameter type</typeparam>
            <typeparam name="X3">The third constructor parameter type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XPress.func``1(System.Func{``0})             | 
            <summary>
            Creates an expression from an emitter
            </summary>
            <typeparam name="T">The emission type</typeparam>
            <param name="f">The emitter</param>
        
| M:Z0.XPress.func``2(System.Func{``0,``1})         | 
            <summary>
            Creates an expression from a function delegate of arity 1
            </summary>
            <typeparam name="X">The function operand type</typeparam>
            <typeparam name="Y">The function return type</typeparam>
            <param name="f">The source delegate</param>
        
| M:Z0.XPress.func``3(System.Func{``0,``1,``2})     | 
            <summary>
            Creates an expression from a function delegate of arity 2
            </summary>
            <typeparam name="X1">The type of the first operand</typeparam>
            <typeparam name="X2">The type of the second operand</typeparam>
            <typeparam name="Y">The function return type</typeparam>
            <param name="f">The source delegate</param>
        
| M:Z0.XPress.func``4(System.Func{``0,``1,``2,``3}) | 
            <summary>
            Creates an expression from a function delegate of arity 3
            </summary>
            <typeparam name="X1">The type of the first operand</typeparam>
            <typeparam name="X2">The type of the second operand</typeparam>
            <typeparam name="X3">The type of the third operand</typeparam>
            <typeparam name="Y">The function return type</typeparam>
            <param name="f">The source delegate</param>
        
| M:Z0.XPress.func``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates and caches a delegate for a method realizing an emitter
            </summary>
            <typeparam name="X">The emission type</typeparam>
            <param name="m">The source method</param>
            <param name="host">An object instance for the method, if applicable</param>
        
| M:Z0.XPress.func``2(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates and caches a delegate for a method realizing a function f:X-&gt;Y 
            </summary>
            <typeparam name="X">The operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="m">The source method</param>
            <param name="host">An object instance for the method, if applicable</param>
        
| M:Z0.XPress.func``2(System.Type,System.String,System.Object)| 
            <summary>
            Creates and caches a delegate for a method realizing a function f:X-&gt;Y 
            </summary>
            <typeparam name="X">The operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="declarer">The declaring type</param>
            <param name="name">The name of the method</param>
            <param name="host">An object instance for the method, if applicable</param>
        
| M:Z0.XPress.func1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a weakly-typed delegate for a function f:X-&gt;Y
            </summary>
            <param name="m">The source method</param>
            <param name="host">The instance of the declaring type, if method is not static</param>
        
| M:Z0.XPress.func2(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a weakly-typed delegate for a function f:X-&gt;Y
            </summary>
            <param name="m">The source method</param>
            <param name="host">The instance of the declaring type, if method is not static</param>
        
| M:Z0.XPress.func``3(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates and caches a function delegate for a method realizing a function f:(X1,X2) -&gt; Y
            </summary>
            <typeparam name="X1">The first operand type</typeparam>
            <typeparam name="X2">The second operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="m">The source method</param>
            <param name="host">The instance of the declaring type, if method is not static</param>
        
| M:Z0.XPress.func``4(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates and caches a function delegate for a method realizing a function f:X1-&gt;X2-&gt;X3-&gt;Y 
            </summary>
            <typeparam name="X1">The first operand type</typeparam>
            <typeparam name="X2">The second operand type</typeparam>
            <typeparam name="X3">The third operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="m">The source method</param>
            <param name="host">The instance of the declaring type, if method is not static</param>
        
| M:Z0.XPress.func``5(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates and caches a function delegate for a method realizing a function f:X1-&gt;X2-&gt;X3-&gt;X4-&gt;Y 
            </summary>
            <typeparam name="X1">The first operand type</typeparam>
            <typeparam name="X2">The second operand type</typeparam>
            <typeparam name="X3">The third operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="m">The source method</param>
            <param name="host">The instance of the declaring type, if method is not static</param>
        
| M:Z0.XPress.ctor(System.Type,System.Type[])       | 
            <summary>
            Searches a type for an instance constructor that matches a specified signature
            </summary>
            <param name="declaringType">The type to search</param>
            <param name="argTypes">The method parameter types in ordinal position</param>
        
| M:Z0.XPress.ctor``1(System.Type[])                | 
            <summary>
            Searches a type for an instance constructor that matches a specified signature
            </summary>
            <param name="args">The method parameter types in ordinal position</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XPress.ctor``2                               | 
            <summary>
            Searches a type for an instance constructor that matches a parametrically-specified signature
            </summary>
            <param name="args">The method parameter types in ordinal position</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XPress.ctor``3                               | 
            <summary>
            Searches a type for an instance constructor that matches a parametrically-specified signature
            </summary>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XPress.fmake``1(System.Func{``0})            | 
            <summary>
            Defines a function expression for an emitter
            </summary>
            <typeparam name="X">The emission type</typeparam>
            <param name="f">The emitter</param>
        
| M:Z0.XPress.fmake``2(System.Func{``0,``1})        | 
            <summary>
            Defines a function expression for a heterogenous fuction of arity 1
            </summary>
            <typeparam name="X">The function argument type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="f">The source function</param>
        
| M:Z0.XPress.fmake``3(System.Func{``0,``1,``2})    | 
            <summary>
            Defines a function expression for a heterogenous fuction of arity 2
            </summary>
            <typeparam name="X1">The type of the first argument</typeparam>
            <typeparam name="X2">The type of the second argument</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="f">The source function</param>
        
| M:Z0.XPress.fmake``4(System.Func{``0,``1,``2,``3})| 
            <summary>
            Produces a 3-argument func expression
            </summary>
            <typeparam name="X1">The type of the first argument</typeparam>
            <typeparam name="X2">The type of the second argument</typeparam>
            <typeparam name="X3">The type of the third argument</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="f">The source function</param>
        
| M:Z0.XPress.invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])| 
            <summary>
            Creates an expression to call a function
            </summary>
            <param name="f">An expression representing the function to invoke</param>
            <param name="args">The function arguments</param>
        
| M:Z0.XPress.invoke``2(System.Func{``0,``1},System.String)| 
            <summary>
            Creates an invocation expression for a function f:X-&gt;Y
            </summary>
            <typeparam name="X">The function argument type</typeparam>
            <typeparam name="Y">The function return type</typeparam>
            <param name="f">The function delegate</param>
            <param name="arg">The name of argument</param>
        
| M:Z0.XPress.invoke``3(System.Func{``0,``1,``2},System.String,System.String)| 
            <summary>
            Creates an invocation expression for a function f:X1-&gt;X2-&gt;Y
            </summary>
            <typeparam name="X1">The type of the first function argument</typeparam>
            <typeparam name="X2">The type of the second function argument</typeparam>
            <typeparam name="Y">The function return type</typeparam>
            <param name="f">The source function</param>
            <param name="arg1">The name of the first argument</param>
            <param name="arg2">The name of the second argument</param>
        
| M:Z0.XPress.lambda``1(System.Linq.Expressions.Expression)| 
            <summary>
            Defines a lambda expression sans parameters
            </summary>
            <typeparam name="T">The aligned delegate type</typeparam>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Creates a lambda expression
            </summary>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
            <typeparam name="T">The aligned delegate type</typeparam>
        
| M:Z0.XPress.lambda``1(System.ValueTuple{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Creates a 2-parameter lambda expression
            </summary>
            <typeparam name="T">The aligned delegate type</typeparam>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``1(System.ValueTuple{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Defines a lambda expression
            </summary>
            <typeparam name="T">The aligned delegate type</typeparam>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.emitter``1(System.Linq.Expressions.Expression)| 
            <summary>
            Creates a an emitter expression
            </summary>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``2(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Creates a 1-argument lambda expression
            </summary>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``3(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Creates a 2-argument lambda expression
            </summary>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``4(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Creates a 3-argument lambda expression
            </summary>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``5(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)| 
            <summary>
            Creates a 4-argument lambda expression
            </summary>
            <param name="parameters">The expression parameters</param>
            <param name="body">The expression body</param>
        
| M:Z0.XPress.lambda``2(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.UnaryExpression})| 
            <summary>
            Creates a unary lambda expression 
            </summary>
            <param name="f">The defining function</param>
        
| M:Z0.XPress.lambda``3(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression})| 
            <summary>
            Creates a binary lambda expression
            </summary>
            <param name="f">The defining function</param>
        
| M:Z0.XPress.or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)| 
            <summary>
            Creates a disjunction of a left and right expression
            </summary>
            <param name="lhs">The left expression</param>
            <param name="rhs">The right expression</param>
        
| M:Z0.XPress.or``2(System.Func{``0,System.Boolean},System.Func{``1,System.Boolean})| 
            <summary>
            Forms a disjunction from two function predicates
            </summary>
            <typeparam name="X1">The first predicate argument type</typeparam>
            <typeparam name="X2">The second predicate argument type</typeparam>
            <param name="f1">The first predicate</param>
            <param name="f2">The second predicate</param>
        
| M:Z0.XPress.paramX``1(System.String)              | 
            <summary>
            Creates a parameter expression
            </summary>
            <typeparam name="X">The parameter type</typeparam>
            <param name="name">The parameter name</param>
        
| M:Z0.XPress.paramX``2                             | 
            <summary>
            Creates a parameter expression array of length 2
            </summary>
            <typeparam name="X1">The first parameter type</typeparam>
            <typeparam name="X2">The second parameter type</typeparam>
        
| M:Z0.XPress.paramX``3                             | 
            <summary>
            Creates a parameter expression array of length 3
            </summary>
            <typeparam name="X1">The first parameter type</typeparam>
            <typeparam name="X2">The second parameter type</typeparam>
            <typeparam name="X3">The third parameter type</typeparam>
        
| M:Z0.XPress.paramX``4                             | 
            <summary>
            Creates a parameter expression array of length 4
            </summary>
            <typeparam name="X1">The first parameter type</typeparam>
            <typeparam name="X2">The second parameter type</typeparam>
            <typeparam name="X3">The third parameter type</typeparam>
        
| M:Z0.XPress.paramX``1(System.Int32)               | 
            <summary>
            Creates a parameter expression where the parameter name is predicated on an integer value
            </summary>
            <param name="i">The paremeter index</param>
            <typeparam name="X">The parameter type</typeparam>
        
| M:Z0.XPress.paramX(System.Type,System.String)     | 
            <summary>
            Creates a parameter expression
            </summary>
            <param name="t">The parameter type</param>
            <param name="name">The parameter name</param>
        
| M:Z0.XPress.paramX(System.Reflection.ParameterInfo)| 
            <summary>
            Creates a parameter expression from a reflected parameter
            </summary>
            <param name="p">The reflected parameter</param>
        
| M:Z0.XPress.paramX(System.Type,System.Int32)      | 
            <summary>
            Creates a parameter expression where the parameter name is predicated on an integer value
            </summary>
            <param name="i">The paremeter index</param>
        
| M:Z0.XPress.paramXPair``2                         | 
            <summary>
            Creates a parameter expression 2-tuple
            </summary>
            <typeparam name="X1">The type of the first parameter</typeparam>
            <typeparam name="X2">The type of the second parameter</typeparam>
        
| M:Z0.XPress.paramXTriple``3                       | 
            <summary>
            Creates a parameter expression 3-tuple
            </summary>
            <typeparam name="X1">The type of the first parameter</typeparam>
            <typeparam name="X2">The type of the second parameter</typeparam>
            <typeparam name="X3">The type of the third parameter</typeparam>
        
| M:Z0.XPress.params(System.Type[])                 | 
            <summary>
            Creates an auto-named parameter expression array from an array of parameter types
            </summary>
            <param name="paramTypes">The parameter types</param>
        
| M:Z0.XPress.test(System.Object,System.Type)       | 
            <summary>
            Creates a type-test expression
            </summary>
            <param name="value">The value to test</param>
            <param name="t">The type to test against</param>
        
| M:Z0.XPress.test``1(System.Object)                | 
            <summary>
            Creates an expression to adjudicate whether a value if of a specified type
            </summary>
            <param name="value">The value to test</param>
            <typeparam name="T">The type to test against</typeparam>
        
| M:Z0.XFunc.f``1(System.Func{``0})                 | 
            <summary>
            Creates a function expression for an emitter
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X">The function argument type</typeparam>
            <typeparam name="Y">The return type</typeparam>
        
| M:Z0.XFunc.f``2(System.Func{``0,``1})             | 
            <summary>
            Creates a function expression over a fuction delegate of arity 1
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X">The function argument type</typeparam>
            <typeparam name="Y">The return type</typeparam>
        
| M:Z0.XFunc.f``3(System.Func{``0,``1,``2})         | 
            <summary>
            Creates a function expression over a fuction delegate of arity 2
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X1">The type of the first argument</typeparam>
            <typeparam name="X2">The type of the second argument</typeparam>
            <typeparam name="R">The return type</typeparam>
        
| M:Z0.XFunc.f``4(System.Func{``0,``1,``2,``3})     | 
            <summary>
            Creates a function expression over a fuction delegate of arity 3
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X1">The type of the first argument</typeparam>
            <typeparam name="X2">The type of the second argument</typeparam>
            <typeparam name="X3">The type of the third argument</typeparam>
            <typeparam name="Y">The return type</typeparam>
        
| M:Z0.XFunc.f``1(System.Func{``0,``0,``0})         | 
            <summary>
            Creates a function expression over an homogenous function delegate of arity 2
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X">The operand type</typeparam>
        
| M:Z0.XFunc.f``1(System.Func{``0,``0,``0,``0})     | 
            <summary>
            Creates a function expression over an homogenous function delegate of arity 3
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X">The operand type</typeparam>
        
| M:Z0.XFunc.fx``1(System.Func{``0})                | 
            <summary>
            Creates a linq expression over an emitter
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X">The function operand type</typeparam>
            <typeparam name="R">The function return type</typeparam>
        
| M:Z0.XFunc.fx``2(System.Func{``0,``1})            | 
            <summary>
            Creates a linq expression over a function delegate of arity 1
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X">The function operand type</typeparam>
            <typeparam name="R">The function return type</typeparam>
        
| M:Z0.XFunc.fx``3(System.Func{``0,``1,``2})        | 
            <summary>
            Creates a linq expression over a function delegate of arity 2
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X1">The type of the first operand</typeparam>
            <typeparam name="X2">The type of the second operand</typeparam>
            <typeparam name="R">The function return type</typeparam>
        
| M:Z0.XFunc.fx``4(System.Func{``0,``1,``2,``3})    | 
            <summary>
            Creates a linq expression over a function delegate of arity 3
            </summary>
            <param name="f">The source delegate</param>
            <typeparam name="X1">The type of the first operand</typeparam>
            <typeparam name="X2">The type of the second operand</typeparam>
            <typeparam name="X3">The type of the third operand</typeparam>
            <typeparam name="Y">The function return type</typeparam>
        
| M:Z0.XQuery.called(System.Linq.Expressions.Expression)| 
            <summary>
            Returns the method invoked by an expression, if any
            </summary>
            <param name="x">The expression to test</param>
        
| M:Z0.XQuery.constant(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts a value from a constant expression if possible
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.field``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Extracts the field info for the field referenced by an expression delegate
            </summary>
            <typeparam name="F">The field type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XQuery.field``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the field info for the field referenced by an expression delegate
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XQuery.IsConversion(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a conversion
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.IsConversion``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Tests whether a member is wrapped in a conversion
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="R">The member type</typeparam>
            <param name="selector">Expression that identifies the member</param>
        
| M:Z0.XQuery.IsAccess(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether the test expression is a member access expression
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.IsCall(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether the test expression is a function call
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.IsSelect(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is an application of the LINQ select operator
            </summary>
            <param name="x">The expression to test</param>
        
| M:Z0.XQuery.IsLogical(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a logical operator
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.IsLambda(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a lambda expression
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.disjunction``1(``0)                   | 
            <summary>
            If the source expression is a logical disjunction, returns the expression; otherwise, returns none
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.conjunction``1(``0)                   | 
            <summary>
            Tests whether an expression is a logical conjunction
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.XQuery.junction``1(``0)                      | 
            <summary>
            Deterines whether the test expression is either a logical conjuntion or disjunction
            </summary>
            <param name="X">The expression to examine</param>
        
| M:Z0.XQuery.member``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the member info for the member referenced by an expression delegate
            </summary>
            <typeparam name="T">The first selector parameter</typeparam>
            <typeparam name="M">The member type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XQuery.method``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T">The function return type</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XQuery.method``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first function argument</typeparam>
            <typeparam name="T2">The function return type</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XQuery.method``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first function argument</typeparam>
            <typeparam name="T2">The second function argument</typeparam>
            <typeparam name="R">The function return type</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XQuery.method``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})| 
            <summary>
            Extracts the method info for the function referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first function argument</typeparam>
            <typeparam name="T2">The second function argument</typeparam>
            <typeparam name="T3">The third function argument</typeparam>
            <typeparam name="R">The function return type</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XQuery.method``1(System.Linq.Expressions.Expression{System.Action{``0}})| 
            <summary>
            Extracts the method for the action referenced by an an expression delegate
            </summary>
            <typeparam name="T">The action argument</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XQuery.method``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})| 
            <summary>
            Extracts the method info for the action referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first action argument</typeparam>
            <typeparam name="T2">The second action argument</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XQuery.method``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})| 
            <summary>
            Extracts the method info for the action referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first action argument</typeparam>
            <typeparam name="T2">The second action argument</typeparam>
            <typeparam name="T3">The third action argument</typeparam>
            <param name="selector">Specifies the call expression</param>
        
| M:Z0.XQuery.method``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})| 
            <summary>
            Extracts the method info for the action referenced by an expression delegate
            </summary>
            <typeparam name="T1">The first action argument</typeparam>
            <typeparam name="T2">The second action argument</typeparam>
            <typeparam name="T3">The third action argument</typeparam>
            <typeparam name="T4">The fourth action argument</typeparam>
            <param name="selector">The call expression</param>
        
| M:Z0.XQuery.property``1(System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Extracts the property info for the property referenced by an expression delegate
            </summary>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XQuery.property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})| 
            <summary>
            Extracts the property info for the property referenced by an expression delegate
            </summary>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="P">The property type</typeparam>
            <param name="selector">The selecting expression that identifies the desired member</param>
        
| M:Z0.XQuery.test``2(System.Linq.Expressions.Expression)| 
            <summary>
            Performs a type-test on an expression
            </summary>
            <typeparam name="X1">The first candidate type</typeparam>
            <typeparam name="X2">The second candidate type</typeparam>
            <param name="x">The expression to test</param>
        
| M:Z0.XQuery.test``3(System.Linq.Expressions.Expression)| 
            <summary>
            Performs a type-test on an expression
            </summary>
            <typeparam name="X1">The first candidate type</typeparam>
            <typeparam name="X2">The second candidate type</typeparam>
            <typeparam name="X3">The third candidate type</typeparam>
            <param name="x">The expression to test</param>
        
| M:Z0.XQuery.test``4(System.Linq.Expressions.Expression)| 
            <summary>
            Performs a type-test on an expression
            </summary>
            <typeparam name="X1">The first candidate type</typeparam>
            <typeparam name="X2">The second candidate type</typeparam>
            <typeparam name="X3">The third candidate type</typeparam>
            <typeparam name="X4">The fourth candidate type</typeparam>
            <param name="x">The expression to test</param>
        
| T:Z0.Either                                       | 
            <summary>
            Constructs and manipulates <see cref="T:Z0.IEither" /> values
            </summary>
            <remarks>
            API surface inspired by https://github.com/ekmett/either
            </remarks>
        
| M:Z0.Either.make``2(``0)                          | 
            <summary>
            Constructs a left-valued either
            </summary>
            <typeparam name="L">The left value type</typeparam>
            <typeparam name="R">The right value type</typeparam>
            <param name="left">The right value</param>
        
| M:Z0.Either.make``2(``1)                          | 
            <summary>
            Constructs a right-valued either
            </summary>
            <typeparam name="L">The left value type</typeparam>
            <typeparam name="R">The right value type</typeparam>
            <param name="right">The right value</param>
        
| M:Z0.Either.left``2(Z0.Either{``0,``1})           | 
            <summary>
            If either is Left, returns the left value; oterwise, raises an error
            </summary>
            <typeparam name="L">The left type</typeparam>
            <typeparam name="R">The right type</typeparam>
            <param name="e">The either</param>
        
| M:Z0.Either.right``2(Z0.Either{``0,``1})          | 
            <summary>
            If either is Left, returns the left value; oterwise, raises an error
            </summary>
            <typeparam name="L">The left type</typeparam>
            <typeparam name="R">The right type</typeparam>
            <param name="e">The either</param>
        
| M:Z0.Either.map``4(System.Func{``0,``2},System.Func{``1,``3},Z0.Either{``0,``1})| 
            <summary>
            Applies the left function if the either is left-values and the right function if right
            </summary>
            <typeparam name="L">The left value type</typeparam>
            <typeparam name="R">The right value type</typeparam>
            <typeparam name="X">The left codomain</typeparam>
            <typeparam name="Y">The right codomain</typeparam>
            <param name="lf">The left function</param>
            <param name="rf">The right function</param>
            <param name="e">The either</param>
        
| M:Z0.Either.map``3(System.Func{``0,``2},Z0.Either{``0,``1})| 
            <summary>
            Applies a left function if the either is left-valued; otherwise, passes the right 
            value through untransformed
            </summary>
            <typeparam name="L">The left value type</typeparam>
            <typeparam name="R">The right value type</typeparam>
            <typeparam name="Y">The codomain of the left function</typeparam>
            <param name="lf">The function to apply to the left value if present</param>
            <param name="e">The either</param>
        
| M:Z0.Either.map``3(System.Func{``1,``2},Z0.Either{``0,``1})| 
            <summary>
            Applies a right function if the either is right-valued; otherwise, passes the left
            value through untransformed
            </summary>
            <typeparam name="L">The left value type</typeparam>
            <typeparam name="R">The right value type</typeparam>
            <typeparam name="Y">The codomain of the right function</typeparam>
            <param name="rf">The function to apply to the right value if present</param>
            <param name="e">The either</param>
        
| M:Z0.Either.isLeft``2(Z0.Either{``0,``1})         | 
            <summary>
            Determines whether the either is left-valued
            </summary>
            <typeparam name="L">The left type</typeparam>
            <typeparam name="R">The right type</typeparam>
            <param name="e">The either</param>
        
| M:Z0.Either.isRight``2(Z0.Either{``0,``1})        | 
            <summary>
            Determines whether the either is right-valued
            </summary>
            <typeparam name="L">The left type</typeparam>
            <typeparam name="R">The right type</typeparam>
            <param name="e">The either</param>
        
| T:Z0.Either`2                                     | 
            <summary>
            A value that realizes exactly one of two alternatives
            </summary>
            <typeparam name="L">The type of the left alternative</typeparam>
            <typeparam name="R">The type of the right alternative</typeparam>
        
| P:Z0.Either`2.Selected                            | 
            <summary>
            Tracks the chosen alternative
            </summary>
        
| P:Z0.Either`2.Left                                | 
            <summary>
            Specifies the left alternative
            </summary>
        
| P:Z0.Either`2.Right                               | 
            <summary>
            Specivies the right alternative
            </summary>
        
| M:Z0.Either`2.#ctor(`0)                           | 
            <summary>
            Constructs a left-valued alternative
            </summary>
            <param name="left">The alternative value</param>
        
| M:Z0.Either`2.#ctor(`1)                           | 
            <summary>
            Constructs a right-valued alternative
            </summary>
            <param name="right">The alternative value</param>
        
| P:Z0.Either`2.IsLeft                              | 
            <summary>
            Indicates whether the left alternative is specified
            </summary>
        
| P:Z0.Either`2.IsRight                             | 
            <summary>
            Indicates whether the right alternative is specified
            </summary>
        
| M:Z0.Either`2.OnLeft(System.Action{`0})           | 
            <summary>
            Invokes an action if the alternative is left-valued
            </summary>
            <param name="action">The action to invoke</param>
        
| M:Z0.Either`2.OnRight(System.Action{`1})          | 
            <summary>
            Invokes an action if the alternative is right values
            </summary>
            <param name="action">The action to invoke</param>
        
| M:Z0.Either`2.OnEither(System.Action{`0},System.Action{`1})| 
            <summary>
            Invokes exactly one of two alternative actions
            </summary>
            <param name="left">The action to invoke when the altenative is left-valued</param>
            <param name="right">The action to invoke when the altenative is right-valued</param>
        
| M:Z0.Either`2.Map``1(System.Func{`0,``0},System.Func{`1,``0})| 
            <summary>
            Applies exactly one of two transformations
            </summary>
            <typeparam name="Y">The type of the output value</typeparam>
            <param name="left">The transformation to invoke when the alternative is left-valued</param>
            <param name="right">The transformation to invoke when the alternative is right-valued</param>
        
| M:Z0.Either`2.Select``1(System.Func{`1,``0})      | 
            <summary>
            Defines a right-biased Linq-monad projector
            </summary>
            <param name="f">A function that projects a right value, if extant, onto a target value</param>
            <typeparam name="Y">The target value type</typeparam>
        
| M:Z0.Either`2.SelectMany``2(System.Func{`1,Z0.Either{`0,``0}},System.Func{`1,``0,``1})| 
            <summary>
            Defines a right-biased Linq-modad join
            </summary>
            <param name="f">A function that lifts a right value, if extant, into monadic space</param>
            <param name="g">A function that projects a right monadic source value onto a target-parametric target monadic value</param>
            <typeparam name="Y">The join type</typeparam>
            <typeparam name="Z">The target type</typeparam>
        
| M:Z0.Either`2.Equals(Z0.Either{`0,`1})            | 
            <summary>
            Determines structural equality
            </summary>
            <param name="src">The other either</param>
        
| T:Z0.IEither                                      | 
            <summary>
            Defines nonparametric either attributes 
            </summary>
        
| P:Z0.IEither.IsLeft                               | 
            <summary>
            Specifies whether the left alternative exists
            </summary>
        
| P:Z0.IEither.IsRight                              | 
            <summary>
            Specifies whether the right alternative exists
            </summary>
        
| T:Z0.IEither`2                                    | 
            <summary>
            Characterizes a parametric disjoint union of arity two, where exactly one state
            is populated for a given instantitation
            </summary>
            <typeparam name="L">The left potential value</typeparam>
            <typeparam name="R">The right potential value</typeparam>
        
| P:Z0.IEither`2.Left                               | 
            <summary>
            If <see cref="!:IsLeft" /> is true, specifies the value of the left alternative
            </summary>
        
| P:Z0.IEither`2.Right                              | 
            <summary>
            If <see cref="!:IsRight" /> is true, specifies the value of the right alternative
            </summary>
        
| T:Z0.IMonadic                                     | 
            <summary>
            Characterizes nothing, but defines a root interface for things monadic
            </summary>
        
| T:Z0.IOption                                      | 
            <summary>
            Characterizes an untyped optional value
            </summary>
        
| P:Z0.IOption.IsSome                               | 
            <summary>
            True if a value exists, false otherwise
            </summary>
        
| P:Z0.IOption.IsNone                               | 
            <summary>
            True if a value does not exist, false otherwise
            </summary>
        
| T:Z0.IOption`1                                    | 
            <summary>
            Characterizes a parametric option
            </summary>
            <typeparam name="T">The potential value type</typeparam>
        
| P:Z0.IOption`1.Value                              | 
            <summary>
            If extant, specifies the option value
            </summary>
        
| T:Z0.IOption`2                                    | 
            <summary>
            Characterizes an F-bound polymorphic option
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="T">The potential value type</typeparam>
        
| T:Z0.Copair`2                                     | 
            <summary>
            Characterizes (to the extent that the language conveniently supports) a disjoint union 
            of parametric arity 2, a categorically natural dual to a pairing
            </summary>
            <typeparam name="L">The type of the potential left value</typeparam>
            <typeparam name="R">The type of the potential left value</typeparam>
        
| F:Z0.Copair`2.Left                                | 
            <summary>
            The potential left value
            </summary>
        
| F:Z0.Copair`2.Right                               | 
            <summary>
            The potential right value
            </summary>
        
| M:Z0.Option.from``1(``0)                          | 
            <summary>
            Creates an option from a reference type instance, returning a valued option if the
            refernce is not null; otherwise, returns none
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Option.from``1(System.Nullable{``0})         | 
            <summary>
            Creates an option from a value type, returning a valued option if the
            refernce is not null; otherwise, returns none
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Option.none``1                               | 
            <summary>
            Defines a non-valued option
            </summary>
            <typeparam name="T">The value type, if the value existed</typeparam>
        
| M:Z0.Option.some``1(``0)                          | 
            <summary>
            Defines a valued option
            </summary>
            <param name="value">The value</param>
            <typeparam name="T">The type of the extant value</typeparam>
        
| M:Z0.Option.eval``1(``0)                          | 
            <summary>
            Classifies the value as some or none and manufactures the appropriate option encapsulation
            </summary>
            <typeparam name="T">The type of value</typeparam>
            <param name="value">The value to lift into option-space</param>
        
| M:Z0.Option.eval``1(System.Nullable{``0})         | 
            <summary>
            Classifies the value as some or none and manufactures the appropriate option encapsulation
            </summary>
            <typeparam name="T">The type of value</typeparam>
            <param name="value">The value to lift into option-space</param>
        
| M:Z0.Option.Try``1(System.Func{``0},System.Action{System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None and invokes an error handler if supplied
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="f">The function to evaluate</param>
        
| M:Z0.Option.Try``1(System.Func{Z0.Option{``0}},System.Action{System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None together with the reported exception
            </summary>
            <param name="f">The function to evaluate</param>
            <typeparam name="T">The function result type, if successful</typeparam>
        
| M:Z0.Option.Try(System.Action,System.Action{System.Exception})| 
            <summary>
            Invokes an action within a try block and, upon error, calls
            the handler if specified. If no handler is specified, the exception
            message is emitted to stderr
            </summary>
            <param name="f">The action to invoke</param>
            <param name="onerror">The error handler to call, if specified</param>
        
| M:Z0.Option.Try``2(``0,System.Func{``0,``1},System.Action{``0,System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None together with the reported exception
            </summary>
            <typeparam name="X">The input type</typeparam>
            <typeparam name="Y">The output type</typeparam>
            <param name="x">The input value</param>
            <param name="f">The function to evaluate</param>
        
| M:Z0.Option.TryCast``1(System.Object)             | 
            <summary>
            Casts a value if possible, otherwise returns none
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="item">The object to cast</param>
        
| M:Z0.Option.ifNotNull``2(``0,System.Func{``0,``1},``1)| 
            <summary>
            Evaluates a function over a value if the value is not null; otherwise, returns the default result value
            </summary>
            <typeparam name="X">The operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="x">The operand</param>
            <param name="f1">The function to potentially evaluate</param>
        
| T:Z0.Option`1                                     | 
            <summary>
            Represents a potential value
            </summary>
            <typeparam name="T">The potential value type</typeparam>
        
| F:Z0.Option`1.value                               | 
            <summary>
            The encapsulated value, iff Exists is true
            </summary>
        
| P:Z0.Option`1.Exists                              | 
            <summary>
            Specifies whether the option has a value
            </summary>
        
| P:Z0.Option`1.Value                               | 
            <summary>
            Exposes the underlying data, if extant; otherwise, yeilds the default potential value, which may of course be null
            </summary>
        
| M:Z0.Option`1.None                                | 
            <summary>
            Defines a non-valued option
            </summary>
        
| M:Z0.Option`1.Some(`0)                            | 
            <summary>
            Defines a valued option
            </summary>
            <param name="Value">The encapsulated value</param>
        
| M:Z0.Option`1.op_Equality(Z0.Option{`0},Z0.Option{`0})| 
            <summary>
            Implmements value-based equality
            </summary>
            <param name="lhs">The first value</param>
            <param name="rhs">The second value</param>
        
| M:Z0.Option`1.op_Inequality(Z0.Option{`0},Z0.Option{`0})| 
            <summary>
            Implements value-based equality negation
            </summary>
            <param name="lhs">The first value</param>
            <param name="rhs">The second value</param>
        
| M:Z0.Option`1.op_True(Z0.Option{`0})              | 
            <summary>
            Returns true if the option has a value and false otherwise
            </summary>
            <param name="x">The option to test</param>
        
| M:Z0.Option`1.op_False(Z0.Option{`0})             | 
            <summary>
            Returns false if the option is non-valued and true otherwise
            </summary>
            <param name="x">The option to test</param>
        
| M:Z0.Option`1.op_LogicalNot(Z0.Option{`0})        | 
            <summary>
            Returns false if the option is non-valued and true otherwise
            </summary>
            <param name="x">The option to test</param>
        
| M:Z0.Option`1.IsSome                              | 
            <summary>
            Returns true if the value exists
            </summary>
        
| M:Z0.Option`1.IsNone                              | 
            <summary>
            Returns true if the value does not exist
            </summary>
        
| M:Z0.Option`1.IfSome``1(System.Func{`0,``0})      | 
            <summary>
            Applies the a function to evaluate the underlying value if it exists
            </summary>
            <param name="F">The function to apply, if possible</param>
            <typeparam name="X">The mapped value type</typeparam>
        
| M:Z0.Option`1.OnSome(System.Action{`0})           | 
            <summary>
            Invokes an action if the value exists
            </summary>
            <param name="ifSome">The action to potentially ivoke</param>
        
| M:Z0.Option`1.OnNone(System.Action)               | 
            <summary>
            Invokes an action if the value doesn't exist
            </summary>
            <param name="ifNone">The action to invoke</param>
        
| M:Z0.Option`1.Require(System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Yields the encapulated value if present; otherwise, raises an exception
            </summary>
        
| P:Z0.Option`1.ValueType                           | 
            <summary>
            The type of the encapsulated value, if present
            </summary>
        
| M:Z0.Option`1.ValueOrDefault(`0)                  | 
            <summary>
            Extracts the encapulated value if it exists; otherwise, returns the default value for
            the underlying type which is NULL for reference types
            </summary>
            <param name="default">The value to return if the option is non-valued</param>
        
| M:Z0.Option`1.ValueOrElse(System.Func{`0})        | 
            <summary>
            Returns the encapsulated value if it exists; otherwise, invokes the supplied fallback function 
            </summary>
            <param name="fallback">The function called to produce a value when there is no value in the source</param>
        
| M:Z0.Option`1.ValueOrElse(`0)                     | 
            <summary>
            Returns the encapsulated value if it exists; otherwise, returns the supplied value
            </summary>
            <param name="fallback">The function called to produce a value when there is no value in the source</param>
        
| M:Z0.Option`1.Map``1(System.Func{`0,``0},System.Func{``0})| 
            <summary>
            Applies supplied function to value if present, otherwise returns the 
            value obtained by invoking the fallback function
            </summary>
            <typeparam name="S">The output type</typeparam>
            <param name="f">The function to apply when value exists</param>
            <param name="fallback">The function to invoke when no value exists</param>
        
| M:Z0.Option`1.Map``1(System.Func{`0,``0},``0)     | 
            <summary>
            Applies supplied function to value if present, otherwise returns the fallback value
            </summary>
            <typeparam name="S">The output type</typeparam>
            <param name="f">The function to apply when value exists</param>
            <param name="fallback">The function to invoke when no value exists</param>
        
| M:Z0.Option`1.TryMap``1(System.Func{`0,``0})      | 
            <summary>
            Applies a function to value if present, otherwise returns None
            </summary>
            <typeparam name="S">The output type</typeparam>
            <param name="f">The function to apply when value exists</param>
        
| M:Z0.Option`1.MapValueOrElse``1(System.Func{`0,``0},System.Func{``0})| 
            <summary>
            Transforms the value, if present, otherwise invokes a function
            to produce an appropriate value of the target type if not
            </summary>
            <typeparam name="S">The target type</typeparam>
            <param name="ifSome">The transformer</param>
            <param name="fallback">The alternate transformer</param>
        
| M:Z0.Option`1.MapValueOrDefault``1(System.Func{`0,``0},``0)| 
            <summary>
            Applies a function to the encapsulated value if it exists; otherwise, returns a default value
            </summary>
            <typeparam name="S">The projected value type</typeparam>
            <param name="ifSome">The function to apply when a value exists</param>
            <param name="default">The value to return when no value exists</param>
        
| M:Z0.Option`1.MapValueOrNull``1(System.Func{`0,``0})| 
            <summary>
            Maps an optional source value to a nullable value type
            </summary>
            <param name="x">The optional source value</param>
            <param name="f">The transfomation function</param>
            <typeparam name="S">The type of the project value if value exists</typeparam>
        
| M:Z0.Option`1.Bind``1(System.Func{`0,Z0.Option{``0}})| 
            <summary>
            Implements the canonical bind operation
            </summary>
            <typeparam name="X">The source domain type</typeparam>
            <typeparam name="Y">The target domain type</typeparam>
            <param name="x">The point in the monadic space over X</param>
            <param name="f">The function to apply to effect the bind</param>
        
| M:Z0.Option`1.Select``1(System.Func{`0,``0})      | 
            <summary>
            LINQ integration function
            </summary>
            <param name="apply">The application projector</param>
            <typeparam name="Y">The application range</typeparam>
        
| M:Z0.Option`1.SelectMany``2(System.Func{`0,Z0.Option{``0}},System.Func{`0,``0,``1})| 
            <summary>
            LINQ integration function
            </summary>
            <param name="eval">The evaluator</param>
            <param name="project">The lifting projector</param>
            <typeparam name="Y">The evaluator range type</typeparam>
            <typeparam name="Z">The projector range type</typeparam>
        
| M:Z0.Option`1.Where(System.Func{`0,System.Boolean})| 
            <summary>
            LINQ integration function
            </summary>
            <param name="predicate">The predicate to evaluate</param>
        
| M:Z0.IFieldParser.Parse(System.String,Z0.YeaOrNea@)| 
            <summary>
            Parses a Y/N literal
            </summary>
            <param name="src">The source text</param>
            <param name="result">The parse result</param>
        
| M:Z0.IFieldParser.Parse(System.String,System.String@)| 
            <summary>
            Parses a string as a string which effects cleansing/trimming/denullifying as necessary
            </summary>
            <param name="src">The source text</param>
            <param name="result">The parse result</param>
        
| M:Z0.IFieldParser.Numeric``1(System.String,``0@,``0)| 
            <summary>
            Parses a numeric field if possible; else sets the result to a default value
            </summary>
            <param name="src">The source text</param>
            <param name="result">The parse result, if successful, or the supplied default value if not</param>
            <param name="default">The parse result value should the parse operation fail</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.IFieldParser.Literal``1(System.String,Z0.ParseResult{``0}@,``0)| 
            <summary>
            Parses an enumeration literal if possible; else sets the result to a default value
            </summary>
            <param name="src">The source text</param>
            <param name="result">The parse result, if successful, or the supplied default value if not</param>
            <param name="default">The parse result value should the parse operation fail</param>
            <typeparam name="E">The enum type</typeparam>
        
| T:Z0.IInfallibleParser`1                          | 
            <summary>
            Characterizes a parser that cannot fail (in theory)
            </summary>
            <typeparam name="T">The parsed type</typeparam>
            <remarks>For this scheme to work, it is incumbent upon the reifying type to return a monoidal zero if malformed text is encountered</remarks>
        
| T:Z0.IParametricParser                            | 
            <summary>
            Characterizes a non-parametric text parser that defines a parametric parse function
            </summary>
        
| M:Z0.IParametricParser.Parse``1(System.String)    | 
            <summary>
            Attemps to parse the source text as a parametrically-identified target type
            </summary>
            <param name="text">The source text</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.IParametricParser.Parse``1(System.String,``0)| 
            <summary>
            Returns a successfully parsed value, if possible; otherwise returns a caller-supplied default value
            </summary>
            <param name="src">The text to parse</param>
            <param name="@default">The value returned if the parse function fails</param>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.IParametricParser`1                          | 
            <summary>
            Characterizes a source-parametric parser that defines a parametric parse function
            </summary>
        
| M:Z0.IParametricParser`1.Parse``1(`0)             | 
            <summary>
            Attemps to parse the source as a parametrically-identified target type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.IParametricParser`1.Parse``1(`0,``0)         | 
            <summary>
            Returns a successfully parsed value, if possible; otherwise returns a caller-supplied default value
            </summary>
            <param name="src">The value to parse</param>
            <param name="@default">The value returned if the parse function fails</param>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.ISequentialParser`1                          | 
            <summary>
            Characterizes a parser that yields values of a parametrically-identified type
            </summary>
            <typeparam name="T">The type of value that the parser can parse</typeparam>
        
| T:Z0.ISequentialParser`2                          | 
            <summary>
            Characterizes a parser that yields values of sequential aspect
            </summary>
            <typeparam name="T">The type of value that the parser can parse</typeparam>
        
| T:Z0.ITextParser`1                                | 
            <summary>
            Characterizes a parser that yields values of a parametrically-identified type
            </summary>
            <typeparam name="T">The type of value that the parser can parse</typeparam>
        
| T:Z0.Parse`1                                      | 
            <summary>
            Defines the signature of a canonical text -&gt; T parser
            </summary>
            <param name="src">The source text</param>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.Parse`2                                      | 
            <summary>
            Defines the signature of a canonical S -&gt; T parser
            </summary>
            <param name="src">The source value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| P:Z0.ParseResult.Source                           | 
            <summary>
            The content that was parsed...or not
            </summary>
        
| P:Z0.ParseResult.TargetType                       | 
            <summary>
            The target value type
            </summary>
        
| P:Z0.ParseResult.SourceType                       | 
            <summary>
            The source type
            </summary>
        
| P:Z0.ParseResult.Succeeded                        | 
            <summary>
            Specifies whether the parse attempt succeed, and thus the Value field is meaningful
            </summary>
        
| P:Z0.ParseResult.Value                            | 
            <summary>
            The parsed value, if the parse operaion succeedeed; otherwise best not look there
            </summary>
        
| P:Z0.ParseResult.Reason                           | 
            <summary>
            If the parse attempt failed, the reason for the failure, if available
            </summary>
        
| M:Z0.ParseResult.Success``1(System.String,``0)    | 
            <summary>
            Defines a successful parse result
            </summary>
            <param name="source">The input text</param>
            <param name="value">The parsed value</param>
            <typeparam name="T">The parsed value type</typeparam>
        
| M:Z0.ParseResult.Success``2(``0,``1)              | 
            <summary>
            Defines a successful parse result
            </summary>
            <param name="source">The input vaue</param>
            <param name="value">The parsed value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ParseResult.Fail``2(``0,System.Object)       | 
            <summary>
            Defines a parse result that signals failure
            </summary>
            <param name="source">The input vaue</param>
            <param name="reason">The failure reason, if available</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| P:Z0.ParseResult`2.Source                         | 
            <summary>
            The content that was parsed...or not
            </summary>
        
| P:Z0.ParseResult`2.Succeeded                      | 
            <summary>
            Specifies whether the parse attempt succeed, and thus the Value field is meaningful
            </summary>
        
| P:Z0.ParseResult`2.Value                          | 
            <summary>
            Upon successful parse attempt, holds the parsed value; otherwise it may or may not hold something else
            </summary>
        
| M:Z0.ParseResult`2.OnSuccess(System.Action{`1})   | 
            <summary>
            Invokes an action if the value exists
            </summary>
            <param name="ifSome">The action to potentially ivoke</param>
        
| M:Z0.ParseResult`2.OnFailure(System.Action)       | 
            <summary>
            Invokes an action if the value doesn't exist
            </summary>
            <param name="f">The action to invoke</param>
        
| M:Z0.ParseResult`2.OnFailure(System.Action{Z0.ParseResult{`0,`1}})| 
            <summary>
            Invokes an action if the value doesn't exist
            </summary>
            <param name="f">The action to invoke</param>
        
| M:Z0.ParseResult`2.MapValueOrSource``1(System.Func{`1,``0},System.Func{`0,``0})| 
            <summary>
            Maps the parsed value upon success and the source text upon failure
            </summary>
            <param name="success">The success projector</param>
            <param name="failure">The failure projector</param>
            <typeparam name="Y">The target type</typeparam>
        
| M:Z0.ParseResult`2.ValueOrDefault(`1)             | 
            <summary>
            Extracts the encapulated value if it exists; otherwise, returns the default value for
            the underlying type which is NULL for reference types
            </summary>
            <param name="default">The value to return if the option is non-valued</param>
        
| M:Z0.ParseResult`2.ValueOrElse(System.Func{`1})   | 
            <summary>
            Returns the encapsulated value if it exists; otherwise, invokes the supplied fallback function 
            </summary>
            <param name="fallback">The function called to produce a value when there is no value in the source</param>
        
| M:Z0.ParseResult`2.TryMap``1(System.Func{`1,``0}) | 
            <summary>
            Applies a function to value if present, otherwise returns None
            </summary>
            <typeparam name="S">The output type</typeparam>
            <param name="f">The function to apply when value exists</param>
        
| M:Z0.ParseResult`2.Bind``1(System.Func{`1,Z0.ParseResult{`0,``0}})| 
            <summary>
            Implements the canonical bind operation
            </summary>
            <typeparam name="X">The source domain type</typeparam>
            <typeparam name="Y">The target domain type</typeparam>
            <param name="x">The point in the monadic space over X</param>
            <param name="f">The function to apply to effect the bind</param>
        
| M:Z0.ParseResult`2.Select``1(System.Func{`1,``0}) | 
            <summary>
            LINQ integration function
            </summary>
            <param name="apply">The application projector</param>
            <typeparam name="Y">The application range</typeparam>
        
| M:Z0.ParseResult`2.SelectMany``2(System.Func{`1,Z0.ParseResult{`0,``0}},System.Func{`1,``0,``1})| 
            <summary>
            LINQ integration function
            </summary>
            <param name="eval">The evaluator</param>
            <param name="project">The lifting projector</param>
            <typeparam name="Y">The evaluator range type</typeparam>
            <typeparam name="Z">The projector range type</typeparam>
        
| P:Z0.ParseResult`1.Source                         | 
            <summary>
            The text that was parsed...or not
            </summary>
        
| P:Z0.ParseResult`1.Succeeded                      | 
            <summary>
            Specifies whether the parse attempt succeed, and thus the Value field is meaningful
            </summary>
        
| P:Z0.ParseResult`1.Value                          | 
            <summary>
            Upon successful parse attempt, holds the parsed value; otherwise it may or may not hold something else
            </summary>
        
| M:Z0.ParseResult`1.OnSuccess(System.Action{`0})   | 
            <summary>
            Invokes an action if the value exists
            </summary>
            <param name="ifSome">The action to potentially ivoke</param>
        
| M:Z0.ParseResult`1.OnFailure(System.Action)       | 
            <summary>
            Invokes an action if the value doesn't exist
            </summary>
            <param name="f">The action to invoke</param>
        
| M:Z0.ParseResult`1.OnFailure(System.Action{Z0.ParseResult})| 
            <summary>
            Invokes an action if the value doesn't exist
            </summary>
            <param name="f">The action to invoke</param>
        
| M:Z0.ParseResult`1.MapValueOrSource``1(System.Func{`0,``0},System.Func{System.String,``0})| 
            <summary>
            Maps the parsed value upon success and the source text upon failure
            </summary>
            <param name="success">The success projector</param>
            <param name="failure">The failure projector</param>
            <typeparam name="Y">The target type</typeparam>
        
| M:Z0.ParseResult`1.ValueOrDefault(`0)             | 
            <summary>
            Extracts the encapulated value if it exists; otherwise, returns the default value for
            the underlying type which is NULL for reference types
            </summary>
            <param name="default">The value to return if the option is non-valued</param>
        
| M:Z0.ParseResult`1.ValueOrElse(System.Func{`0})   | 
            <summary>
            Returns the encapsulated value if it exists; otherwise, invokes the supplied fallback function 
            </summary>
            <param name="fallback">The function called to produce a value when there is no value in the source</param>
        
| M:Z0.ParseResult`1.TryMap``1(System.Func{`0,``0}) | 
            <summary>
            Applies a function to value if present, otherwise returns None
            </summary>
            <typeparam name="S">The output type</typeparam>
            <param name="f">The function to apply when value exists</param>
        
| M:Z0.ParseResult`1.Bind``1(System.Func{`0,Z0.ParseResult{``0}})| 
            <summary>
            Implements the canonical bind operation
            </summary>
            <typeparam name="X">The source domain type</typeparam>
            <typeparam name="Y">The target domain type</typeparam>
            <param name="x">The point in the monadic space over X</param>
            <param name="f">The function to apply to effect the bind</param>
        
| M:Z0.ParseResult`1.Select``1(System.Func{`0,``0}) | 
            <summary>
            LINQ integration function
            </summary>
            <param name="apply">The application projector</param>
            <typeparam name="Y">The application range</typeparam>
        
| M:Z0.ParseResult`1.SelectMany``2(System.Func{`0,Z0.ParseResult{``0}},System.Func{`0,``0,``1})| 
            <summary>
            LINQ integration function
            </summary>
            <param name="eval">The evaluator</param>
            <param name="project">The lifting projector</param>
            <typeparam name="Y">The evaluator range type</typeparam>
            <typeparam name="Z">The projector range type</typeparam>
        
| T:Z0.Parser`2                                     | 
            <summary>
            Defines a parser predicated on a supplied parse function
            </summary>
        
| M:Z0.EnumValue.eVal``2(``1,``0)                   | 
            <summary>
            Reads an E-value from an enum of primal T-kind
            </summary>
            <param name="tVal">The integral value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.EnumValue.tVal``2(``0,``1)                   | 
            <summary>
            Reads a T-value from the value of an E-enum of primal T-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.EnumValue.tVal``2(``0@,``1@)                 | 
            <summary>
            Reads a T-value from an E-enum value of primal T-kind. 
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.Byte@)         | 
            <summary>
            Reads a u8-value from an enum of primal u8-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.SByte@)        | 
            <summary>
            Reads an i8-value from an enum of primal u8-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.Int16@)        | 
            <summary>
            Reads an i16-value from an enum of primal i16-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.UInt16@)       | 
            <summary>
            Reads a u16-value from an enum of primal u16-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.Int32@)        | 
            <summary>
            Reads an i32-value from an enum of primal i32-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.UInt32@)       | 
            <summary>
            Reads a u32-value from an enum of primal u32-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.Int64@)        | 
            <summary>
            Reads an i64-value from an enum of primal i64-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.tVal``1(``0@,System.UInt64@)       | 
            <summary>
            Reads a u64-value from an enum of primal u64-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.cVal``1(``0@,System.Char@)         | 
            <summary>
            Reads a c16-value from an enum of primal u16-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="cVal">The character output value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.eStore``1(``0@,System.UInt64@)     | 
            <summary>
            Stores an enum value of any primal kind to a u64 target
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.u8``1(``0@,System.UInt64@)         | 
            <summary>
            Reads a u8 value from an enum of primal u8-kind, writes the value to a u64 target, and returns the extracted u8 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.i8``1(``0@,System.UInt64@)         | 
            <summary>
            Reads a u8 value from an enum of primal i8-kind, writes the value to a u64 target, and returns the extracted i8 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.u16``1(``0@,System.UInt64@)        | 
            <summary>
            Reads a u16 value from an enum of primal u16-kind, writes the value to a u64 target, and returns the extracted u16 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.c16``1(``0@,System.UInt64@)        | 
            <summary>
            Reads a u16 value from an enum of primal u16-kind, writes the value to a u64 target, and returns the extracted value as c16 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.i16``1(``0@,System.UInt64@)        | 
            <summary>
            Reads an i16 value from an enum of primal i16-kind, writes the value to a u64 target, and returns the extracted i16 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.u32``1(``0@,System.UInt64@)        | 
            <summary>
            Reads n u32 value from an enum of primal u32-kind, writes the value to a u64 target, and returns the extracted u32 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.i32``1(``0@,System.UInt64@)        | 
            <summary>
            Reads an i32 value from an enum of primal i32-kind, writes the value to a u64 target, and returns the extracted i32 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.u64``1(``0@,System.UInt64@)        | 
            <summary>
            Reads n u64 value from an enum of primal u64-kind, writes the value to a u64 target, and returns the extracted u64 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.i64``1(``0@,System.UInt64@)        | 
            <summary>
            Reads an i64 value from an enum of primal i64-kind, writes the value to a u64 target, and returns the extracted i64 value
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.Byte,``0)           | 
            <summary>
            Envisions a u8 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u8-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.SByte,``0)          | 
            <summary>
            Envisions an i8 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i8-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.Int16,``0)          | 
            <summary>
            Envisions an i16 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i16-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.UInt16,``0)         | 
            <summary>
            Envisions a u16 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u16-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.Char,``0)           | 
            <summary>
            Envisions a c16 value as a value of an enum of like u16 kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u16-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.Int32,``0)          | 
            <summary>
            Envisions an i32 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i32-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.UInt32,``0)         | 
            <summary>
            Envisions a u32 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u32-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.Int64,``0)          | 
            <summary>
            Envisions an i64 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i64-kind</typeparam>
        
| M:Z0.EnumValue.eVal``1(System.UInt64,``0)         | 
            <summary>
            Envisions a u64 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u64-kind</typeparam>
        
| M:Z0.EnumValue.e8i``1(``0)                        | 
            <summary>
            Envisions an E-enum value of primal i8-kind as a like-kinded scalar value
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type of primal i8-kind</typeparam>
        
| M:Z0.EnumValue.e8u``1(``0)                        | 
            <summary>
            Envisions an E-enum value of primal u8-kind as a like-kinded scalar value
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type of primal u8-kind</typeparam>
        
| M:Z0.EnumValue.e16i``1(``0)                       | 
            <summary>
            Envisions an E-enum value of primal i16-kind as a like-kinded scalar value
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type of primal i16-kind</typeparam>
        
| M:Z0.EnumValue.e16u``1(``0)                       | 
            <summary>
            Envisions an E-enum value of primal u16-kind as a like-kinded scalar value
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type of primal u16-kind</typeparam>
        
| M:Z0.EnumValue.e16c``1(``0)                       | 
            <summary>
            Envisions an E-enum value of primal u16-kind as a c16 value
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type of primal u16-kind</typeparam>
        
| M:Z0.FieldValues.from``1(System.Type)             | 
            <summary>
            Selects the literal values declared by a type that are of specified parametric type
            </summary>
            <param name="src">The source type</param>
            <typeparam name="T">The literal value type</typeparam>
        
| T:Z0.MethodParameter                              | 
            <summary>
            Represents a method (value, not type) parameter 
            </summary>
        
| T:Z0.MethodSig                                    | 
            <summary>
            Identifies and describes a method that, whithin some useful scope, is unique
            </summary>
        
| M:Z0.MethodSig.TypeParameters(System.Reflection.MethodInfo)| 
            <summary>
            Describes a method's type parameters, if any
            </summary>
            <param name="method">The method to examine</param>
        
| M:Z0.TaggedMember.define``2(``0,``1)              | 
            <summary>
            Defines a tagged member
            </summary>
            <param name="m">The member</param>
            <param name="t">The tag</param>
            <typeparam name="M">The member type</typeparam>
            <typeparam name="T">The tag type</typeparam>
        
| T:Z0.TaggedMember`2                               | 
            <summary>
            Pairs a member attribute value with its target
            </summary>
        
| P:Z0.TaggedMember`2.Member                        | 
            <summary>
            The target member
            </summary>
        
| P:Z0.TaggedMember`2.Tag                           | 
            <summary>
            The tag value
            </summary>
        
| T:Z0.TypeParameter                                | 
            <summary>
            Represents a type parameter in a generic artifact definition
            </summary>
        
| T:Z0.TypeParameters                               | 
            <summary>
            Represents the open type parameters defined by a method
            </summary>
        
| T:Z0.TypeSig                                      | 
            <summary>
            A succinct type signature
            </summary>
        
| T:Z0.ValueMember                                  | 
            <summary>
            Represents a data slot in the declaring type and may correspond to either a field or property
            </summary>
        
| P:Z0.ValueMember.Name                             | 
            <summary>
            The member name
            </summary>
        
| P:Z0.ValueMember.ValueType                        | 
            <summary>
            The value type that defines the member
            </summary>
        
| P:Z0.ValueMember.MemberInfo                       | 
            <summary>
            Provides access to the represented member
            </summary>
        
| M:Z0.Reflective.Public(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| 
            <summary>
            Selects the public methods from a stream
            </summary>
            <param name="src">The methods to examine</param>
        
| M:Z0.DisplayNameFormatting.DisplayName(System.Reflection.PropertyInfo)| 
            <summary>
            Gets the display name specified by the eponymous attribute, if attributed; otherwise, returns the reflected property name
            </summary>
            <param name="src">The source property</param>
        
| T:Z0.DateRange                                    | 
            <summary>
            Represents a contiguous finite interval of time with calendar day resolution
            </summary>
        
| M:Z0.DateRange.op_Implicit(Z0.DateRange)~Z0.TimeInterval{System.DateTime}| 
            <summary>
            Converts a <see cref="T:Z0.DateRange" /> value to a <see cref="T:Z0.TimeInterval`1" /> value
            </summary>
            <param name="x">The source range</param>
        
| M:Z0.DateRange.FY(System.Int32)                   | 
            <summary>
            Produces a <see cref="T:Z0.DateRange" /> that [begins | ends] on the [first | last] day of a given year
            </summary>
            <param name="Year">The year on which the range will be based</param>
        
| M:Z0.DateRange.Q1(System.Int32)                   | 
            <summary>
            Produces a <see cref="T:Z0.DateRange" /> that begins on the first day of the year
            and ends on the last day of the sixth month of that year
            </summary>
            <param name="Year">The year on which the range will be based</param>
        
| M:Z0.DateRange.Q2(System.Int32)                   | 
            <summary>
            Produces a <see cref="T:Z0.DateRange" /> that begins on the first day of the fourth month 
            and ends on the last day of the sixth month of a specified year
            </summary>
            <param name="Year">The year on which the range will be based</param>
        
| M:Z0.DateRange.Q3(System.Int32)                   | 
            <summary>
            Produces a <see cref="T:Z0.DateRange" /> that begins on the first day of the seventh month 
            and ends on the last day of the ninth month of a specified year
            </summary>
            <param name="Year">The year on which the range will be based</param>
        
| M:Z0.DateRange.Q4(System.Int32)                   | 
            <summary>
            Produces a <see cref="T:Z0.DateRange" /> that begins on the first day of the tenth month 
            and ends on the last day of the of a specified year
            </summary>
            <param name="Year">The year on which the range will be based</param>
        
| M:Z0.DateRange.op_Implicit(System.ValueTuple{System.Date,System.Date})~Z0.DateRange| 
            <summary>
            Produces a date range from a 2-tuple
            </summary>
            <param name="x">The source tuple</param>
        
| M:Z0.DateRange.#ctor(System.Date,System.Date)     | 
            <summary>
            Initializes a new instance of the <see cref="T:Z0.DateRange" /> type
            </summary>
            <param name="min">The inclusive lower bound of the period</param>
            <param name="max">The inclusive upper bound of the period</param>
        
| P:Z0.DateRange.Min                                | 
            <summary>
            The inclusive lower bound
            </summary>
        
| P:Z0.DateRange.Max                                | 
            <summary>
            The inclusive upper bound
            </summary>
        
| M:Z0.DateRange.In(System.Date)                    | 
            <summary>
            Determines whether the test value is within the range
            </summary>
            <param name="test">The date to test</param>
        
| M:Z0.DateRange.Out(System.Date)                   | 
            <summary>
            Determines whether the test value is outside the range
            </summary>
            <param name="test">The date to test</param>
        
| M:Z0.DateRange.Months(System.Date,System.Date)    | 
            <summary>
            Produces a montnly <see cref="T:Z0.DateRange" /> sequence 
            </summary>
            <param name="min">The inclusive minimum month</param>
            <param name="max">The inclusive maximum month</param>
        
| M:Z0.DateRange.CreatePartitionPoints(System.Int32)| 
            <summary>
            Creates the points in a range partition satisfying the specified width
            </summary>
            <param name="width">The width between partition points</param>
        
| M:Z0.DateRange.GetDates                           | 
            <summary>
            The days that comprise the range
            </summary>
        
| P:Z0.DateRange.TotalDays                          | 
            <summary>
            The number of days in the range
            </summary>
        
| P:Z0.DateRange.IsDegenerate                       | 
            <summary>
            Specifies whether the left and right boundaries are equal
            </summary>
        
| T:Z0.ITimeInterval                                | 
            <summary>
            Represents the content of a contiguous interval between comparable lower and upper bounds of the same type
            </summary>
        
| P:Z0.ITimeInterval.Min                            | 
            <summary>
            The first endpoint
            </summary>
        
| P:Z0.ITimeInterval.Max                            | 
            <summary>
            The second endpoint
            </summary>
        
| P:Z0.ITimeInterval.LeftInclusive                  | 
            <summary>
            Specifies whether the left endpoint is included in the interval
            </summary>
        
| P:Z0.ITimeInterval.RightInclusive                 | 
            <summary>
            Specifies whether the right endpoint is included in the interval
            </summary>
        
| P:Z0.ITimeInterval`1.Min                          | 
            <summary>
            The inclusive lower bound
            </summary>
        
| P:Z0.ITimeInterval`1.Max                          | 
            <summary>
            The inclusive upper bound
            </summary>
        
| T:Z0.TimeInterval`1                               | 
            <summary>
            Defines inclusive lower and upper bounds for a comparable set of values
            </summary>
            <typeparam name="T">The element type</typeparam>
        
| P:Z0.TimeInterval`1.Min                           | 
            <summary>
            The minimum value in the range
            </summary>
        
| P:Z0.TimeInterval`1.Max                           | 
            <summary>
            The maximum value in the range
            </summary>
        
| M:Z0.TimeInterval`1.In(`0)                        | 
            <summary>
            Tests whether a value is in the range
            </summary>
            <param name="candidate">The value to test</param>
        
| T:Z0.TimerTicks                                   | 
            <summary>
            Describes the relationship between hardware ticks and measured time
            </summary>
        
| M:Z0.TimerTicks.ms(System.Int64)                  | 
            <summary>
            Computes the number of milliseconds accounted for by a specified number of ticks
            </summary>
            <param name="ticks">The tick count</param>
        
| M:Z0.TimerTicks.ns(System.Int64)                  | 
            <summary>
            Computes the number of nanoseconds accounted for by a specified number of ticks
            </summary>
            <param name="ticks">The tick count</param>
        
| P:Z0.TimerTicks.NsPerTick                         | 
            <summary>
            The number of nanoseconds that elapse during a timer tick
            </summary>
        
| P:Z0.TimerTicks.TicksPerMs                        | 
            <summary>
            The number of ticks per second
            </summary>
        
| T:Z0.SystemCounters                               | 
            <summary>
            Defines counter api surface
            </summary>
        
| M:Z0.SystemCounters.CounterDelta(System.Int64@)   | 
            <summary>
            Returns the difference between the current Counter value and a prior counter value
            </summary>
        
| M:Z0.SystemCounters.CounterMs(System.Int64@)      | 
            <summary>
            Converts a counter value to milliseconds
            </summary>
            <param name="count">The count value to convert</param>
        
| P:Z0.SystemCounters.Counter                       | 
            <summary>
            Gets the current value of the counter
            </summary>
        
| P:Z0.SystemCounters.ThreadCpuCycles               | 
            <summary>
            Gets the CPU cycles consumed by the calling thread
            </summary>
        
| M:Z0.SystemCounters.QueryPerformanceFrequency(System.Int64@)| 
            <summary>
            Retrieves the number of performance counter counts per second.
            </summary>
            <remarks>This is determined by the OS at boot time and is invariant until the next reboot</remarks>
        
| M:Z0.SystemCounters.QueryThreadCycleTime(System.IntPtr,System.UInt64@)| 
            <summary>
            Retrieves the cyle time for a specified thread
            </summary>
            <param name="hThread">The handle to the thread</param>
            <param name="cycles">The number of cpu clock cycles used by the thread</param>
        
| M:Z0.SystemCounters.QueryProcessCycleTime(System.IntPtr,System.UInt64@)| 
            <summary>
            Retrieves the sum of the cycle time of all threads of the specified process.
            </summary>
            <param name="hProc">The handle to the process</param>
            <param name="cycles">The number of cpu clock cycles used by the threads of the process</param>
        
| M:Z0.TimeExtensions.ToLexicalString(System.DateTime,Z0.DateTimeAccuracy)| 
            <summary>
            Renders a string in a more rational manner than the default behavior
            </summary>
            <param name="t">The instant to render</param>
            <param name="accuracy">The accuracy with which to render the instant</param>
        
| M:Z0.TimeExtensions.IsDate(System.Type)           | 
            <summary>
            Determines whether a supplied type is either a Date or Nullable Date
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.TimeExtensions.ToDateKey(System.DateTime)    | 
            <summary>
            Creates an integer of the form YYYYMMDD corresponding to a supplied date
            </summary>
            <param name="d">The date whose integer representation will be determined</param>
        
| M:Z0.TimeExtensions.ToDateKey(System.Nullable{System.DateTime})| 
            <summary>
            Creates an integer of the form YYYYMMDD corresponding to a supplied date if the date 
            is not null and returns 0 otherwise
            </summary>
            <param name="d">The date whose integer representation will be determined</param>
        
| M:Z0.TimeExtensions.GetItemArray(System.Date)     | 
            <summary>
            Represents a date value as an array of integers
            </summary>
            <param name="x">The date to convert to an array</param>
        
| M:Z0.TimeExtensions.Yesterday(System.DateTime)    | 
            <summary>
            Returns the instant that is one day less than the specified instant
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.LastMonth(System.DateTime)    | 
            <summary>
            Returns the instant that is one day less than the specified instant
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.NextMonth(System.DateTime)    | 
            <summary>
            Returns the instant that is one day less than the specified instant
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.EndOfYear(System.Date)        | 
            <summary>
            The last day of the current year
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.Yesterday(System.Date)        | 
            <summary>
            Returns the instant that is one day less than the specified instant
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.Tomorrow(System.DateTime)     | 
            <summary>
            Returns the instant that is one day more than the specified instant
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.Tomorrow(System.Date)         | 
            <summary>
            Returns the instant that is one day more than the specified instant
            </summary>
            <param name="x">The reference data</param>
        
| M:Z0.TimeExtensions.EndOfDay(System.DateTime)     | 
            <summary>
            Gets the time at which the day ends
            </summary>
            <param name="d">The instant in time</param>
        
| M:Z0.TimeExtensions.StartOfDay(System.DateTime)   | 
            <summary>
            Gets the time at which the day begins
            </summary>
            <param name="d">The instant in time</param>
        
| M:Z0.TimeExtensions.ContiguousDatesTo(System.DateTime,System.DateTime)| 
            <summary>
            Creates a contiguous range of dates within a supplied range
            </summary>
            <param name="min">The first date in the range</param>
            <param name="max">The last date in the range</param>
        
| M:Z0.TimeExtensions.ContiguousDatesTo(System.Date,System.Date)| 
            <summary>
            Creates a contiguous range of dates within a supplied range
            </summary>
            <param name="min">The first date in the range</param>
            <param name="max">The last date in the range</param>
        
| M:Z0.TimeExtensions.IsSameDay(System.DateTime,System.DateTime)| 
            <summary>
            Determines whether the <see cref="T:System.DateTime" /> values occur on the same day
            </summary>
            <param name="d">One subject</param>
            <param name="other">The other subject</param>
        
| M:Z0.TimeExtensions.ToTimeKey(System.DateTime)    | 
            <summary>
            Returns the number of seconds elapsed since midnight
            </summary>
            <param name="d">The subject</param>
        
| M:Z0.TimeExtensions.ToTimeKey(System.Nullable{System.DateTime})| 
            <summary>
            Returns the number of seconds elapsed since midnight if date is not null, 0 otherwise
            </summary>
            <param name="d">The subject</param>
        
| M:Z0.TimeExtensions.ToDate(System.DateTime)       | 
            <summary>
            Returns the <see cref="T:System.Date" /> part of the supplied <see cref="T:System.DateTime" />
            </summary>
            <param name="d">The subject</param>
        
| M:Z0.TimeExtensions.ToLexicalDateString(System.DateTime)| 
            <summary>
            Renders a <see cref="T:System.DateTime" /> to the form YYYY-MM-DD
            </summary>
            <param name="t"></param>
        
| T:System.Date                                     | 
            <summary>
            Represents a whole date, having a year, month and day component.
            All values are in the proleptic Gregorian (ISO 8601) calendar system unless otherwise specified.
            </summary>
        
| M:System.Date.Between(System.Date,System.Date)    | 
            <summary>
            Defines a <see cref="T:Z0.DateRange" /> bounded below by <paramref name="MinDate" />
            and above by <paramref name="MaxDate" />
            </summary>
            <param name="MinDate">The range minimum</param>
            <param name="MaxDate">The range maximum</param>
        
| M:System.Date.ToLexicalString                     | 
            <summary>
            Renders a <see cref="T:System.Date" /> to the form YYYY-MM-DD
            </summary>
        
| F:System.Date.MinValue                            | 
            <summary>
            Represents the smallest possible value of <see cref="T:System.Date" />. This field is read-only.
            </summary>
        
| F:System.Date.MaxValue                            | 
            <summary>
            Represents the largest possible value of <see cref="T:System.Date" />. This field is read-only.
            </summary>
        
| M:System.Date.#ctor(System.Int32)                 | 
            <summary>
            Initializes a new instance of a <see cref="T:System.Date" /> structure to a specified number of days.
            </summary>
            <param name="dayNumber">The number of days since January 1, 0001 in the proleptic Gregorian calendar.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="dayNumber" /> is out of the range supported by the <see cref="T:System.Date" /> object.
            </exception>
        
| M:System.Date.#ctor(System.Int32,System.Int32,System.Int32)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.Date" /> structure to a specified year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year" /> is less than 1 or greater than 9999.
            <para>-or-</para>
            <paramref name="month" /> is less than 1 or greater than 12.
            <para>-or-</para>
            <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
            </exception>
        
| M:System.Date.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)| 
            <summary>
            Initializes a new instance of Date structure to a specified year, month, and day for the specified calendar.
            </summary>
            <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
            <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
            <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
            <param name="calendar">
            The calendar that is used to interpret <paramref name="year" />,
            <paramref name="month" />, and <paramref name="day" />.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.
            <para>-or-</para>
            <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.
            <para>-or-</para>
            <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.
            </exception>
        
| M:System.Date.#ctor(System.Int32,System.Int32)    | 
            <summary>
            Initializes a new instance of a <see cref="T:System.Date" /> structure to a specified year, and day of year.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="dayOfYear">The day of year (1 through the number of days in <paramref name="year" />).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year" /> is less than 1 or greater than 9999.
            <para>-or-</para>
            <paramref name="dayOfYear" /> is less than 1 or greater than the number of days in <paramref name="year" />.
            </exception>
            <remarks>
            Note that standard years have days numbered 1 through 365, while leap years have days numbered 1 through 366.
            </remarks>
        
| P:System.Date.Year                                | 
            <summary>
            Gets the year component of the date represented by this instance.
            </summary>
            <value>The year component, expressed as a value between 1 and 9999.</value>
        
| P:System.Date.Month                               | 
            <summary>
            Gets the month component of the date represented by this instance.
            </summary>
            <value>The month component, expressed as a value between 1 and 12.</value>
        
| P:System.Date.Day                                 | 
            <summary>
            Gets the day component of the date represented by this instance.
            </summary>
            <value>The day component, expressed as a value between 1 and 31.</value>
        
| P:System.Date.DayOfYear                           | 
            <summary>
            Gets the day of the year represented by this instance.
            </summary>
            <value>The day of the year, expressed as a value between 1 and 366.</value>
        
| P:System.Date.DayOfWeek                           | 
            <summary>
            Gets the day of the week represented by this instance.
            </summary>
            <value>An enumerated constant that indicates the day of the week of this <see cref="T:System.Date" /> value.</value>
        
| P:System.Date.DayNumber                           | 
            <summary>
            Gets the number of days since January 1, 0001 in the proleptic Gregorian calendar.
            </summary>
            <value>
            The number of days that represent the date of this instance.
            The value is between <c>Date.MinValue.DayNumber</c> and <c>Date.MaxValue.DayNumber</c>.
            </value>
        
| M:System.Date.At(System.TimeOfDay)                | 
            <summary>
            Creates a <see cref="T:System.DateTime" /> object from the current <see cref="T:System.Date" /> and the specified <see cref="T:System.TimeOfDay" />.
            The resulting value has a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <remarks>
            Since neither <see cref="T:System.Date" /> or <see cref="T:System.TimeOfDay" /> keep track of <see cref="T:System.DateTimeKind" />,
            recognize that the <see cref="T:System.DateTime" /> produced by <c>Date.Today.At(TimeOfDay.Now)</c> will have
            <see cref="F:System.DateTimeKind.Unspecified" />, rather than then <see cref="F:System.DateTimeKind.Local" /> that would be
            given by <c>DateTime.Now</c>.
            <para>The same applies for <see cref="F:System.DateTimeKind.Utc" />.</para>
            </remarks>
        
| M:System.Date.ToDateTimeAtMidnight                | 
            <summary>
            Creates a <see cref="T:System.DateTime" /> object from the current <see cref="T:System.Date" />, with the time set to midnight
            (00:00:00). The resulting value has a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <remarks>
            Note that midnight might be ambiguous or invalid in some time zones on DST transition days.
            Though this method is time zone ignorant, the resulting value should be considered suspect and used with
            caution.
            </remarks>
        
| M:System.Date.IsLeapYear(System.Int32)            | 
            <summary>
            Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="year">A 4-digit year.</param>
            <returns><c>true</c> if year is a leap year; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year" /> is less than 1 or greater than 9999.
            </exception>
        
| M:System.Date.DaysInMonth(System.Int32,System.Int32)| 
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <returns>
            The number of days in <paramref name="month" /> for the specified <paramref name="year" />.
            For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending
            upon whether <paramref name="year" /> is a leap year.
            </returns>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="month" /> is less than 1 or greater than 12.
            <para>-or-</para>
            <paramref name="year" /> is less than 1 or greater than 9999.
            </exception>
        
| M:System.Date.TodayInTimeZone(System.TimeZoneInfo)| 
            <summary>
            Gets a <see cref="T:System.Date" /> object that is set to the current date in the specified time zone.
            </summary>
            <param name="timeZoneInfo">The <see cref="T:System.TimeZoneInfo" /> instance.</param>
            <returns>The current <see cref="T:System.Date" /> for the specified time zone.</returns>
        
| P:System.Date.Today                               | 
            <summary>
            Gets a <see cref="T:System.Date" /> object that is set to the current date,
            expressed in this computer's local time zone.
            </summary>
            <value>An object whose value is the current local date.</value>
        
| P:System.Date.UtcToday                            | 
            <summary>
            Gets a <see cref="T:System.Date" /> object that is set to the current date,
            expressed as Coordinated Universal Time (UTC).
            </summary>
            <value>An object whose value is the current UTC date.</value>
        
| M:System.Date.AddYears(System.Int32)              | 
            <summary>
            Gets a <see cref="T:System.Date" /> object whose value is ahead or behind the value of this instance by the specified
            number of years. Positive values will move the date forward; negative values will move the date backwards.
            <para>
            If the original date is a leap day (February 29), and the resulting year is not a leap year, the resulting
            value will be adjusted to February 28.
            </para>
            </summary>
            <param name="years">The number of years to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.Date" /> object which is the result of adjusting this instance by the
            <paramref name="years" /> specified.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="years" /> or the resulting <see cref="T:System.Date" /> is less than <see cref="F:System.Date.MinValue" />
            or greater than <see cref="F:System.Date.MaxValue" />.
            </exception>
        
| M:System.Date.AddMonths(System.Int32)             | 
            <summary>
            Gets a <see cref="T:System.Date" /> object whose value is ahead or behind the value of this instance by the specified
            number of months. Positive values will move the date forward; negative values will move the date backwards.
            <para>
            Since the number of days in a months varies, the resulting date may not necessarily fall on the same
            day. If the resulting value would have landed on a day that doesn't exist within a month, the value is
            adjusted backward to the last day of the month.
            </para>
            </summary>
            <param name="months">The number of months to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.Date" /> object which is the result of adjusting this instance by the
            <paramref name="months" /> specified.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="months" /> or the resulting <see cref="T:System.Date" /> is less than <see cref="F:System.Date.MinValue" />
            or greater than <see cref="F:System.Date.MaxValue" />.
            </exception>
        
| M:System.Date.AddDays(System.Int32)               | 
            <summary>
            Gets a <see cref="T:System.Date" /> object whose value is ahead or behind the value of this instance by the specified
            number of days. Positive values will move the date forward; negative values will move the date backwards.
            </summary>
            <param name="days">The number of days to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.Date" /> object which is the result of adjusting this instance by the
            <paramref name="days" /> specified.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="days" /> or the resulting <see cref="T:System.Date" /> is less than <see cref="F:System.Date.MinValue" />
            or greater than <see cref="F:System.Date.MaxValue" />.
            </exception>
        
| M:System.Date.DaysUntil(System.Date)              | 
            <summary>
            Returns the number of days remaining from this date to the <paramref name="date" /> specified.
            If the <paramref name="date" /> has already passed, the result will be negative.
            </summary>
            <param name="date">The target <see cref="T:System.Date" /> value.</param>
            <returns>The integer number of days until the date specified.</returns>
            <remarks>
            This operation uses an exclusive upper bound.
            For example, if the current instance represents January 1st, there is one day until January 2nd.
            </remarks>
        
| M:System.Date.DaysSince(System.Date)              | 
            <summary>
            Returns the number of days elapsed from the <paramref name="date" /> specified to this date.
            If the <paramref name="date" /> has not yet passed, the result will be negative.
            </summary>
            <param name="date">The target <see cref="T:System.Date" /> value.</param>
            <returns>The integer number of days since the date specified.</returns>
            <remarks>
            This operation uses an exclusive upper bound.
            For example, if the current instance represents January 2nd, there has been one day since January 1st.
            </remarks>
        
| M:System.Date.MonthsUntil(System.Date)            | 
            <summary>
            Returns the number of whole months remaining from this date to the <paramref name="date" /> specified.
            If the <paramref name="date" /> has already passed, the result will be negative.
            </summary>
            <param name="date">The target <see cref="T:System.Date" /> value.</param>
            <returns>The integer number of whole months until the date specified.</returns>
            <remarks>
            This operation uses an exclusive upper bound.
            For example, if the current instance represents January 1st, there is one month until February 1st.
            </remarks>
        
| M:System.Date.MonthsSince(System.Date)            | 
            <summary>
            Returns the number of whole months elapsed from the <paramref name="date" /> specified to this date.
            If the <paramref name="date" /> has not yet passed, the result will be negative.
            </summary>
            <param name="date">The target <see cref="T:System.Date" /> value.</param>
            <returns>The integer number of whole months since the date specified.</returns>
            <remarks>
            This operation uses an exclusive upper bound.
            For example, if the current instance represents February 1st, there has been one month since January 1st.
            </remarks>
        
| M:System.Date.YearsUntil(System.Date)             | 
            <summary>
            Returns the number of whole years remaining from this date to the <paramref name="date" /> specified.
            If the <paramref name="date" /> has already passed, the result will be negative.
            </summary>
            <param name="date">The target <see cref="T:System.Date" /> value.</param>
            <returns>The integer number of whole years until the date specified.</returns>
            <remarks>
            This operation uses an exclusive upper bound.
            For example, if the current instance represents <c>2000-01-01</c>,
            there is one year until <c>2001-01-01</c>.
            </remarks>
        
| M:System.Date.YearsSince(System.Date)             | 
            <summary>
            Returns the number of whole years elapsed from the <paramref name="date" /> specified to this date.
            If the <paramref name="date" /> has not yet passed, the result will be negative.
            </summary>
            <param name="date">The target <see cref="T:System.Date" /> value.</param>
            <returns>The integer number of whole years since the date specified.</returns>
            <remarks>
            This operation uses an exclusive upper bound.
            For example, if the current instance represents <c>2001-01-01</c>,
            there has been one year since <c>2000-01-01</c>.
            </remarks>
        
| M:System.Date.IsBetween(System.Date,System.Date,System.Boolean)| 
            <summary>
            Determines if a date falls within the range provided.
            </summary>
            <param name="startDate">The starting date, inclusive.</param>
            <param name="endDate">
            The ending date, either inclusive or exclusive, depending on the value of
            <paramref name="exclusiveEndDate" />.
            </param>
            <param name="exclusiveEndDate">
            If true, then the <paramref name="endDate" /> is treated as exclusive.
            Otherwise, the <paramref name="endDate" /> is treated as inclusive.
            The default is <c>false</c> (inclusive).
            </param>
            <returns>True, if the date falls within the range, false otherwise.</returns>
            <remarks>
            Because a <see cref="T:System.Date" /> is intended to represent a whole calendar date,
            this operation is inclusive by default.  For example, January 7th would be
            considered to be included in the week of January 1st through January 7th.
            If you desire the end date to be excluded, then set the <paramref name="exclusiveEndDate" />
            parameter to <c>true</c>.
            </remarks>
        
| M:System.Date.Compare(System.Date,System.Date)    | 
            <summary>
            Compares two instances of <see cref="T:System.Date" /> and returns an integer that indicates whether the first
            instance is earlier than, the same as, or later than the second instance.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            A signed number indicating the relative values of <paramref name="left" /> and <paramref name="right" />.
            <list type="table">
            <listheader><term>Value</term><term>Description</term></listheader>
            <item>
              <term>Less than zero</term>
              <term><paramref name="left" /> is earlier than <paramref name="right" />.</term>
            </item>
            <item>
              <term>Zero</term>
              <term><paramref name="left" /> is the same as <paramref name="right" />.</term>
            </item>
            <item>
              <term>Greater than zero</term>
              <term><paramref name="left" /> is later than <paramref name="right" />.</term>
            </item>
            </list>
            </returns>
        
| M:System.Date.CompareTo(System.Date)              | 
            <summary>
            Compares the value of this instance to a specified <see cref="T:System.Date" /> value and returns an integer that
            indicates whether this instance is earlier than, the same as, or later than the specified
            <see cref="T:System.Date" /> value.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.
            <list type="table">
            <listheader><term>Value</term><term>Description</term></listheader>
            <item>
              <term>Less than zero</term>
              <term>This instance is earlier than <paramref name="value" />.</term>
            </item>
            <item>
              <term>Zero</term>
              <term>This instance is the same as <paramref name="value" />.</term>
            </item>
            <item>
              <term>Greater than zero</term>
              <term>This instance is later than <paramref name="value" />.</term>
            </item>
            </list>
            </returns>
        
| M:System.Date.CompareTo(System.Object)            | 
            <summary>
            Compares the value of this instance to a specified object that contains a <see cref="T:System.Date" /> value and
            returns an integer that indicates whether this instance is earlier than, the same as, or later than the
            specified <see cref="T:System.Date" /> value.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.
            <list type="table">
            <listheader><term>Value</term><term>Description</term></listheader>
            <item>
              <term>Less than zero</term>
              <term>This instance is earlier than <paramref name="value" />.</term>
            </item>
            <item>
              <term>Zero</term>
              <term>This instance is earlier than <paramref name="value" />.</term>
            </item>
            <item>
              <term>Greater than zero</term>
              <term>
                This instance is later than <paramref name="value" />,
                or <paramref name="value" /> is <c>null</c>.
              </term>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value" /> is not a <see cref="T:System.Date" />.
            </exception>
        
| M:System.Date.Equals(System.Date,System.Date)     | 
            <summary>
            Returns a value indicating whether two <see cref="T:System.Date" /> instances have the same date value.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><c>true</c> if the two values are equal; otherwise, <c>false</c>.</returns>
        
| M:System.Date.Equals(System.Date)                 | 
            <summary>
            Returns a value indicating whether the value of this instance is equal to the value of the specified
            <see cref="T:System.Date" /> instance.
            </summary>
            <param name="value">The other <see cref="T:System.Date" /> object to compare against this instance.</param>
            <returns>
            <c>true</c> if the <paramref name="value" /> parameter equals the value of this instance;
            otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.Equals(System.Object)               | 
            <summary>
            Returns a value indicating whether this instance is equal to the specified object.
            </summary>
            <param name="value">The object to compare to this instance.</param>
            <returns>
            <c>true</c> if <paramref name="value" /> is an instance of <see cref="T:System.Date" />
            and equals the value of this instance; otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.GetHashCode                         | 
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
            <remarks>
            The hash code of a <see cref="T:System.Date" /> object is the day number, which is the 
            number of days since January 1, 0001 in the proleptic Gregorian calendar.
            </remarks>
        
| M:System.Date.ToString                            | 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent string representation.
            </summary>
            <returns>A string representation of value of the current <see cref="T:System.Date" /> object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is outside the range of dates supported by the calendar used by the current culture.
            </exception>
        
| M:System.Date.ToString(System.IFormatProvider)    | 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.Date" /> object as specified by
            <paramref name="provider" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is outside the range of dates supported by the calendar used by <paramref name="provider" />.
            </exception>
        
| M:System.Date.ToString(System.String)             | 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent string representation
            using the specified format.
            </summary>
            <param name="format">A standard or custom date format string.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.Date" /> object as specified by
            <paramref name="format" />.
            </returns>
            <exception cref="T:System.FormatException">
            The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined
            for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
            <para>-or-</para>
            <paramref name="format" /> does not contain a valid custom format pattern.
            <para>-or-</para>
            The standard or custom format specified is not valid for a <see cref="T:System.Date" /> object, because it contains
            a time-of-day component.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is outside the range of dates supported by the calendar used by the current culture.
            </exception>
        
| M:System.Date.ToString(System.String,System.IFormatProvider)| 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.Date" /> object as specified by
            <paramref name="format" /> and <paramref name="provider" />.
            </returns>
            <exception cref="T:System.FormatException">
            The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined
            for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
            <para>-or-</para>
            <paramref name="format" /> does not contain a valid custom format pattern.
            <para>-or-</para>
            The standard or custom format specified is not valid for a <see cref="T:System.Date" /> object, because it contains
            a time-of-day component.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is outside the range of dates supported by the calendar used by <paramref name="provider" />.
            </exception>
        
| M:System.Date.ToLongDateString                    | 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent long date string
            representation.
            </summary>
            <returns>
            A string that contains the long date string representation of the current <see cref="T:System.Date" /> object.
            </returns>
            <remarks>
            The value of the current <see cref="T:System.Date" /> object is formatted using the pattern defined by the
            <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property associated with the current thread culture.
            </remarks>
        
| M:System.Date.ToShortDateString                   | 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent short date string
            representation.
            </summary>
            <returns>
            A string that contains the short date string representation of the current <see cref="T:System.Date" /> object.
            </returns>
            <remarks>
            The value of the current <see cref="T:System.Date" /> object is formatted using the pattern defined by the
            <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" /> property associated with the current thread culture.
            </remarks>
        
| M:System.Date.ToIsoString                         | 
            <summary>
            Converts the value of the current <see cref="T:System.Date" /> object to its equivalent ISO standard string
            representation (ISO-8601), which has the format: <c>yyyy-MM-dd</c>.
            </summary>
            <returns>
            A string that contains the ISO standard string representation of the current <see cref="T:System.Date" /> object.
            </returns>
            <remarks>
            Because the ISO-8601 standard uses the proleptic Gregorian calendar, this method always uses the calendar
            of the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />, despite the setting of the current culture.
            </remarks>
        
| M:System.Date.Parse(System.String)                | 
            <summary>
            Converts the string representation of a date to its <see cref="T:System.Date" /> equivalent.
            </summary>
            <param name="s">A string that contains a date to convert.</param>
            <returns>An object that is equivalent to the date contained in <paramref name="s" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> does not contain a valid string representation of a date.
            </exception>
        
| M:System.Date.Parse(System.String,System.IFormatProvider)| 
            <summary>
            Converts the string representation of a date to its <see cref="T:System.Date" /> equivalent
            by using culture-specific format information.
            </summary>
            <param name="s">A string that contains a date to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <returns>
            An object that is equivalent to the date contained in <paramref name="s" />,
            as specified by <paramref name="provider" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> does not contain a valid string representation of a date.
            </exception>
        
| M:System.Date.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)| 
            <summary>
            Converts the string representation of a date to its <see cref="T:System.Date" /> equivalent
            by using culture-specific format information and formatting style.
            </summary>
            <param name="s">A string that contains a date to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.Date" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <returns>
            An object that is equivalent to the date contained in <paramref name="s" />,
            as specified by <paramref name="provider" /> and <paramref name="styles" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> does not contain a valid string representation of a date.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.Date" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.Date.ParseExact(System.String,System.String,System.IFormatProvider)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            using the specified format and culture-specific format information.
            The format of the string representation must match the specified format exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a date to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <returns>
            An object that is equivalent to the date contained in <paramref name="s" />,
            as specified by <paramref name="format" /> and <paramref name="provider" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> or <paramref name="format" /> is an empty string.
            <para>-or-</para>
            <paramref name="s" /> does not contain a date that corresponds to the pattern specified in <paramref name="format" />.
            <para>-or-</para>
            <paramref name="format" /> contains a format pattern that is not applicable to a <see cref="T:System.Date" />.
            </exception>
        
| M:System.Date.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            using the specified format, culture-specific format information, and style.
            The format of the string representation must match the specified format exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a date to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.Date" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <returns>
            An object that is equivalent to the date contained in <paramref name="s" />,
            as specified by <paramref name="format" />, <paramref name="provider" /> and <paramref name="styles" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> or <paramref name="format" /> is an empty string.
            <para>-or-</para>
            <paramref name="s" /> does not contain a date that corresponds to the pattern specified in <paramref name="format" />.
            <para>-or-</para>
            <paramref name="format" /> contains a format pattern that is not applicable to a <see cref="T:System.Date" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.Date" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.Date.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            using the specified array of formats, culture-specific format information, and style.
            The format of the string representation must match at least one of the specified formats
            exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a date to convert.</param>
            <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.Date" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <returns>
            An object that is equivalent to the date contained in <paramref name="s" />,
            as specified by <paramref name="formats" />, <paramref name="provider" /> and <paramref name="styles" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> is an empty string.
            <para>-or-</para>
            An element of <paramref name="formats" /> is an empty string.
            <para>-or-</para>
            <paramref name="s" /> does not contain a date that corresponds to any element of <paramref name="formats" />.
            <para>-or-</para>
            An element of <paramref name="formats" /> contains a format pattern that is not applicable to a <see cref="T:System.Date" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.Date" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.Date.TryParse(System.String,System.Date@)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date to convert.</param>
            <param name="date">
            When this method returns, contains the <see cref="T:System.Date" /> value equivalent to the date
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.Date.MinValue" />
            if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is
            <c>null</c>, is an empty string (""), or does not contain a valid string representation of a date.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.Date@)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            using the specified culture-specific format information and formatting style,
            and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.Date" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="date">
            When this method returns, contains the <see cref="T:System.Date" /> value equivalent to the date
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.Date.MinValue" />
            if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is
            <c>null</c>, is an empty string (""), or does not contain a valid string representation of a date.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.Date" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.Date.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.Date@)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            using the specified format, culture-specific format information, and style.
            The format of the string representation must match the specified format exactly.
            The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.Date" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="date">
            When this method returns, contains the <see cref="T:System.Date" /> value equivalent to the date
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.Date.MinValue" />
            if the conversion failed. The conversion fails if either the <paramref name="s" /> or
            <paramref name="format" /> parameter is <c>null</c>, is an empty string (""), or does not
            contain a date that coresponds to the pattern specified in <paramref name="format" />.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.Date" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.Date.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.Date@)| 
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.Date" /> equivalent
            using the specified array of formats, culture-specific format information, and style.
            The format of the string representation must match at least one of the specified formats exactly.
            The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date to convert.</param>
            <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.Date" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="date">
            When this method returns, contains the <see cref="T:System.Date" /> value equivalent to the date
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.Date.MinValue" />
            if the conversion failed. The conversion fails if either the <paramref name="s" /> or
            <paramref name="formats" /> parameter is <c>null</c>, <paramref name="s" /> or an element of
            <paramref name="formats" /> is an empty string (""), or the format of <paramref name="s" /> is not
            exactly as specified by at least one of the format patterns in <paramref name="formats" />.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.Date" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.Date.op_Equality(System.Date,System.Date)| 
            <summary>
            Determines whether two specified instances of <see cref="T:System.Date" /> are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> and <paramref name="right" /> represent the same date;
            otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.op_Inequality(System.Date,System.Date)| 
            <summary>
            Determines whether two specified instances of <see cref="T:System.Date" /> are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> and <paramref name="right" /> do not represent the same date;
            otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.op_GreaterThan(System.Date,System.Date)| 
            <summary>
            Determines whether one specified <see cref="T:System.Date" /> is later than another specified <see cref="T:System.Date" />.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is later than <paramref name="right" />; otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.op_GreaterThanOrEqual(System.Date,System.Date)| 
            <summary>
            Determines whether one specified <see cref="T:System.Date" /> is equal to or later than another specified <see cref="T:System.Date" />.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is equal to or later than <paramref name="right" />; otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.op_LessThan(System.Date,System.Date)| 
            <summary>
            Determines whether one specified <see cref="T:System.Date" /> is earlier than another specified <see cref="T:System.Date" />.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is earlier than <paramref name="right" />; otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.op_LessThanOrEqual(System.Date,System.Date)| 
            <summary>
            Determines whether one specified <see cref="T:System.Date" /> is equal to or earlier than another specified <see cref="T:System.Date" />.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is equal to or earlier than <paramref name="right" />; otherwise, <c>false</c>.
            </returns>
        
| M:System.Date.op_Implicit(System.DateTime)~System.Date| 
            <summary>
            Implicitly casts a <see cref="T:System.DateTime" /> object to a <see cref="T:System.Date" /> by returning a new
            <see cref="T:System.Date" /> object that has the equivalent year, month, and day components.  This is useful when
            using APIs that express a calendar date as a <see cref="T:System.DateTime" /> and expect the consumer to ignore
            the time portion of the value.  This operator enables these values to be assigned to a variable having
            a <see cref="T:System.Date" /> type.
            </summary>
            <param name="dateTime">A <see cref="T:System.DateTime" /> value whose date portion will be used to construct a new
            <see cref="T:System.Date" /> object, and whose time portion will be ignored.</param>
            <returns>A newly constructed <see cref="T:System.Date" /> object with an equivalent date value.</returns>
            <remarks>
            Fundamentally, a date-only value and a date-time value are two different concepts.  In previous versions
            of the .NET framework, the <see cref="T:System.Date" /> type did not exist, and thus several date-only values were
            represented by using a <see cref="T:System.DateTime" /> with the time set to midnight (00:00:00).  For example, the
            <see cref="P:System.DateTime.Today" /> and <see cref="P:System.DateTime.Date" /> properties exhibit this behavior.
            This implicit cast operator allows those APIs to be naturally used with <see cref="T:System.Date" />.
            <para>
            Also note that when evaluated as a full date-time, the input <paramref name="dateTime" /> might not actually
            exist, since some time zones (ex: Brazil) will spring-forward directly from 23:59 to 01:00, skipping over
            midnight.  Using a <see cref="T:System.Date" /> object avoids this particular edge case, and several others.
            </para>
            </remarks>
        
| M:System.Date.op_Implicit(System.Date)~System.DateTime| 
            <summary>
            Implicitly casts a <see cref="T:System.Date" /> object to a <see cref="T:System.DateTime" /> by returning a new
            <see cref="T:System.DateTime" /> object that has the equivalent year, month, and day components, and has its time
            set to midnight (00:00:00).  This is useful when using APIs that express a calendar date as a
            <see cref="T:System.DateTime" /> and ignore the time portion of the value.  This operator enables <see cref="T:System.Date" />
            values to be passed to a method expecting a <see cref="T:System.DateTime" />.
            <para>
            Use with caution, as midnight may not necessarily be valid in every time zone on every day of the year.
            For example, when Brazil springs forward for daylight saving time, the clocks skip from 23:59:59 directly
            to 01:00:00.
            </para>
            </summary>
            <param name="date">A <see cref="T:System.Date" /> value whose date portion will be used to construct a new
            <see cref="T:System.DateTime" /> object.</param>
            <returns>
            A newly constructed <see cref="T:System.DateTime" /> object with an equivalent date value, and the time set
            to midnight (00:00:00).
            </returns>
            <remarks>
            Fundamentally, a date-only value and a date-time value are two different concepts.  In previous versions
            of the .NET framework, the <see cref="T:System.Date" /> type did not exist, and thus several date-only values were
            represented by using a <see cref="T:System.DateTime" /> with the time set to midnight (00:00:00).  For example, the
            <see cref="M:System.Globalization.Calendar.GetYear(System.DateTime)" /> method expects a <see cref="T:System.DateTime" />, even though it only uses the date
            component. This implicit cast operator allows those APIs to be naturally used with <see cref="T:System.Date" />.
            </remarks>
        
| M:System.Date.DateFromDateTime(System.DateTime)   | 
            <summary>
            Constructs a <see cref="T:System.Date" /> object from the date component of a <see cref="T:System.DateTime" />.
            </summary>
        
| M:System.Date.DateToDayNumber(System.Int32,System.Int32,System.Int32)| 
            <summary>
            Returns the day number count corresponding to the given year, month, and day.
            Will check the if the parameters are valid.
            </summary>
        
| M:System.Date.GetDatePart(System.Int32)           | 
            <summary>
            Returns a given date part of this DateTime. This method is used
            to compute the year, day-of-year, month, or day part.
            </summary>
        
| M:System.Date.NormalizeDateFormat(System.String)  | 
            <summary>
            Normalizes a format string that has standard or custom date/time formats,
            such that the formatted output can only contain a date when applied.
            </summary>
            <exception cref="T:System.FormatException">
            The format string contained a format specifier that is only applicable
            when a time-of-day would be part of the formatted output.
            </exception>
        
| M:System.Date.GetSchema(System.Object)            | 
            <summary>
            Gets a <see cref="T:System.Xml.XmlQualifiedName" /> that represents the <c>xs:date</c> type of the
            W3C XML Schema Definition (XSD) specification.
            </summary>
            <remarks>
            This is required to support the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> applied to this structure.
            </remarks>
        
| M:System.Date.System#Xml#Serialization#IXmlSerializable#GetSchema| 
            <summary>
            Required by the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface.
            </summary>
            <returns><c>null</c></returns>
        
| M:System.Date.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)| 
            <summary>
            Generates a <see cref="T:System.Date" /> object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
            <remarks>
            An <c>xs:date</c> uses the ISO-8601 extended date format. The equivalent .NET Framework format string
            is <c>yyyy-MM-dd</c>.  This method always uses the proleptic Gregorian calendar of the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />, regardless of the current culture setting.
            </remarks>
        
| M:System.Date.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)| 
            <summary>
            Converts a <see cref="T:System.Date" /> object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
            <remarks>
            An <c>xs:date</c> uses the ISO-8601 extended date format. The equivalent .NET Framework format string
            is <c>yyyy-MM-dd</c>.  This method always uses the proleptic Gregorian calendar of the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />, regardless of the current culture setting.
            </remarks>
        
| T:System.Meridiem                                 | 
            <summary>
            Provides an enumeration of AM or PM to support 12-hour clock values in the <see cref="T:System.TimeOfDay" /> type.
            </summary>
            <remarks>
            Though commonly used in English, these abbreviations derive from Latin.
            AM is an abbreviation for "Ante Meridiem", meaning "before mid-day".
            PM is an abbreviation for "Post Meridiem", meaning "after mid-day".
            </remarks>
        
| F:System.Meridiem.AM                              | 
            <summary>
            
            </summary>
        
| F:System.Meridiem.PM                              | 
            <summary>
            
            </summary>
        
| T:System.TimeOfDay                                | 
            <summary>
            Represents a time of day, as would be read from a clock, within the range 00:00:00 to 23:59:59.9999999
            Has properties for working with both 12-hour and 24-hour time values.
            </summary>
        
| F:System.TimeOfDay.MinValue                       | 
            <summary>
            Represents the smallest possible value of <see cref="T:System.TimeOfDay" />. This field is read-only.
            </summary>
        
| F:System.TimeOfDay.MaxValue                       | 
            <summary>
            Represents the largest possible value of <see cref="T:System.TimeOfDay" />. This field is read-only.
            </summary>
        
| M:System.TimeOfDay.#ctor(System.Int64)            | 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to a specified number of ticks.
            </summary>
            <param name="ticks">
            A time expressed in the number of 100-nanosecond intervals that have elapsed since midnight (00:00:00),
            without regard to daylight saving time transitions.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="ticks" /> is out of the range supported by the <see cref="T:System.TimeOfDay" /> object.
            </exception>
        
| M:System.TimeOfDay.#ctor(System.Int32,System.Int32)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to the specified
            hour and minute.
            </summary>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hour" /> is less than 0 or greater than 23.
            <para>-or-</para>
            <paramref name="minute" /> is less than 0 or greater than 59.
            </exception>
        
| M:System.TimeOfDay.#ctor(System.Int32,System.Int32,System.Meridiem)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to the specified
            hour, minute, and meridiem, using the hours of a 12-hour clock.
            </summary>
            <param name="hour">The hours (1 through 12).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="meridiem">The meridiem, either <see cref="F:System.Meridiem.AM" />,
            or <see cref="F:System.Meridiem.PM" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hour" /> is less than 1 or greater than 12.
            <para>-or-</para>
            <paramref name="minute" /> is less than 0 or greater than 59.
            </exception>
        
| M:System.TimeOfDay.#ctor(System.Int32,System.Int32,System.Int32)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to the specified
            hour, minute, and second, using the hours of a 24-hour clock.
            </summary>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hour" /> is less than 0 or greater than 23.
            <para>-or-</para>
            <paramref name="minute" /> is less than 0 or greater than 59.
            <para>-or-</para>
            <paramref name="second" /> is less than 0 or greater than 59.
            </exception>
        
| M:System.TimeOfDay.#ctor(System.Int32,System.Int32,System.Int32,System.Meridiem)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to the specified
            hour, minute, second, and meridiem, using the hours of a 12-hour clock.
            </summary>
            <param name="hour">The hours (1 through 12).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="meridiem">The meridiem, either <see cref="F:System.Meridiem.AM" />,
            or <see cref="F:System.Meridiem.PM" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hour" /> is less than 1 or greater than 12.
            <para>-or-</para>
            <paramref name="minute" /> is less than 0 or greater than 59.
            <para>-or-</para>
            <paramref name="second" /> is less than 0 or greater than 59.
            </exception>
        
| M:System.TimeOfDay.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to the specified
            hour, minute, second, and millisecond, using the hours of a 24-hour clock.
            </summary>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hour" /> is less than 0 or greater than 23.
            <para>-or-</para>
            <paramref name="minute" /> is less than 0 or greater than 59.
            <para>-or-</para>
            <paramref name="second" /> is less than 0 or greater than 59.
            <para>-or-</para>
            <paramref name="millisecond" /> is less than 0 or greater than 999.
            </exception>
        
| M:System.TimeOfDay.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Meridiem)| 
            <summary>
            Initializes a new instance of a <see cref="T:System.TimeOfDay" /> structure to the specified
            hour, minute, second, millisecond, and meridiem, using the hours of a 12-hour clock.
            </summary>
            <param name="hour">The hours (1 through 12).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="meridiem">The meridiem, either <see cref="F:System.Meridiem.AM" />,
            or <see cref="F:System.Meridiem.PM" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hour" /> is less than 1 or greater than 12.
            <para>-or-</para>
            <paramref name="minute" /> is less than 0 or greater than 59.
            <para>-or-</para>
            <paramref name="second" /> is less than 0 or greater than 59.
            <para>-or-</para>
            <paramref name="millisecond" /> is less than 0 or greater than 999.
            </exception>
        
| P:System.TimeOfDay.Hour                           | 
            <summary>
            Gets the hour component of the time represented by this instance, using the hours of a 24-hour clock.
            </summary>
            <value>The hour component, expressed as a value between 0 and 23.</value>
        
| P:System.TimeOfDay.HourOf12HourClock              | 
            <summary>
            Gets the hour component of the time represented by this instance, using the hours of a 12-hour clock.
            </summary>
            <value>The hour component, expressed as a value between 1 and 12.</value>
        
| P:System.TimeOfDay.Meridiem                       | 
            <summary>
            Gets the meridiem (AM or PM) of the time represented by this instance.
            The meridiem can be used inconjunction with the <see cref="P:System.TimeOfDay.HourOf12HourClock" /> property
            to represent this instance's time on a 12-hour clock.
            </summary>
            <value>An enumerated constant that indicates the meridiem of this <see cref="T:System.TimeOfDay" /> value.</value>
            <remarks>
            Though commonly used in English, these abbreviations derive from Latin.
            AM is an abbreviation for "Ante Meridiem", meaning "before mid-day".
            PM is an abbreviation for "Post Meridiem", meaning "after mid-day".
            </remarks>
        
| P:System.TimeOfDay.Minute                         | 
            <summary>
            Gets the minute component of the time represented by this instance.
            </summary>
            <value>The minute component, expressed as a value between 0 and 59.</value>
        
| P:System.TimeOfDay.Second                         | 
            <summary>
            Gets the second component of the time represented by this instance.
            </summary>
            <value>The second component, expressed as a value between 0 and 59.</value>
        
| P:System.TimeOfDay.Millisecond                    | 
            <summary>
            Gets the millisecond component of the time represented by this instance.
            </summary>
            <value>The millisecond component, expressed as a value between 0 and 999.</value>
        
| P:System.TimeOfDay.Ticks                          | 
            <summary>
            Gets the number of ticks that represent the time of this instance.
            </summary>
            <value>
            The number of ticks that represent the time of this instance.
            The value is between <c>TimeOfDay.MinValue.Ticks</c> and <c>TimeOfDay.MaxValue.Ticks</c>.
            </value>
            <remarks>
            Each tick is a 100-nanosecond interval.  Collectively, they represent the time that has
            elapsed since midnight (00:00:00), without regard to daylight saving time transitions.
            </remarks>
        
| M:System.TimeOfDay.On(System.Date)                | 
            <summary>
            Creates a <see cref="T:System.DateTime" /> object from the current <see cref="T:System.TimeOfDay" /> and the specified <see cref="T:System.Date" />.
            The resulting value has a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <remarks>
            Since neither <see cref="T:System.Date" /> or <see cref="T:System.TimeOfDay" /> keep track of <see cref="T:System.DateTimeKind" />,
            recognize that the <see cref="T:System.DateTime" /> produced by <c>TimeOfDay.Now.On(Date.Today)</c> will have
            <see cref="F:System.DateTimeKind.Unspecified" />, rather than then <see cref="F:System.DateTimeKind.Local" /> that would be
            given by <c>DateTime.Now</c>.
            <para>The same applies for <see cref="F:System.DateTimeKind.Utc" />.</para>
            </remarks>
        
| M:System.TimeOfDay.NowInTimeZone(System.TimeZoneInfo)| 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object that is set to the current time in the specified time zone.
            </summary>
            <param name="timeZoneInfo">The <see cref="T:System.TimeZoneInfo" /> instance.</param>
            <returns>The current <see cref="T:System.TimeOfDay" /> for the specified time zone.</returns>
        
| P:System.TimeOfDay.Now                            | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object that is set to the current time,
            expressed in this computer's local time zone.
            </summary>
            <value>An object whose value is the current local time.</value>
        
| P:System.TimeOfDay.UtcNow                         | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object that is set to the current time,
            expressed as Coordinated Universal Time (UTC).
            </summary>
            <value>An object whose value is the current UTC time.</value>
        
| M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines if a time falls within the range provided.
            Supports both "normal" ranges such as 10:00-12:00, and ranges that span midnight such as 23:00-01:00.
            </summary>
            <param name="startTime">The starting time of day, inclusive.</param>
            <param name="endTime">The ending time of day, exclusive.</param>
            <returns>True, if the time falls within the range, false otherwise.</returns>
        
| M:System.TimeOfDay.CalculateDuration(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Calculates the duration between two time values.
            Assumes a standard day, with no invalid or ambiguous times due to Daylight Saving Time.
            Supports both "normal" ranges such as 10:00-12:00, and ranges that span midnight such as 23:00-01:00.
            Unlike <see cref="M:System.TimeOfDay.Subtract(System.TimeOfDay)" />, this operation does not assume that both values
            belong to the same calendar date.  If <paramref name="startTime" /> is greater than
            <paramref name="endTime" />, it behaves as if <paramref mame="endTime" /> were on the day following
            the <paramref name="startTime" /> date.
            </summary>
            <param name="startTime">The starting time of day, inclusive.</param>
            <param name="endTime">The ending time of day, exclusive.</param>
            <returns>A <see cref="T:System.TimeSpan" /> representing the duration between the two values.</returns>
        
| M:System.TimeOfDay.Subtract(System.TimeOfDay)     | 
            <summary>
            Subtracts another <see cref="T:System.TimeOfDay" /> value from this instance, returning a <see cref="T:System.TimeSpan" />.
            Assumes a standard day, with no invalid or ambiguous times due to Daylight Saving Time.
            This operation assumes that both values belong to the same calendar date, and thus the result will
            be negative if <paramref name="startTime" /> is greater than this instance.
            </summary>
            <param name="startTime">The starting time of day, inclusive.</param>
            <returns>
            A <see cref="T:System.TimeSpan" /> representing the duration between the <paramref name="startTime" />
            (inclusive), and this instance (exclusive).
            </returns>
        
| M:System.TimeOfDay.Add(System.TimeSpan)           | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified amount of time. Positive values will move the time forward; negative values will move the
            time backwards.
            </summary>
            <param name="timeSpan">The amount of time to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="timeSpan" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:00 plus two hours is 01:00.
            </remarks>
        
| M:System.TimeOfDay.AddHours(System.Double)        | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified number of hours. Positive values will move the time forward; negative values will move the
            time backwards.
            </summary>
            <param name="hours">The number of hours to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="hours" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:00 plus one hour is 00:00.
            </remarks>
        
| M:System.TimeOfDay.AddMinutes(System.Double)      | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified number of minutes. Positive values will move the time forward; negative values will move the
            time backwards.
            </summary>
            <param name="minutes">The number of minutes to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="minutes" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:59 plus one minute is 00:00.
            </remarks>
        
| M:System.TimeOfDay.AddSeconds(System.Double)      | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified number of seconds. Positive values will move the time forward; negative values will move the
            time backwards.
            </summary>
            <param name="seconds">The number of seconds to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="seconds" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:59:59 plus one second is 00:00:00.
            </remarks>
        
| M:System.TimeOfDay.AddMilliseconds(System.Double) | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified number of milliseconds. Positive values will move the time forward; negative values will move the
            time backwards.
            </summary>
            <param name="milliseconds">
            The number of milliseconds to adjust by. The value can be negative or positive.
            </param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="milliseconds" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:59:59.9990000 plus one millisecond is 00:00:00.0000000.
            </remarks>
        
| M:System.TimeOfDay.AddTicks(System.Int64)         | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified number of ticks. Positive values will move the time forward; negative values will move the
            time backwards.
            </summary>
            <param name="ticks">
            The number of ticks to adjust by. The value can be negative or positive.
            A tick is a unit of time equal to 100 nanoseconds.
            </param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="ticks" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:59:59.9999999 plus one tick is 00:00:00.0000000.
            </remarks>
        
| M:System.TimeOfDay.Subtract(System.TimeSpan)      | 
            <summary>
            Gets a <see cref="T:System.TimeOfDay" /> object whose value is ahead or behind the value of this instance by the
            specified amount of time. Positive values will move the time backwards; negative values will move the
            time forward.  This is equivalent to calling <c>Add(timeSpan.Negate())</c>.
            </summary>
            <param name="timeSpan">The amount of time to adjust by. The value can be negative or positive.</param>
            <returns>
            A new <see cref="T:System.TimeOfDay" /> object which is the result of adjusting this instance by the
            <paramref name="timeSpan" /> specified.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries backwards
            into the previous day.  For example, 01:00 minus two hours is 23:00.
            </remarks>
        
| M:System.TimeOfDay.op_Addition(System.TimeOfDay,System.TimeSpan)| 
            <summary>
            Adds a specified time interval to a specified time, yielding a new time.
            </summary>
            <param name="timeOfDay">The time of day value to add to.</param>
            <param name="timeSpan">The time interval to add.</param>
            <returns>
            A <see cref="T:System.TimeOfDay" /> object which is the result of adding the <paramref name="timeSpan" />
            specified to the <paramref name="timeOfDay" /> provided.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries forward
            into the next day.  For example, 23:00 plus two hours is 01:00.
            </remarks>
        
| M:System.TimeOfDay.op_Subtraction(System.TimeOfDay,System.TimeSpan)| 
            <summary>
            Subtracts a specified time interval to a specified time, yielding a new time.
            </summary>
            <param name="timeOfDay">The time of day value to subtract from.</param>
            <param name="timeSpan">The time interval to subtract.</param>
            <returns>
            A <see cref="T:System.TimeOfDay" /> object which is the result of subtracting the <paramref name="timeSpan" />
            specified from the <paramref name="timeOfDay" /> provided.
            </returns>
            <remarks>
            The time is modeled on a circular 24-hour clock.  When a value crosses midnight, it carries backwards
            into the previous day.  For example, 01:00 minus two hours is 23:00.
            </remarks>
        
| M:System.TimeOfDay.op_Subtraction(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Calculates the duration between the <paramref name="startTime" /> and <paramref name="endTime" />.
            Assumes a standard day, with no invalid or ambiguous times due to Daylight Saving Time.
            Supports both "normal" ranges such as 10:00-12:00, and ranges that span midnight such as 23:00-01:00.
            This operation assumes that both values belong to the same calendar date, and thus the result will
            be negative if <paramref name="startTime" /> is greater than <paramref name="endTime" />.
            </summary>
            <param name="startTime">The starting time of day, inclusive.</param>
            <param name="endTime">The ending time of day, exclusive.</param>
            <returns>
            A <see cref="T:System.TimeSpan" /> representing the duration between the two time of day values.
            </returns>
        
| M:System.TimeOfDay.Compare(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Compares two instances of <see cref="T:System.TimeOfDay" /> and returns an integer that indicates whether the first
            instance is earlier than, the same as, or later than the second instance, within the same day.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            A signed number indicating the relative values of <paramref name="left" /> and <paramref name="right" />.
            <list type="table">
            <listheader><term>Value</term><term>Description</term></listheader>
            <item>
              <term>Less than zero</term>
              <term><paramref name="left" /> is earlier than <paramref name="right" />.</term>
            </item>
            <item>
              <term>Zero</term>
              <term><paramref name="left" /> is the same as <paramref name="right" />.</term>
            </item>
            <item>
              <term>Greater than zero</term>
              <term><paramref name="left" /> is later than <paramref name="right" />.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
        
| M:System.TimeOfDay.CompareTo(System.TimeOfDay)    | 
            <summary>
            Compares the value of this instance to a specified <see cref="T:System.TimeOfDay" /> value and returns an integer
            that indicates whether this instance is earlier than, the same as, or later than the specified
            <see cref="T:System.TimeOfDay" /> value, within the same day.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.
            <list type="table">
            <listheader><term>Value</term><term>Description</term></listheader>
            <item>
              <term>Less than zero</term>
              <term>This instance is earlier than <paramref name="value" />.</term>
            </item>
            <item>
              <term>Zero</term>
              <term>This instance is the same as <paramref name="value" />.</term>
            </item>
            <item>
              <term>Greater than zero</term>
              <term>This instance is later than <paramref name="value" />.</term>
            </item>
            </list>
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
        
| M:System.TimeOfDay.CompareTo(System.Object)       | 
            <summary>
            Compares the value of this instance to a specified object that contains a <see cref="T:System.TimeOfDay" /> value and
            returns an integer that indicates whether this instance is earlier than, the same as, or later than the
            specified <see cref="T:System.TimeOfDay" /> value, within the same day.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.
            <list type="table">
            <listheader><term>Value</term><term>Description</term></listheader>
            <item>
              <term>Less than zero</term>
              <term>This instance is earlier than <paramref name="value" />.</term>
            </item>
            <item>
              <term>Zero</term>
              <term>This instance is earlier than <paramref name="value" />.</term>
            </item>
            <item>
              <term>Greater than zero</term>
              <term>
                This instance is later than <paramref name="value" />,
                or <paramref name="value" /> is <c>null</c>.
              </term>
            </item>
            </list>
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="value" /> is not a <see cref="T:System.TimeOfDay" />.
            </exception>
        
| M:System.TimeOfDay.Equals(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Returns a value indicating whether two <see cref="T:System.TimeOfDay" /> instances have the same time value.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><c>true</c> if the two values are equal; otherwise, <c>false</c>.</returns>
        
| M:System.TimeOfDay.Equals(System.TimeOfDay)       | 
            <summary>
            Returns a value indicating whether the value of this instance is equal to the value of the specified
            <see cref="T:System.TimeOfDay" /> instance.
            </summary>
            <param name="value">The other <see cref="T:System.TimeOfDay" /> object to compare against this instance.</param>
            <returns>
            <c>true</c> if the <paramref name="value" /> parameter equals the value of this instance;
            otherwise, <c>false</c>.
            </returns>
        
| M:System.TimeOfDay.Equals(System.Object)          | 
            <summary>
            Returns a value indicating whether this instance is equal to the specified object.
            </summary>
            <param name="value">The object to compare to this instance.</param>
            <returns>
            <c>true</c> if <paramref name="value" /> is an instance of <see cref="T:System.TimeOfDay" />
            and equals the value of this instance; otherwise, <c>false</c>.
            </returns>
        
| M:System.TimeOfDay.GetHashCode                    | 
            <summary>
            Returns the hash code of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
            <remarks>
            The hash code of a <see cref="T:System.TimeOfDay" /> object is the same as the hash code of
            its <see cref="P:System.TimeOfDay.Ticks" /> value.
            </remarks>
        
| M:System.TimeOfDay.ToString                       | 
            <summary>
            Converts the value of the current <see cref="T:System.TimeOfDay" /> object to its equivalent string representation.
            </summary>
            <returns>A string representation of value of the current <see cref="T:System.TimeOfDay" /> object.</returns>
        
| M:System.TimeOfDay.ToString(System.IFormatProvider)| 
            <summary>
            Converts the value of the current <see cref="T:System.TimeOfDay" /> object to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.TimeOfDay" /> object as specified by
            <paramref name="provider" />.
            </returns>
        
| M:System.TimeOfDay.ToString(System.String)        | 
            <summary>
            Converts the value of the current <see cref="T:System.TimeOfDay" /> object to its equivalent string representation
            using the specified format.
            </summary>
            <param name="format">A standard or custom time-of-day format string.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.TimeOfDay" /> object as specified by
            <paramref name="format" />.
            </returns>
            <exception cref="T:System.FormatException">
            The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined
            for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
            <para>-or-</para>
            <paramref name="format" /> does not contain a valid custom format pattern.
            <para>-or-</para>
            The standard or custom format specified is not valid for a <see cref="T:System.TimeOfDay" /> object, because it
            contains a date component.
            </exception>
        
| M:System.TimeOfDay.ToString(System.String,System.IFormatProvider)| 
            <summary>
            Converts the value of the current <see cref="T:System.TimeOfDay" /> object to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom time-of-day format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of the current <see cref="T:System.TimeOfDay" /> object as specified by
            <paramref name="format" /> and <paramref name="provider" />.
            </returns>
            <exception cref="T:System.FormatException">
            The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined
            for <see cref="T:System.Globalization.DateTimeFormatInfo" />.
            <para>-or-</para>
            <paramref name="format" /> does not contain a valid custom format pattern.
            <para>-or-</para>
            The standard or custom format specified is not valid for a <see cref="T:System.TimeOfDay" /> object, because it
            contains a date component.
            </exception>
        
| M:System.TimeOfDay.ToLongTimeString               | 
            <summary>
            Converts the value of the current <see cref="T:System.TimeOfDay" /> object to its equivalent
            long time string representation.
            </summary>
            <returns>A string that contains the long time string representation of the
            current <see cref="T:System.TimeOfDay" /> object.</returns>
            <remarks>The value of the current <see cref="T:System.TimeOfDay" /> object is formatted
            using the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
            property associated with the current thread culture.</remarks>
        
| M:System.TimeOfDay.ToShortTimeString              | 
            <summary>
            Converts the value of the current <see cref="T:System.TimeOfDay" /> object to its equivalent
            short time string representation.
            </summary>
            <returns>A string that contains the short time string representation of the
            current <see cref="T:System.TimeOfDay" /> object.</returns>
            <remarks>The value of the current <see cref="T:System.TimeOfDay" /> object is formatted
            using the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
            property associated with the current thread culture.</remarks>
        
| M:System.TimeOfDay.Parse(System.String)           | 
            <summary>
            Converts the string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent.
            </summary>
            <param name="s">A string that contains a time-of-day to convert.</param>
            <returns>An object that is equivalent to the time-of-day contained in <paramref name="s" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> does not contain a valid string representation of a time-of-day.
            </exception>
        
| M:System.TimeOfDay.Parse(System.String,System.IFormatProvider)| 
            <summary>
            Converts the string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            by using culture-specific format information.
            </summary>
            <param name="s">A string that contains a time-of-day to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <returns>
            An object that is equivalent to the time-of-day contained in <paramref name="s" />,
            as specified by <paramref name="provider" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> does not contain a valid string representation of a time-of-day.
            </exception>
        
| M:System.TimeOfDay.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)| 
            <summary>
            Converts the string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            by using culture-specific format information and formatting style.
            </summary>
            <param name="s">A string that contains a time-of-day to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.TimeOfDay" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <returns>
            An object that is equivalent to the time-of-day contained in <paramref name="s" />,
            as specified by <paramref name="provider" /> and <paramref name="styles" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> does not contain a valid string representation of a time-of-day.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.TimeOfDay" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.TimeOfDay.ParseExact(System.String,System.String,System.IFormatProvider)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            using the specified format and culture-specific format information.
            The format of the string representation must match the specified format exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a time-of-day to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <returns>
            An object that is equivalent to the time-of-day contained in <paramref name="s" />,
            as specified by <paramref name="format" /> and <paramref name="provider" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> or <paramref name="format" /> is an empty string.
            <para>-or-</para>
            <paramref name="s" /> does not contain a time-of-day that corresponds to the pattern specified in
            <paramref name="format" />.
            <para>-or-</para>
            <paramref name="format" /> contains a format pattern that is not applicable to a <see cref="T:System.TimeOfDay" />.
            </exception>
        
| M:System.TimeOfDay.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            using the specified format, culture-specific format information, and style.
            The format of the string representation must match the specified format exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a time-of-day to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.TimeOfDay" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <returns>
            An object that is equivalent to the time-of-day contained in <paramref name="s" />,
            as specified by <paramref name="format" />, <paramref name="provider" /> and <paramref name="styles" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> or <paramref name="format" /> is an empty string.
            <para>-or-</para>
            <paramref name="s" /> does not contain a time-of-day that corresponds to the pattern specified in
            <paramref name="format" />.
            <para>-or-</para>
            <paramref name="format" /> contains a format pattern that is not applicable to a <see cref="T:System.TimeOfDay" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.TimeOfDay" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.TimeOfDay.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            using the specified array of formats, culture-specific format information, and style.
            The format of the string representation must match at least one of the specified formats
            exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a time-of-day to convert.</param>
            <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.TimeOfDay" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <returns>
            An object that is equivalent to the time-of-day contained in <paramref name="s" />,
            as specified by <paramref name="formats" />, <paramref name="provider" /> and <paramref name="styles" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="s" /> is an empty string.
            <para>-or-</para>
            An element of <paramref name="formats" /> is an empty string.
            <para>-or-</para>
            <paramref name="s" /> does not contain a time-of-day that corresponds to any element of
            <paramref name="formats" />.
            <para>-or-</para>
            An element of <paramref name="formats" /> contains a format pattern that is not applicable to a
            <see cref="T:System.TimeOfDay" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.TimeOfDay" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.TimeOfDay.TryParse(System.String,System.TimeOfDay@)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a time-of-day to convert.</param>
            <param name="timeOfDay">
            When this method returns, contains the <see cref="T:System.TimeOfDay" /> value equivalent to the time-of-day
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.TimeOfDay.MinValue" />
            if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is
            <c>null</c>, is an empty string (""), or does not contain a valid string representation of a time-of-day.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
        
| M:System.TimeOfDay.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.TimeOfDay@)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            using the specified culture-specific format information and formatting style,
            and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a time-of-day to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.TimeOfDay" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="timeOfDay">
            When this method returns, contains the <see cref="T:System.TimeOfDay" /> value equivalent to the time-of-day
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.TimeOfDay.MinValue" />
            if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is
            <c>null</c>, is an empty string (""), or does not contain a valid string representation of a time-of-day.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.TimeOfDay" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.TimeOfDay.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.TimeOfDay@)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            using the specified format, culture-specific format information, and style.
            The format of the string representation must match the specified format exactly.
            The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a time-of-day to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.TimeOfDay" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="timeOfDay">
            When this method returns, contains the <see cref="T:System.TimeOfDay" /> value equivalent to the time-of-day
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.TimeOfDay.MinValue" />
            if the conversion failed. The conversion fails if either the <paramref name="s" /> or
            <paramref name="format" /> parameter is <c>null</c>, is an empty string (""), or does not
            contain a time-of-day that coresponds to the pattern specified in <paramref name="format" />.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.TimeOfDay" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.TimeOfDay.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.TimeOfDay@)| 
            <summary>
            Converts the specified string representation of a time-of-day to its <see cref="T:System.TimeOfDay" /> equivalent
            using the specified array of formats, culture-specific format information, and style.
            The format of the string representation must match at least one of the specified formats exactly.
            The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a time-of-day to convert.</param>
            <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s" />.
            </param>
            <param name="styles">
            A bitwise combination of the enumeration values that indicates the style elements that
            can be present in <paramref name="s" /> for the parse operation to succeed.
            Note that only styles related to whitespace handling are applicable on a <see cref="T:System.TimeOfDay" />.
            A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="timeOfDay">
            When this method returns, contains the <see cref="T:System.TimeOfDay" /> value equivalent to the time-of-day
            contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.TimeOfDay.MinValue" />
            if the conversion failed. The conversion fails if either the <paramref name="s" /> or
            <paramref name="formats" /> parameter is <c>null</c>, <paramref name="s" /> or an element of
            <paramref name="formats" /> is an empty string (""), or the format of <paramref name="s" /> is not
            exactly as specified by at least one of the format patterns in <paramref name="formats" />.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the <paramref name="s" /> parameter was converted successfully; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles" /> styles contains an invalid <see cref="T:System.Globalization.DateTimeStyles" /> values.
            The only styles that are valid for a <see cref="T:System.TimeOfDay" /> are:
            <see cref="F:System.Globalization.DateTimeStyles.None" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />,
            <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />, and
            <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />.  The other styles are invalid because they only apply
            when both a date and time are being parsed together.
            </exception>
        
| M:System.TimeOfDay.op_Equality(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines whether two specified instances of <see cref="T:System.TimeOfDay" /> are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> and <paramref name="right" /> represent the same time of day;
            otherwise, <c>false</c>.
            </returns>
        
| M:System.TimeOfDay.op_Inequality(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines whether two specified instances of <see cref="T:System.TimeOfDay" /> are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> and <paramref name="right" /> do not represent the same time of day;
            otherwise, <c>false</c>.
            </returns>
        
| M:System.TimeOfDay.op_GreaterThan(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines whether one specified <see cref="T:System.TimeOfDay" /> is later than another specified
            <see cref="T:System.TimeOfDay" />, within the same day.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is later than <paramref name="right" /> within the same day;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
        
| M:System.TimeOfDay.op_GreaterThanOrEqual(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines whether one specified <see cref="T:System.TimeOfDay" /> is equal to or later than another specified
            <see cref="T:System.TimeOfDay" />, within the same day.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is equal to or later than <paramref name="right" /> within the same day;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
        
| M:System.TimeOfDay.op_LessThan(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines whether one specified <see cref="T:System.TimeOfDay" /> is earlier than another specified
            <see cref="T:System.TimeOfDay" />, within the same day.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is earlier than <paramref name="right" /> within the same day;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
        
| M:System.TimeOfDay.op_LessThanOrEqual(System.TimeOfDay,System.TimeOfDay)| 
            <summary>
            Determines whether one specified <see cref="T:System.TimeOfDay" /> is equal to or earlier than another specified
            <see cref="T:System.TimeOfDay" />, within the same day.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is equal to or earlier than <paramref name="right" /> within the same day;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            This operation considers all time values to be contained within the same day.  If you need to compare
            time values that cross midnight into a different day, use the <see cref="M:System.TimeOfDay.IsBetween(System.TimeOfDay,System.TimeOfDay)" /> method instead.
            </remarks>
        
| M:System.TimeOfDay.op_Implicit(System.TimeSpan)~System.TimeOfDay| 
            <summary>
            Implicitly casts a <see cref="T:System.TimeSpan" /> object to a <see cref="T:System.TimeOfDay" /> by returning a new
            <see cref="T:System.TimeOfDay" /> object that has the equivalent hours, minutes, seconds, and fractional seconds
            components.  This is useful when using APIs that express a time-of-day as the elapsed time since
            midnight, such that their values can be assigned to a variable having a <see cref="T:System.TimeOfDay" /> type.
            </summary>
            <param name="timeSpan">A <see cref="T:System.TimeSpan" /> value representing the time elapsed since midnight,
            without regard to daylight saving time transitions.</param>
            <returns>A newly constructed <see cref="T:System.TimeOfDay" /> object with an equivalent value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeSpan" /> is either negative, or greater than <c>23:59:59.9999999</c>, and thus cannot be
            mapped to a <see cref="T:System.TimeOfDay" />.
            </exception>
            <remarks>
            Fundamentally, a time-of-day and an elapsed-time are two different concepts.  In previous versions
            of the .NET framework, the <see cref="T:System.TimeOfDay" /> type did not exist, and thus several time-of-day
            values were represented by <see cref="T:System.TimeSpan" /> values erroneously.  For example, the
            <see cref="P:System.DateTime.TimeOfDay" /> property returns a value having a <see cref="T:System.TimeSpan" /> type.
            This implicit cast operator allows those APIs to be naturally used with <see cref="T:System.TimeOfDay" />.
            <para>
            Also note that the input <paramref name="timeSpan" /> might actually *not* accurately represent the
            "time elapsed since midnight" on days containing a daylight saving time transition.
            </para>
            </remarks>
        
| M:System.TimeOfDay.op_Explicit(System.TimeOfDay)~System.TimeSpan| 
            <summary>
            Enables explicit casting of a <see cref="T:System.TimeOfDay" /> object to a <see cref="T:System.TimeSpan" /> by returning a new
            <see cref="T:System.TimeSpan" /> object that has the equivalent hours, minutes, seconds, and fractional seconds
            components.  This is useful when using APIs that express a time-of-day as the elapsed time since
            midnight, such that a <see cref="T:System.TimeOfDay" /> type can be passed to a method expecting a
            <see cref="T:System.TimeSpan" /> parameter as a time-of-day.
            </summary>
            <param name="timeOfDay">A <see cref="T:System.TimeOfDay" /> value.</param>
            <returns>
            A newly constructed <see cref="T:System.TimeSpan" /> object representing the time elapsed since midnight, without
            regard to daylight saving time transitions.
            </returns>
        
| M:System.TimeOfDay.Hours12To24(System.Int32,System.Meridiem)| 
            <summary>
            Converts the time from a 12-hour-clock representation to a 24-hour-clock representation.
            </summary>
        
| M:System.TimeOfDay.TimeOfDayFromTimeSpan(System.TimeSpan)| 
            <summary>
            Constructs a <see cref="T:System.TimeOfDay" /> from a <see cref="T:System.TimeSpan" /> representing the time elapsed since
            midnight, without regard to daylight saving time transitions.
            </summary>
        
| M:System.TimeOfDay.NormalizeTimeFormat(System.String)| 
            <summary>
            Normalizes a format string that has standard or custom date/time formats,
            such that the formatted output can only contain a time-of-day when applied.
            </summary>
            <exception cref="T:System.FormatException">
            The format string contained a format specifier that is only applicable
            when a date would be part of the formatted output.
            </exception>
        
| M:System.TimeOfDay.GetSchema(System.Object)       | 
            <summary>
            Gets a <see cref="T:System.Xml.XmlQualifiedName" /> that represents the <c>xs:time</c> type of the
            W3C XML Schema Definition (XSD) specification.
            </summary>
            <remarks>
            This is required to support the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> applied to this structure.
            </remarks>
        
| M:System.TimeOfDay.System#Xml#Serialization#IXmlSerializable#GetSchema| 
            <summary>
            Required by the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface.
            </summary>
            <returns><c>null</c></returns>
        
| M:System.TimeOfDay.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)| 
            <summary>
            Generates a <see cref="T:System.TimeOfDay" /> object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
            <remarks>
            An <c>xs:time</c> uses the ISO-8601 extended time format, with up to seven decimal places of fractional
            seconds.  The equivalent .NET Framework format string is <c>HH:mm:ss.FFFFFFF</c>.
            </remarks>
        
| M:System.TimeOfDay.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)| 
            <summary>
            Converts a <see cref="T:System.TimeOfDay" /> object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
            <remarks>
            An <c>xs:time</c> uses the ISO-8601 extended time format, with up to seven decimal places of fractional
            seconds.  The equivalent .NET Framework format string is <c>HH:mm:ss.FFFFFFF</c>.
            </remarks>
        
| T:System.TimeZoneOffsetResolver                   | 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| T:System.TimeZoneOffsetResolvers                  | 
            <summary>
            
            </summary>
        
| M:System.TimeZoneOffsetResolvers.Default(System.DateTime,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| T:System.DateTimeExtensions                       | 
            <summary>
            Extension methods for <see cref="T:System.DateTime" />.
            </summary>
        
| M:System.DateTimeExtensions.Date(System.DateTime) | 
            <summary>
            Gets a <see cref="M:System.DateTimeExtensions.Date(System.DateTime)" /> value that represents the date component of the current
            <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime" /> instance.</param>
            <returns>The <see cref="M:System.DateTimeExtensions.Date(System.DateTime)" /> value.</returns>
        
| M:System.DateTimeExtensions.TimeOfDay(System.DateTime)| 
            <summary>
            Gets a <see cref="M:System.DateTimeExtensions.TimeOfDay(System.DateTime)" /> value that represents the time component of the current
            <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime" /> instance.</param>
            <returns>The <see cref="M:System.DateTimeExtensions.TimeOfDay(System.DateTime)" /> value.</returns>
        
| M:System.DateTimeExtensions.NowInTimeZone(System.TimeZoneInfo)| 
            <summary>
            Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time in the specified time zone.
            </summary>
            <param name="timeZoneInfo">The <see cref="T:System.TimeZoneInfo" /> instance.</param>
            <returns>The current <see cref="T:System.DateTime" /> for the specified time zone.</returns>
        
| M:System.DateTimeExtensions.AddYears(System.DateTime,System.Int32,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="years"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddYears(System.DateTime,System.Int32,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="years"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddMonths(System.DateTime,System.Int32,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="months"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddMonths(System.DateTime,System.Int32,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="months"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddDays(System.DateTime,System.Int32,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="days"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddDays(System.DateTime,System.Int32,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="days"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddHours(System.DateTime,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="hours"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddHours(System.DateTime,System.Double,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="hours"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddMinutes(System.DateTime,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="minutes"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddMinutes(System.DateTime,System.Double,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="minutes"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddSeconds(System.DateTime,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="seconds"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddSeconds(System.DateTime,System.Double,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="seconds"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddMilliseconds(System.DateTime,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="milliseconds"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddMilliseconds(System.DateTime,System.Double,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="milliseconds"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddTicks(System.DateTime,System.Int64,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="ticks"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddTicks(System.DateTime,System.Int64,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="ticks"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.Add(System.DateTime,System.TimeSpan,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="timeSpan"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.Subtract(System.DateTime,System.TimeSpan,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="timeSpan"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.Subtract(System.DateTime,System.TimeSpan,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="timeSpan"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.Add(System.DateTime,System.TimeSpan,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="timeSpan"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeExtensions.AddByDate(System.DateTime,System.Func{System.DateTime,System.DateTime},System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="operation"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| T:System.DateTimeOffsetExtensions                 | 
            <summary>
            Extension methods for <see cref="T:System.DateTimeOffset" />.
            </summary>
        
| M:System.DateTimeOffsetExtensions.Date(System.DateTimeOffset)| 
            <summary>
            Gets a <see cref="M:System.DateTimeOffsetExtensions.Date(System.DateTimeOffset)" /> value that represents the date component of the current
            <see cref="T:System.DateTimeOffset" /> object.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset" /> instance.</param>
            <returns>The <see cref="M:System.DateTimeOffsetExtensions.Date(System.DateTimeOffset)" /> value.</returns>
        
| M:System.DateTimeOffsetExtensions.TimeOfDay(System.DateTimeOffset)| 
            <summary>
            Gets a <see cref="M:System.DateTimeOffsetExtensions.TimeOfDay(System.DateTimeOffset)" /> value that represents the time component of the current
            <see cref="T:System.DateTimeOffset" /> object.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset" /> instance.</param>
            <returns>The <see cref="M:System.DateTimeOffsetExtensions.TimeOfDay(System.DateTimeOffset)" /> value.</returns>
        
| M:System.DateTimeOffsetExtensions.NowInTimeZone(System.TimeZoneInfo)| 
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date, time,
            and offset from Coordinated Universal Time (UTC) in the specified time zone.
            </summary>
            <param name="timeZoneInfo">The <see cref="T:System.TimeZoneInfo" /> instance.</param>
            <returns>The current <see cref="T:System.DateTimeOffset" /> for the specified time zone.</returns>
        
| M:System.DateTimeOffsetExtensions.AddYears(System.DateTimeOffset,System.Int32,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="years"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddYears(System.DateTimeOffset,System.Int32,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="years"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddMonths(System.DateTimeOffset,System.Int32,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="months"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddMonths(System.DateTimeOffset,System.Int32,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="months"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddDays(System.DateTimeOffset,System.Int32,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="days"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddDays(System.DateTimeOffset,System.Int32,System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="days"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddHours(System.DateTimeOffset,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="hours"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddMinutes(System.DateTimeOffset,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="minutes"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddSeconds(System.DateTimeOffset,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="seconds"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddMilliseconds(System.DateTimeOffset,System.Double,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="milliseconds"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddTicks(System.DateTimeOffset,System.Int64,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="ticks"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.Subtract(System.DateTimeOffset,System.TimeSpan,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="timeSpan"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.Add(System.DateTimeOffset,System.TimeSpan,System.TimeZoneInfo)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="timeSpan"></param>
            <param name="timeZone"></param>
            <returns></returns>
        
| M:System.DateTimeOffsetExtensions.AddByDate(System.DateTimeOffset,System.Func{System.DateTime,System.DateTime},System.TimeZoneInfo,System.TimeZoneOffsetResolver)| 
            <summary>
            
            </summary>
            <param name="dateTimeOffset"></param>
            <param name="operation"></param>
            <param name="timeZone"></param>
            <param name="resolver"></param>
            <returns></returns>
        
