Method      | Z0.Asm.XTend.FarCalls(Z0.Asm.AsmFunction)                             | Selects a (non-distinct) sequence of far addresses that are target by call instructions in the source function
Method      | Z0.Asm.XTend.FarCalls(Z0.Asm.AsmFunctionList)                         | Selects a (non-distinct) sequence of the far addresses targeted by functions in the source
Method      | Z0.Asm.XTend.FarCalls(Z0.CapturedHost)                                | Selects a (non-distinct) sequence of the far addresses targeted by functions in an extract
Method      | Z0.Asm.XTend.FarCalls(System.Collections.Generic.IEnumerable{Z0.CapturedHost})| Selects a (non-distinct) sequence of the far addresses targeted by functions in an extract
Method      | Z0.Asm.XTend.BaseAddresses(Z0.CapturedHost)                           | Selects base addresses of functions in an extract
Method      | Z0.Asm.XTend.BaseAddresses(System.Collections.Generic.IEnumerable{Z0.CapturedHost})| Selects function base addresss from an extract stream
Type        | Z0.Asm.TAsmCore                                                       | Defines factory methods that produce context-free services that require no *unsupplied* state to operate
Property    | Z0.Asm.TAsmCore.AsmWriterFactory                                      | Writer factory accessor
Property    | Z0.Asm.TAsmCore.FunctionBuilder                                       | Function Builder service accessor
Property    | Z0.Asm.TAsmCore.MemoryReader                                          | Memory Reader service accessor
Property    | Z0.Asm.TAsmCore.DefaultFormatter                                      | Default asm formatter accessor
Property    | Z0.Asm.TAsmCore.DefaultCilFormatter                                   | Accessor for default CIL formatter
Method      | Z0.Asm.TAsmCore.Formatter(System.Nullable{Z0.Asm.AsmFormatSpec}@)     | Creates an asm formatter with an optional configuration
Method      | Z0.Asm.TAsmCore.AsmWriter(Z0.FilePath)                                | Allocates a caller-disposed asm text writer with the default formatter
Method      | Z0.Asm.TAsmCore.AsmWriter(Z0.FilePath,Z0.Asm.IAsmFormatter)           | Allocates a caller-disposed asm text writer with a specified formatter
Method      | Z0.Asm.TAsmCore.AsmWriter(Z0.FilePath,Z0.Asm.AsmFormatSpec@)          | Allocates a caller-disposed asm text writer with a customized format configuration
Method      | Z0.Asm.TAsmCore.CilFormatter(Z0.CilFormatConfig)                      | Creates a cil function formatter with an optionally-specified configuration
Method      | Z0.Asm.TAsmCore.HostArchiver(Z0.ApiHostUri,Z0.FolderPath)             | Creates a host-specific archiver service using the default formatter
Method      | Z0.Asm.TAsmCore.HostArchiver(Z0.ApiHostUri,Z0.Asm.IAsmFormatter,Z0.FolderPath)| Creates a host-specific archiver service
Type        | Z0.Asm.AsmArchiveConfig                                               | Defines common asm workfow configuration settings
Property    | Z0.Asm.AsmArchiveConfig.ArchiveRoot                                   | Specifies the root emisson folder, bwlow which all data will be written
Method      | Z0.Asm.AsmFormat.label(System.UInt64)                                 | Formats a line label
Method      | Z0.Asm.AsmFormat.lines(Z0.Asm.AsmFunction@,System.Nullable{Z0.Asm.AsmFormatSpec}@)| Formats the instructions in a function
Method      | Z0.Asm.AsmFormat.lines(Z0.Asm.AsmInstructionList@,System.Nullable{Z0.Asm.AsmFormatSpec}@)| Formats a contiguous sequence of instructions defined in an instruction list
Method      | Z0.Asm.AsmFormat.header(Z0.LocatedCode,Z0.OpIdentity)                 | Formats source bits on a single line intended for emission in the function header
Method      | Z0.Asm.AsmFormat.render(Z0.Asm.AsmFunction,System.Nullable{Z0.Asm.AsmFormatSpec}@)| Formats the assembly function detail
Method      | Z0.Asm.AsmFormat.header(Z0.Asm.AsmFunction,System.Nullable{Z0.Asm.AsmFormatSpec}@)| Formats the function header
Method      | Z0.Asm.AsmFormatter.FormatFunction(Z0.Asm.AsmFunction)                | Formats the assembly function detail
Type        | Z0.Asm.AsmMnemonicTrigger                                             | Fires when an instruction mnemonic matches a specified mnemonic
Field       | Z0.Asm.CaptureExchange.TargetBuffer                                   | The buffer that receives the captured data
Field       | Z0.Asm.CaptureExchange.Service                                        | The juncture-coincident operation set
Method      | Z0.Asm.CaptureExchange.Create(Z0.Asm.IAsmContext)                     | Allocatates buffers and creates an exchange over the allocation
Method      | Z0.Asm.CaptureExchange.Create(Z0.Asm.ICaptureCore,System.Int32)       | Allocatates buffers and creates an exchange over the allocation
Method      | Z0.Asm.CaptureExchange.Target(System.Int32)                           | Queries and manipulates an index-identified target buffer byte
Method      | Z0.Asm.CaptureExchange.Target(System.Int32,System.Int32)              | Slices a section of the target buffer
Property    | Z0.Asm.CaptureExchangeProxy.Service                                   | The juncture-coincident operation set
Property    | Z0.Asm.CaptureExchangeProxy.TargetBuffer                              | The buffer that receives the captured data
Property    | Z0.Asm.CaptureExchangeProxy.StateBuffer                               | A buffer that tracks state meaningful to the capture workflow
Type        | Z0.Asm.IAsmContext                                                    | Defines a nexus of shared state and services for assembly-related services
Property    | Z0.Asm.IAsmContext.ApiSet                                             | The api collection known to the context
Property    | Z0.Asm.IAsmContext.AsmFormat                                          | The default asm formatting configuration
Property    | Z0.Asm.IAsmContext.Formatter                                          | The context formatter
Property    | Z0.Asm.IAsmContext.Decoder                                            | The context decoder
Method      | Z0.Asm.IAsmContext.Writer(Z0.FilePath)                                | The context writer factory
Property    | Z0.Asm.IAsmContext.CaptureCore                                        | The capture service
Property    | Z0.Asm.IAsmContext.Dynamic                                            | Provides access to dynamic operator production facilities
Property    | Z0.Asm.IAsmContext.ImmServices                                        | Provides access to immeditate specialization services
Property    | Z0.Asm.IAsmContext.Contextual                                         | Reveals the context-predicated service factory
Property    | Z0.Asm.IAsmContext.RootCapturePath                                    | The capture archive root
Property    | Z0.Asm.IAsmContext.Hosts                                              | The hosts known to the context
Property    | Z0.Asm.IAsmContext.DefaultBufferLength                                | The buffer length to use whenever a buffer length is unspecified
Property    | Z0.Asm.IAsmContext.RootCaptureArchive                                 | The primary capture archive, predicated on the context-specified root path
Method      | Z0.Asm.IAsmContext.CaptureArchive(Z0.FolderName,Z0.FolderName)        | A root archive descendant narrowed by area/subject
Type        | Z0.Asm.IAsmFormatter                                                  | Defines service contract for asm text formatting support
Property    | Z0.Asm.IAsmFormatter.Config                                           | The configuration used when rendering the formatted text
Method      | Z0.Asm.IAsmFormatter.FormatFunction(Z0.Asm.AsmFunction)               | Creates a detailed presentation of decoded x86 asm data per the accompanying configuration spec
Method      | Z0.Asm.IAsmFormatter.FormatInstruction(Z0.MemoryAddress@,Z0.Asm.AsmInstructionSummary@)| Formats a single instruction
Method      | Z0.Asm.IAsmFormatter.FormatLines(Z0.Asm.AsmFunction)                  | Formats the instruction in the source and returns a line for each and every one
Method      | Z0.Asm.IAsmFormatter.FormatLines(Z0.Asm.AsmInstructionList)           | Formats the instruction in the source and returns a line for each and every one
Method      | Z0.Asm.IAsmFunctionBuilder.BuildFunction(Z0.OpUri,System.String,Z0.Asm.AsmInstructionBlock)| Builds a function from an instruction block
Type        | Z0.Asm.IAsmFunctionDecoder                                            | Characterizes function-centric asm decoding operations
Method      | Z0.Asm.IAsmFunctionDecoder.Decode(Z0.CapturedCode)                    | Decodes a function from member capture data
Method      | Z0.Asm.IAsmFunctionDecoder.Decode(Z0.ParsedExtract)                   | Decodes a fucntion for a parsed extract
Method      | Z0.Asm.IAsmFunctionDecoder.Decode(Z0.LocatedCode)                     | Decodes an instruction list
Type        | Z0.Asm.ICaptureCore                                                   | Defines supported x86-encoding capture operations
Method      | Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,Z0.OpIdentity,System.Reflection.MethodInfo)| Captures jitted x86 encoded assembly for nongeneric methods
Method      | Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,System.Reflection.MethodInfo,System.Type[])| Captures jitted x86 encoded assembly for generic or nongeneric methods
Method      | Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,Z0.OpIdentity,Z0.DynamicDelegate@)| Captures jitted x86 encoded assembly for a dynamic delegate
Method      | Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,Z0.OpIdentity,System.Delegate)| Captures jitted x86 encoded assembly for a delegate
Method      | Z0.Asm.ICaptureCore.ParseBuffer(Z0.Asm.CaptureExchange@,Z0.OpIdentity,System.Span{System.Byte})| Captures encoded data from a caller-supplied source buffer.
Method      | Z0.Asm.ICaptureCore.Capture``1(Z0.Asm.CaptureExchange@,Z0.OpIdentity,Z0.DynamicDelegate{``0})| Captures jitted x86 encoded assembly for a dynamic delegate
Property    | Z0.Asm.ICaptureExchange.Service                                       | The capture service in use
Property    | Z0.Asm.ICaptureExchange.TargetBuffer                                  | The buffer that receives the captured data
Property    | Z0.Asm.ICaptureExchange.StateBuffer                                   | A buffer that tracks state meaningful to the capture workflow
Type        | Z0.Asm.ICaptureServiceProxy                                           | Exposes capture services without the hassle of passing a ref struct about hither thither and yon
Property    | Z0.Asm.ICaptureServiceProxy.CaptureExchange                           | The capture exchange
Property    | Z0.Asm.ICaptureServiceProxy.CaptureService                            | The exchange service
Method      | Z0.Asm.ICaptureServiceProxy.Capture(Z0.OpIdentity,System.Reflection.MethodInfo)| Captures jitted x86 encoded assembly for nongeneric methods
Method      | Z0.Asm.ICaptureServiceProxy.Capture(System.Reflection.MethodInfo,System.Type[])| Captures jitted x86 encoded assembly for generic or nongeneric methods
Method      | Z0.Asm.ICaptureServiceProxy.Capture(Z0.OpIdentity,Z0.DynamicDelegate@)| Captures jitted x86 encoded assembly for a dynamic delegate
Method      | Z0.Asm.ICaptureServiceProxy.Capture(Z0.OpIdentity,System.Delegate)    | Captures jitted x86 encoded assembly for a delegate
Method      | Z0.Asm.ICaptureServiceProxy.ParseBuffer(Z0.OpIdentity,System.Span{System.Byte})| Captures encoded data from a caller-supplied source buffer.
Method      | Z0.Asm.ICaptureServiceProxy.Capture``1(Z0.OpIdentity,Z0.DynamicDelegate{``0})| Captures jitted x86 encoded assembly for a dynamic delegate
Method      | Z0.Asm.ICaptureServices.MemoryExtractor(System.Byte[])                | Creates a service that extracts data that lives in memory using a caller-suppled working buffer
Method      | Z0.Asm.ICaptureServices.AsmDecoder(System.Nullable{Z0.Asm.AsmFormatSpec}@)| Creates a function decoder
Method      | Z0.Asm.ICaptureServices.HostExtractor(System.Nullable{System.Int32})  | Creates a code extractor with an optionally-specified buffer length
Type        | Z0.Asm.IHostArchiver                                                  | Defines service contract for persisting asm functions which are derived from .net member functions
Property    | Z0.Asm.IHostArchiver.Owner                                            | The .net assembly from which deposited asm originates
Property    | Z0.Asm.IHostArchiver.Host                                             | The api host
Property    | Z0.Asm.IHostArchiver.ArchiveRoot                                      | The directory into which the archiver archives
Method      | Z0.Asm.IHostArchiver.SaveHex(Z0.Asm.AsmFunction[],System.Boolean)     | Saves the encoded data contained in an array of dedoded functions
Method      | Z0.Asm.IHostArchiver.SaveAsm(Z0.Asm.AsmFunction[],System.Boolean)     | Saves an array of functions as formatted asm
Method      | Z0.Asm.IHostArchiver.SaveAsmImm(Z0.OpIdentity,Z0.Asm.AsmFunction[],System.Boolean)| Saves an array of functions as formatted asm
Method      | Z0.Asm.IHostArchiver.SaveHexImm(Z0.OpIdentity,Z0.Asm.AsmFunction[],System.Boolean)| Saves the encoded data contained in an array of dedoded functions
Type        | Z0.Asm.IHostCaptureService                                            | Characterizes host-centric capture service operations
Type        | Z0.CapturedHost                                                       | Aggregates artifacts from a host capture workflow
