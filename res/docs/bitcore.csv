Method      | Z0.Bits.bfly(Z0.N1,System.Byte)                                       | Effects a butterfly permutation on the source that swaps the interior two bits of each 4-bit segment.
Method      | Z0.Bits.bfly(Z0.N1,System.UInt16)                                     | Effects a butterfly permutation on the source that swaps the interior two bits of each 4-bit segment.
Method      | Z0.Bits.bfly(Z0.N1,System.UInt32)                                     | Effects a butterfly permutation on the source that swaps the interior two bits of each 4-bit segment.
Method      | Z0.Bits.bfly(Z0.N1,System.UInt64)                                     | Effects a butterfly permutation on the source that swaps the interior two bits of each 4-bit segment.
Method      | Z0.Bits.bfly(Z0.N2,System.Byte)                                       | Effects a butterfly permutation on the source that swaps the interior 2-bit segments
Method      | Z0.Bits.bfly(Z0.N2,System.UInt16)                                     | Effects a butterfly permutation on the bit source that swaps the interior 2-bit segments of each 8-bit segment.
Method      | Z0.Bits.bfly(Z0.N2,System.UInt32)                                     | Effects a butterfly permutation on the bit source that swaps the interior 2-bit segments of each 8-bit segment.
Method      | Z0.Bits.bfly(Z0.N2,System.UInt64)                                     | Effects a butterfly permutation on the bit source that swaps the interior 2-bit segments of each 8-bit segment.
Method      | Z0.Bits.bfly(Z0.N4,System.UInt16)                                     | Effects a butterfly permutation on the bit source that swaps the interior 4-bit segments
Method      | Z0.Bits.bfly(Z0.N4,System.UInt32)                                     | Effects a butterfly permutation on the bit source that swaps the interior 4-bit segments of each 16-bit segment.
Method      | Z0.Bits.bfly(Z0.N4,System.UInt64)                                     | Effects a butterfly permutation on the bit source that swaps the interior 4-bit segments of each 16-bit segment.
Method      | Z0.Bits.bfly(Z0.N8,System.UInt32)                                     | Effects a butterfly permutation on the bit source that swaps the interior 8-bit segments
Method      | Z0.Bits.bfly(Z0.N8,System.UInt64)                                     | Effects a butterfly permutation on the bit source that swaps the interior 8-bit segments of each 32-bit segment.
Method      | Z0.Bits.bfly(Z0.N16,System.UInt64)                                    | Effects a butterfly permutation on the source that swaps the interior 16-bit segments
Method      | Z0.Bits.bfly``1(``0,``0,System.Byte)                                  | Effects a butterfly permutation on the source value, predicated on a supplied mask and shift amount
Method      | Z0.Bits.pindex(System.Int32,Z0.bit)                                   | Defines a parity index j from a source integer i and a parity bit p, j := i*2 + p
Method      | Z0.Bits.blsic(System.Byte)                                            | Isolate least set bit and complement, computed by dst := ~src | (src - 1),            where all bits in the target are set except for the least set bit in the source            For example, [11101010] |&gt; blisc = [11111101]
Method      | Z0.Bits.blsic(System.UInt16)                                          | Isolate least set bit and complement, computed by dst := ~src | (src - 1),            where all bits in the target are set except for the least set bit in the source            For example, [11101010] |&gt; blisc = [11111101]
Method      | Z0.Bits.blsic(System.UInt32)                                          | Isolate least set bit and complement, computed by dst := ~src | (src - 1),            where all bits in the target are set except for the least set bit in the source            For example, [11101010] |&gt; blisc = [11111101]
Method      | Z0.Bits.blsic(System.UInt64)                                          | Isolate least set bit and complement, computed by dst := ~src | (src - 1),            where all bits in the target are set except for the least set bit in the source            For example, [11101010] |&gt; blisc = [11111101]
Method      | Z0.Bits.broadcast(System.UInt16,Z0.N32)                               | Replicates a 16-bit source over a 32-bit target
Method      | Z0.Bits.broadcast(System.Byte,Z0.N64)                                 | Replicates an 8-bit source over a 64-bit target
Method      | Z0.Bits.broadcast(System.UInt16,Z0.N64)                               | Replicates a 16-bit source over a 64-bit target
Method      | Z0.Bits.broadcast(System.UInt32,Z0.N64)                               | Replicates a 32-bit source over a 64-bit target
Method      | Z0.Bits.byteclear(System.UInt16,System.Byte)                          | Disables a sequence of 8 source bits starting at a specified index
Method      | Z0.Bits.byteclear(System.UInt32,System.Byte)                          | Disables a sequence of 8 source bits starting at a specified index
Method      | Z0.Bits.byteclear(System.UInt64,System.Byte)                          | Disables a sequence of 8 source bits starting at a specified index
Method      | Z0.Bits.clear(System.Byte,System.Byte,System.Byte)                    | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.SByte,System.Byte,System.Byte)                   | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.UInt16,System.Byte,System.Byte)                  | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.Int16,System.Byte,System.Byte)                   | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.UInt32,System.Byte,System.Byte)                  | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.Int32,System.Byte,System.Byte)                   | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.Int64,System.Byte,System.Byte)                   | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.clear(System.UInt64,System.Byte,System.Byte)                  | Disables a sequence of bits starting at a specified index
Method      | Z0.Bits.concat(System.Byte,System.Byte)                               | Concatenates the bits of 2 unsigned 8-bit integers to produce an unsigned 16-bit integer            [a b] -&gt; ab
Method      | Z0.Bits.concat(System.UInt16,System.UInt16)                           | Concatenates the bits of 2 unsigned 16-bit integers to produce and unsigned 32-bit integer            [a b] -&gt; ab
Method      | Z0.Bits.concat(System.UInt32@,System.UInt32@)                         | Concatenates the bits of 2 unsigned 32-bit integers to produce an unsigned 64-bit integer            [a b] -&gt; ab
Method      | Z0.Bits.concat(System.Byte,System.Byte,System.Byte,System.Byte)       | Concatenates the bits of 4 unsigned 8-bit integers to produce an unsigned 64-bit integer            [a b c d] -&gt; abcd
Method      | Z0.Bits.concat(System.UInt16,System.UInt16,System.UInt16,System.UInt16)| Concatenates the bits of 4 unsigned 16-bit integers to produce an unsigned 64-bit integer            [a b c d] -&gt; abcd
Method      | Z0.Bits.concat(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| Concatenates the bits of 8 unsigned 8-bit integers to produce an unsigned 64-bit integer            [a b c d] -&gt; abcd
Method      | Z0.Bits.copy(System.Byte,System.Byte,System.Byte,System.Byte)         | Overwrites a target bit segment dst[index..(start + count)] with the corresponding source segment src[index..(start + count)]
Method      | Z0.Bits.copy(System.UInt16,System.Byte,System.Byte,System.UInt16)     | Overwrites a target bit segment dst[index..(start + count)] with the corresponding source segment src[index..(start + count)]
Method      | Z0.Bits.copy(System.UInt32,System.Byte,System.Byte,System.UInt32)     | Overwrites a target bit segment dst[index..(start + count)] with the corresponding source segment src[index..(start + count)]
Method      | Z0.Bits.copy(System.UInt64,System.Byte,System.Byte,System.UInt64)     | Overwrites a target bit segment dst[index..(start + count)] with the corresponding source segment src[index..(start + count)]
Method      | Z0.Bits.disable(System.SByte,System.Int32)                            | Disables a specified source bit
Method      | Z0.Bits.disable(System.Byte,System.Int32)                             | Disables a specified source bit
Method      | Z0.Bits.disable(System.Int16,System.Int32)                            | Disables a specified source bit
Method      | Z0.Bits.disable(System.UInt16,System.Int32)                           | Disables a specified source bit
Method      | Z0.Bits.disable(System.Int32,System.Int32)                            | Disables a specified source bit
Method      | Z0.Bits.disable(System.UInt32,System.Int32)                           | Disables a specified source bit
Method      | Z0.Bits.disable(System.Int64,System.Int32)                            | Disables a specified source bit
Method      | Z0.Bits.disable(System.UInt64,System.Int32)                           | Disables a specified source bit
Method      | Z0.Bits.disable(System.Single,System.Int32)                           | Disables a specified source bit
Method      | Z0.Bits.disable(System.Double,System.Int32)                           | Disables a specified source bit
Method      | Z0.Bits.effsize(System.Byte)                                          | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize(System.UInt16)                                        | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize(System.UInt32)                                        | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize_baseline(System.UInt64)                               | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize(System.UInt64)                                        | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize(System.SByte)                                         | Computes the minimum number of bytes required to represent a value
Method      | Z0.Bits.effsize(System.Int16)                                         | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize(System.Int32)                                         | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.effsize(System.Int64)                                         | Computes the minimum number of bytes required to represent the source value
Method      | Z0.Bits.bitcount(System.UInt32)                                       | 
Method      | Z0.Bits.bitcount(System.UInt64)                                       | 
Method      | Z0.Bits.effwidth(System.Byte)                                         | Computes the minimum number of bits required to represent the source value
Method      | Z0.Bits.effwidth(System.UInt16)                                       | Computes the minimum number of bits required to represent the source value
Method      | Z0.Bits.effwidth(System.UInt32)                                       | Computes the minimum number of bits required to represent the source value
Method      | Z0.Bits.effwidth(System.UInt64)                                       | Computes the minimum number of bits required to represent the source value
Method      | Z0.Bits.enable(System.SByte,System.Int32)                             | Enables a specified source bit
Method      | Z0.Bits.enable(System.Byte,System.Int32)                              | Enables a specified source bit
Method      | Z0.Bits.enable(System.Int16,System.Int32)                             | Enables a specified source bit
Method      | Z0.Bits.enable(System.UInt16,System.Int32)                            | Enables a specified source bit
Method      | Z0.Bits.enable(System.Int32,System.Int32)                             | Enables a specified source bit
Method      | Z0.Bits.enable(System.UInt32,System.Int32)                            | Enables a specified source bit
Method      | Z0.Bits.enable(System.Int64,System.Int32)                             | Enables a specified source bit
Method      | Z0.Bits.enable(System.UInt64,System.Int32)                            | Enables a specified source bit
Method      | Z0.Bits.enable(System.Single,System.Int32)                            | Enables a specified source bit
Method      | Z0.Bits.enable(System.Double,System.Int32)                            | Enables a specified source bit
Method      | Z0.Bits.extract(System.SByte,System.Byte,System.Byte)                 | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.Byte,System.Byte,System.Byte)                  | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.Int16,System.Byte,System.Byte)                 | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.UInt16,System.Byte,System.Byte)                | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.UInt32,System.Byte,System.Byte)                | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.Int32,System.Byte,System.Byte)                 | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.UInt64,System.Byte,System.Byte)                | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.Int64,System.Byte,System.Byte)                 | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.Single,System.Byte,System.Byte)                | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.extract(System.Double,System.Byte,System.Byte)                | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.Bits.fill(System.Byte,System.Byte,System.Byte)                     | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.SByte,System.Byte,System.Byte)                    | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.UInt16,System.Byte,System.Byte)                   | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.Int16,System.Byte,System.Byte)                    | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.UInt32,System.Byte,System.Byte)                   | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.Int32,System.Byte,System.Byte)                    | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.UInt64,System.Byte,System.Byte)                   | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.fill(System.Int64,System.Byte,System.Byte)                    | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.Bits.gather(System.Byte,System.Byte)                               | unsigned int _pext_u32 (unsigned int a, unsigned int mask) PEXT r32a, r32b, reg/m32            Copies mask-identified source bits to contiguous low bits in the returned target
Method      | Z0.Bits.gather(System.UInt16,System.UInt16)                           | unsigned int _pext_u32 (unsigned int a, unsigned int mask) PEXT r32a, r32b, reg/m32            Copies mask-identified source bits to contiguous low bits in the returned target
Method      | Z0.Bits.gather(System.UInt32,System.UInt32)                           | unsigned int _pext_u32 (unsigned int a, unsigned int mask) PEXT r32a, r32b, reg/m32            Copies mask-identified source bits to contiguous low bits in the returned target
Method      | Z0.Bits.gather(System.UInt64,System.UInt64)                           | __int64 _pext_u64 (unsigned __int64 a, unsigned __int64 mask) PEXT r64a, r64b, reg/m64             Copies mask-identified source bits to contiguous low bits in the returned target
Method      | Z0.Bits.hi(System.Byte)                                               | Extracts the upper 4 bits from the source
Method      | Z0.Bits.hi(System.UInt16)                                             | Extracts the upper 8 bits from the source
Method      | Z0.Bits.hi(System.UInt32)                                             | Extracts the upper 16 bits from the source
Method      | Z0.Bits.hi(System.UInt64)                                             | Extracts the upper 16 bits from the source
Method      | Z0.Bits.msb(System.Byte)                                              | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.SByte)                                             | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.UInt16)                                            | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.Int16)                                             | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.UInt32)                                            | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.Int32)                                             | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.UInt64)                                            | Returns the state of the most significant bit
Method      | Z0.Bits.msb(System.Int64)                                             | Returns the state of the most significant bit
Method      | Z0.Bits.hipos(System.Byte)                                            | Computes the position of the highest enabled source bit, a number between 0 and 7
Method      | Z0.Bits.hipos(System.UInt16)                                          | Computes the position of the highest enabled source bit, a number between 0 and 15
Method      | Z0.Bits.hipos(System.UInt32)                                          | Computes the position of the highest enabled source bit, a number between 0 and 31
Method      | Z0.Bits.hipos(System.UInt64)                                          | Computes the position of the highest enabled source bit, a number between 0 and 63
Method      | Z0.Bits.lo(System.Byte)                                               | Extracts the lower 4 bits from the source
Method      | Z0.Bits.lo(System.UInt16)                                             | Extracts the lower 8 bits from the source
Method      | Z0.Bits.lo(System.UInt32)                                             | Extracts the lower 16 bits from the source
Method      | Z0.Bits.lo(System.UInt64)                                             | Extracts the lower half of the bits from the source
Method      | Z0.Bits.mix(Z0.N0,System.Byte,System.Byte)                            | Blends alternating even operand bits
Method      | Z0.Bits.mix(Z0.N1,System.Byte,System.Byte)                            | Blends alternating odd operand bits
Method      | Z0.Bits.mix(Z0.N0,System.UInt16,System.UInt16)                        | Blends alternating even operand bits
Method      | Z0.Bits.mix(Z0.N1,System.UInt16,System.UInt16)                        | Blends alternating odd operand bits
Method      | Z0.Bits.mix(Z0.N0,System.UInt32,System.UInt32)                        | Blends alternating even operand bits
Method      | Z0.Bits.mix(Z0.N1,System.UInt32,System.UInt32)                        | Blends alternating odd operand bits
Method      | Z0.Bits.mix(Z0.N0,System.UInt64,System.UInt64)                        | Blends alternating even operand bits
Method      | Z0.Bits.mix(Z0.N1,System.UInt64,System.UInt64)                        | Blends alternating odd operand bits
Method      | Z0.Bits.mix(System.Byte,System.Byte,System.Byte)                      | Blends alternating operand bits
Method      | Z0.Bits.mix(System.UInt16,System.UInt16,System.UInt16)                | Blends alternating operand bits
Method      | Z0.Bits.mix(System.UInt32,System.UInt32,System.UInt32)                | Blends alternating operand bits
Method      | Z0.Bits.mix(System.UInt64,System.UInt64,System.UInt64)                | Blends alternating operand bits
Method      | Z0.Bits.nlz(System.Byte)                                              | Counts the number of leading zero bits in the source
Method      | Z0.Bits.nlz(System.UInt16)                                            | Counts the number of leading zero bits in the source
Method      | Z0.Bits.nlz(System.UInt32)                                            | _lzcnt_u32            Counts the number of 0 bits prior to the first most significant 1 bit
Method      | Z0.Bits.nlz(System.UInt64)                                            | _lzcnt_u64:            Counts the number of 0 bits prior to the first most significant 1 bit
Method      | Z0.Bits.ntz(System.SByte)                                             | int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.Byte)                                              | int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.Int16)                                             | int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.UInt16)                                            | int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.Int32)                                             | int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.UInt32)                                            | int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.Int64)                                             | Counts the number of trailing zero bits in the source
Method      | Z0.Bits.ntz(System.UInt64)                                            | __int64 _mm_tzcnt_64 (unsigned __int64 a) TZCNT reg, reg/m64            Counts the number of trailing zero bits in the source
Method      | Z0.Bits.pack(Z0.bit,Z0.bit)                                           | Packs 2 bits into the least bits of an unsigned integer
Method      | Z0.Bits.pack(Z0.bit,Z0.bit,Z0.bit)                                    | Packs 3 bits into the least bits of an unsigned integer
Method      | Z0.Bits.pack(Z0.bit,Z0.bit,Z0.bit,Z0.bit)                             | Packs 4 bits into the least bits of an unsigned integer
Method      | Z0.Bits.pack(Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit)                      | Packs 5 bits into the least bits of an unsigned integer
Method      | Z0.Bits.pack(Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit) | Packs 8 bits into the least bits of an unsigned integer
Method      | Z0.Bits.part64x1(System.UInt64,System.Span{System.Byte})              | Partitions a 64-bit source into 64 8-bit targets of effective width 1
Method      | Z0.Bits.part64x1(System.UInt64,System.Span{Z0.bit})                   | Partitions a 64-bit source value into 64 individual bit values
Method      | Z0.Bits.part8x2(System.UInt32,System.Byte@)                           | Partitions the first 8 bits of a 32-bit source into 4 target segments each with an effective width of 2
Method      | Z0.Bits.part8x2(System.Byte,System.Byte@)                             | Partitions the source into 4 target segments of physical widht 8 and effective width 2
Method      | Z0.Bits.part16x2(System.UInt16,System.Byte@)                          | Partitions a 16-bit source into 8 target segments each with an effective width of 2
Method      | Z0.Bits.part32x2(System.UInt32,System.Byte@)                          | Partitions a 32-bit source into 16 target segments each with an effective width of 2
Method      | Z0.Bits.part6x3(System.UInt32,System.Byte@)                           | Partitions the first 6 bits of a 32-bit source value into 2 target segments each with an effective width of 3
Method      | Z0.Bits.part9x3(System.UInt32,System.Byte@)                           | Partitions the first 9 bits of a 32-bit source value into 3 target segments each with an effective width of 3
Method      | Z0.Bits.part12x3(System.UInt32,System.Byte@)                          | Partitions the first 12 bits of a 32-bit source into 4 target segments each with an effective width of 3
Method      | Z0.Bits.part15x3(System.UInt16,Z0.NatSpan{Z0.N5,System.Byte}@)        | Partitions the first 15 bits of a 16-bit source into 6 target segments each with an effective width of 3
Method      | Z0.Bits.part24x3(System.UInt32,Z0.NatSpan{Z0.N8,System.Byte}@)        | Partitions the first 24 bits of a 32-bit source value into 9 8-bit target segments
Method      | Z0.Bits.part27x3(System.UInt32,Z0.NatSpan{Z0.N9,System.Byte}@)        | Partitions the first 27 bits of a 32-bit source value into 9 8-bit target segments
Method      | Z0.Bits.part30x3(System.UInt32,Z0.NatSpan{Z0.N10,System.Byte}@)       | Partitions the first 30 bits of a 32-bit source value into 10 8-bitt target segments
Method      | Z0.Bits.part63x3(System.UInt64,Z0.NatSpan{Z0.N21,System.Byte}@)       | Partitions the first 63 bits of a 64 bit source value into 21 8-bit target segments
Method      | Z0.Bits.part(System.UInt64,Z0.N63,Z0.N3,Z0.N8,System.Span{System.Byte}@)| Partitions the first 63 bits of a 64 bit source value into 21 8-bit target segments
Method      | Z0.Bits.part4x2(System.UInt32,System.Byte@)                           | Partitions an 8-bit source value into 2 target segments each with an effective width of 4
Method      | Z0.Bits.part4x2(System.UInt32,Z0.NatSpan{Z0.N2,System.Byte})          | Partitions an 8-bit source value into 2 target segments each with an effective width of 4
Method      | Z0.Bits.part4x3(System.UInt32,System.Byte@)                           | Partitions the first 12 bits of a 32-bit source value into 3 target segments each with an effective width of 4
Method      | Z0.Bits.part4x3(System.UInt32,Z0.NatSpan{Z0.N3,System.Byte})          | Partitions the first 12 bits of a 32-bit source value into 3 target segments each with an effective width of 4
Method      | Z0.Bits.part4x4(System.UInt16,Z0.NatSpan{Z0.N4,System.Byte})          | Partitions a 16-bit source value into 4 8-bit target segments
Method      | Z0.Bits.part8x4(System.UInt32,Z0.NatSpan{Z0.N8,System.Byte})          | Partitions a 32-bit source value into 8 4-bit segments distributed across 8 bytes
Method      | Z0.Bits.Part4x5(System.UInt32,Z0.NatSpan{Z0.N4,System.Byte})          | Partitions the first 20 bits of a 32-bit source value into 4 8-bit segments of width 5
Method      | Z0.Bits.part2x8(System.UInt16,Z0.NatSpan{Z0.N2,System.Byte})          | Partitions a 16-bit source value into 2 segments of width 8
Method      | Z0.Bits.part4x8(System.UInt32,Z0.NatSpan{Z0.N4,System.Byte})          | Partitions a 32-bit source value into 4 segments of width 8
Method      | Z0.Bits.part8x8(System.UInt64,Z0.NatSpan{Z0.N8,System.Byte})          | Partitions a 64-bit source value into 8 segments of width 8
Method      | Z0.Bits.part32x16(System.UInt32,Z0.NatSpan{Z0.N2,System.UInt16})      | Partitions a 64-bit source value into 4 segments of width 16
Method      | Z0.Bits.part64x16(System.UInt64,Z0.NatSpan{Z0.N4,System.UInt16})      | Partitions a 64-bit source value into 4 segments of width 16
Method      | Z0.Bits.part64x32(System.UInt64,Z0.NatSpan{Z0.N2,System.UInt32})      | Partitions a 64-bit source value into 2 segments of width 32
Method      | Z0.Bits.lsb8x1``1(``0)                                                | [00000001 ... 00000001]
Method      | Z0.Bits.lsb32x1``1(``0)                                               | [00000000 00000000 00000000 0000001 00000000 00000000 00000000 0000001]
Method      | Z0.Bits.pop(System.SByte)                                             | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.Byte)                                              | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.Int16)                                             | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.UInt16)                                            | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.Int32)                                             | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.UInt32)                                            | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.Int64)                                             | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.UInt64)                                            | Counts the enabled bits in the source
Method      | Z0.Bits.pop(System.UInt64,System.UInt64,System.UInt64)                | Computes the population count of the content of 3 64-bit unsigned integers
Method      | Z0.Bits.rank(System.Byte,System.Int32)                                | Calculates the number of bits set up to and including the specified position
Method      | Z0.Bits.rank(System.UInt16,System.Int32)                              | Calculates the number of bits set up to and including the specified position
Method      | Z0.Bits.rank(System.UInt32,System.Int32)                              | Calculates the number of bits set up to and including the specified position
Method      | Z0.Bits.rank(System.UInt64,System.Int32)                              | Calculates the number of bits set up to and including the specified position
Method      | Z0.Bits.replicate(System.Byte,System.Byte,System.Byte,System.Int32)   | Replicates source bits [from..to] a specified number of times subject to the constraints imposed by the replicant type
Method      | Z0.Bits.replicate(System.UInt16,System.Byte,System.Byte,System.Int32) | Replicates source bits [from..to] a specified number of times subject to the constraints imposed by the replicant type
Method      | Z0.Bits.replicate(System.UInt32,System.Byte,System.Byte,System.Int32) | Replicates source bits [from..to] a specified number of times subject to the constraints imposed by the replicant type
Method      | Z0.Bits.replicate(System.UInt64,System.Byte,System.Byte,System.Int32) | Replicates source bits [from..to] a specified number of times subject to the constraints imposed by the replicant type
Method      | Z0.Bits.reverse(System.Byte)                                          | Reverses the bits in a byte
Method      | Z0.Bits.reverse(System.UInt16)                                        | Reverses the bits in the source
Method      | Z0.Bits.reverse(System.UInt32)                                        | Reverses the bits in the source
Method      | Z0.Bits.reverse(System.UInt64)                                        | Reverses the bits in the source
Method      | Z0.Bits.rotl(System.Byte,System.Byte)                                 | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.UInt16,System.Byte)                               | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.UInt32,System.Byte)                               | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.UInt64,System.Byte)                               | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.Byte,System.Byte,System.Int32)                    | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.UInt16,System.Byte,System.Int32)                  | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.UInt32,System.Byte,System.Int32)                  | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotl(System.UInt64,System.Byte,System.Int32)                  | Rotates the source bits leftward by a specified offset amount
Method      | Z0.Bits.rotr(System.Byte,System.Byte)                                 | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.UInt16,System.Byte)                               | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.UInt32,System.Byte)                               | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.UInt64,System.Byte)                               | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.Byte,System.Int32,System.Int32)                   | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.UInt16,System.Int32,System.Int32)                 | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.UInt32,System.Int32,System.Int32)                 | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.rotr(System.UInt64,System.Int32,System.Int32)                 | Rotates the source bits rightward by a specified offset
Method      | Z0.Bits.scatter(System.Byte,System.Byte)                              | Deposits contiguous low bits from the source across a target according to a mask
Method      | Z0.Bits.scatter(System.UInt16,System.UInt16)                          | Deposits contiguous low bits from the source across a target according to a mask
Method      | Z0.Bits.scatter(System.UInt32,System.UInt32)                          | unsigned int _pdep_u32 (unsigned int a, unsigned int mask) PDEP r32a, r32b, reg/m32            Deposits contiguous low bits from the source across a target according to a mask
Method      | Z0.Bits.scatter(System.UInt64,System.UInt64)                          | unsigned __int64 _pdep_u64 (unsigned __int64 a, unsigned __int64 mask) PDEP r64a, r64b, reg/m64            Deposits contiguous low bits from the source across a target according to a mask
Method      | Z0.Bits.setif(System.Byte,System.Int32,System.Byte,System.Int32)      | Enaables a bit in the target if it is enabled in the source
Method      | Z0.Bits.setif(System.UInt16,System.Int32,System.UInt16,System.Int32)  | Enaables a bit in the target if it is enabled in the source
Method      | Z0.Bits.setif(System.UInt32,System.Int32,System.UInt32,System.Int32)  | Enables a specified bit in the target if a specified bit is enabled in the source
Method      | Z0.Bits.setif(System.UInt64,System.Int32,System.UInt64,System.Int32)  | Enables a specified bit in the target if a specified bit is enabled in the source
Method      | Z0.Bits.slice(System.SByte,System.Byte,System.Byte)                   | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.Byte,System.Byte,System.Byte)                    | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.Int16,System.Byte,System.Byte)                   | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.UInt16,System.Byte,System.Byte)                  | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.Int32,System.Byte,System.Byte)                   | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.UInt32,System.Byte,System.Byte)                  | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.Int64,System.Byte,System.Byte)                   | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.slice(System.UInt64,System.Byte,System.Byte)                  | Extracts a contiguous range of bits from the source
Method      | Z0.Bits.split(System.UInt16,Z0.N2)                                    | Splits a 16-bit integer into lo/hi parts
Method      | Z0.Bits.split(System.UInt32,Z0.N2)                                    | Splits a 32-bit integer into lo/hi parts
Method      | Z0.Bits.split(System.UInt32,Z0.N4)                                    | Splits a 32-bit integer into four parts of equal width, from lo to hi
Method      | Z0.Bits.split(System.UInt64,Z0.N2)                                    | Splits a 64-bit integer into hi/lo parts
Method      | Z0.Bits.split(System.UInt64,Z0.N4)                                    | Splits a 64-bit integer into four parts of equal width, from lo to hi
Method      | Z0.Bits.split(System.Byte,System.Int32,System.Byte@,System.Byte@)     | Partitions the source value into two parts predicated on an index            [1010 11111 0011] |&gt; split 4 = [1010 1111] [0011]
Method      | Z0.Bits.split(System.UInt16,System.Int32,System.UInt16@,System.UInt16@)| Partitions the source value into two parts predicated on an index            [1010 11111 0011] |&gt; split 4 = [1010 1111] [0011]
Method      | Z0.Bits.split(System.UInt32,System.Int32,System.UInt32@,System.UInt32@)| Partitions the source value into two parts predicated on an index            [1010 11111 0011] |&gt; split 4 = [1010 1111] [0011]
Method      | Z0.Bits.split(System.UInt64,System.Int32,System.UInt64@,System.UInt64@)| Partitions the source value into two parts predicated on an index            [1010 11111 0011] |&gt; split 4 = [1010 1111] [0011]
Method      | Z0.Bits.split(System.Byte,System.Byte@,System.Byte@)                  | Partitions an 8-bit source upper and lower parts, each with an effective width of 4 bits
Method      | Z0.Bits.split(System.UInt16,System.Byte@,System.Byte@)                | Partitions a 16-bit source value into upper and lower 8-bit parts
Method      | Z0.Bits.split(System.UInt32,System.UInt16@,System.UInt16@)            | Partitions a 32-bit source value into upper and lower 16-bit parts
Method      | Z0.Bits.split(System.UInt64,System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)| Partitions a 64-bit source value into 4 16-bit parts
Method      | Z0.Bits.split(System.UInt32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)| Partitions a 32-bit source value into 4 8-bit parts
Method      | Z0.Bits.split(System.UInt64,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)| Partitions a 32-bit source value into 8 8-bit parts
Method      | Z0.Bits.testbit(System.SByte,System.Byte)                             | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.Byte,System.Byte)                              | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.Int16,System.Byte)                             | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.UInt16,System.Byte)                            | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.Int32,System.Byte)                             | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.UInt32,System.Byte)                            | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.Int64,System.Byte)                             | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.UInt64,System.Byte)                            | Returns 1 if an index-identified bit is enabled, 0 otherwise
Method      | Z0.Bits.testbit(System.Single,System.Byte)                            | Returns 1 if an index-identified bit is enabled, false otherwise
Method      | Z0.Bits.testbit(System.Double,System.Byte)                            | Returns 1 if an index-identified bit is enabled, false otherwise
Method      | Z0.Bits.toggle(System.Single,System.Int32)                            | Flips an identified source bit
Method      | Z0.Bits.toggle(System.Double,System.Int32)                            | Flips an identified source bit
Method      | Z0.Bits.unpack8x1(System.Byte,System.UInt64@)                         | Sends each source bit to to last bit of each 8-bit segment in the target
Method      | Z0.Bits.unpack8x1(System.Byte,System.Span{System.Byte})               | Sends each source bit to a corresponding target cell
Method      | Z0.Bits.unpack16x1(System.UInt16,System.Span{System.Byte})            | Sends each source bit to a corresponding target cell
Method      | Z0.Bits.unpack32x1(System.UInt32,System.Span{System.Byte})            | Sends each source bit to a corresponding target cell
Method      | Z0.Bits.unpack64x1(System.UInt64,System.Span{System.Byte})            | Sends each source bit to a corresponding target cell
Method      | Z0.Bits.unpack16x1(System.UInt16,Z0.Block128{System.Byte}@)           | Sends each source bit to a corresponding target cell
Method      | Z0.Bits.unpack32x1(System.UInt32,Z0.Block256{System.Byte}@)           | Sends each source bit to a corresponding target cell
Method      | Z0.Bits.zhi(System.Byte,System.Int32)                                 | unsigned int _bzhi_u32 (unsigned int a, unsigned int index) BZHI r32a, reg/m32, r32b            Replicates the source bits to the target and disables the high target bits starting at a specified index.
Method      | Z0.Bits.zhi(System.UInt16,System.Int32)                               | unsigned int _bzhi_u32 (unsigned int a, unsigned int index) BZHI r32a, reg/m32, r32b            Replicates the source bits to the target and disables the high target bits starting at a specified index.
Method      | Z0.Bits.zhi(System.UInt32,System.Int32)                               | unsigned int _bzhi_u32 (unsigned int a, unsigned int index) BZHI r32a, reg/m32, r32b            Replicates the source bits to the target and disables the high target bits starting at a specified index.
Method      | Z0.Bits.zhi(System.UInt64,System.Int32)                               | unsigned __int64 _bzhi_u64 (unsigned __int64 a, unsigned int index) BZHI r64a,reg/m32, r64b             Disables the high target bits starting at a specified index.
Method      | Z0.gbits.bfly``1(Z0.N1,``0)                                           | Effects a butterfly permutation on the source that swaps the interior two bits of each 4-bit segment.
Method      | Z0.gbits.bfly``1(Z0.N2,``0)                                           | Effects a butterfly permutation on the source that swaps the interior 2-bit segments of each 8-bit segment.
Method      | Z0.gbits.bfly``1(Z0.N4,``0)                                           | [0 1 2 3 | 4 5 6 7 ] -&gt; [0 2 1 3 | 4 6 5 7 ]            Swaps the interior 4-bit segments of each 16-bit segment.
Method      | Z0.gbits.bfly``1(Z0.N8,``0)                                           | [0 1 2 3 | 4 5 6 7] -&gt; [0 2 1 3 | 4 6 5 7]            Swaps the interior 8-bit segments of each 32-bit segment.
Method      | Z0.gbits.bfly``1(Z0.N16,``0)                                          | Effects a butterfly permutation on the source that swaps the interior 16-bit segments
Method      | Z0.gbits.bitcell``1(System.Span{``0},Z0.BitPos{``0})                  | Queries/manipulates a source cell that covers a position-identified bit
Method      | Z0.gbits.bitcell``1(System.ReadOnlySpan{``0},Z0.BitPos{``0})          | Queries/manipulates a source cell that covers a position-identified bit
Method      | Z0.gbits.bitmap``1(``0,``0,System.Byte,System.Byte)                   | Maps bits from a source segment src[0..(count-1)] to a target segment dst[index..(index+count)]
Method      | Z0.gbits.bitmatch``2(``0,System.Byte,``1,System.Byte)                 | Determines whether identified bits in the operands agree.
Method      | Z0.gbits.bitpos``1(System.Int32)                                      | Defines a bit position, relative to a T-valued sequence, predicated on a linear index
Method      | Z0.gbits.blsic``1(``0)                                                | Isolate least set bit and complement, computed by dst := ~src | (src - 1),            where all bits in the target are set except for the least set bit in the source            For example, [11101010] |&gt; blisc = [11111101]
Method      | Z0.gbits.clearbyte``1(``0,System.Byte)                                | Disables a sequence of 8 source bits starting at a specified index
Method      | Z0.gbits.clear``1(``0,System.Byte,System.Byte)                        | Disables a sequence of bits starting at a specified index
Method      | Z0.gbits.copy``1(``0,System.Byte,System.Byte,``0)                     | Overwrites a target bit segment dst[index..(start + count)] with a corresponding             segment src[index..(start + count)] in the source
Method      | Z0.gbits.copy``1(``0,System.Byte,System.Byte,``0@)                    | Overwrites a target bit segment dst[index..(start + count)] with a corresponding             segment src[index..(start + count)] in the source
Method      | Z0.gbits.copy``1(``0,System.Byte,System.Byte,System.Byte,``0)         | Overwrites a target bit segment dst[dstidx..(dstidx + count)] with a corresponding             segment src[srcidx..(srcidx + count)] in the source
Method      | Z0.gbits.copy``1(``0,System.Byte,System.Byte,System.Byte,``0@)        | Overwrites a target bit segment dst[dstidx..(dstidx + count)] with a corresponding             segment src[srcidx..(srcidx + count)] in the source
Method      | Z0.gbits.disable``1(``0,System.Int32)                                 | Disables an identified source bit
Method      | Z0.gbits.dot``1(``0,``0)                                              | Pretends that the operands are bitvectors and computes their scalar product
Method      | Z0.gbits.effsize``1(``0)                                              | Computes the minimum number of butes required to represent the source value
Method      | Z0.gbits.effwidth``1(``0)                                             | Computes the minimum number of bits required to represent the source value
Method      | Z0.gbits.enable``1(``0,System.Int32)                                  | Enables an index-identified source bit
Method      | Z0.gbits.eraser``1(System.Byte,System.Byte)                           | Defines a mask that disables a sequence of bits
Method      | Z0.gbits.extract``1(``0,System.Byte,System.Byte)                      | Extracts a contiguous range of bits from a primal source inclusively between two index positions
Method      | Z0.gbits.extract``1(``0,System.Byte,System.Byte,System.Span{System.Byte},System.Int32)| Extracts a contiguous sequence of bits from a source and deposits the result to a caller-supplied target
Method      | Z0.gbits.extract``1(System.Span{``0},Z0.BitPos{``0},Z0.BitPos{``0})   | Extracts a T-valued segment, cross-cell or same-cell, from the source as determined by an inclusive position range
Method      | Z0.gbits.extract``1(System.Span{``0},System.Int32,System.Int32)       | Extracts a T-valued segment, cross-cell or same-cell, from the source as determined by             an inclusive linear index range
Method      | Z0.gbits.fill``1(``0,System.Byte,System.Byte)                         | Enables a contiguous sequence of source bits starting at a specified index
Method      | Z0.gbits.gather``1(``0,``0)                                           | Extracts mask-identified bits from the source and deposits the result to the contiguous low bits of a zero-initialied target
Method      | Z0.gbits.hi``1(``0)                                                   | Extracts the upper source bits
Method      | Z0.gbits.hipos``1(``0)                                                | Computes the position of the highest enabled source bit, a number in the inclusive range [0 , bitsize[T] - 1]
Method      | Z0.gbits.lo``1(``0)                                                   | Extracts the lower source bits
Method      | Z0.gbits.mix``1(Z0.N0,``0,``0)                                        | Blends alternating even operand bits
Method      | Z0.gbits.mix``1(Z0.N1,``0,``0)                                        | Blends alternating odd operand bits
Method      | Z0.gbits.nlz``1(``0)                                                  | Counts the number of leading zero bits the source
Method      | Z0.gbits.ntz``1(``0)                                                  | Counts the number of trailing zero bits in the source
Method      | Z0.gbits.pop``1(``0)                                                  | Counts the number enabled source bits
Method      | Z0.gbits.pop``1(``0,``0,``0)                                          | Counts the number of enabled primal operand bits
Method      | Z0.gbits.pop``1(``0,``0,``0,``0)                                      | Counts the number of enabled primal operand bits
Method      | Z0.gbits.pop``1(``0,``0,``0,``0,``0,``0,``0,``0)                      | Counts the number of enabled primal operand bits
Method      | Z0.gbits.rank``1(``0,System.Int32)                                    | Calculates the number of bits set up to and including the current bit
Method      | Z0.gbits.replicate``1(``0,System.Byte,System.Byte,System.Int32)       | Replicates an index-defined bitpattern a specified number of times
Method      | Z0.gbits.replicate``1(``0)                                            | [000...000101] -&gt; [101101...101101]            Replicates a source bit pattern, determined by the most significant enabled bit,  throughout the range of the type
Method      | Z0.gbits.replicate``1(System.Byte)                                    | Replicates the bit pattern defined by a byte either 2,4 or 8 times as determined by the primal target type
Method      | Z0.gbits.reverse``1(``0)                                              | Reverses the bits in the source
Method      | Z0.gbits.rotl``1(``0@,System.Byte,``0@,System.Int32)                  | Rotates source cells leftward and deposits the result in a caller-supplied target
Method      | Z0.gbits.rotl``1(``0,System.Byte)                                     | Rotates the source bits leftward by a specified shift amount
Method      | Z0.gbits.rotl``1(``0,System.Byte,System.Int32)                        | Rotates the source bits leftward by a specified shift amount
Method      | Z0.gbits.rotr``1(``0@,System.Byte,``0@,System.Int32)                  | Rotates source cells rightward and deposits the result in a caller-supplied target
Method      | Z0.gbits.rotr``1(``0,System.Byte)                                     | Rotates bits in the source rightwards by a specified shift amount
Method      | Z0.gbits.rotr``1(``0,System.Byte,System.Byte)                         | Rotates bits in the source rightwards by a specified shift amount
Method      | Z0.gbits.scatter``1(``0,``0)                                          | Scatters contiguous low bits from the source across a target according to a mask
Method      | Z0.gbits.setbit``1(``0,System.Int32,Z0.bit)                           | Sets an identified bit to a supplied value
Method      | Z0.gbits.slice``1(``0,System.Byte,System.Byte)                        | Extracts a contiguous range of bits from the source
Method      | Z0.gbits.split``1(``0,System.Int32,``0@,``0@)                         | Partitions the source value into two parts predicated on an index            [1010 11111 0011] |&gt; split 4 = [1010 1111] [0011]
Method      | Z0.gbits.testbit``1(``0,System.Byte)                                  | Returns 1 if an index-identified bit is enabled, false otherwise
Method      | Z0.gbits.testbits``1(``0,System.Span{System.Byte},System.Int32)       | Constructs a bitsequence by interrogating the source with bit state tests             and populates a caller-supplied target with the result
Method      | Z0.gbits.testbits``1(``0)                                             | Calculates a bit sequence and populates an allocated target with the result
Method      | Z0.gbits.toggle``1(``0,System.Int32)                                  | Inverts an index-identified source bit
Method      | Z0.gbits.unpack``1(System.Span{``0},System.Span{Z0.bit})              | Extracts each bit from each source element into caller-supplied target at the corresponding index
Method      | Z0.gbits.unpack``1(System.Span{``0},Z0.bit[])                         | Extracts each bit from each source element into caller-supplied target at the corresponding index
Method      | Z0.gbits.unpack``2(``0,System.Span{``1},System.Int32)                 | Projects each bit from a source value into target span element at the corresponding index
Method      | Z0.gbits.unpack``2(System.ReadOnlySpan{``0},System.Span{``1})         | Projects each source bit from each source element into an element of the target span at the corresponding index
Method      | Z0.gbits.zhi``1(``0,System.Int32)                                     | Replicates the source bits to the target and disables the high target bits starting at a specified index.
Method      | Z0.BitCalcs.bytecount(System.Int32,System.Int32)                      | Computes the number of bytes covered by a specified number of cells of a given width
Method      | Z0.BitCalcs.bytecount``1(System.Int32)                                | Computes the number of bytes that can be covered by a specified number of cells of parametric type
Method      | Z0.BitCalcs.minbytes(System.Int32)                                    | Computes the minimum numbet of bytes required to hold a specified number of bits
Method      | Z0.BitCalcs.mincells(System.UInt64,System.UInt64)                     | Computes the minimum number of cells required to store a specified number of bits
Method      | Z0.BitCalcs.mincells``1(System.UInt64)                                | Computes the minimum number of cells required to store data of a given bit width
Method      | Z0.BitCalcs.mincells``2(``0,``1)                                      | Computes the minimum number of T-cells required to store N bits
Method      | Z0.BitCalcs.tablecells(System.UInt64,System.UInt64,System.Int32)      | Computes the number of packed cells required to cover a rectangular area
Method      | Z0.BitCalcs.bitindex(System.Int32,System.Int32,System.Int32)          | Computes the 0-based linear index determined by column width and a row/col coordinate
Method      | Z0.BitCalcs.bitindex``1(System.Int32,System.Int32,``0)                | Computes the 0-based linear index determined by a row/col coordinate and natural column width
Method      | Z0.BitCalcs.tablesize(System.Int32,System.Int32)                      | Computes the number of bytes required to cover a grid, predicated on row/col counts
Method      | Z0.BitCalcs.tablesize(System.UInt64,System.UInt64)                    | Computes the number of bytes required to cover a grid, predicated on row/col counts
Method      | Z0.BitCalcs.tablesize``1(``0,``0)                                     | Computes the number of bytes required to cover a grid, predicated on row/col counts
Method      | Z0.BitCalcs.tablecells``1(System.Int32,System.Int32)                  | Computes the number of cells required to cover a rectangular region predicated on the             parametric cell type and supplied row/col dimensions
Method      | Z0.BitCalcs.tableblocks``1(Z0.N256,System.Int32,System.Int32)         | Calculates the number of 256-bit blocks reqired to cover a grid with a specified number of rows/cols
Method      | Z0.BitCalcs.tablesize``2(``0,``1)                                     | Computes the number of bytes required to cover a rectangular area, predicated on natural row/col counts
Method      | Z0.BitCalcs.tablebits``2(``0,``1)                                     | Computes the number of bits covered by a rectangular region and predicated on natural dimensions
Method      | Z0.BitCalcs.tablecells``3(``0,``1,``2)                                | Computes the number of segments required cover a grid as characterized by parametric type information
Method      | Z0.BitCalcs.tableblocks``3(Z0.N256,``0,``1,``2)                       | Calculates the number of 256-bit blocks reqired to cover a grid with natural dimensions
Method      | Z0.BitLogixOps.eval(Z0.BinaryLogicKind,Z0.bit,Z0.bit)                 | Evaluates a binary operator without lookup/delegate indirection
Method      | Z0.BitLogixOps.lookup(Z0.BinaryLogicKind)                             | Returns a kind-indentified binary operator
Method      | Z0.BitLogixOps.eval(Z0.TernaryBitLogic,Z0.bit,Z0.bit,Z0.bit)          | Evaluates an identified ternary operator
Method      | Z0.BitLogixOps.lookup(Z0.TernaryBitLogic)                             | Returns a kind-indentified ternary operator
Method      | Z0.XTend.BitSeg``1(System.Span{``0},System.Int32,System.Int32)        | Retrieves, at most, one cell's worth of bits defined by an inclusive bit index range
Method      | Z0.BitPos.FromBitIndex(System.Byte,System.UInt32)                     | Defines a bit position predicated on the width of a storage cell and the 0-based linear bit index
Method      | Z0.BitPos.FromCellIndex(System.Byte,System.UInt16,System.Byte)        | Defines a bit position predicated on the width and container-relative index of a storage cell and a cell-relative bit offset
Method      | Z0.BitPos.FromCellIndex``1(System.UInt16,System.Byte)                 | Defines a bit position predicated on a parametric cell type and a cell-relative bit offset
Method      | Z0.BitPos.FromBitIndex``1(System.UInt32)                              | Defines a bit position predicated on a parametric cell type and linear bit index
Method      | Z0.BitPos.CalcCellIndex(System.Byte,System.UInt32)                    | Computes the cell index of a linear bit index
Method      | Z0.BitPos.CalcBitOffset(System.Byte,System.UInt32)                    | Computes the offset of a linear bit index over storage cells of specified width
Method      | Z0.BitPos.CalcBitIndex(System.Byte,System.UInt32,System.Byte)         | Computes a linear bit index from a cell index and cell-relative offset
Method      | Z0.BitPos.Distance(Z0.BitPos,Z0.BitPos)                               | Computes the order-invariant absolute distance between two positions
Field       | Z0.BitPos.CellIndex                                                   | The container-relative 0-based offset of the cell
Field       | Z0.BitPos.BitOffset                                                   | The cell-relative offset of the bit
Field       | Z0.BitPos.CellWidth                                                   | The bit-width of a cell
Property    | Z0.BitPos.BitIndex                                                    | The linear/absolute bit index of the represented position
Type        | Z0.BitPos`1                                                           | Identifies a bit position within a contiguous sequence of T-element values together with their cell index/bit offsets
Field       | Z0.BitPos`1.CellIndex                                                 | The container-relative 0-based offset of the segment
Field       | Z0.BitPos`1.BitOffset                                                 | The segment-relative offset of the bit
Property    | Z0.BitPos`1.Zero                                                      | The zero position
Property    | Z0.BitPos`1.CellWidth                                                 | Specifies the number of bits that can be placed in one segment
Method      | Z0.BitPos`1.FromBitIndex(System.UInt32)                               | Constructs a bit position from a linear/absolute index
Method      | Z0.Mux.mux(System.Byte,System.Byte)                                   | Uses the first three bits of the control operand to select one of 8 bits from the input operand
Method      | Z0.Mux.mux(System.UInt16,System.Byte)                                 | Uses the four bits of the control operand to select one of 16 bits from the input operand
Method      | Z0.Mux.mux(System.UInt32,System.Byte)                                 | Uses the first 5 bits of the control operand to select one of 32 bits from the input operand
Method      | Z0.Mux.mux(System.UInt64,System.Byte)                                 | Uses the first 6 bits of the control operand to select one of 64 bits from the source operand
Type        | Z0.BitLogix                                                           | Defines logical operations over 1, 2 or 3 bits
Property    | Z0.BitLogix.UnaryOpKinds                                              | Advertises the supported unary opeators
Property    | Z0.BitLogix.BinaryOpKinds                                             | Advertises the supported binary opeators
Property    | Z0.BitLogix.TernaryOpKinds                                            | Advertises the supported ternary opeators
Method      | Z0.BitLogix.Lookup(Z0.UnaryBitLogic)                                  | Returns a kind-indentified unary operator
Method      | Z0.BitLogix.Lookup(Z0.BinaryBitLogic)                                 | Returns a kind-indentified unary operator
Method      | Z0.BitLogix.Lookup(Z0.BinaryLogicKind)                                | Returns a kind-indentified binary operator
Method      | Z0.BitLogix.Lookup(Z0.TernaryBitLogic)                                | Returns a kind-indentified ternary operator
Method      | Z0.BitLogix.Evaluate(Z0.UnaryBitLogic,Z0.bit)                         | Evaluates a unary operator over a supplied operand
Method      | Z0.BitLogix.Evaluate(Z0.BinaryLogicKind,Z0.bit,Z0.bit)                | Evaluates a bianry operator over supplied operands
Method      | Z0.BitLogix.Evaluate(Z0.BinaryBitLogic,Z0.bit,Z0.bit)                 | Evaluates a bianry operator over supplied operands
Method      | Z0.BitLogix.Evaluate(Z0.TernaryBitLogic,Z0.bit,Z0.bit,Z0.bit)         | Evaluates a ternary operator over supplied operands
Type        | Z0.BinaryBitLogic                                                     | Classifies binary boolean and bitwise logical operations
Field       | Z0.BinaryBitLogic.False                                               | Classifies a logical  binary operator false(a,b) := bv(0000)
Field       | Z0.BinaryBitLogic.And                                                 | Identifies the operator and(a,b) := bv(1000)
Field       | Z0.BinaryBitLogic.CNonImpl                                            | Identifies the operator cnotimply(a,b) := and(a, ~b) = bv(0010)
Field       | Z0.BinaryBitLogic.LProject                                            | Classifes a logical binary operator left(a,b) := a = bv(1010)
Field       | Z0.BinaryBitLogic.NonImpl                                             | Identifies a logical binary operator notimply(a,b) := and(~a, b) = bv(0100)
Field       | Z0.BinaryBitLogic.RProject                                            | Identifies the operator right(a,b) := b = bv(1100)
Field       | Z0.BinaryBitLogic.Xor                                                 | Identifies the operator xor(a,b) := bv(0110)
Field       | Z0.BinaryBitLogic.Or                                                  | Identifies the operator or(a,b) := bv(1110)
Field       | Z0.BinaryBitLogic.Nor                                                 | Identifies the operator that computes nor(a,b) := not(or(a,b)) = bv(0001)
Field       | Z0.BinaryBitLogic.Xnor                                                | Classifies a binary operator xnor(a,b) := not(xor(a,b)) = bv(1001)
Field       | Z0.BinaryBitLogic.RNot                                                | Classifes a logical binary operator rnot(a,b) := not(b) = bv(0011)
Field       | Z0.BinaryBitLogic.Impl                                                | Identifies the operator imply(a,b) := or(a, not(b)) = bv(1011)
Field       | Z0.BinaryBitLogic.LNot                                                | Identifies the operator lnot(a,b) := not(a) = bv(0101)
Field       | Z0.BinaryBitLogic.CImpl                                               | Identifies the operator cimply(a,b) := or(not(a), b) = bv(1101)
Field       | Z0.BinaryBitLogic.Nand                                                | Identifies the operator nand(a,b) := not(and(a,b)) = bv(0111)
Field       | Z0.BinaryBitLogic.True                                                | Identifies the operator true(a,b) = bv(1111)
Type        | Z0.TernaryBitLogic                                                    | Classifies ternary logic and bitwise operators
Field       | Z0.TernaryBitLogic.None                                               | The empty identity
Field       | Z0.TernaryBitLogic.X01                                                | nor(a, or(b,c))
Field       | Z0.TernaryBitLogic.X02                                                | and(c, nor(b,a))
Field       | Z0.TernaryBitLogic.X03                                                | nor(b,a)
Field       | Z0.TernaryBitLogic.X04                                                | and(b, nor(a,c))
Field       | Z0.TernaryBitLogic.X05                                                | nor(c,a)
Field       | Z0.TernaryBitLogic.X06                                                | and(not(a), xor(b,c))
Field       | Z0.TernaryBitLogic.X07                                                | nor(a, and(b,c))
Field       | Z0.TernaryBitLogic.X08                                                | and(and(not(a),b), c)
Field       | Z0.TernaryBitLogic.X09                                                | nor(a, xor(b,c))
Field       | Z0.TernaryBitLogic.X0A                                                | and(c, not(a))
Field       | Z0.TernaryBitLogic.X0B                                                | and(not(a), or(not(b),  c))
Field       | Z0.TernaryBitLogic.X0C                                                | and(b, not(a))
Field       | Z0.TernaryBitLogic.X0D                                                | and(not(a), or(b, not(c)))
Field       | Z0.TernaryBitLogic.X0E                                                | and(not(a),or(b,c))
Field       | Z0.TernaryBitLogic.X0F                                                | not(a)
Field       | Z0.TernaryBitLogic.X10                                                | and(a, nor(b, c))
Field       | Z0.TernaryBitLogic.X11                                                | nor(c,b)
Field       | Z0.TernaryBitLogic.X12                                                | and(not(b), xor(a,c))
Field       | Z0.TernaryBitLogic.X13                                                | nor(b, and(a,c))
Field       | Z0.TernaryBitLogic.X14                                                | and(not(c), xor(a,b))
Field       | Z0.TernaryBitLogic.X15                                                | 
Field       | Z0.TernaryBitLogic.X16                                                | 
Field       | Z0.TernaryBitLogic.X17                                                | 
Field       | Z0.TernaryBitLogic.X18                                                | and(xor(a,b), xor(a,c))
Field       | Z0.TernaryBitLogic.X19                                                | xor(xor(b,c), and(a, and(b,c)))
Field       | Z0.TernaryBitLogic.X1A                                                | not(and(and(a,b), xor(a, c)))
Field       | Z0.TernaryBitLogic.X1B                                                | 
Field       | Z0.TernaryBitLogic.X1C                                                | 
Field       | Z0.TernaryBitLogic.X1D                                                | 
Field       | Z0.TernaryBitLogic.X1E                                                | 
Field       | Z0.TernaryBitLogic.X1F                                                | 
Field       | Z0.TernaryBitLogic.X20                                                | 
Field       | Z0.TernaryBitLogic.X21                                                | 
Field       | Z0.TernaryBitLogic.X22                                                | 
Field       | Z0.TernaryBitLogic.X23                                                | 
Field       | Z0.TernaryBitLogic.X24                                                | 
Field       | Z0.TernaryBitLogic.X25                                                | 
Field       | Z0.TernaryBitLogic.X26                                                | and(not(and(a,b)), xor(a, not(c)));
Field       | Z0.TernaryBitLogic.X27                                                | 
Field       | Z0.TernaryBitLogic.X28                                                | 
Field       | Z0.TernaryBitLogic.X29                                                | select(c, xor(b,a), nor(b,a))
Field       | Z0.TernaryBitLogic.X2A                                                | and(c, nand(b,a))
Field       | Z0.TernaryBitLogic.X2B                                                | select(c, nand(b,a), nor(b,a))
Field       | Z0.TernaryBitLogic.X2C                                                | and(or(b,c), xor(a,b))
Field       | Z0.TernaryBitLogic.X2D                                                | xor(a,(or(b,not(c))))
Field       | Z0.TernaryBitLogic.X2E                                                | 
Field       | Z0.TernaryBitLogic.X2F                                                | 
Field       | Z0.TernaryBitLogic.X30                                                | cnotimply(a,b)
Field       | Z0.TernaryBitLogic.X31                                                | and(not(b), or(a,not(c)))
Field       | Z0.TernaryBitLogic.X32                                                | 
Field       | Z0.TernaryBitLogic.X33                                                | not(b)
Field       | Z0.TernaryBitLogic.X34                                                | 
Field       | Z0.TernaryBitLogic.X35                                                | 
Field       | Z0.TernaryBitLogic.X36                                                | 
Field       | Z0.TernaryBitLogic.X37                                                | 
Field       | Z0.TernaryBitLogic.X38                                                | 
Field       | Z0.TernaryBitLogic.X39                                                | 
Field       | Z0.TernaryBitLogic.X3A                                                | select(a, not(b), c)
Field       | Z0.TernaryBitLogic.X3B                                                | or(and(not(a),c),not(b))
Field       | Z0.TernaryBitLogic.X3C                                                | xor(b,a)
Field       | Z0.TernaryBitLogic.X3D                                                | or(xor(b,a),nor(a,c))
Field       | Z0.TernaryBitLogic.X3E                                                | or(and(not(a),c),xor(a,b))
Field       | Z0.TernaryBitLogic.X3F                                                | nand(b,a)
Field       | Z0.TernaryBitLogic.X40                                                | 
Field       | Z0.TernaryBitLogic.X41                                                | 
Field       | Z0.TernaryBitLogic.X42                                                | 
Field       | Z0.TernaryBitLogic.X43                                                | and(not(and(a,c)), xor(a,not(b)))
Field       | Z0.TernaryBitLogic.X44                                                | cnotimply(b,c)
Field       | Z0.TernaryBitLogic.X45                                                | 
Field       | Z0.TernaryBitLogic.X46                                                | 
Field       | Z0.TernaryBitLogic.X47                                                | 
Field       | Z0.TernaryBitLogic.X48                                                | and(b,xor(a,c))
Field       | Z0.TernaryBitLogic.X49                                                | select(b,xor(a,c),nor(a,c))
Field       | Z0.TernaryBitLogic.X4A                                                | and(or(b,c), xor(a,c))
Field       | Z0.TernaryBitLogic.X4B                                                | xor(a, or(not(b), c))
Field       | Z0.TernaryBitLogic.X4C                                                | and(b, nand(a,c))
Field       | Z0.TernaryBitLogic.X4D                                                | select(b, nand(a,c),nor(a,c))
Field       | Z0.TernaryBitLogic.X4E                                                | select(c, not(a), b)
Field       | Z0.TernaryBitLogic.X4F                                                | or(not(a), andnot(b,c))
Field       | Z0.TernaryBitLogic.X50                                                | cnotimply(a,c)
Field       | Z0.TernaryBitLogic.X51                                                | and(not(c),or(a,not(b)))
Field       | Z0.TernaryBitLogic.X52                                                | and(not(and(b,c)),xor(a,c))
Field       | Z0.TernaryBitLogic.X53                                                | select(a, not(c), not(b))
Field       | Z0.TernaryBitLogic.X54                                                | and(not(c), or(a,b))
Field       | Z0.TernaryBitLogic.X55                                                | not(c)
Field       | Z0.TernaryBitLogic.X56                                                | xor(c,or(b,a))
Field       | Z0.TernaryBitLogic.X57                                                | nand(c,or(b,a))
Field       | Z0.TernaryBitLogic.X58                                                | and(or(a,b),xor(a,c))
Field       | Z0.TernaryBitLogic.X59                                                | xor(c, or(a,xor1(b)))
Field       | Z0.TernaryBitLogic.X5A                                                | xor(c,a)
Field       | Z0.TernaryBitLogic.X5B                                                | or(xor(a,c), xor(or(a,b),on))
Field       | Z0.TernaryBitLogic.X5C                                                | select(a,not(c), b)
Field       | Z0.TernaryBitLogic.X5D                                                | or(not(c), and(not(a), b))
Field       | Z0.TernaryBitLogic.X5E                                                | or(and(not(c),b),(xor(a,c)))
Field       | Z0.TernaryBitLogic.X5F                                                | 
Field       | Z0.TernaryBitLogic.X60                                                | 
Field       | Z0.TernaryBitLogic.X61                                                | 
Field       | Z0.TernaryBitLogic.X62                                                | 
Field       | Z0.TernaryBitLogic.X63                                                | 
Field       | Z0.TernaryBitLogic.X64                                                | 
Field       | Z0.TernaryBitLogic.X65                                                | 
Field       | Z0.TernaryBitLogic.X66                                                | 
Field       | Z0.TernaryBitLogic.X67                                                | 
Field       | Z0.TernaryBitLogic.X68                                                | 
Field       | Z0.TernaryBitLogic.X69                                                | 
Field       | Z0.TernaryBitLogic.X6A                                                | 
Field       | Z0.TernaryBitLogic.X6B                                                | 
Field       | Z0.TernaryBitLogic.X6C                                                | 
Field       | Z0.TernaryBitLogic.X6D                                                | 
Field       | Z0.TernaryBitLogic.X6E                                                | 
Field       | Z0.TernaryBitLogic.X6F                                                | 
Field       | Z0.TernaryBitLogic.X70                                                | 
Field       | Z0.TernaryBitLogic.X71                                                | 
Field       | Z0.TernaryBitLogic.X72                                                | 
Field       | Z0.TernaryBitLogic.X73                                                | 
Field       | Z0.TernaryBitLogic.X74                                                | 
Field       | Z0.TernaryBitLogic.X75                                                | 
Field       | Z0.TernaryBitLogic.X76                                                | 
Field       | Z0.TernaryBitLogic.X77                                                | 
Field       | Z0.TernaryBitLogic.X78                                                | 
Field       | Z0.TernaryBitLogic.X79                                                | 
Field       | Z0.TernaryBitLogic.X7A                                                | 
Field       | Z0.TernaryBitLogic.X7B                                                | 
Field       | Z0.TernaryBitLogic.X7C                                                | 
Field       | Z0.TernaryBitLogic.X7D                                                | 
Field       | Z0.TernaryBitLogic.X7E                                                | 
Field       | Z0.TernaryBitLogic.X7F                                                | 
Field       | Z0.TernaryBitLogic.X80                                                | 
Field       | Z0.TernaryBitLogic.X81                                                | 
Field       | Z0.TernaryBitLogic.X82                                                | 
Field       | Z0.TernaryBitLogic.X83                                                | 
Field       | Z0.TernaryBitLogic.X84                                                | 
Field       | Z0.TernaryBitLogic.X85                                                | 
Field       | Z0.TernaryBitLogic.X86                                                | 
Field       | Z0.TernaryBitLogic.X87                                                | 
Field       | Z0.TernaryBitLogic.X88                                                | 
Field       | Z0.TernaryBitLogic.X89                                                | 
Field       | Z0.TernaryBitLogic.X8A                                                | 
Field       | Z0.TernaryBitLogic.X8B                                                | 
Field       | Z0.TernaryBitLogic.X8C                                                | 
Field       | Z0.TernaryBitLogic.X8D                                                | 
Field       | Z0.TernaryBitLogic.X8E                                                | 
Field       | Z0.TernaryBitLogic.X8F                                                | 
Field       | Z0.TernaryBitLogic.X90                                                | 
Field       | Z0.TernaryBitLogic.X91                                                | 
Field       | Z0.TernaryBitLogic.X92                                                | 
Field       | Z0.TernaryBitLogic.X93                                                | 
Field       | Z0.TernaryBitLogic.X94                                                | 
Field       | Z0.TernaryBitLogic.X95                                                | 
Field       | Z0.TernaryBitLogic.X96                                                | 
Field       | Z0.TernaryBitLogic.X97                                                | 
Field       | Z0.TernaryBitLogic.X98                                                | 
Field       | Z0.TernaryBitLogic.X99                                                | 
Field       | Z0.TernaryBitLogic.X9A                                                | 
Field       | Z0.TernaryBitLogic.X9B                                                | 
Field       | Z0.TernaryBitLogic.X9C                                                | 
Field       | Z0.TernaryBitLogic.X9D                                                | 
Field       | Z0.TernaryBitLogic.X9E                                                | 
Field       | Z0.TernaryBitLogic.X9F                                                | 
Field       | Z0.TernaryBitLogic.XA0                                                | 
Field       | Z0.TernaryBitLogic.XA1                                                | 
Field       | Z0.TernaryBitLogic.XA2                                                | 
Field       | Z0.TernaryBitLogic.XA3                                                | 
Field       | Z0.TernaryBitLogic.XA4                                                | 
Field       | Z0.TernaryBitLogic.XA5                                                | 
Field       | Z0.TernaryBitLogic.XA6                                                | 
Field       | Z0.TernaryBitLogic.XA7                                                | 
Field       | Z0.TernaryBitLogic.XA8                                                | 
Field       | Z0.TernaryBitLogic.XA9                                                | 
Field       | Z0.TernaryBitLogic.XAA                                                | third(a,b,c) := c
Field       | Z0.TernaryBitLogic.XAB                                                | 
Field       | Z0.TernaryBitLogic.XAC                                                | 
Field       | Z0.TernaryBitLogic.XAD                                                | 
Field       | Z0.TernaryBitLogic.XAE                                                | 
Field       | Z0.TernaryBitLogic.XAF                                                | 
Field       | Z0.TernaryBitLogic.XB0                                                | 
Field       | Z0.TernaryBitLogic.XB1                                                | 
Field       | Z0.TernaryBitLogic.XB2                                                | 
Field       | Z0.TernaryBitLogic.XB3                                                | 
Field       | Z0.TernaryBitLogic.XB4                                                | 
Field       | Z0.TernaryBitLogic.XB5                                                | 
Field       | Z0.TernaryBitLogic.XB6                                                | 
Field       | Z0.TernaryBitLogic.XB7                                                | 
Field       | Z0.TernaryBitLogic.XB8                                                | 
Field       | Z0.TernaryBitLogic.XB9                                                | 
Field       | Z0.TernaryBitLogic.XBA                                                | 
Field       | Z0.TernaryBitLogic.XBB                                                | 
Field       | Z0.TernaryBitLogic.XBC                                                | 
Field       | Z0.TernaryBitLogic.XBD                                                | 
Field       | Z0.TernaryBitLogic.XBE                                                | 
Field       | Z0.TernaryBitLogic.XBF                                                | 
Field       | Z0.TernaryBitLogic.XC0                                                | 
Field       | Z0.TernaryBitLogic.XC1                                                | 
Field       | Z0.TernaryBitLogic.XC2                                                | 
Field       | Z0.TernaryBitLogic.XC3                                                | 
Field       | Z0.TernaryBitLogic.XC4                                                | 
Field       | Z0.TernaryBitLogic.XC5                                                | 
Field       | Z0.TernaryBitLogic.XC6                                                | 
Field       | Z0.TernaryBitLogic.XC7                                                | 
Field       | Z0.TernaryBitLogic.XC8                                                | 
Field       | Z0.TernaryBitLogic.XC9                                                | 
Field       | Z0.TernaryBitLogic.XCA                                                | select(a,b,c)
Field       | Z0.TernaryBitLogic.XCB                                                | second(a,b,c) := b
Field       | Z0.TernaryBitLogic.XCC                                                | 
Field       | Z0.TernaryBitLogic.XCD                                                | 
Field       | Z0.TernaryBitLogic.XCE                                                | 
Field       | Z0.TernaryBitLogic.XCF                                                | 
Field       | Z0.TernaryBitLogic.XD0                                                | 
Field       | Z0.TernaryBitLogic.XD1                                                | 
Field       | Z0.TernaryBitLogic.XD2                                                | 
Field       | Z0.TernaryBitLogic.XD3                                                | 
Field       | Z0.TernaryBitLogic.XD4                                                | 
Field       | Z0.TernaryBitLogic.XD5                                                | 
Field       | Z0.TernaryBitLogic.XD6                                                | 
Field       | Z0.TernaryBitLogic.XD7                                                | 
Field       | Z0.TernaryBitLogic.XD8                                                | 
Field       | Z0.TernaryBitLogic.XD9                                                | 
Field       | Z0.TernaryBitLogic.XDA                                                | 
Field       | Z0.TernaryBitLogic.XDB                                                | 
Field       | Z0.TernaryBitLogic.XDC                                                | 
Field       | Z0.TernaryBitLogic.XDD                                                | 
Field       | Z0.TernaryBitLogic.XDE                                                | 
Field       | Z0.TernaryBitLogic.XDF                                                | 
Field       | Z0.TernaryBitLogic.XE0                                                | 
Field       | Z0.TernaryBitLogic.XE1                                                | 
Field       | Z0.TernaryBitLogic.XE2                                                | 
Field       | Z0.TernaryBitLogic.XE3                                                | 
Field       | Z0.TernaryBitLogic.XE4                                                | 
Field       | Z0.TernaryBitLogic.XE5                                                | 
Field       | Z0.TernaryBitLogic.XE6                                                | 
Field       | Z0.TernaryBitLogic.XE7                                                | 
Field       | Z0.TernaryBitLogic.XE8                                                | 
Field       | Z0.TernaryBitLogic.XE9                                                | 
Field       | Z0.TernaryBitLogic.XEA                                                | 
Field       | Z0.TernaryBitLogic.XEB                                                | 
Field       | Z0.TernaryBitLogic.XEC                                                | 
Field       | Z0.TernaryBitLogic.XED                                                | 
Field       | Z0.TernaryBitLogic.XEE                                                | 
Field       | Z0.TernaryBitLogic.XEF                                                | 
Field       | Z0.TernaryBitLogic.XF0                                                | 
Field       | Z0.TernaryBitLogic.XF1                                                | 
Field       | Z0.TernaryBitLogic.XF2                                                | 
Field       | Z0.TernaryBitLogic.XF3                                                | 
Field       | Z0.TernaryBitLogic.XF4                                                | 
Field       | Z0.TernaryBitLogic.XF5                                                | 
Field       | Z0.TernaryBitLogic.XF6                                                | 
Field       | Z0.TernaryBitLogic.XF7                                                | 
Field       | Z0.TernaryBitLogic.XF8                                                | 
Field       | Z0.TernaryBitLogic.XF9                                                | 
Field       | Z0.TernaryBitLogic.XFA                                                | 
Field       | Z0.TernaryBitLogic.XFB                                                | 
Field       | Z0.TernaryBitLogic.XFC                                                | 
Field       | Z0.TernaryBitLogic.XFD                                                | 
Field       | Z0.TernaryBitLogic.XFE                                                | 
Field       | Z0.TernaryBitLogic.XFF                                                | Pervasive and invariant truth
Type        | Z0.UnaryBitLogic                                                      | Classifies unary logic operators
Field       | Z0.UnaryBitLogic.False                                                | The unary operator that always returns false
Field       | Z0.UnaryBitLogic.Not                                                  | Logial NOT
Field       | Z0.UnaryBitLogic.Identity                                             | The identity operator
Field       | Z0.UnaryBitLogic.True                                                 | The unary operator that always returns true
Type        | Z0.BinaryArithmeticKind                                               | Identifies binary arithmetic operators classes
Field       | Z0.BinaryArithmeticKind.None                                          | The empty identity
Type        | Z0.BinaryComparisonKind                                               | Identifies binary comparison predicates
Field       | Z0.BinaryComparisonKind.None                                          | The empty identity
Field       | Z0.BinaryComparisonKind.Eq                                            | Classifies a binary operator that returns true iff its operands are equal
Field       | Z0.BinaryComparisonKind.Lt                                            | Classifies a binary operator that returns true if the left operand is strictly smaller than the left operand
Field       | Z0.BinaryComparisonKind.LtEq                                          | Classifies a binary operator that returns true if the left operand is smaller than or equal to the left operand
Field       | Z0.BinaryComparisonKind.Gt                                            | Classifies a binary operator that returns true if the left operand is strictly greater than the left operand
Field       | Z0.BinaryComparisonKind.GtEq                                          | Classifies a binary operator that returns true if the left operand is greater than or equal to the left operand
Field       | Z0.BinaryComparisonKind.Neq                                           | Classifies a binary operator that returns true iff its operands are not equal
Type        | Z0.BinaryLogicKind                                                    | Classifies binary boolean and bitwise logical operations
Field       | Z0.BinaryLogicKind.None                                               | The empty identity which, unfortunately conflicts with the inescapable defintion of 'False'
Field       | Z0.BinaryLogicKind.False                                              | Classifies a logical  binary operator false(a,b) := bv(0000)
Field       | Z0.BinaryLogicKind.And                                                | Classifies a logical binary operator and(a,b) := bv(1000)
Field       | Z0.BinaryLogicKind.CNonImpl                                           | Classifies a logical binary operator cnotimply(a,b) := and(a, ~b) = bv(0010)
Field       | Z0.BinaryLogicKind.LProject                                           | Classifes a logical binary operator left(a,b) := a = bv(1010)
Field       | Z0.BinaryLogicKind.NonImpl                                            | Identifies a logical binary operator notimply(a,b) := and(~a, b) = bv(0100)
Field       | Z0.BinaryLogicKind.RProject                                           | Classifies a logical binary operator right(a,b) := b = bv(1100)
Field       | Z0.BinaryLogicKind.Xor                                                | Classifies a logical binary operator xor(a,b) := bv(0110)
Field       | Z0.BinaryLogicKind.Or                                                 | Classifies a logical binary operator or(a,b) := bv(1110)
Field       | Z0.BinaryLogicKind.Nor                                                | Classifies a logical binary operator that computes nor(a,b) := not(or(a,b)) = bv(0001)
Field       | Z0.BinaryLogicKind.Xnor                                               | Classifies a binary operator xnor(a,b) := not(xor(a,b)) = bv(1001)
Field       | Z0.BinaryLogicKind.RNot                                               | Classifes a logical binary operator rnot(a,b) := not(b) = bv(0011)
Field       | Z0.BinaryLogicKind.Impl                                               | Classifies a logical binary operator imply(a,b) := or(a, not(b)) = bv(1011)
Field       | Z0.BinaryLogicKind.LNot                                               | Classifies a logical binary operator lnot(a,b) := not(a) = bv(0101)
Field       | Z0.BinaryLogicKind.CImpl                                              | Classifies a logical binary operator cimply(a,b) := or(not(a), b) = bv(1101)
Field       | Z0.BinaryLogicKind.Nand                                               | Classifies a logical binary operator nand(a,b) := not(and(a,b)) = bv(0111)
Field       | Z0.BinaryLogicKind.True                                               | Classifies a logical binary operator true(a,b) = bv(1111)
Type        | Z0.UnaryArithmeticKind                                                | Classifies unary arithmetic operators
Type        | Z0.BinaryPred`1                                                       | Defines the canonical shape of a 2-argument function over a parametric domain and boolean codomain
Type        | Z0.Shifter`1                                                          | Defines the canonical shape of a bitwise shift function
Property    | Z0.NumericLogixHost.UnaryLogicKinds                                   | Advertises the supported unary bitlogic operators
Property    | Z0.NumericLogixHost.BinaryLogicKinds                                  | Advertises the supported binary bitlogic operators
Property    | Z0.NumericLogixHost.TernaryLogicKinds                                 | Advertises the supported ternary bitlogic opeators
Property    | Z0.NumericLogixHost.UnaryAritmeticKinds                               | Advertises the supported unary arithmetic operators
Property    | Z0.NumericLogixHost.BinaryArithmeticKinds                             | Advertises the supported binary arithmetic operators
Property    | Z0.NumericLogixHost.BinaryComparisonKinds                             | Advertises the supported comparison operators
Method      | Z0.NumericLogixHost.eval``1(Z0.TernaryBitLogic,``0,``0,``0)           | Evaluates an identified ternary operator
Property    | Z0.IScalarBits`1.Scalar                                               | The value over which the bitvector is defined
Method      | Z0.BitEdit.Over``1(``0@)                                              | Wraps a bitview around a generic reference
Type        | Z0.BitEdit`1                                                          | Represents a value as an ordered sequence of bits/bytes
Field       | Z0.BitEdit`1.Bytes                                                    | The data over which the view is constructed
Property    | Z0.BitEdit`1.ByteCount                                                | The total number of represented bytes
Property    | Z0.BitEdit`1.BitCount                                                 | The total number of represented bits
Property    | Z0.BitEdit`1.Item(Z0.ByteSize)                                        | Selects an offset-identified byte
Property    | Z0.BitEdit`1.Item(Z0.ByteSize,System.Byte)                            | Queries/Manipulates the source at the bit-level
Method      | Z0.BitView.Over``1(``0@)                                              | Wraps a bitview around a generic reference
Type        | Z0.BitView`1                                                          | Represents a value as an ordered sequence of bits/bytes
Field       | Z0.BitView`1.Bytes                                                    | The data over which the view is constructed
Property    | Z0.BitView`1.ByteCount                                                | The total number of represented bytes
Property    | Z0.BitView`1.BitCount                                                 | The total number of represented bits
Property    | Z0.BitView`1.Item(Z0.ByteSize)                                        | Selects an offset-identified byte
Property    | Z0.BitView`1.Item(Z0.ByteSize,System.Byte)                            | Queries/Manipulates the source at the bit-level
