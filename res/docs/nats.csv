Type        | Z0.NatTry                                                             | Defines proof attempts for type naturals
Method      | Z0.NatTry.Try``1(System.Func{``0},System.Action{System.Exception})    | Evaluates a function within a try block and returns the value of the computation if             successful; otherwise, returns None together with the reported exceptions
Method      | Z0.NatTry.TryEven``1(``0)                                             | Attempts to prove that k:K1 =&gt; k % 2 == 0            Signals success by returning evidence            Signals failure by returning none
Method      | Z0.NatTry.TryEven``1                                                  | Attempts to prove that k:K1 =&gt; k % 2 == 0            Signals success by returning evidence            Signals failure by returning none
Method      | Z0.NatTry.tryOdd``1(``0)                                              | Attempts to prove that k:K1 =&gt; k % 2 != 0            Signals success by returning evidence            Signals failure by returning none
Method      | Z0.NatTry.TryOdd``1                                                   | Attempts to prove that k:K1 =&gt; k % 2 != 0            Signals success by returning evidence            Signals failure by returning none
Method      | Z0.NatTry.TryNonzero``1                                               | Attempts to prove that k:K =&gt; k != 0            Signals success by returning evidence            Signals failure by returning none
Method      | Z0.NatTry.TryNonzero``1(``0)                                          | Attempts to prove that k:K =&gt; k != 0            Signals success by returning evidence            Signals failure by returning none
Method      | Z0.NatTry.TryPrime``1                                                 | If possible, constructs evidence that n:K =&gt; n prime; otherwise,            yields none
Method      | Z0.NatTry.TryPrime``1(``0)                                            | If possible, constructs evidence that n:K =&gt; n prime; otherwise,            yields none
Method      | Z0.NatClaim.sum``2(``0,``1,System.UInt64)                             | Attempts to prove that k1 + k2 = expected             Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.eq``1(System.UInt64)                                      | Retrieves the value of the natural number associated with a typenat            and retuns the value if it agrees with a supplied expected value; othwise,            raises an exception
Method      | Z0.NatClaim.eq``1(``0,System.UInt64)                                  | Retrieves the value of the natural number associated with a typenat            and retuns the value if it agrees with a supplied expected value; othwise,            raises an exception
Method      | Z0.NatClaim.eq``1(System.Int32)                                       | Attempts to prove that k:K =&gt; k == expected            Registers success by returning the expected value            Registers failure by raising an error
Method      | Z0.NatClaim.eq``1(``0,System.Int32)                                   | Attempts to prove that k:K =&gt; k == expected            Registers success by returning the expected value            Registers failure by raising an error
Method      | Z0.NatClaim.eq``1(System.UInt32,System.Boolean)                       | Prooves that a test value is equal to the value of a natural representative
Method      | Z0.NatClaim.eq``2(``0,``1)                                            | Attemts to construct evidence that k1 == k2
Method      | Z0.NatClaim.neq``2(``0,``1)                                           | Attemts to construct evidence that k1 != k2
Method      | Z0.NatClaim.gt``1(``0,System.UInt64)                                  | Attempts to prove k &gt; a            Signals success by returning true            Signals failure by raising an error
Method      | Z0.NatClaim.gteq``1(``0,System.UInt64)                                | Attempts to prove k &gt;= a            Signals success by returning true            Signals failure by raising an error
Method      | Z0.NatClaim.gt``2(``0,``1)                                            | Attempts to prove k1 &gt; k2            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.length``2(System.Collections.Generic.IReadOnlyList{``1})  | Attempts to prove that the k:K =&gt; src.length = k            Registers success by returning src            Registers failure by raising an error
Method      | Z0.NatClaim.length``2(``0,System.Collections.Generic.IReadOnlyList{``1})| Attempts to prove that the k:K =&gt; src.length = k            Registers success by returning src            Registers failure by raising an error
Method      | Z0.NatClaim.length``2(``0,``1[])                                      | Attempts to prove that the k:K =&gt; src.length = k            Registers success by returning src            Registers failure by raising an error
Method      | Z0.NatClaim.length``2(``1[])                                          | Attempts to prove that the k:K =&gt; src.length = k            Registers success by returning src            Registers failure by raising an error
Method      | Z0.NatClaim.even``1                                                   | Attempts to prove that k:K1 =&gt; k % 2 == 0            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.even``1(``0)                                              | Attempts to prove that k:K1 =&gt; k % 2 == 0            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.odd``1                                                    | Attempts to prove that k:K1 =&gt; k % 2 != 0            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.odd``1(``0)                                               | Attempts to prove that k:K1 =&gt; k % 2 != 0            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.mul``2(System.UInt32)                                     | Attempts to prove k1 * k2 = expected             Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.mul``2(``0,``1,System.UInt32)                             | Attempts to prove k1 * k2 = expected             Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.product``2(``0,``1)                                       | Constructs a natural representative that encodes the product of two naturals
Method      | Z0.NatClaim.failure``1(System.String,System.UInt32,System.Boolean)    | Registers natural constraint failure
Method      | Z0.NatClaim.failure``1(System.String,System.UInt64,System.Boolean)    | Registers natural constraint failure
Method      | Z0.NatClaim.failure``2(System.String,``1,System.Boolean)              | Registers a natural constraint failure
Method      | Z0.NatClaim.failure``2(System.String,System.Boolean)                  | Registers a natural pair constraint failure
Method      | Z0.NatClaim.nonzero``1                                                | Attempts to prove that k:K =&gt; k != 0            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.nonzero``1(``0)                                           | Attempts to prove that k:K =&gt; k != 0            Signals success by returning evidence            Signals failure by raising an error
Method      | Z0.NatClaim.prime``1                                                  | If possible, constructs evidence that n:K =&gt; n prime; otherwise,            raises an error
Method      | Z0.NatClaim.prime``1(``0)                                             | If possible, constructs evidence that n:K =&gt; n prime; otherwise,            raises an error
Method      | Z0.NatClaim.prior``2(``0,``1)                                         | Attempts construct evidence that k1 = k2 + 1;
Method      | Z0.XTend.NatSpan``2(Z0.IPolyrand,``0,System.Nullable{Z0.Interval{``1}},System.Func{``1,System.Boolean})| Allocates a span of natural dimensions and populates it with random values
Method      | Z0.XTend.TableSpan``3(Z0.IPolyrand,``0,``1)                           | Allocates a table span of natural dimensions and populates the cells with random values
Method      | Z0.XTend.TableSpan``3(Z0.IPolyrand,``0,``1,Z0.Interval{``2})          | Allocates a table span of natural dimensions and populates the cells with random values that            are confined to a specified domain
Type        | Z0.NatEq`2                                                            | Captures evidence that n1 == n2
Type        | Z0.NatNEq`2                                                           | Captures evidence that k1 != k2
Type        | Z0.NatEven`1                                                          | Captures evidence that k % 2 == 0
Type        | Z0.NatGt`2                                                            | Captures evidence that k1 &gt; k2
Type        | Z0.Nonzero`1                                                          | Captures evidence that k != 0
Type        | Z0.NatOdd`1                                                           | Captures evidence that k % 2 != 0
Type        | Z0.Pow`2                                                              | Encodes a natural number k := b^e
Method      | Z0.Pow`2.pow(System.UInt64,System.UInt64)                             | Raises a baise to a power
Method      | Z0.NatPrime.test(System.UInt64)                                       | Determines whether an integer is prime, very inefficiently
Type        | Z0.NatNext`2                                                          | Captures evidence that k1 + 1 = k2
Type        | Z0.NatPrior`2                                                         | Captures evidence that k1 - 1 = k2
Type        | Z0.Product`2                                                          | Encodes a natural number k := k1*k2
Type        | Z0.Sub`2                                                              | Encodes a natural number k := k1 - k2
Type        | Z0.NatSum`2                                                           | Encodes a natural number k := k1 + k2
Method      | nfunc.natrep``1                                                       | Constructs a natural representative
Method      | nfunc.demand(System.Boolean,System.String)                            | Demands truth that is enforced with an exeption upon false
