Property    | Z0.Kinds.v128                                                         | Specifies the 128-bit vector type classifier
Property    | Z0.Kinds.v256                                                         | Specifies the 256-bit vector type classifier
Property    | Z0.Kinds.v512                                                         | Specifies the 512-bit vector type classifier
Method      | Z0.Kinds.vk128``1(``0)                                                | Reifies a cell-parametric 128-bit vector kind
Method      | Z0.Kinds.vk256``1(``0)                                                | Reifies a cell-parametric 256-bit vector kind
Method      | Z0.Kinds.vk512``1(``0)                                                | Reifies a cell-parametric 512-bit vector kind
Property    | Z0.IVectorKind.TypeDefinition                                         | The vector's generic type definition
Property    | Z0.IVectorKind.CellKind                                               | The vector numeric cell kind
Property    | Z0.IVectorKind.CellWidth                                              | The vector numeric cell width
Method      | Z0.IVectorKind.Close                                                  | The reified vector type as determined by kind facets
Type        | Z0.IVectorType`2                                                      | Characterizes an F-bound polymorphic reification that identifies an intrinsic vector generic type definition
Type        | Z0.A0`1                                                               | Classifies generic operations of arity 0
Type        | Z0.A1`1                                                               | Classifies parametric operations of arity 1
Type        | Z0.A2`1                                                               | Classifies parametric operations of arity 2
Type        | Z0.A3`1                                                               | Classifies parametric operations of arity 3
Type        | Z0.A0                                                                 | Classifies operations of arity 0
Type        | Z0.A1                                                                 | Classifies operations of arity 0
Type        | Z0.A2                                                                 | Classifies operations of arity 0
Type        | Z0.A3                                                                 | Classifies operations of arity 3
Method      | Z0.IdentityPart.Define(System.Byte,Z0.IdentityPartKind,System.String) | Defines an identity part
Type        | Z0.NatNumericIdentity                                                 | Defines identity for a pair NxT or MxNxT where M and N are natural types and T is numeric
Field       | Z0.NatNumericIdentity.M                                               | The number of grid rows
Field       | Z0.NatNumericIdentity.N                                               | The number of grid columns
Field       | Z0.NatNumericIdentity.T                                               | The numeric cell type
Method      | Z0.NatNumericIdentity.Format                                          | Formats the dimension in canonical form
Type        | Z0.PartUri                                                            | Uri for .net clr assembly
Field       | Z0.PartUri.Id                                                         | The assembly identifier, constrained to the defining enumeration
Property    | Z0.PartUri.UriText                                                    | The uri content
Type        | Z0.Vec128Type                                                         | Represents the generic type definition for a 128-bit vector
Type        | Z0.Vec256Type                                                         | Represents the generic type definition for a 256-bit vector
Type        | Z0.Vec512Type                                                         | Represents the generic type definition for a 512-bit vector
Method      | Z0.BlockedKinds.kind(System.Type)                                     | Determines the block classifier for a blocked type
Method      | Z0.BlockedKinds.segment(System.Type)                                  | Determines the segment kind classifier for a blocked type
Method      | Z0.XTend.IsFloat(Z0.BlockedKind)                                      | Determines whether the floating facet of a block classification is enabled
Method      | Z0.XTend.IsIntegral(Z0.BlockedKind)                                   | Determines whether the signed or unsigned facet of a block classification is enabled
Method      | Z0.XTend.IsSigned(Z0.BlockedKind)                                     | Determines whether the signed facet of a block classification is enabled
Method      | Z0.XTend.Format(Z0.FixedWidth)                                        | Produces a canonical text representation of the source kind
Method      | Z0.XTend.DistinctTypes(Z0.NumericKind)                                | Computes the primal types identified by a specified kind
Method      | Z0.XTend.DistinctKinds(Z0.NumericKind)                                | Enumerates the distinct numeric kinds represented by the (bitfield) source kind
Method      | Z0.XTend.IsNumeric(System.Reflection.MethodInfo)                      | Determines whether a method has numeric operands (if any) and a numeric return type (if any)
Method      | Z0.XTend.IsNumericOperator(System.Reflection.MethodInfo,System.Nullable{System.Int32})| Determines whether a method is a numeric operator with a specified arity
Method      | Z0.XTend.NumericOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods that are recognized as numeric operators
Method      | Z0.XTend.NumericOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},System.Int32)| Selects numeric operators with a specifed arity from the source stream
Method      | Z0.XTend.Signature(System.Reflection.MethodInfo)                      | Derives a signature from reflected method metadata
Method      | Z0.XTend.WithAsm(Z0.OpIdentity)                                       | Enables the assembly indicator
Method      | Z0.XTend.WithGeneric(Z0.OpIdentity)                                   | Enables the generic indicator
Method      | Z0.XTend.WithImm8(Z0.OpIdentity,System.Byte)                          | Attaches an immediate suffix to an identity, removing an existing immediate suffix if necessary
Method      | Z0.XTend.WithoutGeneric(Z0.OpIdentity)                                | Disables the generic indicator
Method      | Z0.XTend.WithoutImm8(Z0.OpIdentity)                                   | Clears an attached immediate suffix, if any
Method      | Z0.XTend.IsSome(Z0.FixedWidth)                                        | Determines whether the kind has a nonzero value
Method      | Z0.XTend.AcceptsImmediate(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Determines whether a method defines a parameter that requires an 8-bit immediate immediate
Method      | Z0.XTend.AcceptsImmediate(System.Reflection.MethodInfo)               | Determines whether a method defines a parameter that requires an 8-bit immediate immediate
Method      | Z0.XTend.AcceptsImmediate(System.Reflection.MethodInfo,System.Int32,Z0.ImmRefinementKind)| Determines whether a method defines an index-identified parameter that requires an 8-bit immediate immediate
Method      | Z0.XTend.IsBinaryOperator(System.Reflection.MethodInfo)               | Determines whether a method is a binary operator
Method      | Z0.XTend.IsBinaryFunction(System.Reflection.MethodInfo)               | Determines whether a method defines a binary function
Method      | Z0.XTend.BinaryOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Selects binary operators from a stream
Method      | Z0.XTend.ImmFunctionClass(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Calculates a method's immediate class
Method      | Z0.XTend.IsVectorizedImm(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Determines whether a method is (partially) vectorized and accepts an immediate value
Method      | Z0.XTend.IsVectorizedUnaryImm(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Determines whether a method is a vectorized unary operator that accepts an immediate value
Method      | Z0.XTend.IsVectorizedBinaryImm(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Determines whether a method is a vectorized binary operator that accepts an immediate value
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo)              | Determines whether a method has intrinsic parameters or return type
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo,Z0.W128)      | Determines whether all parameters of a method are 128-bit intrinsic vectors
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo,Z0.W256)      | Determines whether all parameters of a method are 256-bit intrinsic vectors
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo,Z0.W512)      | Determines whether all parameters of a method are 256-bit intrinsic vectors
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo,Z0.W128,System.Type)| Determines whether all parameters of a method are 128-bit intrinsic vectors with a specified cell type
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo,Z0.W256,System.Type)| Determines whether all parameters of a method are 256-bit intrinsic vectors with a specified cell type
Method      | Z0.XTend.IsFullyVectorized(System.Reflection.MethodInfo,Z0.W512,System.Type)| Determines whether all parameters of a method are 512-bit intrinsic vectors with a specified cell type
Method      | Z0.XTend.IsKind(System.Reflection.MethodInfo,Z0.Vec128Type,System.Boolean)| Determines whether a method has intrinsic parameters or return type of specified width
Method      | Z0.XTend.IsKind(System.Reflection.MethodInfo,Z0.Vec256Type,System.Boolean)| Determines whether a method is of characterized vector kind
Method      | Z0.XTend.IsKind(System.Reflection.MethodInfo,Z0.Vec512Type,System.Boolean)| Determines whether a method is of characterized vector kind
Method      | Z0.XTend.IsKind``1(System.Reflection.MethodInfo,Z0.Vec128Kind{``0})   | Determines whether a method is of characterized vector kind
Method      | Z0.XTend.IsKind``1(System.Reflection.MethodInfo,Z0.Vec256Kind{``0})   | Determines whether a method is of characterized vector kind
Method      | Z0.XTend.IsKind``1(System.Reflection.MethodInfo,Z0.Vec512Kind{``0})   | Determines whether a method is of characterized vector kind
Method      | Z0.XTend.IsNaturalNumeric(System.Reflection.MethodInfo)               | Returns true if a method is open generic with parametric arity 2 and is attributed             with both natural an numeric closures
Method      | Z0.XTend.NaturalNumeric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Selects the natural numeric methods from a stream
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W128)           | Determines whether a method has at least one 128-bit intrinsic vector parameter
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W256)           | Determines whether a method has at least one 128-bit intrinsic vector parameter
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo)                   | Determines whether a method has intrinsic parameters or return type
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W512)           | Determines whether a method has at least one 128-bit intrinsic vector parameter
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W128,System.Type)| Determines whether a method has at least one 128-bit intrinsic vector parameter closed over a specified type
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W256,System.Type)| Determines whether a method has at least one 256-bit intrinsic vector parameter closed over a specified type
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W512,System.Type)| Determines whether a method has at least one 512-bit intrinsic vector parameter closed over a specified type
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W128,Z0.GenericPartition)| Selcts vectorized methods from a source stream
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W256,Z0.GenericPartition)| Selcts vectorized methods from a source stream
Method      | Z0.XTend.IsVectorized(System.Reflection.MethodInfo,Z0.W512,Z0.GenericPartition)| Selcts vectorized methods from a source stream
Method      | Z0.XTend.IsVectorizedOperator(System.Reflection.MethodInfo)           | Determines whether a method is a vectorized operator which, by definition, is an operator             (which, by definition, is an homogenous function) with a vectorized operand which, by definition,             is an operand of intrinsic vector type (which, by definition, is one of the system-defined intrinsic vector types            or a custom instrinsic vector type)
Method      | Z0.XTend.IsKinded(System.Reflection.MethodInfo)                       | Determines whether the method has a kind identifier
Method      | Z0.XTend.IsKindedOperator(System.Reflection.MethodInfo)               | Determines whether a method defines an operator with identified kind
Method      | Z0.XTend.Kinded(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods that have a nonemtpy kind assignment
Method      | Z0.XTend.Kinded(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.OpKindId)| Queries the stream for mathods that are of a specified kind
Method      | Z0.XTend.KindedOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods that have a nonemtpy kind assignment
Method      | Z0.XTend.OfKind(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.Vec128Type,System.Boolean)| Selects methods from a stream that accept and/or return intrinsic vectors
Method      | Z0.XTend.OfKind(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.Vec256Type,System.Boolean)| Selects methods from a stream that accept and/or return intrinsic vectors
Method      | Z0.XTend.OfKind``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.Vec128Kind{``0})| Selects methods from a stream that accept and/or return intrinsic vectors
Method      | Z0.XTend.OfKind``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.Vec256Kind{``0})| Selects methods from a stream that accept and/or return intrinsic vectors
Method      | Z0.XTend.IsOperator(System.Reflection.MethodInfo)                     | Determines whether a method defines an operator over a (common) domain
Method      | Z0.XTend.IsHomogenous(System.Reflection.MethodInfo)                   | Returns true if all non-void input/output values are of the same type
Method      | Z0.XTend.ClassifyOperator(System.Reflection.MethodInfo)               | Classifies a methods that is an operator and has arity between 1 and 3; otherwise, returns None
Method      | Z0.XTend.ReturnsVector(System.Reflection.MethodInfo)                  | Determines whether a method returns an intrinsic vector
Method      | Z0.XTend.IsTernaryFunction(System.Reflection.MethodInfo)              | Determines whether a method defines a binary function
Method      | Z0.XTend.IsTernaryOperator(System.Reflection.MethodInfo)              | Determines whether a method is a ternary operator
Method      | Z0.XTend.TernaryOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Selects ternary operators from a stream
Method      | Z0.XTend.IsUnaryFunction(System.Reflection.MethodInfo)                | Determines whether a method defines a unary function
Method      | Z0.XTend.IsUnaryOperator(System.Reflection.MethodInfo)                | Determines whether a method is a unary operator
Method      | Z0.XTend.UnaryOperators(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Selects unary operators from a stream
Method      | Z0.XTend.Vectorized(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128,System.Boolean)| Selcts vectorized methods from a source stream
Method      | Z0.XTend.Vectorized(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256,System.Boolean)| Selcts vectorized methods from a source stream
Method      | Z0.XTend.Vectorized(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512,System.Boolean)| Selcts vectorized methods from a source stream
Method      | Z0.XTend.Vectorized(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128,System.String,System.Boolean)| Selects vectorized methods from a stream predicated on width, name and generic partition membership
Method      | Z0.XTend.Vectorized(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256,System.String,System.Boolean)| Selects vectorized methods from a stream predicated on width, name and generic partition membership
Method      | Z0.XTend.Vectorized(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512,System.String,System.Boolean)| Selects vectorized methods from a stream predicated on width, name and generic partition membership
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128)| Selects nongeneric source methods that have at least one 128-bit vector parameter
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256)| Selects nongeneric source methods that have at least one 256-bit vector parameter
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512)| Selects nongeneric source methods that have at least one 512-bit vector parameter
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128,System.String)| Selects nongeneric source methods with a specified name that have at least one 128-bit vector parameter
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256,System.String)| Selects nongeneric source methods with a specified name that have at least one 256-bit vector parameter
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512,System.String)| Selects nongeneric source methods with a specified name that have at least one 512-bit vector parameter
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128,System.Type)| Selects nongeneric source methods that have at least one 128-bit vector parameter closed over a specified type
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256,System.Type)| Selects nongeneric source methods that have at least one 256-bit vector parameter closed over a specified type
Method      | Z0.XTend.VectorizedDirect(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512,System.Type)| Selects nongeneric source methods that have at least one 512-bit vector parameter closed over a specified type
Method      | Z0.XTend.VectorizedDirect``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128)| Selects nongeneric source methods that have at least one 128-bit vector parameter closed over a specified parametric type
Method      | Z0.XTend.VectorizedDirect``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256)| Selects nongeneric source methods that have at least one 256-bit vector parameter closed over a specified parametric type
Method      | Z0.XTend.VectorizedDirect``1(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512)| Selects nongeneric source methods that have at least one 512-bit vector parameter closed over a specified parametric type
Method      | Z0.XTend.VectorizedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128)| Selects open generic source methods that have at least one 128-bit vector parameter
Method      | Z0.XTend.VectorizedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256)| Selects open generic source methods that have at least one 256-bit vector parameter
Method      | Z0.XTend.VectorizedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512)| Selects open generic source methods that have at least one 512-bit vector parameter
Method      | Z0.XTend.VectorizedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W128,System.String)| Selects open generic source methods with a specified name that have at least one 128-bit vector parameter
Method      | Z0.XTend.VectorizedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W256,System.String)| Selects open generic source methods with a specified name that have at least one 256-bit vector parameter
Method      | Z0.XTend.VectorizedGeneric(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.W512,System.String)| Selects open generic source methods with a specified name that have at least one 512-bit vector parameter
Method      | Z0.XTend.ArityValue(Z0.OperatorClass)                                 | Determines the numeric arity of a classified operator
Method      | Z0.XTend.ImmParameters(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Selects parameters from a method, if any, that acceptrequire an immediate value
Method      | Z0.XTend.ImmRefinementType(System.Reflection.ParameterInfo)           | Determines the imm refinement type, if any
Method      | Z0.XTend.IsClosedVector(System.Reflection.ParameterInfo,Z0.W128)      | Returns true if a method parameter is a closed 128-bit intrinsic vector
Method      | Z0.XTend.IsClosedVector(System.Reflection.ParameterInfo,Z0.W256)      | Returns true if a method parameter is a closed 256-bit intrinsic vector
Method      | Z0.XTend.IsClosedVector(System.Reflection.ParameterInfo,Z0.W512)      | Returns true if a method parameter is a closed 512-bit intrinsic vector
Method      | Z0.XTend.IsImmediate(System.Reflection.ParameterInfo,Z0.ImmRefinementKind)| Determines whether a parameters is an immediate
Method      | Z0.XTend.IsUnrefinedImmediate(System.Reflection.ParameterInfo)        | Determines whether a parameters is an unrefined immediate
Method      | Z0.XTend.IsRefinedImmediate(System.Reflection.ParameterInfo)          | Determines whether a parameters is a refined immediate
Method      | Z0.XTend.ImmParameterTypes(System.Reflection.MethodInfo,Z0.ImmRefinementKind)| Returns a method's immediate parameter types
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo)                    | Determines whether a parameter is of intrinsic vector type
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo,Z0.W128)            | Determines whether a parameter is of type 128-bit intrinsic vector
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo,Z0.W256)            | Determines whether a parameter is of type 256-bit intrinsic vector
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo,Z0.W512)            | Determines whether a parameter is of type 512-bit intrinsic vector
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo,Z0.W128,System.Type)| Returns true if a method parameter is a 128-bit intrinsic vector closed over a specified argument type
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo,Z0.W256,System.Type)| Returns true if a method parameter is a 256-bit intrinsic vector closed over a specified argument type
Method      | Z0.XTend.IsVector(System.Reflection.ParameterInfo,Z0.W512,System.Type)| Returns true if a method parameter is a 512-bit intrinsic vector closed over a specified argument type
Method      | Z0.XTend.IsClosedVector(System.Type,Z0.W128)                          | Returns true if a type is a closed 128-bit intrinsic vector
Method      | Z0.XTend.IsClosedVector(System.Type,Z0.W256)                          | Returns true if a type is a closed 256-bit intrinsic vector
Method      | Z0.XTend.IsClosedVector(System.Type,Z0.W512)                          | Returns true if a type is a closed 512-bit intrinsic vector
Method      | Z0.XTend.IsOpenVector(System.Type,Z0.W128)                            | Returns true if a type is an open generic 512-bit intrinsic vector
Method      | Z0.XTend.IsOpenVector(System.Type,Z0.W256)                            | Returns true if a type is an open generic 512-bit intrinsic vector
Method      | Z0.XTend.IsOpenVector(System.Type,Z0.W512)                            | Returns true if a type is an open generic 512-bit intrinsic vector
Method      | Z0.XTend.IsVector(System.Type,Z0.W128,System.Type)                    | Determines whether a type is a 128-bit intrinsic vector closed over a specified type
Method      | Z0.XTend.IsVector(System.Type,Z0.W256,System.Type)                    | Determines whether a type is a 256-bit intrinsic vector closed over a specified type
Method      | Z0.XTend.IsVector(System.Type,Z0.W512,System.Type)                    | Determines whether a type is a 512-bit intrinsic vector closed over a specified type
Method      | Z0.XTend.IsVector(System.Type,Z0.W128)                                | Determines whether a type is a 128-bit intrinsic vector
Method      | Z0.XTend.IsVector(System.Type,Z0.W256)                                | Determines whether a type is a 256-bit intrinsic vector
Method      | Z0.XTend.IsVector(System.Type,Z0.W512)                                | Determines whether a type is a 512-bit intrinsic vector
Method      | Z0.XTend.BitWidth(Z0.VectorKind)                                      | Specifies the bit-width of a classified cpu vector
Method      | Z0.XTend.CellType(Z0.VectorKind)                                      | Returns the clr cell type of a vector of specified kind
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.SByte)                      | Determines whether a vector of specified kind has a singed 8-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.Byte)                       | Determines whether a vector of specified kind has an unsigned 8-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.Int16)                      | Determines whether a vector of specified kind has a singed 16-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.UInt16)                     | Determines whether a vector of specified kind has an unsigned 16-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.Int32)                      | Determines whether a vector of specified kind has a singed 32-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.UInt32)                     | Determines whether a vector of specified kind has an unsigned 32-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.Int64)                      | Determines whether a vector of specified kind has a singed 64-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.UInt64)                     | Determines whether a vector of specified kind has an unsigned 64-bit cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.Single)                     | Determines whether a vector of specified kind has a 32-bit floating-point cell type
Method      | Z0.XTend.HasCellType(Z0.VectorKind,System.Double)                     | Determines whether a vector of specified kind has a 64-bit floating-point cell type
Method      | Z0.XTend.VectorKind``1(Z0.W128)                                       | Classifies a 128-bit vector
Method      | Z0.XTend.VectorKind``1(Z0.W256)                                       | Classifies a 256-bit vector
Method      | Z0.XTend.VectorKind``1(Z0.W512)                                       | Classifies a 512-bit vector
Method      | Z0.ICheckAction.CheckAction(System.Action,System.String)              | Manages the execution of an action that performs a validation exercise
Method      | Z0.Identify.resource(System.String,Z0.ITypeWidth,Z0.NumericKind)      | 
Method      | Z0.Identify.resource(System.String,Z0.ITypeWidth,Z0.ITypeWidth,Z0.NumericKind)| 
Method      | Z0.Identify.resource(System.String,Z0.ITypeNat,Z0.NumericKind)        | Defines a numeric resource identity predicated on natural bitwidth
Method      | Z0.Identify.resource(System.String,Z0.ITypeNat,Z0.ITypeNat,Z0.NumericKind)| Defines a numeric resource identity predicated on two natural bitwidths
Method      | Z0.Identify.segmented(System.String,Z0.TypeWidth,Z0.NumericKind)      | Defines a segmented type identity predicated on type width numeric kind specifications
Method      | Z0.Identify.types(Z0.NumericKind)                                     | Computes the primal types identified by a specified kind
Method      | Z0.Identify.kinds(Z0.NumericKind)                                     | Computes the primal types identified by a specified kind
Method      | Z0.Identify.Imm8(System.Byte)                                         | Defines an 8-bit immediate suffix predicated on an immediate value
Method      | Z0.Identify.Owner(System.Type)                                        | Produces the formatted identifier of the declaring assembly
Method      | Z0.Identify.TestCase(System.Type,Z0.IFunc)                            | Produces the name of the test case for the specified function
Method      | Z0.Identify.HostUri(System.Type)                                      | Produces an identifier of the form {owner}/{host} where owner is the formatted identifier of the declaring assembly            and host is the name of the type
Method      | Z0.Identify.duplicates(System.Collections.Generic.IEnumerable{Z0.OpIdentity})| Returns the duplicate identities found in the source stream, if any; otherwise, returns an empty array
Method      | Z0.Identify.name(Z0.OpKindId)                                         | Produces the canonical name of a kinded operation
Method      | Z0.Identify.vname(Z0.OpKindId)                                        | Produces the canonical name of a kinded vectorized operation
Method      | Z0.Identify.numeric``1(Z0.OpKindId,``0,System.Boolean)                | Produces an identifer for a kinded numeric operation
Method      | Z0.Identify.vectorized(Z0.OpKindId,Z0.TypeWidth,Z0.NumericKind,System.Boolean)| Produces an identifier for a kinded vectorized operation
Method      | Z0.Identify.vdirect``1(Z0.OpKindId,Z0.TypeWidth,``0)                  | Produces an identifier for a kinded nongeneric vectorized operation
Method      | Z0.Identify.vdirect``2(Z0.OpKindId,``0,``1)                           | Produces an identifier for a kinded nongeneric vectorized operation
Method      | Z0.Identify.vgeneric``2(Z0.OpKindId,``0,``1)                          | Produces an identifier for a kinded generic vectorized operation
Method      | Z0.Identify.sfunc``1(Z0.OpKindId,``0)                                 | Produces an identifier for a kinded numeric structural function
Method      | Z0.Identify.sfunc(Z0.OpKindId,Z0.NumericKind)                         | Produces an identifier for a kinded numeric structural function
Method      | Z0.Identify.sfunc(Z0.OpKindId,Z0.TypeWidth,Z0.NumericKind,System.Boolean)| Produces an identifier for a kinded structural function of segmented type
Method      | Z0.Identify.sfunc``1(Z0.OpKindId,Z0.TypeWidth,``0,System.Boolean)     | Produces an identifier for a kinded structural function of segmented type
Method      | Z0.Identify.sfunc``2(Z0.OpKindId,``0,``1,System.Boolean)              | Produces an identifier for a kinded structural function of segmented type
Method      | Z0.Identify.vsfunc(Z0.OpKindId,Z0.TypeWidth,Z0.NumericKind,System.Boolean)| Produces an identifier for a kinded vectorized structural function
Method      | Z0.Identify.vsfunc``1(Z0.OpKindId,Z0.TypeWidth,``0,System.Boolean)    | Produces an identifier for a kinded vectorized structural function
Method      | Z0.Identify.vsfunc``2(Z0.OpKindId,``0,``1,System.Boolean)             | Produces an identifier for a kinded vectorized structural function
Method      | Z0.Identify.numeric(Z0.NumericKind)                                   | Defines a scalar type identity
Method      | Z0.Identify.numeric``1(``0)                                           | Produces an identifier of the form {bitsize[T]}{u | i | f} for a numeric type
Method      | Z0.Identify.numeric(System.String)                                    | Attempts to parse a numeric kind from a string in the form {width}{indicator}
Method      | Z0.Identify.numeric(System.Collections.Generic.IEnumerable{System.String})| Attempts to parse a sequence of numeric kinds from a sequence of strings in the form {width}{indicator}
Method      | Z0.Identify.NumericOp(System.String,Z0.NumericKind,System.Boolean)    | Produces an identifier of the form {opname}_{bitsize(kind)}{u | i | f}
Method      | Z0.Identify.NumericOp``1(System.String,Z0.NK{``0},System.Boolean)     | Produces an identifier of the form {opname}_g{kind}{u | i | f}
Method      | Z0.Identify.NumericOp``1(System.String,System.Boolean)                | Produces an identifier of the form {opname}_g{kind}{u | i | f}
Method      | Z0.Identify.NumericOp(Z0.OpKindId,System.Boolean,Z0.NumericKind[])    | Defines kinded identifiers for numeric functions
Method      | Z0.Identify.NumericOp(Z0.OpKindId,Z0.NumericKind[])                   | Defines kinded identifiers for nongeneric numeric functions
Method      | Z0.Identify.Op(System.String,Z0.TypeWidth,Z0.NumericKind,System.Boolean)| Defines an identifier of the form {opname}_WxN{u | i | f} where N := bitsize[T]
Method      | Z0.Identify.Op``2(System.String,``0,``1)                              | Defines an identifier of the form {opname}_WxN{u | i | f} where N := bitsize[T]
Method      | Z0.Identify.Op``1(System.String,``0,System.Boolean)                   | Produces an identifier of the form {opname}_{g}{bitsize(kind)}{u | i | f}
Method      | Z0.Identify.Op(System.String,Z0.NumericKind,System.Boolean)           | Produces an identifier of the form {opname}_{g}{bitsize(kind)}{u | i | f}
Method      | Z0.Identify.sfunc``2(System.String,``0,``1,System.Boolean)            | Defines an identifier of the form {opname}_WxN{u | i | f} where N := bitsize[T]
Method      | Z0.Identify.sfunc``1(System.String)                                   | Defines an operand identifier of the form {opname}_N{u | i | f} that identifies an operation over a primal type of bit width N := bitsize[T]
Method      | Z0.Identify.sfunc``1(System.String,Z0.Vec128Kind{``0})                | Defines an operand identifier of the form {opname}_N{u | i | f} that identifies an operation over a primal type of bit width N := bitsize[T]
Method      | Z0.Identify.sfunc``1(System.String,Z0.Vec256Kind{``0})                | Defines an operand identifier of the form {opname}_N{u | i | f} that identifies an operation over a primal type of bit width N := bitsize[T]
Method      | Z0.IdentityReflector.IsHomogenous(System.Reflection.MethodInfo)       | Returns true if all non-void input/output values are of the same type
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo)     | Determines whether a method accepts an intrinsic vector in some parameter slot
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32)| Determines whether a method accepts an intrinsic vector at an index-identified parameter
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32,Z0.W128)| Determines whether a method accepts a 128-bit intrinsic vector at an index-identified parameter
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32,Z0.W256)| Determines whether a method accepts a 128-bit intrinsic vector at an index-identified parameter
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32,Z0.W512)| Determines whether a method accepts a 128-bit intrinsic vector at an index-identified parameter
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32,Z0.W128,System.Type)| Determines whether a method accepts a 128-bit intrinsic vector at an index-identified parameter of specified cell type
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32,Z0.W256,System.Type)| Determines whether a method accepts a 256-bit intrinsic vector at an index-identified parameter of specified cell type
Method      | Z0.TIdentityReflector.AcceptsVector(System.Reflection.MethodInfo,System.Int32,Z0.W512,System.Type)| Determines whether a method accepts a 512-bit intrinsic vector at an index-identified parameter of specified cell type
Method      | Z0.TIdentityReflector.IsAction(System.Reflection.MethodInfo)          | Dtermines whether a method has a void return
Method      | Z0.TIdentityReflector.Actions(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods that are actions
Method      | Z0.TIdentityReflector.ArityClass(System.Reflection.MethodInfo)        | Assigns an arity classification, if any, to a method
Method      | Z0.TIdentityReflector.WithArityClass(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods with a nonempty arity classification
Method      | Z0.TIdentityReflector.WithArityClass(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.ArityClass)| Queries the stream for methods with a specified arity classification
Method      | Z0.TIdentityReflector.IsSource(System.Reflection.MethodInfo)          | Determines whether a method is an emitter, i.e. a method that returns a value but accepts no input
Method      | Z0.TIdentityReflector.IsSink(System.Reflection.MethodInfo)            | Determines whether a method has void return and has arity = 1
Method      | Z0.TIdentityReflector.IsFunction(System.Reflection.MethodInfo)        | Determines whether a method is a function
Method      | Z0.TIdentityReflector.IsNumericFunction(System.Reflection.MethodInfo) | Determines whether a method is a function with numeric operands (if any) and return type
Method      | Z0.TIdentityReflector.Functions(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods that are functions
Method      | Z0.TIdentityReflector.IsOperator(System.Reflection.MethodInfo)        | Determines whether a method defines an operator over a (common) domain
Method      | Z0.TIdentityReflector.ClassifyOperator(System.Reflection.MethodInfo)  | Classifies a methods that is an operator and has arity between 1 and 3; otherwise, returns None
Method      | Z0.TIdentityReflector.WithOperatorClass(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods with a nonempty operator classification
Method      | Z0.TIdentityReflector.WithOperatorClass(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.OperatorClass)| Queries the stream for methods with a specified operator classification
Method      | Z0.TIdentityReflector.IsPredicate(System.Reflection.MethodInfo)       | Determines whether a method defines a predicate that returns a bit or bool value
Method      | Z0.TIdentityReflector.ClassifyPredicate(System.Reflection.MethodInfo) | Classifies a methods that is an operator and has arity between 1 and 3; otherwise, returns None
Method      | Z0.TIdentityReflector.WithPredicateClass(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo},Z0.PredicateClass)| Queries the stream for methods with a specified predicate classification
Method      | Z0.TIdentityReflector.WithPredicateClass(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})| Queries the stream for methods with a nonempty predicate classification
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,System.Nullable{System.Int32},System.Boolean)| Determines whether a method has intrinsic paremeters or return type of specified width
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo)     | Determines whether a method returns an intrinsic vector
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo,Z0.W128)| Determines whether a method returns a 128-bit intrinsic vector
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo,Z0.W256)| Determines whether a method returns a 256-bit intrinsic vector
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo,Z0.W512)| Determines whether a method returns a 256-bit intrinsic vector
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo,Z0.W128,System.Type)| Determines whether a method returns a 128-bit intrinsic vector of specified cell type
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo,Z0.W256,System.Type)| Determines whether a method returns a 256-bit intrinsic vector of specified cell type
Method      | Z0.TIdentityReflector.ReturnsVector(System.Reflection.MethodInfo,Z0.W512,System.Type)| Determines whether a method returns a 512-bit intrinsic vector with of specified cell type
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo)      | Determines whether a method has intrinsic parameters or return type
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W128)| Determines whether a method has at least one 128-bit intrinsic vector parameter
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W256)| Determines whether a method has at least one 128-bit intrinsic vector parameter
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W512)| Determines whether a method has at least one 128-bit intrinsic vector parameter
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W128,System.Type)| Determines whether a method has at least one 128-bit intrinsic vector parameter closed over a specified type
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W256,System.Type)| Determines whether a method has at least one 256-bit intrinsic vector parameter closed over a specified type
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W512,System.Type)| Determines whether a method has at least one 512-bit intrinsic vector parameter closed over a specified type
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W128,Z0.GenericPartition)| Selcts vectorized methods from a source stream
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W256,Z0.GenericPartition)| Selcts vectorized methods from a source stream
Method      | Z0.TIdentityReflector.IsVectorized(System.Reflection.MethodInfo,Z0.W512,Z0.GenericPartition)| Selcts vectorized methods from a source stream
Method      | Z0.ITestCaseIdentity.CaseName(Z0.OpIdentity)                          | Produces a test case name predicated on an operation identity
Method      | Z0.ITestCaseIdentity.CaseName``1(System.String)                       | Produces a test case name predicated on a parametrically-specialized label
Method      | Z0.ITestCaseIdentity.CaseName``1(System.Type,System.String)           | Produces the name of the test case predicated on a root name and parametric type
Method      | Z0.ITestCaseIdentity.CaseName``2(Z0.IFunc,``0,System.Boolean)         | Computes a test case identifier for a segmented structured function
Method      | Z0.ITestCaseIdentity.MatchCaseName(Z0.OpIdentity,Z0.OpIdentity)       | Produces a case name for an identified operation match test
Field       | Z0.OperatorTypeClass.OperandType                                      | The operator operand type
Field       | Z0.OperatorTypeClass.OperatorClass                                    | The operator classification
Method      | Z0.OpUriBuilder.HostUri(System.Type)                                  | Produces an identifier of the form {owner}/{host} where owner is the formatted identifier of the declaring assembly            and host is the name of the type
Method      | Z0.OpUriBuilder.TestCase(System.Reflection.MethodInfo)                | Produces the name of the test case determined by a source method
Method      | Z0.OpUriBuilder.TestCase(System.Type,System.String)                   | Produces the name of the test case predicated on fully-specified name, exluding the host name
Method      | Z0.OpUriBuilder.TestCase(System.Type,Z0.OpIdentity)                   | Produces the name of the test case predicated on fully-specified name, exluding the host name
Method      | Z0.SpanTypes.kind(System.Type)                                        | Classifies a type according to whether it is a span, a readonly span, or otherwise
Method      | Z0.SpanTypes.test(System.Type)                                        | Determines whether a type is a span
Method      | Z0.SpanTypes.IsSystemSpan(System.Type)                                | Tests whether a type defines a system-defined span
Type        | Z0.IArithmeticKind`3                                                  | Characterizes a kind, numeric, and width-parametric arithmetic operation classifier
Property    | Z0.IArithmeticKind`3.OperandWidth                                     | The parametrically-identified operand width
Type        | Z0.IBitLogicKind`3                                                    | Characterizes a kind, numeric, and width-parametric bitlogic operation classifier
Property    | Z0.IBitLogicKind`3.OperandWidth                                       | The parametrically-identified operand width
Type        | Z0.IBitFunctionKind`3                                                 | Characterizes a kind, numeric, and width-parametric bitfunction operation classifier
Property    | Z0.IBitFunctionKind`3.OperandWidth                                    | The parametrically-identified operand width
Type        | Z0.IComparisonKind`3                                                  | Characterizes a kind, numeric, and width-parametric comparison operation classifier
Property    | Z0.IComparisonKind`3.OperandWidth                                     | The parametrically-identified operand width
Type        | Z0.ISystemOpKind`3                                                    | Characterizes a kind, numeric, and width-parametric system operation classifier
Property    | Z0.ISystemOpKind`3.OperandWidth                                       | The parametrically-identified operand width
Type        | Z0.IBitShiftKind`3                                                    | Characterizes a kind, numeric, and width-parametric bitshift operation classifier
Property    | Z0.IBitShiftKind`3.OperandWidth                                       | The parametrically-identified operand width
Type        | Z0.ICanonicalKind`3                                                   | Characterizes a kind, numeric, and width-parametric canonical operation classifier
Property    | Z0.ICanonicalKind`3.OperandWidth                                      | The parametrically-identified operand width
Method      | Z0.TestCaseIdentity.owner(System.Type)                                | Produces the formatted identifier of the declaring assembly
Method      | Z0.TestCaseIdentity.name(System.Type,Z0.OpIdentity)                   | Produces a test case name predicated on an operation identity
Method      | Z0.TestCaseIdentity.name``1(System.Type,System.String)                | Produces a test case name predicated on a parametrically-specialized label
Method      | Z0.TestCaseIdentity.match(System.Type,Z0.OpIdentity,Z0.OpIdentity)    | Produces a case name for an identified operation match test
Method      | Z0.VectorType.closed(System.Type,Z0.W128)                             | Returns true if a type is a closed 128-bit intrinsic vector
Method      | Z0.VectorType.closed(System.Type,Z0.W256)                             | Returns true if a type is a closed 256-bit intrinsic vector
Method      | Z0.VectorType.closed(System.Type,Z0.W512)                             | Returns true if a type is a closed 512-bit intrinsic vector
Method      | Z0.VectorType.closed(System.Reflection.ParameterInfo,Z0.W128)         | Returns true if a method parameter is a closed 128-bit intrinsic vector
Method      | Z0.VectorType.closed(System.Reflection.ParameterInfo,Z0.W256)         | Returns true if a method parameter is a closed 256-bit intrinsic vector
Method      | Z0.VectorType.closed(System.Reflection.ParameterInfo,Z0.W512)         | Returns true if a method parameter is a closed 512-bit intrinsic vector
Method      | Z0.VectorType.width(Z0.VectorKind)                                    | Determines the number of bits covered by a k-kinded vector
Method      | Z0.VectorType.size(Z0.VectorKind)                                     | Determines the number of bytes covered by a k-kinded type
Method      | Z0.VectorType.segwidth(Z0.VectorKind)                                 | Determines the component width of a k-kinded vector
Method      | Z0.VectorType.unsigned(Z0.VectorKind)                                 | Determines whether a classfied vector is defined over primal unsigned integer components
Method      | Z0.VectorType.signed(Z0.VectorKind)                                   | Determines whether a classfied vector is defined over primal signed integer components
Method      | Z0.VectorType.floating(Z0.VectorKind)                                 | Determines whether a classfied vector is defined over floating-point components
Method      | Z0.VectorType.integral(Z0.VectorKind)                                 | Determines whether a classfied vector is defined over primal integer components
Method      | Z0.VectorType.kind``1(System.Runtime.Intrinsics.Vector128{``0})       | Computes a vector kind classifier from a 128-bit vector instance
Method      | Z0.VectorType.kind``1(System.Runtime.Intrinsics.Vector256{``0})       | Computes a vector kind classifier from a 256-bit vector instance
Method      | Z0.VectorType.kind``1(Z0.Vector512{``0})                              | Computes a vector kind classifier from a 512-bit vector instance
Method      | Z0.VectorType.kind(System.Type)                                       | Computes the vector kind classifier determined by a system type
Method      | Z0.VectorType.kind``1(Z0.W128,``0)                                    | Computes a 128-bit vector kind classifier for a parametrically-specified cell type
Method      | Z0.VectorType.kind``1(Z0.W256,``0)                                    | Computes a 256-bit vector kind classifier for a parametrically-specified cell type
Method      | Z0.VectorType.kind``1(Z0.W512,``0)                                    | Computes a 512-bit vector kind classifier for a parametrically-specified cell type
Method      | Z0.VectorType.kind``2(``0,``1)                                        | Computes the vector kind classifier determined by parametric width and cell types
Method      | Z0.VectorType.open(System.Type,Z0.W128)                               | Returns true if a type is an open generic 128-bit intrinsic vector
Method      | Z0.VectorType.open(System.Type,Z0.W256)                               | Returns true if a type is an open generic 256-bit intrinsic vector
Method      | Z0.VectorType.open(System.Type,Z0.W512)                               | Returns true if a type is an open generic 512-bit intrinsic vector
Method      | Z0.VectorType.tcell(Z0.VectorKind)                                    | Returns the clr cell type of a vector of specified kind
Method      | Z0.VectorType.test(System.Type)                                       | Determines whether a type is classified as an intrinsic vector
Method      | Z0.VectorType.test(System.Type,System.Nullable{System.Int32})         | Determines whether a type is an intrinsic vector of specified width
Method      | Z0.VectorType.test(Z0.VectorKind,System.SByte)                        | Determines whether a vector of specified kind has a singed 8-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.Byte)                         | Determines whether a vector of specified kind has an unsigned 8-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.Int16)                        | Determines whether a vector of specified kind has a singed 16-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.UInt16)                       | Determines whether a vector of specified kind has an unsigned 16-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.Int32)                        | Determines whether a vector of specified kind has a singed 32-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.UInt32)                       | Determines whether a vector of specified kind has an unsigned 32-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.Int64)                        | Determines whether a vector of specified kind has a singed 64-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.UInt64)                       | Determines whether a vector of specified kind has an unsigned 64-bit cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.Single)                       | Determines whether a vector of specified kind has a 32-bit floating-point cell type
Method      | Z0.VectorType.test(Z0.VectorKind,System.Double)                       | Determines whether a vector of specified kind has a 64-bit floating-point cell type
Method      | Z0.VectorType.test(System.Type,Z0.W128,System.Type)                   | Determines whether a type is a 128-bit intrinsic vector closed over a specified type
Method      | Z0.VectorType.test(System.Type,Z0.W256,System.Type)                   | Determines whether a type is a 256-bit intrinsic vector closed over a specified type
Method      | Z0.VectorType.test(System.Type,Z0.W512,System.Type)                   | Determines whether a type is a 512-bit intrinsic vector closed over a specified type
Method      | Z0.VectorType.test(System.Type,Z0.W128)                               | Determines whether a type is a 128-bit intrinsic vector
Method      | Z0.VectorType.test(System.Type,Z0.W256)                               | Determines whether a type is a 256-bit intrinsic vector
Method      | Z0.VectorType.test(System.Type,Z0.W512)                               | Determines whether a type is a 512-bit intrinsic vector
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo)                   | Determines whether a parameter is of some intrinsic vector type
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo,Z0.W128)           | Determines whether a parameter accepts a 128-bit intrinsic vector
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo,Z0.W256)           | Determines whether a parameter accepts a 256-bit intrinsic vector
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo,Z0.W512)           | Determines whether a parameter accepts a 512-bit intrinsic vector
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo,Z0.W128,System.Type)| Returns true if a method parameter is a 128-bit intrinsic vector closed over a specified argument type
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo,Z0.W256,System.Type)| Returns true if a method parameter is a 256-bit intrinsic vector closed over a specified argument type
Method      | Z0.VectorType.test(System.Reflection.ParameterInfo,Z0.W512,System.Type)| Returns true if a method parameter is a 512-bit intrinsic vector closed over a specified argument type
Property    | Z0.VectorType.Types128                                                | Closed vector types of width 128
Property    | Z0.VectorType.Types256                                                | Closed vector types of width 256
Property    | Z0.VectorType.Types512                                                | Closed vector types of width 512
Method      | Z0.TVectorKind`3.Z0#IVectorKind#Close                                 | The reified vector type as determined by kind facets
Method      | Z0.VectorTypesOps.IsVectorFactory(System.Reflection.MethodInfo)       | Determines whether a method produces, but does not accept, vector values
