| M:Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single})| 
            <summary>
            Allocates and computes a matrix X = AB of natural dimension MxN 
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="M">The A row count type</typeparam>
            <typeparam name="K">The A colum count / B row count type</typeparam>
            <typeparam name="N">The B column count type</typeparam>
        
| M:Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double})| 
            <summary>
            Allocates and computes a matrix X = AB of natural dimension MxN 
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="M">The A row count type</typeparam>
            <typeparam name="K">The A colum count / B row count type</typeparam>
            <typeparam name="N">The B column count type</typeparam>
        
| M:Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single},Z0.Matrix256{``0,``2,System.Single}@)| 
            <summary>
            Computes the matrix product X = AB
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="X">Tht target matrix</param>
            <typeparam name="M">The A row count type</typeparam>
            <typeparam name="K">The A colum count / B row count type</typeparam>
            <typeparam name="N">The B column count type</typeparam>
        
| M:Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double},Z0.Matrix256{``0,``2,System.Double}@)| 
            <summary>
            Computes the matrix product X = AB
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="X">Tht target matrix</param>
            <typeparam name="M">The A row count type</typeparam>
            <typeparam name="K">The A colum count / B row count type</typeparam>
            <typeparam name="N">The B column count type</typeparam>
        
| M:Z0.MatrixOps.Mul``1(Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single}@)| 
            <summary>
            Computes the product of square matrices of natural dimension
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="X">Tht target matrix</param>
            <typeparam name="N">The common order of all matrices</typeparam>
        
| M:Z0.MatrixOps.Mul``1(Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double}@)| 
            <summary>
            Computes the product of square matrices of natural dimension
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="X">Tht target matrix</param>
            <typeparam name="N">The common order of all matrices</typeparam>
        
| M:Z0.Mkl.mkl.asum(Z0.RowVector256{System.Single}) | 
            <summary>
            Computes the sum of the absolute value of each component
            </summary>
            <param name="X">A span containing the vector components</param>
        
| M:Z0.Mkl.mkl.asum(Z0.RowVector256{System.Double}) | 
            <summary>
            Computes the sum of the absolute value of each component
            </summary>
            <param name="X">A span containing the vector components</param>
        
| M:Z0.Mkl.mkl.axpy``1(System.Single,Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| 
            <summary>
            Computes the vector Z = aX + Y
            </summary>
            <param name="a">A scalar by which the components of X are multiplied</param>
            <param name="X">The vector to be scaled</param>
            <param name="Y">The vector to be added</param>
            <param name="Z">The target vector</param>        
        
| M:Z0.Mkl.mkl.axpy(System.Single,Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the vector Z = aX + Y
            </summary>
            <param name="a">A scalar by which the components of X are multiplied</param>
            <param name="X">The vector to be scaled</param>
            <param name="Y">The vector to be added</param>
            <param name="Z">The target vector</param>        
        
| M:Z0.Mkl.mkl.axpy(System.Double,Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the vector Z = aX + Y
            </summary>
            <param name="a">A scalar by which the components of X are multiplied</param>
            <param name="X">The vector to be scaled</param>
            <param name="Y">The vector to be added</param>
            <param name="Z">The target vector</param>        
        
| M:Z0.Mkl.mkl.dot``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single})| 
            <summary>
            Computes the scalar product between two vectors of natural length
            </summary>
            <param name="X">The left vector</param>
            <param name="Y">The right vector</param>
        
| M:Z0.Mkl.mkl.dot``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double})| 
            <summary>
            Computes the scalar product between two vectors of natural length
            </summary>
            <param name="X">The left vector</param>
            <param name="Y">The right vector</param>
        
| M:Z0.Mkl.mkl.dot(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single})| 
            <summary>
            Computes the scalar product between two vectors that are hopefully of the same length
            </summary>
            <param name="X">The left vector</param>
            <param name="Y">The right vector</param>
        
| M:Z0.Mkl.mkl.dot(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double})| 
            <summary>
            Computes the scalar product between two vectors that are hopefully of the same length
            </summary>
            <param name="X">The left vector</param>
            <param name="Y">The right vector</param>
        
| M:Z0.Mkl.mkl.dot(System.Span{System.Single},System.Span{System.Single})| 
            <summary>
            Computes the scalar product of the left and right operands
            </summary>
            <param name="X">The left vector</param>
            <param name="Y">The right vector</param>
        
| M:Z0.Mkl.mkl.dot(System.Span{System.Double},System.Span{System.Double})| 
            <summary>
            Computes the scalar product of the left and right operands
            </summary>
            <param name="X">The left vector</param>
            <param name="Y">The right vector</param>
        
| M:Z0.Mkl.mkl.gemm``4(Z0.Matrix256{``0,``1,``3},Z0.Matrix256{``1,``2,``3},Z0.Matrix256{``0,``2,``3}@)| 
            <summary>
            Populates a target matrix with the product of the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
        
| M:Z0.Mkl.mkl.gemm``2(Z0.Matrix256{``0,``1},Z0.Matrix256{``0,``1},Z0.Matrix256{``0,``1}@)| 
            <summary>
            Populates a target matrix with the product of the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
        
| M:Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single})| 
            <summary>
            Allocates a target matrix and populates it with the product of the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
        
| M:Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double})| 
            <summary>
            Allocates a target matrix and populates it with the product of the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
        
| M:Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single},Z0.Matrix256{``0,``2,System.Single}@)| 
            <summary>
            Populates a target matrix with the product of the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
        
| M:Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double},Z0.Matrix256{``0,``2,System.Double}@)| 
            <summary>
            Populates a target matrix with the product of the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
        
| M:Z0.Mkl.mkl.gemm``1(Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single}@)| 
            <summary>
            Computes the product of square metrices X = AB
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="X">The target matrix</param>
            <param name="N">The number of columns in B and C</param>
        
| M:Z0.Mkl.mkl.gemm``1(Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double}@)| 
            <summary>
            Computes the product of square metrices X = AB
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="X">The target matrix</param>
            <param name="N">The number of columns in B and C</param>
        
| M:Z0.Mkl.mkl.gemv``2(Z0.Matrix256{``0,``1,System.Double},Z0.Block256{``1,System.Double},Z0.Block256{``0,System.Double}@)| 
            <summary>
            Computes the matrix-vector product y = A*x;
            </summary>
            <param name="A">A source matrix of dimension MxN</param>
            <param name="x">A source vector of length N</param>
            <param name="y">A target vector of length M</param>
            <typeparam name="M">The row dimension type of A</typeparam>
            <typeparam name="N">The column dimension type of A</typeparam>
        
| M:Z0.Mkl.mkl.gemv``2(Z0.Matrix256{``0,``1,System.Single},Z0.Block256{``1,System.Single},Z0.Block256{``0,System.Single}@)| 
            <summary>
            Computes the matrix-vector product y = A*x;
            </summary>
            <param name="A">A source matrix of dimension MxN</param>
            <param name="x">A source vector of length N</param>
            <param name="y">A target vector of length M</param>
            <typeparam name="M">The row dimension type of A</typeparam>
            <typeparam name="N">The column dimension type of A</typeparam>
        
| M:Z0.Mkl.mkl.iamax(Z0.RowVector256{System.Single})| 
            <summary>
            Returns the index of the component with maximal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.amax(Z0.RowVector256{System.Single}) | 
            <summary>
            Returns the value of the component with maximal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.iamax(Z0.RowVector256{System.Double})| 
            <summary>
            Returns the index of the component with maximal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.amax(Z0.RowVector256{System.Double}) | 
            <summary>
            Returns the value of the component with maximal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.iamin(Z0.RowVector256{System.Single})| 
            <summary>
            Returns the index of the component with maximal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.amin(Z0.RowVector256{System.Single}) | 
            <summary>
            Returns the value of the component with minimal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.iamin(Z0.RowVector256{System.Double})| 
            <summary>
            Returns the index of the component with minimal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.amin(Z0.RowVector256{System.Double}) | 
            <summary>
            Returns the value of the component with minimal absolute value
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.norm(Z0.RowVector256{System.Single}) | 
            <summary>
            Computes the Euclidean norm of the source vector
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.norm(Z0.RowVector256{System.Double}) | 
            <summary>
            Computes the Euclidean norm of the source vector
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.norm(System.Span{Z0.ComplexF32})     | 
            <summary>
            Computes the Euclidean norm of the source vector
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.norm(System.Span{Z0.ComplexF64})     | 
            <summary>
            Computes the Euclidean norm of the source vector
            </summary>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.scale(System.Single,Z0.RowVector256{System.Single})| 
            <summary>
            Computes x = ax, in-place
            </summary>
            <param name="a">The value by which to scale the source vector</param>
            <param name="X">The source vector</param>
        
| M:Z0.Mkl.mkl.scale(System.Single,Z0.RowVector256{System.Single}@,Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes y = ax, leaving x unmodified
            </summary>
            <param name="a">The value by which to scale the source vector</param>
            <param name="x">The source vector</param>
            <param name="y">The target vector</param>
            <remarks>This adds the overhead of a copy operation on the vector</remarks>
        
| M:Z0.Mkl.mkl.scale(System.Double,Z0.RowVector256{System.Double})| 
            <summary>
            Computes x = ax, in-place
            </summary>
            <param name="a">The value by which to scale the source vector</param>
            <param name="x">The source vector</param>
        
| M:Z0.Mkl.mkl.scale(System.Double,Z0.RowVector256{System.Double}@,Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes y = ax, leaving x unmodified
            </summary>
            <param name="a">The value by which to scale the source vector</param>
            <param name="x">The source vector</param>
            <param name="y">The target vector</param>
            <remarks>This adds the overhead of a copy operation on the vector</remarks>
        
| M:Z0.Mkl.mkl.getrf``2(Z0.Matrix256{``0,``1,System.Double},System.Span{System.Int32},Z0.Matrix256{``0,``1,System.Double}@)| 
            <summary>
            Computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.
            </summary>
            <param name="A"></param>
            <param name="X"></param>
            <param name="P"></param>
            <typeparam name="M"></typeparam>
            <typeparam name="N"></typeparam>
        
| M:Z0.Mkl.mkl.getrf``1(Z0.Matrix256{``0,System.Double},System.Span{System.Int32},Z0.Matrix256{``0,System.Double}@)| 
            <summary>
            Computes an LU factorization of an N-square matrix A using partial pivoting with row interchanges.
            </summary>
            <param name="A"></param>
            <param name="X"></param>
            <param name="P"></param>
            <typeparam name="M"></typeparam>
            <typeparam name="N"></typeparam>
        
| M:Z0.Mkl.mkl.potrf``1(Z0.Matrix256{``0,System.Double},Z0.TriangularKind)| 
            <summary>
            Attempts to use the cholesky algorithm to factor a square matrix as either
            A = L*Transpose(L)  or A = Transpose(U)*U according to whether the tk parameter
            respectively specifies Lower or Upper triangulation.
            </summary>
            <param name="A">The matrix to factor and the matrix that receives the results</param>
            <param name="tk">The triangular classification</param>
            <typeparam name="N">The matrix order type</typeparam>
        
| M:Z0.Mkl.mkl.posdef``1(Z0.Matrix256{``0,System.Single})| 
            <summary>
            Returns true if the matrix is positive-definite, false otherwise
            </summary>
            <param name="A"></param>
            <typeparam name="N">The square dimenion type</typeparam>
        
| M:Z0.Mkl.mkl.posdef``1(Z0.Matrix256{``0,System.Double})| 
            <summary>
            Returns true if the matrix is positive-definite, false otherwise
            </summary>
            <param name="A"></param>
            <typeparam name="N">The square dimenion type</typeparam>
        
| M:Z0.Mkl.mkl.head``1(Z0.RowVector256{``0})        | 
            <summary>
            Returns a reference to the location of the first span element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Mkl.mkl.head``2(Z0.Block256{``0,``1})        | 
            <summary>
            Returns a reference to the location of the first \element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Mkl.mkl.head``2(Z0.Matrix256{``0,``1})       | 
            <summary>
            Returns a reference to the location of the first \element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Mkl.mkl.head``3(Z0.Matrix256{``0,``1,``2})   | 
            <summary>
            Returns a reference to the location of the first \element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Mkl.mkl.head``1(System.Span{``0})            | 
            <summary>
            Returns a reference to the location of the first span element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Mkl.mkl.add(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.add(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.add``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.add``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.sub(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.sub(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.sub``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.sub``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mul(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mul(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mul``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mul``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.div(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] / rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.div(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] / rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mod(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i] % rhs[i] for i = 0...n-1 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mod(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i] % rhs[i] for i = 0...n-1
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mod``2(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``0,``1,System.Single}@)| 
            <summary>
            Computes X[i,j] = A[i,j] % B[i,j] for each row/col index i/j
            </summary>
            <param name="A">The left vector</param>
            <param name="B">The right vector</param>
            <param name="X">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.mod``2(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``0,``1,System.Double}@)| 
            <summary>
            Computes X[i,j] = A[i,j] % B[i,j] for each row/col index i/j
            </summary>
            <param name="A">The left vector</param>
            <param name="B">The right vector</param>
            <param name="X">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.truncRem(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Truncates the source vector and deposits the result in trunc and the fractional part 
            that was removed when producing the truncation
            </summary>
            <param name="src">The source vector</param>
            <param name="trunc">The vector that receives the truncated components</param>
            <param name="rem">The vector that receives the fractional remainders</param>
        
| M:Z0.Mkl.mkl.truncRem(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Truncates the source vector and deposits the result in trunc and the fractional part 
            that was removed when producing the truncation
            </summary>
            <param name="src">The source vector</param>
            <param name="trunc">The vector that receives the truncated components</param>
            <param name="rem">The vector that receives the fractional remainders</param>
        
| M:Z0.Mkl.mkl.rem(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = remainder(lhs[i] / rhs[i]) for i = 0...n-1 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.rem(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = remainder(lhs[i] / rhs[i]) for i = 0...n-1 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.frac(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the fractional part of each component
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.frac(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the fractional part of each component
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.square(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = (src[i])^2 for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.square(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = (src[i])^2 for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.sqrt(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = (src[i])^(1/2) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.sqrt(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = (src[i])^(1/2) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.abs(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = |src[i]| for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.abs(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = |src[i]| for i = 0...n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.min(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = min(a[i], b[i]) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.min(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = min(a[i], b[i]) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.max(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = max(a[i], b[i]) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.max(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = max(a[i], b[i]) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.maxAbs(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = max(|a[i]|, |b[i]|) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.maxAbs(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = max(|a[i]|, |b[i]|) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.minAbs(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = min(|a[i]|, |b[i]|) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.minAbs(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = min(|a[i]|, |b[i]|) for i = 0...n-1
            </summary>
            <param name="a">The first source vector</param>
            <param name="b">The second source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.next(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = src[i] + epsilon
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.next(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = src[i] + epsilon
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.Mkl.mkl.round(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] =round(src[i]) for i=0..n-1 where "round" maps the input to the nearest integral value
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.round(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] =round(src[i]) for i=0..n-1 where "round" maps the input to the nearest integral value
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.round``2(Z0.Matrix256{``0,``1,System.Single}@)| 
            <summary>
            Rounds each element towards the nearest integral value
            </summary>
            <param name="src">The source/target matrix</param>
        
| M:Z0.Mkl.mkl.round``2(Z0.Matrix256{``0,``1,System.Double}@)| 
            <summary>
            Rounds each element towards the nearest integral value
            </summary>
            <param name="src">The source/target matrix</param>
        
| M:Z0.Mkl.mkl.trunc(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] =truncate(src[i]) for i=0..n-1 where "truncate" rounds the input value towards 0
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.trunc(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] =truncate(src[i]) for i=0..n-1 where "truncate" rounds the input value towards 0
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.trunc``2(Z0.Matrix256{``0,``1,System.Double}@)| 
            <summary>
            Rounds each element towards zero
            </summary>
            <param name="src">The source/target matrix</param>
        
| M:Z0.Mkl.mkl.trunc``2(Z0.Matrix256{``0,``1,System.Single}@)| 
            <summary>
            Rounds each element towards zero
            </summary>
            <param name="src">The source/target matrix</param>
        
| M:Z0.Mkl.mkl.floor(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] =floor(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.floor(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] =floor(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.ceil(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = ceil(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.ceil(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = ceil(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.recip(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = 1/src[i] for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.recip(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = 1/src[i] for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.pow(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = lhs[i]^rhs[i] for i = 0...n-1 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.pow(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = lhs[i]^rhs[i] for i = 0...n-1 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.pow(Z0.RowVector256{System.Single},System.Single,Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = src[i]^exp for i = 0...n-1 
            </summary>
            <param name="src">The left vector</param>
            <param name="exp">The right scalar</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.pow(Z0.RowVector256{System.Double},System.Double,Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = src[i]^exp for i = 0...n-1 
            </summary>
            <param name="src">The left vector</param>
            <param name="exp">The right scalar</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.exp(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = e^src[i] for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.exp(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = e^src[i] for i=0..n-1
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.exp2(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = 2^src[i] for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.exp2(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = 2^src[i] for i=0..n-1
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.exp10(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = 10^src[i] for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.exp10(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = 10^src[i] for i=0..n-1
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.ln(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] =ln(src[i]) for i=0..n-1 where ln denotes the natural log
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.ln(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] =ln(src[i]) for i=0..n-1 where ln denotes the natural log
            </summary>
            <param name="src">The source array</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.log2(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] =log2(src[i]) for i=0..n-1 where log2 denotes the base 2 log
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.log2(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] =log2(src[i]) for i=0..n-1 where log2 denotes the base 2 log
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.log10(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] =log10(src[i]) for i=0..n-1 where log10 denotes the base 10 log
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.log10(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] =log10(src[i]) for i=0..n-1 where log10 denotes the base 10 log
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erf(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the error function dst[i] =erf(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erf(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the error function dst[i] =erf(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erfInv(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the inverse error function dst[i] =erfInv(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erfInv(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the inverse error function dst[i] =erfInv(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erfc(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the complementary error function dst[i] =erfc(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erfc(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the complementary error function dst[i] =erfc(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erfcInv(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the inverse complementary error function dst[i] =erfcInv(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.erfcInv(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the inverse complementary error function dst[i] =erfcInv(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.expInt(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the exponential integral function dst[i] = E(src[i]) for i=0..n-1 where
            E(x) = ∫[x, ∞](e^(-t)/t)dt = ∫[1, ∞](e^(-xt)/t)dt
            </summary>
            <param name="src">The source vector containing the lower integration bounds</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.expInt(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the exponential integral function dst[i] = E(src[i]) for i=0..n-1 where
            E(x) = ∫[x, ∞](e^(-t)/t)dt = ∫[1, ∞](e^(-xt)/t)dt
            </summary>
            <param name="src">The source vector containing the lower integration bounds</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.cdfNorm(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = cdfnorm(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vectro</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.cdfNorm(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = cdfnorm(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.cdfNormInv(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = cdfnormInv(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vectro</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.cdfNormInv(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes dst[i] = cdfnormInv(src[i]) for i=0..n-1
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.gamma(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes the gamma function: dst[i] = gamma(src[i])
            </summary>
            <param name="src">The source vectro</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.gamma(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes the gamma function: dst[i] = gamma(src[i])
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.lgamma(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes of natural logarithm of the absolute value of gamma function: dst[i] = lgamma(src[i])
            </summary>
            <param name="src">The source vectro</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.lgamma(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| 
            <summary>
            Computes of natural logarithm of the absolute value of gamma function: dst[i] = lgamma(src[i])
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mkl.hypot(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| 
            <summary>
            Computes dst[i] = sqrt(a[i]^2 + b[i]^2)
            </summary>
            <param name="a">The first vector</param>
            <param name="b">The second vector</param>
            <param name="dst">The caller-allocated target vector</param>
        
| M:Z0.Mkl.mklx.NewStream(Z0.Mkl.Brng,System.UInt32,System.Int32)| 
            <summary>
            Initializes a new VslStream for rng 
            </summary>
            <param name="brng">The rng that will power the stream</param>
            <param name="seed">The initial state of the rng, if any</param>
            <param name="index">The stream index, if any</param>
        
| M:Z0.Mkl.mklx.Brng(Z0.Mkl.VslStream)              | 
            <summary>
            Gets the mkl brng identifier associated with a stream
            </summary>
            <param name="stream">The source stream</param>
        
| M:Z0.Mkl.mklx.ToBrng(Z0.RngKind)                  | 
            <summary>
            Gets the intel brng identifier associated with system rng classifier
            </summary>
            <param name="src">The mkl brng identifier</param>
        
| M:Z0.Mkl.mklx.ToRngKind(Z0.Mkl.Brng)              | 
            <summary>
            Gets the system rng classifier associated with a mkl brng
            </summary>
            <param name="src">The mkl brng identifier</param>
        
| M:Z0.Mkl.mklx.RngKind(Z0.Mkl.VslStream)           | 
            <summary>
            Gets system rng classifier associated with a stream
            </summary>
            <param name="stream">The source stream</param>
        
| M:Z0.Mkl.mklx.Sampler``1(Z0.Mkl.MklRng,Z0.IDistributionSpec{``0})| 
            <summary>
            Returns the sampler for a specified rng, data type and distribution spec
            </summary>
            <param name="rng">The random stream</param>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample point type</typeparam>
        
| M:Z0.Mkl.mklx.UniformSampler``1(Z0.Mkl.MklRng,System.Nullable{Z0.UniformSpec{``0}})| 
            <summary>
            Returns a uniform distribution sampler
            </summary>
            <param name="rng">The random stream</param>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample point type</typeparam>
        
| M:Z0.Mkl.mklx.UniformBitsSampler``1(Z0.Mkl.MklRng,System.Nullable{Z0.UniformBitsSpec{``0}})| 
            <summary>
            Returns a uniform bits distribution sampler
            </summary>
            <param name="rng">The random stream</param>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample point type</typeparam>
        
| M:Z0.Mkl.mklx.BernoulliSampler``1(Z0.Mkl.MklRng,Z0.BernoulliSpec{``0})| 
            <summary>
            Returns a Bernoulli distribution sampler
            </summary>
            <param name="rng">The random stream</param>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample point type</typeparam>
        
| M:Z0.Mkl.mklx.GaussianSampler``1(Z0.Mkl.MklRng,Z0.GaussianSpec{``0})| 
            <summary>
            Returns a Gaussian distribution sampler
            </summary>
            <param name="rng">The random stream</param>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample point type</typeparam>
        
| T:Z0.Mkl.mklu                                     | 
            <summary>
            mkl + u = Unsafe, Unsized, Unchecked and Unblocked
            </summary>
        
| F:Z0.Mkl.Sampler`2.DistSpec                       | 
            <summary>
            Characterizes the distribution that will be used when sampling
            </summary>
        
| T:Z0.Mkl.rng                                      | 
            <summary>
            Defines rng stream factor methods
            </summary>
        
| M:Z0.Mkl.rng.mrg32K31(System.UInt32)              | 
            <summary>
            Creates a stream predicated on VSL_BRNG_MRG32K3A, A combined multiple recursive generator with two components of order 3.
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.mcg31(System.UInt32)                 | 
            <summary>
            Creates a stream predicated on the VSL_BRNG_MCG31, A 31-bit multiplicative congruential generator.
            </summary>
            <param name="seed">A seed</param>
        
| M:Z0.Mkl.rng.mcg59(System.UInt32)                 | 
            <summary>
            Creates a stream predicated on VSL_BRNG_MCG59, A 59-bit multiplicative congruential generator.
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.entropy                              | 
            <summary>
            Creates a stream predicated on VSL_BRNG_NONDETERM, A non-deterministic random number generator.
            </summary>
        
| M:Z0.Mkl.rng.r250(System.UInt32)                  | 
            <summary>
            Creates a stream predicated on VSL_BRNG_R250, A generalized feedback shift register generator.
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.mt19937(System.UInt32)               | 
            <summary>
            Creates a stream predicated on VSL_BRNG_MT19937, A Mersenne Twister pseudorandom number generator.
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.sfmt19937(System.UInt32)             | 
            <summary>
            Creates a stream predicated on VSL_BRNG_SFMT19937, A SIMD-oriented Fast Mersenne Twister pseudorandom number generator.
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.wh(System.UInt32,System.Int32)       | 
            <summary>
            Creates a stream predicated on VSL_BRNG_WH, A set of 273 Wichmann-Hill combined multiplicative congruential generators.
            </summary>
            <param name="seed">A seed</param>
            <param name="index">A value between 0 and 272 that identifies the desired generator</param>
        
| M:Z0.Mkl.rng.mt2203(System.UInt32,System.Int32)   | 
            <summary>
            Creates a stream predicated on VSL_BRNG_MT2203, A set of 6024 Mersenne Twister pseudorandom number generators
            </summary>
            <param name="seed">The initial generator state</param>
            <param name="index">A value between 0 and 6023 that identifies the desired generator</param>
        
| M:Z0.Mkl.rng.philox(System.UInt32)                | 
            <summary>
            Creates a stream predicated on VSL_BRNG_PHILOX4X32X10, A Philox4x32-10 counter-based pseudorandom number generator.
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.ars5(System.UInt32)                  | 
            <summary>
            Creates a stream predicated on VSL_BRNG_ARS5, an ARS-5 counter-based pseudorandom number generator that uses instructions from the AES-NI set
            </summary>
            <param name="seed">The initial generator state</param>
        
| M:Z0.Mkl.rng.sobol(System.UInt32)                 | 
            <summary>
            Creates a stream predicated on VSL_BRNG_SOBOL, A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 40
            </summary>
            <param name="dimension">The selected dimension in the inclusive integral range [1,40]</param>
        
| M:Z0.Mkl.rng.niederr(System.UInt32)               | 
            <summary>
            Creates a stream predicated on VSL_BRNG_NIEDERR, A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 318
            </summary>
            <param name="dimension">The selected dimension in the inclusive integral range [1,318]</param>
        
| M:Z0.Mkl.rng.capabilities(Z0.Mkl.Brng)            | 
            <summary>
            Describes stream partitioning capabilies of an identifed generator
            </summary>
            <param name="sub">Indicates whether stream independed substream creation (Leapfrogging) is suppored</param>
            <param name="skip">Indicates whether elements can be skipped</param>
        
| T:Z0.Mkl.sample                                   | 
            <summary>
            Defines distribution sample operations
            </summary>
        
| M:Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Int32},System.Span{System.Int32})| 
            <summary>
            Samples a discrete uniform distribution over specified range
            </summary>
            <param name="stream">The source stream</param>
            <param name="range">The range of possible values</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,System.Int32,System.Int32,System.Span{System.Int32})| 
            <summary>
            Samples a discrete uniform distribution over specified range
            </summary>
            <param name="stream">The source stream</param>
            <param name="range">The range of possible values</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| 
            <summary>
            Samples a continuous uniform distribution over specified range
            </summary>
            <param name="stream">The source stream</param>
            <param name="range">The range of possible values</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Single},System.Span{System.Single})| 
            <summary>
            Samples a continuous uniform distribution over specified range
            </summary>
            <param name="stream">The source stream</param>
            <param name="range">The range of possible values</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Double},System.Span{System.Double})| 
            <summary>
            Samples a continuous uniform distribution over specified range
            </summary>
            <param name="stream">The source stream</param>
            <param name="range">The range of possible values</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| 
            <summary>
            Samples a continuous uniform distribution over specified range
            </summary>
            <param name="stream">The source stream</param>
            <param name="range">The range of possible values</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.bits(Z0.Mkl.MklRng,System.Span{System.UInt32})| 
            <summary>
            Samples uniformly distributed bits in 32-bit chunks.
            </summary>
            <param name="stream">The source stream</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.bits(Z0.Mkl.MklRng,System.Span{System.UInt64})| 
            <summary>
            Samples uniformly distributed bits in 64-bit chunks.
            </summary>
            <param name="stream">The source stream</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.cauchy(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| 
            <summary>
            Samples a single-precision Cauchy distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.cauchy(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| 
            <summary>
            Samples a double-precision Cauchy distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.geometric(Z0.Mkl.MklRng,System.Double,System.Span{System.Int32})| 
            <summary>
            Samples a geometric distributions
            </summary>
            <param name="stream">The source stream</param>
            <param name="p">The proability of a trial succeeding</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.bernoulli(Z0.Mkl.MklRng,System.Double,System.Span{System.Int32})| 
            <summary>
            Samples a Bernoulli distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="p">The probability of trial success</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.chi2(Z0.Mkl.MklRng,System.Int32,System.Span{System.Single})| 
            <summary>
            Samples a single-precision chi2 distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="dof">Degrees of freedom</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.chi2(Z0.Mkl.MklRng,System.Int32,System.Span{System.Double})| 
            <summary>
            Samples a double-precision chi2 distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="dof">Degrees of freedom</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.gaussian(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| 
            <summary>
            Samples a single-precision Gaussian distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="mu">The mean of the disribution</param>
            <param name="sigma">The distribution's standard deviation</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.gaussian(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| 
            <summary>
            Samples a double-precision Gaussian distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="mu">The mean of the disribution</param>
            <param name="sigma">The distribution's standard deviation</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.gamma(Z0.Mkl.MklRng,System.Single,System.Single,System.Single,System.Span{System.Single})| 
            <summary>
            Samples a single-precision gamma distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="alpha"></param>
            <param name="dx">The displacement</param>
            <param name="beta"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.gamma(Z0.Mkl.MklRng,System.Double,System.Double,System.Double,System.Span{System.Double})| 
            <summary>
            Samples a double-precision gamma distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="alpha"></param>
            <param name="dx">The displacement</param>
            <param name="beta"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.exp(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| 
            <summary>
            Samples a single-precision exponential distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="dx">The displacement</param>
            <param name="beta"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.exp(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| 
            <summary>
            Samples a double-precision exponential distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="dx">The displacement</param>
            <param name="beta"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.poisson(Z0.Mkl.MklRng,System.Double,System.Span{System.Int32})| 
            <summary>
            Samples a poisson distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="alpha"></param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.laplace(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| 
            <summary>
            Samples a single-precision Laplace distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="a">The disribution mean</param>
            <param name="b">The distribution scale</param>
            <param name="dst">The receiving buffer</param>
        
| M:Z0.Mkl.sample.laplace(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| 
            <summary>
            Samples a double-precision Laplace distribution
            </summary>
            <param name="stream">The source stream</param>
            <param name="mean">The disribution mean</param>
            <param name="beta">The distribution scale</param>
            <param name="dst">The receiving buffer</param>
        
| T:Z0.Mkl.samplers                                 | 
            <summary>
            Defines factory methods for creating distribution samplers
            </summary>
        
| M:Z0.Mkl.samplers.bits32(Z0.Mkl.MklRng,System.Nullable{System.Int32})| 
            <summary>
            Creates a bitwise uniform 32-bit sampler
            </summary>
            <param name="src">The random source</param>
            <param name="dst">The receiving buffer</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.bits64(Z0.Mkl.MklRng,System.Nullable{System.Int32})| 
            <summary>
            Creates a bitwise uniform 64-bit sampler
            </summary>
            <param name="src">The random source</param>
            <param name="dst">The receiving buffer</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.bits(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt32},System.Nullable{System.Int32})| 
            <summary>
            Creates 32-bit sampler of uninform bits
            </summary>
            <param name="src">The random source</param>
            <param name="dst">The receiving buffer</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.bits(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt64},System.Nullable{System.Int32})| 
            <summary>
            Creates 64-bit sampler of uninform bits
            </summary>
            <param name="src">The random source</param>
            <param name="dst">The receiving buffer</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit integers
            </summary>
            <param name="rng">The generator in use</param>
            <param name="data">The sampled data</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,System.Int32,System.Int32,System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit integers
            </summary>
            <param name="rng">The generator in use</param>
            <param name="data">The sampled data</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="data">The sampled data</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="range">The range of potenial sample values</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 64-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="data">The sampled data</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 64-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="range">The range of potenial sample values</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.UniformSpec{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit integers
            </summary>
            <param name="rng">The generator in use</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.UniformSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.UniformSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 64-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.bernoulli(Z0.Mkl.MklRng,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a Bernoulli sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="p">The probability of trial success</param>
            <param name="capacity">The buffer allocation</param>
        
| M:Z0.Mkl.samplers.bernoulli(Z0.Mkl.MklRng,Z0.BernoulliSpec{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a Bernoulli sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="p">The probability of trial success</param>
            <param name="capacity">The buffer allocation</param>
        
| M:Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| 
            <summary>
            Creates a single-precision Gaussian sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="mu">The mean of the disribution</param>
            <param name="sigma">The distribution's standard deviation</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a double-precision Gaussian sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="mu">The mean of the disribution</param>
            <param name="sigma">The distribution's standard deviation</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates gaussian sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates gaussian sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.geometric(Z0.Mkl.MklRng,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a geometric sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="p">The probability of trial successes</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.geometric(Z0.Mkl.MklRng,Z0.GeometricSpec{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a geometric sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="p">The probability of trial successes</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,System.Single,System.Single,System.Single,System.Nullable{System.Int32})| 
            <summary>
            Creates gamma sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="alpha"></param>
            <param name="dx">The displacement</param>
            <param name="beta"></param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,System.Double,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates gamma sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="alpha"></param>
            <param name="dx">The displacement</param>
            <param name="beta"></param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,Z0.GammaSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates gamma sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,Z0.GammaSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates gamma sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| 
            <summary>
            Creates an exponential sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates an exponential sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates an exponential sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates an exponential sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.poisson(Z0.Mkl.MklRng,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a Poisson sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="alpha"></param>
            <param name="dst"></param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.chisquare(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a chi square sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.chisquare(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a chi square sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| 
            <summary>
            Creates a Cauchy sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a Cauchy sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,Z0.CauchySpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a Cauchy sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,Z0.CauchySpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a Cauchy sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| 
            <summary>
            Creates a Laplace sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a Laplace sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a Laplace sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a Laplace sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformSpec{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit integers
            </summary>
            <param name="rng">The generator in use</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 32-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a uniform sampler for 64-bit floating point
            </summary>
            <param name="rng">The generator in use</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt32},System.Nullable{System.Int32})| 
            <summary>
            Creates 32-bit sampler of uninform bits
            </summary>
            <param name="src">The random source</param>
            <param name="dst">The receiving buffer</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt64},System.Nullable{System.Int32})| 
            <summary>
            Creates 64-bit sampler of uninform bits
            </summary>
            <param name="src">The random source</param>
            <param name="dst">The receiving buffer</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.BernoulliSpec{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a Bernoulli sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="p">The probability of trial success</param>
            <param name="capacity">The buffer allocation</param>
        
| M:Z0.Mkl.samplers.spec(Z0.Mkl.MklRng,Z0.GeometricSpec{System.Int32},System.Nullable{System.Int32})| 
            <summary>
            Creates a geometric sampler
            </summary>
            <param name="src">The source stream</param>
            <param name="p">The probability of trial successes</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a chi square sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a chi square sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates gaussian sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates gaussian sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates an exponential sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates an exponential sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GammaSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates gamma sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GammaSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates gamma sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="spec">The distribution specifier</param>
            <param name="capacity">The length of the sampler's buffer</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.CauchySpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a Cauchy sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| 
            <summary>
            Creates a Cauchy sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Single},System.Nullable{System.Int32})| 
            <summary>
            Creates a Laplace sampler for 32-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Double},System.Nullable{System.Int32})| 
            <summary>
            Creates a Laplace sampler for 64-bit floating point
            </summary>
            <param name="src">The source stream</param>
            <param name="location">The distribution mean</param>
            <param name="scale">The scale</param>
            <param name="capacity">The length of buffer allocations</param>
        
| M:Z0.Mkl.special.erf(System.Single)               | 
            <summary>
            The error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erf(System.Double)               | 
            <summary>
            The error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erfInv(System.Single)            | 
            <summary>
            The inverse error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erfInv(System.Double)            | 
            <summary>
            The inverse error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erfc(System.Single)              | 
            <summary>
            The complementary error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erfc(System.Double)              | 
            <summary>
            The complementary error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erfcInv(System.Single)           | 
            <summary>
            The inverse complementary error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.erfcInv(System.Double)           | 
            <summary>
            The inverse complementary error function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.cdfNorm(System.Single)           | 
            <summary>
            The cdf norm function
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Mkl.special.cdfNorm(System.Double)           | 
            <summary>
            The cdf norm function
            </summary>
            <param name="src">The source value</param>
        
| T:Z0.Mkl.EigenResult`2                            | 
            <summary>
            Encapsulates eigenvalues and possibly eigenvectors
            </summary>
        
| M:Z0.Mkl.MklException.Define(System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Creates an MKL-specific exception
            </summary>
            <param name="msg">The message text</param>
            <param name="caller">The calling member</param>
            <param name="file">The file in which invocation occurs</param>
            <param name="line">The file line number of invocation</param>
        
| M:Z0.Mkl.MklException.Define(System.Int32,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Creates an MKL-specific exception
            </summary>
            <param name="msg">The message text</param>
            <param name="caller">The calling member</param>
            <param name="file">The file in which invocation occurs</param>
            <param name="line">The file line number of invocation</param>
        
| M:Z0.Mkl.MklException.Throw``1(System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Creates and throws MKL-specific exception
            </summary>
            <param name="msg">The message text</param>
            <param name="caller">The calling member</param>
            <param name="file">The file in which invocation occurs</param>
            <param name="line">The file line number of invocation</param>
        
| M:Z0.Mkl.MklException.Throw(System.Int32,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Creates and throws MKL-specific exception
            </summary>
            <param name="retcode">The code returned by MKL indicating failure</param>
            <param name="caller">The calling member</param>
            <param name="file">The file in which invocation occurs</param>
            <param name="line">The file line number of invocation</param>
        
| P:Z0.Mkl.IVslSSTask`1.Samples                     | 
            <summary>
            Specifies the samples/observations over which computation will occur
            in row-major order
            </summary>
        
| P:Z0.Mkl.IVslSSTask`1.Dimension                   | 
            <summary>
            Specifies the Dimension of the observation vectors
            </summary>
        
| T:Z0.Mkl.VslSSTask`1                              | 
            <summary>
            Represents a summary statistics task
            </summary>
        
| F:Z0.Mkl.VslSSTask`1.Samples                      | 
            <summary>
            Defines the observations/samples over which the task will compute
            </summary>
        
| F:Z0.Mkl.VslSSTask`1.Weights                      | 
            <summary>
            Defines the weights applied to the sample vectors
            </summary>
        
| F:Z0.Mkl.VslSSTask`1.Indices                      | 
            <summary>
            Specifies the indices of the vector components that will be processed
            </summary>             
        
| M:Z0.Mkl.VssOps.Mean(Z0.Observations{System.Single})| 
            <summary>
            Finds the mean for each dimension
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Mean(Z0.Observations{System.Double})| 
            <summary>
            Finds the mean for each dimension
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Variance(Z0.Observations{System.Double})| 
            <summary>
            Finds the mean for each dimension
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Mean(Z0.Observations{System.Double},System.Double@)| 
            <summary>
            Calculates the mean
            </summary>
        
| M:Z0.Mkl.VssOps.Sum(Z0.Observations{System.Single})| 
            <summary>
            For each dimension, finds the sum
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Sum(Z0.Observations{System.Double})| 
            <summary>
            For each dimension, finds the sum
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Min(Z0.Observations{System.Single})| 
            <summary>
            For each dimension, finds the minimum sample value
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Min(Z0.Observations{System.Double})| 
            <summary>
            For each dimension, finds the minimum sample value
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Max(Z0.Observations{System.Single})| 
            <summary>
            For each dimension, finds the maximum sample value
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Max(Z0.Observations{System.Double})| 
            <summary>
            For each dimension, finds the maximum sample value
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Extrema(Z0.Observations{System.Single})| 
            <summary>
            For each dimension, finds the minimum and maxim sample value
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.Extrema(Z0.Observations{System.Double})| 
            <summary>
            For each dimension, finds the minimum and maxim sample value
            </summary>
            <param name="src">The sample</param>
        
| M:Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Single},Z0.Observations{System.Single})| 
            <summary>
            Applies the radix sort method to order the components in each observation vector
            </summary>
            <param name="samples">The observation vectors in row-major format</param>
            <param name="dim">The common dimension of each vector</param>
            <param name="dst">The buffer that will receive the sorted vectors</param>
        
| M:Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Double},Z0.Observations{System.Double})| 
            <summary>
            Applies the radix sort method to order the components in each observation vector
            </summary>
            <param name="samples">The observation vectors in row-major format</param>
            <param name="dim">The common dimension of each vector</param>
            <param name="dst">The buffer that will receive the sorted vectors</param>
        
| M:Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Single})| 
            <summary>
            Applies the radix sort method to order the components in each observation vector
            </summary>
            <param name="samples">The observation vectors in row-major format</param>
            <param name="dim">The common dimension of each vector</param>
        
| M:Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Double})| 
            <summary>
            Applies the radix sort method to order the components in each observation vector
            </summary>
            <param name="samples">The observation vectors in row-major format</param>
            <param name="dim">The common dimension of each vector</param>
        
| T:Z0.Mkl.VslStream                                | 
            <summary>
            Wraps a pointer to a VSL stream
            </summary>
        
| M:Z0.Mkl.CBLAS.cblas_sasum(System.Int32,System.Single@,System.Int32)| 
            <summary>
            Computes the sum of the absolute value of each component
            </summary>
            <param name="n">The number of vector components</param>
            <param name="X">A reference to the vector head</param>
            <param name="incX">?</param>
        
| M:Z0.Mkl.CBLAS.cblas_dasum(System.Int32,System.Double@,System.Int32)| 
            <summary>
            Computes the sum of the absolute value of each component
            </summary>
            <param name="n">The number of vector components</param>
            <param name="X">A reference to the vector head</param>
            <param name="incX">?</param>
        
| M:Z0.Mkl.CBLAS.cblas_scasum(System.Int32,Z0.ComplexF32@,System.Int32)| 
            <summary>
            Computes the sum of the absolute value of each real and imaginary part of each component
            </summary>
            <param name="n">The number of vector components</param>
            <param name="X">A reference to the vector head</param>
            <param name="incX">?</param>
        
| M:Z0.Mkl.CBLAS.cblas_dzasum(System.Int32,Z0.ComplexF64@,System.Int32)| 
            <summary>
            Computes the sum of the absolute value of each real and imaginary part of each component
            </summary>
            <param name="n">The number of vector components</param>
            <param name="X">A reference to the vector head</param>
            <param name="incX">?</param>
        
| M:Z0.Mkl.CBLAS.cblas_saxpy(System.Int32,System.Single,System.Single@,System.Int32,System.Single@,System.Int32)| 
            <summary>
            Computes Y = aX + Y for a scalar a and vectors X, Y
            </summary>
            <param name="n">The common number of components in x and y</param>
            <param name="a">The scalar that will be applied to X</param>
            <param name="x">The vector to be scaled</param>
            <param name="incx"></param>
            <param name="y">The second vector to be used as both input and output</param>
            <param name="incy"></param>
        
| M:Z0.Mkl.CBLAS.cblas_daxpy(System.Int32,System.Double,System.Double@,System.Int32,System.Double@,System.Int32)| 
            <summary>
            Computes Y = aX + Y for a scalar a and vectors X, Y
            </summary>
            <param name="n">The common number of components in x and y</param>
            <param name="a">The scalar that will be applied to X</param>
            <param name="x">The vector to be scaled</param>
            <param name="incx"></param>
            <param name="y">The second vector to be used as both input and output</param>
            <param name="incy"></param>
        
| M:Z0.Mkl.CBLAS.cblas_caxpy(System.Int32,Z0.ComplexF32@,Z0.ComplexF32@,System.Int32,Z0.ComplexF32@,System.Int32)| 
            <summary>
            Computes Y = aX + Y for a scalar a and vectors X, Y
            </summary>
            <param name="n">The common number of components in x and y</param>
            <param name="a">The scalar that will be applied to X</param>
            <param name="x">The vector to be scaled</param>
            <param name="incx"></param>
            <param name="y">The second vector to be used as both input and output</param>
            <param name="incy"></param>
        
| M:Z0.Mkl.CBLAS.cblas_zaxpy(System.Int32,Z0.ComplexF64@,Z0.ComplexF64@,System.Int32,Z0.ComplexF64@,System.Int32)| 
            <summary>
            Computes Y = aX + Y for a scalar a and vectors X, Y
            </summary>
            <param name="n">The common number of components in x and y</param>
            <param name="a">The scalar that will be applied to X</param>
            <param name="x">The vector to be scaled</param>
            <param name="incx"></param>
            <param name="y">The second vector to be used as both input and output</param>
            <param name="incy"></param>
        
| M:Z0.Mkl.CBLAS.cblas_sdot(System.Int32,System.Single@,System.Int32,System.Single@,System.Int32)| 
            <summary>
            Computes the canonical dot product of two vectors
            </summary>
            <param name="n">The common number of components in each vectorr</param>
            <param name="X">The first vector</param>
            <param name="incX"></param>
            <param name="Y">The second vector</param>
            <param name="incY"></param>
        
| M:Z0.Mkl.CBLAS.cblas_ddot(System.Int32,System.Double@,System.Int32,System.Double@,System.Int32)| 
            <summary>
            Computes the canonical dot product of two vectors
            </summary>
            <param name="n">The common number of components in each vectorr</param>
            <param name="X">The first vector</param>
            <param name="incX"></param>
            <param name="Y">The second vector</param>
            <param name="incY"></param>
        
| M:Z0.Mkl.CBLAS.cblas_dgemm(Z0.Mkl.BlasLayout,Z0.Mkl.BlasTrans,Z0.Mkl.BlasTrans,System.Int32,System.Int32,System.Int32,System.Double,System.Double@,System.Int32,System.Double@,System.Int32,System.Double,System.Double@,System.Int32)| 
            <summary>
            Computes C = alpha*A*B + beta*C where alhpa and beta are scalars and A,B and C are matrices of compatible dimensions 
            </summary>
            <param name="Layout">Indicates whether matrix is in row-major or column-major form</param>
            <param name="TransA">Specfies the transpose operation, if any, to be applied to A</param>
            <param name="TransB">Specfies the transpose operation, if any, to be applied to B</param>
            <param name="M">The number of rows in A and C</param>
            <param name="N">The number of columns in B and C</param>
            <param name="K">The number of columns in A and rows in B</param>
            <param name="alpha">Scales the product of the matrices A and B</param>
            <param name="A">An mxk matrix</param>
            <param name="lda">The leading dimension of A</param>
            <param name="B">A kxn matrix</param>
            <param name="ldb">The leading dimension of B</param>
            <param name="beta">Scales the matrix C</param>
            <param name="C">An mxn matrix</param>
            <param name="ldc">The leading dimension of C</param>
        
| M:Z0.Mkl.CBLAS.cblas_dgemv(Z0.Mkl.BlasLayout,Z0.Mkl.BlasTrans,System.Int32,System.Int32,System.Double,System.Double@,System.Int32,System.Double@,System.Int32,System.Double,System.Double@,System.Int32)| 
            <summary>
            Computes  y = alpha*A*x + beta*y ;
            </summary>
            <param name="Layout"></param>
            <param name="TransA"></param>
            <param name="m">The number of rows in the matrix A</param>
            <param name="n">The number of columns in the matrix A</param>
            <param name="alpha">A scalar value</param>
            <param name="A">An m x n matrix</param>
            <param name="lda">For Layout = CblasRowMajor , the value of lda must be at least max(1,n)</param>
            <param name="x">A vector of dimension n</param>
            <param name="incX"></param>
            <param name="beta">A scalar value</param>
            <param name="y">A vector of dimension m</param>
            <param name="incY"></param>
        
| M:Z0.Mkl.CBLAS.cblas_isamax(System.Int32,System.Single@,System.Int32)| 
            <summary>
            Finds the index of the vector component with maximum absoute value
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
        
| M:Z0.Mkl.CBLAS.cblas_idamax(System.Int32,System.Double@,System.Int32)| 
            <summary>
            Finds the index of the vector component with maximum absoute value
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
            <returns></returns>
        
| M:Z0.Mkl.CBLAS.cblas_icamax(System.Int32,Z0.ComplexF32@,System.Int32)| 
            <summary>
            Finds the index of the complex vector component such that the sum of the
            absolute value of the real and imaginary parts are maximial
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
            <returns></returns>
        
| M:Z0.Mkl.CBLAS.cblas_izamax(System.Int32,Z0.ComplexF64@,System.Int32)| 
            <summary>
            Finds the index of the complex vector component such that the sum of the
            absolute value of the real and imaginary parts is maximial
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
        
| M:Z0.Mkl.CBLAS.cblas_isamin(System.Int32,System.Single@,System.Int32)| 
            <summary>
            Finds the index of the vector component with minimal absoute value
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
        
| M:Z0.Mkl.CBLAS.cblas_idamin(System.Int32,System.Double@,System.Int32)| 
            <summary>
            Finds the index of the vector component with minimal absoute value
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
        
| M:Z0.Mkl.CBLAS.cblas_icamin(System.Int32,Z0.ComplexF32@,System.Int32)| 
            <summary>
            Finds the index of the complex vector component such that the sum of the
            absolute value of the real and imaginary parts is minimal
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
            <returns></returns>
        
| M:Z0.Mkl.CBLAS.cblas_izamin(System.Int32,Z0.ComplexF64@,System.Int32)| 
            <summary>
            Finds the index of the complex vector component such that the sum of the
            absolute value of the real and imaginary parts is minimal
            </summary>
            <param name="n">The number of cmponents in the source vector</param>
            <param name="X">A reference the source vector head</param>
            <param name="incX"></param>
            <returns></returns>
        
| M:Z0.Mkl.CBLAS.cblas_snrm2(System.Int32,System.Single@,System.Int32)| 
            <summary>
            Computes the Euclidean norm of the source vector
            </summary>
            <param name="n">The length of the vector</param>
            <param name="X">A reference to the vector head</param>
            <param name="incX">?</param>
        
| M:Z0.Mkl.CBLAS.cblas_dnrm2(System.Int32,System.Double@,System.Int32)| 
            <summary>
            Computes the Euclidean norm of the source vector
            </summary>
            <param name="n">The length of the vector</param>
            <param name="X">A reference to the vector head</param>
            <param name="incX">?</param>
        
| M:Z0.Mkl.LAPACK.LAPACKE_dgeev(Z0.Mkl.BlasLayout,System.Char,System.Char,System.Int32,System.Double@,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32,System.Double@,System.Int32)| 
            <summary>
            For an n-square real nonsymmetric matrix A, computes the eigenvalues and, optionally, 
            the left and/or right eigenvectors. The right eigenvector v of A satisfies A*v = λ*v
            where λ is its eigenvalue. The left eigenvector u of A satisfies u^H *A = λ*u H
            where where u^H denotes the conjugate transpose of u. The computed eigenvectors are 
            normalized to have Euclidean norm equal to 1 and largest component real
            </summary>
            <param name="jobvl">A reference a 'N' or 'V' character where 'V' indicates that the left eigenvectors should be computed and 'N' specifies that they shouldn't</param>
            <param name="jobvr">A reference a 'N' or 'V' character where 'V' indicates that the right eigenvectors should be computed and 'N' specifies that they shouldn't</param>
            <param name="n">The dimension of the source matrix</param>
            <param name="a">The source matrix</param>
            <param name="lda">The leading dimension of a</param>
            <param name="wr">The real parts of the computed eigenvalues</param>
            <param name="wi">The imaginary parts of the computed eigenvalues</param>
            <param name="vl">Applicable when eigenvectors are computed; if the j-th eigenvalue is real,the i-th component of the j-th eigenvector u j is stored in vl[(i - 1)*ldvl + (j - 1)] for row major layout</param>
            <param name="ldvl">The leading dimension of vl</param>
            <param name="vr">Applicable when eigenvectors are computed; if the j-th eigenvalue is real, then the i-th component of j-th eigenvector v j is stored in vr[(i - 1)*ldvr + (j - 1)] for row major layout</param>
            <param name="ldvr">Th leading dimenion of vr</param>
            <param name="ws">A reference to the workspace allocation, which for maximum performance should be of length n*n</param>
            <param name="wslen">The  size of the workspace allolcation</param>
            <param name="exitcode">If successful, populated with 0; if -i, the i-th parameter had an illegal value; if info=i, general alorithm failure</param>
        
| M:Z0.Mkl.LAPACK.LAPACKE_sgetrf(Z0.Mkl.BlasLayout,System.Int32,System.Int32,System.Single@,System.Int32,System.Int32@)| 
            <summary>
            Computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.
            </summary>
            <param name="layout">The array layout, either row-major or column-major</param>
            <param name="m">The number of rows in the matrix</param>
            <param name="n">The number of columns in the matrix</param>
            <param name="a">The source matrix</param>
            <param name="lda">The leading dimension of the array representation</param>
            <param name="ipiv">An integer array of dimension MxN that records the pivot indices that were used</param>
            <param name="info">The algorithm exit code</param>
        
| M:Z0.Mkl.LAPACK.LAPACKE_dgetrf(Z0.Mkl.BlasLayout,System.Int32,System.Int32,System.Double@,System.Int32,System.Int32@)| 
            <summary>
            Computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.
            </summary>
            <param name="layout">The array layout, either row-major or column-major</param>
            <param name="m">The number of rows in the matrix</param>
            <param name="n">The number of columns in the matrix</param>
            <param name="a">The source matrix</param>
            <param name="lda">The leading dimension of the array representation</param>
            <param name="ipiv">An integer array of dimension MxN that records the pivot indices that were used</param>
            <param name="info">The algorithm exit code</param>
        
| M:Z0.Mkl.LAPACK.LAPACKE_dpotrf(Z0.Mkl.BlasLayout,System.Char,System.Int32,System.Double@,System.Int32)| 
            <summary>
            Computes the Cholesky factorization of a symmetric, positive-definite matrix
            </summary>
            <param name="uplo">Either 'U' or 'L', respectively selecting the Transpose(U)*U or L*Transpose(L) factorizations </param>
            <param name="n">The order of the source matrix</param>
            <param name="a">The source matrix</param>
            <param name="lda">The leading dimension of the soruce matrix</param>
            <param name="exitcode">If successful, populated with 0; if -i, the i-th parameter had an illegal value; if info=i, general alorithm failure</param>
        
| T:Z0.Mkl.MklCodeAttribute                         | 
            <summary>
            Specifies the meaning of a numeric code where applied
            </summary>
        
| M:Z0.Mkl.VmlImport.vsSqr(System.Int32,System.Single@,System.Single@)| 
            <summary>
            Computes the square of each component: r[i] = a[i]^2
            </summary>
            <param name="n">The number of vector components</param>
            <param name="a">The input vector</param>
            <param name="r">The output vector</param>
        
| M:Z0.Mkl.VmlImport.vdSqr(System.Int32,System.Double@,System.Double@)| 
            <summary>
            Computes the square of each component: r[i] = a[i]^2
            </summary>
            <param name="n">The number of vector components</param>
            <param name="a">The input vector</param>
            <param name="r">The output vector</param>
        
| M:Z0.Mkl.VmlImport.vsSqrt(System.Int32,System.Single@,System.Single@)| 
            <summary>
            Computes the square root of each component: r[i] = a[i]^0.5
            </summary>
            <param name="n">The number of vector components</param>
            <param name="a">The input vector</param>
            <param name="r">The output vector</param>
        
| M:Z0.Mkl.VmlImport.vdSqrt(System.Int32,System.Double@,System.Double@)| 
            <summary>
            Computes the square root of each component: r[i] = a[i]^0.5
            </summary>
            <param name="n">The number of vector components</param>
            <param name="a">The input vector</param>
            <param name="r">The output vector</param>
        
| M:Z0.Mkl.VmlImport.vsPow(System.Int32,System.Single@,System.Single@,System.Single@)| 
            <summary>
            Computes r[i] = a[i]^b[i] 
            </summary>
            <param name="n">The number of vector components</param>
            <param name="a">The first input vector</param>
            <param name="b">The second input vector</param>
            <param name="r">The output vector</param>
        
| M:Z0.Mkl.VmlImport.vdPow(System.Int32,System.Double@,System.Double@,System.Double@)| 
            <summary>
            Computes r[i] = a[i]^b[i] 
            </summary>
            <param name="n">The number of vector components</param>
            <param name="a">The first input vector</param>
            <param name="b">The second input vector</param>
            <param name="r">The output vector</param>
        
| M:Z0.Mkl.VSL.viRngUniform(System.Int32,System.IntPtr,System.Int32,System.Int32@,System.Int32,System.Int32)| 
            <summary>
            Generates random 32-bit integers uniformly distributed over the interval [a, b).
            </summary>
            <param name="method">Always 0</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="a">The inclusive lower bound of the generated values</param>
            <param name="b">The exclusive upper bound of the generated values</param>
        
| M:Z0.Mkl.VSL.vsRngUniform(System.Int32,System.IntPtr,System.Int32,System.Single@,System.Single,System.Single)| 
            <summary>
            Generates random 32-bit floating point values uniformly distributed over the interval [a, b).
            </summary>
            <param name="method">Always 0</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="a">The inclusive lower bound of the generated values</param>
            <param name="b">The exclusive upper bound of the generated values</param>
        
| M:Z0.Mkl.VSL.vdRngUniform(System.Int32,System.IntPtr,System.Int32,System.Double@,System.Double,System.Double)| 
            <summary>
            Generates random 64-bit floating point values uniformly distributed over the interval [a, b).
            </summary>
            <param name="method">Always 0</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="a">The inclusive lower bound of the generated values</param>
            <param name="b">The exclusive upper bound of the generated values</param>
        
| M:Z0.Mkl.VSL.viRngUniformBits32(System.Int32,System.IntPtr,System.Int32,System.UInt32@)| 
            <summary>
            Generates 32-bit integers with uniform bit distribution
            </summary>
            <param name="method"></param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
        
| M:Z0.Mkl.VSL.viRngUniformBits64(System.Int32,System.IntPtr,System.Int32,System.UInt64@)| 
            <summary>
            Generates 64-bit integers with uniform bit distribution
            </summary>
            <param name="method"></param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
        
| M:Z0.Mkl.VSL.viRngBernoulli(System.Int32,System.IntPtr,System.Int32,System.Int32@,System.Double)| 
            <summary>
            Generates integers from the set {0,1} that follow a Bernoulli distribution
            </summary>
            <param name="method"></param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="p">The probabilty of trial success</param>
        
| M:Z0.Mkl.VSL.vsRngGamma(Z0.Mkl.VslGammaMethod,System.IntPtr,System.Int32,System.Single@,System.Single,System.Single,System.Single)| 
            <summary>
            Samples a single-precision Gamma distribution
            </summary>
            <param name="method">See <see cref="T:Z0.Mkl.VslGammaMethod" /> for possible values</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="alpha">The shape parameter</param>
            <param name="dx">The displacement value</param>
            <param name="beta">The scalefactor parameter</param>
            <remarks>
            alpha greater than 1 -  algorithm of Marsaglia is used, nonlinear
                                  transformation of gaussian numbers based on
                                  acceptance/rejection method with squeezes;
            alpha in [0.6, 1) -    rejection from the Weibull distribution is used;
            alpha less than .6   - transformation of exponential power distribution
                                  (EPD) is used, EPD random numbers are generated
                                  by means of acceptance/rejection technique;
            alpha==1             - gamma distribution reduces to exponential distribution
            </remarks>
        
| M:Z0.Mkl.VSL.vdRngGamma(Z0.Mkl.VslGammaMethod,System.IntPtr,System.Int32,System.Double@,System.Double,System.Double,System.Double)| 
            <summary>
            Samples a double-precision Gamma distribution
            </summary>
            <param name="method">See <see cref="T:Z0.Mkl.VslGammaMethod" /> for possible values</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="alpha">The shape parameter</param>
            <param name="a">The displacement value</param>
            <param name="beta">The scalefactor parameter</param>
            <remarks>
            alpha greater than 1 -  algorithm of Marsaglia is used, nonlinear
                                  transformation of gaussian numbers based on
                                  acceptance/rejection method with squeezes;
            alpha in [0.6, 1) -    rejection from the Weibull distribution is used;
            alpha less than .6   - transformation of exponential power distribution
                                  (EPD) is used, EPD random numbers are generated
                                  by means of acceptance/rejection technique;
            alpha==1             - gamma distribution reduces to exponential distribution
            </remarks>
        
| M:Z0.Mkl.VSL.vsRngChiSquare(System.Int32,System.IntPtr,System.Int32,System.Single@,System.Int32)| 
            <summary>
            Samples a single-precision Chi^2 distribution
            </summary>
            <param name="method">Always 0</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="v">The degrees of freedom</param>
            <remarks>
            v = 1, v = 3               - chi-square distributed random number is
                                         generated as a sum of squares of v independent
                                         normal random numbers;
            v is even and v = 16       - chi-square distributed random number is
                                         generated using the following formula:
                                         x = -2*ln(u[0]*...*u[v/2-1]),
                                         where u[i] - random numbers uniformly
                                         distributed over the interval (0,1);
            v &gt; 16, v is odd and v &gt; 3 - chi-square distribution reduces to gamma
                                         distribution;
            </remarks>
        
| M:Z0.Mkl.VSL.vdRngChiSquare(System.Int32,System.IntPtr,System.Int32,System.Double@,System.Int32)| 
            <summary>
            Samples a double-precision Chi^2 distribution
            </summary>
            <param name="method">Always 0</param>
            <param name="stream">An intialized brng stream</param>
            <param name="count">The number of values to sample</param>
            <param name="values">The sample-receiving buffer</param>
            <param name="v">The degrees of freedom</param>
            <remarks>
            v = 1, v = 3               - chi-square distributed random number is
                                         generated as a sum of squares of v independent
                                         normal random numbers;
            v is even and v = 16       - chi-square distributed random number is
                                         generated using the following formula:
                                         x = -2*ln(u[0]*...*u[v/2-1]),
                                         where u[i] - random numbers uniformly
                                         distributed over the interval (0,1);
            v &gt; 16, v is odd and v &gt; 3 - chi-square distribution reduces to gamma
                                         distribution;
            </remarks>
        
| M:Z0.Mkl.VSL.vdRngGaussianMV(Z0.Mkl.VslGaussianMVMethod,System.IntPtr,System.Int32,System.Double@,System.Int32,Z0.Mkl.VslMatrixStorage,System.Double@,System.Double@)| 
            <summary>
            
            </summary>
            <param name="method">The particular methodology used in the sampling process</param>
            <param name="stream">An intialized brng stream</param>
            <param name="vectors">The number of n-dimensional vectors to sample</param>
            <param name="components">Target into which vectors will be written</param>
            <param name="n">The number of dimensions</param>
            <param name="storage">The matrix storage format</param>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.Mkl.VSL.vslsSSNewTask(System.IntPtr@,System.Int32@,System.Int32@,Z0.Mkl.VslSSMatrixStorage@,System.Single@,System.Single@,System.Int32@)| 
            <summary>
            Creates a new single-precisiion summary statistics task
            </summary>
            <param name="task">A reference to task pointer that the routine will allocate</param>
            <param name="dim">The number of variables, i.e. the dimension of the observation vectors</param>
            <param name="obsCount">The number of observation vectors</param>
            <param name="obsStorage">The observation storage format</param>
            <param name="observations">The matrix of observations</param>
            <param name="weights">A weight vector of length obsCount. If NULL, implies each observation has a weight of 1 </param>
            <param name="indices">Array of vector components of length dim indicating the components that sould be processed. If null, all components are procesed</param>
        
| M:Z0.Mkl.VSL.vsldSSNewTask(System.IntPtr@,System.Int32@,System.Int32@,Z0.Mkl.VslSSMatrixStorage@,System.Double@,System.Double@,System.Int32@)| 
            <summary>
            Creates a new double-precisiion summary statistics task
            </summary>
            <param name="task">A reference to task pointer that the routine will allocate</param>
            <param name="dim">The number of variables, i.e. the dimension of the observation vectors</param>
            <param name="obsCount">The number of observation vectors</param>
            <param name="obsStorage">The observation storage format</param>
            <param name="observations">The matrix of observations</param>
            <param name="weights">A weight vector of length obsCount. If NULL, implies each observation has a weight of 1 </param>
            <param name="indices">Array of vector components of length dim indicating the components that sould be processed. If null, all components are procesed</param>
        
| M:Z0.Mkl.VSL.vslSSDeleteTask(System.IntPtr@)      | 
            <summary>
            Deletes a summary statistics task
            </summary>
            <param name="task">A reference to the task pointer that the routine will deallocate</param>
        
| M:Z0.Mkl.VSL.vslNewStream(System.IntPtr@,Z0.Mkl.Brng,System.UInt32)| 
            <summary>
            Creates a new random number stream
            </summary>
            <param name="stream">A reference to the stream pointer that will be allocated</param>
            <param name="brng">The generator upon which the stream is predicated</param>
            <param name="seed">The initial state of the generator</param>
        
| M:Z0.Mkl.VSL.vslDeleteStream(System.IntPtr@)      | 
            <summary>
            Deallocates a stream created via vslNewStream
            </summary>
            <param name="stream">A reference to the stream pointer that will be deallocated</param>
        
| M:Z0.Mkl.VSL.vslLeapfrogStream(System.IntPtr,System.Int32,System.Int32)| 
            <summary>
            Selects a substream from the source stream
            </summary>
            <param name="stream">The stream to manipulate</param>
            <param name="index">A 0-based index that identifies the substream</param>
            <param name="count">The maximum number of substreams</param>
        
| M:Z0.Mkl.VSL.vslSkipAheadStream(System.IntPtr,System.Int64)| 
            <summary>
            Advances the stream by a specified number of elements
            </summary>
            <param name="stream">The stream to manipulate</param>
            <param name="steps">The number of elements to skip</param>
        
| F:Z0.Mkl.Brng.MCG31                               | 
            <summary>
            A 31-bit multiplicative congruential generator.
            </summary>
        
| F:Z0.Mkl.Brng.R250                                | 
            <summary>
            A generalized feedback shift register generator.
            </summary>
        
| F:Z0.Mkl.Brng.MRG32K3A                            | 
            <summary>
            A combined multiple recursive generator with two components of order 3.
            </summary>
        
| F:Z0.Mkl.Brng.MCG59                               | 
            <summary>
            A 59-bit multiplicative congruential generator.
            </summary>
        
| F:Z0.Mkl.Brng.WH                                  | 
            <summary>
            A set of 273 Wichmann-Hill combined multiplicative congruential generators.
            </summary>
        
| F:Z0.Mkl.Brng.SOBOL                               | 
            <summary>
            A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 40
            User-defined dimensions are also available
            </summary>
        
| F:Z0.Mkl.Brng.NIEDERR                             | 
            <summary>
            A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 318.
            User-defined dimensions are also available.
            </summary>
        
| F:Z0.Mkl.Brng.MT19937                             | 
            <summary>
            A Mersenne Twister pseudorandom number generator.
            </summary>
        
| F:Z0.Mkl.Brng.MT2203                              | 
            <summary>
            A set of 6024 Mersenne Twister pseudorandom number generators
            </summary>
        
| F:Z0.Mkl.Brng.IABSTRACT                           | 
            <summary>
            An abstract random number generator for integer arrays.
            </summary>
        
| F:Z0.Mkl.Brng.DABSTRACT                           | 
            <summary>
            An abstract random number generator for double precision floating-point arrays.
            </summary>
        
| F:Z0.Mkl.Brng.SABSTRACT                           | 
            <summary>
            An abstract random number generator for single precision floating-point arrays.
            </summary>
        
| F:Z0.Mkl.Brng.SFMT19937                           | 
            <summary>
            A SIMD-oriented Fast Mersenne Twister pseudorandom number generator.
            </summary>
        
| F:Z0.Mkl.Brng.NONDETERM                           | 
            <summary>
            A non-deterministic random number generator.
            </summary>
        
| F:Z0.Mkl.Brng.ARS5                                | 
            <summary>
            An ARS-5 counter-based pseudorandom number generator that uses instructions from the AES-NI set
            </summary>
        
| F:Z0.Mkl.Brng.PHILOX4X32X10                       | 
            <summary>
            A Philox4x32-10 counter-based pseudorandom number generator.
            </summary>
        
| T:Z0.Mkl.VmlAccuracy                              | 
            <summary>
            Controls the accuracy of VML functions
            </summary>
        
| F:Z0.Mkl.VmlAccuracy.LowAccuracy                  | 
            <summary>Selects low accuracy VML functions</summary>
        
| F:Z0.Mkl.VmlAccuracy.HighAccuracy                 | 
            <summary>Selects high accuracy VML functions</summary>
        
| F:Z0.Mkl.VmlAccuracy.HighAccuracyP                | 
            <summary>Selects enhanced performance, high accuracy VML functions</summary>
        
| F:Z0.Mkl.VmlErrorMode.IgnoreErrors                | 
            <summary>Indicates errors are ignored</summary>
        
| F:Z0.Mkl.VmlErrorMode.ErrorNumber                 | 
            <summary>Indicates errno variable is set whenever there is an error</summary>
        
| F:Z0.Mkl.VmlErrorMode.StdErr                      | 
            <summary>Indicates error messages are written to standard error output</summary>
        
| F:Z0.Mkl.VmlErrorMode.RaiseException              | 
            <summary>Indicates an exception is raised when there is an error</summary>
        
| F:Z0.Mkl.VmlErrorMode.ErrorCallback               | 
            <summary>Indicates a user-speccified error handler is invoked</summary>
        
| F:Z0.Mkl.VmlErrorMode.PretendNoError              | 
            <summary>Ignore errors and do not update error status</summary>
        
| T:Z0.Mkl.VmlMask                                  | 
            <summary>
            Accuracy, floating-point and error handling control are packed in the VML mode variable. 
            </summary>
        
| F:Z0.Mkl.VmlMask.Accuracy                         | 
            <summary>
            Extract accuracy bits
            </summary>
        
| F:Z0.Mkl.VmlMask.FpuMode                          | 
            <summary>
            Extract floating-point control bits
            </summary>
        
| F:Z0.Mkl.VmlMask.ErrorMode                        | 
            <summary>
            Extract error handling control bits, including error callback bits
            </summary>
        
| F:Z0.Mkl.VmlMask.ErrorModeStdHandler              | 
            <summary>
            Extract error handling control bits, not including error callback bits
            </summary>
        
| F:Z0.Mkl.VmlMask.ErrorModeCallback                | 
            <summary>
            Extract error callback bits
            </summary>
        
| F:Z0.Mkl.VmlMask.OmpThreadCount                   | 
            <summary>
            Extract OpenMP(R) number of threads mode bits
            </summary>
        
| F:Z0.Mkl.VmlMask.FTZDAZ                           | 
            <summary>
            Extract FTZ and DAZ bits
            </summary>
        
| F:Z0.Mkl.VmlMask.TrapExceptions                   | 
            <summary>
            Extract exception trap bits
            </summary>
        
| F:Z0.Mkl.VmlModeFlags.DefaultRounding             | 
            <summary>Selects the default/current precision mode</summary>
        
| F:Z0.Mkl.VmlModeFlags.F32Rounding                 | 
            <summary>Selects acccuracy/rounding mode constistent with 32-bit floating point</summary>
        
| F:Z0.Mkl.VmlModeFlags.F64Rounding                 | 
            <summary>Selects acccuracy/rounding mode constistent with 64-bit floating point</summary>
        
| F:Z0.Mkl.VmlModeFlags.RestoreRounding             | 
            <summary>Selects the prior precision mode</summary>
        
| F:Z0.Mkl.VmlModeFlags.LowAccuracy                 | 
            <summary>Selects low accuracy VML functions</summary>
        
| F:Z0.Mkl.VmlModeFlags.HighAccuracy                | 
            <summary>Selects high accuracy VML functions</summary>
        
| F:Z0.Mkl.VmlModeFlags.HighAccuracyP               | 
            <summary>Selects enhanced performance, high accuracy VML functions</summary>
        
| F:Z0.Mkl.VmlModeFlags.IgnoreErrors                | 
            <summary>Indicates errors are ignored</summary>
        
| F:Z0.Mkl.VmlModeFlags.ErrorNumber                 | 
            <summary>Indicates errno variable is set whenever there is an error</summary>
        
| F:Z0.Mkl.VmlModeFlags.StdErr                      | 
            <summary>Indicates error messages are written to standard error output</summary>
        
| F:Z0.Mkl.VmlModeFlags.RaiseException              | 
            <summary>Indicates an exception is raised when there is an error</summary>
        
| F:Z0.Mkl.VmlModeFlags.ErrorCallback               | 
            <summary>Indicates a user-speccified error handler is invoked</summary>
        
| F:Z0.Mkl.VmlModeFlags.PretendNoError              | 
            <summary>Ignore errors and do not update error status</summary>
        
| F:Z0.Mkl.VmlPrecision.DefaultRounding             | 
            <summary>Selects the default/current precision mode</summary>
        
| F:Z0.Mkl.VmlPrecision.F32Rounding                 | 
            <summary>Selects acccuracy/rounding mode constistent with 32-bit floating point</summary>
        
| F:Z0.Mkl.VmlPrecision.F64Rounding                 | 
            <summary>Selects acccuracy/rounding mode constistent with 64-bit floating point</summary>
        
| F:Z0.Mkl.VmlPrecision.RestoreRounding             | 
            <summary>Selects the prior precision mode</summary>
        
| F:Z0.Mkl.VslSSMatrixStorage.VSL_SS_MATRIX_STORAGE_ROWS| 
            <summary>
            Observation vectors are organized by rows. For example, 10 observations
            in dimension 3 will conform to a 10 row 3 column matrix
            </summary>
        
| F:Z0.Mkl.VslSSMatrixStorage.VSL_SS_MATRIX_STORAGE_COLS| 
            <summary>
            Observation vectors are organized by columns. For example, 10 observations
            in dimension 3 will conform to a 3 row by 10 column matrix
            </summary>
        
| T:Z0.Mkl.VslGaussianMVMethod                      | 
            <summary>
             Multivariate (correlated) normal random number generator is based on uncorrelated 
            Gaussian random number generator (see vslsRngGaussian and vsldRngGaussian functions)
            </summary>
        
| F:Z0.Mkl.VslGaussianMVMethod.BoxMuller1           | 
            <summary>
            BOXMULLER  generates normally distributed random number x thru the pair of uniformly distributed 
            numbers u1 and u2 according to the formula: x=sqrt(-ln(u1))*sin(2*Pi*u2)
            </summary>
        
| F:Z0.Mkl.VslGaussianMVMethod.BoxMuller2           | 
            <summary>
            generates pair of normally distributed random numbers x1 and x2 thru the pair of uniformly 
            dustributed numbers u1 and u2 according to the formula x1=sqrt(-ln(u1))*sin(2*Pi*u2) 
            and x2=sqrt(-ln(u1))*cos(2*Pi*u2)
            </summary>
        
| F:Z0.Mkl.VslGaussianMVMethod.ICDF                 | 
            <summary>
            inverse cumulative distribution function method
            </summary>
        
| T:Z0.Mkl.VslMatrixStorage                         | 
            <summary>            
             Some multivariate random number generators, e.g. GaussianMV, operate
             with matrix parameters. To optimize matrix parameters usage VSL offers
             following matrix storage schemes. (See VSL documentation for more details).
            </summary>
        
| F:Z0.Mkl.VslMatrixStorage.Full                    | 
            <summary>
            Whole matrix is stored
            </summary>
        
| F:Z0.Mkl.VslMatrixStorage.Packed                  | 
            <summary>
            Lower/higher triangular matrix is packed in 1-dimensional array
            </summary>
        
| F:Z0.Mkl.VslMatrixStorage.Diagonal                | 
            <summary>
            Diagonal elements are packed in 1-dimensional array
            </summary>
        
| F:Z0.Mkl.VslPoissonMethod.PTPE                    | 
            <summary>
             Pif lambda&gt;=27, acceptance/rejection method is used with decomposition onto 4 regions:
             - 2 parallelograms;
             - triangle;
             - left exponential tail;
             - right exponential tail.
             othewise table lookup method is used        
            </summary>
        
| F:Z0.Mkl.VslRngMethod.VSL_RNG_METHOD_GAUSSIAN_BOXMULLER| 
            <summary>
            Generates normally distributed random number x thru the pair of uniformly distributed numbers u1 and u2 according to the formula:
            x=sqrt(-ln(u1))*sin(2*Pi*u2)
            </summary>       
        
| F:Z0.Mkl.VslRngMethod.VSL_RNG_METHOD_GAUSSIAN_BOXMULLER2| 
            <summary>
            Generates pair of normally distributed random numbers x1 and x2 thru the pair of uniformly distributed numbers u1 and u2
            according to the formula 
            x1=sqrt(-ln(u1))*sin(2*Pi*u2)
            x2=sqrt(-ln(u1))*cos(2*Pi*u2)
            NOTE: implementation correctly works with odd vector lengths
            </summary>       
        
| F:Z0.Mkl.VslRngMethod.VSL_RNG_METHOD_GAUSSIAN_ICDF| 
            <summary>
            inverse cumulative distribution function method
            </summary>       
        
| T:Z0.Mkl.VslSSComputeMethod                       | 
            <summary>
            SS routines provide computation of basic statistical estimates
            (central/raw moments up to 4th order, variance-covariance,
             minimum, maximum, skewness/kurtosis) using the following methods
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_FAST    | 
            <summary>
            Estimates are computed for price of one or two passes over observations using highly optimized Intel(R) MKL routines
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_1PASS   | 
            <summary>
            Estimate is computed for price of one pass of the observations
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_FAST_USER_MEAN| 
            <summary>
            Estimates are computed for price of one or two passes over observations given user defined mean for central moments, covariance and correlation
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_CP_TO_COVCOR| 
            <summary>
            Convert cross-product matrix to variance-covariance/correlation matrix 
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SUM_TO_MOM| 
            <summary>
            Convert raw/central sums to raw/central moments
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SD      | 
            <summary>
            Parametrization of correlation matrix using spectral decomposition method
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_TBS     | 
            <summary>
            Robust estimation of variance-covariance matrix and mean supports Rocke algorithm, TBS-estimator
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_MI      | 
            <summary>
            SS routine for estimation of missing values supports Multiple Imputation (MI) method
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_BACON   | 
            <summary>
            SS provides routine for detection of outliers, BACON method
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SQUANTS_ZW| 
            <summary>
            Streaming: intermediate estimates of quantiles during processing the next block are computed
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SQUANTS_ZW_FAST| 
            <summary>
            Streaming: intermediate estimates of quantiles during processing the next block are not computed
            </summary>
        
| F:Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_RADIX   | 
            <summary>
            Sorting using the radix method
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_MEAN          | 
            <summary>        
            Computes the array of means.
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_2R_MOM        | 
            <summary>        
            Computes the array of the 2nd order raw moments
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_3R_MOM        | 
            <summary>        
            Computes the array of the 3rd order raw moments
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_4R_MOM        | 
            <summary>        
            Computes the array of the 4th order raw moments
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_2C_MOM        | 
            <summary>        
            Computes the array of central sums of the 2nd order
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_3C_MOM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_4C_MOM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_SUM           | 
            <summary>        
            Computes the array of sums        
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_2R_SUM        | 
            <summary>        
            Computes the array of raw sums of the 2nd order
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_3R_SUM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_4R_SUM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_2C_SUM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_3C_SUM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_4C_SUM        | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_KURTOSIS      | 
            <summary>        
            Computes the array of kurtosis values
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_SKEWNESS      | 
            <summary>        
            Computes the array of skewness values
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_VARIATION     | 
            <summary>        
            Computes the array of variation coefficients
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_MIN           | 
            <summary>        
            For each dimension, finds the minimum sample value
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_MAX           | 
            <summary>        
            For each dimension, finds the maximum sample value
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_COV           | 
            <summary>        
            Computes a covariance matrix.
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_COR           | 
            <summary>        
            Computes a correlation matrix. The main diagonal of the correlation matrix holds 
            variances of the random vector components
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_CP            | 
            <summary>        
            Computes a cross-product matrix
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_POOLED_COV    | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_GROUP_COV     | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_POOLED_MEAN   | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_GROUP_MEAN    | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_QUANTS        | 
            <summary>        
            Computes quantiles
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_ORDER_STATS   | 
            <summary>        
            Computes order statistics
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_SORTED_OBSERV | 
             <summary>        
            
             </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_ROBUST_COV    | 
            <summary>        
            Computes a robust covariance matrix
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_OUTLIERS      | 
            <summary>        
            Detects outliers in the dataset
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_PARTIAL_COV   | 
            <summary>        
            Computes a partial covariance matrix.
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_PARTIAL_COR   | 
            <summary>        
            Computes a partial correlation matrix
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_MISSING_VALS  | 
            <summary>        
            Supports missing values in datasets.
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_PARAMTR_COR   | 
            <summary>        
            Computes a parameterized correlation matrix.
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_STREAM_QUANTS | 
            <summary>        
            Computes quantiles for streaming data.
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_MDAD          | 
            <summary>        
            Computes median absolute deviation
            </summary>
        
| F:Z0.Mkl.VslSSComputeRoutine.VSL_SS_MNAD          | 
            <summary>        
            Computes mean absolute deviation
            </summary>
        
| T:Z0.Mkl.VslSSStatus                              | 
            <summary>
            Defines summary statistic status codes
            </summary>
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_OK                    | 
            <summary>
            Everything is OK
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_NOT_FULL_RANK_MATRIX  | 
            <summary>
            Correlation matrix is not of full rank.
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_SEMIDEFINITE_COR      | 
            <summary>
            Correlation matrix passed into the parameterization function is semi-definite.
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_ALLOCATION_FAILURE| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_DIMEN       | 
            <summary>
            Dimension value is invalid.
            </summary>
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OBSERV_N    | 
            <summary>
            Invalid number (zero or negative) of observations was obtained
            </summary>
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_STORAGE_NOT_SUPPORTED| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_INDC_ADDR   | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_WEIGHTS     | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MEAN_ADDR   | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2R_MOM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3R_MOM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4R_MOM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2C_MOM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3C_MOM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4C_MOM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_KURTOSIS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_SKEWNESS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MIN_ADDR    | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MAX_ADDR    | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_VARIATION_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_COV_ADDR    | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_COR_ADDR    | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ACCUM_WEIGHT_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_QUANT_ORDER_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_QUANT_ORDER | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_QUANT_ADDR  | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ORDER_STATS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MOMORDER_NOT_SUPPORTED| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_ALL_OBSERVS_OUTLIERS| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_COV_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_MEAN_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_METHOD_NOT_SUPPORTED| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_INDC_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_NULL_TASK_DESCRIPTOR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OBSERV_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_SINGULAR_COV    | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_POOLED_COV_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_POOLED_MEAN_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_COV_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_MEAN_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_INDC  | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OUTLIERS_WEIGHTS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STORAGE_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COV_IDX_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COV_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COR_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PARAMS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PARAMS_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_BAD_PARAMS_N| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PARAMS   | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_SIMUL_VALS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_ESTIMATES_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_ESTIMATES_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_ESTIMATES_N| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_OUTPUT_PARAMS| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PRIOR_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PRIOR_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_MISSING_VALS_N| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARAMTR_COR_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_COR         | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COV_IDX| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_SUM_ADDR    | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2R_SUM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3R_SUM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4R_SUM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2C_SUM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3C_SUM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4C_SUM_ADDR | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_CP_ADDR     | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MDAD_ADDR   | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MNAD_ADDR   | 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_SORTED_OBSERV_ADDR| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_INDICES_NOT_SUPPORTED| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_ROBCOV_INTERN_C1| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_PARTIALCOV_INTERN_C1| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_PARTIALCOV_INTERN_C2| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C1| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C2| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C3| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C4| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C5| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_PARAMTRCOR_INTERN_C1| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_COVRANK_INTERNAL_ERROR_C1| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C1| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSStatus.VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C2| 
            <summary>
            
            </summary>        
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_DIMEN       | 
            <summary>
            Address of a variable that holds the task dimension
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OBSERV_N    | 
            <summary>
            Address of a variable that holds the number of observations
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OBSERV      | 
            <summary>
            Address of the observation matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OBSERV_STORAGE| 
            <summary>
            Address of a variable that holds the storage format for the observation matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_INDC        | 
            <summary>
            Address of the array of indices
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_WEIGHTS     | 
            <summary>
            Address of the array of observation weights
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MEAN        | 
            <summary>
            Address of the array of means
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2R_MOM      | 
            <summary>
            Address of an array of raw moments of the second order
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3R_MOM      | 
            <summary>
            Address of an array of raw moments of the third order
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4R_MOM      | 
            <summary>
            Address of an array of raw moments of the fourth order
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2C_MOM      | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3C_MOM      | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4C_MOM      | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SUM         | 
            <summary>
            Address of array of sums
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2R_SUM      | 
            <summary>
            Address of array of raw sums of 2nd order
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3R_SUM      | 
            <summary>
            Address of array of raw sums of 3rd order
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4R_SUM      | 
            <summary>
            Address of array of raw sums of 4th order
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2C_SUM      | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3C_SUM      | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4C_SUM      | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_KURTOSIS    | 
            <summary>
            Address of the array of kurtosis estimates
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SKEWNESS    | 
            <summary>
            Address of the array of skewness estimates
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MIN         | 
            <summary>
            Address of the array of minimum estimates
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MAX         | 
            <summary>
            Address of the array of maximum estimates
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_VARIATION   | 
            <summary>
            Address of the array of variation coefficients
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COV         | 
            <summary>
            Address of a covariance matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COV_STORAGE | 
            <summary>
            Address of the variable that holds the storage format for a covariance matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COR         | 
            <summary>
            Address of a correlation matrix 
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COR_STORAGE | 
            <summary>
            Address of the variable that holds the storage format for a correlation matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_CP          | 
            <summary>
            Address of cross-product matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_CP_STORAGE  | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ACCUM_WEIGHT| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_QUANT_ORDER_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_QUANT_ORDER | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_QUANT_QUANTILES| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ORDER_STATS | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_POOLED_COV_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_POOLED_MEAN | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_POOLED_COV  | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_COV_INDC| 
            <summary>
            Address of an array of indices for which covariance/means should be computed
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_REQ_GROUP_INDC| 
            <summary>
            Address of an array of indices for which group estimates such as covariance or means are requested
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_MEAN  | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_COV_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_COV   | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV_PARAMS_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV_PARAMS| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_MEAN | 
            <summary>
            Address of an array of robust means
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV  | 
            <summary>
            Address of a robust covariance matrix
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OUTLIERS_PARAMS_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OUTLIERS_PARAMS| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OUTLIERS_WEIGHT| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ORDER_STATS_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COV_IDX| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COV | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COV_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COR | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COR_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PARAMS_N | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PARAMS   | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_INIT_ESTIMATES_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_INIT_ESTIMATES| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_SIMUL_VALS_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_SIMUL_VALS| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_ESTIMATES_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_ESTIMATES| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PRIOR_N  | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PRIOR    | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARAMTR_COR | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARAMTR_COR_STORAGE| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_PARAMS_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_PARAMS| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_ORDER_N| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_ORDER| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_QUANTILES| 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MDAD        | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MNAD        | 
            <summary>
            
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SORTED_OBSERV| 
            <summary>
            Address of the array that stores sorted results
            </summary>
        
| F:Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SORTED_OBSERV_STORAGE| 
            <summary>
            Address of a variable that holds the storage format of an output matrix
            </summary>
        
| M:Z0.VectorOps.Add``2(Z0.Block256{``0,``1}@,Z0.Block256{``0,``1}@,Z0.Block256{``0,``1}@)| 
            <summary>
            Add the first vector to the second and populates the third with the result
            </summary>
            <param name="x">The first source vector</param>
            <param name="y">The second source vector</param>
            <param name="z">The target vector</param>
            <typeparam name="N">The vector length type</typeparam>
            <typeparam name="T">The component type</typeparam>
        
