Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.W8,Z0.N0)| 16x16i -&gt; 16x8u
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W8)| 8x16u -&gt; 8x8u
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.W8)| 16x16u -&gt; 16x8u
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W8)| 8x32u -&gt; 8x8u (a scalar vector)
Method      | Z0.VCompact.vcompact(Z0.Vector512{System.UInt32}@,Z0.W8)              | 16x32u -&gt; 16x8u
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.W8)| 16x16i -&gt; 16x8i
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W16)| 8x32u -&gt; 8x16u
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.W16)| 8x32i -&gt; 8x16i
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.W32)| 4x64w -&gt; 4x32w
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.Int64},Z0.W32)| 4x64w -&gt; 4x32w
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W64)| 8x16u -&gt; 64u (a scalar)
Method      | Z0.VCompact.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W64)| 8x32u -&gt; 64u (a scalar)
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N128,Z0.NK{System.Int16})| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            8x8i -&gt; 8x16i
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N128,Z0.NK{System.UInt16})| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            8x8i -&gt; 8x16u            dst[i] = src[i], i = 8, ..., 15
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N256,Z0.NK{System.Int32})| __m256i _mm256_cvtepi8_epi32 (__m128i a) VPMOVSXBD ymm, xmm/m128            8x8i -&gt; 8x32i
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N128,Z0.NK{System.Int16})| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16i            src[i] -&gt; dst[i], i = 8,.., 15
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N128,Z0.NK{System.UInt16})| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16u            src[i] -&gt; dst[i], i = 0,.., 7
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,Z0.NK{System.UInt32})| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,Z0.NK{System.Int32})| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N128,Z0.NK{System.Int32})| __m128i _mm_cvtepi16_epi32 (__m128i a) PMOVSXWD xmm, xmm/m64
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N256,Z0.NK{System.Int64})| __m256i _mm256_cvtepi16_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x16u -&gt; 4x64u
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N128,Z0.NK{System.UInt32})| __m128i _mm_cvtepu16_epi32 (__m128i a)PMOVZXWD xmm, xmm/m64
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,Z0.NK{System.Int64})| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,Z0.NK{System.UInt64})| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N128,Z0.NK{System.Int64})| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64i            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N128,Z0.NK{System.UInt64})| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64u            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N256,Z0.NK{System.UInt16})| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16u
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N256,Z0.NK{System.Int16})| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16i
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N256,Z0.NK{System.Int32})| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16i -&gt; 8x32i
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N256,Z0.NK{System.UInt32})| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16u -&gt; 8x32u
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N256,Z0.NK{System.Int64})| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32i -&gt; 4x64i
Method      | Z0.VHiMap.vmaphi(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N256,Z0.NK{System.UInt64})| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32u -&gt; 4x64u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.W16,Z0.N1)| 16x8u -&gt; 16x16u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.W16)| 16x8i -&gt; 16x16i
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.W16,Z0.N0)| 32x8w -&gt; 32x16i
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.W16)| 32x8i -&gt; 32x16i
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.W16)| 16x8u -&gt; 16x16u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.W16)| 32x8u -&gt; 32x16u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.W32)| 8x16i -&gt; 8x32i
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.W32)| 16x16i -&gt; 16x32i
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.W32)| 32x8i -&gt; (8x32i, 8x32i, 8x32i, 8x32i)
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.W64)| 4x32u -&gt; 4x64u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.W64)| 4x32w -&gt; 4x64w
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W64)| 8x32u -&gt; 8x64u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.W64)| 8x32i -&gt; 8x64i
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.W32)| 32x8u -&gt; 32x32u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.W32)| 16x8u -&gt; 16x32u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W32)| 8x16u -&gt; 8x32u
Method      | Z0.VInflate.vinflate(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.W32)| 16x16u -&gt; 16x32u
Type        | Z0.VLut16                                                             | Implements a parallel 16-way lookup
Type        | Z0.VLut32                                                             | Implements a parallel 32-way lookup
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N0,Z0.W16)| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            8x8i -&gt; 8x16i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N1,Z0.W16)| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            8x8i -&gt; 8x16i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N0,Z0.W16,Z0.N1)| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            dst[i] = src[i], i = 1, ..., 7            8x8i -&gt; 8x16u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N1,Z0.W16,Z0.N1)| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            8x8i -&gt; 8x16u            dst[i] = src[i], i = 8, ..., 15
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N0,Z0.W32)| __m256i _mm256_cvtepi8_epi32 (__m128i a) VPMOVSXBD ymm, xmm/m128            8x8i -&gt; 8x32i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N1,Z0.W32)| __m256i _mm256_cvtepi8_epi32 (__m128i a) VPMOVSXBD ymm, xmm/m128            8x8i -&gt; 8x32i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N0,Z0.W16,Z0.N1)| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16u            src[i] -&gt; dst[i], i = 0,.., 7
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N1,Z0.W16,Z0.N1)| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16i            src[i] -&gt; dst[i], i = 8,.., 15
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N0,Z0.W16)| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16u            src[i] -&gt; dst[i], i = 0,.., 7            Zero extends 8 8-bit integers in the low 8 bytes of the source to 8 16-bit integers the target
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N1,Z0.W16)| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16u            src[i] -&gt; dst[i], i = 0,.., 7            Zero extends 8 8-bit integers in the hi 8 bytes of the source to 8 16-bit integers the target
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N0,Z0.W32)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N1,Z0.W32)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N0,Z0.W32,Z0.N1)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N1,Z0.W32,Z0.N1)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N0,Z0.N32)| __m128i _mm_cvtepi16_epi32 (__m128i a) PMOVSXWD xmm, xmm/m64
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N1,Z0.N32)| __m128i _mm_cvtepi16_epi32 (__m128i a) PMOVSXWD xmm, xmm/m64
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N0,Z0.W64)| __m256i _mm256_cvtepi16_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x16u -&gt; 4x64u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N1,Z0.W64)| __m256i _mm256_cvtepi16_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x16u -&gt; 4x64u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N0,Z0.W32)| __m128i _mm_cvtepu16_epi32 (__m128i a)PMOVZXWD xmm, xmm/m64
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N1,Z0.W32)| __m128i _mm_cvtepu16_epi32 (__m128i a)PMOVZXWD xmm, xmm/m64
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N0,Z0.W64,Z0.N1)| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N1,Z0.W64,Z0.N1)| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N0,Z0.W64)| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N1,Z0.W64)| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N0,Z0.W64,Z0.N1)| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64i            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N1,Z0.W64,Z0.N1)| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64i            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N0,Z0.W64)| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64u            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N1,Z0.W64)| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64u            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N0,Z0.W16)| __m256i _mm256_cvtepi8_epi16 (__m128i a) VPMOVSXBW ymm, xmm/m128            16x8u -&gt; 16x16i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N1,Z0.W16)| __m256i _mm256_cvtepi8_epi16 (__m128i a) VPMOVSXBW ymm, xmm/m128            16x8u -&gt; 16x16i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N0,Z0.W16)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1,Z0.W16)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N0,Z0.W16,Z0.N1)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1,Z0.W16,Z0.N1)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N0,Z0.W32)| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16i -&gt; 8x32i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N1,Z0.W32)| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16i -&gt; 8x32i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N0,Z0.W32)| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16u -&gt; 8x32u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N1,Z0.W32)| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16u -&gt; 8x32u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N0,Z0.W64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32i -&gt; 4x64i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N1,Z0.W64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32i -&gt; 4x64i
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N0,Z0.W64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32u -&gt; 4x64u
Method      | Z0.VMap.vmap(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N1,Z0.W64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32u -&gt; 4x64u
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N8)| src[0..7] -&gt; r/m8[0..31]            int _mm_cvtsi128_si32 (__m128i a)MOVD reg/m32, xmm
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N8) | src[0..7] -&gt; r/m8[0..31]            int _mm_cvtsi128_si32 (__m128i a)MOVD reg/m32, xmm
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N16)| src[0..15] -&gt; r/m16[0..31]            int _mm_cvtsi128_si32 (__m128i a)MOVD reg/m32, xmm
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W16)| src[0..15] -&gt; r/m16[0..31]            int _mm_cvtsi128_si32 (__m128i a)MOVD reg/m32, xmm
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N32)| src[0..31] -&gt; r/m32[0..31]            int _mm_cvtsi128_si32 (__m128i a) MOVD reg/m32, xmm
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N32)| src[0..31] -&gt; r/m32[0..31]            int _mm_cvtsi128_si32 (__m128i a) MOVD reg/m32, xmm
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.Int64},Z0.N64)| src[0..64] -&gt; r/m32[0..64]            __int64 _mm_cvtsi128_si64 (__m128i a) MOVQ reg/m64, xmm            Moves the lower half of the source vector to a 64-bit register
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.N64)| src[0..64] -&gt; r/m32[0..64]            __int64 _mm_cvtsi128_si64 (__m128i a) MOVQ reg/m64, xmm            Moves the lower half of the source vector to a 64-bit register
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt64})| src[0..31] -&gt; dst[0..64]            __m128d _mm_cvtss_sd (__m128d a, __m128 b) CVTSS2SD xmm, xmm/m32            Overwrites the lower half of the target vector with the value obtained by converting the             least component of the source vector to a 64-bit integer
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64})| src[0..31] -&gt; dst[0..64]            __m128d _mm_cvtss_sd (__m128d a, __m128 b) CVTSS2SD xmm, xmm/m32            Overwrites the lower half of the target vector with the value obtained by converting the least component of the source vector to a 64-bit integer
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W16,Z0.N3,Z0.N0)| src[3] -&gt; r/m16
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W16,Z0.N2,Z0.N0)| src[2] -&gt; r/m16
Method      | Z0.VMov.vmove(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W16,Z0.N1,Z0.N0)| src[1] -&gt; r/m16
Method      | Z0.VMov.vmove(System.Byte@,Z0.N2,Z0.W64)                              | PMOVZXBQ xmm, m16            2x8u -&gt; 2x64u            Projects 2 unsigned 8-bit values onto 2 unsigned 64-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N4,Z0.W32)                              | PMOVZXBD xmm, m32            4x8u -&gt; 4x32u            Projects 4 unsigned 8-bit values onto 4 unsigned 32-bit values
Method      | Z0.VMov.vmove(System.Byte@,Z0.N4,Z0.W64)                              | VPMOVZXBQ ymm, m32            4x8u -&gt; 4x64u            Projects four unsigned 8-bit integers onto 4 unsigned 64-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N8,Z0.W16)                              | PMOVZXBW xmm, m64            8x8u -&gt; 8x16u            Projects 8 8-bit unsigned integers onto 8 16-bit unsigned integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N8,Z0.W32)                              | VPMOVZXBD ymm, m64            8x8u -&gt; 8x32u            Projects 8 unsigned 8-bit integers onto 8 unsigned 32-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N16,Z0.W16)                             | VPMOVZXBW ymm, m128            16x8u -&gt; 16x16u            Projects 16 unsigned 8-bit integers onto 16 unsigned 16-bit integers
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N2,Z0.W64)                            | PMOVZXWQ xmm, m32            2x16u -&gt; 2x64u            Projects 2 unsigned 16-bit integers onto two unsigned 64-bit integers
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N4,Z0.W64)                            | VPMOVZXWQ ymm, m64            4x16u -&gt; 4x64u
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N4,Z0.W32)                            | PMOVSXWD xmm, m64            4x16u -&gt; 4x32u            Projects 4 16-bit unsigned integers onto 4 32-bit unsigned integers
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N8,Z0.W32)                            | VPMOVZXWD ymm, m128            8x16u -&gt; 8x32u            Projects 8 unsigned 16-bit integers onto 8 unsigned 32-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N2,Z0.W64,Z0.N1)                        | PMOVZXBQ xmm, m16            2x8u -&gt; 2x64i            Projects two unsigned 8-bit integers onto 2 signed 64-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N128,Z0.W32,Z0.N1)                      | PMOVZXBD xmm, m32            4x8u -&gt; 4x32i            Projects four unsigned 8-bit integers onto 4 signed 32-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.W256,Z0.W64,Z0.N1)                      | VPMOVZXBQ ymm, m32            4x8u -&gt; 4x64i            Projects four unsigned 8-bit integers onto 4 signed 64-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N8,Z0.W16,Z0.N1)                        | PMOVZXBW xmm, m64            8x8u -&gt; 8x16u            Projects 8 8-bit unsigned integers onto 8 signed 16-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N16,Z0.W16,Z0.N1)                       | VPMOVZXBW ymm, m128            16x8u -&gt; 16x16i            Projects 16 8-bit unsigned integers onto 16 signed 16-bit integers
Method      | Z0.VMov.vmove(System.Int16@,Z0.N2,Z0.W64)                             | PMOVSXWQ xmm, m32            2x16i -&gt; 2x64u            Projects 2 16-bit signed integers onto 2 64-bit signed integers
Method      | Z0.VMov.vmove(System.Int16@,Z0.N4,Z0.W32)                             | PMOVSXWD xmm, m64            4x16i -&gt; 4x32i            Projects 4 16-bit signed integers onto 4 32-bit signed integers
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N2,Z0.W64,Z0.N1)                      | PMOVZXWQ xmm, m32            Projects 2 unsigned 16-bit integers onto 2 signed 64-bit integers
Method      | Z0.VMov.vmove(System.Int32@,Z0.N2,Z0.W64)                             | PMOVSXDQ xmm, m64            2x32i -&gt; 2x64i            Projects 2 signed 32-bit integers onto 2 signed 64-bit integers
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N16,Z0.W32)                           | VPMOVZXWD ymm, m128            16x16u -&gt;16x32u            Projects 16 unsigned 16-bit integers onto 16 unsigned 32-bit integers
Method      | Z0.VMov.vmove(System.Int16@,Z0.N16,Z0.W32)                            | VPMOVSXWD ymm, m128            16x16u -&gt;16x32u            Projects 16 signed 16-bit integers onto 16 signed 32-bit integers
Method      | Z0.VMov.vmove(System.Byte@,Z0.N32,Z0.W16)                             | VPMOVZXBW ymm, m128            32x8u -&gt; 32x16u            Projects 32 unsigned 8-bit integers onto 32 unsigned 16-bit integers
Method      | Z0.VMov.vmove(System.UInt16@,Z0.N8,Z0.W64)                            | VPMOVZXWQ ymm, m64            8x16u -&gt; 8x64u            Projects 8 unsigned 16-bit integers onto 8 unsigned 64-bit integers
Method      | Z0.VMov.vmove(System.UInt32@,Z0.N8,Z0.W64)                            | VPMOVZXDQ ymm, m128            8x32u -&gt; 8x64u            Projects 8 unsigned 32-bit integers onto 8 unsigned 64-bit integers
Method      | Z0.VSym.encode(System.Char@,System.Int32,Z0.N16,Z0.AsciCharCode@)     | Converts 16 source characters to 16 asci codes
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},Z0.W8)| (8x16i,8x16i) -&gt; 16x8i
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},Z0.W8,Z0.N0)| (8x16i,8x16i) -&gt; 16x8u
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},Z0.W8)| (16x16i,16x16i) -&gt; 32x8i
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.W8)| (8x16u,8x16u) -&gt; 16x8u
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.W8)| (16x16u,16x16u) -&gt; 32x8u
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},Z0.W16)| (4x32i,4x32i) -&gt; 8x16i
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.W16)| (4x32u,4x32u) -&gt; 8x16u
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},Z0.W16,Z0.N0)| __m128i _mm_packus_epi32 (__m128i a, __m128i b)PACKUSDW xmm, xmm/m128              (4x32w,4x32w) -&gt; 8x16w
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N8,Z0.N0)| __m256i _mm256_packus_epi16 (__m256i a, __m256i b)VPACKUSWB ymm, ymm, ymm/m256            (16x8w,16x8w) -&gt; 32x8w
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N16,Z0.N0)| __m256i _mm256_packus_epi32 (__m256i a, __m256i b)VPACKUSDW ymm, ymm, ymm/m256            (8x32w,8x32w) -&gt; 16x16w
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W16)| (8x32w,8x32w) -&gt; 16x16w
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W8)| (8x32u, 8x32u) -&gt; 16x8u
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.W32)| (2x64w,2x64w) -&gt; 4x32w
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.W32)| (4x64w,4x64w) -&gt; 8x32w
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.W8)| (4x32u,4x32u,4x32u,4x32u) -&gt; 16x8u
Method      | Z0.VZip.vzip(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.W8)| (8x32u,8x32u,8x32u,8x32u) -&gt; 32x8w
Method      | Z0.Permute.apply``1(Z0.Perm,System.ReadOnlySpan{``0},System.Span{``0}@)| Shuffles span content as determined by a permutation
Method      | Z0.Permute.digits(Z0.Perm16)                                          | Computes the digits corresponding to each 4-bit segment of the permutation spec as
Method      | Z0.Permute.digits(Z0.Perm32)                                          | Computes the digits corresponding to each 5-bit segment of the permutation spec
Method      | Z0.Permute.videntity(Z0.W128)                                         | Creates the identity permutation
Method      | Z0.Permute.vreversed(Z0.W128)                                         | Creates the reversal of the identity permutation
Method      | Z0.Permute.videntity(Z0.W256)                                         | Creates the identity permutation
Method      | Z0.Permute.vreversed(Z0.W256)                                         | Creates the reversal of the identity permutation
Method      | Z0.Permute.literals(Z0.Perm16L,System.Span{Z0.Perm16L})               | Extracts the ordered sequence of symbolic literals that define a 16-symbol permutation to a caller-supplied target
Method      | Z0.Permute.literals(Z0.Perm16L)                                       | Extracts the ordered sequence of symbolic literals that define a 16-symbol permutation to a caller-supplied target
Method      | Z0.Permute.Exhaust(Z0.N4)                                             | Enumerates all permutation map format strings on 4 symbols
Method      | Z0.Permute.mincells(System.UInt64,System.UInt64)                      | Computes the minimum number of cells required to store a specified number of bits
Method      | Z0.Permute.symbols``2(``1,System.Int32,System.Int32)                  | Assumes that             1. The source data source is a tape upon which fixed-width symbols are sequentially recorded            2. The symbol alphabet is defined by the last character of the literals defined by an enumeration            With these preconditions, the operation returns the ordered sequence of symbols written to the tape
Method      | Z0.Permute.natural(Z0.Perm4L,Z0.NatPerm{Z0.N4}@)                      | Reifies a permutation of length 8 from its canonical scalar specification
Method      | Z0.Permute.natural(Z0.Perm8L)                                         | Reifies a permutation of length 8 from its canonical scalar specification
Method      | Z0.Permute.natural(Z0.Perm16L,Z0.NatPerm{Z0.N16}@)                    | Reifies a permutation of length 16 from its canonical scalar representative
Method      | Z0.Permute.natural(Z0.Perm16L)                                        | Reifies a permutation of length 16 from its canonical scalar representative
Method      | Z0.Permute.natural``1(``0)                                            | Creates a new identity permutation of natural length
Method      | Z0.Permute.natural``1(``0,Z0.NatSwap{``0}[])                          | Defines an identity permutation of natural length and applies a specified sequence of transpostions
Method      | Z0.Permute.natural``1(Z0.NatSwap{``0}[])                              | Defines an identity permutation of natural length and applies a specified sequence of transpostions
Method      | Z0.Permute.natural``1(``0,System.ReadOnlySpan{System.Int32})          | Defines a permutation of natural length
Method      | Z0.Permute.natural``1(``0,System.Int32[])                             | Defines a permutation of natural length
Method      | Z0.Permute.pack(Z0.NatPerm{Z0.N4})                                    | Distills a natural permutation on 4 symbols to its canonical literal specification
Method      | Z0.Permute.pack(Z0.NatPerm{Z0.N8})                                    | Distills a natural permutation on 8 symbols to its canonical literal specification
Method      | Z0.Permute.pack(Z0.NatPerm{Z0.N16})                                   | Distills a natural permutation on 16 symbols to its canonical literal specification
Method      | Z0.Permute.shuffle(Z0.Perm@,Z0.IPolyrand)                             | Shuffles the permutation in-place using a provided random source.
Method      | Z0.Permute.shuffle``1(Z0.Perm{``0}@,Z0.IPolyrand)                     | Shuffles the permutation in-place using a provided random source.
Method      | Z0.Permute.swap``2(``1,``1,``0)                                       | Defines a transposition for a permutation of natural length
Method      | Z0.Permute.swap``1(System.Int32,System.Int32)                         | Defines a transposition for a permutation of natural length
Method      | Z0.Permute.symbols(Z0.Perm2x4)                                        | Deconstructs a permutation literal into an ordered sequence of symbols that define the permutation
Method      | Z0.Permute.symbols(Z0.Perm4L)                                         | Deconstructs a permutation literal into an ordered sequence of symbols that define the permutation
Method      | Z0.Permute.symbols(Z0.Perm8L)                                         | Deconstructs a permutation literal into an ordered sequence of symbols that define the permutation
Method      | Z0.Permute.symbols(Z0.Perm16L)                                        | Deconstructs a permutation literal into an ordered sequence of symbols that define the permutation
Method      | Z0.Permute.vinit(Z0.W128,Z0.Perm{System.Byte})                        | Creates a fixed 16-bit permutation over a generic permutation over 16 elements
Method      | Z0.Permute.vinit(Z0.W256,Z0.Perm{System.Byte})                        | Creates a fixed 32-bit permutation over a generic permutation over 32 elements
Method      | Z0.PermX.ToLiteral(Z0.NatPerm{Z0.N4})                                 | Constructs the canonical literal representation of a natural permutation on 4 symbols
Method      | Z0.PermX.ToLiteral(Z0.NatPerm{Z0.N8})                                 | Constructs the canonical literal representation of a natural permutation on 8 symbols
Method      | Z0.PermX.ToLiteral(Z0.NatPerm{Z0.N16})                                | Constructs the canonical literal representation of a natural permutation on 16 symbols
Method      | Z0.PermX.ToDigits(Z0.Perm4L)                                          | Computes the digits corresponding to each 2-bit segment of the permutation spec
Method      | Z0.PermX.ToDigits(Z0.Perm8L)                                          | Computes the digits corresponding to each 3-bit segment of the permutation spec
Method      | Z0.PermX.ToDigits(Z0.Perm16L)                                         | Computes the digits corresponding to each 4-bit segment of the permutation spec
Method      | Z0.PermX.ToShuffleSpec(Z0.NatPerm{Z0.N16})                            | Defines a shuffle spec from a permutation
Method      | Z0.PermExtended.Permute(Z0.BitString,Z0.Perm)                         | Shuffles bitstring content as determined by a permutation
Method      | Z0.PermExtended.Literals(Z0.Perm4L)                                   | Constructs the sequence of permutation symbols corresponding to the canonical literal representation
Method      | Z0.PermExtended.Literals(Z0.Perm8L)                                   | Constructs the sequence of permutation symbols corresponding to the canonical literal representation
Method      | Z0.PermExtended.Literals(Z0.Perm16L)                                  | Constructs the sequence of permutation symbols corresponding to the canonical literal representation
Method      | Z0.PermExtended.Symbols(Z0.Perm4L)                                    | Deconstructs a permutation literal into an odered sequence of symbols that define the permutation
Method      | Z0.PermExtended.Symbols(Z0.Perm8L)                                    | Deconstructs a permutation literal into an odered sequence of symbols that define the permutation
Method      | Z0.PermExtended.Symbols(Z0.Perm16L)                                   | Deconstructs a permutation literal into an odered sequence of symbols that define the permutation
Method      | Z0.PermExtended.Symbols(Z0.Perm2x4)                                   | Deconstructs a permutation literal into an odered sequence of symbols that define the permutation
Method      | Z0.PermExtended.Swap``1(Z0.Block128{``0},Z0.Swap[])                   | Applies a sequence of transpositions to a blocked container
Method      | Z0.PermExtended.Swap``1(Z0.Block256{``0},Z0.Swap[])                   | Applies a sequence of transpositions to a blocked container
Method      | Z0.PermExtended.Format(Z0.Perm4L)                                     | Formats a permutation literal as one would hope
Method      | Z0.PermExtended.Format(Z0.Perm8L)                                     | Formats a permutation literal as one would hope
Method      | Z0.PermExtended.Format(Z0.Perm16L)                                    | Formats a permutation literal as one would hope
Method      | Z0.PermExtended.FormatMap(Z0.Perm4L)                                  | Formats the value as a permutation map, i.e., [00 01 10 11]: ABCD -&gt; ABDC
Method      | Z0.PRngX.Perm(Z0.IPolyrand,System.Int32)                              | Produces a random permutation of a specified length
Method      | Z0.PRngX.Perm(Z0.IPolyrand,System.UInt32)                             | Produces a random permutation of a specified length
Method      | Z0.PRngX.Perms(Z0.IPolyrand,System.Int32)                             | Produces a stream of random permutation of a specified length
Method      | Z0.PRngX.Shuffle22``1(Z0.NatPerm{``0},Z0.IPolyrand)                   | Shuffles the permutation in-place using a provided random source.
Method      | Z0.PRngX.Perm``1(Z0.IPolyrand,``0)                                    | Produces a random permutation of natural length N
Method      | Z0.PRngX.Perms``1(Z0.IPolyrand,``0)                                   | Produces a stream of random permutation of natural length N
Method      | Z0.PRngX.Shuffle(Z0.IPolyrand,Z0.Perm@)                               | Shuffles a copy of the source permutation, leaving the original intact.
Method      | Z0.PRngX.Shuffle``1(Z0.IPolyrand,Z0.NatPerm{``0}@)                    | Shuffles a copy of the source permutatiion, leaving the original intact.
Method      | Z0.PRngX.Shuffle``1(Z0.NatPerm{``0},Z0.IPolyrand)                     | Shuffles the permutation in-place using a provided random source.
Type        | Z0.VDataGen                                                           | Generates the data presented by VData
Method      | Z0.VDataGen.vpalt``1(Z0.N128,``0,``0)                                 | Creates a vector populated with component values that alternate between the first operand and the second
Method      | Z0.VDataGen.vdecrements``1(Z0.N128,``0)                               | Creates a 128-bit vector with components that decrease by uint step from an initial value
Method      | Z0.VDataGen.vdecrements``1(Z0.N256,``0)                               | Creates a 128-bit vector with components that decrease by uint step from an initial value
Method      | Z0.VDataGen.vdecrements``1(Z0.N128,``0,``0)                           | Creates a 128-bit vector with components that decrease by a specified step from an initial value
Method      | Z0.VDataGen.vdecrements``1(Z0.N256,``0,``0)                           | Creates a 256-bit vector with components that decrease by a specified step from an initial value
Method      | Z0.VDataGen.vincrements``1(Z0.N128,``0,``0)                           | Creates a 128-bit vector with components that increase by a specified step from an initial value
Method      | Z0.VDataGen.vincrements``1(Z0.N256,``0,``0)                           | Creates a 256-bit vector with components that increase by a specified step from an initial value
Method      | Z0.VDataGen.DefineClearAlt``1                                         | Creates a shuffle mask that zeroes-out ever-other vector component
Type        | Z0.dvec                                                               | Surfaces AES intrinsics
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector128{System.SByte})       | __m128i _mm_abs_epi8 (__m128i a)PABSB xmm, xmm/m128            Computes the absolute value of each source component
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector128{System.Int16})       | __m128i _mm_abs_epi16 (__m128i a)PABSW xmm, xmm/m128            Computes the absolute value of each source component
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector128{System.Int32})       | __m128i _mm_abs_epi32 (__m128i a)PABSD xmm, xmm/m128            Computes the absolute value of each source component
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector128{System.Int64})       | Computes the absolute value of each source component
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector256{System.SByte})       | __m256i _mm256_abs_epi8 (__m256i a) VPABSB ymm, ymm/m256            Computes the absolute value of each source component
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector256{System.Int16})       | __m256i _mm256_abs_epi16 (__m256i a)VPABSW ymm, ymm/m256            Computes the absolute value of each source component
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector256{System.Int32})       | Computes the absolute value of each source component             __m256i _mm256_abs_epi32 (__m256i a)VPABSD ymm, ymm/m256
Method      | Z0.dvec.vabs(System.Runtime.Intrinsics.Vector256{System.Int64})       | Computes the absolute value of each source component
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_add_epi8 (__m128i a, __m128i b) PADDB xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_add_epi8 (__m128i a, __m128i b) PADDB xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_add_epi16 (__m128i a, __m128i b) PADDW xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_add_epi16 (__m128i a, __m128i b) PADDW xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128d _mm_add_pd (__m128d a, __m128d b) ADDPD xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_add_epi32 (__m128i a, __m128i b) PADDD xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_add_epi64 (__m128i a, __m128i b)PADDQ xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_add_epi64 (__m128i a, __m128i b) PADDQ xmm, xmm/m128
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_add_epi8 (__m256i a, __m256i b) VPADDB ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_add_epi8 (__m256i a, __m256i b) VPADDB ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_add_epi16 (__m256i a, __m256i b) VPADDW ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_add_epi16 (__m256i a, __m256i b) VPADDW ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_add_epi32 (__m256i a, __m256i b) VPADDD ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_add_epi32 (__m256i a, __m256i b) VPADDD ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_add_epi64 (__m256i a, __m256i b) VPADDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vadd(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_add_epi64 (__m256i a, __m256i b) VPADDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_adds_epu8 (__m128i a, __m128i b) PADDUSB xmm, xmm/m128
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_adds_epi8 (__m128i a, __m128i b) PADDSB xmm, xmm/m128
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_adds_epi16 (__m128i a, __m128i b) PADDSW xmm, xmm/m128
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_adds_epu16 (__m128i a, __m128i b) PADDUSW xmm, xmm/m128
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_adds_epu8 (__m256i a, __m256i b) VPADDUSB ymm, ymm, ymm/m256
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_adds_epi8 (__m256i a, __m256i b) VPADDSB ymm, ymm, ymm/m256
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_adds_epi16 (__m256i a, __m256i b) VPADDSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vadds(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_adds_epu16 (__m256i a, __m256i b) VPADDUSW ymm, ymm, ymm/m256
Method      | Z0.dvec.aesEncode(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_aesenc_si128 (__m128i a, __m128i RoundKey) AESENC xmm, xmm/m128            Performs one round of an AES encryption flow on the source data using the round key
Method      | Z0.dvec.aesEncodeLast(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_aesenclast_si128 (__m128i a, __m128i RoundKey) AESENCLAST xmm, xmm/m128            AES Encrypt (last)
Method      | Z0.dvec.aesDecode(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_aesdec_si128 (__m128i a, __m128i RoundKey) AESDEC xmm, xmm/m128            Performs one round of an AES decryption flow on the source data using the round key
Method      | Z0.dvec.aesDecodeLast(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_aesdeclast_si128 (__m128i a, __m128i RoundKey) AESDECLAST xmm, xmm/m128            Performs the last round of an AES decryption flow on the source data using the round key
Method      | Z0.dvec.aesInvMix(System.Runtime.Intrinsics.Vector128{System.Byte})   | __m128i _mm_aesimc_si128 (__m128i a) AESIMC xmm, xmm/m128            Applies the InvMixColumns transformation to the source
Method      | Z0.dvec.aesKeyGen(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| _m128i _mm_aeskeygenassist_si128 (__m128i a, const int imm8) AESKEYGENASSIST xmm, xmm/m128, imm8            Assist in expanding the AES cipher key by computing steps towards generating a round key for             encryption cipher using data from a and an 8-bit round constant specified in imm8
Method      | Z0.dvec.vavg(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_avg_epu8 (__m128i a, __m128i b) PAVGB xmm, xmm/m128
Method      | Z0.dvec.vavg(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_avg_epu16 (__m128i a, __m128i b) PAVGW xmm, xmm/m128
Method      | Z0.dvec.vavg(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_avg_epu8 (__m256i a, __m256i b) VPAVGB ymm, ymm, ymm/m256
Method      | Z0.dvec.vavg(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_avg_epu16 (__m256i a, __m256i b) VPAVGW ymm, ymm, ymm/m256
Method      | Z0.dvec.clmulr(Z0.N8,System.Byte,System.Byte,System.UInt16)           | Computes the carryless product of the operands reduced by a specified polynomial
Method      | Z0.dvec.clmulr(Z0.N16,System.UInt16,System.UInt16,System.UInt32)      | Computes the carryless product of the operands reduced by a specified polynomial
Method      | Z0.dvec.clmulr(Z0.N32,System.UInt32,System.UInt32,System.UInt64)      | Computes the carryless product of the operands reduced by a specified polynomial
Method      | Z0.dvec.clmul(System.UInt64,System.UInt64)                            | __m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8) PCLMULQDQ xmm, xmm/m128, imm8            Computes the caryless 128-bit product of two 64-bit operands
Method      | Z0.dvec.clmul(System.Byte,System.Byte)                                | Computes the caryless 16-bit product of two 8-bit operands
Method      | Z0.dvec.clmul(System.UInt16,System.UInt16)                            | Returns the caryless 32 bit product of two 16-bit operands
Method      | Z0.dvec.clmul(System.UInt32,System.UInt32)                            | Returns the caryless 64 bit product from two 32-bit operands
Method      | Z0.dvec.vclmul(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8) PCLMULQDQ xmm, xmm/m128, imm8            Computes the caryless 128-bit product of two 64-bit operands
Method      | Z0.dvec.vclmulr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the carryless product of two 64-bit operands reduced by a specified polynomial
Method      | Z0.dvec.crc(System.UInt32,System.Byte)                                | unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v) CRC32 reg, reg/m8
Method      | Z0.dvec.crc(System.UInt32,System.UInt16)                              | unsigned int _mm_crc32_u16 (unsigned int crc, unsigned short v) CRC32 reg, reg/m16
Method      | Z0.dvec.crc(System.UInt32,System.UInt32)                              | unsigned int _mm_crc32_u32 (unsigned int crc, unsigned int v) CRC32 reg, reg/m32
Method      | Z0.dvec.crc(System.UInt32,System.UInt64)                              | nsigned __int64 _mm_crc32_u64 (unsigned __int64 crc, unsigned __int64 v) CRC32 reg, reg/m64
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.SByte})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.Byte})        | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.Int16})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.UInt16})      | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.Int32})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.UInt32})      | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.Int64})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector128{System.UInt64})      | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.SByte})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.Byte})        | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.Int16})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.UInt16})      | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.Int32})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.UInt32})      | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.Int64})       | Decrements each component by 1
Method      | Z0.dvec.vdec(System.Runtime.Intrinsics.Vector256{System.UInt64})      | Decrements each component by 1
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes the horizontal sum of the source vectors
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes the horizontal sum of the source vectors
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_hadd_epi16 (__m128i a, __m128i b) PHADDW xmm, xmm/m128
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_hadd_epi32 (__m128i a, __m128i b) PHADDD xmm, xmm/m128
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes the horizontal sum of the source vectors
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_hadd_epi16 (__m256i a, __m256i b) VPHADDW ymm, ymm, ymm/m256
Method      | Z0.dvec.vhadd(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| m256i _mm256_hadd_epi32 (__m256i a, __m256i b) VPHADDD ymm, ymm, ymm/m256
Method      | Z0.dvec.vhadds(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_hadds_epi16 (__m128i a, __m128i b)PHADDSW xmm, xmm/m128
Method      | Z0.dvec.vhadds(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_hadds_epi16 (__m256i a, __m256i b)VPHADDSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vhsub(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_hsub_epi16 (__m128i a, __m128i b) PHSUBW xmm, xmm/m128
Method      | Z0.dvec.vhsub(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_hsub_epi32 (__m128i a, __m128i b) PHSUBD xmm, xmm/m128
Method      | Z0.dvec.vhsub(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_hsub_epi16 (__m256i a, __m256i b) VPHSUBW ymm, ymm, ymm/m256
Method      | Z0.dvec.vhsub(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_hsub_epi32 (__m256i a, __m256i b)VPHSUBD ymm, ymm, ymm/m256
Method      | Z0.dvec.vhsubs(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_hsubs_epi16 (__m128i a, __m128i b) PHSUBSW xmm, xmm/m128
Method      | Z0.dvec.vhsubs(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_hsubs_epi16 (__m256i a, __m256i b) VPHSUBSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.SByte})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.Byte})        | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.Int16})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.UInt16})      | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.Int32})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.UInt32})      | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.Int64})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector128{System.UInt64})      | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.SByte})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.Byte})        | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.Int16})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.UInt16})      | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.Int32})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.UInt32})      | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.Int64})       | Inrements each component by 1
Method      | Z0.dvec.vinc(System.Runtime.Intrinsics.Vector256{System.UInt64})      | Inrements each component by 1
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes the full 16-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes the full 16-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes the full 32-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes the full 32-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_mul_epi32 (__m128i a, __m128i b)PMULDQ xmm, xmm/m128
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_mul_epu32 (__m128i a, __m128i b) PMULUDQ xmm, xmm/m128
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes the full 16-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes the full 16-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes the full 32-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes the full 32-bit product of corresponding left and right source components
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_mul_epi32 (__m256i a, __m256i b) VPMULDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_mul_epu32 (__m256i a, __m256i b) VPMULUDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmul(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Multiplies two two 256-bit/u64 vectors to yield a 256-bit/u64 vector; only provides reasonable            results if there's no 64-bit overflow
Method      | Z0.dvec.vmuladj(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_maddubs_epi16 (__m128i a, __m128i b)PMADDUBSW xmm, xmm/m128
Method      | Z0.dvec.vmuladj(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_maddubs_epi16 (__m256i a, __m256i b) VPMADDUBSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmuladj(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_madd_epi16 (__m256i a, __m256i b) VPMADDWD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmulhi(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_mulhi_epu16 (__m128i a, __m128i b) PMULHUW xmm, xmm/m128
Method      | Z0.dvec.vmulhi(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_mulhi_epu16 (__m128i a, __m128i b) PMULHUW xmm, xmm/m128
Method      | Z0.dvec.vmulhi(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_mulhi_epu16 (__m256i a, __m256i b) VPMULHUW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmulhi(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_mulhi_epu16 (__m256i a, __m256i b) VPMULHUW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmulhrs(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b)PMULHRSW xmm, xmm/m128
Method      | Z0.dvec.vmulhrs(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_mulhrs_epi16 (__m256i a, __m256i b)VPMULHRSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_mullo_epi16 (__m128i a, __m128i b) PMULLW xmm, xmm/m128
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_mullo_epi16 (__m128i a, __m128i b) PMULLW xmm, xmm/m128
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_mullo_epi32 (__m128i a, __m128i b)PMULLD xmm, xmm/m128
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_mullo_epi32 (__m128i a, __m128i b)PMULLD xmm, xmm/m128
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_mullo_epi16 (__m256i a, __m256i b)VPMULLW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_mullo_epi16 (__m256i a, __m256i b)VPMULLW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_mullo_epi32 (__m256i a, __m256i b) VPMULLD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmullo(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_mullo_epi32 (__m256i a, __m256i b) VPMULLD ymm, ymm, ymm/m256
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.SByte})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.Byte})     | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.Int16})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.UInt16})   | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.Int32})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.UInt32})   | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.Int64})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector128{System.UInt64})   | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.SByte})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.Byte})     | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.Int16})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.UInt16})   | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.Int32})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.UInt32})   | Negates the source vector (Two's complement)
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.Int64})    | Negates the source vector
Method      | Z0.dvec.vnegate(System.Runtime.Intrinsics.Vector256{System.UInt64})   | Negates the source vector (Two's complement)
Method      | Z0.dvec.vsad(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_sad_epu8 (__m128i a, __m128i b) PSADBW xmm, xmm/m128
Method      | Z0.dvec.vsad(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_sad_epu8 (__m256i a, __m256i b) VPSADBW ymm, ymm, ymm/m256            Computes the absolute differences of packed unsigned 8-bit integers in a and b,             then horizontally sums each consecutive 8 differences to produce four             unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low             16 bits of 64-bit elements in dst.
Method      | Z0.dvec.vsign(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_sign_epi8 (__m128i a, __m128i b)PSIGNB xmm, xmm/m128            Negates target vector elements if the corresponding element in the match vector is negative;             If the corresponding component in the match vector is zero, the target vector component is set to zero
Method      | Z0.dvec.vsign(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_sign_epi16 (__m128i a, __m128i b)PSIGNW xmm, xmm/m128            Negates target vector elements if the corresponding element in the match vector is negative;             If the corresponding component in the match vector is zero, the target vector component is set to zero
Method      | Z0.dvec.vsign(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_sign_epi32 (__m128i a, __m128i b)PSIGND xmm, xmm/m128            Negates target vector elements if the corresponding element in the match vector is negative;             If the corresponding component in the match vector is zero, the target vector component is set to zero
Method      | Z0.dvec.vsign(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_sign_epi8 (__m256i a, __m256i b)VPSIGNB ymm, ymm, ymm/m256            Negates target vector elements if the corresponding element in the match vector is negative;             If the corresponding component in the match vector is zero, the target vector component is set to zero
Method      | Z0.dvec.vsign(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_sign_epi16 (__m256i a, __m256i b)VPSIGNW ymm, ymm, ymm/m256            Negates target vector elements if the corresponding element in the match vector is negative;             If the corresponding component in the match vector is zero, the target vector component is set to zero
Method      | Z0.dvec.vsign(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_sign_epi32 (__m256i a, __m256i b)VPSIGND ymm, ymm, ymm/m256            Negates target vector elements if the corresponding element in the match vector is negative;             If the corresponding component in the match vector is zero, the target vector component is set to zero
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_sub_epi8 (__m128i a, __m128i b) PSUBB xmm, xmm/m128            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_sub_epi8 (__m128i a, __m128i b) PSUBB xmm, xmm/m128            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_sub_epi16 (__m128i a, __m128i b) PSUBW xmm, xmm/m128            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_sub_epi16 (__m128i a, __m128i b) PSUBW xmm, xmm/m128            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_sub_epi32 (__m128i a, __m128i b) PSUBD xmm, xmm/m12            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_sub_epi32 (__m128i a, __m128i b) PSUBD xmm, xmm/m128            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_sub_epi64 (__m128i a, __m128i b) PSUBQ xmm, xmm/m128            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_sub_epi64 (__m128i a, __m128i b) PSUBQ xmm, xmm/m128
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_sub_epi8 (__m256i a, __m256i b) VPSUBB ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_sub_epi8 (__m256i a, __m256i b) VPSUBB ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_sub_epi16 (__m256i a, __m256i b) VPSUBW ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_sub_epi16 (__m256i a, __m256i b) VPSUBW ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_sub_epi32 (__m256i a, __m256i b) VPSUBD ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_sub_epi32 (__m256i a, __m256i b) VPSUBD ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_sub_epi64 (__m256i a, __m256i b) VPSUBQ ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsub(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_sub_epi64 (__m256i a, __m256i b) VPSUBQ ymm, ymm, ymm/m256            Subtracts the right vector from the left
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_subs_epu8 (__m128i a, __m128i b) PSUBUSB xmm, xmm/m128
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_subs_epi8 (__m128i a, __m128i b) PSUBSB xmm, xmm/m128
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_subs_epi16 (__m128i a, __m128i b) PSUBSW xmm, xmm/m128
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_subs_epi16 (__m128i a, __m128i b)PSUBSW xmm, xmm/m128
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_subs_epu8 (__m256i a, __m256i b)VPSUBUSB ymm, ymm, ymm/m256
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_subs_epi8 (__m256i a, __m256i b)VPSUBSB ymm, ymm, ymm/m256
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_subs_epi16 (__m256i a, __m256i b)VPSUBSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vsubs(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_subs_epu16 (__m256i a, __m256i b) VPSUBUSW ymm, ymm, ymm/m256
Method      | Z0.dvec.valignr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)PALIGNR xmm, xmm/m128, imm8
Method      | Z0.dvec.valignr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.valignr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8
Method      | Z0.dvec.valignr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)VPALIGNR ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vbroadcast(Z0.W256,System.Byte,System.Byte)                   | Creates a 256-bit vector where the lower 128-bit lane is filled with replicas of the lo value            and the upper 128-bit lane is filled with replicas of the hi value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.UInt16,System.UInt16)               | Creates a 256-bit vector where the lower 128-bit lane is filled with replicas of the lo value            and the upper 128-bit lane is filled with replicas of the hi value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.UInt32,System.UInt32)               | Creates a 256-bit vector where the lower 128-bit lane is filled with replicas of the lo value            and the upper 128-bit lane is filled with replicas of the hi value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.UInt64,System.UInt64)               | Creates a 256-bit vector where the lower 128-bit lane is filled with replicas of the lo value            and the upper 128-bit lane is filled with replicas of the hi value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.SByte)                              | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.Byte)                               | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.Int16)                              | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.UInt16)                             | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.Int32)                              | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.UInt32)                             | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.Int64)                              | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W128,System.UInt64)                             | Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.SByte)                              | __m256i _mm256_broadcastb_epi8 (__m128i a) VPBROADCASTB ymm, m8            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.Byte)                               | __m256i _mm256_broadcastb_epi8 (__m128i a) VPBROADCASTB ymm, m8            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.Int16)                              | __m256i _mm256_broadcastw_epi16 (__m128i a) VPBROADCASTW ymm, m16            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.UInt16)                             | __m256i _mm256_broadcastw_epi16 (__m128i a) VPBROADCASTW ymm, m16            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.Int32)                              | __m256i _mm256_broadcastd_epi32 (__m128i a) VPBROADCASTD ymm, m32            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.UInt32)                             | __m256i _mm256_broadcastd_epi32 (__m128i a) VPBROADCASTD ymm, m32            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.Int64)                              | __m256i _mm256_broadcastq_epi64 (__m128i a) VPBROADCASTQ ymm, m64            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbroadcast(Z0.W256,System.UInt64)                             | __m256i _mm256_broadcastq_epi64 (__m128i a) VPBROADCASTQ ymm, m64            Creates a target vector where each component is initialized with the same value
Method      | Z0.dvec.vbyteswap(System.Runtime.Intrinsics.Vector128{System.UInt16}) | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.dvec.vbyteswap(System.Runtime.Intrinsics.Vector128{System.UInt32}) | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.dvec.vbyteswap(System.Runtime.Intrinsics.Vector128{System.UInt64}) | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.dvec.vbyteswap(System.Runtime.Intrinsics.Vector256{System.UInt16}) | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.dvec.vbyteswap(System.Runtime.Intrinsics.Vector256{System.UInt32}) | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.dvec.vbyteswap(System.Runtime.Intrinsics.Vector256{System.UInt64}) | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte}@)| 8x16w -&gt; 16x8w
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.Byte}@)| 16x16w -&gt; 32x8w            [0, 1, ... 14, 15] -&gt; [0, 0, 1, 1, ... 14, 14, 15, 15]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt16}@)| 4x8w -&gt; 8x16w            [0, 1, 2, 3] -&gt; [0, 0, 1, 1, 2, 2, 3, 3]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt16}@)| 8x32w -&gt; 16x16w            [0, 1, 2, 3, 4, 5, 6, 7] -&gt; [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt32}@)| 2x64w -&gt; 4x32w            [0, 1] -&gt; [0, 0, 1, 1]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt32}@)| 4x64w -&gt; 8x32w            [0, 1, 2, 3] -&gt; [0, 0, 1, 1, 2, 2, 3, 3]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte}@)| 4x32w -&gt; 16x8w            [0, 1, 2, 3] -&gt; [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.Byte}@)| 8x32w -&gt; 32x8w            [0, 1, 2, 3, 4, 5, 6, 7] -&gt; [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Byte}@)| 2x64w -&gt; 16x8w            [0,1] -&gt; [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]
Method      | Z0.dvec.vcover(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.Byte}@)| 4x64w -&gt; 32x8w            [0, 1, 2, 3] -&gt; [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]
Method      | Z0.dvec.vextract(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.Hex4)| int _mm_extract_epi8 (__m128i a, const int imm8) PEXTRB reg/m8, xmm, imm8
Method      | Z0.dvec.vextract(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Hex4)| int _mm_extract_epi8 (__m128i a, const int imm8) PEXTRB reg/m8, xmm, imm8
Method      | Z0.dvec.vextract(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Hex3)| int _mm_extract_epi16 (__m128i a, int imm8) pextrw r32, xmm, imm8
Method      | Z0.dvec.vextract(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Hex3)| int _mm_extract_epi16 (__m128i a, int imm8) pextrw r32, xmm, imm8
Method      | Z0.dvec.vextract(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Hex2)| int _mm_extract_epi32 (__m128i a, const int imm8) PEXTRD reg/m32, xmm, imm8
Method      | Z0.dvec.vextract(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.Hex2)| int _mm_extract_epi32 (__m128i a, const int imm8) PEXTRD reg/m32, xmm, imm8
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.SByte})        | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.Byte})         | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.Int16})        | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.UInt16})       | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.Int32})        | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.UInt32})       | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.Int64})        | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector128{System.UInt64})       | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.SByte})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.UInt32})       | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.UInt64})       | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.Byte})         | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.Int16})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.UInt16})       | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.Int32})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.Int64})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the hi 128-bit lane of the source vector
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64@,System.UInt64@)| Extracts the upper 128-bit lane from the source vector to scalar targets
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.Byte},System.UInt64@,System.UInt64@)| Extracts the upper 128-bit lane from the source vector to scalar targets
Method      | Z0.dvec.vhi(System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Pair{System.UInt64}@)| Extracts the upper 128-bit lane from the source vector to a pair
Method      | Z0.dvec.vinsert(System.Byte,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.SByte,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)PINSRB xmm, reg/m8, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.Int16,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.Int32,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.Int64,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64,imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.UInt64,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| _mm_insert_epi64:            Overwrites an identified component in the target vector with a specified value
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vinsert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.SByte})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.Byte})         | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.Int16})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.UInt16})       | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.Int32})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.UInt32})       | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.Int64})        | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.UInt64})       | __m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm,  ymm, imm8            Extracts the lo 128-bit lane of the source vector
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64@,System.UInt64@)| Extracts the lower 128-bit lane from the source vector to scalar targets
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.Byte},System.UInt64@,System.UInt64@)| Extracts the lower 128-bit lane from the source vector to scalar targets
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Pair{System.UInt64}@)| Extracts the lower 128-bit lane from the source vector to a pair
Method      | Z0.dvec.vlo(System.Runtime.Intrinsics.Vector128{System.UInt64})       | Creates a scalar vector from the upper 64 bits of the source vector
Method      | Z0.dvec.vmakemask(System.UInt16)                                      | Distributes each bit of the source to the hi bit of each byte in a 128-bit target vector
Method      | Z0.dvec.vmakemask(System.UInt32)                                      | Distributes each bit of the source to the hi bit of each byte a 256-bit target vector
Method      | Z0.dvec.vmakemask(System.UInt16,System.Byte)                          | Distributes each source bit to an index-identified bit of each byte in a 128-bit target vector
Method      | Z0.dvec.vmakemask(System.UInt32,System.Byte)                          | Distributes each bit of the source to to a specified bit of each byte in a 256-bit target vector
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmerge(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_unpackhi_epi8 (__m128i a, __m128i b)PUNPCKHBW xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_unpackhi_epi8 (__m128i a, __m128i b)PUNPCKHBW xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_unpackhi_epi16 (__m128i a, __m128i b)PUNPCKHWD xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_unpackhi_epi16 (__m128i a, __m128i b) PUNPCKHWD xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_unpackhi_epi32 (__m128i a, __m128i b) PUNPCKHDQ xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_unpackhi_epi32 (__m128i a, __m128i b) PUNPCKHDQ xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_unpackhi_epi64 (__m128i a, __m128i b) PUNPCKHQDQ xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_unpackhi_epi64 (__m128i a, __m128i b)PUNPCKHQDQ xmm, xmm/m128
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b) VPUNPCKHBW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b) VPUNPCKHBW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b) VPUNPCKHWD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b) VPUNPCKHWD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b) VPUNPCKHDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b) VPUNPCKHDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b) VPUNPCKHQDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergehi(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b) VPUNPCKHQDQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_unpacklo_epi8 (__m128i a, __m128i b) PUNPCKLBW xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_unpacklo_epi8 (__m128i a, __m128i b) PUNPCKLBW xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_unpacklo_epi16 (__m128i a, __m128i b) PUNPCKLWD xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_unpacklo_epi16 (__m128i a, __m128i b) PUNPCKLWD xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_unpacklo_epi32 (__m128i a, __m128i b) PUNPCKLDQ xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_unpacklo_epi32 (__m128i a, __m128i b) PUNPCKLDQ xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_unpacklo_epi64 (__m128i a, __m128i b) PUNPCKLQDQ xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_unpacklo_epi64 (__m128i a, __m128i b) PUNPCKLQDQ xmm, xmm/m128            ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vmergelo(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.dvec.vpart30x8x3(System.UInt32)                                    | Partitions the first 30 bits of a 32-bit source into 30 bytes, each with an effective width of 3
Method      | Z0.dvec.vpart32x8x1(System.UInt32)                                    | Partitions a 32-bit source value into 32 8-bit peices each with an effective width of q
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm16x8(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm2x128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Perm2x4)| __m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vperm4x16(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte,System.Byte)| Permutes the lower four elements of the source vector with the lo mask and the upper four elements with the hi mask
Method      | Z0.dvec.vperm4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte,System.Byte)| Shuffles the first four elements of the source vector with the lo mask and the last four elements with the hi mask
Method      | Z0.dvec.vperm4x16(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Perm4L,Z0.Perm4L)| Permutes the lower four elements of the source vector with the lo mask and the upper four elements with the hi mask
Method      | Z0.dvec.vperm4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Perm4L,Z0.Perm4L)| Shuffles the first four elements of the source vector with the lo mask and the last four elements with the hi mask
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate) PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate)PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8             shuffles signed 32-bit integers in the source vector within 128-bit lanes
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8             Shuffles 32-bit source segments within 128-bit lanes
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Perm4L)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate) PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.Perm4L)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate)PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Perm4L)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8             shuffles signed 32-bit integers in the source vector within 128-bit lanes
Method      | Z0.dvec.vperm4x32(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Perm4L)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8             Shuffles 32-bit source segments within 128-bit lanes
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8)VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8)VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Int64},Z0.Perm4L)| __m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8            Permutes vector content across lanes at 64-bit granularity
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx) VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx) VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx) VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vperm8x32(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx) VPERMD ymm, ymm/m256, ymm            Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8            Shuffles the upper half of a vector as specified by a permutation while leaving the lower half unchanged
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)VPSHUFHW ymm, ymm/m256,imm8
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8) VPSHUFHW ymm, ymm/m256, imm8
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Perm4L)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Perm4L)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8            Shuffles the upper half of a vector as specified by a permutation while leaving the lower half unchanged
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Perm4L)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)VPSHUFHW ymm, ymm/m256,imm8
Method      | Z0.dvec.vpermhi4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Perm4L)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8) VPSHUFHW ymm, ymm/m256, imm8
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8            Shuffles the lower half of a vector as specified by a permutation while leaving the upper half unchanged
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8            Shuffles the lower half of a vector as specified by a permutation while leaving the upper half unchanged
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8) VPSHUFLW ymm, ymm/m256, imm8
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)VPSHUFLW ymm, ymm/m256,imm8
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Perm4L)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8            Shuffles the lower half of a vector as specified by a permutation while leaving the upper half unchanged
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Perm4L)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8            Shuffles the lower half of a vector as specified by a permutation while leaving the upper half unchanged
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Perm4L)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8) VPSHUFLW ymm, ymm/m256, imm8
Method      | Z0.dvec.vpermlo4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Perm4L)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)VPSHUFLW ymm, ymm/m256,imm8
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.Byte})    | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.SByte})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.Int16})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.UInt16})  | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.Int32})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.UInt32})  | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector128{System.UInt64})  | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.Byte})    | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.SByte})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.Int16})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.UInt16})  | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.Int32})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.UInt32})  | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.Int64})   | Reverses the source vector components
Method      | Z0.dvec.vreverse(System.Runtime.Intrinsics.Vector256{System.UInt64})  | Reverses the source vector components
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128            Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128            For each component of the shuffle spec:             testbit(spec[i],7) == 1 =&gt; dst[i] = 0            testbit(spec[i],7) == 0 =&gt; dst[i] = src[i]            spec[i] = j := 0 | 1 | ... | 15 =&gt; dst[j] = src[i]
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256            Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf16x8(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256             Shuffles source vector components within 128-bit lanes as specified by the corresponding component in the shuffle spec
Method      | Z0.dvec.vshuf32x8(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Rearranges the source vector according to the indices specified in the control vector dst[i] = src[spec[i]]
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)VPSHUFHW ymm, ymm/m256, imm8
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)VPSHUFHW ymm, ymm/m256, imm8
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)VPSHUFLW ymm, ymm/m256, imm8
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)VPSHUFLW ymm, ymm/m256, imm8
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Arrange4L)| __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Arrange4L)| __m128i _mm_shufflehi_epi16 (__m128i a, int control) PSHUFHW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Arrange4L)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Arrange4L)| __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuf4x16(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Arrange4L,Z0.Arrange4L)| Shuffles the first four elements of the content vector with the lo mask and the last four elements with the hi mask
Method      | Z0.dvec.vshuf4x16(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Arrange4L,Z0.Arrange4L)| Shuffles the first four elements of the content vector with the lo mask and the last four elements with the hi mask
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Arrange4L)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)VPSHUFHW ymm, ymm/m256, imm8            Shuffles the hi 64 bits of each 128-bit lane as determined by the shuffle spec and leaves            the lo 64 bits of each 128-bit lane unchanged
Method      | Z0.dvec.vshufhi4x16(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Arrange4L)| __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)VPSHUFHW ymm, ymm/m256, imm8            Shuffles the hi 64 bits of each 128-bit lane as determined by the shuffle spec and leaves            the lo 64 bits of each 128-bit lane unchanged
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Arrange4L)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)VPSHUFLW ymm, ymm/m256, imm8            Shuffles the lo 64 bits of each 128-bit lane as determined by the shuffle spec and leaves            the hi 64 bits of each 128-bit lane unchanged
Method      | Z0.dvec.vshuflo4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Arrange4L)| __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)VPSHUFLW ymm, ymm/m256, imm8            Shuffles the lo 64 bits of each 128-bit lane as determined by the shuffle spec and leaves the hi 64 bits of each 128-bit lane unchanged
Method      | Z0.dvec.vshuf4x16(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Arrange4L,Z0.Arrange4L)| Shuffles lo/hi parts of each 128-bit lane as respectively determined by the shuffle specs
Method      | Z0.dvec.vshuf4x16(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Arrange4L,Z0.Arrange4L)| Shuffles lo/hi parts of each 128-bit lane as respectively determined by the shuffle specs
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate) PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate) PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8             shuffles 32-bit integers in the source vector within 128-bit lanes
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8             shuffles 32-bit integers in the source vector within 128-bit lanes
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.Arrange4L)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate)PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Arrange4L)| __m128i _mm_shuffle_epi32 (__m128i a, int immediate)PSHUFD xmm, xmm/m128, imm8
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Arrange4L)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8)VPSHUFD ymm, ymm/m256, imm8
Method      | Z0.dvec.vshuf4x32(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Arrange4L)| __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8)VPSHUFD ymm, ymm/m256, imm8
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.SByte})    | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.Byte})     | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.Int16})    | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.UInt16})   | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.Int32})    | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.UInt32})   | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.UInt64})   | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector128{System.Int64})    | Swaps 64-bit hi/lo segments of the source vector
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.Byte})     | Swaps the source vectors' hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.SByte})    | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.Int16})    | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.UInt16})   | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.Int32})    | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.UInt32})   | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.Int64})    | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vswaphl(System.Runtime.Intrinsics.Vector256{System.UInt64})   | Swaps hi/lo 128-bit lanes
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.Byte})   | _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm            Constructs an integer from the most significant bit of each source vector component
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.UInt16}) | _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm            Constructs an integer from the most significant bit of each source vector component
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.UInt32}) | _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm            Constructs an integer from the most significant bit of each source vector component
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.UInt64}) | _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm            Constructs an integer from the most significant bit of each source vector component
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.Byte})   | int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm            Constructs an integer from the most significant bit of each 8-bit source vector segment
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.UInt16}) | int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm            Constructs an integer from the most significant bit of each 8-bit source vector segment
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.UInt32}) | int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm            Constructs an integer from the most significant bit of each 8-bit source vector segment
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.UInt64}) | int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm            Constructs an integer from the most significant bit of each 8-bit source vector segment
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtakemask(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Creates a 32-bit mask from each byte at a byte-relative bit index
Method      | Z0.dvec.vtranspose(System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32}@)| Transposes a 4x4 matrix of unsigned integers, adapted from MSVC intrinsic headers
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_and_si128 (__m128i a, __m128i b) PAND xmm, xmm/m128            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vand(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256            Computes the logical and of the operands
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vcimpl(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vimpl(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnor(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| Computes ~(x | y) for vectors x and y
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.SByte})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.Byte})        | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.Int16})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.UInt16})      | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.Int32})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.UInt32})      | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.Int64})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector128{System.UInt64})      | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.SByte})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.Byte})        | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.Int16})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.UInt16})      | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.Int32})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.UInt32})      | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.Int64})       | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vnot(System.Runtime.Intrinsics.Vector256{System.UInt64})      | Computes the bitwise negation of the source vector
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m128i _mm_or_si128 (__m128i a, __m128i b)POR xmm, xmm/m128            Computes the bitwise or between the source operands
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vor(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_or_si256 (__m256i a, __m256i b)VPOR ymm, ymm, ymm/m25
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxnor(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxor(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes the bitwise XOR between operands
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vxornot(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes x ^ ~y for vectors x and y
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| __m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsll(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8            Shifts the source vector leftwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| __m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vbsrl(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8            Shifts the source vector rightwards with byte-level resolution
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotl(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Rotates each component the source vector leftwards by a specified bitcount
Method      | Z0.dvec.vrotlv(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Rotates each component the source vector leftwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotlv(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Rotates each component the source vector leftwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotlv(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Rotates each component the source vector leftwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotlv(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Rotates each component the source vector leftwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotlx(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Rotates the full 128 bits of a vector leftward a bit-level resolution
Method      | Z0.dvec.vrotlx(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Rotates each 128 lane leftward a bit-level resolution
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Rotates each component the source vector rightwards by a constant count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| Rotates each component the source vector rightwards by a constant count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| Rotates each component the source vector rightwards by a constant count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Rotates each component the source vector rightwards by a constant count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Rotates each component the source vector rightwards by a specified count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| Rotates each component the source vector rightwards by a specified count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| Rotates each component the source vector rightwards by a constant count
Method      | Z0.dvec.vrotr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Rotates each component the source vector rightwards by a constant count
Method      | Z0.dvec.vrotrv(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Rotates each component the source vector rightwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotrv(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Rotates each component the source vector rightwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotrv(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Rotates each component the source vector rightwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotrv(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Rotates each component the source vector rightwards by the corresponding component in the shift spec
Method      | Z0.dvec.vrotrx(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Rotates the full 128 bits of a vector rightward a bit-level resolution
Method      | Z0.dvec.vrotrx(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Rotates each 128 bit lane rightward a bit-level resolution
Method      | Z0.dvec.vrotlx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N8)| Rotates the full 128-bit vector content leftward by 8 bits
Method      | Z0.dvec.vrotlx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N16)| Rotates the full 128-bit vector content leftward by 16 bits
Method      | Z0.dvec.vrotlx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N24)| Rotates the full 128-bit vector content leftward by 24 bits
Method      | Z0.dvec.vrotlx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N32)| Rotates the full 128-bit vector content leftward by 32 bits
Method      | Z0.dvec.vrotrx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N8)| Rotates the full 128-bit vector content rightward by 8 bits
Method      | Z0.dvec.vrotrx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N16)| Rotates the full 128-bit vector content rightward by 16 bits
Method      | Z0.dvec.vrotrx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N24)| Rotates the full 128-bit vector content rightward by 24 bits
Method      | Z0.dvec.vrotrx(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N32)| Rotates the full 128-bit vector content rightward by 32 bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Defines the unfortunately missing _mm_slli_epi8 that shifts each vector component leftward by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| Shifts each component in the source vector leftwards by a specified number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_slli_epi16 (__m128i a, int immediate) PSLLW xmm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_slli_epi16 (__m128i a, int immediate) PSLLW xmm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_slli_epi32 (__m128i a, int immediate) PSLLD xmm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_slli_epi32 (__m128i a, int immediate) PSLLD xmm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128i _mm_slli_epi64 (__m128i a, int immediate) PSLLQ xmm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| __m128i _mm_slli_epi64 (__m128i a, int immediate) PSLLQ xmm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| Shifts each component in the source vector leftwards by a specified number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Defines the unfortunately missing _mm256_slli_epi16 that shifts each vector component            leftward by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_slli_epi16 (__m256i a, int imm8) VPSLLW ymm, ymm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_slli_epi16 (__m256i a, int imm8) VPSLLW ymm, ymm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_slli_epi32 (__m256i a, int imm8) VPSLLD ymm, ymm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_slli_epi32 (__m256i a, int imm8) VPSLLD ymm, ymm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_slli_epi64 (__m256i a, int imm8) VPSLLQ ymm, ymm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vsll(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_slli_epi64 (__m256i a, int imm8) VPSLLQ ymm, ymm, imm8            Shifts each component of the source vector leftwards by a common number of bits
Method      | Z0.dvec.vmsb``1(Z0.N128,Z0.N8,System.Byte,``0)                        | The f most significant bits of each 8 bits are enabled
Method      | Z0.dvec.vmsb``1(Z0.N256,Z0.N8,System.Byte,``0)                        | Creates a mask where f most significant bits of each 8 bits are enabled
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_sll_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_sll_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_sll_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_sll_epi32 (__m128i a, __m128i count) PSRLD xmm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_sll_epi64 (__m128i a, __m128i count) PSRLQ xmm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_sll_epi64 (__m128i a, __m128i count) PSRLQ xmm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m256i _mm256_sll_epi16 (__m256i a, __m128i count)VPSRLW ymm, ymm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m256i _mm256_sll_epi16 (__m256i a, __m128i count)VPSRLW ymm, ymm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m256i _mm256_sll_epi32 (__m256i a, __m128i count) VPSRLD ymm, ymm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m256i _mm256_sll_epi32 (__m256i a, __m128i count) VPSRLD ymm, ymm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m256i _mm256_sll_epi64 (__m256i a, __m128i count) VPSRLQ ymm, ymm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m256i _mm256_sll_epi64 (__m256i a, __m128i count) VPSRLQ ymm, ymm, xmm/m128            Shifts each source vector component leftwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.SByte},System.SByte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Int16},System.Int16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.UInt16},System.UInt16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.SByte},System.SByte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Int16},System.Int16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.UInt16},System.UInt16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Int32},System.Int32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.UInt32},System.UInt32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.Int64},System.Int64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsllv(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..7
Method      | Z0.dvec.vsllv(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..31
Method      | Z0.dvec.vsllv(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..31
Method      | Z0.dvec.vsllx(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Shifts the entire 128-bit vector leftwards at bit-level resolution
Method      | Z0.dvec.vsllx(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Shifts each 128-bit lane leftwards at bit-level resolution
Method      | Z0.dvec.vsra(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_srai_epi16 (__m128i a, int immediate) PSRAW xmm, imm8            Applies a rightward arithmetic shift to the source vector
Method      | Z0.dvec.vsra(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_srai_epi32 (__m128i a, int immediate) PSRAD xmm, imm8            Applies a rightward arithmetic shift to the source vector
Method      | Z0.dvec.vsra(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_srai_epi16 (__m256i a, int imm8) VPSRAW ymm, ymm, imm8            Applies a rightward arithmetic shift to the source vector
Method      | Z0.dvec.vsra(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_srai_epi32 (__m256i a, int imm8) VPSRAD ymm, ymm, imm8            Applies a rightward arithmetic shift to the source vector
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_srli_epi16 (__m128i a, int immediate) PSRLW xmm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_srli_epi16 (__m128i a, int immediate) PSRLW xmm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_srli_epi32 (__m128i a, int immediate) PSRLD xmm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_srli_epi32 (__m128i a, int immediate) PSRLD xmm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128i _mm_srli_epi64 (__m128i a, int immediate) PSRLQ xmm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| __m128i _mm_srli_epi64 (__m128i a, int immediate) PSRLQ xmm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_srli_epi16 (__m256i a, int imm8) VPSRLW ymm, ymm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_srli_epi16 (__m256i a, int imm8) VPSRLW ymm, ymm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_srli_epi32 (__m256i a, int imm8) VPSRLD ymm, ymm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_srli_epi32 (__m256i a, int imm8) VPSRLD ymm, ymm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_srli_epi64 (__m256i a, int imm8) VPSRLQ ymm, ymm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vsrl(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_srli_epi64 (__m256i a, int imm8) VPSRLQ ymm, ymm, imm8            Shifts each each component rightward by a specified bitcount
Method      | Z0.dvec.vlsb``1(Z0.N128,Z0.N8,System.Byte,``0)                        | The f least significant bits of each 8 bit segment are enabled
Method      | Z0.dvec.vlsb``1(Z0.N256,Z0.N8,System.Byte,``0)                        | The f least significant bits of each 8 bit segment are enabled
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_srl_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_srl_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_srl_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_srl_epi32 (__m128i a, __m128i count) PSRLD xmm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_srl_epi64 (__m128i a, __m128i count) PSRLQ xmm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_srl_epi64 (__m128i a, __m128i count) PSRLQ xmm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m256i _mm256_srl_epi16 (__m256i a, __m128i count)VPSRLW ymm, ymm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m256i _mm256_srl_epi16 (__m256i a, __m128i count)VPSRLW ymm, ymm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m256i _mm256_srl_epi32 (__m256i a, __m128i count) VPSRLD ymm, ymm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m256i _mm256_srl_epi32 (__m256i a, __m128i count) VPSRLD ymm, ymm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m256i _mm256_srl_epi64 (__m256i a, __m128i count) VPSRLQ ymm, ymm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m256i _mm256_srl_epi64 (__m256i a, __m128i count) VPSRLQ ymm, ymm, xmm/m128            Shifts each source vector component rightwards by an amount specified in the first component of the offset vector
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.SByte},System.SByte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Int16},System.Int16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.UInt16},System.UInt16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.SByte},System.SByte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Int16},System.Int16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.UInt16},System.UInt16)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Int32},System.Int32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.UInt32},System.UInt32)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.Int64},System.Int64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64)| Promotes the offset scalar to a vector and applies the register-based right shift operator
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..15
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..15
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..7
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..7
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_srlv_epi32 (__m128i a, __m128i count) VPSRLVD xmm, xmm, xmm/m128            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0...3
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_srlv_epi32 (__m128i a, __m128i count) VPSRLVD xmm, xmm, xmm/m128            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0...3
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_srlv_epi64 (__m128i a, __m128i count) VPSRLVQ xmm, xmm, xmm/m128            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0,1
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_srlv_epi64 (__m128i a, __m128i count) VPSRLVQ xmm, xmm, xmm/m128            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0,1
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..31
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..31
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..15
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..15
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_srlv_epi32 (__m256i a, __m256i count) VPSRLVD ymm, ymm, ymm/m256            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0...7
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_srlv_epi32 (__m256i a, __m256i count) VPSRLVD ymm, ymm, ymm/m256            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0...7
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_srlv_epi64 (__m256i a, __m256i count) VPSRLVQ ymm, ymm, ymm/m256            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0...3
Method      | Z0.dvec.vsrlv(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_srlv_epi64 (__m256i a, __m256i count) VPSRLVQ ymm, ymm, ymm/m256            Computes z[i] := x[i] &gt;&gt; offsets[i] for i = 0...3
Method      | Z0.dvec.vsrlx(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Shifts the entire 128-bit vector rightwards at bit-level resolution
Method      | Z0.dvec.vsrlx(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Shifts each 128-bit lane rightwards at bit-level resolution
Method      | Z0.dvec.vsrav(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})| _mm_srav_epi32, avx2, shift-right variable arithmetic:            Applies a rightward arithmetic shift each source vector component as             specified by the amount the corresponding control vector component
Method      | Z0.dvec.vsrav(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})| _mm256_srav_epi32, avx2, shift-right variable arithmetic:            Applies a rightward arithmetic shift each source vector component as             specified by the amount the corresponding control vector component
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsr(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| Computes x^(x &gt;&gt; count)
Method      | Z0.dvec.vxorsrv(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Computes x^(x &gt;&gt; counts)
Method      | Z0.dvec.vxorsrv(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes x^(x &gt;&gt; counts)
Method      | Z0.dvec.vxorsrv(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| Computes x^(x &gt;&gt; counts)
Method      | Z0.dvec.vxorsrv(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes x^(x &gt;&gt; counts)
Method      | Z0.dvec.vpop(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the population count of the content of 3 128-bit vectors
Method      | Z0.dvec.vpop(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes the population count of the content of 3 256-bit vectors
Method      | Z0.dvec.vblend8x16(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8) PBLENDW xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend8x16(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8) PBLENDW xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend8x16(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8) VPBLENDW ymm, ymm, ymm/m256, imm8            Combines components from left/right vectors within 128-bit lanes per the blend spec
Method      | Z0.dvec.vblend8x16(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8) VPBLENDW ymm, ymm, ymm/m256, imm8            Combines components from left/right vectors within 128-bit lanes per the blend spec
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Blend8x16)| __m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8)PBLENDW xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Blend8x16)| __m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8) PBLENDW xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Blend8x16)| __m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8) VPBLENDW ymm, ymm, ymm/m256, imm8            Combines components from left/right vectors within 128-bit lanes per the blend spec
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Blend8x16)| __m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8) VPBLENDW ymm, ymm, ymm/m256, imm8            Combines components from left/right vectors within 128-bit lanes per the blend spec
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend2x64(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8)BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.Blend2x64)| __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
Method      | Z0.dvec.vblend4x32(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8) VPBLENDD xmm, xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend4x32(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8) VPBLENDD xmm, xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},Z0.Blend4x32)| __m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8) VPBLENDD xmm, xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Blend4x32)| __m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8) VPBLENDD xmm, xmm, xmm/m128, imm8            Combines components from left/right vectors per the blend spec
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend4x64(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},Z0.Blend4x64)| __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm,ymm, ymm/m256, ymm            Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.dvec.vblend8x32(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8) VPBLENDD ymm,ymm, ymm/m256, imm8            Forms a vector z[i] := testbit(spec,i) ? x[i] : y[i], i = 0,...7
Method      | Z0.dvec.vblend8x32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8) VPBLENDD ymm, ymm, ymm/m256, imm8            Forms a vector z[i] := testbit(spec,i) ? x[i] : y[i], i = 0,...7
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Blend8x32)| __m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8) VPBLENDD ymm,ymm, ymm/m256, imm8            Forms a vector z[i] := testbit(spec,i) ? x[i] : y[i], i = 0,...7
Method      | Z0.dvec.vblend(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Blend8x32)| __m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8) VPBLENDD ymm, ymm, ymm/m256, imm8            Forms a vector z[i] := testbit(spec,i) ? x[i] : y[i], i = 0,...7
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128,xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128,xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128,xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128,xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128,xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128,xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| __m128 _mm_blendv_ps (__m128 a, __m128 b, __m128 mask)BLENDVPS xmm, xmm/m128,xmm0
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| _m128d _mm_blendv_pd (__m128d a, __m128d b, __m128d mask)BLENDVPD xmm, xmm/m128, xmm0
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)PBLENDVB xmm, xmm/m128, xmm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)VPBLENDVB ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)VPBLENDVB ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)VPBLENDVB ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)VPBLENDVB ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)VPBLENDVB ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)VPBLENDVB ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| __m256 _mm256_blendv_ps (__m256 a, __m256 b, __m256 mask) VBLENDVPS ymm, ymm, ymm/m256, ymm
Method      | Z0.dvec.vblendv(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| __m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask)VBLENDVPD ymm, ymm,ymm/m256, ymm
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_cmpeq_epi8 (__m128i a, __m128i b) PCMPEQB xmm, xmm/m128            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_cmpeq_epi8 (__m128i a, __m128i b) PCMPEQB xmm, xmm/m128            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_cmpeq_epi16 (__m128i a, __m128i b) PCMPEQW xmm, xmm/m128             Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_cmpeq_epi16 (__m128i a, __m128i b) PCMPEQW xmm, xmm/m128             Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_cmpeq_epi32 (__m128i a, __m128i b) PCMPEQD xmm, xmm/m128
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_cmpeq_epi32 (__m128i a, __m128i b) PCMPEQD xmm, xmm/m128
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_cmpeq_epi64 (__m128i a, __m128i b) PCMPEQQ xmm, xmm/m128            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_cmpeq_epi64 (__m128i a, __m128i b) PCMPEQQ xmm, xmm/m128            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b) VPCMPEQB ymm, ymm, ymm/m256            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b) VPCMPEQB ymm, ymm, ymm/m256            Compares the operands for equality
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b) VPCMPEQW ymm, ymm, ymm/m256            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b) VPCMPEQW ymm, ymm, ymm/m256             Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| _mm256_cmpeq_epi32 (__m256i a, __m256i b) VPCMPEQD ymm, ymm, ymm/m256            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b) VPCMPEQD ymm, ymm, ymm/m256            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b) VPCMPEQQ ymm, ymm, ymm/m256            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.veq(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b) VPCMPEQQ ymm, ymm, ymm/m256            Compares corresponding components each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_cmpgt_epi8 (__m128i a, __m128i b) PCMPGTB xmm, xmm/m128            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_cmpgt_epi8 (__m128i a, __m128i b) PCMPGTB xmm, xmm/m128            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b) VPCMPGTB ymm, ymm, ymm/m256            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b) VPCMPGTB ymm, ymm, ymm/m256            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b) VPCMPGTD ymm, ymm, ymm/m256            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b) VPCMPGTD ymm, ymm, ymm/m256            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Method      | Z0.dvec.vgt(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256            Determines whether component values the left vector are larger than the            corresponding components the right vector. When a left value is larger             than a right value, the corresponding component the result vector             will have all bits enabled; otherwise, all bits the component are disabled
Field       | Z0.dvec.SignMask8                                                     | [10000000]
Field       | Z0.dvec.SignMask16                                                    | [10000000 00000000]
Field       | Z0.dvec.SignMask32                                                    | [10000000 00000000 00000000 00000000]
Field       | Z0.dvec.SignMask64                                                    | [10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000]
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_cmplt_epi8 (__m128i a, __m128i b)PCMPGTB xmm, xmm/m128
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_cmplt_epi8 (__m128i a, __m128i b)PCMPGTB xmm, xmm/m128
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_cmplt_epi16 (__m128i a, __m128i b)PCMPGTW xmm, xmm/m128
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_cmplt_epi16 (__m128i a, __m128i b)PCMPGTW xmm, xmm/m128
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_vcmplt_epi32 (__m128i a, __m128i b)PCMPGTD xmm, xmm/m128
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_vcmplt_epi32 (__m128i a, __m128i b)PCMPGTD xmm, xmm/m128
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| __m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b) VPCMPGTB ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b) VPCMPGTB ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_cmpgt_epi16 (__m256i a, __m256i b)VPCMPGTW ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_cmpgt_epi16 (__m256i a, __m256i b) VPCMPGTW ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b) VPCMPGTD ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b) VPCMPGTD ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vlt(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_max_epu8 (__m128i a, __m128i b) PMAXUB xmm, xmm/m128
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_max_epi8 (__m128i a, __m128i b) PMAXSB xmm, xmm/m128
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_max_epi16 (__m128i a, __m128i b) PMAXSW xmm, xmm/m128
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_max_epu16 (__m128i a, __m128i b) PMAXUW xmm, xmm/m128
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_max_epi32 (__m128i a, __m128i b) PMAXSD xmm, xmm/m128
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_max_epu32 (__m128i a, __m128i b) PMAXUD xmm, xmm/m128
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_max_epu8 (__m256i a, __m256i b) VPMAXUB ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_max_epi8 (__m256i a, __m256i b)VPMAXSB ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_max_epi16 (__m256i a, __m256i b) VPMAXSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_max_epu16 (__m256i a, __m256i b) VPMAXUW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_max_epi32 (__m256i a, __m256i b) VPMAXSD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_max_epu32 (__m256i a, __m256i b) VPMAXUD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmax(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| __m128i _mm_min_epu8 (__m128i a, __m128i b) PMINUB xmm, xmm/m128
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| __m128i _mm_min_epi8 (__m128i a, __m128i b) PMINSB xmm, xmm/m128
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_min_epi16 (__m128i a, __m128i b) PMINSW xmm, xmm/m128
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_min_epu16 (__m128i a, __m128i b) PMINUW xmm, xmm/m128
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_min_epu32 (__m128i a, __m128i b) PMINUD xmm, xmm/m128
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_min_epu32 (__m128i a, __m128i b) PMINUD xmm, xmm/m128
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| __m256i _mm256_min_epu8 (__m256i a, __m256i b) VPMINUB ymm, ymm, ymm/m256
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| __m256i _mm256_min_epi8 (__m256i a, __m256i b)VPMINSB ymm, ymm, ymm/m256
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_min_epi16 (__m256i a, __m256i b)VPMINSW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_min_epu16 (__m256i a, __m256i b) VPMINUW ymm, ymm, ymm/m256
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_min_epi32 (__m256i a, __m256i b) VPMINSD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_min_epu32 (__m256i a, __m256i b) VPMINUD ymm, ymm, ymm/m256
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vmin(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| Computes the maximum values of corresponding components
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.Byte})       | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.SByte})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.Int16})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.UInt16})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.Int32})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.UInt32})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.Int64})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.UInt64})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.Single})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector128{System.Double})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.Byte})       | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.SByte})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.Int16})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.UInt16})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.Int32})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.UInt32})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.Int64})      | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.UInt64})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.Single})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vnonz(System.Runtime.Intrinsics.Vector256{System.Double})     | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.SByte})     | int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Byte})      | int _mm_testc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.UInt16})    | int _mm_testc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Int32})     | int _mm_testc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.UInt32})    | int _mm_testc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Int64})     | int _mm_testc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.UInt64})    | int _mm_testc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestc(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| _mm256_testc_si256            Returns true if all mask-identified source bits are on
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestz(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256            Returns true if all mask-identified source bits are off
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})| int _mm_testnzc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| int _mm_testnzc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| int _mm_testnzc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| int _mm_testnzc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| int _mm_testnzc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})| int _mm_testnzc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})| int _mm_testnzc_si128 (__m128i a, __m128i b)PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| int _mm_testnzc_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| int _mm_testnzc_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})| int _mm_testnzc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})| int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| int _mm256_testnzc_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256
Method      | Z0.dvec.vtestznc(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| int _mm256_testnzc_pd (__m256d a, __m256d b)VTESTPD ymm, ymm/m256
Method      | Z0.dvec.vconvert(Z0.Block16{System.SByte}@,Z0.N128,System.Int64)      | PMOVSXBQ xmm, m16            2x8i -&gt; 2x64i
Method      | Z0.dvec.vconvert(Z0.Block32{System.SByte}@,Z0.N128,System.Int32)      | PMOVSXBD xmm, m32            4x8i -&gt; 4x32i
Method      | Z0.dvec.vconvert(Z0.Block32{System.SByte}@,Z0.N256,System.Int64)      | VPMOVSXBQ ymm, m32            4x8i -&gt; 4x64i
Method      | Z0.dvec.vconvert(Z0.Block64{System.SByte}@,Z0.N128,System.Int16)      | PMOVSXBW xmm, m64            8x8i -&gt; 8x16i
Method      | Z0.dvec.vconvert(Z0.Block64{System.SByte}@,Z0.N256,System.Int32)      | VPMOVSXBD ymm, m64            8x8i -&gt; 8x32i
Method      | Z0.dvec.vconvert(Z0.Block128{System.SByte}@,Z0.N256,System.Int16)     | VPMOVSXBW ymm, m128            16x8i -&gt; 16x16i
Method      | Z0.dvec.vconvert(Z0.Block16{System.Byte}@,Z0.N128,System.Int64)       | PMOVZXBQ xmm, m16            2x8u -&gt; 2x64i
Method      | Z0.dvec.vconvert(Z0.Block16{System.Byte}@,System.Int32,Z0.N128,System.Int64)| PMOVZXBQ xmm, m16            2x8u -&gt; 2x64i
Method      | Z0.dvec.vconvert(Z0.Block16{System.Byte}@,Z0.N128,System.UInt64)      | PMOVZXBQ xmm, m16            2x8u -&gt; 2x64u
Method      | Z0.dvec.vconvert(Z0.Block32{System.Byte}@,Z0.N128,System.Int32)       | PMOVZXBD xmm, m32            4x8u -&gt; 4x32i
Method      | Z0.dvec.vconvert(Z0.Block32{System.Byte}@,Z0.N128,System.UInt32)      | PMOVZXBD xmm, m32            4x8u -&gt; 4x32u
Method      | Z0.dvec.vconvert(Z0.Block32{System.Byte}@,Z0.N256,System.UInt64)      | VPMOVZXBQ ymm, m32            4x8u -&gt; 4x64u
Method      | Z0.dvec.vconvert(Z0.Block32{System.Byte}@,Z0.N256,System.Int64)       | VPMOVZXBQ ymm, m32            4x8u -&gt; 4x64i
Method      | Z0.dvec.vconvert(Z0.Block64{System.Byte}@,Z0.N128,System.Int16)       | PMOVZXBW xmm, m64            8x8u -&gt; 8x16u
Method      | Z0.dvec.vconvert(Z0.Block64{System.Byte}@,Z0.N128,System.UInt16)      | PMOVZXBW xmm, m64            8x8u -&gt; 8x16u
Method      | Z0.dvec.vconvert(Z0.Block64{System.Byte}@,Z0.N256,System.UInt32)      | VPMOVZXBD ymm, m64            8x8u -&gt; 8x32u
Method      | Z0.dvec.vconvert(Z0.Block128{System.Byte}@,Z0.N256,System.Int16)      | VPMOVZXBW ymm, m128            16x8u -&gt; 16x16i
Method      | Z0.dvec.vconvert(Z0.Block128{System.Byte}@,Z0.N256,System.UInt16)     | VPMOVZXBW ymm, m128            16x8u -&gt; 16x16u
Method      | Z0.dvec.vconvert(Z0.Block32{System.Int16}@,Z0.N128,System.Int64)      | PMOVSXWQ xmm, m32            2x16i -&gt; 2x64u
Method      | Z0.dvec.vconvert(Z0.Block64{System.Int16}@,Z0.N128,System.Int32)      | PMOVSXWD xmm, m64            4x16i -&gt; 4x32i
Method      | Z0.dvec.vconvert(Z0.Block32{System.UInt16}@,Z0.N128,System.Int64)     | PMOVZXWQ xmm, m32
Method      | Z0.dvec.vconvert(Z0.Block32{System.UInt16}@,Z0.N128,System.UInt64)    | PMOVZXWQ xmm, m32            2x16u -&gt; 2x64u
Method      | Z0.dvec.vconvert(Z0.Block64{System.UInt16}@,Z0.N256,System.UInt64)    | VPMOVZXWQ ymm, m64            4x16u -&gt; 4x64u
Method      | Z0.dvec.vconvert(Z0.Block64{System.UInt16}@,Z0.N128,System.UInt32)    | PMOVSXWD xmm, m64            4x16u -&gt; 4x32u
Method      | Z0.dvec.vconvert(Z0.Block128{System.UInt16}@,System.UInt32)           | VPMOVZXWD ymm, m128            8x16u -&gt; 8x32u
Method      | Z0.dvec.vconvert(Z0.Block128{System.UInt16}@,System.Int32)            | VPMOVZXWD ymm, m128            8x16u -&gt; 8x32i
Method      | Z0.dvec.vconvert(Z0.Block64{System.UInt16}@,Z0.N256,System.Int64)     | VPMOVZXWQ ymm, m64            4x16u -&gt; 4x64i
Method      | Z0.dvec.vconvert(Z0.Block128{System.UInt32}@,Z0.N256,System.Int64)    | VPMOVZXDQ ymm, m128            4x32u -&gt; 4x64i
Method      | Z0.dvec.vconvert(Z0.Block128{System.UInt32}@,System.UInt64)           | VPMOVZXDQ ymm, m128            4x32u -&gt; 4x64u
Method      | Z0.dvec.vconvert(Z0.Block64{System.UInt32}@,Z0.N128,System.UInt64)    | PMOVZXDQ xmm, m64            2x32u -&gt; 2x64u
Method      | Z0.dvec.vconvert(Z0.Block64{System.Int32}@,Z0.N128,System.Int64)      | PMOVSXDQ xmm, m64            2x32i -&gt; 2x64i
Method      | Z0.dvec.vconvert(Z0.Block128{System.Int32}@,Z0.N256,System.Int64)     | VPMOVSXDQ ymm, m128            4x32i -&gt; 4x64i
Method      | Z0.dvec.vconvert(Z0.Block256{System.UInt16}@,Z0.N512,System.UInt32)   | VPMOVZXWD ymm, m128            16x16u -&gt;16x32u
Method      | Z0.dvec.vconvert(Z0.Block128{System.Int16}@,Z0.N512,System.Int32)     | VPMOVSXWD ymm, m128            16x16u -&gt;16x32u
Method      | Z0.dvec.vconvert(Z0.Block256{System.Byte}@,Z0.N512,System.UInt16)     | VPMOVZXBW ymm, m128            32x8u -&gt; 32x16u
Method      | Z0.dvec.vconvert(Z0.Block128{System.UInt16}@,Z0.N512,System.UInt64)   | VPMOVZXWQ ymm, m64            8x16u -&gt; 8x64u
Method      | Z0.dvec.vconvert(Z0.Block256{System.UInt32}@,Z0.N512,System.UInt64)   | VPMOVZXDQ ymm, m128            8x32u -&gt; 8x64u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N128,System.SByte)| (8x16i,8x16i) -&gt; 16x8i
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N128,System.Byte)| (8x16i,8x16i) -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N256,System.SByte)| (16x16i,16x16i) -&gt; 32x8i
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N128,System.Byte)| (8x16u,8x16u) -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N256,System.Byte)| (16x16u,16x16u) -&gt; 32x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N128,System.Int16)| (4x32i,4x32i) -&gt; 8x16i
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N128,System.UInt16)| (4x32u,4x32u) -&gt; 8x16u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N256,System.UInt16)| (8x32w,8x32w) -&gt; 16x16w
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N128,System.Byte)| (8x32u, 8x32u) -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.N128,System.UInt32)| (2x64w,2x64w) -&gt; 4x32w
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.N256,System.UInt32)| (4x64w,4x64w) -&gt; 8x32w
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N128,System.Byte)| (4x32u,4x32u,4x32u,4x32u) -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N256,System.Byte)| (8x32u,8x32u,8x32u,8x32u) -&gt; 32x8w
Method      | Z0.dvec.vcompact(Z0.Vector512{System.UInt32}@,Z0.N128,System.Byte)    | 16x32u -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.N128,System.UInt32)| 4x64w -&gt; 4x32w
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.Int64},Z0.N128,System.Int32)| 4x64w -&gt; 4x32w
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N128,System.SByte)| 16x16i -&gt; 16x8i
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N128,System.Byte)| 16x16i -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N128,System.Byte)| 8x16u -&gt; 8x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N128,System.Byte)| 16x16u -&gt; 16x8u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N64,System.UInt64)| 8x16u -&gt; 64u (a scalar)
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N128,System.UInt16)| 8x32u -&gt; 8x16u
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N64,System.UInt64)| 8x32u -&gt; 64u (a scalar)
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N128,System.Byte)| 8x32u -&gt; 8x8u (a scalar vector)
Method      | Z0.dvec.vcompact(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N128,System.Int16)| 8x32i -&gt; 8x16i
Method      | Z0.dvec.convert(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N32,System.Int32)| int _mm_cvtsi128_si32 (__m128i a)MOVD reg/m32, xmm
Method      | Z0.dvec.convert(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N32,System.UInt32)| int _mm_cvtsi128_si32 (__m128i a)MOVD reg/m32, xmm
Method      | Z0.dvec.convert(System.Runtime.Intrinsics.Vector128{System.Int64},Z0.N64,System.Int64)| __int64 _mm_cvtsi128_si64 (__m128i a)MOVQ reg/m64, xmm
Method      | Z0.dvec.convert(System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.N64,System.UInt64)| __int64 _mm_cvtsi128_si64 (__m128i a)MOVQ reg/m64, xmm
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.N128,System.UInt32)| __m128i _mm256_cvtpd_epi32 (__m256d a) VCVTPD2DQ xmm, ymm/m256            4x64u -&gt; 4x32u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.N128,System.UInt32)| __m128i _mm256_cvtpd_epi32 (__m256d a) VCVTPD2DQ xmm, ymm/m256            (2x64u,2x64u) -&gt; 4x32u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N256,System.UInt16)| 16x8i -&gt; (8x16u, 8x16u)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N256,System.Int16)| __m256i _mm256_cvtepi8_epi16 (__m128i a) VPMOVSXBW ymm, xmm/m128            16x8i -&gt; 16x16u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N128,System.Int32)| __m128i _mm_cvtepi8_epi32 (__m128i a) PMOVSXBD xmm, xmm/m32
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N512,System.Int32)| 16x8i -&gt; 16x32i
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,System.Int16)| __m256i _mm256_cvtepu8_epi16 (__m128i a) vpmovzxbw ymm, xmm            16x8u -&gt; 16x16i            src[i] -&gt; dst[i], i = 0,...,15
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,System.UInt16)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16u            src[i] -&gt; dst[i], i = 0,...,15
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N512,System.UInt32)| 16x8u -&gt; 16x32u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N256,System.Int32)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            8x16i -&gt; 8x32i
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N256,System.UInt32)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            8x16i -&gt; 8x32u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,System.Int32)| __m256i _mm256_cvtepu16_epi32 (__m128i a) VPMOVZXWD ymm, xmm            8x16u -&gt; 8x32i
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,System.UInt32)| __m256i _mm256_cvtepu16_epi32 (__m128i a) VPMOVZXWD ymm, xmm            8x16u -&gt; 8x32u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N256,System.Int64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32i -&gt; 4x64i
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N256,System.Int64)| __m256i _mm256_cvtepu32_epi64 (__m128i a) VPMOVZXDQ ymm, xmm
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N256,System.UInt64)| _m256i _mm256_cvtepu32_epi64 (__m128i a) VPMOVZXDQ ymm, xmm
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N512,System.Int16)| src[i] -&gt; lo[i], i = 1,..,15            src[i] -&gt; hi[i], i = 16,..,31
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N1024,System.Int32)| 32x8i -&gt; (8x32i, 8x32i, 8x32i, 8x32i)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N512,System.UInt16)| 32x8u -&gt; (16x16u, 16x16u)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N512,System.Int16)| 32x8u -&gt; (16x16i, 16x16i)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1024,System.UInt32)| 32x8u -&gt; (8x32u, 8x32u, 8x32u, 8x32u)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N512,System.Int64)| 8x16x -&gt; (4x64u,4x64u)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N512,System.UInt64)| 8x16x -&gt; (4x64u,4x64u)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N1024,System.UInt64)| 16x16u -&gt; 16x64u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N512,System.Int32)| 16x16i -&gt; 16x32i
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N512,System.UInt32)| 16x16u -&gt; 16x32u
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N512,System.Int64)| 8x32i -&gt; (4x64i, 4x64i)
Method      | Z0.dvec.vconvert(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N512,System.UInt64)| 8x32u -&gt; (4x64u, 4x64u)
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,System.Int16)| 16x8u -&gt; 16x16u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N256,System.Int16)| 16x8i -&gt; 16x16i
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N512,System.Int16)| 32x8w -&gt; 32x16i
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N512,System.Int16)| 32x8i -&gt; 32x16i
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,System.UInt16)| 16x8u -&gt; 16x16u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N512,System.UInt16)| 32x8u -&gt; 32x16u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N256,System.Int32)| 8x16i -&gt; 8x32i
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N512,System.Int32)| 16x16i -&gt; 16x32i
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N1024,System.Int32)| 32x8i -&gt; (8x32i, 8x32i, 8x32i, 8x32i)
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N256,System.UInt64)| 4x32u -&gt; 4x64u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N256,System.Int64)| 4x32w -&gt; 4x64w
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N512,System.UInt64)| 8x32u -&gt; 8x64u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N512,System.Int64)| 8x32i -&gt; 8x64i
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1024,System.UInt32)| 32x8u -&gt; 32x32u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N512,System.UInt32)| 16x8u -&gt; 16x32u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,System.UInt32)| 8x16u -&gt; 8x32u
Method      | Z0.dvec.vinflate(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N512,System.UInt32)| 16x16u -&gt; 16x32u
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N128,System.Int16)| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            8x8i -&gt; 8x16i
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N128,System.UInt16)| __m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64            dst[i] = src[i], i = 1, ..., 7            8x8i -&gt; 8x16u
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.SByte},Z0.N256,System.Int32)| __m256i _mm256_cvtepi8_epi32 (__m128i a) VPMOVSXBD ymm, xmm/m128            8x8i -&gt; 8x32i
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N128,System.Int16)| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16u            src[i] -&gt; dst[i], i = 0,.., 7
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N128,System.UInt16)| __m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64            8x8u -&gt; 8x16u            src[i] -&gt; dst[i], i = 0,.., 7
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,System.UInt32)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.Byte},Z0.N256,System.Int32)| __m256i _mm256_cvtepu8_epi32 (__m128i a) VPMOVZXBD ymm, xmm            Zero extends 8 8-bit integers from the low 8 bytes of the source to 8 32-bit integers in the target
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N128,System.Int32)| __m128i _mm_cvtepi16_epi32 (__m128i a) PMOVSXWD xmm, xmm/m64
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.Int16},Z0.N256,System.Int64)| __m256i _mm256_cvtepi16_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x16u -&gt; 4x64u
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N128,System.UInt32)| __m128i _mm_cvtepu16_epi32 (__m128i a)PMOVZXWD xmm, xmm/m64
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,System.Int64)| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.UInt16},Z0.N256,System.UInt64)| __m256i _mm256_cvtepu16_epi64 (__m128i a) VPMOVZXWQ ymm, xmm
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N128,System.Int64)| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64i            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N128,System.UInt64)| __m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64            2x32u -&gt; 2x64u            src[i] -&gt; dst[i], i = 0, 2
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N256,System.Int16)| __m256i _mm256_cvtepi8_epi16 (__m128i a) VPMOVSXBW ymm, xmm/m128            16x8u -&gt; 16x16i
Method      | Z0.dvec.vmaphi(System.Runtime.Intrinsics.Vector256{System.SByte},Z0.N256,System.Int16)| __m256i _mm256_cvtepi8_epi16 (__m128i a) VPMOVSXBW ymm, xmm/m128            16x8u -&gt; 16x16i
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N256,System.UInt16)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16u
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N256,System.Int16)| __m256i _mm256_cvtepu8_epi16 (__m128i a) VPMOVZXBW ymm, xmm            16x8u -&gt; 16x16i
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.Int16},Z0.N256,System.Int32)| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16i -&gt; 8x32i
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N256,System.UInt32)| __m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128            8x16u -&gt; 8x32u
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N256,System.Int64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32i -&gt; 4x64i
Method      | Z0.dvec.vmaplo(System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N256,System.UInt64)| __m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128            4x32u -&gt; 4x64u
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_packs_epi16 (__m128i a, __m128i b)PACKSSWB xmm, xmm/m128
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_packs_epi16 (__m128i a, __m128i b)PACKSSWB xmm, xmm/m128
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_packs_epi32 (__m128i a, __m128i b)PACKSSDW xmm, xmm/m128
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_packs_epi32 (__m128i a, __m128i b)PACKSSDW xmm, xmm/m128
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_packs_epi16 (__m256i a, __m256i b)VPACKSSWB ymm, ymm, ymm/m256
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_packs_epi16 (__m256i a, __m256i b)VPACKSSWB ymm, ymm, ymm/m256
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_packs_epi32 (__m256i a, __m256i b)VPACKSSDW ymm, ymm, ymm/m256
Method      | Z0.dvec.vpackss(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_packs_epi32 (__m256i a, __m256i b)VPACKSSDW ymm, ymm, ymm/m256
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})| __m128i _mm_packus_epi16 (__m128i a, __m128i b)PACKUSWB xmm, xmm/m128            (8x16w,8x16w) -&gt; 16x8w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})| __m128i _mm_packus_epi16 (__m128i a, __m128i b)PACKUSWB xmm, xmm/m128            (8x16w,8x16w) -&gt; 16x8w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_packus_epi32 (__m128i a, __m128i b)PACKUSDW xmm, xmm/m128              (4x32w,4x32w) -&gt; 8x16w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_packus_epi32 (__m128i a, __m128i b) PACKUSDW xmm, xmm/m128              (4x32w,4x32w) -&gt; 8x16w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})| __m256i _mm256_packus_epi16 (__m256i a, __m256i b)VPACKUSWB ymm, ymm, ymm/m256            (16x8w,16x8w) -&gt; 32x8w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})| __m256i _mm256_packus_epi16 (__m256i a, __m256i b) VPACKUSWB ymm, ymm, ymm/m256            (16x8w,16x8w) -&gt; 32x8w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_packus_epi32 (__m256i a, __m256i b)VPACKUSDW ymm, ymm, ymm/m256            (8x32w,8x32w) -&gt; 16x16w
Method      | Z0.dvec.vpackus(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_packus_epi32 (__m256i a, __m256i b) VPACKUSDW ymm, ymm, ymm/m256            (8x32w,8x32w) -&gt; 16x16w            [0, 1, 2, 3, 8, 9, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15]
Method      | Z0.dvec.vpackus_alt(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})| (4x32w,4x32w) -&gt; 8x16w
Method      | Z0.dvec.vconvert(Z0.N64,System.Byte@,Z0.N256,Z0.N32)                  | VPMOVZXBD ymm, m64            8x8u -&gt; 8x32u            Evenly covers a 256-bit target vector with a 64-bit source
Method      | Z0.dvec.vconvert(Z0.N64,System.UInt16@,Z0.N256,Z0.N32)                | VPMOVZXBD ymm, m64            8x8u -&gt; 8x32u            Evenly covers a 256-bit target vector with a 64-bit source
Method      | Z0.dvec.vconvert(Z0.N64,System.UInt32@,Z0.N256,Z0.N32)                | VPMOVZXBD ymm, m64            8x8u -&gt; 8x32u            Evenly covers a 256-bit target vector with a 64-bit source
Method      | Z0.dvec.vconvert(Z0.N64,System.UInt64@,Z0.N256,Z0.N32)                | VPMOVZXBD ymm, m64            8x8u -&gt; 8x32u            Evenly covers a 256-bit target vector with a 64-bit source
Method      | Z0.dvec.vgather(Z0.N128,System.Int32@,System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_i32gather_epi32 (int const* base_addr, __m128i vindex, const int scale) VPGATHERDD xmm, vm32x, xmm            Loads a 128x32i vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.UInt32@,System.Runtime.Intrinsics.Vector256{System.UInt64})| __m128i _mm256_i64gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERQD xmm, vm64y, xmm            Loads a 128x32u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.Int64@,System.Runtime.Intrinsics.Vector128{System.Int64})| __m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERQQ xmm, vm64x, xmm            Loads a 128x64u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.UInt64@,System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERQQ xmm, vm64x, xmm            Loads a 128x32u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.Int32@,System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERDD ymm, vm32y, ymm            Loads a 256x32i vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.UInt32@,System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_i32gather_epi32(int const* base_addr, __m128i vindex, const int scale) VPGATHERDD xmm, vm32x, xmm            Loads a 128x32u vector from from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.UInt32@,System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERDD ymm, vm32y, ymm            Loads a 256x32u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.UInt16@,System.Runtime.Intrinsics.Vector128{System.UInt16})| Loads a 128x16u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.Int16@,System.Runtime.Intrinsics.Vector128{System.Int16})| Loads a 128x16i vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.SByte@,System.Runtime.Intrinsics.Vector128{System.SByte})| Loads a 128x8u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N128,System.Byte@,System.Runtime.Intrinsics.Vector128{System.Byte})| Loads a 128x8u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.Int64@,System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale) VPGATHERQQ ymm, vm64y, ymm            Loads a 256x64i vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.UInt64@,System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale) VPGATHERQQ ymm, vm64y, ymm            Loads a 256x64u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.UInt64@,System.Runtime.Intrinsics.Vector128{System.UInt32})| __m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERDQ ymm, vm32y, ymm            Loads a 256x64u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.Int64@,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale) VPGATHERQQ ymm, vm64y, ymm            Loads a 256x64i vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.UInt64@,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale) VPGATHERQQ ymm, vm64y, ymm            Loads a 256x64u vector from index-identified source cells
Method      | Z0.dvec.vgather(Z0.N256,System.UInt64@,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERDQ ymm, vm32y, ymm            Loads a 256x64u vector from index-identified source cells
Method      | Z0.dvec.vmaskgather(Z0.N128,System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32@,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_mask_i32gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERDD xmm, vm32x, xmm
Method      | Z0.dvec.vmaskgather(Z0.N128,System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64@,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_mask_i64gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERQQ xmm, vm64x, xmm
Method      | Z0.dvec.vmaskgather(Z0.N128,System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64@,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt64})| __m128i _mm_mask_i32gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERDQ xmm, vm32x, xmm
Method      | Z0.dvec.vmaskgather(Z0.N128,System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32@,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERQD xmm, vm64x, xmm
Method      | Z0.dvec.vmaskgather(Z0.N128,System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32@,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm256_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m256i vindex, __m128i mask, const int scale) VPGATHERQD xmm, vm32y, xmm
Method      | Z0.dvec.vmaskgather(Z0.N256,System.Runtime.Intrinsics.Vector256{System.UInt32},System.UInt32@,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_mask_i32gather_epi32 (__m256i src, int const* base_addr, __m256i vindex, __m256i mask, const int scale) VPGATHERDD ymm, vm32y, ymm
Method      | Z0.dvec.vmaskgather(Z0.N256,System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64@,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_mask_i64gather_epi64 (__m256i src, __int64 const* base_addr, __m256i vindex, __m256i mask, const int scale) VPGATHERQQ ymm, vm32y, ymm
Method      | Z0.dvec.vmaskgather(Z0.N256,System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64@,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale) VPGATHERDQ ymm, vm32y, ymm
Method      | Z0.dvec.vmaskload(Z0.Block128{System.Int32}@,System.Runtime.Intrinsics.Vector128{System.Int32})| __m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask) VPMASKMOVD xmm, xmm, m128
Method      | Z0.dvec.vmaskload(Z0.Block128{System.UInt32}@,System.Runtime.Intrinsics.Vector128{System.UInt32})| __m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask) VPMASKMOVD xmm, xmm, m128
Method      | Z0.dvec.vmaskload(Z0.Block256{System.Int32}@,System.Runtime.Intrinsics.Vector256{System.Int32})| __m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask) VPMASKMOVD ymm, ymm, m256
Method      | Z0.dvec.vmaskload(Z0.Block256{System.UInt32}@,System.Runtime.Intrinsics.Vector256{System.UInt32})| __m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask) VPMASKMOVD ymm, ymm, m256
Method      | Z0.dvec.vmaskload(Z0.Block256{System.Int64}@,System.Runtime.Intrinsics.Vector256{System.Int64})| __m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask) VPMASKMOVQ ymm, ymm, m256
Method      | Z0.dvec.vmaskload(Z0.Block256{System.UInt64}@,System.Runtime.Intrinsics.Vector256{System.UInt64})| __m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask) VPMASKMOVQ ymm, ymm, m256
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore8(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Block256{System.UInt32}@)| void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a) VPMASKMOVD m256, ymm, ymm            Conditionally stores 32-bit source vector segments to memory according to a vectorized mask            where the hi bit of each corresponding section determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore32(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Block256{System.UInt32}@)| Conditionally stores 32-bit source vector segments to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore32(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Block256{System.UInt32}@)| Conditionally stores 32-bit source vector segments to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore32(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Block256{System.UInt32}@)| Conditionally stores 32-bit source vector segments to memory according to a vectorized mask
Method      | Z0.dvec.vmaskstore64(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Block256{System.UInt64}@)| void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm            Conditionally stores 64-bit source vector segments to memory according to a vectorized mask
Method      | Z0.dvec.vmaskstore64(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Block256{System.UInt64}@)| void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm            Conditionally stores 64-bit source vector segments to memory according to a vectorized mask
Method      | Z0.dvec.vmaskstore64(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Block256{System.UInt64}@)| void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm            Conditionally stores 64-bit source vector segments to memory according to a vectorized mask
Method      | Z0.dvec.vmaskstore64(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Block256{System.UInt64}@)| void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm            Conditionally stores source vector components to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},Z0.Block128{System.SByte}@)| void _mm_maskmoveu_si128 (__m128i a, __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm            Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},Z0.Block128{System.Int32}@)| void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a) VPMASKMOVD m128, xmm, xmm
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Block128{System.UInt32}@)| void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a) VPMASKMOVD m128, xmm, xmm
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.Block128{System.UInt64}@)| void _mm_maskstore_epi64 (__int64* mem_addr, __m128i mask, __m128i a) VPMASKMOVQ m128, xmm, xmm            Conditionally stores source vector components to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit components from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},Z0.Block256{System.Int32}@)| void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a) VPMASKMOVD m256, ymm, ymm            Conditionally stores source vector components to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Block256{System.UInt32}@)| void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a) VPMASKMOVD m256, ymm, ymm            Conditionally stores 32-bit source vector components to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},Z0.Block256{System.Int64}@)| void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm            Conditionally stores source vector components to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.dvec.vmaskstore(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Block256{System.UInt64}@)| void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm            Conditionally stores source vector components to memory according to a vectorized mask            where the hi bit of each corresponding component determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Type        | Z0.ClMulMask                                                          | Defines a mask that specifies the left/right vector components from which a carry-less product will be formed
Field       | Z0.ClMulMask.X00                                                      | For a product P = XY, multiply the lo(X) and lo(Y)
Field       | Z0.ClMulMask.X01                                                      | For a product P = XY, multiply the lo(X) and hi(Y)
Field       | Z0.ClMulMask.X10                                                      | For a product P = XY, multiply the hi(X) and lo(Y)
Field       | Z0.ClMulMask.X11                                                      | For a product P = XY, multiply the hi(X) and hi(Y)
Method      | Z0.XTend.FormatBits``1(System.Runtime.Intrinsics.Vector128{``0},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Int32})| Formats vector bits
Method      | Z0.XTend.FormatBits``1(System.Runtime.Intrinsics.Vector256{``0},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Int32})| Formats vector bits
Method      | Z0.XTend.FormatBlockedBits``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32,System.Nullable{System.Int32})| Block-formats the vector, e.g. [01010101 01010101 ... 01010101] where by default the size of each block is the bit-width of a component
Method      | Z0.XTend.FormatBlockedBits``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32,System.Nullable{System.Int32})| Block-formats the vector, e.g. [01010101 01010101 ... 01010101] where default the size of each block is the bit-width of a component
