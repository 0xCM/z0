| M:Z0.XTend.Contract(System.UInt32,System.UInt32)  | 
            <summary>
            Evenly projects points from the interval [0,2^31 - 1] onto the interval [0,max]
            </summary>
            <param name="src">The value to contract</param>
            <param name="max">The maximum value in the target interval</param>
        
| M:Z0.XTend.Contract(System.UInt64,System.UInt64)  | 
            <summary>
            Evenly projects points from the interval [0,2^63 - 1] onto the interval [0,max]
            </summary>
            <param name="src">The value to contract</param>
            <param name="max">The maximum value in the target interval</param>
        
| F:Z0.EmbeddedRngKind.None                         | 
            <summary>
            The nothingness of the void
            </summary>
        
| F:Z0.EmbeddedRngKind.Pcg32                        | 
            <summary>
            A 32-bit PCG generator
            </summary>
        
| F:Z0.EmbeddedRngKind.Pcg64                        | 
            <summary>
            A 64-bit PCG generator
            </summary>
        
| F:Z0.EmbeddedRngKind.WyHash16                     | 
            <summary>
            A 16-bit WyHash generator
            </summary>
        
| F:Z0.EmbeddedRngKind.WyHash64                     | 
            <summary>
            A 64-bit WyHash generator
            </summary>
        
| F:Z0.EmbeddedRngKind.SplitMix64                   | 
            <summary>
            A 64-bit SplitMix generator
            </summary>
        
| F:Z0.EmbeddedRngKind.XOrShift128                  | 
            <summary>
            An xorshift generator with 128 bits of state
            </summary>
        
| F:Z0.EmbeddedRngKind.XOrShift256                  | 
            <summary>
            An xorshift generator with 256 bits of state
            </summary>
        
| F:Z0.EmbeddedRngKind.XOrShift1024                 | 
            <summary>
            An xorshift generator with 1024 bits of state
            </summary>
        
| T:Z0.CauchySpec`1                                 | 
            <summary>
            Characterizes a Cauchy distribution
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Cauchy_distribution</remarks>
        
| F:Z0.CauchySpec`1.Location                        | 
            <summary>
            The distribution mean
            </summary>
        
| F:Z0.CauchySpec`1.Scale                           | 
            <summary>
            The distribution scale
            </summary>
        
| P:Z0.CauchySpec`1.DistKind                        | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.ChiSquareSpec`1                              | 
            <summary>
            Characterizes a bernouli distribution
            </summary>    
            <typeparam name="T">The sample value type</typeparam>
        
| F:Z0.ChiSquareSpec`1.Freedom                      | 
            <summary>
            The number of degrees of freedom
            </summary>
        
| P:Z0.ChiSquareSpec`1.DistKind                     | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.ExponentialSpec`1                            | 
            <summary>
            Characterizes a Exponential (normal) distribution
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Normal_distribution</remarks>
            <typeparam name="T">The sample value type</typeparam>
        
| P:Z0.ExponentialSpec`1.DistKind                   | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| M:Z0.GammaSpec.From``1(Z0.IDistributionSpec{``0}) | 
            <summary>
            Interprets a supplied spec as a gamma spec; an error
            is raised if the spec does not define gamma distribution
            </summary>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.GammaSpec.Define``1(``0,``0,``0)             | 
            <summary>
            Defines a gamma distribution
            </summary>
            <param name="alpha"></param>
            <param name="dx"></param>
            <param name="beta"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        
| T:Z0.GammaSpec`1                                  | 
            <summary>
            Characterizes a Gamma distribution
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Gamma_distribution</remarks>
        
| P:Z0.GammaSpec`1.DistKind                         | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.GaussianSpec`1                               | 
            <summary>
            Characterizes a Gaussian (normal) distribution
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Normal_distribution</remarks>
            <typeparam name="T">The sample value type</typeparam>
        
| M:Z0.GaussianSpec`1.Define(`0,`0)                 | 
            <summary>
            Defines a Gaussian distribution with specified mean and standard deviation
            </summary>
            <param name="mu">The distribution mean</param>
            <param name="sigma">The standard deviation</param>
            <typeparam name="T">The sample element type</typeparam>
        
| F:Z0.GaussianSpec`1.Mean                          | 
            <summary>
            The mean of the distribtion that serves as the location parameter
            </summary>
        
| F:Z0.GaussianSpec`1.StdDev                        | 
            <summary>
            The standard deviation
            </summary>
        
| P:Z0.GaussianSpec`1.DistKind                      | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.GeometricSpec`1                              | 
            <summary>
            Characterizes a geometric distribution
            </summary>    
            <typeparam name="T">The sample value type</typeparam>
        
| F:Z0.GeometricSpec`1.Success                      | 
            <summary>
            Specifies a value within the unit interval [0,1] that represents the probability of success
            </summary>
        
| T:Z0.BernoulliSpec`1                              | 
            <summary>
            Characterizes a bernouli distribution
            </summary>    
            <typeparam name="T">The sample value type</typeparam>
            <remarks>See https://en.wikipedia.org/wiki/Bernoulli_distribution</remarks>
        
| F:Z0.BernoulliSpec`1.Success                      | 
            <summary>
            Specifies a value within the unit interval [0,1] that represents the probability of success
            </summary>
        
| M:Z0.BernoulliSpec`1.Define(System.Double)        | 
            <summary>
            Defines a Bernoulli distribution predicated on the probability of trial success
            </summary>
            <param name="p">The probability of success</param>
        
| T:Z0.BetaSpec`1                                   | 
            <summary>
            Characterizes a beta distribution
            </summary>
            <typeparam name="T">The sample value type</typeparam>
            <remarks>See https://en.wikipedia.org/wiki/Beta_distribution</remarks>
        
| P:Z0.BetaSpec`1.DistKind                          | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.BinomialSpec`1                               | 
            <summary>
            Characterizes a binomial distribution
            </summary>
            <typeparam name="T">The (integral) sample value type</typeparam>
            <remarks>See https://en.wikipedia.org/wiki/Binomial_distribution</remarks>
        
| P:Z0.BinomialSpec`1.DistKind                      | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.LaplaceSpec`1                                | 
            <summary>
            Characterizes a Laplace distribution
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Laplace_distribution</remarks>
            <typeparam name="T">The sample value type</typeparam>
        
| F:Z0.LaplaceSpec`1.Location                       | 
            <summary>
            The distribution mean
            </summary>
        
| F:Z0.LaplaceSpec`1.Scale                          | 
            <summary>
            The standard deviation
            </summary>
        
| P:Z0.LaplaceSpec`1.DistKind                       | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.Observations`1                               | 
            <summary>
            Defines an observation sequence
            </summary>
        
| F:Z0.Observations`1.Count                         | 
            <summary>
            The number of observations that comprise the sample
            </summary>
        
| F:Z0.Observations`1.Dim                           | 
            <summary>
            The sample dimensionality
            </summary>
        
| M:Z0.Observations`1.Observation(System.Int32)     | 
            <summary>
            Retrieves a single index-identified observation vector
            </summary>
            <param name="vecix">The vector index</param>
        
| M:Z0.Observations`1.Slice(System.Int32,System.Int32)| 
            <summary>
            Selects a contiguous sequence of observations beginning at a specified offset
            </summary>
            <param name="offset">The offset</param>
            <param name="count">The observation count</param>
        
| P:Z0.Observations`1.Length                        | 
            <summary>
            The data length
            </summary>
        
| T:Z0.PoissonSpec`1                                | 
            <summary>
            Characterizes a Poisson distribution
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Poisson_distribution</remarks>
            <typeparam name="T">The sample value type</typeparam>
        
| F:Z0.PoissonSpec`1.Rate                           | 
            <summary>
            Specifies the event frequency
            </summary>
        
| P:Z0.PoissonSpec`1.DistKind                       | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.RVar`1                                       | 
            <summary>
            Defines a random variable
            </summary>
        
| M:Z0.RVar`1.Sample(System.Int32)                  | 
            <summary>
            Samples a specified number of values
            </summary>
            <param name="count">The sample count</param>
        
| M:Z0.RVar`1.Sample                                | 
            <summary>
            Samples an arbitrary number of values
            </summary>
            <param name="count">The sample count</param>
        
| M:Z0.RVar`1.Next                                  | 
            <summary>
            Samples exactly one value
            </summary>
        
| M:Z0.DistributionSpec.bernoulli``1(Z0.IDistributionSpec{``0})| 
            <summary>
            Casts a supplied distribution to a Bernoulli distribution
            </summary>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.DistributionSpec.Define``1(System.Double)    | 
            <summary>
            Specifies a Bernoulli distribution predicated on the probability of trial success
            </summary>
            <param name="p">The probability of success</param>
            <typeparam name="T">The sample element type</typeparam>
        
| T:Z0.GaussianSpec                                 | 
            <summary>
            Defines operations specific to Gaussian distributions
            </summary>
        
| M:Z0.GaussianSpec.From``1(Z0.IDistributionSpec{``0})| 
            <summary>
            Interprets a supplied spec as a Gaussian spec; an error
            is raised if the spec does not define a Gaussian distribution
            </summary>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.GaussianSpec.Define``1(``0,``0)              | 
            <summary>
            Defines a Gaussian distribution with specified mean and standard deviation
            </summary>
            <param name="mu">The distribution mean</param>
            <param name="sigma">The standard deviation</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.Observations.Load``1(``0[],System.Int32)     | 
            <summary>
            Loads a sample from an array
            </summary>
            <param name="src">The source span</param>
            <param name="dim">The sample dimension</param>
            <param name="offset">The offset into the source span from to begin the load</param>
            <typeparam name="T">The sample data type</typeparam>
        
| M:Z0.Observations.Load``1(System.Span{``0},System.Int32)| 
            <summary>
            Loads a sample from a span
            </summary>
            <param name="src">The source span</param>
            <param name="dim">The sample dimension</param>
            <param name="offset">The offset into the source span from to begin the load</param>
            <typeparam name="T">The sample data type</typeparam>
        
| M:Z0.Observations.Alloc``1(System.Int32,System.Int32)| 
            <summary>
            Allocates a sample 
            </summary>
            <param name="dim">The sample dimension</param>
            <param name="count">The number of observation vectors in the sample</param>
            <typeparam name="T">The sample data type</typeparam>
        
| T:Z0.UniformSpec                                  | 
            <summary>
            Defines operations specific to uniform distributions
            </summary>
        
| M:Z0.UniformSpec.from``1(Z0.IDistributionSpec{``0})| 
            <summary>
            Interprets a supplied spec as a uniform spec; an error
            is raised if the spec does not define a uniform distribution
            </summary>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.UniformSpec.define``1(``0,``0)               | 
            <summary>
            Defines a unform distribution bound between lower and upper bounds
            </summary>
            <param name="min">The lower bound</param>
            <param name="max">The upper bound</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.UniformSpec.define``1(Z0.Interval{``0}@)     | 
            <summary>
            Defines a uniform distribution bound to an interval domain
            </summary>
            <param name="domain">The potential range of sample values</param>
            <typeparam name="T">The sample element type</typeparam>
        
| T:Z0.UniformBitsSpec                              | 
            <summary>
            Defines operations specific to uniform bit distributions
            </summary>
        
| M:Z0.UniformBitsSpec.From``1(Z0.IDistributionSpec{``0})| 
            <summary>
            Interprets a supplied spec as a uniform spec; an error
            is raised if the spec does not define a uniform bits distribution
            </summary>
            <param name="spec">The distribution specifier</param>
            <typeparam name="T">The sample element type</typeparam>
        
| M:Z0.UniformBitsSpec.Define``1                    | 
            <summary>
            Defines a unform bits distribution
            </summary>
            <typeparam name="T">The sample element type</typeparam>
        
| T:Z0.UniformBitsSpec`1                            | 
            <summary>
            Characterizes a uniform distribution
            </summary>
            <typeparam name="T">The sample value type</typeparam>
            <remarks>See https://en.wikipedia.org/wiki/Uniform_distribution</remarks>
        
| P:Z0.UniformBitsSpec`1.DistKind                   | 
            <summary>
            Classifies the distribution spec
            </summary>
        
| T:Z0.UniformSpec`1                                | 
            <summary>
            Characterizes a uniform distribution
            </summary>
            <typeparam name="T">The sample value type</typeparam>
            <remarks>See https://en.wikipedia.org/wiki/Uniform_distribution</remarks>
        
| F:Z0.UniformSpec`1.Min                            | 
            <summary>
            The lower bound
            </summary>
        
| F:Z0.UniformSpec`1.Max                            | 
            <summary>
            The upper bound
            </summary>
        
| M:Z0.UniformSpec`1.Define(`0,`0)                  | 
            <summary>
            Defines a unform distribution bound between lower and upper bounds
            </summary>
            <param name="min">The lower bound</param>
            <param name="max">The upper bound</param>
        
| M:Z0.UniformSpec`1.Define(Z0.Interval{`0}@)       | 
            <summary>
            Defines a uniform distribution bound to an interval domain
            </summary>
            <param name="domain">The potential range of sample values</param>
            <typeparam name="T">The sample element type</typeparam>
        
| P:Z0.UniformSpec`1.DistKind                       | 
            <summary>
            Classifies the distribution
            </summary>
        
| M:Z0.PolEnum.EnumValues``1(Z0.IPolyrand,System.Func{``0,System.Boolean})| 
            <summary>
            Produces a stream of values sampled from an enum
            </summary>
            <param name="random">The random source</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.PolEnum.EnumValues``1(Z0.IPolyrand,``0[])    | 
            <summary>
            Produces a stream of enum values enum
            </summary>
            <param name="random">The random source</param>
            <param name="exclusions">Enum literals to exclude</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.PolyBits.BitStream32(Z0.IPolyrand)           | 
            <summary>
            Produces an interminable stream of random bits
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.PolyBits.BitStream``1(Z0.IPolyrand)          | 
            <summary>
            Produces an interminable stream of random bits from a value sequence of parametric type
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.PolyBytes.Bytes(Z0.IPolyrand)                | 
            <summary>
            Produces an interminable stream of random bytes
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.PolyBytes.Bytes(Z0.IPolyrand,System.Int32)   | 
            <summary>
            Produces a limited stream of random bytes
            </summary>
            <param name="random">The random source</param>
            <param name="count">The maximum number of bytes to produce</param>
        
| M:Z0.PolyBytes.ByteStream(Z0.IPolyrand)           | 
            <summary>
            Produces a random stream of bytes
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.PolyFill.Fill``1(Z0.IPolyrand,Z0.Interval{``0},System.Int32,``0@,System.Func{``0,System.Boolean})| 
            <summary>
            Fills a caller-allocated target with a specified number of values from the source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="count">The number of values to send to the target</param>
            <param name="dst">A reference to the target location</param>
            <param name="filter">If specified, values that do not satisfy the predicate are excluded from the stream</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.PolyFill.Fill``1(Z0.IRngPointSource{``0},System.Int32,``0@)| 
            <summary>
            Fills a caller-allocated target with a specified number of values from a source
            </summary>
            <param name="src">The random source</param>
            <param name="count">The number of values to send to the target</param>
            <param name="dst">A reference to the target location</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.PolyFill.Fill``1(Z0.IPolyrand,System.Int32,``0@)| 
            <summary>
            Fills a caller-allocated target with a specified number of values from the source
            </summary>
            <param name="random">The random source</param>
            <param name="count">The number of values to send to the target</param>
            <param name="dst">A reference to the target location</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.PolyOne.Single``1(Z0.IPolyrand,``0)          | 
            <summary>
            Produces a single random value
            </summary>
            <param name="random">The random source</param>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolyOne.Single``1(Z0.IPolyrand,``0,``0)      | 
            <summary>
            Produces a single random value within a range
            </summary>
            <param name="random">The random source</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolyPower.Pow2``1(Z0.IPolyrand,``0)          | 
            <summary>
            Produces a random power of 2 within the primal type domain
            </summary>
            <param name="random">The random source</param>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolyPower.Pow2``1(Z0.IPolyrand,System.Int32,System.Int32)| 
            <summary>
            Produces a random power of 2 with specified min/max exponent values
            </summary>
            <param name="random">The random source</param>
            <param name="minexp">The min exponent value</param>
            <param name="maxexp">The max exponent value</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolyRaze.Array``1(Z0.IPolyrand,System.Int32) | 
            <summary>
            Produces an array of random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced array</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The generated value type</typeparam>
        
| M:Z0.PolyRaze.Array``1(Z0.IPolyrand,System.Int32,Z0.Interval{``0})| 
            <summary>
            Produces an array of random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced array</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The generated value type</typeparam>
        
| M:Z0.PolyRaze.Array``1(Z0.IPolyrand,System.Int32,``0,``0,System.Func{``0,System.Boolean})| 
            <summary>
            Produces an array of random values between specified lower and upper bounds
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced array</param>
            <param name="min">The inclusive minimum potential value</param>
            <param name="min">The exclusive maximum potential value</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The generated value type</typeparam>
        
| M:Z0.PolyRaze.Array``1(Z0.IPolyrand,System.Int32,``0,``0)| 
            <summary>
            Produces an array of random values between specified lower and upper bounds
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced array</param>
            <param name="min">The inclusive minimum potential value</param>
            <param name="min">The exclusive maximum potential value</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The generated value type</typeparam>
        
| M:Z0.PolyShuffles.Shuffle``1(Z0.IPolyrand,System.Span{``0})| 
            <summary>
            Shuffles span content in-place
            </summary>
            <param name="random">The random source</param>
            <param name="src">The input/output span</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolyShuffles.Shuffle``1(Z0.IPolyrand,``0[])  | 
            <summary>
            Shuffles array content in-place
            </summary>
            <param name="random">The random source</param>
            <param name="src">The input/output array</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolyShuffles.Shuffle``1(Z0.IPolyrand,System.ReadOnlySpan{``0})| 
            <summary>
            Replicates and shuffles a source span
            </summary>
            <param name="random">The random source</param>
            <param name="src">The source span</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolySpan.SpanFill``1(Z0.IPolyrand,System.Span{``0})| 
            <summary>
            Fills a caller-allocated span with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.PolySpan.Span``1(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}},System.Func{``0,System.Boolean})| 
            <summary>
            Produces a span of random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced data</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.PolySpan.Span``1(Z0.IPolyrand,System.Int32,Z0.Interval{``0})| 
            <summary>
            Produces a span of random values constraint to a specified domain
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced data</param>
            <param name="domain">The interval domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.PolySpan.Span``1(Z0.IPolyrand,System.Int32,``0,``0,System.Func{``0,System.Boolean})| 
            <summary>
            Produces a span of random values constraint to a specified domain
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced data</param>
            <param name="domain">The interval domain to which values are constrained</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.PolySpan.Span``1(Z0.IPolyrand,System.Int32,``0)| 
            <summary>
            Produces a span of random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The span length</param>
            <param name="t">A cell type representative</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.PolySpan.SpanFill``1(Z0.IPolyrand,``0,``0,System.Span{``0})| 
            <summary>
            Fills a caller-allocated span with random values
            </summary>
            <param name="random">The random source</param>
            <param name="dst">The target span</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.PolySpan.SpanFill(Z0.IPolyrand,System.Span{Z0.bit})| 
            <summary>
            Fills a caller-supplied target with random bits
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.PolySpan.ReadOnlySpan``1(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}},System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and produces a readonly span populated with random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced data</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.PolySpan.NonZeroSpan``1(Z0.IPolyrand,System.Int32,Z0.Interval{``0})| 
            <summary>
            Allocates and produces a punctured span populated with nonzero random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced data</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.PolySpan.NonZeroSpan``1(Z0.IPolyrand,System.Int32)| 
            <summary>
            Allocates and produces a punctured span populated with nonzero random values
            </summary>
            <param name="random">The random source</param>
            <param name="length">The length of the produced data</param>
            <param name="domain">An optional domain to which values are constrained</param>
            <param name="filter">An optional filter that refines the domain</param>
            <typeparam name="T">The primal random value type</typeparam>
        
| M:Z0.PolyStream.filtered``1(Z0.IPolyrand,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Creates a stream predicated on a specified source over which a filter is applied
            </summary>
            <param name="src">The random source</param>
            <param name="domain">The source domain</param>
            <param name="filter">The filter predicate</param>
            <typeparam name="T">The production type</typeparam>
        
| T:Z0.PolyStream.RngStream`1                       | 
            <summary>
            Captures a random stream along with the generator classification
            </summary>
        
| M:Z0.XStream.Stream``1(Z0.IPolyrand)              | 
            <summary>
            Produces a random stream of unfiltered/unbounded points from a source
            </summary>
            <param name="random">The point source</param>
            <typeparam name="T">The point type</typeparam>
        
| M:Z0.XStream.Stream``1(Z0.IPolyrand,``0,``0)      | 
            <summary>
            Produces a stream values from the source subject to a specified range and optional filter
            </summary>
            <param name="random">The random source</param>
            <param name="domain">If specified, the domain of the random variable</param>
            <param name="filter">If specified, values that do not satisfy the predicate are excluded from the stream</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XStream.Stream``1(Z0.IPolyrand,Z0.Interval{``0})| 
            <summary>
            Produces a stream of values from the random source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="filter">If specified, values that do not satisfy the predicate are excluded from the stream</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XStream.Stream``1(Z0.IPolyrand,Z0.Interval{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Produces a stream of values from the random source
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <param name="filter">If specified, values that do not satisfy the predicate are excluded from the stream</param>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.PolySystem                                   | 
            <summary>
            Adapter for client code that expects to interface with the System.Random class
            </summary>
        
| M:Z0.PolySystem.From(Z0.IPolyrand)                | 
            <summary>
            Derives the system random rng from polyrand
            </summary>
            <param name="random">The source rng</param>
        
| M:Z0.PolyZero.NonZStream``1(Z0.IPolyrand,Z0.Interval{``0})| 
            <summary>
            Produces a stream of nonzero uniformly random values
            </summary>
            <param name="random">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.PolyZero.NonZ``1(Z0.IPolyrand,``0,``0)       | 
            <summary>
            Queries the source for the next nonzero value within a range
            </summary>
            <param name="src">The random source</param>
            <param name="min">The inclusive min value</param>
            <param name="max">The exclusive max value</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.PolyZero.NonZ``1(Z0.IPolyrand,Z0.Interval{``0})| 
            <summary>
            Queries the source for the next nonzero value within a range
            </summary>
            <param name="src">The random source</param>
            <param name="domain">The range of potential values</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.PolyZero.NonZ``1(Z0.IPolyrand,``0)           | 
            <summary>
            Queries the source for the next nonzero value less than a specified upper bound
            </summary>
            <param name="src">The random source</param>
            <typeparam name="T">The element type</typeparam>
            <param name="max">The exclusive uper bound</param>
        
| M:Z0.PolyZero.NonZ``1(Z0.IPolyrand)               | 
            <summary>
            Queries the source for the next nonzero value
            </summary>
            <param name="src">The random source</param>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.Polyrand                                     | 
            <summary>
            Produces pseudorandom numeric points and streams predicated on a supplied generator
            </summary>
        
| M:Z0.Polyrand.Pcg64(System.Nullable{System.UInt64},System.Nullable{System.UInt64})| 
            <summary>
            Creates a 64-bit Pcg RNG
            </summary>
            <param name="seed">The inital rng state</param>
            <param name="index">The stream index, if any</param>
        
| M:Z0.Polyrand.WyHash64(System.Nullable{System.UInt64})| 
            <summary>
            Creates a new WyHash16 generator
            </summary>
            <param name="seed">An optional seed; if unspecified, seed is taken from the system entropy source</param>
        
| M:Z0.Polyrand.SplitMix(System.Nullable{System.UInt64})| 
            <summary>
            Creates a splitmix 64-bit generator
            </summary>
            <param name="seed">The initial state of the generator, if specified; 
            otherwise, the seed is obtained from an entropy source</param>
        
| M:Z0.Polyrand.XOrStarStar256(System.UInt64[])     | 
            <summary>
            Creates an XOrShift 1024 rng
            </summary>
            <param name="seed">The initial state</param>
        
| M:Z0.Polyrand.XOrShift1024(System.UInt64[])       | 
            <summary>
            Creates an XOrShift 1024 rng
            </summary>
            <param name="seed">The initial state</param>
        
| M:Z0.Polyrand.enable(System.Int64,System.Int32)   | 
            <summary>
            Enables a specified source bit
            </summary>
            <param name="src">The source value to manipulate</param>
            <param name="pos">The position of the bit to enable</param>
        
| M:Z0.Entropy.Bytes(System.Int32)                  | 
            <summary>
            Produces a specified number of entropic bytes
            </summary>
            <param name="count">The number of bytes</param>
        
| M:Z0.Entropy.Value``1                             | 
            <summary>
            Produces a single entropic value of primal type
            </summary>
            <typeparam name="T">The primal type</typeparam>
        
| T:Z0.PolySeed                                     | 
            <summary>
            Defines a permanent/immutable seed store to support pseudorandom reproducibility
            </summary>
        
| M:Z0.PolySeed.Entropic``1                         | 
            <summary>
            Produces a non-deterministic seed
            </summary>
            <typeparam name="T">The seed type</typeparam>
        
| M:Z0.PolySeed.Configured``1(``0)                  | 
            <summary>
            Produces a seed from embedded application resources that, for a given index, remanins fixed
            </summary>
            <typeparam name="T">The seed type</typeparam>
        
| P:Z0.PolySeed.SourceLength                        | 
            <summary>
            The total number of bytes in the embedded data 
            </summary>
        
| M:Z0.PolySeed.MaxOffset``1                        | 
            <summary>
            Gets the maximum available offset for a given data type
            </summary>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.PolySeed.TakeSingle``1(System.Int32)         | 
            <summary>
            Acquires a single value from the embedded data source
            </summary>
            <param name="offset">The source offset</param>
            <typeparam name="T">The data type</typeparam>
        
| M:Z0.PolySeed.TakeMany``1(System.Int32,System.Int32)| 
            <summary>
            Acauires a readonly span of values from the embedded source
            </summary>
            <param name="offset">The source offset</param>
            <param name="length">The number of values to take</param>
            <typeparam name="T">The data type</typeparam>
        
| M:Z0.PolySeed.VerifyIndex``1(System.Int32)        | 
            <summary>
            Checks that a requested offset for a given data type is within bounds
            </summary>
            <param name="offset">The source offset</param>
            <typeparam name="T">The data type</typeparam>
        
| P:Z0.PolySeed.Bytes                               | 
            <summary>
            Provides access to 32768 bytes of random data
            </summary>
            <value></value>
        
| T:Z0.PolySeed256                                  | 
            <summary>
            Facilities deterministic/repeatable executions of pseudorandom processes
            </summary>
        
| P:Z0.PolySeed64.RawBytes                          | 
            <summary>
            See https://vcsjones.com/2019/02/01/csharp-readonly-span-bytes-static/ for an explanation of how the jit optimizes this
            </summary>
        
| M:Z0.Pcg.Nav32(System.Nullable{System.UInt64},System.Nullable{System.UInt64})| 
            <summary>
            Creates a 32-bit Pcg RNG
            </summary>
            <param name="seed">The inital rng state</param>
            <param name="index">The stream index, if any</param>
        
| M:Z0.Pcg.Nav32Suite(System.ValueTuple{System.UInt64,System.UInt64}[])| 
            <summary>
            Creates a 64-bit Pcg RNG suite predicated on an array of seed and stream indices
            </summary>
            <param name="seed">The initial state of a generator</param>
            <param name="index">The stream index</param>
        
| M:Z0.Pcg.Nav32Suite(System.Span{System.UInt64},System.Span{System.UInt64})| 
            <summary>
            Creates a 32-bit Pcg RNG suite predicated on spans of seeds and stream indices
            </summary>
            <param name="seeds">A span of seed values</param>
            <param name="indices">A span of index values</param>
        
| M:Z0.Pcg32.Define(System.UInt64,System.Nullable{System.UInt64})| 
            <summary>
            Creates a pcg 64-bit rng
            </summary>
            <param name="s0">The initial state</param>
            <param name="index">The stream index</param>
        
| M:Z0.Pcg32.Step                                   | 
            <summary>
            Advances the generator to the next state and returns the prior state for consumption
            </summary>
        
| M:Z0.Pcg32.rotr(System.UInt32,System.UInt32)      | 
            <summary>
            Rotates bits in the source rightwards by a specified offset
            </summary>
            <param name="src">The source value</param>
            <param name="offset">The magnitude of the rotation</param>
        
| M:Z0.Pcg32.Grind(System.UInt64)                   | 
            <summary>
            Produces a pseudorandom output from a given source state
            </summary>
            <param name="state">The source state</param>
            <remarks>Follows the implementation of pcg_output_xsh_rr_64_32</remarks>
        
| T:Z0.Pcg64                                        | 
            <summary>
            Implemements a 64-bit PCG generator
            </summary>
        
| M:Z0.Pcg64.Define(System.UInt64,System.Nullable{System.UInt64})| 
            <summary>
            Creates a pcg 64-bit rng
            </summary>
            <param name="s0">The initial state</param>
            <param name="index">The stream index</param>
        
| M:Z0.Pcg64.Step                                   | 
            <summary>
            Advances the generator to the next state and returns the prior state for consumption
            </summary>
        
| M:Z0.Pcg64.Grind(System.UInt64)                   | 
            <summary>
            Produces a pseudorandom output predicated on a state
            </summary>
            <param name="state">The source state</param>
            <remarks>Follows the implementation of pcg_output_rxs_m_xs_64_64</remarks>
        
| M:Z0.PolyNique.Distinct``1(Z0.IPolyrand,``0[],System.Int32)| 
            <summary>
            Samples the source values without replacement
            </summary>
            <param name="random">The random source</param>
            <param name="source">The data source</param>
            <param name="count">The number of values to sample</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.PolyNique.Distinct``1(Z0.IPolyrand,System.Int32)| 
            <summary>
            Takes a specified number of distinct points from a source
            </summary>
            <param name="random">The random source</param>
            <param name="count">The number of points to take</param>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.SplitMix64                                   | 
            <summary>
            Implements a 64-bit random number generator
            </summary>
            <remarks>Algorithms take from https://github.com/lemire/testingRNG/blob/master/source/splitmix64.h</remarks>
        
| M:Z0.SplitMix64.Define(System.UInt64)             | 
            <summary>
            Defines the rng with a specified initial state
            </summary>
            <param name="state">The initial state</param>
        
| T:Z0.WyHash16                                     | 
            <summary>
            Implements a 16-bit random number generator
            </summary>
            <remarks>Algorithms take from https://lemire.me/blog/2019/07/03/a-fast-16-bit-random-number-generator/</remarks>
        
| M:Z0.WyHash16.Define(System.UInt16,System.Nullable{System.UInt16})| 
            <summary>
            Creates a wyhash 16-bit rng
            </summary>
            <param name="state">The initial state</param>
            <param name="index">The stream index</param>
        
| T:Z0.WyHash64                                     | 
            <summary>
            Implements a 64-bit random number generator
            </summary>
            <remarks>Algorithms take from https://github.com/lemire/testingRNG/blob/master/source/wyhash.h</remarks>
        
| T:Z0.XOrShift1024                                 | 
            <summary>
            Implements an XOrShift generator
            </summary>
            <remarks>
            Core algorithms taken from the paper: https://arxiv.org/pdf/1402.6246.pdf
            </remarks>
        
| F:Z0.XOrShift1024.JT                              | 
            <summary>
            The jump table of predetermined constants to facilitate an efficient way
            to simulate calls to "Next()"
            </summary>
        
| F:Z0.XOrShift1024.Multiplier                      | 
            <summary>
            Predetermined constant by which every generated value is multiplied
            </summary>
        
| T:Z0.XOrShift128                                  | 
            <summary>
            Defines pseudorandom number generator
            </summary>
        
| T:Z0.XOrShift256                                  | 
            <summary>
            Defines pseudorandom number generator
            </summary>
            <remarks> Core algorithm taken from http://xoshiro.di.unimi.it/xoshiro256starstar.c</remarks>
        
| M:Z0.XOrShift256.Define(System.UInt64[])          | 
            <summary>
            Constructs a randomizer using a specific seed
            </summary>
            <param name="seed">The seed upon which generation is predicated</param>
        
