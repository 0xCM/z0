Type        | Z0.gvec                                                               | Generic vectorized intrinsics
Method      | Z0.gvec.vadd``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes the component-wise sum of two vectors
Method      | Z0.gvec.vadd``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes the component-wise sum of two vectors
Method      | Z0.gvec.vadd``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)                | Computes the component-wise sum of two vectors
Method      | Z0.gvec.vadd``1(System.Runtime.Intrinsics.Vector128{``0},``0)         | Adds a constant value to each source vector component
Method      | Z0.gvec.vadd``1(System.Runtime.Intrinsics.Vector256{``0},``0)         | Adds a constant value to each vector component
Method      | Z0.gvec.vadd``1(Z0.Vector512{``0},``0)                                | Adds a constant value to each source vector component
Method      | Z0.gvec.csa``1(``0,``0,``0,``0@,``0@)                                 | Implements a carry-save adder that deposits the bitwise sum of three input scalars into two output scalars
Method      | Z0.gvec.vcsa``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Implements a carry-save adder that deposits the bitwise sum of three input vectors into two output vectors
Method      | Z0.gvec.vdec``1(System.Runtime.Intrinsics.Vector128{``0})             | Decrements each component by unit value
Method      | Z0.gvec.vdec``1(System.Runtime.Intrinsics.Vector256{``0})             | Decrements each component by unit value
Method      | Z0.gvec.vdec``1(Z0.N128,``0)                                          | Creates a 128-bit vector with components that decrease by unit step from an initial value
Method      | Z0.gvec.vdec``1(Z0.N256,``0)                                          | Creates a 256-bit vector with components that decrease by unit step from an initial value
Method      | Z0.gvec.vinc``1(System.Runtime.Intrinsics.Vector128{``0})             | Increments each component by unit value
Method      | Z0.gvec.vinc``1(System.Runtime.Intrinsics.Vector256{``0})             | Increments each component by unit value
Method      | Z0.gvec.vinc``1(Z0.N128,``0)                                          | Creates a 128-bit vector with components that increase by unit step from an initial value
Method      | Z0.gvec.vinc``1(Z0.N256,``0)                                          | Creates a 256-bit vector with components that increase by unit step from an initial value
Method      | Z0.gvec.vinc``1(Z0.W512,``0)                                          | Creates a 256-bit vector with components that increase by unit step from an initial value
Method      | Z0.gvec.vones``1(Z0.W128,``0)                                         | Creates a 128-bit vector with all bits enabled
Method      | Z0.gvec.vones``1(Z0.W256,``0)                                         | Creates a 256-bit vector with all bits enabled
Method      | Z0.gvec.vones``1(Z0.W512,``0)                                         | Creates a 512-bit vector with all bits enabled
Method      | Z0.gvec.vsub``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes the component-wise difference between two vectors
Method      | Z0.gvec.vsub``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes the component-wise difference between two vectors
Method      | Z0.gvec.vsub``1(System.Runtime.Intrinsics.Vector128{``0},``0)         | Subtracts a constant value from each vector component
Method      | Z0.gvec.vsub``1(``0,System.Runtime.Intrinsics.Vector128{``0})         | Subtracts each vector component from a constant value
Method      | Z0.gvec.vsub``1(System.Runtime.Intrinsics.Vector256{``0},``0)         | Subtracts a constant value from each vector component
Method      | Z0.gvec.vsub``1(``0,System.Runtime.Intrinsics.Vector256{``0})         | Subtracts each vector component from a constant value
Method      | Z0.gvec.valignr``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Byte)| 
Method      | Z0.gvec.valignr``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Byte)| 
Method      | Z0.gvec.vbroadcast``2(Z0.N128,``0,``1)                                | Expands a bit-level S-pattern to a vector-level T-pattern
Method      | Z0.gvec.vbroadcast``2(Z0.N256,``0,``1)                                | Expands a bit-level S-pattern to a vector-level T-pattern
Method      | Z0.gvec.broadcast``2(``0,``1,Z0.Block128{``1}@)                       | Expands a bit-level S-pattern to a block-level T-pattern
Method      | Z0.gvec.broadcast``2(``0,``1,Z0.Block256{``1}@)                       | Expands a bit-level S-pattern to a block-level T-pattern
Method      | Z0.gvec.broadcast``2(``0,``1)                                         | Broadcasts an S-cell over a T-cell
Method      | Z0.gvec.vbyteswap``1(System.Runtime.Intrinsics.Vector128{``0})        | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.gvec.vbyteswap``1(System.Runtime.Intrinsics.Vector256{``0})        | Effects the reversal of the byte-level representation of each component in the source vector
Method      | Z0.gvec.vhi``1(System.Runtime.Intrinsics.Vector128{``0})              | Moves the hi 64 bits of the source vector the the lo 64 bits of a target vector
Method      | Z0.gvec.vhi``1(System.Runtime.Intrinsics.Vector256{``0})              | Extracts hi 128-bit lane of the source vector
Method      | Z0.gvec.vhi``1(System.Runtime.Intrinsics.Vector256{``0},System.UInt64@,System.UInt64@)| Extracts the hi 128-bit lane of the source vector to scalar targets
Method      | Z0.gvec.vhi``1(System.Runtime.Intrinsics.Vector256{``0},Z0.Pair{System.UInt64}@)| Extracts the hi 128-bit lane of the source vector to a pair
Method      | Z0.gvec.vhi``1(Z0.Vector512{``0})                                     | Extracts the upper 256-bits from the source vector
Method      | Z0.gvec.vhi``1(Z0.Vector1024{``0})                                    | Extracts the lower 256-bits from the source vector
Method      | Z0.gvec.vinsert``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.gvec.vinsert``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector256{``0},Z0.BinaryDigit)| Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.gvec.vlo``1(System.Runtime.Intrinsics.Vector128{``0})              | Creates a scalar vector from the lower 64 bits of the source vector
Method      | Z0.gvec.vlo``1(System.Runtime.Intrinsics.Vector256{``0})              | Extracts the lo 128-bit lane of the source vector
Method      | Z0.gvec.vlo``1(System.Runtime.Intrinsics.Vector256{``0},System.UInt64@,System.UInt64@)| Extracts the lo 128-bit lane of the source vector to scalar targets
Method      | Z0.gvec.vlo``1(System.Runtime.Intrinsics.Vector256{``0},Z0.Pair{System.UInt64}@)| Extracts the lo 128-bit lane of the source vector to a pair
Method      | Z0.gvec.vlo``1(Z0.Vector512{``0})                                     | Extracts the lower 256-bits from the source vector
Method      | Z0.gvec.vlo``1(Z0.Vector1024{``0})                                    | Extracts the lower 256-bits from the source vector
Method      | Z0.gvec.vmakemask``1(System.UInt16)                                   | Distributes each bit of the source to the hi bit of each byte in a 128-bit target vector
Method      | Z0.gvec.vmakemask``1(System.UInt16,System.Byte)                       | Distributes each bit of the source to a specified bit of each byte in a 128-bit target vector
Method      | Z0.gvec.vmakemask``1(System.UInt32)                                   | Distributes each bit of the source to the hi bit of each byte a 256-bit target vector
Method      | Z0.gvec.vmakemask``1(System.UInt32,System.Byte)                       | Distributes each bit of the source to a specified bit of each byte in a 256-bit target vector
Method      | Z0.gvec.vmerge``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.gvec.vmerge``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| [A,B,C,D] x [E,F,G,H] -&gt; [A,E,B,F,C,G,D,H]
Method      | Z0.gvec.vmergehi``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| 
Method      | Z0.gvec.vmergehi``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| 
Method      | Z0.gvec.vmergelo``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.gvec.vmergelo``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| ([A,B,C,D], [E,F,G,H]) -&gt; [A,E,B,F]
Method      | Z0.gvec.vmovelo``1(System.Runtime.Intrinsics.Vector128{``0})          | src[0..n-1] -&gt; rm[n]:[0..n-1] where m = bitsize[T]            Extracts/moves the first vector cell to a non-vector register of commensurate size
Method      | Z0.gvec.vperm16x8``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{System.Byte})| Permutes 16 8-bit source vector segments
Method      | Z0.gvec.vperm16x8``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.Byte})| Applies independent 128-bit lane permutations over 16 8-bit source vector segments
Method      | Z0.gvec.vperm2x128``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Permutes 4 128-bit source lanes from 2 256-bit vectors as described by the perm spec
Method      | Z0.gvec.vperm2x128``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},Z0.Perm2x4)| Permutes 4 128-bit source lanes from 2 256-bit vectors as described by the perm spec
Method      | Z0.gvec.vperm4x64``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Permutes 4 64-bit source vector segments
Method      | Z0.gvec.vperm8x32``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.UInt32})| Applies a cross-lane permutation over 8 32-bit source vector segments
Method      | Z0.gvec.vputcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector128{``0})| Inserts a cell into the target at an index-identified location of a target vector
Method      | Z0.gvec.vputcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector256{``0})| Inserts a cell into the target at an index-identified location of a target vector
Method      | Z0.gvec.vreverse``1(System.Runtime.Intrinsics.Vector128{``0})         | Reverses the source vector components
Method      | Z0.gvec.vreverse``1(System.Runtime.Intrinsics.Vector256{``0})         | Reverses the source vector components
Method      | Z0.gvec.vshuf4x32``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Shuffles unsigned 32-bit source segments to/from arbitrary locations according to the shuffle spec
Method      | Z0.gvec.vshuf4x32``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Shuffles unsigned 32-bit source segments within 128-bit lanes according to the shuffle spec
Method      | Z0.gvec.vshuf16x8``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{System.Byte})| Shuffles unsigned 8-bit source segments according to the shuffle spec
Method      | Z0.gvec.vshuf16x8``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.Byte})| Shuffles unsigned 8-bit source segments within 128-bit lanes according to the shuffle spec
Method      | Z0.gvec.vshuf32x8``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.Byte})| Shuffles unsigned 8-bit source segments to/from arbitrary locations according to the shuffle spec
Method      | Z0.gvec.vswaphl``1(System.Runtime.Intrinsics.Vector128{``0})          | Swaps hi/lo 64 bit segments of the source vector
Method      | Z0.gvec.vswaphl``1(System.Runtime.Intrinsics.Vector256{``0})          | Swaps hi/lo 128-bit lanes of the source vector
Method      | Z0.gvec.vtakemask``1(System.Runtime.Intrinsics.Vector128{``0})        | _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm            Creates a 16-bit mask from the most significant bit of each byte in the source vector
Method      | Z0.gvec.vtakemask``1(System.Runtime.Intrinsics.Vector256{``0})        | int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm            Creates a 32-bit mask from the most significant bit of each byte in the source vector
Method      | Z0.gvec.vtakemask``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Creates a 16-bit mask from each byte in the source vector at a byte-relative bit index
Method      | Z0.gvec.vtakemask``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Creates a 32-bit mask from each byte in the source vector at a byte-relative bit index
Method      | Z0.gvec.vtakemask``1(System.Runtime.Intrinsics.Vector128{``0},Z0.HexDigit)| Creates a 16-bit mask from each byte in the source vector at a byte-relative bit index
Method      | Z0.gvec.vzerohi``1(System.Runtime.Intrinsics.Vector128{``0})          | __m128i _mm_move_epi64 (__m128i a) MOVQ xmm, xmm            Clears the high 64 bits of the source vector
Method      | Z0.gvec.vzerohi``1(System.Runtime.Intrinsics.Vector256{``0})          | Clears the high 128 bits of the source vector
Method      | Z0.gvec.vcimpl``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.gvec.vcimpl``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.gvec.vcimpl``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)              | Computes the converse implication, ~x | y for vectors x and y
Method      | Z0.gvec.vimpl``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.gvec.vimpl``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes the material implication, x | ~y for vectors x and y
Method      | Z0.gvec.vimpl``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)               | Computes the material implication, x | ~y for vectors x and y
Method      | Z0.gvec.vnor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes ~(x | y) for vectors x and y
Method      | Z0.gvec.vnor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes ~(x | y) for vectors x and y
Method      | Z0.gvec.vnor``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)                | Computes ~(x | y) for vectors x and y
Method      | Z0.gvec.vnot``1(System.Runtime.Intrinsics.Vector128{``0})             | Computes the bitwise complement ~x for a vector x
Method      | Z0.gvec.vnot``1(System.Runtime.Intrinsics.Vector256{``0})             | Computes the bitwise complement ~x for a vector x
Method      | Z0.gvec.vnot``1(Z0.Vector512{``0}@)                                   | Computes the bitwise complement ~x for a vector x
Method      | Z0.gvec.vor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes the bitwise or x | y for vectors x and y
Method      | Z0.gvec.vor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes the bitwise or x | y for vectors x and y
Method      | Z0.gvec.vor``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)                 | Computes the bitwise or x | y for vectors x and y
Method      | Z0.gvec.vpop``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes the population count of the content of 3 128-bit vectors
Method      | Z0.gvec.vpop``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes the population count of the content of 3 128-bit vectors
Method      | Z0.gvec.vselect``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Defines the ternary bitwise select operator over three vectors,            select(x, y, z) := or(and(x, y), and(not(x), z)) = or(and(x,y), notimply(x,z));
Method      | Z0.gvec.vselect``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Defines the ternary bitwise select operator over three vectors,            select(x, y, z) := or(and(x, y), and(not(x), z)) = or(and(x,y), notimply(x,z));
Method      | Z0.gvec.vselect``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@,Z0.Vector512{``0}@)| Defines the ternary bitwise select operator over three vectors,            select(x, y, z) := or(and(x, y), and(not(x), z)) = or(and(x,y), notimply(x,z));
Method      | Z0.gvec.vxnor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.gvec.vxnor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes ~ (x ^ y) for vectors x and y
Method      | Z0.gvec.vxnor``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)               | Computes ~ (x ^ y) for vectors x and y
Method      | Z0.gvec.vxor``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes x ^ y for vectors x and y
Method      | Z0.gvec.vxor``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes x ^ y for vectors x and y
Method      | Z0.gvec.vxor``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)                | Computes the bitwise xor
Method      | Z0.gvec.vxornot``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes x ^ ~y for vectors x and y
Method      | Z0.gvec.vxornot``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes x ^ ~y for vectors x and y
Method      | Z0.gvec.vbsll``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Applies a leftward shift over the full 128 vector bits at byte-level resolution
Method      | Z0.gvec.vbsll``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Applies a leftward shift to each 128-bit lane at byte-level resolution
Method      | Z0.gvec.vbsrl``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Applies a rigtward shift over the full 128 vector bits at byte-level resolution
Method      | Z0.gvec.vbsrl``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Applies a rightward shift to each 128-bit lane at byte-level resolution
Method      | Z0.gvec.vrotl``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Rotates each component the source vector leftwards by a constant amount
Method      | Z0.gvec.vrotl``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Rotates each component the source vector leftwards by a constant count
Method      | Z0.gvec.vrotlx``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Rotates the full 128 bits of a vector leftward at bit-level resolution
Method      | Z0.gvec.vrotlx``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Rotates each 128 bit lane vector leftward at bit-level resolution
Method      | Z0.gvec.vrotr``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Rotates each component in the source vector rightwards by a constant offset
Method      | Z0.gvec.vrotr``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Rotates each component in the source vector rightwards by a constant offset
Method      | Z0.gvec.vrotrx``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Rotates the full 128 bits of a vector rightward at bit-level resolution
Method      | Z0.gvec.vrotrx``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Rotates the each 128-bit lane rightward at bit-level resolution
Method      | Z0.gvec.vsll``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte) | Shifts each source vector component leftwards by a specified number of bits
Method      | Z0.gvec.vsll``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte) | Shifts each source vector component leftwards by a specified number of bits
Method      | Z0.gvec.vsllr``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| A register-based shift (as opposed to immediate-based) that shifts each source vector component rightwards             by an amount specified in the first component of the offset vector
Method      | Z0.gvec.vsllr``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| A register-based shift (as opposed to immediate-based) that shifts each source vector component rightwards             by an amount specified in the first component of the offset vector
Method      | Z0.gvec.vsllr``1(System.Runtime.Intrinsics.Vector128{``0},``0)        | Shifts each source vector component rightwards by a specified offset via the register-based shift-right instruction
Method      | Z0.gvec.vsllr``1(System.Runtime.Intrinsics.Vector256{``0},``0)        | Shifts each source vector component rightwards by a specified offset via the register-based shift-right instruction
Method      | Z0.gvec.vsllx``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Shifts the full 128 bits of a vector leftward at bit-level resolution
Method      | Z0.gvec.vsllx``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Shifts each 128 bit lane leftward at bit-level resolution
Method      | Z0.gvec.vsrlr``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| A register-based shift (as opposed to immediate-based) that shifts each source vector component rightwards             by an amount specified in the first component of the offset vector
Method      | Z0.gvec.vsrlr``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| A register-based shift (as opposed to immediate-based) that shifts each source vector component rightwards             by an amount specified in the first component of the offset vector
Method      | Z0.gvec.vsrlr``1(System.Runtime.Intrinsics.Vector128{``0},``0)        | Shifts each source vector component rightwards by a specified offset via the register-based shift-right instruction
Method      | Z0.gvec.vsrlr``1(System.Runtime.Intrinsics.Vector256{``0},``0)        | Shifts each source vector component rightwards by a specified offset via the register-based shift-right instruction
Method      | Z0.gvec.vsrlv``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..n-1 for vectors of length n
Method      | Z0.gvec.vsrlv``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Computes z[i] := x[i] &gt;&gt; s[i] for i = 0..n-1 vectors of length n
Method      | Z0.gvec.vsrlx``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Shifts the full 128 bits of a vector rightward at bit-level resolution
Method      | Z0.gvec.vsrlx``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Shifts each 128 bit lane rightward at bit-level resolution
Method      | Z0.gvec.vxorsr``1(System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Computes x^(x &gt;&gt; offset)
Method      | Z0.gvec.vxorsr``1(System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Computes x^(x &gt;&gt; offset)
Method      | Z0.gvec.vblend8x32``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Forms a vector z[i] := testbit(spec,i) ? x[i] : y[i], i = 0,...7
Method      | Z0.gvec.vblend8x32``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},Z0.Blend8x32)| Forms a vector z[i] := testbit(spec,i) ? x[i] : y[i], i = 0,...7
Method      | Z0.gvec.vblend``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{System.Byte})| Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...15
Method      | Z0.gvec.vblend``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.Byte})| Forms a vector z[i] = testbit(spec[i],7) ? x[i] : y[i] where i = 0,...31
Method      | Z0.gvec.vblend``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.UInt16)| Forms a vector z[i] = testbit(spec,i) ? x[i] : y[i] where i = 0,...15
Method      | Z0.gvec.vblend``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.UInt32)| Forms a vector z[i] = testbit(spec,i) ? x[i] : y[i] where i = 0,...31
Method      | Z0.gvec.vblendp``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Efects a "paired" or "permutation" blend that computes vectors            lo := vblendv(x,y,spec)            hi := vblendv(x,y,vnot(spec))            that, taken together, define a permutation on the source vector components
Method      | Z0.gvec.vblendp``1(Z0.Vector512{``0},System.Runtime.Intrinsics.Vector256{``0})| Efects a "paired" or "permutation" blend that computes vectors            lo := vblendv(x,y,spec)            hi := vblendv(x,y,vnot(spec))            that, taken together, define a permutation on the source vector components
Method      | Z0.gvec.vblendp``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Efects a "paired" or "permutation" blend that computes vectors            lo := vblendv(x,y,spec)            hi := vblendv(x,y,vnot(spec))            that, taken together, define a permutation on the source vector components
Method      | Z0.gvec.vblendp``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector128{``0})| Efects a "paired" or "permutation" blend that computes vectors            lo := vblendv(x,y,spec)            hi := vblendv(x,y,vnot(spec))            that, taken together, define a permutation on the source vector components
Method      | Z0.gvec.valt``1(Z0.W256,``0,``0)                                      | Creates a vector populated with component values that alternate between the first operand and the second
Method      | Z0.gvec.vblendv``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| 
Method      | Z0.gvec.vblendv``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| 
Method      | Z0.gvec.veq``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Compares corresponding components in each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all component bits are are disabled
Method      | Z0.gvec.veq``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Compares corresponding components in each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.gvec.veq``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)                 | Compares corresponding components in each vector for equality. For equal            components, the corresponding component the result vector has all bits             enabled; otherwise, all bits the component are disabled
Method      | Z0.gvec.vnonz``1(System.Runtime.Intrinsics.Vector128{``0})            | Returns true if at least one of the components of the source vector is nonzero, false otherwise
Method      | Z0.gvec.vnonz``1(System.Runtime.Intrinsics.Vector256{``0})            | Returns true if at least one of the components of the source vector is nonzero, false otherwise
Method      | Z0.gvec.vnonz``1(Z0.Vector512{``0}@)                                  | Returns true if at least one of the components of the source vector is nonzero, false otherwise
Method      | Z0.gvec.vsame``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Returns 1 if the left vector is identical to the right vector and 0 otherwise
Method      | Z0.gvec.vsame``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Returns 1 if the left vector is identical to the right vector and 0 otherwise
Method      | Z0.gvec.vsame``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)               | Returns 1 if the left vector is identical to the right vector and 0 otherwise
Method      | Z0.gvec.vtestc``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Returns 1 if all mask-identified source bits are all enabled and 0 otherwise
Method      | Z0.gvec.vtestc``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Returns 1 if all mask-identified source bits are all enabled and 0 otherwise
Method      | Z0.gvec.vtestc``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)              | Returns 1 if all mask-identified source bits are all enabled and 0 otherwise
Method      | Z0.gvec.vtestc``1(System.Runtime.Intrinsics.Vector128{``0})           | Returns 1 if all source bits are enabled and 0 otherwise
Method      | Z0.gvec.vtestc``1(System.Runtime.Intrinsics.Vector256{``0})           | Returns 1 if all source bits are enabled and 0 otherwise
Method      | Z0.gvec.vtestc``1(Z0.Vector512{``0})                                  | Returns 1 if all source bits are enabled and 0 otherwise
Method      | Z0.gvec.vtestz``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Returns 1 if all mask-identified source bits are disabled, 0 otherwise
Method      | Z0.gvec.vtestz``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Returns 1 if all mask-identified source bits are disabled, 0 otherwise
Method      | Z0.gvec.vtestz``1(Z0.Vector512{``0}@,Z0.Vector512{``0}@)              | Returns 1 if all mask-identified source bits are disabled, 0 otherwise
Method      | Z0.gvec.vmaskstore8``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{System.Byte},Z0.Block128{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.gvec.vmaskstore8``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.Byte},Z0.Block256{System.Byte}@)| Conditionally stores 8-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 8-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.gvec.vmaskstore32``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.Block128{System.UInt32}@)| Conditionally stores 32-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 32-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.gvec.vmaskstore32``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.Block256{System.UInt32}@)| Conditionally stores 32-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 32-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.gvec.vmaskstore64``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{System.UInt64},Z0.Block128{System.UInt64}@)| Conditionally stores 64-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 64-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Method      | Z0.gvec.vmaskstore64``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{System.UInt64},Z0.Block256{System.UInt64}@)| Conditionally stores 64-bit segments from the source vector to memory according to a vectorized mask            where the hi bit of each corresponding 64-bit segment determines whether the source data is written            If the hi bit is enabled, content is written, otherwise it is not
Property    | Z0.VLogix.UnaryBitLogicKinds                                          | Advertises the supported unary bitlogic operators
Property    | Z0.VLogix.BinaryBitLogicKinds                                         | Advertises the supported binary bitlogic operators
Property    | Z0.VLogix.TernaryBitLogicKinds                                        | Advertises the supported ternary bitlogic opeators
Property    | Z0.VLogix.ComparisonKinds                                             | Specifies the supported comparison operators
Method      | Z0.VLogix.lookup``1(Z0.N128,Z0.UnaryBitLogic)                         | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.lookup``1(Z0.N256,Z0.UnaryBitLogic)                         | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.lookup``1(Z0.N128,Z0.BitShiftKind)                          | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.lookup``1(Z0.N256,Z0.BitShiftKind)                          | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.eval``1(Z0.UnaryBitLogic,System.Runtime.Intrinsics.Vector128{``0})| Evaluates an identified unary operator over a supplied operand
Method      | Z0.VLogix.eval``1(Z0.BinaryComparisonKind,System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Evaluates a comparison operator over supplied operands
Method      | Z0.VLogix.eval``1(Z0.BitShiftKind,System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Evaluates an identified shift operator over supplied operands
Method      | Z0.VLogix.eval``1(Z0.BinaryLogicKind,System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Evaluates an identified binary bitwise operator over supplied operands
Method      | Z0.VLogix.lookup``1(Z0.N128,Z0.BinaryLogicKind)                       | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.eval``1(Z0.TernaryBitLogic,System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Evaluates an ternary operator over supplied operands
Method      | Z0.VLogix.lookup``1(Z0.N128,Z0.TernaryBitLogic)                       | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.eval``1(Z0.UnaryBitLogic,System.Runtime.Intrinsics.Vector256{``0})| Evaluates an identified unary operator over a supplied operand
Method      | Z0.VLogix.eval``1(Z0.BinaryComparisonKind,System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Evaluates a comparison operator over supplied operands
Method      | Z0.VLogix.eval``1(Z0.BitShiftKind,System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Evaluates an identified shift operator over supplied operands
Method      | Z0.VLogix.eval``1(Z0.BinaryLogicKind,System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Evaluates an identified binary operator over supplied operands
Method      | Z0.VLogix.eval``1(Z0.TernaryBitLogic,System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Evaluates an ternary operator over supplied operands
Method      | Z0.VLogix.lookup``1(Z0.N256,Z0.BinaryLogicKind)                       | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogix.lookup``1(Z0.N256,Z0.TernaryBitLogic)                       | Returns a kind-identified delegate if possible; otherwise, raises an exception
Property    | Z0.VLogixOps.UnaryBitLogicKinds                                       | Advertises the supported unary bitlogic operators
Property    | Z0.VLogixOps.BinaryBitLogicKinds                                      | Advertises the supported binary bitlogic operators
Property    | Z0.VLogixOps.TernaryBitLogicKinds                                     | Advertises the supported ternary bitlogic opeators
Property    | Z0.VLogixOps.ComparisonKinds                                          | Specifies the supported comparison operators
Method      | Z0.VLogixOps.eval``1(Z0.UnaryBitLogic,System.Runtime.Intrinsics.Vector128{``0})| Evaluates an identified unary operator over a supplied operand
Method      | Z0.VLogixOps.eval``1(Z0.UnaryBitLogic,System.Runtime.Intrinsics.Vector256{``0})| Evaluates an identified unary operator over a supplied operand
Method      | Z0.VLogixOps.eval``1(Z0.BinaryComparisonKind,System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Evaluates a comparison operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.BinaryComparisonKind,System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Evaluates a comparison operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.BinaryLogicKind,System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Evaluates an identified binary bitwise operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.BinaryLogicKind,System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Evaluates an identified binary operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.TernaryBitLogic,System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector128{``0})| Evaluates an ternary operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.TernaryBitLogic,System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector256{``0})| Evaluates an ternary operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.BitShiftKind,System.Runtime.Intrinsics.Vector128{``0},System.Byte)| Evaluates an identified shift operator over supplied operands
Method      | Z0.VLogixOps.eval``1(Z0.BitShiftKind,System.Runtime.Intrinsics.Vector256{``0},System.Byte)| Evaluates an identified shift operator over supplied operands
Method      | Z0.VLogixOps.lookup``1(Z0.N128,Z0.UnaryBitLogic)                      | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N256,Z0.UnaryBitLogic)                      | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N128,Z0.BitShiftKind)                       | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N256,Z0.BitShiftKind)                       | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N128,Z0.BinaryLogicKind)                    | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N256,Z0.BinaryLogicKind)                    | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N128,Z0.TernaryBitLogic)                    | Returns a kind-identified delegate if possible; otherwise, raises an exception
Method      | Z0.VLogixOps.lookup``1(Z0.N256,Z0.TernaryBitLogic)                    | Returns a kind-identified delegate if possible; otherwise, raises an exception
