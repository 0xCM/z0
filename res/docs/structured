| T:Z0.Functional                                   | 
            <summary>
            Defines service provider implementation predicated on service factory and enclosure types
            </summary>
        
| F:Z0.Functional.HostTypes                         | 
            <summary>
            The types declared within the enclosure that define serviced api operations
            </summary>
        
| F:Z0.Functional.FactoryMethods                    | 
            <summary>
            The methods defined by the factory host that intantiate services reified by the host types
            </summary>
        
| P:Z0.Functional.FactoryHost                       | 
            <summary>
            The type that defines the service factory operations
            </summary>
        
| P:Z0.Functional.HostEnclosure                     | 
            <summary>
            The type into which api service refications are nested
            </summary>
        
| P:Z0.Functional.Z0#IFunctional#HostTypes          | 
            <summary>
            The types declared within the enclosure that define serviced api operations
            </summary>
        
| P:Z0.Functional.Z0#IFunctional#FactoryMethods     | 
            <summary>
            The methods defined by the factory host that intantiate services reified by the host types
            </summary>
        
| M:Z0.Functional.FactoryTypes(System.Reflection.Assembly)| 
            <summary>
            Searches an assembly for types that are attributed with the provider attribute
            </summary>
            <param name="src">The assembly to search</param>
        
| M:Z0.Functional.Factory(System.Type)              | 
            <summary>
            Creates a service provider reified by a specified type
            </summary>
            <param name="provider">The provider type</param>
        
| M:Z0.Functional.from(System.Type,System.Type)     | 
            <summary>
            Creates a provider from the service factory that defines operations to instantiate
            services and an enclosing type within which the service implementations are defined
            </summary>
            <param name="factory">The service factor</param>
            <param name="enclosure">The outer host type</param>
        
| M:Z0.Functional.from``2                           | 
            <summary>
            Creates a functional predicated on parametric factory and host enclosure types
            </summary>
            <typeparam name="F">The factory type</typeparam>
            <typeparam name="H">The host enclosure type</typeparam>
        
| M:Z0.Functional.function(System.Type)             | 
            <summary>
            Instantiates a service operation host
            </summary>
            <param name="host">The hosting type</param>
        
| T:Z0.Functional`1                                 | 
            <summary>
            Reifies a functional service factory that also serves as a host enclosure
            </summary>
            <typeparam name="F">The factory type</typeparam>
        
| T:Z0.Functional`2                                 | 
            <summary>
            Reifies a functional service factory with an H-parametric enclosure
            </summary>
            <typeparam name="F">The factory type</typeparam>
            <typeparam name="H">The host enclosure type</typeparam>
        
| M:Z0.Structured.apply``2(``1,``1,``0)             | 
            <summary>
            Computes z := y |&gt; f x := f(x,y) for a binary operator f
            </summary>
            <param name="x">The left domain value</param>
            <param name="y">The right domain value</param>
            <param name="f">The binary operator</param>
            <typeparam name="F">The binary operator type</typeparam>
            <typeparam name="T">The operator domain type</typeparam>
        
| M:Z0.Structured.compose``3(``2,``0,``1)           | 
            <summary>
            Computes y := f(x,g(x)) for a unary operator g, and binary operator f
            </summary>
            <param name="x">The input value</param>
            <param name="f">A binary operator</param>
            <param name="g">A unary operator</param>
            <typeparam name="F">The binary operator type</typeparam>
            <typeparam name="G">The unary operator type</typeparam>
            <typeparam name="T">The type over which the operators are defined</typeparam>
        
| M:Z0.Structured.compose``3(``2,``2,``0,``1)       | 
            <summary>
            Computes y := f(g(x),g(y)) for a unary operator g, and binary operator f
            </summary>
            <param name="x">The input value</param>
            <param name="f">A binary operator</param>
            <param name="g">A unary operator</param>
            <typeparam name="F">The binary operator type</typeparam>
            <typeparam name="G">The unary operator type</typeparam>
            <typeparam name="T">The type over which the operators are defined</typeparam>
        
| M:Z0.Structured.pipe``2(``1,``0)                  | 
            <summary>
            Computes y := x |&gt; f = f(x) for a unary operator f
            </summary>
            <param name="x">The left domain value</param>
            <param name="y">The right domain value</param>
            <param name="f">The binary operator</param>
            <typeparam name="F">The binary operator type</typeparam>
            <typeparam name="T">The operator domain type</typeparam>
        
| M:Z0.Structured.pipe``3(``2,``0,``1)              | 
            <summary>
            Computes y := x |&gt; f |&gt; g := g(f(x)) for unary operators f and g
            </summary>
            <param name="x">The input value</param>
            <param name="f">A unary operator</param>
            <param name="g">A unary operator</param>
            <typeparam name="F">The type of the first unary operator</typeparam>
            <typeparam name="G">The type of the second unary operator</typeparam>
            <typeparam name="T">The operator domain type</typeparam>
        
| M:Z0.Structured.pipe``4(``3,``0,``1)              | 
            <summary>
            Computes y := x |&gt; f |&gt; g |&gt; h := h(g(f(x))) for unary operators f, g and h
            </summary>
            <param name="x">The input value</param>
            <param name="f">A unary operator</param>
            <param name="g">A unary operator</param>
            <typeparam name="F">The type of the first unary operator</typeparam>
            <typeparam name="G">The type of the second unary operator</typeparam>
            <typeparam name="T">The operator domain type</typeparam>
        
| T:Z0.IBinaryPred`1                                | 
            <summary>
            Defines trait for a vecorized binary predicate that supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The component type</typeparam>
        
| T:Z0.IBinaryPred`2                                | 
            <summary>
            Characterizes a natural binary predicate over non-primal operands
            </summary>
            <typeparam name="W">The natural type</typeparam>
            <typeparam name="V">The non-primal operand type</typeparam>
        
| T:Z0.IBinaryPred`3                                | 
            <summary>
            Characterizes a natural binary predicate over non-primal operands that support scalar application
            </summary>
            <typeparam name="W">The natural type</typeparam>
            <typeparam name="V">The non-primal type</typeparam>
            <typeparam name="T">The scalar type</typeparam>
        
| T:Z0.IBinaryPred128`1                             | 
            <summary>
            Characterizes a vectorized binary predicate over 128-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryPred256`1                             | 
            <summary>
            Characterizes a vectorized binary predicate over 256-bit operands
            </summary>
            <typeparam name="T">The component type</typeparam>
        
| T:Z0.IBinaryPred128D`1                            | 
            <summary>
            Characterizes a vectorized binary predicate over 128-bit operands that 
            also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryPred256D`1                            | 
            <summary>
            Characterizes a vectorized binary predicate over 128-bit operands that 
            also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IEmitter`1                                   | 
            <summary>
            Chracterizes an operation that produces a value that does not depend on arguments
            </summary>
            <typeparam name="A">The production type</typeparam>
        
| T:Z0.IFactory`4                                   | 
            <summary>
            Characterizes a function that produces a vector predicated on a source value
            </summary>
            <typeparam name="W">The vector width</typeparam>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="V">The target vector type</typeparam>
            <typeparam name="T">The target vector component type</typeparam>
        
| T:Z0.IFactory128`2                                | 
            <summary>
            Charcterizes an operator that produces a 128-bit target vector predicated on a source value
            </summary>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IFactory256`2                                | 
            <summary>
            Charcterizes an operator that produces a 256-bit target vector predicated on a source value
            </summary>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IFunctional                                  | 
            <summary>
            Characterizes a service that exposes serviced api operations
            </summary>
        
| P:Z0.IFunctional.HostTypes                        | 
            <summary>
            The known types that reify contracted operation services, potentially generic
            </summary>
        
| P:Z0.IFunctional.FactoryMethods                   | 
            <summary>
            The methods that instantiate services reified by the hosts
            </summary>
        
| P:Z0.IFunctional.HostCount                        | 
            <summary>
            Specifies the number of service hosts described by the catalog
            </summary>
        
| P:Z0.IFunctional.IsNonEmpty                       | 
            <summary>
            Specifies whether the catalog describes any service hosts
            </summary>
        
| T:Z0.IFunctional`1                                | 
            <summary>
            Characterizes an F-bound polymorphic functional service factory that also encloses service host types
            </summary>
            <typeparam name="F">The factory type</typeparam>
        
| T:Z0.IFunctional`2                                | 
            <summary>
            Characterizes an F-bound polymorphic functional service factory with an H-parametric enclosure
            </summary>
            <typeparam name="F">The factory type</typeparam>
            <typeparam name="H">The host enclosure type</typeparam>
        
| T:Z0.IMap`2                                       | 
            <summary>
            Characterizes a structural transformation function
            </summary>
            <typeparam name="A">The source domain type</typeparam>
            <typeparam name="B">The target domain type</typeparam>
        
| T:Z0.ISFParser`1                                  | 
            <summary>
            Characterizes an operator that materializes a primal value from a string
            </summary>
            <typeparam name="T">The primal value type</typeparam>
        
| T:Z0.IMap`6                                       | 
            <summary>
            Characterizes a vectorized transformation parameterized by operand source/target bit widths and source/target component types
            </summary>
            <typeparam name="W1">The bit-width type of the source operand</typeparam>
            <typeparam name="W2">The bit-width type of the target operand</typeparam>
            <typeparam name="V1">The source operand type</typeparam>
            <typeparam name="V2">The target operand type</typeparam>
            <typeparam name="T1">The source component type</typeparam>
            <typeparam name="T2">The target component type</typeparam>
        
| T:Z0.IMap128`2                                    | 
            <summary>
            Characterizes a 128-bit vectorized transformation parameterized by source/target component types
            </summary>
            <typeparam name="S">The source component type</typeparam>
            <typeparam name="T">The target component type</typeparam>
        
| T:Z0.IMap256`2                                    | 
            <summary>
            Characterizes a 256-bit vectorized transformation parameterized by source/target component types
            </summary>
            <typeparam name="S">The source component type</typeparam>
            <typeparam name="T">The target component type</typeparam>
        
| T:Z0.IMerge2x128x256`2                            | 
            <summary>
            Characterizes an operand-homogenous vectorized merge operator that carries 2 128-bit operands to a 256-bit target
            </summary>
            <typeparam name="S">The operand component type</typeparam>
            <typeparam name="T">The target component type</typeparam>
        
| T:Z0.IReducer256`1                                | 
            <summary>
            Characterizes a function that produces a 128-bit vector from a 256-bit vector
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IShiftOp128`1                                | 
            <summary>
            Characterizes a vectorized shift operator over 128-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IShiftOp256`1                                | 
            <summary>
            Characterizes a vectorized shift operator over 256-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IShiftOp128D`1                               | 
            <summary>
            Characterizes a vectorized shift operator over 128-bit operands that also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IShiftOp256D`1                               | 
            <summary>
            Characterizes a vectorized shift operator over 256-bit operands that also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.ISpanEmitter`1                               | 
            <summary>
            Characterizes an emitter that shoots out spans
            </summary>
            <typeparam name="T">The span element type</typeparam>
        
| T:Z0.ISpanLoader`2                                | 
            <summary>
            Characterizes an operation that accepts a source span and produces a derived target vector
            </summary>
            <typeparam name="W">The target vector width</typeparam>
            <typeparam name="S">The span source cell type</typeparam>
            <typeparam name="V">The target vector type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.ISpanMap`2                                   | 
            <summary>
            Characterizes a structural transformation function defined over parametric spans
            </summary>
            <typeparam name="A">The source span cell type</typeparam>
            <typeparam name="B">The target span cell type</typeparam>
        
| T:Z0.IUnarySpanOp`1                               | 
            <summary>
            Characterizes a structural function that accepts sourc span and 
            target spans defined over cells of common type
            </summary>
            <typeparam name="W">The cell width</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.IBinarySpanOp`1                              | 
            <summary>
            Characterizes a function that accepts two source spans and a target span over a common element type
            </summary>
            <typeparam name="T">The span element type</typeparam>
        
| T:Z0.ITernarySpanOp`1                             | 
            <summary>
            Characterizes a structural function that accepts two source spans and a 
            target span defined over cells of common type
            </summary>
            <typeparam name="T">The span element type</typeparam>
        
| T:Z0.IUnarySpanPred`1                             | 
            <summary>
            Characterizes a function that accepts two source spans and a target span of bits
            </summary>
            <typeparam name="T">The span element type</typeparam>
        
| T:Z0.IBinarySpanPred`1                            | 
            <summary>
            Characterizes a function that accepts two source spans and a target span of bits
            </summary>
            <typeparam name="T">The span element type</typeparam>
        
| T:Z0.ITernarySpanPred`1                           | 
            <summary>
            Characterizes a function that accepts three source spans and a target span of bits
            </summary>
            <typeparam name="T">The span element type</typeparam>
        
| T:Z0.ISpanShift                                   | 
            <summary>
            Characterizes an operator that applies a bitwise shift or rotation to elements in a source span
            </summary>
        
| T:Z0.ISpanShift`1                                 | 
            <summary>
            Characterizes a span operator that shifts each source element by the same amount
            </summary>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.IVarSpanShift`1                              | 
            <summary>
            Characterizes a span operator that shifts each source element by an amount secified in a corresponding count span
            </summary>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.ITernaryOp`1                                 | 
            <summary>
            Characterizes a structural ternary operator
            </summary>
            <typeparam name="A">The operand type</typeparam>
        
| T:Z0.ITernaryOp128`1                              | 
            <summary>
            Characterizes a vectorized 128-bit ternary operator
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.ITernaryOp256`1                              | 
            <summary>
            Characterizes a vectorized 256-bit ternary operator
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.ITernaryOp128D`1                             | 
            <summary>
            Characterizes a vectorized 128-bit ternary operator that also supports evaluation via scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.ITernaryOp256D`1                             | 
            <summary>
            Characterizes a vectorized 256-bit ternary operator that also supports evaluation via scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8Op`1                               | 
            <summary>
            Characterizes a binary function F:A -&gt; byte -&gt; A that accepts an 8-bit immediate value in the second parameter. 
            </summary>
            <typeparam name="A">The operand type</typeparam>
            <remarks>
            Immediates are constant values, embedded directly in an instruction. So, given such a function
            when closed over a constant value, it effectively becomes a unary operator. This observation
            justifies the contract name
            </remarks>
        
| T:Z0.IUnaryImm8x2Op`1                             | 
            <summary>
            Characterizes a ternary function F:A -&gt; byte -&gt; byte -&gt; A that accepts 8-bit 
            immediate values in the second and third parameters. 
            </summary>
            <typeparam name="A">The operand type</typeparam>
        
| T:Z0.IUnaryImm8Op`3                               | 
            <summary>
            Characterizes a unary vectorized operator that accepts an 8-bit immediate
            </summary>
            <typeparam name="W">The bit-width type</typeparam>
            <typeparam name="V">The operand type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8Op128`1                            | 
            <summary>
            Characterizes a vectorized unary operator over 128-bit operands that acepts an 8-bit immediate
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8Op256`1                            | 
            <summary>
            Characterizes a vectorized unary operator over 256-bit operands that acepts an 8-bit immediate
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryScalarImm8Op128`2                      | 
            <summary>
            Characterizes a unary function that accepts a 128-bit vector and an 8-bit immediate and returns a scalar value
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.IUnaryScalarImm8Op256`2                      | 
            <summary>
            Characterizes a unary function that accepts a 256-bit vector argument along with an 8-bit immediate and returns a scalar value
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.IUnaryImm8x2Op`3                             | 
            <summary>
            Characterizes a unary vectorized operator that accepts two 8-bit immediates
            </summary>
            <typeparam name="W">The bit-width type</typeparam>
            <typeparam name="V">The operand type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8x2Op128`1                          | 
            <summary>
            Characterizes a vectorized unary operator over 128-bit operands that acepts two 8-bit immediates
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8x2Op256`1                          | 
            <summary>
            Characterizes a vectorized unary operator over 256-bit operands that acepts two 8-bit immediates
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8x2Op128D`1                         | 
            <summary>
            Characterizes a vectorized unary operator over 128-bit operands that acepts two 8-bit immediates
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryImm8x2Op256D`1                         | 
            <summary>
            Characterizes a vectorized unary operator over 256-bit operands that acepts an 8-bit immediate
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryOp`1                                   | 
            <summary>
            Characterizes a unary operator
            </summary>
            <typeparam name="A">The operand type</typeparam>
        
| T:Z0.IUnaryOp128`1                                | 
            <summary>
            Characterizes a vectorized unary operator over 128-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryOp256`1                                | 
            <summary>
            Characterizes a vectorized unary operator over 256-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryOp128D`1                               | 
            <summary>
            Characterizes a vectorized unary operator over 128-bit operands that also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryOp256D`1                               | 
            <summary>
            Characterizes a vectorized unary operator over 256-bit operands also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryPred`1                                 | 
            <summary>
            Defines trait for a vecorized unary predicate that supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The component type</typeparam>
        
| T:Z0.IUnaryPred128`1                              | 
            <summary>
            Characterizes a vectorized unary predicate over 128-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryPred256`1                              | 
            <summary>
            Characterizes a vectorized unary predicate over 256-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryPred128D`1                             | 
            <summary>
            Characterizes a vectorized unary predicate over 128-bit operands that also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IUnaryPred256D`1                             | 
            <summary>
            Characterizes a vectorized unary predicate over 128-bit operands that also supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryImm8Op128`1                           | 
            <summary>
            Characterizes a vectorized binary operator over 128-bit operands that accepts an 8-bit immediate
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryImm8Op256`1                           | 
            <summary>
            Characterizes a vectorized binary operator over 256-bit operands that accepts an 8-bit immediate
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryImm8Op512`1                           | 
            <summary>
            Characterizes a vectorized binary operator over 256-bit operands that accepts an 8-bit immediate
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryOp128`1                               | 
            <summary>
            Characterizes a vectorized binary operator over 128-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryOp256`1                               | 
            <summary>
            Characterizes a vectorized binary operator over 256-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryOp512`1                               | 
            <summary>
            Characterizes a vectorized binary operator over 256-bit operands
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryOp128D`1                              | 
            <summary>
            Characterizes a vectorized binary operator over 128-bit operands that is accompanied by componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryOp256D`1                              | 
            <summary>
            Characterizes a vectorized binary operator over 256-bit operands that is accompanied by componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IBinaryOp512D`1                              | 
            <summary>
            Characterizes a vectorized binary operator over 256-bit operands that is accompanied by componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IVUnaryScalarFunc`2                          | 
            <summary>
            Defines trait for a vecorized unary scalar funnction that supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IVBinaryScalarFunc`2                         | 
            <summary>
            Defines trait for a vecorized binary scalar funnction that supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IVTernaryScalarFunc`2                        | 
            <summary>
            Defines trait for a vecorized binary scalar funnction that supports componentwise decomposition/evaluation
            </summary>
            <typeparam name="T">The vector component type</typeparam>
        
| T:Z0.IVScalarFunc`4                               | 
            <summary>
            Characterizes a unary function that accepts a vector argument and returns a scalar value
            </summary>
            <typeparam name="W">The bit width type</typeparam>
            <typeparam name="V">The vector type</typeparam>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.IVScalarFunc`7                               | 
            <summary>
            Characterizes a binary function that accepts two vector arguments and returns a scalar value
            </summary>
            <typeparam name="W1">The bit width type of the first vector</typeparam>
            <typeparam name="W2">The bit width type of the second vector</typeparam>
            <typeparam name="V1">The type of the first vector</typeparam>
            <typeparam name="V2">The type of the second vector</typeparam>
            <typeparam name="T1">The component type of the first vector</typeparam>
            <typeparam name="T2">The component type of the second vector</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.IVScalarFunc`10                              | 
            <summary>
            Characterizes a ternary function that accepts three vector arguments and returns a scalar value
            </summary>
            <typeparam name="W1">The bit width type of the first vector</typeparam>
            <typeparam name="W2">The bit width type of the second vector</typeparam>
            <typeparam name="W3">The bit width type of the second vector</typeparam>
            <typeparam name="V1">The type of the first vector</typeparam>
            <typeparam name="V2">The type of the second vector</typeparam>
            <typeparam name="V3">The type of the third vector</typeparam>
            <typeparam name="T1">The component type of the first vector</typeparam>
            <typeparam name="T2">The component type of the second vector</typeparam>
            <typeparam name="T3">The component type of the third vector</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.IVUnaryScalarFunc128`2                       | 
            <summary>
            Characterizes a unary function that accepts a 128-bit vector argument and returns a scalar value
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.ISVBinaryScalar128D`2                        | 
            <summary>
            Characterizes a binary function that accepts homogenous 128-bit vector arguments and returns a scalar value
            that supports scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.ISVTernaryScalar128D`2                       | 
            <summary>
            Characterizes a ternary function that accepts homogenous 128-bit vector arguments and returns a scalar value
            that supports scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.ISVUnaryScalarFunc256`2                      | 
            <summary>
            Characterizes a unary function that accepts a 256-bit vector argument and returns a scalar value
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.ISVUnaryScalarFunc256D`2                     | 
            <summary>
            Characterizes a unary function that accepts a 256-bit vector argument and returns a scalar value
            that supports scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.ISVBinaryScalarFunc256D`2                    | 
            <summary>
            Characterizes a binary function that accepts homogenous 256-bit vector arguments and returns a scalar value
            that supports scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.ISVTernaryScalarFunc256D`2                   | 
            <summary>
            Characterizes a ternary function that accepts homogenous 256-bit vector arguments that returns a scalar value 
            that supports scalar decomposition
            </summary>
            <typeparam name="T">The vector component type</typeparam>
            <typeparam name="K">The scalar result type</typeparam>
        
| T:Z0.Surrogates                                   | 
            <summary>
            Defines surrogate api - a facility for defining structural functions over delegates
            </summary>
        
| T:Z0.Surrogates.Emitter`1                         | 
            <summary>
            Captures a delegate that is exposed as an emitter
            </summary>
        
| T:Z0.Surrogates.SpanEmitter`1                     | 
            <summary>
            Captures a delegate that is exposed as an emitter
            </summary>
        
| M:Z0.Surrogates.emitter``1(Z0.Emitter{``0},System.String,``0)| 
            <summary>
            Defines a delegate-predicated structural emitter
            </summary>
            <param name="f">The source delegate</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.unary``1(Z0.UnaryOp{``0},System.String,``0)| 
            <summary>
            Defines a delegate-predicated structural operator
            </summary>
            <param name="f">The source delegate</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.binary``1(Z0.BinaryOp{``0},System.String,``0)| 
            <summary>
            Defines a delegate-predicated structural operator
            </summary>
            <param name="f">The source delegate</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.ternary``1(Z0.TernaryOp{``0},System.String,``0)| 
            <summary>
            Defines a delegate-predicated structural operator
            </summary>
            <param name="f">The source delegate</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.predicate``1(Z0.UnaryPredicate{``0},System.String,``0)| 
            <summary>
            Defines a delegate-predicated structural predicate
            </summary>
            <param name="f">The source delegate</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.predicate``1(Z0.BinaryPredicate{``0},System.String,``0)| 
            <summary>
            Defines a delegate-predicated structural predicate
            </summary>
            <param name="f">The source delegate</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.emitter``1(Z0.Emitter{``0},Z0.OpIdentity,``0)| 
            <summary>
            Defines an identified structural emitter predicated on a delegate
            </summary>
            <param name="f">The source delegate</param>
            <param name="id">The sfunc identity</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The emission type</typeparam>
        
| M:Z0.Surrogates.unary``1(Z0.UnaryOp{``0},Z0.OpIdentity,``0)| 
            <summary>
            Defines a delegate-predicated structural operator with identity
            </summary>
            <param name="f">The source delegate</param>
            <param name="id">The sfunc identity</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.binary``1(Z0.BinaryOp{``0},Z0.OpIdentity,``0)| 
            <summary>
            Defines a delegate-predicated structural operator with identity
            </summary>
            <param name="f">The source delegate</param>
            <param name="id">The sfunc identity</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.ternary``1(Z0.TernaryOp{``0},Z0.OpIdentity,``0)| 
            <summary>
            Defines a delegate-predicated structural operator with identity
            </summary>
            <param name="f">The source delegate</param>
            <param name="id">The sfunc identity</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.predicate``1(Z0.UnaryPredicate{``0},Z0.OpIdentity,``0)| 
            <summary>
            Defines a delegate-predicated structural predicate with identity
            </summary>
            <param name="f">The source delegate</param>
            <param name="id">The sfunc identity</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Surrogates.predicate``1(Z0.BinaryPredicate{``0},Z0.OpIdentity,``0)| 
            <summary>
            Defines a delegate-predicated structural predicate with identity
            </summary>
            <param name="f">The source delegate</param>
            <param name="id">The sfunc identity</param>
            <param name="t">An operand type representative to aid type inference</param>
            <typeparam name="T">The operand type</typeparam>
        
