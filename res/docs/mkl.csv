Method      | Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single})| Allocates and computes a matrix X = AB of natural dimension MxN
Method      | Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double})| Allocates and computes a matrix X = AB of natural dimension MxN
Method      | Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single},Z0.Matrix256{``0,``2,System.Single}@)| Computes the matrix product X = AB
Method      | Z0.MatrixOps.Mul``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double},Z0.Matrix256{``0,``2,System.Double}@)| Computes the matrix product X = AB
Method      | Z0.MatrixOps.Mul``1(Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single}@)| Computes the product of square matrices of natural dimension
Method      | Z0.MatrixOps.Mul``1(Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double}@)| Computes the product of square matrices of natural dimension
Method      | Z0.Mkl.mkl.asum(Z0.RowVector256{System.Single})                       | Computes the sum of the absolute value of each component
Method      | Z0.Mkl.mkl.asum(Z0.RowVector256{System.Double})                       | Computes the sum of the absolute value of each component
Method      | Z0.Mkl.mkl.axpy``1(System.Single,Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| Computes the vector Z = aX + Y
Method      | Z0.Mkl.mkl.axpy(System.Single,Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the vector Z = aX + Y
Method      | Z0.Mkl.mkl.axpy(System.Double,Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the vector Z = aX + Y
Method      | Z0.Mkl.mkl.dot``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single})| Computes the scalar product between two vectors of natural length
Method      | Z0.Mkl.mkl.dot``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double})| Computes the scalar product between two vectors of natural length
Method      | Z0.Mkl.mkl.dot(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single})| Computes the scalar product between two vectors that are hopefully of the same length
Method      | Z0.Mkl.mkl.dot(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double})| Computes the scalar product between two vectors that are hopefully of the same length
Method      | Z0.Mkl.mkl.dot(System.Span{System.Single},System.Span{System.Single}) | Computes the scalar product of the left and right operands
Method      | Z0.Mkl.mkl.dot(System.Span{System.Double},System.Span{System.Double}) | Computes the scalar product of the left and right operands
Method      | Z0.Mkl.mkl.gemm``4(Z0.Matrix256{``0,``1,``3},Z0.Matrix256{``1,``2,``3},Z0.Matrix256{``0,``2,``3}@)| Populates a target matrix with the product of the operands
Method      | Z0.Mkl.mkl.gemm``2(Z0.Matrix256{``0,``1},Z0.Matrix256{``0,``1},Z0.Matrix256{``0,``1}@)| Populates a target matrix with the product of the operands
Method      | Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single})| Allocates a target matrix and populates it with the product of the operands
Method      | Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double})| Allocates a target matrix and populates it with the product of the operands
Method      | Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``1,``2,System.Single},Z0.Matrix256{``0,``2,System.Single}@)| Populates a target matrix with the product of the operands
Method      | Z0.Mkl.mkl.gemm``3(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``1,``2,System.Double},Z0.Matrix256{``0,``2,System.Double}@)| Populates a target matrix with the product of the operands
Method      | Z0.Mkl.mkl.gemm``1(Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single},Z0.Matrix256{``0,System.Single}@)| Computes the product of square metrices X = AB
Method      | Z0.Mkl.mkl.gemm``1(Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double},Z0.Matrix256{``0,System.Double}@)| Computes the product of square metrices X = AB
Method      | Z0.Mkl.mkl.gemv``2(Z0.Matrix256{``0,``1,System.Double},Z0.Block256{``1,System.Double},Z0.Block256{``0,System.Double}@)| Computes the matrix-vector product y = A*x;
Method      | Z0.Mkl.mkl.gemv``2(Z0.Matrix256{``0,``1,System.Single},Z0.Block256{``1,System.Single},Z0.Block256{``0,System.Single}@)| Computes the matrix-vector product y = A*x;
Method      | Z0.Mkl.mkl.iamax(Z0.RowVector256{System.Single})                      | Returns the index of the component with maximal absolute value
Method      | Z0.Mkl.mkl.amax(Z0.RowVector256{System.Single})                       | Returns the value of the component with maximal absolute value
Method      | Z0.Mkl.mkl.iamax(Z0.RowVector256{System.Double})                      | Returns the index of the component with maximal absolute value
Method      | Z0.Mkl.mkl.amax(Z0.RowVector256{System.Double})                       | Returns the value of the component with maximal absolute value
Method      | Z0.Mkl.mkl.iamin(Z0.RowVector256{System.Single})                      | Returns the index of the component with maximal absolute value
Method      | Z0.Mkl.mkl.amin(Z0.RowVector256{System.Single})                       | Returns the value of the component with minimal absolute value
Method      | Z0.Mkl.mkl.iamin(Z0.RowVector256{System.Double})                      | Returns the index of the component with minimal absolute value
Method      | Z0.Mkl.mkl.amin(Z0.RowVector256{System.Double})                       | Returns the value of the component with minimal absolute value
Method      | Z0.Mkl.mkl.norm(Z0.RowVector256{System.Single})                       | Computes the Euclidean norm of the source vector
Method      | Z0.Mkl.mkl.norm(Z0.RowVector256{System.Double})                       | Computes the Euclidean norm of the source vector
Method      | Z0.Mkl.mkl.norm(System.Span{Z0.ComplexF32})                           | Computes the Euclidean norm of the source vector
Method      | Z0.Mkl.mkl.norm(System.Span{Z0.ComplexF64})                           | Computes the Euclidean norm of the source vector
Method      | Z0.Mkl.mkl.scale(System.Single,Z0.RowVector256{System.Single})        | Computes x = ax, in-place
Method      | Z0.Mkl.mkl.scale(System.Single,Z0.RowVector256{System.Single}@,Z0.RowVector256{System.Single}@)| Computes y = ax, leaving x unmodified
Method      | Z0.Mkl.mkl.scale(System.Double,Z0.RowVector256{System.Double})        | Computes x = ax, in-place
Method      | Z0.Mkl.mkl.scale(System.Double,Z0.RowVector256{System.Double}@,Z0.RowVector256{System.Double}@)| Computes y = ax, leaving x unmodified
Method      | Z0.Mkl.mkl.getrf``2(Z0.Matrix256{``0,``1,System.Double},System.Span{System.Int32},Z0.Matrix256{``0,``1,System.Double}@)| Computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.
Method      | Z0.Mkl.mkl.getrf``1(Z0.Matrix256{``0,System.Double},System.Span{System.Int32},Z0.Matrix256{``0,System.Double}@)| Computes an LU factorization of an N-square matrix A using partial pivoting with row interchanges.
Method      | Z0.Mkl.mkl.potrf``1(Z0.Matrix256{``0,System.Double},Z0.TriangularKind)| Attempts to use the cholesky algorithm to factor a square matrix as either            A = L*Transpose(L)  or A = Transpose(U)*U according to whether the tk parameter            respectively specifies Lower or Upper triangulation.
Method      | Z0.Mkl.mkl.posdef``1(Z0.Matrix256{``0,System.Single})                 | Returns true if the matrix is positive-definite, false otherwise
Method      | Z0.Mkl.mkl.posdef``1(Z0.Matrix256{``0,System.Double})                 | Returns true if the matrix is positive-definite, false otherwise
Method      | Z0.Mkl.mkl.head``1(Z0.RowVector256{``0})                              | Returns a reference to the location of the first span element
Method      | Z0.Mkl.mkl.head``2(Z0.Block256{``0,``1})                              | Returns a reference to the location of the first \element
Method      | Z0.Mkl.mkl.head``2(Z0.Matrix256{``0,``1})                             | Returns a reference to the location of the first \element
Method      | Z0.Mkl.mkl.head``3(Z0.Matrix256{``0,``1,``2})                         | Returns a reference to the location of the first \element
Method      | Z0.Mkl.mkl.head``1(System.Span{``0})                                  | Returns a reference to the location of the first span element
Method      | Z0.Mkl.mkl.add(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.add(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.add``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.add``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double}@)| Computes dst[i] = lhs[i] + rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.sub(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.sub(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.sub``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.sub``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double}@)| Computes dst[i] = lhs[i] - rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mul(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mul(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mul``1(Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single},Z0.Block256{``0,System.Single}@)| Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mul``1(Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double},Z0.Block256{``0,System.Double}@)| Computes dst[i] = lhs[i] * rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.div(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = lhs[i] / rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.div(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = lhs[i] / rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mod(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = lhs[i] % rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mod(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = lhs[i] % rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.mod``2(Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``0,``1,System.Single},Z0.Matrix256{``0,``1,System.Single}@)| Computes X[i,j] = A[i,j] % B[i,j] for each row/col index i/j
Method      | Z0.Mkl.mkl.mod``2(Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``0,``1,System.Double},Z0.Matrix256{``0,``1,System.Double}@)| Computes X[i,j] = A[i,j] % B[i,j] for each row/col index i/j
Method      | Z0.Mkl.mkl.truncRem(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Truncates the source vector and deposits the result in trunc and the fractional part             that was removed when producing the truncation
Method      | Z0.Mkl.mkl.truncRem(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Truncates the source vector and deposits the result in trunc and the fractional part             that was removed when producing the truncation
Method      | Z0.Mkl.mkl.rem(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = remainder(lhs[i] / rhs[i]) for i = 0...n-1
Method      | Z0.Mkl.mkl.rem(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = remainder(lhs[i] / rhs[i]) for i = 0...n-1
Method      | Z0.Mkl.mkl.frac(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the fractional part of each component
Method      | Z0.Mkl.mkl.frac(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the fractional part of each component
Method      | Z0.Mkl.mkl.square(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = (src[i])^2 for i=0..n-1
Method      | Z0.Mkl.mkl.square(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = (src[i])^2 for i=0..n-1
Method      | Z0.Mkl.mkl.sqrt(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = (src[i])^(1/2) for i=0..n-1
Method      | Z0.Mkl.mkl.sqrt(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = (src[i])^(1/2) for i=0..n-1
Method      | Z0.Mkl.mkl.abs(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = |src[i]| for i=0..n-1
Method      | Z0.Mkl.mkl.abs(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = |src[i]| for i = 0...n-1
Method      | Z0.Mkl.mkl.min(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = min(a[i], b[i]) for i = 0...n-1
Method      | Z0.Mkl.mkl.min(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = min(a[i], b[i]) for i = 0...n-1
Method      | Z0.Mkl.mkl.max(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = max(a[i], b[i]) for i = 0...n-1
Method      | Z0.Mkl.mkl.max(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = max(a[i], b[i]) for i = 0...n-1
Method      | Z0.Mkl.mkl.maxAbs(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = max(|a[i]|, |b[i]|) for i = 0...n-1
Method      | Z0.Mkl.mkl.maxAbs(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = max(|a[i]|, |b[i]|) for i = 0...n-1
Method      | Z0.Mkl.mkl.minAbs(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = min(|a[i]|, |b[i]|) for i = 0...n-1
Method      | Z0.Mkl.mkl.minAbs(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = min(|a[i]|, |b[i]|) for i = 0...n-1
Method      | Z0.Mkl.mkl.next(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = src[i] + epsilon
Method      | Z0.Mkl.mkl.next(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = src[i] + epsilon
Method      | Z0.Mkl.mkl.round(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] =round(src[i]) for i=0..n-1 where "round" maps the input to the nearest integral value
Method      | Z0.Mkl.mkl.round(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] =round(src[i]) for i=0..n-1 where "round" maps the input to the nearest integral value
Method      | Z0.Mkl.mkl.round``2(Z0.Matrix256{``0,``1,System.Single}@)             | Rounds each element towards the nearest integral value
Method      | Z0.Mkl.mkl.round``2(Z0.Matrix256{``0,``1,System.Double}@)             | Rounds each element towards the nearest integral value
Method      | Z0.Mkl.mkl.trunc(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] =truncate(src[i]) for i=0..n-1 where "truncate" rounds the input value towards 0
Method      | Z0.Mkl.mkl.trunc(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] =truncate(src[i]) for i=0..n-1 where "truncate" rounds the input value towards 0
Method      | Z0.Mkl.mkl.trunc``2(Z0.Matrix256{``0,``1,System.Double}@)             | Rounds each element towards zero
Method      | Z0.Mkl.mkl.trunc``2(Z0.Matrix256{``0,``1,System.Single}@)             | Rounds each element towards zero
Method      | Z0.Mkl.mkl.floor(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] =floor(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.floor(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] =floor(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.ceil(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = ceil(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.ceil(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = ceil(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.recip(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = 1/src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.recip(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = 1/src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.pow(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = lhs[i]^rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.pow(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = lhs[i]^rhs[i] for i = 0...n-1
Method      | Z0.Mkl.mkl.pow(Z0.RowVector256{System.Single},System.Single,Z0.RowVector256{System.Single}@)| Computes dst[i] = src[i]^exp for i = 0...n-1
Method      | Z0.Mkl.mkl.pow(Z0.RowVector256{System.Double},System.Double,Z0.RowVector256{System.Double}@)| Computes dst[i] = src[i]^exp for i = 0...n-1
Method      | Z0.Mkl.mkl.exp(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = e^src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.exp(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = e^src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.exp2(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = 2^src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.exp2(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = 2^src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.exp10(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = 10^src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.exp10(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = 10^src[i] for i=0..n-1
Method      | Z0.Mkl.mkl.ln(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] =ln(src[i]) for i=0..n-1 where ln denotes the natural log
Method      | Z0.Mkl.mkl.ln(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] =ln(src[i]) for i=0..n-1 where ln denotes the natural log
Method      | Z0.Mkl.mkl.log2(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] =log2(src[i]) for i=0..n-1 where log2 denotes the base 2 log
Method      | Z0.Mkl.mkl.log2(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] =log2(src[i]) for i=0..n-1 where log2 denotes the base 2 log
Method      | Z0.Mkl.mkl.log10(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] =log10(src[i]) for i=0..n-1 where log10 denotes the base 10 log
Method      | Z0.Mkl.mkl.log10(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] =log10(src[i]) for i=0..n-1 where log10 denotes the base 10 log
Method      | Z0.Mkl.mkl.erf(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the error function dst[i] =erf(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erf(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the error function dst[i] =erf(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erfInv(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the inverse error function dst[i] =erfInv(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erfInv(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the inverse error function dst[i] =erfInv(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erfc(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the complementary error function dst[i] =erfc(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erfc(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the complementary error function dst[i] =erfc(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erfcInv(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the inverse complementary error function dst[i] =erfcInv(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.erfcInv(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the inverse complementary error function dst[i] =erfcInv(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.expInt(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the exponential integral function dst[i] = E(src[i]) for i=0..n-1 where            E(x) = ∫[x, ∞](e^(-t)/t)dt = ∫[1, ∞](e^(-xt)/t)dt
Method      | Z0.Mkl.mkl.expInt(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the exponential integral function dst[i] = E(src[i]) for i=0..n-1 where            E(x) = ∫[x, ∞](e^(-t)/t)dt = ∫[1, ∞](e^(-xt)/t)dt
Method      | Z0.Mkl.mkl.cdfNorm(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = cdfnorm(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.cdfNorm(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = cdfnorm(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.cdfNormInv(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = cdfnormInv(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.cdfNormInv(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes dst[i] = cdfnormInv(src[i]) for i=0..n-1
Method      | Z0.Mkl.mkl.gamma(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes the gamma function: dst[i] = gamma(src[i])
Method      | Z0.Mkl.mkl.gamma(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes the gamma function: dst[i] = gamma(src[i])
Method      | Z0.Mkl.mkl.lgamma(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes of natural logarithm of the absolute value of gamma function: dst[i] = lgamma(src[i])
Method      | Z0.Mkl.mkl.lgamma(Z0.RowVector256{System.Double},Z0.RowVector256{System.Double}@)| Computes of natural logarithm of the absolute value of gamma function: dst[i] = lgamma(src[i])
Method      | Z0.Mkl.mkl.hypot(Z0.RowVector256{System.Single},Z0.RowVector256{System.Single},Z0.RowVector256{System.Single}@)| Computes dst[i] = sqrt(a[i]^2 + b[i]^2)
Method      | Z0.Mkl.mklx.NewStream(Z0.Mkl.Brng,System.UInt32,System.Int32)         | Initializes a new VslStream for rng
Method      | Z0.Mkl.mklx.Brng(Z0.Mkl.VslStream)                                    | Gets the mkl brng identifier associated with a stream
Method      | Z0.Mkl.mklx.ToBrng(Z0.RngKind)                                        | Gets the intel brng identifier associated with system rng classifier
Method      | Z0.Mkl.mklx.ToRngKind(Z0.Mkl.Brng)                                    | Gets the system rng classifier associated with a mkl brng
Method      | Z0.Mkl.mklx.RngKind(Z0.Mkl.VslStream)                                 | Gets system rng classifier associated with a stream
Method      | Z0.Mkl.mklx.Sampler``1(Z0.Mkl.MklRng,Z0.IDistributionSpec{``0})       | Returns the sampler for a specified rng, data type and distribution spec
Method      | Z0.Mkl.mklx.UniformSampler``1(Z0.Mkl.MklRng,System.Nullable{Z0.UniformSpec{``0}})| Returns a uniform distribution sampler
Method      | Z0.Mkl.mklx.UniformBitsSampler``1(Z0.Mkl.MklRng,System.Nullable{Z0.UniformBitsSpec{``0}})| Returns a uniform bits distribution sampler
Method      | Z0.Mkl.mklx.BernoulliSampler``1(Z0.Mkl.MklRng,Z0.BernoulliSpec{``0})  | Returns a Bernoulli distribution sampler
Method      | Z0.Mkl.mklx.GaussianSampler``1(Z0.Mkl.MklRng,Z0.GaussianSpec{``0})    | Returns a Gaussian distribution sampler
Type        | Z0.Mkl.mklu                                                           | mkl + u = Unsafe, Unsized, Unchecked and Unblocked
Field       | Z0.Mkl.Sampler`2.DistSpec                                             | Characterizes the distribution that will be used when sampling
Type        | Z0.Mkl.rng                                                            | Defines rng stream factor methods
Method      | Z0.Mkl.rng.mrg32K31(System.UInt32)                                    | Creates a stream predicated on VSL_BRNG_MRG32K3A, A combined multiple recursive generator with two components of order 3.
Method      | Z0.Mkl.rng.mcg31(System.UInt32)                                       | Creates a stream predicated on the VSL_BRNG_MCG31, A 31-bit multiplicative congruential generator.
Method      | Z0.Mkl.rng.mcg59(System.UInt32)                                       | Creates a stream predicated on VSL_BRNG_MCG59, A 59-bit multiplicative congruential generator.
Method      | Z0.Mkl.rng.entropy                                                    | Creates a stream predicated on VSL_BRNG_NONDETERM, A non-deterministic random number generator.
Method      | Z0.Mkl.rng.r250(System.UInt32)                                        | Creates a stream predicated on VSL_BRNG_R250, A generalized feedback shift register generator.
Method      | Z0.Mkl.rng.mt19937(System.UInt32)                                     | Creates a stream predicated on VSL_BRNG_MT19937, A Mersenne Twister pseudorandom number generator.
Method      | Z0.Mkl.rng.sfmt19937(System.UInt32)                                   | Creates a stream predicated on VSL_BRNG_SFMT19937, A SIMD-oriented Fast Mersenne Twister pseudorandom number generator.
Method      | Z0.Mkl.rng.wh(System.UInt32,System.Int32)                             | Creates a stream predicated on VSL_BRNG_WH, A set of 273 Wichmann-Hill combined multiplicative congruential generators.
Method      | Z0.Mkl.rng.mt2203(System.UInt32,System.Int32)                         | Creates a stream predicated on VSL_BRNG_MT2203, A set of 6024 Mersenne Twister pseudorandom number generators
Method      | Z0.Mkl.rng.philox(System.UInt32)                                      | Creates a stream predicated on VSL_BRNG_PHILOX4X32X10, A Philox4x32-10 counter-based pseudorandom number generator.
Method      | Z0.Mkl.rng.ars5(System.UInt32)                                        | Creates a stream predicated on VSL_BRNG_ARS5, an ARS-5 counter-based pseudorandom number generator that uses instructions from the AES-NI set
Method      | Z0.Mkl.rng.sobol(System.UInt32)                                       | Creates a stream predicated on VSL_BRNG_SOBOL, A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 40
Method      | Z0.Mkl.rng.niederr(System.UInt32)                                     | Creates a stream predicated on VSL_BRNG_NIEDERR, A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 318
Method      | Z0.Mkl.rng.capabilities(Z0.Mkl.Brng)                                  | Describes stream partitioning capabilies of an identifed generator
Type        | Z0.Mkl.sample                                                         | Defines distribution sample operations
Method      | Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Int32},System.Span{System.Int32})| Samples a discrete uniform distribution over specified range
Method      | Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,System.Int32,System.Int32,System.Span{System.Int32})| Samples a discrete uniform distribution over specified range
Method      | Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| Samples a continuous uniform distribution over specified range
Method      | Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Single},System.Span{System.Single})| Samples a continuous uniform distribution over specified range
Method      | Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Double},System.Span{System.Double})| Samples a continuous uniform distribution over specified range
Method      | Z0.Mkl.sample.uniform(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| Samples a continuous uniform distribution over specified range
Method      | Z0.Mkl.sample.bits(Z0.Mkl.MklRng,System.Span{System.UInt32})          | Samples uniformly distributed bits in 32-bit chunks.
Method      | Z0.Mkl.sample.bits(Z0.Mkl.MklRng,System.Span{System.UInt64})          | Samples uniformly distributed bits in 64-bit chunks.
Method      | Z0.Mkl.sample.cauchy(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| Samples a single-precision Cauchy distribution
Method      | Z0.Mkl.sample.cauchy(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| Samples a double-precision Cauchy distribution
Method      | Z0.Mkl.sample.geometric(Z0.Mkl.MklRng,System.Double,System.Span{System.Int32})| Samples a geometric distributions
Method      | Z0.Mkl.sample.bernoulli(Z0.Mkl.MklRng,System.Double,System.Span{System.Int32})| Samples a Bernoulli distribution
Method      | Z0.Mkl.sample.chi2(Z0.Mkl.MklRng,System.Int32,System.Span{System.Single})| Samples a single-precision chi2 distribution
Method      | Z0.Mkl.sample.chi2(Z0.Mkl.MklRng,System.Int32,System.Span{System.Double})| Samples a double-precision chi2 distribution
Method      | Z0.Mkl.sample.gaussian(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| Samples a single-precision Gaussian distribution
Method      | Z0.Mkl.sample.gaussian(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| Samples a double-precision Gaussian distribution
Method      | Z0.Mkl.sample.gamma(Z0.Mkl.MklRng,System.Single,System.Single,System.Single,System.Span{System.Single})| Samples a single-precision gamma distribution
Method      | Z0.Mkl.sample.gamma(Z0.Mkl.MklRng,System.Double,System.Double,System.Double,System.Span{System.Double})| Samples a double-precision gamma distribution
Method      | Z0.Mkl.sample.exp(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| Samples a single-precision exponential distribution
Method      | Z0.Mkl.sample.exp(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| Samples a double-precision exponential distribution
Method      | Z0.Mkl.sample.poisson(Z0.Mkl.MklRng,System.Double,System.Span{System.Int32})| Samples a poisson distribution
Method      | Z0.Mkl.sample.laplace(Z0.Mkl.MklRng,System.Single,System.Single,System.Span{System.Single})| Samples a single-precision Laplace distribution
Method      | Z0.Mkl.sample.laplace(Z0.Mkl.MklRng,System.Double,System.Double,System.Span{System.Double})| Samples a double-precision Laplace distribution
Type        | Z0.Mkl.samplers                                                       | Defines factory methods for creating distribution samplers
Method      | Z0.Mkl.samplers.bits32(Z0.Mkl.MklRng,System.Nullable{System.Int32})   | Creates a bitwise uniform 32-bit sampler
Method      | Z0.Mkl.samplers.bits64(Z0.Mkl.MklRng,System.Nullable{System.Int32})   | Creates a bitwise uniform 64-bit sampler
Method      | Z0.Mkl.samplers.bits(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt32},System.Nullable{System.Int32})| Creates 32-bit sampler of uninform bits
Method      | Z0.Mkl.samplers.bits(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt64},System.Nullable{System.Int32})| Creates 64-bit sampler of uninform bits
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Int32},System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit integers
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,System.Int32,System.Int32,System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit integers
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Single},System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| Creates a uniform sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.Interval{System.Double},System.Nullable{System.Int32})| Creates a uniform sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.UniformSpec{System.Int32},System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit integers
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.UniformSpec{System.Single},System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.uniform(Z0.Mkl.MklRng,Z0.UniformSpec{System.Double},System.Nullable{System.Int32})| Creates a uniform sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.bernoulli(Z0.Mkl.MklRng,System.Double,System.Nullable{System.Int32})| Creates a Bernoulli sampler
Method      | Z0.Mkl.samplers.bernoulli(Z0.Mkl.MklRng,Z0.BernoulliSpec{System.Int32},System.Nullable{System.Int32})| Creates a Bernoulli sampler
Method      | Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| Creates a single-precision Gaussian sampler
Method      | Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| Creates a double-precision Gaussian sampler
Method      | Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Single},System.Nullable{System.Int32})| Creates gaussian sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.gaussian(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Double},System.Nullable{System.Int32})| Creates gaussian sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.geometric(Z0.Mkl.MklRng,System.Double,System.Nullable{System.Int32})| Creates a geometric sampler
Method      | Z0.Mkl.samplers.geometric(Z0.Mkl.MklRng,Z0.GeometricSpec{System.Int32},System.Nullable{System.Int32})| Creates a geometric sampler
Method      | Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,System.Single,System.Single,System.Single,System.Nullable{System.Int32})| Creates gamma sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,System.Double,System.Double,System.Double,System.Nullable{System.Int32})| Creates gamma sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,Z0.GammaSpec{System.Single},System.Nullable{System.Int32})| Creates gamma sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.gamma(Z0.Mkl.MklRng,Z0.GammaSpec{System.Double},System.Nullable{System.Int32})| Creates gamma sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| Creates an exponential sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| Creates an exponential sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Single},System.Nullable{System.Int32})| Creates an exponential sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.exponential(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Double},System.Nullable{System.Int32})| Creates an exponential sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.poisson(Z0.Mkl.MklRng,System.Double,System.Nullable{System.Int32})| Creates a Poisson sampler
Method      | Z0.Mkl.samplers.chisquare(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Single},System.Nullable{System.Int32})| Creates a chi square sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.chisquare(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Double},System.Nullable{System.Int32})| Creates a chi square sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| Creates a Cauchy sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| Creates a Cauchy sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,Z0.CauchySpec{System.Single},System.Nullable{System.Int32})| Creates a Cauchy sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.cauchy(Z0.Mkl.MklRng,Z0.CauchySpec{System.Double},System.Nullable{System.Int32})| Creates a Cauchy sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,System.Single,System.Single,System.Nullable{System.Int32})| Creates a Laplace sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Single},System.Nullable{System.Int32})| Creates a Laplace sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| Creates a Laplace sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.laplace(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Double},System.Nullable{System.Int32})| Creates a Laplace sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformSpec{System.Int32},System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit integers
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformSpec{System.Single},System.Nullable{System.Int32})| Creates a uniform sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformSpec{System.Double},System.Nullable{System.Int32})| Creates a uniform sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt32},System.Nullable{System.Int32})| Creates 32-bit sampler of uninform bits
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.UniformBitsSpec{System.UInt64},System.Nullable{System.Int32})| Creates 64-bit sampler of uninform bits
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.BernoulliSpec{System.Int32},System.Nullable{System.Int32})| Creates a Bernoulli sampler
Method      | Z0.Mkl.samplers.spec(Z0.Mkl.MklRng,Z0.GeometricSpec{System.Int32},System.Nullable{System.Int32})| Creates a geometric sampler
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Single},System.Nullable{System.Int32})| Creates a chi square sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ChiSquareSpec{System.Double},System.Nullable{System.Int32})| Creates a chi square sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Single},System.Nullable{System.Int32})| Creates gaussian sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GaussianSpec{System.Double},System.Nullable{System.Int32})| Creates gaussian sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Single},System.Nullable{System.Int32})| Creates an exponential sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.ExponentialSpec{System.Double},System.Nullable{System.Int32})| Creates an exponential sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GammaSpec{System.Single},System.Nullable{System.Int32})| Creates gamma sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.GammaSpec{System.Double},System.Nullable{System.Int32})| Creates gamma sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.CauchySpec{System.Single},System.Nullable{System.Int32})| Creates a Cauchy sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,System.Double,System.Double,System.Nullable{System.Int32})| Creates a Cauchy sampler for 64-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Single},System.Nullable{System.Int32})| Creates a Laplace sampler for 32-bit floating point
Method      | Z0.Mkl.samplers.sampler(Z0.Mkl.MklRng,Z0.LaplaceSpec{System.Double},System.Nullable{System.Int32})| Creates a Laplace sampler for 64-bit floating point
Method      | Z0.Mkl.special.erf(System.Single)                                     | The error function
Method      | Z0.Mkl.special.erf(System.Double)                                     | The error function
Method      | Z0.Mkl.special.erfInv(System.Single)                                  | The inverse error function
Method      | Z0.Mkl.special.erfInv(System.Double)                                  | The inverse error function
Method      | Z0.Mkl.special.erfc(System.Single)                                    | The complementary error function
Method      | Z0.Mkl.special.erfc(System.Double)                                    | The complementary error function
Method      | Z0.Mkl.special.erfcInv(System.Single)                                 | The inverse complementary error function
Method      | Z0.Mkl.special.erfcInv(System.Double)                                 | The inverse complementary error function
Method      | Z0.Mkl.special.cdfNorm(System.Single)                                 | The cdf norm function
Method      | Z0.Mkl.special.cdfNorm(System.Double)                                 | The cdf norm function
Type        | Z0.Mkl.EigenResult`2                                                  | Encapsulates eigenvalues and possibly eigenvectors
Method      | Z0.Mkl.MklException.Define(System.String,System.String,System.String,System.Nullable{System.Int32})| Creates an MKL-specific exception
Method      | Z0.Mkl.MklException.Define(System.Int32,System.String,System.String,System.Nullable{System.Int32})| Creates an MKL-specific exception
Method      | Z0.Mkl.MklException.Throw``1(System.String,System.String,System.String,System.Nullable{System.Int32})| Creates and throws MKL-specific exception
Method      | Z0.Mkl.MklException.Throw(System.Int32,System.String,System.String,System.Nullable{System.Int32})| Creates and throws MKL-specific exception
Property    | Z0.Mkl.IVslSSTask`1.Samples                                           | Specifies the samples/observations over which computation will occur            in row-major order
Property    | Z0.Mkl.IVslSSTask`1.Dimension                                         | Specifies the Dimension of the observation vectors
Type        | Z0.Mkl.VslSSTask`1                                                    | Represents a summary statistics task
Field       | Z0.Mkl.VslSSTask`1.Samples                                            | Defines the observations/samples over which the task will compute
Field       | Z0.Mkl.VslSSTask`1.Weights                                            | Defines the weights applied to the sample vectors
Field       | Z0.Mkl.VslSSTask`1.Indices                                            | Specifies the indices of the vector components that will be processed
Method      | Z0.Mkl.VssOps.Mean(Z0.Observations{System.Single})                    | Finds the mean for each dimension
Method      | Z0.Mkl.VssOps.Mean(Z0.Observations{System.Double})                    | Finds the mean for each dimension
Method      | Z0.Mkl.VssOps.Variance(Z0.Observations{System.Double})                | Finds the mean for each dimension
Method      | Z0.Mkl.VssOps.Mean(Z0.Observations{System.Double},System.Double@)     | Calculates the mean
Method      | Z0.Mkl.VssOps.Sum(Z0.Observations{System.Single})                     | For each dimension, finds the sum
Method      | Z0.Mkl.VssOps.Sum(Z0.Observations{System.Double})                     | For each dimension, finds the sum
Method      | Z0.Mkl.VssOps.Min(Z0.Observations{System.Single})                     | For each dimension, finds the minimum sample value
Method      | Z0.Mkl.VssOps.Min(Z0.Observations{System.Double})                     | For each dimension, finds the minimum sample value
Method      | Z0.Mkl.VssOps.Max(Z0.Observations{System.Single})                     | For each dimension, finds the maximum sample value
Method      | Z0.Mkl.VssOps.Max(Z0.Observations{System.Double})                     | For each dimension, finds the maximum sample value
Method      | Z0.Mkl.VssOps.Extrema(Z0.Observations{System.Single})                 | For each dimension, finds the minimum and maxim sample value
Method      | Z0.Mkl.VssOps.Extrema(Z0.Observations{System.Double})                 | For each dimension, finds the minimum and maxim sample value
Method      | Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Single},Z0.Observations{System.Single})| Applies the radix sort method to order the components in each observation vector
Method      | Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Double},Z0.Observations{System.Double})| Applies the radix sort method to order the components in each observation vector
Method      | Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Single})               | Applies the radix sort method to order the components in each observation vector
Method      | Z0.Mkl.VssOps.RadixSort(Z0.Observations{System.Double})               | Applies the radix sort method to order the components in each observation vector
Type        | Z0.Mkl.VslStream                                                      | Wraps a pointer to a VSL stream
Method      | Z0.Mkl.CBLAS.cblas_sasum(System.Int32,System.Single@,System.Int32)    | Computes the sum of the absolute value of each component
Method      | Z0.Mkl.CBLAS.cblas_dasum(System.Int32,System.Double@,System.Int32)    | Computes the sum of the absolute value of each component
Method      | Z0.Mkl.CBLAS.cblas_scasum(System.Int32,Z0.ComplexF32@,System.Int32)   | Computes the sum of the absolute value of each real and imaginary part of each component
Method      | Z0.Mkl.CBLAS.cblas_dzasum(System.Int32,Z0.ComplexF64@,System.Int32)   | Computes the sum of the absolute value of each real and imaginary part of each component
Method      | Z0.Mkl.CBLAS.cblas_saxpy(System.Int32,System.Single,System.Single@,System.Int32,System.Single@,System.Int32)| Computes Y = aX + Y for a scalar a and vectors X, Y
Method      | Z0.Mkl.CBLAS.cblas_daxpy(System.Int32,System.Double,System.Double@,System.Int32,System.Double@,System.Int32)| Computes Y = aX + Y for a scalar a and vectors X, Y
Method      | Z0.Mkl.CBLAS.cblas_caxpy(System.Int32,Z0.ComplexF32@,Z0.ComplexF32@,System.Int32,Z0.ComplexF32@,System.Int32)| Computes Y = aX + Y for a scalar a and vectors X, Y
Method      | Z0.Mkl.CBLAS.cblas_zaxpy(System.Int32,Z0.ComplexF64@,Z0.ComplexF64@,System.Int32,Z0.ComplexF64@,System.Int32)| Computes Y = aX + Y for a scalar a and vectors X, Y
Method      | Z0.Mkl.CBLAS.cblas_sdot(System.Int32,System.Single@,System.Int32,System.Single@,System.Int32)| Computes the canonical dot product of two vectors
Method      | Z0.Mkl.CBLAS.cblas_ddot(System.Int32,System.Double@,System.Int32,System.Double@,System.Int32)| Computes the canonical dot product of two vectors
Method      | Z0.Mkl.CBLAS.cblas_dgemm(Z0.Mkl.BlasLayout,Z0.Mkl.BlasTrans,Z0.Mkl.BlasTrans,System.Int32,System.Int32,System.Int32,System.Double,System.Double@,System.Int32,System.Double@,System.Int32,System.Double,System.Double@,System.Int32)| Computes C = alpha*A*B + beta*C where alhpa and beta are scalars and A,B and C are matrices of compatible dimensions
Method      | Z0.Mkl.CBLAS.cblas_dgemv(Z0.Mkl.BlasLayout,Z0.Mkl.BlasTrans,System.Int32,System.Int32,System.Double,System.Double@,System.Int32,System.Double@,System.Int32,System.Double,System.Double@,System.Int32)| Computes  y = alpha*A*x + beta*y ;
Method      | Z0.Mkl.CBLAS.cblas_isamax(System.Int32,System.Single@,System.Int32)   | Finds the index of the vector component with maximum absoute value
Method      | Z0.Mkl.CBLAS.cblas_idamax(System.Int32,System.Double@,System.Int32)   | Finds the index of the vector component with maximum absoute value
Method      | Z0.Mkl.CBLAS.cblas_icamax(System.Int32,Z0.ComplexF32@,System.Int32)   | Finds the index of the complex vector component such that the sum of the            absolute value of the real and imaginary parts are maximial
Method      | Z0.Mkl.CBLAS.cblas_izamax(System.Int32,Z0.ComplexF64@,System.Int32)   | Finds the index of the complex vector component such that the sum of the            absolute value of the real and imaginary parts is maximial
Method      | Z0.Mkl.CBLAS.cblas_isamin(System.Int32,System.Single@,System.Int32)   | Finds the index of the vector component with minimal absoute value
Method      | Z0.Mkl.CBLAS.cblas_idamin(System.Int32,System.Double@,System.Int32)   | Finds the index of the vector component with minimal absoute value
Method      | Z0.Mkl.CBLAS.cblas_icamin(System.Int32,Z0.ComplexF32@,System.Int32)   | Finds the index of the complex vector component such that the sum of the            absolute value of the real and imaginary parts is minimal
Method      | Z0.Mkl.CBLAS.cblas_izamin(System.Int32,Z0.ComplexF64@,System.Int32)   | Finds the index of the complex vector component such that the sum of the            absolute value of the real and imaginary parts is minimal
Method      | Z0.Mkl.CBLAS.cblas_snrm2(System.Int32,System.Single@,System.Int32)    | Computes the Euclidean norm of the source vector
Method      | Z0.Mkl.CBLAS.cblas_dnrm2(System.Int32,System.Double@,System.Int32)    | Computes the Euclidean norm of the source vector
Method      | Z0.Mkl.LAPACK.LAPACKE_dgeev(Z0.Mkl.BlasLayout,System.Char,System.Char,System.Int32,System.Double@,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32,System.Double@,System.Int32)| For an n-square real nonsymmetric matrix A, computes the eigenvalues and, optionally,             the left and/or right eigenvectors. The right eigenvector v of A satisfies A*v = λ*v            where λ is its eigenvalue. The left eigenvector u of A satisfies u^H *A = λ*u H            where where u^H denotes the conjugate transpose of u. The computed eigenvectors are             normalized to have Euclidean norm equal to 1 and largest component real
Method      | Z0.Mkl.LAPACK.LAPACKE_sgetrf(Z0.Mkl.BlasLayout,System.Int32,System.Int32,System.Single@,System.Int32,System.Int32@)| Computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.
Method      | Z0.Mkl.LAPACK.LAPACKE_dgetrf(Z0.Mkl.BlasLayout,System.Int32,System.Int32,System.Double@,System.Int32,System.Int32@)| Computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.
Method      | Z0.Mkl.LAPACK.LAPACKE_dpotrf(Z0.Mkl.BlasLayout,System.Char,System.Int32,System.Double@,System.Int32)| Computes the Cholesky factorization of a symmetric, positive-definite matrix
Type        | Z0.Mkl.MklCodeAttribute                                               | Specifies the meaning of a numeric code where applied
Method      | Z0.Mkl.VmlImport.vsSqr(System.Int32,System.Single@,System.Single@)    | Computes the square of each component: r[i] = a[i]^2
Method      | Z0.Mkl.VmlImport.vdSqr(System.Int32,System.Double@,System.Double@)    | Computes the square of each component: r[i] = a[i]^2
Method      | Z0.Mkl.VmlImport.vsSqrt(System.Int32,System.Single@,System.Single@)   | Computes the square root of each component: r[i] = a[i]^0.5
Method      | Z0.Mkl.VmlImport.vdSqrt(System.Int32,System.Double@,System.Double@)   | Computes the square root of each component: r[i] = a[i]^0.5
Method      | Z0.Mkl.VmlImport.vsPow(System.Int32,System.Single@,System.Single@,System.Single@)| Computes r[i] = a[i]^b[i]
Method      | Z0.Mkl.VmlImport.vdPow(System.Int32,System.Double@,System.Double@,System.Double@)| Computes r[i] = a[i]^b[i]
Method      | Z0.Mkl.VSL.viRngUniform(System.Int32,System.IntPtr,System.Int32,System.Int32@,System.Int32,System.Int32)| Generates random 32-bit integers uniformly distributed over the interval [a, b).
Method      | Z0.Mkl.VSL.vsRngUniform(System.Int32,System.IntPtr,System.Int32,System.Single@,System.Single,System.Single)| Generates random 32-bit floating point values uniformly distributed over the interval [a, b).
Method      | Z0.Mkl.VSL.vdRngUniform(System.Int32,System.IntPtr,System.Int32,System.Double@,System.Double,System.Double)| Generates random 64-bit floating point values uniformly distributed over the interval [a, b).
Method      | Z0.Mkl.VSL.viRngUniformBits32(System.Int32,System.IntPtr,System.Int32,System.UInt32@)| Generates 32-bit integers with uniform bit distribution
Method      | Z0.Mkl.VSL.viRngUniformBits64(System.Int32,System.IntPtr,System.Int32,System.UInt64@)| Generates 64-bit integers with uniform bit distribution
Method      | Z0.Mkl.VSL.viRngBernoulli(System.Int32,System.IntPtr,System.Int32,System.Int32@,System.Double)| Generates integers from the set {0,1} that follow a Bernoulli distribution
Method      | Z0.Mkl.VSL.vsRngGamma(Z0.Mkl.VslGammaMethod,System.IntPtr,System.Int32,System.Single@,System.Single,System.Single,System.Single)| Samples a single-precision Gamma distribution
Method      | Z0.Mkl.VSL.vdRngGamma(Z0.Mkl.VslGammaMethod,System.IntPtr,System.Int32,System.Double@,System.Double,System.Double,System.Double)| Samples a double-precision Gamma distribution
Method      | Z0.Mkl.VSL.vsRngChiSquare(System.Int32,System.IntPtr,System.Int32,System.Single@,System.Int32)| Samples a single-precision Chi^2 distribution
Method      | Z0.Mkl.VSL.vdRngChiSquare(System.Int32,System.IntPtr,System.Int32,System.Double@,System.Int32)| Samples a double-precision Chi^2 distribution
Method      | Z0.Mkl.VSL.vdRngGaussianMV(Z0.Mkl.VslGaussianMVMethod,System.IntPtr,System.Int32,System.Double@,System.Int32,Z0.Mkl.VslMatrixStorage,System.Double@,System.Double@)| 
Method      | Z0.Mkl.VSL.vslsSSNewTask(System.IntPtr@,System.Int32@,System.Int32@,Z0.Mkl.VslSSMatrixStorage@,System.Single@,System.Single@,System.Int32@)| Creates a new single-precisiion summary statistics task
Method      | Z0.Mkl.VSL.vsldSSNewTask(System.IntPtr@,System.Int32@,System.Int32@,Z0.Mkl.VslSSMatrixStorage@,System.Double@,System.Double@,System.Int32@)| Creates a new double-precisiion summary statistics task
Method      | Z0.Mkl.VSL.vslSSDeleteTask(System.IntPtr@)                            | Deletes a summary statistics task
Method      | Z0.Mkl.VSL.vslNewStream(System.IntPtr@,Z0.Mkl.Brng,System.UInt32)     | Creates a new random number stream
Method      | Z0.Mkl.VSL.vslDeleteStream(System.IntPtr@)                            | Deallocates a stream created via vslNewStream
Method      | Z0.Mkl.VSL.vslLeapfrogStream(System.IntPtr,System.Int32,System.Int32) | Selects a substream from the source stream
Method      | Z0.Mkl.VSL.vslSkipAheadStream(System.IntPtr,System.Int64)             | Advances the stream by a specified number of elements
Field       | Z0.Mkl.Brng.MCG31                                                     | A 31-bit multiplicative congruential generator.
Field       | Z0.Mkl.Brng.R250                                                      | A generalized feedback shift register generator.
Field       | Z0.Mkl.Brng.MRG32K3A                                                  | A combined multiple recursive generator with two components of order 3.
Field       | Z0.Mkl.Brng.MCG59                                                     | A 59-bit multiplicative congruential generator.
Field       | Z0.Mkl.Brng.WH                                                        | A set of 273 Wichmann-Hill combined multiplicative congruential generators.
Field       | Z0.Mkl.Brng.SOBOL                                                     | A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 40            User-defined dimensions are also available
Field       | Z0.Mkl.Brng.NIEDERR                                                   | A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 318.            User-defined dimensions are also available.
Field       | Z0.Mkl.Brng.MT19937                                                   | A Mersenne Twister pseudorandom number generator.
Field       | Z0.Mkl.Brng.MT2203                                                    | A set of 6024 Mersenne Twister pseudorandom number generators
Field       | Z0.Mkl.Brng.IABSTRACT                                                 | An abstract random number generator for integer arrays.
Field       | Z0.Mkl.Brng.DABSTRACT                                                 | An abstract random number generator for double precision floating-point arrays.
Field       | Z0.Mkl.Brng.SABSTRACT                                                 | An abstract random number generator for single precision floating-point arrays.
Field       | Z0.Mkl.Brng.SFMT19937                                                 | A SIMD-oriented Fast Mersenne Twister pseudorandom number generator.
Field       | Z0.Mkl.Brng.NONDETERM                                                 | A non-deterministic random number generator.
Field       | Z0.Mkl.Brng.ARS5                                                      | An ARS-5 counter-based pseudorandom number generator that uses instructions from the AES-NI set
Field       | Z0.Mkl.Brng.PHILOX4X32X10                                             | A Philox4x32-10 counter-based pseudorandom number generator.
Type        | Z0.Mkl.VmlAccuracy                                                    | Controls the accuracy of VML functions
Field       | Z0.Mkl.VmlAccuracy.LowAccuracy                                        | Selects low accuracy VML functions
Field       | Z0.Mkl.VmlAccuracy.HighAccuracy                                       | Selects high accuracy VML functions
Field       | Z0.Mkl.VmlAccuracy.HighAccuracyP                                      | Selects enhanced performance, high accuracy VML functions
Field       | Z0.Mkl.VmlErrorMode.IgnoreErrors                                      | Indicates errors are ignored
Field       | Z0.Mkl.VmlErrorMode.ErrorNumber                                       | Indicates errno variable is set whenever there is an error
Field       | Z0.Mkl.VmlErrorMode.StdErr                                            | Indicates error messages are written to standard error output
Field       | Z0.Mkl.VmlErrorMode.RaiseException                                    | Indicates an exception is raised when there is an error
Field       | Z0.Mkl.VmlErrorMode.ErrorCallback                                     | Indicates a user-speccified error handler is invoked
Field       | Z0.Mkl.VmlErrorMode.PretendNoError                                    | Ignore errors and do not update error status
Type        | Z0.Mkl.VmlMask                                                        | Accuracy, floating-point and error handling control are packed in the VML mode variable.
Field       | Z0.Mkl.VmlMask.Accuracy                                               | Extract accuracy bits
Field       | Z0.Mkl.VmlMask.FpuMode                                                | Extract floating-point control bits
Field       | Z0.Mkl.VmlMask.ErrorMode                                              | Extract error handling control bits, including error callback bits
Field       | Z0.Mkl.VmlMask.ErrorModeStdHandler                                    | Extract error handling control bits, not including error callback bits
Field       | Z0.Mkl.VmlMask.ErrorModeCallback                                      | Extract error callback bits
Field       | Z0.Mkl.VmlMask.OmpThreadCount                                         | Extract OpenMP(R) number of threads mode bits
Field       | Z0.Mkl.VmlMask.FTZDAZ                                                 | Extract FTZ and DAZ bits
Field       | Z0.Mkl.VmlMask.TrapExceptions                                         | Extract exception trap bits
Field       | Z0.Mkl.VmlModeFlags.DefaultRounding                                   | Selects the default/current precision mode
Field       | Z0.Mkl.VmlModeFlags.F32Rounding                                       | Selects acccuracy/rounding mode constistent with 32-bit floating point
Field       | Z0.Mkl.VmlModeFlags.F64Rounding                                       | Selects acccuracy/rounding mode constistent with 64-bit floating point
Field       | Z0.Mkl.VmlModeFlags.RestoreRounding                                   | Selects the prior precision mode
Field       | Z0.Mkl.VmlModeFlags.LowAccuracy                                       | Selects low accuracy VML functions
Field       | Z0.Mkl.VmlModeFlags.HighAccuracy                                      | Selects high accuracy VML functions
Field       | Z0.Mkl.VmlModeFlags.HighAccuracyP                                     | Selects enhanced performance, high accuracy VML functions
Field       | Z0.Mkl.VmlModeFlags.IgnoreErrors                                      | Indicates errors are ignored
Field       | Z0.Mkl.VmlModeFlags.ErrorNumber                                       | Indicates errno variable is set whenever there is an error
Field       | Z0.Mkl.VmlModeFlags.StdErr                                            | Indicates error messages are written to standard error output
Field       | Z0.Mkl.VmlModeFlags.RaiseException                                    | Indicates an exception is raised when there is an error
Field       | Z0.Mkl.VmlModeFlags.ErrorCallback                                     | Indicates a user-speccified error handler is invoked
Field       | Z0.Mkl.VmlModeFlags.PretendNoError                                    | Ignore errors and do not update error status
Field       | Z0.Mkl.VmlPrecision.DefaultRounding                                   | Selects the default/current precision mode
Field       | Z0.Mkl.VmlPrecision.F32Rounding                                       | Selects acccuracy/rounding mode constistent with 32-bit floating point
Field       | Z0.Mkl.VmlPrecision.F64Rounding                                       | Selects acccuracy/rounding mode constistent with 64-bit floating point
Field       | Z0.Mkl.VmlPrecision.RestoreRounding                                   | Selects the prior precision mode
Field       | Z0.Mkl.VslSSMatrixStorage.VSL_SS_MATRIX_STORAGE_ROWS                  | Observation vectors are organized by rows. For example, 10 observations            in dimension 3 will conform to a 10 row 3 column matrix
Field       | Z0.Mkl.VslSSMatrixStorage.VSL_SS_MATRIX_STORAGE_COLS                  | Observation vectors are organized by columns. For example, 10 observations            in dimension 3 will conform to a 3 row by 10 column matrix
Type        | Z0.Mkl.VslGaussianMVMethod                                            | Multivariate (correlated) normal random number generator is based on uncorrelated             Gaussian random number generator (see vslsRngGaussian and vsldRngGaussian functions)
Field       | Z0.Mkl.VslGaussianMVMethod.BoxMuller1                                 | BOXMULLER  generates normally distributed random number x thru the pair of uniformly distributed             numbers u1 and u2 according to the formula: x=sqrt(-ln(u1))*sin(2*Pi*u2)
Field       | Z0.Mkl.VslGaussianMVMethod.BoxMuller2                                 | generates pair of normally distributed random numbers x1 and x2 thru the pair of uniformly             dustributed numbers u1 and u2 according to the formula x1=sqrt(-ln(u1))*sin(2*Pi*u2)             and x2=sqrt(-ln(u1))*cos(2*Pi*u2)
Field       | Z0.Mkl.VslGaussianMVMethod.ICDF                                       | inverse cumulative distribution function method
Type        | Z0.Mkl.VslMatrixStorage                                               | Some multivariate random number generators, e.g. GaussianMV, operate             with matrix parameters. To optimize matrix parameters usage VSL offers             following matrix storage schemes. (See VSL documentation for more details).
Field       | Z0.Mkl.VslMatrixStorage.Full                                          | Whole matrix is stored
Field       | Z0.Mkl.VslMatrixStorage.Packed                                        | Lower/higher triangular matrix is packed in 1-dimensional array
Field       | Z0.Mkl.VslMatrixStorage.Diagonal                                      | Diagonal elements are packed in 1-dimensional array
Field       | Z0.Mkl.VslPoissonMethod.PTPE                                          | Pif lambda&gt;=27, acceptance/rejection method is used with decomposition onto 4 regions:             - 2 parallelograms;             - triangle;             - left exponential tail;             - right exponential tail.             othewise table lookup method is used
Field       | Z0.Mkl.VslRngMethod.VSL_RNG_METHOD_GAUSSIAN_BOXMULLER                 | Generates normally distributed random number x thru the pair of uniformly distributed numbers u1 and u2 according to the formula:            x=sqrt(-ln(u1))*sin(2*Pi*u2)
Field       | Z0.Mkl.VslRngMethod.VSL_RNG_METHOD_GAUSSIAN_BOXMULLER2                | Generates pair of normally distributed random numbers x1 and x2 thru the pair of uniformly distributed numbers u1 and u2            according to the formula             x1=sqrt(-ln(u1))*sin(2*Pi*u2)            x2=sqrt(-ln(u1))*cos(2*Pi*u2)            NOTE: implementation correctly works with odd vector lengths
Field       | Z0.Mkl.VslRngMethod.VSL_RNG_METHOD_GAUSSIAN_ICDF                      | inverse cumulative distribution function method
Type        | Z0.Mkl.VslSSComputeMethod                                             | SS routines provide computation of basic statistical estimates            (central/raw moments up to 4th order, variance-covariance,             minimum, maximum, skewness/kurtosis) using the following methods
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_FAST                          | Estimates are computed for price of one or two passes over observations using highly optimized Intel(R) MKL routines
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_1PASS                         | Estimate is computed for price of one pass of the observations
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_FAST_USER_MEAN                | Estimates are computed for price of one or two passes over observations given user defined mean for central moments, covariance and correlation
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_CP_TO_COVCOR                  | Convert cross-product matrix to variance-covariance/correlation matrix
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SUM_TO_MOM                    | Convert raw/central sums to raw/central moments
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SD                            | Parametrization of correlation matrix using spectral decomposition method
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_TBS                           | Robust estimation of variance-covariance matrix and mean supports Rocke algorithm, TBS-estimator
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_MI                            | SS routine for estimation of missing values supports Multiple Imputation (MI) method
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_BACON                         | SS provides routine for detection of outliers, BACON method
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SQUANTS_ZW                    | Streaming: intermediate estimates of quantiles during processing the next block are computed
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_SQUANTS_ZW_FAST               | Streaming: intermediate estimates of quantiles during processing the next block are not computed
Field       | Z0.Mkl.VslSSComputeMethod.VSL_SS_METHOD_RADIX                         | Sorting using the radix method
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_MEAN                                | Computes the array of means.
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_2R_MOM                              | Computes the array of the 2nd order raw moments
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_3R_MOM                              | Computes the array of the 3rd order raw moments
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_4R_MOM                              | Computes the array of the 4th order raw moments
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_2C_MOM                              | Computes the array of central sums of the 2nd order
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_3C_MOM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_4C_MOM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_SUM                                 | Computes the array of sums
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_2R_SUM                              | Computes the array of raw sums of the 2nd order
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_3R_SUM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_4R_SUM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_2C_SUM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_3C_SUM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_4C_SUM                              | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_KURTOSIS                            | Computes the array of kurtosis values
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_SKEWNESS                            | Computes the array of skewness values
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_VARIATION                           | Computes the array of variation coefficients
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_MIN                                 | For each dimension, finds the minimum sample value
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_MAX                                 | For each dimension, finds the maximum sample value
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_COV                                 | Computes a covariance matrix.
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_COR                                 | Computes a correlation matrix. The main diagonal of the correlation matrix holds             variances of the random vector components
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_CP                                  | Computes a cross-product matrix
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_POOLED_COV                          | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_GROUP_COV                           | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_POOLED_MEAN                         | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_GROUP_MEAN                          | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_QUANTS                              | Computes quantiles
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_ORDER_STATS                         | Computes order statistics
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_SORTED_OBSERV                       | 
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_ROBUST_COV                          | Computes a robust covariance matrix
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_OUTLIERS                            | Detects outliers in the dataset
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_PARTIAL_COV                         | Computes a partial covariance matrix.
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_PARTIAL_COR                         | Computes a partial correlation matrix
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_MISSING_VALS                        | Supports missing values in datasets.
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_PARAMTR_COR                         | Computes a parameterized correlation matrix.
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_STREAM_QUANTS                       | Computes quantiles for streaming data.
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_MDAD                                | Computes median absolute deviation
Field       | Z0.Mkl.VslSSComputeRoutine.VSL_SS_MNAD                                | Computes mean absolute deviation
Type        | Z0.Mkl.VslSSStatus                                                    | Defines summary statistic status codes
Field       | Z0.Mkl.VslSSStatus.VSL_SS_OK                                          | Everything is OK
Field       | Z0.Mkl.VslSSStatus.VSL_SS_NOT_FULL_RANK_MATRIX                        | Correlation matrix is not of full rank.
Field       | Z0.Mkl.VslSSStatus.VSL_SS_SEMIDEFINITE_COR                            | Correlation matrix passed into the parameterization function is semi-definite.
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_ALLOCATION_FAILURE                    | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_DIMEN                             | Dimension value is invalid.
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OBSERV_N                          | Invalid number (zero or negative) of observations was obtained
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_STORAGE_NOT_SUPPORTED                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_INDC_ADDR                         | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_WEIGHTS                           | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MEAN_ADDR                         | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2R_MOM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3R_MOM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4R_MOM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2C_MOM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3C_MOM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4C_MOM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_KURTOSIS_ADDR                     | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_SKEWNESS_ADDR                     | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MIN_ADDR                          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MAX_ADDR                          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_VARIATION_ADDR                    | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_COV_ADDR                          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_COR_ADDR                          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ACCUM_WEIGHT_ADDR                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_QUANT_ORDER_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_QUANT_ORDER                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_QUANT_ADDR                        | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ORDER_STATS_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MOMORDER_NOT_SUPPORTED                | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_ALL_OBSERVS_OUTLIERS                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_COV_ADDR                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_MEAN_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_METHOD_NOT_SUPPORTED                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_INDC_ADDR                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_NULL_TASK_DESCRIPTOR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OBSERV_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_SINGULAR_COV                          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_POOLED_COV_ADDR                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_POOLED_MEAN_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_COV_ADDR                    | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_MEAN_ADDR                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_GROUP_INDC                        | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_ADDR              | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_N_ADDR            | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_OUTLIERS_WEIGHTS_ADDR             | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_ADDR            | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_N_ADDR          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STORAGE_ADDR                      | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COV_IDX_ADDR              | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COV_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COR_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PARAMS_ADDR                    | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PARAMS_N_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_BAD_PARAMS_N                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PARAMS                         | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_N_ADDR          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_ADDR            | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_SIMUL_VALS_ADDR                | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N_ADDR              | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_ESTIMATES_N_ADDR               | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_ESTIMATES_ADDR                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_ESTIMATES_N                    | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_OUTPUT_PARAMS                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PRIOR_N_ADDR                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_PRIOR_ADDR                     | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MI_MISSING_VALS_N                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N_ADDR        | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_ADDR          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N             | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS               | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER_ADDR           | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER                | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_STREAM_QUANT_ADDR                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARAMTR_COR_ADDR                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_COR                               | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_PARTIAL_COV_IDX                   | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_SUM_ADDR                          | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2R_SUM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3R_SUM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4R_SUM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_2C_SUM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_3C_SUM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_4C_SUM_ADDR                       | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_CP_ADDR                           | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MDAD_ADDR                         | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_MNAD_ADDR                         | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_BAD_SORTED_OBSERV_ADDR                | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_INDICES_NOT_SUPPORTED                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_ROBCOV_INTERN_C1                      | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_PARTIALCOV_INTERN_C1                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_PARTIALCOV_INTERN_C2                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C1                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C2                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C3                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C4                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_MISSINGVALS_INTERN_C5                 | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_PARAMTRCOR_INTERN_C1                  | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_COVRANK_INTERNAL_ERROR_C1             | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C1              | 
Field       | Z0.Mkl.VslSSStatus.VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C2              | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_DIMEN                             | Address of a variable that holds the task dimension
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OBSERV_N                          | Address of a variable that holds the number of observations
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OBSERV                            | Address of the observation matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OBSERV_STORAGE                    | Address of a variable that holds the storage format for the observation matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_INDC                              | Address of the array of indices
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_WEIGHTS                           | Address of the array of observation weights
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MEAN                              | Address of the array of means
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2R_MOM                            | Address of an array of raw moments of the second order
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3R_MOM                            | Address of an array of raw moments of the third order
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4R_MOM                            | Address of an array of raw moments of the fourth order
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2C_MOM                            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3C_MOM                            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4C_MOM                            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SUM                               | Address of array of sums
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2R_SUM                            | Address of array of raw sums of 2nd order
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3R_SUM                            | Address of array of raw sums of 3rd order
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4R_SUM                            | Address of array of raw sums of 4th order
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_2C_SUM                            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_3C_SUM                            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_4C_SUM                            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_KURTOSIS                          | Address of the array of kurtosis estimates
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SKEWNESS                          | Address of the array of skewness estimates
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MIN                               | Address of the array of minimum estimates
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MAX                               | Address of the array of maximum estimates
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_VARIATION                         | Address of the array of variation coefficients
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COV                               | Address of a covariance matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COV_STORAGE                       | Address of the variable that holds the storage format for a covariance matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COR                               | Address of a correlation matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_COR_STORAGE                       | Address of the variable that holds the storage format for a correlation matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_CP                                | Address of cross-product matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_CP_STORAGE                        | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ACCUM_WEIGHT                      | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_QUANT_ORDER_N                     | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_QUANT_ORDER                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_QUANT_QUANTILES                   | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ORDER_STATS                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_POOLED_COV_STORAGE                | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_POOLED_MEAN                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_POOLED_COV                        | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_COV_INDC                    | Address of an array of indices for which covariance/means should be computed
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_REQ_GROUP_INDC                    | Address of an array of indices for which group estimates such as covariance or means are requested
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_MEAN                        | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_COV_STORAGE                 | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_GROUP_COV                         | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV_STORAGE                | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV_PARAMS_N               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV_PARAMS                 | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_MEAN                       | Address of an array of robust means
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ROBUST_COV                        | Address of a robust covariance matrix
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OUTLIERS_PARAMS_N                 | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OUTLIERS_PARAMS                   | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_OUTLIERS_WEIGHT                   | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_ORDER_STATS_STORAGE               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COV_IDX                   | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COV                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COV_STORAGE               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COR                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARTIAL_COR_STORAGE               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PARAMS_N                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PARAMS                         | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_INIT_ESTIMATES_N               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_INIT_ESTIMATES                 | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_SIMUL_VALS_N                   | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_SIMUL_VALS                     | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_ESTIMATES_N                    | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_ESTIMATES                      | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PRIOR_N                        | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MI_PRIOR                          | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARAMTR_COR                       | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_PARAMTR_COR_STORAGE               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_PARAMS_N             | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_PARAMS               | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_ORDER_N              | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_ORDER                | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_STREAM_QUANT_QUANTILES            | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MDAD                              | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_MNAD                              | 
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SORTED_OBSERV                     | Address of the array that stores sorted results
Field       | Z0.Mkl.VslSSTaskParameter.VSL_SS_ED_SORTED_OBSERV_STORAGE             | Address of a variable that holds the storage format of an output matrix
Method      | Z0.VectorOps.Add``2(Z0.Block256{``0,``1}@,Z0.Block256{``0,``1}@,Z0.Block256{``0,``1}@)| Add the first vector to the second and populates the third with the result
