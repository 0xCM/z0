Type        | Z0.MatMod                                                             | Defines Modular matrix operations
Method      | Z0.MatMod.mvmul``1(Z0.Matrix{``0,System.UInt32}@,Z0.RowVector{``0,System.UInt32}@,System.UInt32,Z0.RowVector{``0,System.UInt32}@)| Computes the vector u = As (mod m)
Method      | Z0.MatMod.mvmul``1(Z0.Matrix{``0,System.UInt64}@,Z0.RowVector{``0,System.UInt64}@,System.UInt64,Z0.RowVector{``0,System.UInt64}@)| Computes the vector v = As (mod m)
Method      | Z0.MatMod.mvmul``1(Z0.Matrix{``0,System.Double}@,Z0.RowVector{``0,System.Double}@,System.Double,Z0.RowVector{``0,System.Double}@)| Computes the vector u = Av (mod m)
Method      | Z0.MatMod.mul``1(Z0.Matrix{``0,System.UInt32}@,Z0.Matrix{``0,System.UInt32}@,System.UInt32,Z0.Matrix{``0,System.UInt32}@)| Computes the product of square matricies C = AB (mod m)
Method      | Z0.MatMod.mul``1(Z0.Matrix{``0,System.UInt64}@,Z0.Matrix{``0,System.UInt64}@,System.UInt64,Z0.Matrix{``0,System.UInt64}@)| Computes the matrix product C = AB (mod m)
Method      | Z0.MatMod.mul``1(Z0.Matrix{``0,System.Double}@,Z0.Matrix{``0,System.Double}@,System.Double,Z0.Matrix{``0,System.Double}@)| Computes the matrix product C = AB (mod m)
Method      | Z0.MatMod.pow``1(Z0.Matrix{``0,System.UInt32}@,System.UInt32,System.UInt32,Z0.Matrix{``0,System.UInt32}@)| Computes B = A^e (mod m)
Method      | Z0.MatMod.pow``1(Z0.Matrix{``0,System.UInt64}@,System.UInt32,System.UInt64,Z0.Matrix{``0,System.UInt64}@)| Computes B = A^e (mod m)
Method      | Z0.MatMod.pow``1(Z0.Matrix{``0,System.Double}@,System.UInt32,System.Double,Z0.Matrix{``0,System.Double}@)| Computes B = A^c (mod m)
Method      | Z0.MatMod.pow2``1(Z0.Matrix{``0,System.UInt32}@,System.UInt32,System.UInt32,Z0.Matrix{``0,System.UInt32}@)| Computes B = A^{2^e} (mod m)
Method      | Z0.MatMod.pow2``1(Z0.Matrix{``0,System.UInt64}@,System.UInt32,System.UInt64,Z0.Matrix{``0,System.UInt64}@)| Computes B = A^{2^e} (mod m)
Method      | Z0.MatMod.pow2``1(Z0.Matrix{``0,System.Double}@,System.UInt32,System.Double,Z0.Matrix{``0,System.Double}@)| Computes B = A^{2^e} (mod m)
Type        | Z0.Matrix                                                             | Defines the matrix api surface
Method      | Z0.Matrix.natspan``2(Z0.Block256{``1}@,``0)                           | Loads a natural block from blocked storage
Method      | Z0.Matrix.array``1(System.Int32,System.Nullable{``0})                 | Allocates a memory span of specified length
Method      | Z0.Matrix.alloc``2(``0,``1)                                           | Allocates a square matrix of natual dimension
Method      | Z0.Matrix.blockalloc``2(``0,``1)                                      | Allocates a blocked square matrix of natual dimension
Method      | Z0.Matrix.blockalloc``3(``0,``1,``2)                                  | Allocates a blocked matrix of natual dimensions
Method      | Z0.Matrix.alloc``3(``0,``1,``2)                                       | Allocates a matrix of natual dimensions
Method      | Z0.Matrix.load``3(``2[],``0,``1)                                      | Loads a matrix of natural dimensions from an array
Method      | Z0.Matrix.blockload``3(Z0.Block256{``2},``0,``1)                      | Loads a matrix of natural dimensions from a blocked span
Method      | Z0.Matrix.blockload``2(Z0.Block256{``1},``0)                          | Loads a square matrix of natural dimensions from a blocked span
Method      | Z0.Matrix.blockload``2(``1[],``0)                                     | Defines a square matrix
Method      | Z0.Matrix.blockload``2(``0,``1[])                                     | Defines a square matrix
Method      | Z0.Matrix.load``2(``0,``1[])                                          | Loads a square matrix of natural order from an array
Method      | Z0.Matrix.filename``3(System.Nullable{System.Int32})                  | Defines the canonical filename for a matrix data file
Method      | Z0.Matrix.write``3(Z0.Matrix256{``0,``1,``2},System.IO.StreamWriter,System.Boolean,System.Nullable{Z0.TextFormat})| Writes a matrix to a delimited file
Method      | Z0.Matrix.blockread``3(System.IO.StreamReader,System.Nullable{Z0.TextFormat})| Reads a matrix from a delimited file
Type        | Z0.Matrix256`3                                                        | Defines a blocked primal matrix of natural dimensions
Property    | Z0.Matrix256`3.Rows                                                   | The number of matrix rows
Property    | Z0.Matrix256`3.Cols                                                   | The number of matrix colums
Property    | Z0.Matrix256`3.Cells                                                  | The total number of matrix cells
Method      | Z0.Matrix256`3.SetCol(System.Int32,Z0.Block256{`0,`2})                | Replaces an index-identied column of data with the content of a column vector
Method      | Z0.Matrix256`3.Transpose                                              | Interchages rows and columns
Property    | Z0.Matrix256`3.Unblocked                                              | Provides access to the underlying data as a linear unblocked span
Property    | Z0.Matrix256`3.Unsized                                                | Provides access to the underlying data as a 256-bit blocked span
Property    | Z0.Matrix256`3.Natural                                                | Provides access to the underlying data as a span of natural dimensions
Method      | Z0.Matrix256`3.Apply(System.Func{`2,`2})                              | Applies a function to each cell and overwites the existing cell value with the result
Method      | Z0.Matrix256`3.Convert``1                                             | Converts the entries of the matrix to a specified type and            populates a new matrix with the converted values
Method      | Z0.Matrix256`3.Convert``1(Z0.Matrix256{`0,`1,``0}@)                   | Converts the entries of the matrix to a specified type and            populates a new matrix with the converted values
Method      | Z0.Matrix256`3.As``1                                                  | Reinterprets the primal type of the matrix
Method      | Z0.Matrix256`3.As``1(Z0.Matrix256{`0,`1,``0}@)                        | Reinterprets the primal type of the matrix
Type        | Z0.Matrix256`2                                                        | Defines a primal square matrix of natural order
Property    | Z0.Matrix256`2.Order                                                  | The square matrix dimension
Property    | Z0.Matrix256`2.CellCount                                              | The total number of allocated elements
Property    | Z0.Matrix256`2.Unblocked                                              | Provides access to the underlying data as a linear unblocked span
Property    | Z0.Matrix256`2.Unsized                                                | Provides access to the underlying data as a 256-bit blocked span
Property    | Z0.Matrix256`2.Natural                                                | Provides access to the underlying data as a span of natural dimensions
Method      | Z0.Matrix256`2.Apply(System.Func{`1,`1})                              | Applies a function to each cell and overwites the existing cell value with the result
Method      | Z0.Matrix256`2.Replicate                                              | Creates a copy of the matrix
Method      | Z0.MatrixFormat.Fomat``2(Z0.Block256{``0,``1})                        | Renders the source vector as text
Field       | Z0.TriangularKind.Lower                                               | Classifies a matrix as lower-triangular
Field       | Z0.TriangularKind.Upper                                               | Classifies a matrix as upper-triangular
Type        | Z0.Matrix`3                                                           | Defines a blocked primal matrix of natural dimensions
Property    | Z0.Matrix`3.Rows                                                      | The number of rows in the structure
Property    | Z0.Matrix`3.Cols                                                      | The number of columns in the structure
Property    | Z0.Matrix`3.Cells                                                     | The total number of allocated elements
Property    | Z0.Matrix`3.RowCount                                                  | The number of rows in the matrix
Property    | Z0.Matrix`3.ColCount                                                  | The number of columns in the matrix
Property    | Z0.Matrix`3.Data                                                      | Provides access to the underlying data as a linear unblocked span
Property    | Z0.Matrix`3.Item(System.Int32)                                        | Returns a row data copy
Method      | Z0.Matrix`3.SetCol(System.Int32,Z0.Block256{`0,`2})                   | Replaces an index-identied column of data with the content of a column vector
Method      | Z0.Matrix`3.Transpose                                                 | Interchages rows and columns
Method      | Z0.Matrix`3.Apply(System.Func{`2,`2})                                 | Applies a function to each cell and overwites the existing cell value with the result
Method      | Z0.Matrix`3.Convert``1                                                | Converts the entries of the matrix to a specified type and            populates a new matrix with the converted values
Method      | Z0.Matrix`3.Convert``1(Z0.Matrix{`0,`1,``0}@)                         | Converts the entries of the matrix to a specified type and            populates a new matrix with the converted values
Type        | Z0.Matrix`2                                                           | Defines a primal square matrix of natural order
Property    | Z0.Matrix`2.Order                                                     | The square matrix dimension
Property    | Z0.Matrix`2.Cells                                                     | The total number of allocated elements
Property    | Z0.Matrix`2.Data                                                      | The data contained in the matrix
Property    | Z0.Matrix`2.Span                                                      | The data contained in the matrix
Property    | Z0.Matrix`2.RowCount                                                  | The number of rows in the matrix
Property    | Z0.Matrix`2.ColCount                                                  | The number of columns in the matrix
Property    | Z0.Matrix`2.Item(System.Int32)                                        | Returns a row data copy
Method      | Z0.Matrix`2.Transpose                                                 | Interchages rows and columns
Method      | Z0.Matrix`2.Apply(System.Func{`1,`1})                                 | Applies a function to each cell and overwites the existing cell value with the result
Method      | Z0.Matrix`2.First(System.Func{`1,System.Boolean},System.ValueTuple{System.Int32,System.Int32}@)| Returns the first cell value, if any, that satisfies a supplied predicate
Method      | Z0.Matrix`2.Replicate                                                 | Creates a copy of the matrix
Type        | Z0.RandomMatrix                                                       | Defines the matrix api surface
Method      | Z0.RandomMatrix.Matrix``3(Z0.IPolyrand,``0,``1)                       | Allocates and fills a matrix of natural dimensions with random values
Method      | Z0.RandomMatrix.Matrix``3(Z0.IPolyrand,Z0.Interval{``2},``0,``1)      | Allocates and fills a matrix of natural dimensions with random values
Method      | Z0.RandomMatrix.Matrix``2(Z0.IPolyrand,``0,``1,``1)                   | Samples a square matrix of natural order
Method      | Z0.RandomMatrix.MatrixBlock``3(Z0.IPolyrand)                          | Samples a blocked matrix of natural dimensions where the entries are constrained to a specified domain
Method      | Z0.RandomMatrix.MatrixBlock``3(Z0.IPolyrand,Z0.Interval{``2},``0,``1) | Samples a blocked matrix of natural dimensions where the entries are constrained to a specified domain
Method      | Z0.RandomMatrix.MatrixBlock``2(Z0.IPolyrand,System.Nullable{Z0.Interval{``1}})| Samples a square matrix of natural order
Method      | Z0.RandomMatrix.MatrixBlock``4(Z0.IPolyrand,``0,``1,``3)              | Samples values over an S-domain, transforms the sample into a T-domain and from this transformed            sample constructs a matrix of natural dimensions
Method      | Z0.RandomMatrix.MatrixBlockF32``3(Z0.IPolyrand,System.Nullable{System.Int32},System.Nullable{System.Int32},``0)| Samples 32-bit integers that are converted to 32-bit floats to populate a square matrix
Method      | Z0.RandomMatrix.MatrixBlockF64``3(Z0.IPolyrand,System.Nullable{System.Int64},System.Nullable{System.Int64},``0)| Samples 64-bit integers that are converted to 64-bit floats to populate a square matrix
Type        | Z0.IRngSuite256`1                                                     | Characterizes a suite of random number generators
Method      | Z0.IRngSuite256`1.Next``1                                             | Retrieves the next vector from the suite, where the components             are bound only by the domain of the type
Method      | Z0.IRngSuite256`1.Next``1(``0)                                        | Retrieves the next vector from the suite, where each component is             constrained by an upper bound
Method      | Z0.IRngSuite256`1.Next``1(``0,``0)                                    | Retrieves the next vector from the suite, where each component is             constrained by both lower and upper bounds
Method      | Z0.IRngSuite256`1.Next``1(Z0.Interval{``0})                           | Retrieves the next vector from the suite, where each component is             constrained by an interval domain
Method      | Z0.IRngSuite256`1.Select(System.Int32)                                | Retrieves the generator corresponding to a specified index that            is in the range 0, 1, ..., N - 1
Type        | Z0.RngSuite256`1                                                      | Defines a suite of random number generators
Type        | Z0.RandomVector                                                       | Defines the matrix api surface
Method      | Z0.RandomVector.VectorBlock``1(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})| Produces a blocked vector
Method      | Z0.RandomVector.VectorBlock``2(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})| Produces a generic random vector over one domain and converts it to a vector over another
Method      | Z0.RandomVector.VectorBlock``2(Z0.IPolyrand,Z0.Interval{``1},``0)     | Allocates and populates a vector of natural length
Method      | Z0.RandomVector.VectorBlock``3(Z0.IPolyrand,Z0.Interval{``1},``0)     | Allocates and populates a vector of natural length
Method      | Z0.RandomVector.VectorBlock``2(Z0.IPolyrand,``0,``1)                  | Allocates and populates a vector of natural length
Method      | Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.Interval{``1},Z0.Block256{``0,``1}@,``0)| Populates a vector of natural length with random values from the source
Method      | Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.Block256{``0,``1}@,``0)       | Populates a vector of natural length with random values from the source
Method      | Z0.RandomVector.Vector``1(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})| Produces a generic vector
Method      | Z0.RandomVector.Vector``2(Z0.IPolyrand,Z0.Interval{``1},``0)          | Produces a natural vector
Method      | Z0.RandomVector.Vector``2(Z0.IPolyrand,``1,``1,``0)                   | Produces a natural vector
Method      | Z0.RandomVector.Vector``2(Z0.IPolyrand,``0)                           | Allocates and populates a vector of natural length
Method      | Z0.RandomVector.Vector``3(Z0.IPolyrand,Z0.Interval{``1},``0)          | Produces a natural vector over one domain and converts it to another
Method      | Z0.RandomVector.Vector``2(Z0.IPolyrand,System.Int32,System.Nullable{Z0.Interval{``0}})| Produces a natural vector over one domain and converts it to another
Method      | Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.Interval{``1},Z0.RowVector{``0,``1}@,``0)| Populates a vector of natural length with random values from the source
Method      | Z0.RandomVector.Fill``2(Z0.IPolyrand,Z0.RowVector{``0,``1}@,``0)      | Populates a vector of natural length with random values from the source
Method      | Z0.RandomVector.Contract``2(Z0.Block256{``0,``1},Z0.Block256{``0,``1})| Effects a component-wise contraction on the source vector on a source vector of unsigned primal type,             dst[i] = src[i].Contract(max[i])
Method      | Z0.RandomVector.Contract``1(Z0.RowVector256{``0},Z0.RowVector256{``0})| Effects a component-wise contraction on the source vector on a source vector of unsigned primal type,             dst[i] = src[i].Contract(max[i])
