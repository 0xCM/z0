| T:Z0.IAny`1                                       | 
            <summary>
            Characterizes any equatable value
            </summary>
            <typeparam name="T">The value type</typeparam>
        
| T:Z0.IAny`2                                       | 
            <summary>
            Characterizes an equatable value reification
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="T">The value type</typeparam>
        
| P:Z0.IAppMsg.Content                              | 
            <summary>
            The message body
            </summary>
        
| P:Z0.IAppMsg.Kind                                 | 
            <summary>
            The message classification
            </summary>
        
| P:Z0.IAppMsg.Color                                | 
            <summary>
            The message foreground color when rendered for display
            </summary>
        
| P:Z0.IAppMsg.Displayed                            | 
            <summary>
            Specifies whether the message has been displayed to an end-user
            </summary>
        
| M:Z0.IAppMsg.AsDisplayed                          | 
            <summary>
            Transitions a message to the displayed state
            </summary>
        
| P:Z0.IAppMsg.IsEmpty                              | 
            <summary>
            Specifies whether the message is vaccuous
            </summary>
        
| P:Z0.IAppMsg.IsError                              | 
            <summary>
            Specifies whether the message describes an error
            </summary>
        
| T:Z0.IBitField`1                                  | 
            <summary>
            Characterizes a content-parametric bitfield
            </summary>
            <typeparam name="T">The bitfield content type</typeparam>
        
| P:Z0.IBitField`1.Data                             | 
            <summary>
            The raw bitfield data
            </summary>
        
| T:Z0.IBitField`2                                  | 
            <summary>
            Characterizes a content and index-parametric bitfield
            </summary>
            <typeparam name="I">The bifield index type that defines 0-based sequential index corresponding to each bitfield segment</typeparam>
            <typeparam name="T">The bitfield content type</typeparam>
        
| T:Z0.IBitField`3                                  | 
            <summary>
            Characterizes a bitfield from which segments can be specified/extracted
            </summary>
            <typeparam name="I">The bifield index type that defines 0-based sequential index corresponding to each bitfield segment</typeparam>
            <typeparam name="P">The bitfield position type</typeparam>
            <typeparam name="T">The bitfield content type from which segments are extracted/specified</typeparam>
        
| T:Z0.IBitField`4                                  | 
            <summary>
            Characterizes a reified bitfield predicated on 3 type parameters
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="I">The bifield index type that defines 0-based sequential index corresponding to each bitfield segment</typeparam>
            <typeparam name="P">The bitfield position type</typeparam>
            <typeparam name="T">The bitfield content type from which segments are extracted/specified</typeparam>
        
| T:Z0.IBitField`6                                  | 
            <summary>
            Characterizes a reified bitfield predicated on 4 type parameters
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="I">The bifield index type that defines 0-based sequential index corresponding to each bitfield segment</typeparam>
            <typeparam name="P">The bitfield segment type</typeparam>
            <typeparam name="T">The bitfield content type from which segments are extracted/specified</typeparam>
            <typeparam name="W">The bitfield segment width type</typeparam>
        
| P:Z0.IBufferTokenSource.Item(Z0.BufferSeqId)      | 
            <summary>
            Returns the token of an index-identified buffer
            </summary>
        
| T:Z0.IContext                                     | 
            <summary>
            Charaterizes a shared execution environment that may be stateful or stateless
            </summary>
        
| T:Z0.IContextual`1                                | 
            <summary>
            Charaterizes a component that maintains readonly-access to encapsulated state, here and throughout referred to as a context
            </summary>
        
| T:Z0.IContext`1                                   | 
            <summary>
            Charaterizes a stateful shared execution environment over a parametric context
            </summary>
            <typeparam name="C">The context type</typeparam>
        
| T:Z0.IDistributionSpec                            | 
            <summary>
            Characterizes a distribution specifier
            </summary>
        
| T:Z0.IDistributionSpec`1                          | 
            <summary>
            Characterizes a T-parametric distribution specifier
            </summary>
            <typeparam name="T">The sample value type</typeparam>
        
| T:Z0.IDistributionSpec`2                          | 
            <summary>
            Characterizes a T-parametric distribution specifier reification
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="T">The sample value type</typeparam>
        
| P:Z0.IEncoded`2.Encoded                           | 
            <summary>
            The encoded data, likely in bytes
            </summary>
        
| M:Z0.IInterval`2.ToOpen                           | 
            <summary>
            Creates an open interval with endpoints from the existing interval
            </summary>
        
| M:Z0.IInterval`2.ToLeftOpen                       | 
            <summary>
            Creates a left-open/right-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.IInterval`2.ToRightClosed                    | 
            <summary>
            Creates a left-open/right-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.IInterval`2.ToRightOpen                      | 
            <summary>
            Creates a left-open/right-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.IInterval`2.ToLeftClosed                     | 
            <summary>
            Creates a left-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.IInterval`2.ToClosed                         | 
            <summary>
            Creates a closed interval with endpoints from the existing interval
            </summary>
        
| T:Z0.IInterval`1                                  | 
            <summary>
            Characterizes a contiguous segment of homogenous values that lie within
            left and right boundaries 
            </summary>
            <remarks>
            Note that extended real numbers may also serve as endpoints,enabling representations such as (-∞,3] and (-3, ∞).
            </remarks>
        
| P:Z0.IInterval`1.Left                             | 
            <summary>
             The left endpoint
            </summary>
        
| P:Z0.IInterval`1.Right                            | 
            <summary>
             The right endpoint
            </summary>
        
| T:Z0.INumeric                                     | 
            <summary>
            Chracterizes a numeric thing
            </summary>
        
| T:Z0.INumeric`1                                   | 
            <summary>
            Chracterizes a parametric numeric thing
            </summary>
        
| T:Z0.IService                                     | 
            <summary>
            Characterizes nothing but is a marker for a type that, perhaps, defines something useful to someone
            </summary>
        
| T:Z0.IService`1                                   | 
            <summary>
            Characterizes a service that extends a parametric context with operational semantics. 
            </summary>
            <typeparam name="C">The context type</typeparam>
        
| T:Z0.IServiceAllocation`1                         | 
            <summary>
            Characterizes a stateful service that requires explcit resource managment
            </summary>
            <typeparam name="C">The context type</typeparam>
        
| T:Z0.ISigned                                      | 
            <summary>
            Characterizes a signable thing
            </summary>
        
| P:Z0.ISigned.Sign                                 | 
            <summary>
            The sign of the signable thing
            </summary>
        
| T:Z0.ISigned`1                                    | 
            <summary>
            Characterizes a signable reification
            </summary>
            <typeparam name="S">The reification type</typeparam>
        
| T:Z0.ISink                                        | 
            <summary>
            Sink interface root
            </summary>
        
| T:Z0.ISink`1                                      | 
            <summary>
            Characterizes a sink that accepts a single input value
            </summary>
            <typeparam name="A">The input type</typeparam>
        
| M:Z0.ISink`1.Deposit(`0)                          | 
            <summary>
            Receives supplied input
            </summary>
            <param name="src">The input</param>
        
| M:Z0.XTend.BinaryOp``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a delegate for a binary operator f:X-&gt;X-&gt;X realized by a specified method
            </summary>
            <param name="member">The source method</param>
            <param name="host">An instance of the declaring type, if applicable</param>
            <typeparam name="X">The operand type</typeparam>
        
| M:Z0.XTend.ExtractImm8(Z0.OpIdentity)             | 
            <summary>
            Extracts an 8-bit immediate value from an identity if it contains an immediate suffix; otherwise, returns none
            </summary>
            <param name="src">The source identity</param>
        
| M:Z0.XTend.ToChar(Z0.NumericIndicator)            | 
            <summary>
            Converts a numeric indicator to a character
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.XTend.Format(Z0.NumericIndicator)            | 
            <summary>
            Producuces text in the form {'i' | 'u' | 'f'}
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.XTend.Format(Z0.NumericKind)                 | 
            <summary>
            Produces text in the form {width}{indicator}
            </summary>
            <param name="k">The source kind</param>
        
| M:Z0.XTend.Indicator(Z0.NumericKind)              | 
            <summary>
            Determines the indicator of a numeric kind
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.XTend.IsFloat(Z0.NumericKind)                | 
            <summary>
            Determines whether a numeric kind designates a floating-point type
            </summary>
            <param name="T">The type to test</param>
        
| M:Z0.XTend.IsSome(Z0.NumericKind)                 | 
            <summary>
            Determines whether a numeric kind is nonempty
            </summary>
            <param name="k">The kind to examine</param>
        
| M:Z0.XTend.IsUnsigned(Z0.NumericKind)             | 
            <summary>
            Determines whether a numeric kind designates an unsigned integral type
            </summary>
        
| M:Z0.XTend.Keyword(Z0.NumericKind)                | 
            <summary>
            Specifies the C# keyword used to designate a kind-identified numeric type
            </summary>
        
| M:Z0.XTend.KeywordNot(Z0.NumericKind)             | 
            <summary>
            Specifies the keyword not used in C# to designate a kind-identified primal type
            </summary>
        
| M:Z0.XTend.NumericId(Z0.NumericKind)              | 
            <summary>
            Determines the type identifer of a numeric kind
            </summary>
            <param name="kind">The source kind</param>
        
| M:Z0.XTend.SystemType(Z0.NumericKind)             | 
            <summary>
            Determines the system type represented by a numeric kind
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.XTend.TypeWidth(Z0.NumericKind)              | 
            <summary>
            Determines the width of a numeric kind
            </summary>
            <param name="kind">The source kind</param>
        
| M:Z0.XTend.Width(Z0.NumericKind)                  | 
            <summary>
            Determines the width of the represented kind in bits
            </summary>
            <param name="k">The kind to examine</param>
        
| M:Z0.XTend.NumericKeyword(System.Type)            | 
            <summary>
            Specifies the C# keyword used to designate a primal numeric type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.NumericKeywordNot(System.Type)         | 
            <summary>
            Specifies the keyword not used in C# to designate a primal numeric type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.NumericKind(System.Type)               | 
            <summary>
            Determines the numeric kind of a type
            </summary>
            <param name="src">The type to examine</param>
        
| M:Z0.XTend.NumericKind(System.TypeCode)           | 
            <summary>
            Determines the numeric kind of a type-code identified type
            </summary>
            <param name="tc">The type code to evaluate</param>
        
| M:Z0.XTend.IsBlocked(System.Type)                 | 
            <summary>
            Determines whether a type is classified as a blocked type via attribution
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsFixed(System.Type)                   | 
            <summary>
            Determines whether a type is classified as a fixed type via attribution
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsSegmented(System.Type)               | 
            <summary>
            Returns true if the source type is intrinsic or blocked
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.IsVector(System.Type)                  | 
            <summary>
            Determines whether a type is classified as an intrinsic vector
            </summary>
            <param name="t">The type to test</param>
        
| T:Z0.AgentIdentity                                | 
            <summary>
            Uniquely identifies an agent throughout a server complex
            </summary>    
        
| F:Z0.AgentIdentity.ServerId                       | 
            <summary>
            Uniquely identifies a server
            </summary>
        
| F:Z0.AgentIdentity.AgentId                        | 
            <summary>
            Identifies an agent relative to a server
            </summary>
        
| P:Z0.AgentIdentity.Identifier                     | 
            <summary>
            Uniquely identifies an agent by composing the host on which it resides
            and the host-relative identifier
            </summary>
        
| M:Z0.AgentIdentity.op_Implicit(System.ValueTuple{System.UInt32,System.UInt32})~Z0.AgentIdentity| 
            <summary>
            Constructs an identity from server and agent id's
            </summary>
            <param name="loc">The location of occurence</param>
            <param name="time">The time of occurrence</param>
        
| T:Z0.AgentTransition                              | 
            <summary>
            Specifies a transition that occurred 
            </summary>
        
| F:Z0.AgentTransition.Agent                        | 
            <summary>
            Specifies the agent that experienced the transition
            </summary>
        
| F:Z0.AgentTransition.Timestamp                    | 
            <summary>
            Indicates the relative time at which the transition ocurred
            </summary>
        
| F:Z0.AgentTransition.SourceState                  | 
            <summary>
            Specifies the state of the agent before the transition
            </summary>
        
| F:Z0.AgentTransition.TargetState                  | 
            <summary>
            Specifies the state of the agent ater the transition
            </summary>
        
| T:Z0.Any`1                                        | 
            <summary>
            A parametric T-equatable value
            </summary>
        
| T:Z0.BitSize                                      | 
            <summary>
            Specifies a memory size UOM in bits
            </summary>
        
| F:Z0.BitSize.Bits                                 | 
            <summary>
            Specifies a bit count
            </summary>
        
| M:Z0.BitSize.measure``1                           | 
            <summary>
            Computes the bit-size of a parametric type
            </summary>
            <typeparam name="T">The type to measure</typeparam>
        
| M:Z0.BitSize.div``1(System.Int32,``0)             | 
            <summary>
            Computes the quotient q :=  a / bitsize[T] of an operand a and parametric type T
            </summary>
            <param name="a">The operand</param>
            <typeparam name="T">The parametric type from which a bit-width will be determined</typeparam>
        
| M:Z0.BitSize.mod``1(System.Int32,``0)             | 
            <summary>
            Computes the remainder r :=  a % bitsize[T] of an operand a and parametric type T
            </summary>
            <param name="a">The operand</param>
            <typeparam name="T">The parametric type from which a bit-width will be determined</typeparam>
        
| M:Z0.BitSize.op_Explicit(Z0.BitSize)~Z0.ByteSize  | 
            <summary>
            Returns the minimum number of bytes required to apprehend 
            the size of the source bits.
            </summary>
            <param name="src">The source bits</param>
        
| P:Z0.BitSize.Empty                                | 
            <summary>
            The bit with no size
            </summary>
        
| T:Z0.ByteSize                                     | 
            <summary>
            Defines size with respect to bytes
            </summary>
        
| F:Z0.ByteSize.Count                               | 
            <summary>
            Specifies a number of bytes
            </summary>
        
| T:Z0.CorrelationToken                             | 
            <summary>
            Correlates a value with a key that uniquely identifies the value within some context
            </summary>
        
| P:Z0.CorrelationToken.Identifier                  | 
            <summary>
            The key that identifies the value
            </summary>
        
| T:Z0.NumericLiteral                               | 
            <summary>
            Defines a (boxed) numeric literal relative to a specified base
            </summary>
        
| T:Z0.NumericLiteral`1                             | 
            <summary>
            Defines a (boxed) numeric literal relative to a specified base
            </summary>
        
| T:Z0.Paired`2                                     | 
            <summary>
            A non-homogenous mutable 2-tuple
            </summary>
        
| F:Z0.Paired`2.Left                                | 
            <summary>
            The first member
            </summary>
        
| F:Z0.Paired`2.Right                               | 
            <summary>
            The second member
            </summary>
        
| M:Z0.Paired`2.As``2                               | 
            <summary>
            Interprets the pair over alternate domains
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| T:Z0.SizeAttribute                                | 
            <summary>
            Defines the size, in bytes, of the target element
            </summary>
        
| P:Z0.SizeAttribute.Size                           | 
            <summary>
            The number of bytes occupied by an instance of the targeted element
            </summary>
        
| F:Z0.IdentityPartKind.Name                        | 
            <summary>
            The unadorned subject name and the first part of the moniker
            </summary>
        
| F:Z0.IdentityPartKind.Suffix                      | 
            <summary>
            A trailing component of the form {suffix sep}{suffix name}
            </summary>
        
| F:Z0.IdentityPartKind.Numeric                     | 
            <summary>
            A numeric specifier of the form {width}{numeric_indicator}
            </summary>
            <example>
            In the identifier 'gteq_(8u,8u)' both arguments are 8-bit unsigned scalar values
            </example>
        
| F:Z0.IdentityPartKind.Segment                     | 
            <summary>
            A segmentation specifier of the form {total width}x{segment width}{numeric indicator}
            </summary>
            <example>
            in the identifier 'vnand_(v128x16u,v128x16u)', the term '128x16u' in both value arguments is a segment specifier
            </example>
        
| T:Z0.IdentityShare                                | 
            <summary>
            Defines a set of common identity-related operations
            </summary>    
        
| T:Z0.IIdentification`1                            | 
            <summary>
            Specifies what it means to be a reified identifier
            </summary>
        
| T:Z0.IIdentified                                  | 
            <summary>
            Characterizes an identifier
            </summary>
        
| P:Z0.OpIdentity.Identifier                        | 
            <summary>
            The operation identifier
            </summary>
        
| P:Z0.OpIdentity.Name                              | 
            <summary>
            The unqualified operation name
            </summary>
        
| P:Z0.OpIdentity.Suffix                            | 
            <summary>
            The identifier suffix, if any
            </summary>
        
| P:Z0.OpIdentity.IsGeneric                         | 
            <summary>
            Specifies whether the operation was reified from a generic definition 
            </summary>
        
| P:Z0.OpIdentity.HasImm                            | 
            <summary>
            Specifies whether the operation is specialized for an immediate value
            </summary>
        
| P:Z0.OpIdentity.TextComponents                    | 
            <summary>
            The moniker parts, as determined by part delimiters
            </summary>
        
| P:Z0.OpIdentity.Empty                             | 
            <summary>
            The empty identifier
            </summary>
        
| M:Z0.OpIdentity.Set(System.String)                | 
            <summary>
            Creates a moniker directly from source text
            </summary>
            <param name="src">The source text</param>
        
| F:Z0.TypeCode`1.Code                              | 
            <summary>
            A numeric value intented to uniquely identify a system-defined or user-defiend type. 
            The least 8 bits are reserved for a System.TypeCode enum value for system-defined types;
            the remaining bits are then reserved for user-defined types
            </summary>
        
| M:Z0.TypeIdentity.numeric(Z0.NumericKind)         | 
            <summary>
            Defines a scalar type identity
            </summary>
            <param name="width">The scalar bit-width</param>
        
| M:Z0.TypeIdentity.numeric``1(``0)                 | 
            <summary>
            Produces an identifier of the form {bitsize[T]}{u | i | f} for a numeric type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal type</typeparam>
        
| F:Z0.UserTypeCode`1.Code                          | 
            <summary>
            A numeric value, greater than 255, that uniquely identifies a user-defined type 
            </summary>
        
| P:Z0.UserTypeInfo.UserTypeId                      | 
            <summary>
             The identity allocated to the type
            </summary>
        
| P:Z0.UserTypeInfo.DefiningType                    | 
            <summary>
            The implementation type
            </summary>
        
| P:Z0.UserTypeInfo.IsParametric                    | 
            <summary>
            Specifies whether type arguments are required
            </summary>
        
| P:Z0.UserTypeInfo.ParameterCount                  | 
            <summary>
            The number of type arguments required
            </summary>
        
| P:Z0.UserTypeInfo`1.TypeCode                      | 
            <summary>
             The identity allocated to the type
            </summary>
        
| P:Z0.UserTypeInfo`1.DefiningType                  | 
            <summary>
            The implementation type
            </summary>
        
| P:Z0.UserTypeInfo`1.IsParametric                  | 
            <summary>
            Specifies whether type arguments are required
            </summary>
        
| P:Z0.UserTypeInfo`1.ParameterCount                | 
            <summary>
            The number of type arguments required
            </summary>
        
| T:Z0.ImmAttribute                                 | 
            <summary>
            Identifies a parameter that accepts an immediate value
            </summary>
        
| T:Z0.IArithmeticKind                              | 
            <summary>
            Characteries an arithmetic function classifier
            </summary>
        
| P:Z0.IArithmeticKind.Kind                         | 
            <summary>
            The literal identifier that will be lifted to the type-level
            </summary>
        
| T:Z0.IArithmeticKind`1                            | 
            <summary>
            Characterizes a reified arithmetic function classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IArithmeticKind`2                            | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric arithmetic operation classifier
            </summary>
            <typeparam name="F">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| P:Z0.IArithmeticKind`2.NumericKind                | 
            <summary>
            The parametrically-identified numeric kind
            </summary>
        
| T:Z0.IBitFunctionKind                             | 
            <summary>
            Characteries a bitfunction classifier
            </summary>
        
| T:Z0.IBitFunctionKind`1                           | 
            <summary>
            Characterizes a reified bitfunction classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IBitFunctionKind`2                           | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric bitfunction operation classifier
            </summary>
            <typeparam name="K">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| T:Z0.IBitLogicKind                                | 
            <summary>
            Characterizes a bitlogic operation classifier
            </summary>
        
| T:Z0.IBitLogicKind`1                              | 
            <summary>
            Characterizes a reified bitlogic operation classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IBitLogicKind`2                              | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric bitlogic operation classifier
            </summary>
            <typeparam name="F">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| P:Z0.IBitLogicKind`2.NumericKind                  | 
            <summary>
            The parametrically-identified numeric kind
            </summary>
        
| T:Z0.IBitShiftKind                                | 
            <summary>
            Characterizes a bitshift operation classifier
            </summary>
        
| T:Z0.IBitShiftKind`1                              | 
            <summary>
            Characterizes a reified bitlogic operation classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IBitShiftKind`2                              | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric bitshift operation classifier
            </summary>
            <typeparam name="K">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| P:Z0.IBitShiftKind`2.NumericKind                  | 
            <summary>
            The parametrically-identified numeric kind
            </summary>
        
| T:Z0.IComparisonKind                              | 
            <summary>
            Characterizes a bitshift operation classifier
            </summary>
        
| T:Z0.IComparisonKind`1                            | 
            <summary>
            Characterizes a reified comparison operation classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IComparisonKind`2                            | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric comparison operation classifier
            </summary>
            <typeparam name="F">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| P:Z0.IComparisonKind`2.NumericKind                | 
            <summary>
            The parametrically-identified numeric kind
            </summary>
        
| T:Z0.IBooleanPredicateKind                        | 
            <summary>
            Characteries a bitfunction classifier
            </summary>
        
| T:Z0.IBooleanPredicateKind`1                      | 
            <summary>
            Characterizes a reified bitfunction classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IBooleanPredicateKind`2                      | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric boolean predicate operation classifier
            </summary>
            <typeparam name="F">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| P:Z0.IBooleanPredicateKind`2.NumericKind          | 
            <summary>
            The parametrically-identified numeric kind
            </summary>
        
| T:Z0.ISystemOpKind                                | 
            <summary>
            Characterizes a system operation classifier
            </summary>
        
| T:Z0.ISystemOpKind`1                              | 
            <summary>
            Characterizes a reified system operation classifier
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.ISystemOpKind`2                              | 
            <summary>
            Characterizes a kind-parametric and numeric-parametric system operation classifier
            </summary>
            <typeparam name="F">The kind classifier type</typeparam>
            <typeparam name="T">The numeric type</typeparam>
        
| P:Z0.ISystemOpKind`2.NumericKind                  | 
            <summary>
            The parametrically-identified numeric kind
            </summary>
        
| M:Z0.NumericKinds.contains(Z0.NumericKind,Z0.NumericTypeId)| 
            <summary>
            Tests whether an identified type is of specified numeric kind
            </summary>
            <param name="kind">The source kind</param>
            <param name="id">The kind to match</param>
        
| M:Z0.NumericKinds.floating(Z0.NumericKind)        | 
            <summary>
            Determines whether a numeric kind designates a floating-point type
            </summary>
            <param name="T">The type to test</param>
        
| M:Z0.NumericKinds.floating``1                     | 
            <summary>
            Returns true if a parametric type is of floating-point numeric type, false otherwise
            </summary>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.NumericKinds.floating(System.Type)           | 
            <summary>
            Returns true if the source type is a primal floating point type, false otherwise
            </summary>
        
| M:Z0.NumericKinds.floating(System.Object)         | 
            <summary>
            Returns true if a value is of floating-point numeric type, false otherwise
            </summary>
        
| M:Z0.NumericKinds.indicator(Z0.NumericKind)       | 
            <summary>
            Determines the indicator of a numeric kind
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.NumericKinds.keyword(Z0.NumericKind)         | 
            <summary>
            Specifies the C# keyword used to designate a kind-identified primal type
            </summary>
        
| M:Z0.NumericKinds.nonkeyword(Z0.NumericKind)      | 
            <summary>
            Specifies the keyword not used in C# to designate a kind-identified primal type
            </summary>
        
| M:Z0.NumericKinds.kind(Z0.NumericWidth,Z0.NumericIndicator)| 
            <summary>
            Computes the numeric kind determined by a bit-width and numeric indicator
            </summary>
            <param name="nw">The type width, in bits</param>
            <param name="ni">The numeric indicator</param>
        
| M:Z0.NumericKinds.kind(System.TypeCode)           | 
            <summary>
            Determines the numeric kind identified by a type code, if any
            </summary>
            <param name="tc">The type code to evaluate</param>
        
| M:Z0.NumericKinds.kind(System.Type)               | 
            <summary>
            Determines the numeric kind of a system type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.NumericKinds.kind``1                         | 
            <summary>
            Determines the numeric kind of a parametrically-identified type
            </summary>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.NumericKinds.signed``1                       | 
            <summary>
            Returns true if a parametric type is of signed numeric type, false otherwise
            </summary>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.NumericKinds.signed(System.Type)             | 
            <summary>
            Returns true if the source type is a primal signed type, false otherwise
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.NumericKinds.signed(System.Object)           | 
            <summary>
            Returns true if a value is of signed numeric type, false otherwise
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.NumericKinds.test(System.Type)               | 
            <summary>
            Returns true if a type is a numeric type, false otherwise
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.NumericKinds.type(Z0.NumericKind)            | 
            <summary>
            Returns a kind-identified system type if possible; throws an exception otherwise
            </summary>
            <param name="k">The identifying kind</param>
        
| M:Z0.NumericKinds.unsigned(Z0.NumericKind)        | 
            <summary>
            Determines whether a numeric kind designates an unsigned integral type
            </summary>
            <typeparam name="T">The type to test</typeparam>
        
| M:Z0.NumericKinds.unsigned``1                     | 
            <summary>
            Returns true if a parametric type is of unsigned numeric type, false otherwise
            </summary>
            <typeparam name="T">The type to evaluate</typeparam>
        
| M:Z0.NumericKinds.unsigned(System.Type)           | 
            <summary>
            Returns true if a type is of unsigned numeric type, false otherwise
            </summary>
        
| M:Z0.NumericKinds.unsigned(System.Object)         | 
            <summary>
            Returns true if a value is of unsigned numeric type, false otherwise
            </summary>
        
| P:Z0.NumericKinds.i8                              | 
            <summary>
            Specifies the int8 kind
            </summary>
        
| P:Z0.NumericKinds.u8                              | 
            <summary>
            Specifies the uint8 kind
            </summary>
        
| P:Z0.NumericKinds.i16                             | 
            <summary>
            Specifies the int16 kind
            </summary>
        
| P:Z0.NumericKinds.u16                             | 
            <summary>
            Specifies the uint16 kind
            </summary>
        
| P:Z0.NumericKinds.i32                             | 
            <summary>
            Specifies the int32 kind
            </summary>
        
| P:Z0.NumericKinds.u32                             | 
            <summary>
            Specifies the uint32 kind
            </summary>
        
| P:Z0.NumericKinds.i64                             | 
            <summary>
            Specifies the int64 kind
            </summary>
        
| P:Z0.NumericKinds.u64                             | 
            <summary>
            Specifies the uint64 kind
            </summary>
        
| P:Z0.NumericKinds.f32                             | 
            <summary>
            Specifies the float32 kind
            </summary>
        
| P:Z0.NumericKinds.f64                             | 
            <summary>
            Specifies the float64 kind
            </summary>
        
| P:Z0.NumericKinds.UnsignedTypes                   | 
            <summary>
            Recognized unsigned integral types
            </summary>
        
| P:Z0.NumericKinds.UnsignedKindSeq                 | 
            <summary>
            Recognized unsigned integral kinds
            </summary>
        
| P:Z0.NumericKinds.SignedTypes                     | 
            <summary>
            Recognized signed integral kinds
            </summary>
        
| P:Z0.NumericKinds.SignedKindSeq                   | 
            <summary>
            Recognized signed integral kinds
            </summary>
        
| P:Z0.NumericKinds.IntegralTypes                   | 
            <summary>
            Recognized integral types
            </summary>
        
| P:Z0.NumericKinds.IntegralKindSeq                 | 
            <summary>
            Recognized integral kinds
            </summary>
        
| P:Z0.NumericKinds.FloatingTypes                   | 
            <summary>
            recognized floating-point types
            </summary>
        
| P:Z0.NumericKinds.FloatingKindSeq                 | 
            <summary>
            Recognized floating-point kinds
            </summary>
        
| P:Z0.NumericKinds.NumericTypes                    | 
            <summary>
            Recognized numeric types
            </summary>
        
| T:Z0.NK`1                                         | 
            <summary>
            Represents the parametrically-identified numeric kind
            </summary>
        
| T:Z0.TypeIndicator                                | 
            <summary>
            Partitions types into manageable pieces in various ways, hopefully sensible, with 16 bits
            </summary>
        
| P:Z0.TypeIndicator.Empty                          | 
            <summary>
            The nonindicating indicator
            </summary>
        
| P:Z0.TypeIndicator.Signed                         | 
            <summary>
            Identifies the signed numeric partition
            </summary>
        
| P:Z0.TypeIndicator.Unsigned                       | 
            <summary>
            Identifies the unsigned numeric partition
            </summary>
        
| P:Z0.TypeIndicator.Float                          | 
            <summary>
            Identifies the floating-point numeric partition
            </summary>
        
| P:Z0.TypeIndicator.Vector                         | 
            <summary>
            Identifies the vectorized type partition
            </summary>
        
| P:Z0.TypeIndicator.Block                          | 
            <summary>
            Identifies the block type partition
            </summary>
        
| P:Z0.TypeIndicator.Generic                        | 
            <summary>
            Identifies the generic type partition
            </summary>
        
| P:Z0.TypeIndicator.IsEmpty                        | 
            <summary>
            Specifies whether the indicator is non-indicating
            </summary>
        
| T:Z0.Emitter`1                                    | 
            <summary>
            Defines the canonical shape of an emitter
            </summary>
            <typeparam name="T">The production type</typeparam>
        
| T:Z0.Emitter`2                                    | 
            <summary>
            Defines the canonical shape of an emitter
            </summary>
            <typeparam name="T">The production type</typeparam>
            <typeparam name="C">The cell type into which the production type is segmented</typeparam>
        
| T:Z0.StreamEmitter`1                              | 
            <summary>
            Characterizes a function that produces a stream of values
            </summary>
            <param name="count">If specified, the number of elements to produce</param>
            <typeparam name="T">The emission type</typeparam>
        
| T:Z0.ValueStreamEmitter`1                         | 
            <summary>
            Characterizes a function that produces a stream of values
            </summary>
            <param name="count">If specified, the number of elements to produce</param>
            <typeparam name="T">The emission type</typeparam>
        
| T:Z0.IBoundValueSource`1                          | 
            <summary>
            Characterizes a value emitter that supports placcing upper and/or lower bounds on
            the values produced
            </summary>
            <typeparam name="T">The production value type</typeparam>
        
| M:Z0.IBoundValueSource`1.Next(`0)                 | 
            <summary>
            Retrieves the next point from the source, constrained by an upper bound
            </summary>
            <param name="max">The exclusive upper bound</param>
            <typeparam name="T">The point type</typeparam>
        
| M:Z0.IBoundValueSource`1.Next(`0,`0)              | 
            <summary>
            Retrieves the next point from the source, constrained by upper and lower bounds
            </summary>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive max value</param>
        
| T:Z0.ILimitedSource`1                             | 
            <summary>
            Characterizes an emission service taht may run out of values to emit
            </summary>
            <typeparam name="T">The emission value type</typeparam>
        
| M:Z0.ILimitedSource`1.Next                        | 
            <summary>
            Emits the next source value, if any
            </summary>
        
| T:Z0.IRngBoundPointSource`1                       | 
            <summary>
            Characterizes a random source that can produce points bounded by a range
            </summary>
            <typeparam name="T">The primal type</typeparam>
        
| T:Z0.IRngNav                                      | 
            <summary>
            Characterizes a random stream navigator
            </summary>
        
| M:Z0.IRngNav.Advance(System.UInt64)               | 
            <summary>
            Moves the stream a specified number of steps forward
            </summary>
            <param name="steps">The step count</param>
        
| M:Z0.IRngNav.Retreat(System.UInt64)               | 
            <summary>
            Moves the stream a specified number of steps backward
            </summary>
            <param name="steps">The step count</param>
        
| T:Z0.IRngNav`1                                    | 
            <summary>
            Characterizes a random source that can be navigated
            </summary>
            <typeparam name="T">The primal element type</typeparam>
        
| P:Z0.IRngSampler`1.BufferLength                   | 
            <summary>
            The length of the sampler's internal buffer
            </summary>
        
| P:Z0.IRngSampler`1.DistKind                       | 
            <summary>
            The type of distibution being sampled
            </summary>
        
| T:Z0.IRngSource                                   | 
            <summary>
            Identifies a source of random data
            </summary>
        
| P:Z0.IRngSource.RngKind                           | 
            <summary>
            Identifies the rng that drives the source
            </summary>
        
| T:Z0.IRngStream`1                                 | 
            <summary>
            Characterizes a stream of random values of parametric type
            </summary>
            <typeparam name="T">The random value type</typeparam>
        
| T:Z0.ISource                                      | 
            <summary>
            Root interface for value production services
            </summary>
        
| T:Z0.ISource`1                                    | 
            <summary>
            Characterizes an unlimited emitter that produces one element at a time
            </summary>
            <typeparam name="T">The production element type</typeparam>
        
| M:Z0.ISource`1.Next                               | 
            <summary>
            Retrieves the next item from the source
            </summary>
        
| T:Z0.IValueSource`1                               | 
            <summary>
            Characterizes an unlimited value emitter that produces one value at a time
            </summary>
            <typeparam name="T">The production value type</typeparam>
        
| T:Z0.EditorOp`1                                   | 
            <summary>
            Characterizes an operator that emits a potentially modified receipt value
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The value type</typeparam>
        
| T:Z0.RelayOp`1                                    | 
            <summary>
            Characterizes an operator that emits a value identical to that which was received
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The value type</typeparam>
        
| T:Z0.Mapper`2                                     | 
            <summary>
            Characterizes a function that produces T-values from S-values
            </summary>
            <param name="src">The source value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.UnaryOp`1                                    | 
            <summary>
            Defines the canonical shape of a unary operator
            </summary>
            <param name="a">The operand</param>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.UnaryOp`2                                    | 
            <summary>
            Characterizes a unary operator with known operand width
            </summary>
            <param name="a">The operand</param>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.BinaryOp`1                                   | 
            <summary>
            Defines the canonical shape of a binary operator
            </summary>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.BinaryOp`2                                   | 
            <summary>
            Characterizes a binary operator with known operand width
            </summary>
            <param name="a">The left operand</param>
            <param name="b">The right operand</param>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.TernaryOp`1                                  | 
            <summary>
            Defines the canonical shape of a tenary operator
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <param name="c">The third operand</param>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.TernaryOp`2                                  | 
            <summary>
            Characterizes a ternary operator with known operand width
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <param name="c">The third operand</param>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.Receiver`1                                   | 
            <summary>
            Characterizes a function that accepts an input of parametric type
            </summary>
            <typeparam name="T">The input type</typeparam>
        
| T:Z0.StreamReceiver`1                             | 
            <summary>
            Characterizes a receiver that accepts a stream
            </summary>
            <typeparam name="T">The stream element type</typeparam>
        
| T:Z0.SpanPartitioner`2                            | 
            <summary>
            Defines the signature of an operator that accepts a primal value and 
            partitions the value, or portion thereof, into segments of common length 
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target span of sufficent length to receive the partition segments</param>
            <typeparam name="S">The primal source type</typeparam>
            <typeparam name="T">The primal target type</typeparam>
        
| T:Z0.SpanEmitter`1                                | 
            <summary>
            Characterizes a function that produces spans values
            </summary>
            <typeparam name="T">The emission type</typeparam>
        
| T:Z0.SpanReceiver`1                               | 
            <summary>
            Characterizes a receiver that accepts a span
            </summary>
            <typeparam name="T">The stream element type</typeparam>
        
| T:Z0.IBinaryOp`1                                  | 
            <summary>
            Characterizes a structural binary operator
            </summary>
            <typeparam name="A">The operand type</typeparam>
        
| T:Z0.IFunc                                        | 
            <summary>
            Characterizes a function reified as a (structural) type, referred to as a (S)tructural (Func)tion
            </summary>
        
| P:Z0.IFunc.Id                                     | 
            <summary>
            The operation identity
            </summary>
        
| T:Z0.IFunc`1                                      | 
            <summary>
            Characterizes a structural emitter; that is, the contract charactrizes a type that implements an emitter
            </summary>
            <typeparam name="A">The emission type</typeparam>    
        
| T:Z0.IFunc`2                                      | 
            <summary>
            Characterizes an identified structural unary function
            </summary>
            <typeparam name="A">The first operand type</typeparam>
            <typeparam name="B">The result type</typeparam>
        
| T:Z0.IFunc`3                                      | 
            <summary>
            Characterizes an identified structural binary function
            </summary>
            <typeparam name="A">The first operand type</typeparam>
            <typeparam name="B">The second operand type</typeparam>
            <typeparam name="C">The third result type</typeparam>
        
| M:Z0.IFunc`3.Invoke(`0,`1)                        | 
            <summary>
            Invokes the reified function over supplied operands
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <param name="c">The third operand</param>
        
| T:Z0.IFunc`4                                      | 
            <summary>
            Characterizes an identified structural ternary function
            </summary>
            <typeparam name="A">The first operand type</typeparam>
            <typeparam name="B">The second operand type</typeparam>
            <typeparam name="C">The third operand type</typeparam>
            <typeparam name="D">The result type</typeparam>
        
| M:Z0.IFunc`4.Invoke(`0,`1,`2)                     | 
            <summary>
            Invokes the reified function over supplied operands
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <param name="c">The third operand</param>
        
| T:Z0.NaturalsAttribute                            | 
            <summary>
            Specifies closures over natural number types
            </summary>
        
| T:Z0.NatPairsAttribute                            | 
            <summary>
            Specifies closures over pairs of natural number types
            </summary>
        
| T:Z0.WidthAttribute                               | 
            <summary>
            Applied directly to a type, or subclassed, to specify the physical or logical type width
            </summary>
        
| P:Z0.WidthAttribute.TypeWidth                     | 
            <summary>
            The logical width of the attributed type
            </summary>
        
| T:Z0.IBitWidth                                    | 
            <summary>
            Defines an aspect that specifies a bit width
            </summary>
        
| P:Z0.IFixedWidth.FixedWidth                       | 
            <summary>
            Defines a class specifier synonym to facilitate disambiguaton
            </summary>
        
| T:Z0.INaturalized`1                               | 
            <summary>
            Characterizes a type with which a number of parametric type is associated
            </summary>
            <typeparam name="N">The natural number type</typeparam>
        
| P:Z0.INumericWidth.NumericWidth                   | 
            <summary>
            Defines a class specifier synonym to facilitate disambiguaton
            </summary>
        
| T:Z0.ISizedOpClass                                | 
            <summary>
            Characterizes an operation class that classifies width-parametric operations
            </summary>
        
| T:Z0.ISizedOpClass`1                              | 
            <summary>
            Characterizes a width-parametric operation class
            </summary>
            <typeparam name="W">The width type</typeparam>
        
| T:Z0.ISizedOpClass`2                              | 
            <summary>
            Characterizes a width-parametric operation class that is also class-parametric
            </summary>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="E">The class type</typeparam>
        
| T:Z0.ISizedOpClass`3                              | 
            <summary>
            Characterizes an operation class, parametric in both width and class, is also operand-parametric
            </summary>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="E">The class type</typeparam>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.ITypeNat                                     | 
            <summary>
            Characterizes a type-level natural number, a *typenat*
            </summary>
        
| P:Z0.ITypeNat.NatValue                            | 
            <summary>
            The number's value
            </summary>
        
| T:Z0.ITypeNat`1                                   | 
            <summary>
            Characterizes a type with which a natural number type is associated
            </summary>
            <typeparam name="T">The represented type</typeparam>
        
| T:Z0.ITypeNatF`1                                  | 
            <summary>
            Characterizes an F-bound polymorphic type nat reification
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.INatSeq                                      | 
            <summary>
            Characterizes a type-level sequence of typenats
            </summary>
        
| T:Z0.INatSeq`1                                    | 
            <summary>
            Characterizes a reified natural sequence
            </summary>
            <typeparam name="S">The reification type</typeparam>
        
| T:Z0.INatPrimitive`1                              | 
            <summary>
            Characterizes an atom of the type natural grammar
            </summary>
            <typeparam name="N">The reifying type</typeparam>
        
| T:Z0.INatNonZero                                  | 
            <summary>
            Requires that the natural representative is nonzero
            </summary>
        
| T:Z0.INatNonZero`1                                | 
            <summary>
            Requires k:K =&gt; k != 0
            </summary>
            <typeparam name="K">A nonzero natural type</typeparam>
        
| T:Z0.INatRelation`2                               | 
            <summary>
            Characterizes binary relationship between two type naturals
            </summary>
            <typeparam name="K1">The first nat type</typeparam>
            <typeparam name="K2">The second nat type</typeparam>
        
| T:Z0.INatRelation`3                               | 
            <summary>
            Characterizes ternary relationship among three type naturals
            </summary>
            <typeparam name="K1">The first nat type</typeparam>
            <typeparam name="K2">The second nat type</typeparam>
            <typeparam name="K3">The third nat type</typeparam>
        
| T:Z0.INatDivisible`2                              | 
            <summary>
            Requires k1 = n*k2 for some n&gt;= 1
            </summary>
            <typeparam name="K1">The divisible type</typeparam>
            <typeparam name="K2">The divisor type</typeparam>
        
| T:Z0.INatGt`2                                     | 
            <summary>
            Requires k1 &gt; k2
            </summary>
            <typeparam name="K1">The larger nat type</typeparam>
            <typeparam name="K2">The smaller nat type</typeparam>
        
| T:Z0.INatGtEq`2                                   | 
            <summary>
            Requires k1 &gt;= k2
            </summary>
            <typeparam name="K1">The larger nat type</typeparam>
            <typeparam name="K2">The smaller nat type</typeparam>
        
| T:Z0.INatEq`2                                     | 
            <summary>
            Requires k1 == k2
            </summary>
            <typeparam name="K1">The first nat type</typeparam>
            <typeparam name="K2">The second nat type</typeparam>
        
| T:Z0.INatNEq`2                                    | 
            <summary>
            Requires k1 != k2
            </summary>
            <typeparam name="K1">The first nat type</typeparam>
            <typeparam name="K2">The second nat type</typeparam>
        
| T:Z0.INatOdd`1                                    | 
            <summary>
            Requires k:K =&gt; k % 2 != 0
            </summary>
            <typeparam name="K">An Odd natural type</typeparam>
        
| T:Z0.INatPrime`1                                  | 
            <summary>
            Requires k prime
            </summary>
            <typeparam name="K">A prime nat type</typeparam>
        
| T:Z0.INatSeq`3                                    | 
            <summary>
            Characterizes a reified 2-term natural sequence
            </summary>
            <typeparam name="K">The reification type</typeparam>
            <typeparam name="K1">The first term</typeparam>
            <typeparam name="K2">The second term</typeparam>
        
| T:Z0.INatSeq`4                                    | 
            <summary>
            Characterizes a reified 3-term natural sequence
            </summary>
            <typeparam name="K">The reification type</typeparam>
            <typeparam name="K1">The first term</typeparam>
            <typeparam name="K2">The second term</typeparam>
            <typeparam name="K2">The third term</typeparam>
        
| P:Z0.ITypeWidth.TypeWidth                         | 
            <summary>
            Refines the specificity of the class specifier
            </summary>
        
| P:Z0.IVectorWidth.VectorWidth                     | 
            <summary>
            Defines a class specifier synonym to facilitate disambiguaton
            </summary>
        
| T:Z0.TxN`1                                        | 
            <summary>
            Identifies a parametric type
            </summary>
        
| T:Z0.TxN`2                                        | 
            <summary>
            Identifies a pair of parametric types
            </summary>
        
| T:Z0.TxN`3                                        | 
            <summary>
            Identifies a triple of parametric types
            </summary>
        
| T:Z0.TxN`4                                        | 
            <summary>
            Identifies a quartet of parametric types
            </summary>
        
| T:Z0.TxN`5                                        | 
            <summary>
            Identifies a quintent of parametric types
            </summary>
        
| T:Z0.TxN`6                                        | 
            <summary>
            Identifies a sextet of parametric types
            </summary>
        
| T:Z0.TxN`7                                        | 
            <summary>
            Identifies a septet of parametric types
            </summary>
        
| T:Z0.TxN`8                                        | 
            <summary>
            Identifies an octet of parametric types
            </summary>
        
| M:Z0.Widths.bits``1                               | 
            <summary>
            Computes the number of bits occupied by an instance of a parametrically-identified type
            </summary>
            <typeparam name="T">The measurable type</typeparam>
        
| M:Z0.Widths.blocked(System.Type)                  | 
            <summary>
            Determines the attributed width of a blocked type
            </summary>
            <param name="src">The source type</param>        
        
| M:Z0.Widths.bytes``1                              | 
            <summary>
            Computes the number of bytes occupied by an instance of a parametrically-identified type
            </summary>
            <typeparam name="T">The measurable type</typeparam>
        
| M:Z0.Widths.cells``2                              | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of width W
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W8)                       | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W16)                      | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W32)                      | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W64)                      | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W128)                     | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W256)                     | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W512)                     | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.cells``1(Z0.W1024)                    | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of specified width
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Widths.data``1                               | 
            <summary>
            Computes the literal data width from a parametric width
            </summary>
            <typeparam name="W">The parametric width</typeparam>
        
| M:Z0.Widths.divine(System.Type)                   | 
            <summary>
            Divines the bit-width of a specified type, if possible
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.Widths.tfixed(System.Type)                   | 
            <summary>
            Determines the attributed width of a fixed type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.Widths.numeric``1(``0)                       | 
            <summary>
            Computes the literal numeric width from a parametric width
            </summary>
            <typeparam name="W">The parametric width</typeparam>
        
| M:Z0.Widths.div``2(``0,``1)                       | 
            <summary>
            Computes k := width[W] / bitsize[T]
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The bit width type</typeparam>
        
| M:Z0.Widths.segmented(System.Type)                | 
            <summary>
            Determines the width of a (known) segmented type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.Widths.type``1(``0)                          | 
            <summary>
            Computes the literal type width from a parametric width
            </summary>
            <typeparam name="W">The parametric width</typeparam>
        
| M:Z0.Widths.vector(System.Type)                   | 
            <summary>
            Determines the width of a system-defined or custom intrinsic vector type
            </summary>
            <param name="t">The source type</param>
        
| P:Z0.SegmentedAttribute.CellWidths                | 
            <summary>
            Specifies the potential cell widths of a segmented type
            </summary>
        
| T:Z0.IWidth`1                                     | 
            <summary>
            A trait that attaches a width to a realization
            </summary>
            <typeparam name="W">The width type</typeparam>
        
| T:Z0.VectorAttribute                              | 
            <summary>
            Applied to a user-defined type to identify it as an intrinsic vector (or, rather, should be treated/classified as one)
            </summary>
        
