Method      | Z0.Blocks.aligned``1(Z0.W8,System.Int32)                              | Determines whether a specified number of elements can be evenly covered by 8-bit blocks
Method      | Z0.Blocks.aligned``1(Z0.W16,System.Int32)                             | Determines whether a specified number of elements can be evenly covered by 16-bit blocks
Method      | Z0.Blocks.aligned``1(Z0.W32,System.Int32)                             | Determines whether a specified number of elements can be evenly covered by 32-bit blocks
Method      | Z0.Blocks.aligned``1(Z0.W64,System.Int32)                             | Determines whether a specified number of elements can be evenly covered by 64-bit blocks
Method      | Z0.Blocks.aligned``1(Z0.W128,System.Int32)                            | Determines whether a specified number of elements can be evenly covered by 128-bit blocks
Method      | Z0.Blocks.aligned``1(Z0.W256,System.Int32)                            | Determines whether a specified number of elements can be evenly covered by 256-bit blocks
Method      | Z0.Blocks.aligned``1(Z0.W512,System.Int32)                            | Determines whether a specified number of elements can be evenly covered by 512-bit blocks
Method      | Z0.Blocks.alloc``1(Z0.W8)                                             | Allocates a single 8-bit block
Method      | Z0.Blocks.alloc``1(Z0.W16)                                            | Allocates a single 16-bit block
Method      | Z0.Blocks.alloc``1(Z0.W32)                                            | Allocates a single 32-bit block
Method      | Z0.Blocks.alloc``1(Z0.W64)                                            | Allocates a single 64-bit block
Method      | Z0.Blocks.alloc``1(Z0.W128)                                           | Allocates a single 128-bit block over cells of parametric kind
Method      | Z0.Blocks.alloc``1(Z0.W256)                                           | Allocates a single 256-bit block
Method      | Z0.Blocks.alloc``1(Z0.W512)                                           | Allocates a single 512-bit block
Method      | Z0.Blocks.alloc``1(Z0.W8,System.Int32,``0)                            | Allocates a specified number of 8-bit blocks, filled with an optional pattern
Method      | Z0.Blocks.alloc``1(Z0.W16,System.Int32,``0)                           | Allocates a specified number of 16-bit blocks, filled with an optional pattern
Method      | Z0.Blocks.alloc``1(Z0.W32,System.Int32,``0)                           | Allocates a specified number of 32-bit blocks, filled with an optional pattern
Method      | Z0.Blocks.alloc``1(Z0.W64,System.Int32,``0)                           | Allocates a specified number of 64-bit blocks, filled with an optional pattern
Method      | Z0.Blocks.alloc``1(Z0.W128,System.Int32,``0)                          | Allocates a specified number of 128-bit blocks
Method      | Z0.Blocks.alloc``1(Z0.W256,System.Int32,``0)                          | Allocates a specified number of 256-bit blocks
Method      | Z0.Blocks.alloc``1(Z0.W512,System.Int32,``0)                          | Allocates a specified number of 512-bit blocks
Method      | Z0.Blocks.alloc``1(Z0.BlockedKind{Z0.W256,``0},System.Int32)          | Allocates a single 256-bit block over cells of parametric kind
Method      | Z0.Blocks.bitcount(System.Int32,System.Int32)                         | Computes the number of bits covered by a specified cell count and width
Method      | Z0.Blocks.bitcount``1(System.Int32)                                   | Computes  the number of bits covered by a specified cell count of parametric type
Method      | Z0.Blocks.bitcover(System.Int32,System.Int32)                         | Computes the number of blocks required to cover a specified number of bits
Method      | Z0.Blocks.bitcover``1(System.Int32)                                   | Computes the number of blocks required to cover a specified number of bits
Method      | Z0.Blocks.blockcount``1(Z0.W8,System.Int32)                           | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W16,System.Int32)                          | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W32,System.Int32)                          | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W64,System.Int32)                          | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W128,System.Int32)                         | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W256,System.Int32)                         | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W512,System.Int32)                         | Computes the whole number of blocks that cover a specified count of T-cells
Method      | Z0.Blocks.blockcount``1(Z0.W8,System.Int32,System.Int32@)             | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``1(Z0.W16,System.Int32,System.Int32@)            | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``1(Z0.W32,System.Int32,System.Int32@)            | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``1(Z0.W64,System.Int32,System.Int32@)            | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``1(Z0.W128,System.Int32,System.Int32@)           | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``1(Z0.W256,System.Int32,System.Int32@)           | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``1(Z0.W512,System.Int32,System.Int32@)           | Computes the whole number of blocks that cover a specified count of T-cells            and reveals the number of cells that remain uncovered
Method      | Z0.Blocks.blockcount``3(Z0.N256)                                      | Computes the minimum number of 256-bit blocks that can hold a table of data
Method      | Z0.Blocks.blockcount``3(Z0.W512)                                      | Computes the minimum number of 512-bit blocks that can hold a table of data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block8{``0}@)                           | Fills a target block with replicated cell data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block16{``0}@)                          | Fills a target block with replicated cell data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block32{``0}@)                          | Fills a target block with replicated cell data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block64{``0}@)                          | Fills a target block with replicated cell data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block128{``0}@)                         | Fills a target block with replicated cell data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block256{``0}@)                         | Fills a target block with replicated cell data
Method      | Z0.Blocks.broadcast``1(``0,Z0.Block512{``0}@)                         | Fills a target block with replicated cell data
Method      | Z0.Blocks.bytecount(System.Int32,System.Int32)                        | Computes the number of bytes covered by a specified cell count and width
Method      | Z0.Blocks.bytecount``1(System.Int32)                                  | Computes  the number of bytes covered by a specified cell count of parametric type
Method      | Z0.Blocks.cellalloc``1(Z0.W8,System.Int32)                            | Allocates a sequence of 8-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellalloc``1(Z0.W16,System.Int32)                           | Allocates a sequence of 16-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellalloc``1(Z0.W32,System.Int32)                           | Allocates a sequence of 32-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellalloc``1(Z0.W64,System.Int32)                           | Allocates a sequence of 64-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellalloc``1(Z0.W128,System.Int32)                          | Allocates a sequence of 128-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellalloc``1(Z0.W256,System.Int32)                          | Allocates a sequence of 256-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellalloc``1(Z0.W512,System.Int32)                          | Allocates a sequence of 512-bit blocks sufficient to cover a specified number of cells
Method      | Z0.Blocks.cellblocks``1(Z0.W8,System.Int32)                           | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellblocks``1(Z0.W16,System.Int32)                          | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellblocks``1(Z0.W32,System.Int32)                          | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellblocks``1(Z0.W64,System.Int32)                          | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellblocks``1(Z0.W128,System.Int32)                         | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellblocks``1(Z0.W256,System.Int32)                         | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellblocks``1(Z0.W512,System.Int32)                         | Calculates the number of cells that comprise a specified number of blocks
Method      | Z0.Blocks.cellcover``1(Z0.W8,System.Int32)                            | Computes the minimum number of 8-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``1(Z0.W16,System.Int32)                           | Computes the minimum number of 32-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``1(Z0.W32,System.Int32)                           | Computes the minimum number of 32-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``1(Z0.W64,System.Int32)                           | Computes the minimum number of 64-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``1(Z0.W128,System.Int32)                          | Computes the minimum number of 128-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``1(Z0.W256,System.Int32)                          | Computes the minimum number of 256-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``1(Z0.W512,System.Int32)                          | Computes the minimum number of 512-bit blocks required to cover a specified number of cells
Method      | Z0.Blocks.cellcover``4(``0,``1,``2,``3)                               | Computes the minimum numbet of W-blocks over T-cells required to cover a grid of natural dimensions MxN
Method      | Z0.Blocks.cells(Z0.W8,System.Byte)                                    | Creates a 8-bit blocked container from 1 8-bit cell
Method      | Z0.Blocks.cells(Z0.W16,System.UInt16)                                 | Creates a 16-bit blocked container from 1 16-bit cell
Method      | Z0.Blocks.cells(Z0.W16,System.UInt64)                                 | Creates a 16-bit blocked container from 1 64-bit cell
Method      | Z0.Blocks.cells(Z0.W32,System.UInt64)                                 | Creates a 32-bit blocked container from 1 64-bit cell
Method      | Z0.Blocks.cells(Z0.W32,System.Byte,System.Byte,System.Byte,System.Byte)| Creates a 32-bit blocked container from 4 8-bit cells
Method      | Z0.Blocks.cells(Z0.W32,System.UInt16,System.UInt16)                   | Creates a 32-bit blocked container from 2 16-bit cells
Method      | Z0.Blocks.cells(Z0.W32,System.UInt32)                                 | Creates a 32-bit blocked container from 1 32-bit cell
Method      | Z0.Blocks.cells(Z0.W64,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| Creates a 64-bit blocked container from 8 8-bit cells
Method      | Z0.Blocks.cells(Z0.W64,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| Creates a 64-bit blocked container from 4 16-bit cells
Method      | Z0.Blocks.cells(Z0.W64,System.UInt32,System.UInt32)                   | Creates a 64-bit data block from 2 32-bit cells
Method      | Z0.Blocks.cells(Z0.W64,System.UInt64)                                 | Creates a 64-bit data block from 1 64-bit cell
Method      | Z0.Blocks.cells(Z0.W128,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| Creates a 128-bit blocked span from 8-bit cells
Method      | Z0.Blocks.cells(Z0.W128,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| Creates a 128-bit blocked span from 16-bit cells
Method      | Z0.Blocks.cells(Z0.W128,System.UInt32,System.UInt32,System.UInt32,System.UInt32)| Creates a 128-bit blocked span from 4 32-bit cells
Method      | Z0.Blocks.cells(Z0.W128,System.UInt64,System.UInt64)                  | Creates a 128-bit blocked container from 2 64-bit cells
Method      | Z0.Blocks.cells(Z0.W256,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)| Creates a 256-bit blocked container from 32 8-bit cells
Method      | Z0.Blocks.cells(Z0.W256,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| Creates a 256-bit blocked container from 16 16-bit cells
Method      | Z0.Blocks.cells(Z0.W256,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)| Creates a 256-bit blocked container from 8 32-bit cells
Method      | Z0.Blocks.cells(Z0.W256,System.UInt64,System.UInt64,System.UInt64,System.UInt64)| Creates a 256-bit blocked container from 4 64-bit cells
Method      | Z0.Blocks.cells(Z0.W512,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)| Creates a 512-bit blocked container from 8 64-bit cells
Method      | Z0.Blocks.cells(Z0.W512,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)| Creates a 512-bit blocked container from 16 32-bit cells
Method      | Z0.Blocks.cellsize``1                                                 | Calculates the number of bytes required to represent a block constituent
Method      | Z0.Blocks.convert``2(Z0.Block128{``0})                                | If possible, applies the conversion S -&gt; T for each cell in the source block
Method      | Z0.Blocks.convert``2(Z0.Block256{``0})                                | If possible, applies the conversion S -&gt; T for each cell in the source block
Method      | Z0.Blocks.convert``2(Z0.Block512{``0})                                | If possible, applies the conversion S -&gt; T for each cell in the source block
Method      | Z0.Blocks.init``1(Z0.W8,System.Span{``0})                             | Loads a single 16-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.init``1(Z0.W16,System.Span{``0})                            | Loads a single 16-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.init``1(Z0.W32,System.Span{``0})                            | Loads a single 32-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.init``1(Z0.W64,System.Span{``0})                            | Loads a single 64-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.init``1(Z0.W128,System.Span{``0})                           | Loads a single 128-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.init``1(Z0.W256,System.Span{``0})                           | Loads a single 256-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.init``1(Z0.W512,System.Span{``0})                           | Loads a single 512-bit block from the leading elements of a source span (unchecked)
Method      | Z0.Blocks.length``1(Z0.W8,``0)                                        | Computes the number of cells that comprise a single 8-bit block
Method      | Z0.Blocks.length``1(Z0.W16,``0)                                       | Computes the number of cells that comprise a single 16-bit block
Method      | Z0.Blocks.length``1(Z0.W32,``0)                                       | Computes the number of cells that comprise a single 32-bit block
Method      | Z0.Blocks.length``1(Z0.W64,``0)                                       | Computes the number of elements that comprise a single 64-bit block
Method      | Z0.Blocks.length``1(Z0.W128,``0)                                      | Computes the number of elements that comprise a single 128-bit block
Method      | Z0.Blocks.length``1(Z0.W256,``0)                                      | Computes the number of elements that comprise a 256-bit block
Method      | Z0.Blocks.length``1(Z0.W512,``0)                                      | Computes the number of elements that comprise a 512-bit block
Method      | Z0.Blocks.length``2(``0,``1)                                          | Computes the number of T-cells that comprise an N-block
Method      | Z0.Blocks.length``2(Z0.Block128{``0},Z0.Block128{``1},System.String,System.String,System.Nullable{System.Int32})| Returns the length of equal-length blocks; otherwise raises an error
Method      | Z0.Blocks.length``2(Z0.Block256{``0},Z0.Block256{``1},System.String,System.String,System.Nullable{System.Int32})| Returns the length of equal-length blocks; otherwise raises an error
Method      | Z0.Blocks.length``2(Z0.Block512{``0},Z0.Block512{``1},System.String,System.String,System.Nullable{System.Int32})| Returns the length of equal-length blocks; otherwise raises an error
Method      | Z0.Blocks.load``1(Z0.W8,System.Span{``0},System.Int32)                | Loads 8-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W16,System.Span{``0},System.Int32)               | Loads 16-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W32,System.Span{``0},System.Int32)               | Loads 32-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W64,System.Span{``0},System.Int32)               | Loads 64-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W128,System.Span{``0},System.Int32)              | Loads 128-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W256,System.Span{``0},System.Int32)              | Loads 256-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W512,System.Span{``0},System.Int32)              | Loads 256-bit segments from a span, raising an error if said source does not evenly partition
Method      | Z0.Blocks.load``1(Z0.W8,``0@,System.Int32)                            | Loads a specified count of 8-bit blocks from a reference
Method      | Z0.Blocks.load``1(Z0.W16,``0@)                                        | Loads a single 16-bit block from a reference
Method      | Z0.Blocks.load``1(Z0.W16,``0@,System.Int32)                           | Loads a specified count of 16-bit blocks from a reference
Method      | Z0.Blocks.load``1(Z0.W32,``0@)                                        | Loads a single 32-bit block from a reference
Method      | Z0.Blocks.load``1(Z0.W32,``0@,System.Int32)                           | Loads a specified count of 32-bit block from a reference
Method      | Z0.Blocks.load``1(Z0.W64,``0@)                                        | Loads a single 64-bit block from a reference
Method      | Z0.Blocks.load``1(Z0.W64,``0@,System.Int32)                           | Loads a specified count of 64-bit blocks from a reference
Method      | Z0.Blocks.load``1(Z0.W128,``0@)                                       | Loads a single 128-bit block from a reference
Method      | Z0.Blocks.load``1(Z0.W128,``0@,System.Int32)                          | Loads a specified count of 128-bit blocks from a reference
Method      | Z0.Blocks.load``1(Z0.W256,``0@)                                       | Loads a single 256-bit block from a reference
Method      | Z0.Blocks.load``1(Z0.W256,``0@,System.Int32)                          | Loads a specified count of 256-bit block sfrom a reference
Method      | Z0.Blocks.load``1(Z0.W512,``0@)                                       | Loads a single 512-bit blocks from a reference
Method      | Z0.Blocks.load``1(Z0.W512,``0@,System.Int32)                          | Loads a specified count of 512-bit blocks from a reference
Method      | Z0.Blocks.parts``1(Z0.W8,``0[])                                       | Creates a sequence of 8-bit blocks from a parameter array and raises an error if the data source is not block-aligned
Method      | Z0.Blocks.parts``1(Z0.W16,``0[])                                      | Creates 16-bit blocked container from a parameter array and raises an error if the data source is not block-aligned
Method      | Z0.Blocks.parts``1(Z0.W32,``0[])                                      | Creates 32-bit blocked span from a parameter array and raises an error if the data source is not block-aligned
Method      | Z0.Blocks.parts``1(Z0.W64,``0[])                                      | Creates 64-bit blocked span from a parameter array and raises an error if the data source is not block-aligned
Method      | Z0.Blocks.parts``1(Z0.W128,``0[])                                     | Creates 128-bit blocked span from a parameter array and raises an error if the data source is improperly blocked
Method      | Z0.Blocks.parts``1(Z0.W256,``0[])                                     | Creates 256-bit blocked span from a parameter array and raises an error if the data source is improperly blocked
Method      | Z0.Blocks.parts``1(Z0.W512,``0[])                                     | Creates 512-bit blocked span from a parameter array and raises an error if the data source is improperly blocked
Method      | Z0.Blocks.pvoid``1(``0@)                                              | Converts a generic reference into a void pointer
Method      | Z0.Blocks.ptr``1(``0@)                                                | Presents generic reference as a generic pointer
Method      | Z0.Blocks.ptr``1(Z0.Block16{``0}@)                                    | Returns a generic pointer to the leading cell of the first block of a 16-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block32{``0}@)                                    | Returns a generic pointer to the leading cell of the first block of a 32-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block64{``0}@)                                    | Returns a generic pointer to the leading cell of the first block of a 64-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block128{``0}@)                                   | Returns a generic pointer to the leading cell of the first block of a 128-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block256{``0}@)                                   | Returns a generic pointer to the leading cell of the first block of a 256-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block16{``0}@,System.Int32)                       | Returns a generic pointer to the leading cell of an index-identified block of a 16-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block32{``0}@,System.Int32)                       | Returns a generic pointer to the leading cell of an index-identified block of a 32-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block64{``0}@,System.Int32)                       | Returns a generic pointer to the leading cell of an index-identified block of a 64-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block128{``0}@,System.Int32)                      | Returns a generic pointer to the leading cell of an index-identified block of a 128-bit blocked container
Method      | Z0.Blocks.ptr``1(Z0.Block256{``0}@,System.Int32)                      | Returns a generic pointer to the leading cell of an index-identified block of a 256-bit blocked container
Method      | Z0.Blocks.rectangle``1(Z0.W8,System.Int32,System.Int32)               | Allocates the minimum number of blocks required to block-align tabular data in 8-bit blocks
Method      | Z0.Blocks.rectangle``1(Z0.W16,System.Int32,System.Int32)              | Allocates the minimum number of blocks required to block-align tabular data in 16-bit blocks
Method      | Z0.Blocks.rectangle``1(Z0.W32,System.Int32,System.Int32)              | Allocates the minimum number of blocks required to block-align tabular data in 32-bit blocks
Method      | Z0.Blocks.rectangle``1(Z0.W64,System.Int32,System.Int32)              | Allocates the minimum number of blocks required to block-align tabular data in 64-bit blocks
Method      | Z0.Blocks.rectangle``1(Z0.W128,System.Int32,System.Int32)             | Allocates the minimum number of blocks required to block-align tabular data in 64-bit blocks
Method      | Z0.Blocks.rectangle``1(Z0.W256,System.Int32,System.Int32)             | Allocates the minimum number of blocks required to block-align tabular data in 256-bit blocks
Method      | Z0.Blocks.reference``1(Z0.Block8{``0}@,System.Int32)                  | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.reference``1(Z0.Block16{``0}@,System.Int32)                 | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.reference``1(Z0.Block32{``0}@,System.Int32)                 | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.reference``1(Z0.Block64{``0}@,System.Int32)                 | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.reference``1(Z0.Block128{``0}@,System.Int32)                | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.reference``1(Z0.Block256{``0}@,System.Int32)                | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.reference``1(Z0.Block512{``0}@,System.Int32)                | Returns a reference to the leading cell of an index-identified block
Method      | Z0.Blocks.safeload``1(Z0.W8,System.Span{``0})                         | Loads a sequence of 16-bit blocks from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.safeload``1(Z0.W16,System.Span{``0})                        | Loads a sequence of 16-bit blocks from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.safeload``1(Z0.W32,System.Span{``0})                        | Loads 32-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.safeload``1(Z0.W64,System.Span{``0})                        | Loads 64-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.safeload``1(Z0.W128,System.Span{``0})                       | Loads 128-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.safeload``1(Z0.W256,System.Span{``0})                       | Loads 256-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.safeload``1(Z0.W512,System.Span{``0})                       | Loads 512-bit blocked span from an unblocked span, reallocating if the source span isn't properly blocked
Method      | Z0.Blocks.single``1(Z0.W8)                                            | Allocates a single 8-bit block
Method      | Z0.Blocks.single``1(Z0.W16)                                           | Allocates a single 16-bit block
Method      | Z0.Blocks.single``1(Z0.W32)                                           | Allocates a single 32-bit block
Method      | Z0.Blocks.single``1(Z0.W64)                                           | Allocates a single 64-bit block
Method      | Z0.Blocks.single``1(Z0.W128)                                          | Allocates a single 128-bit block
Method      | Z0.Blocks.single``1(Z0.W256)                                          | Allocates a single 256-bit block
Method      | Z0.Blocks.single``1(Z0.W512)                                          | Allocates a single 512-bit block
Method      | Z0.Blocks.square``1(Z0.W8,System.Int32)                               | Allocates the minimum number of blocks required to block-align tabular data of square dimension in 32-bit blocks
Method      | Z0.Blocks.square``1(Z0.W16,System.Int32)                              | Allocates the minimum number of blocks required to block-align tabular data of square dimension in 32-bit blocks
Method      | Z0.Blocks.square``1(Z0.W32,System.Int32)                              | Allocates the minimum number of blocks required to block-align tabular data of square dimension in 32-bit blocks
Method      | Z0.Blocks.square``1(Z0.W64,System.Int32)                              | Allocates the minimum number of blocks required to block-align tabular data of square dimension in 64-bit blocks
Method      | Z0.Blocks.square``1(Z0.W128,System.Int32)                             | Allocates the minimum number of blocks required to block-align tabular data of square dimension in 128-bit blocks
Method      | Z0.Blocks.square``1(Z0.W256,System.Int32)                             | Allocates the minimum number of blocks required to block-align tabular data of square dimension in 256-bit blocks
Method      | Z0.Blocks.stats(System.Int32,System.Int32,System.Int32)               | Calculates memory block statistics for specified parameters
Method      | Z0.Blocks.stats``1(System.Int32,System.Int32)                         | Calculates memory block statistics for specified function and type parameters
Method      | Z0.Blocks.stats``2(System.Int32,``0,``1)                              | Calculates memory block statistics for specified function and type parameters
Method      | Z0.Blocks.store(System.UInt64,Z0.Block8{System.Byte}@)                | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt64,Z0.Block16{System.Byte}@)               | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt64,Z0.Block32{System.Byte}@)               | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt64,Z0.Block64{System.Byte}@)               | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt64,Z0.Block64{System.UInt16}@)             | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt64,Z0.Block64{System.UInt32}@)             | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt32,Z0.Block32{System.Byte}@)               | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store(System.UInt16,Z0.Block16{System.Byte}@)               | Stores the source value to the leading target cell blocks
Method      | Z0.Blocks.store``1(System.Byte@,Z0.Block256{``0}@,System.Int32,System.Int32)| Writes a specified number of bytes to a block beginning at a byte-relative offset
Method      | Z0.Blocks.store``1(System.Byte@,Z0.Block512{``0}@,System.Int32,System.Int32)| Writes a specified number of bytes to a block beginning at a byte-relative offset
Method      | Z0.Blocks.unsafeload``1(Z0.W8,System.Span{``0})                       | Loads a span into a blocked container without checks
Method      | Z0.Blocks.unsafeload``1(Z0.W16,System.Span{``0})                      | Loads a span into a blocked container without checks
Method      | Z0.Blocks.unsafeload``1(Z0.W32,System.Span{``0})                      | Loads a span into a blocked container without checks
Method      | Z0.Blocks.unsafeload``1(Z0.W64,System.Span{``0})                      | Loads a span into a blocked container without checks
Method      | Z0.Blocks.unsafeload``1(Z0.W128,System.Span{``0})                     | Loads a span into a blocked container without checks
Method      | Z0.Blocks.unsafeload``1(Z0.W256,System.Span{``0})                     | Loads a span into a blocked container without checks
Method      | Z0.Blocks.unsafeload``1(Z0.W512,System.Span{``0})                     | Loads a span into a blocked container without checks
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W8)                         | Constructs a 32-bit blocked span from an unblocked span
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W16)                        | Constructs a 32-bit blocked span from an unblocked span
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W32)                        | Constructs a 32-bit blocked span from an unblocked span
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W64)                        | Constructs a 16-bit blocked span from an unblocked span
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W128)                       | Constructs a 128-bit blocked span from an unblocked span
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W256)                       | Constructs a 128-bit blocked span from an unblocked span
Method      | Z0.XBlocks.Blocked``1(System.Span{``0},Z0.W512)                       | Constructs a 128-bit blocked span from an unblocked span
Method      | Z0.XBlocks.BlockRef``1(Z0.Block8{``0}@,System.Int32)                  | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.BlockRef``1(Z0.Block16{``0}@,System.Int32)                 | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.BlockRef``1(Z0.Block32{``0}@,System.Int32)                 | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.BlockRef``1(Z0.Block64{``0}@,System.Int32)                 | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.BlockRef``1(Z0.Block128{``0}@,System.Int32)                | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.BlockRef``1(Z0.Block256{``0}@,System.Int32)                | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.BlockRef``1(Z0.Block512{``0}@,System.Int32)                | Returns a reference to the leading cell of an index-identified block
Method      | Z0.XBlocks.FormatHex``1(Z0.Block8{``0},System.Char,System.Boolean)    | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.FormatHex``1(Z0.Block16{``0},System.Char,System.Boolean)   | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.FormatHex``1(Z0.Block32{``0},System.Char,System.Boolean)   | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.FormatHex``1(Z0.Block64{``0},System.Char,System.Boolean)   | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.FormatHex``1(Z0.Block128{``0},System.Char,System.Boolean)  | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.FormatHex``1(Z0.Block256{``0},System.Char,System.Boolean)  | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.FormatHex``1(Z0.Block512{``0},System.Char,System.Boolean)  | Formats blocked content as a sequence of hex values
Method      | Z0.XBlocks.HiBlock``1(Z0.Block128{``0}@,System.Int32)                 | Extracts the upper half of an index-identified block
Method      | Z0.XBlocks.LoBlock``1(Z0.Block128{``0}@,System.Int32)                 | Extracts the lower half of an index-identified block
Method      | Z0.XBlocks.Reblock``1(Z0.Block32{``0}@,Z0.W16)                        | Converts 64-bit blocks to 32-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block64{``0}@,Z0.W32)                        | Converts 64-bit blocks to 32-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block128{``0}@,Z0.W16)                       | Converts 128-bit blocks to 16-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block128{``0}@,Z0.W32)                       | Converts 128-bit blocks to 32-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block128{``0}@,Z0.W64)                       | Converts 128-bit blocks to 64-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W16)                       | Converts 256-bit blocks to 16-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W32)                       | Converts 256-bit blocks to 32-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W64)                       | Converts 256-bit blocks to 64-bit blocks without allocation
Method      | Z0.XBlocks.Reblock``1(Z0.Block256{``0}@,Z0.W128)                      | Converts 256-bit blocks to 64-bit blocks without allocation
Method      | Z0.XBlocks.Replicate``1(Z0.Block8{``0}@)                              | Clones a 32-bit blocked container
Method      | Z0.XBlocks.Replicate``1(Z0.Block16{``0}@)                             | Clones a 32-bit blocked container
Method      | Z0.XBlocks.Replicate``1(Z0.Block32{``0}@)                             | Clones a 32-bit blocked container
Method      | Z0.XBlocks.Replicate``1(Z0.Block64{``0}@)                             | Clones a blocked span
Method      | Z0.XBlocks.Replicate``1(Z0.Block128{``0}@)                            | Clones a blocked span
Method      | Z0.XBlocks.Replicate``1(Z0.Block256{``0}@)                            | Clones a 256-bit data block
Method      | Z0.XBlocks.Replicate``1(Z0.Block512{``0}@)                            | Clones a 512-bit data block
Method      | Z0.XBlocks.Slice``1(Z0.Block8{``0}@,System.Int32)                     | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block8{``0}@,System.Int32,System.Int32)        | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block16{``0}@,System.Int32)                    | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block16{``0}@,System.Int32,System.Int32)       | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block32{``0}@,System.Int32)                    | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block32{``0}@,System.Int32,System.Int32)       | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block64{``0}@,System.Int32)                    | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block64{``0}@,System.Int32,System.Int32)       | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block128{``0}@,System.Int32)                   | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block128{``0}@,System.Int32,System.Int32)      | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block256{``0}@,System.Int32)                   | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block256{``0}@,System.Int32,System.Int32)      | Slices a blocked data source at the cellular level
Method      | Z0.XBlocks.Slice``1(Z0.Block512{``0}@,System.Int32,System.Int32)      | Slices a blocked data source at the cellular level
Method      | Z0.XTend.FormatHex``2(Z0.NatSpan{``0,``1},System.Char,System.Boolean) | Formats a span of natural length and integral type as a sequence of hex values
Method      | Z0.XTend.FormatList``2(Z0.NatSpan{``0,``1},System.Char,System.Int32,System.Int32)| Formats a span of natural length as a delimited list
Method      | Z0.XTend.Format``1(Z0.Block8{``0},System.Char,System.Int32)           | Formats blocked content
Method      | Z0.XTend.Format``1(Z0.Block16{``0},System.Char,System.Int32)          | Formats blocked content
Method      | Z0.XTend.Format``1(Z0.Block32{``0},System.Char,System.Int32)          | Formats blocked content
Method      | Z0.XTend.Format``1(Z0.Block64{``0},System.Char,System.Int32)          | Formats blocked content
Method      | Z0.XTend.Format``1(Z0.Block128{``0},System.Char,System.Int32)         | Formats blocked content
Method      | Z0.XTend.Format``1(Z0.Block256{``0},System.Char,System.Int32)         | Formats blocked content
Method      | Z0.XTend.Format``1(Z0.Block512{``0},System.Char,System.Int32)         | Formats blocked content
Type        | Z0.BlockStats                                                         | Captures memory block statistics
Field       | Z0.BlockStats.BlockCount                                              | The number of blocks being described
Field       | Z0.BlockStats.BlockWidth                                              | The bit-width of a block
Field       | Z0.BlockStats.CellWidth                                               | The bit-width of a cell
Field       | Z0.BlockStats.BlockLength                                             | The number of cells in a block
Field       | Z0.BlockStats.CellCount                                               | The total number of covered cells
Property    | Z0.BlockStats.BitCount                                                | The total number of covered bits
Type        | Z0.BlockStats`1                                                       | Captures statistics for memory blocks over generic T-cells
Field       | Z0.BlockStats`1.BlockCount                                            | The number of blocks being described
Field       | Z0.BlockStats`1.BlockWidth                                            | The bit-width of a block
Field       | Z0.BlockStats`1.CellWidth                                             | The bit-width of a cell
Field       | Z0.BlockStats`1.BlockLength                                           | The number of cells in a block
Field       | Z0.BlockStats`1.CellCount                                             | The total number of covered cells
Property    | Z0.BlockStats`1.BitCount                                              | The total number of covered bits
Type        | Z0.BlockStats`2                                                       | Captures memory block statistics for blocks of natural width N over generic T-cells
Field       | Z0.BlockStats`2.BlockCount                                            | The number of blocks being described
Field       | Z0.BlockStats`2.BlockWidth                                            | The bit-width of a block
Field       | Z0.BlockStats`2.CellWidth                                             | The bit-width of a cell
Field       | Z0.BlockStats`2.BlockLength                                           | The number of cells in a block
Field       | Z0.BlockStats`2.CellCount                                             | The total number of covered cells
Property    | Z0.BlockStats`2.BitCount                                              | The total number of covered bits
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W8,``0)                      | Allocates and fills a single 16-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,``0)                     | Allocates and fills a single 16-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16)                         | Allocates and fills a single 16-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,``0)                     | Allocates and fills a single 32-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,``0)                     | Allocates and fills a single 64-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,``0)                    | Allocates and fills a single 128-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,``0)                    | Allocates and fills a single 256-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,``0)                    | Allocates and fills a single 256-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,``0,``0)                 | Allocates and fills a single 16-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,``0,``0)                 | Allocates and fills a single 32-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,``0,``0)                 | Allocates and fills a single 64-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,``0,``0)                | Allocates and fills a single 128-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,``0,``0)                | Allocates and fills a single 256-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,``0,``0)                | Allocates and fills a single 256-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block16{``0}@,System.Int32)  | Fills a single caller-allocated 16-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block32{``0}@,System.Int32)  | Fills a single caller-allocated 32-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block64{``0}@,System.Int32)  | Fills a single caller-allocated 64-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block128{``0}@,System.Int32) | Fills a single caller-allocated 128-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block256{``0}@,System.Int32) | Fills a single caller-allocated 256-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.Block512{``0}@,System.Int32) | Fills a single caller-allocated 512-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block16{``0}@,System.Int32)| Fills a single caller-allocated 16-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block32{``0}@,System.Int32)| Fills a single caller-allocated 32-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block64{``0}@,System.Int32)| Fills a single caller-allocated 64-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block128{``0}@,System.Int32)| Fills a single caller-allocated 128-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block256{``0}@,System.Int32)| Fills a single caller-allocated 256-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,``0,``0,Z0.Block512{``0}@,System.Int32)| Fills a single caller-allocated 512-bit block with random values
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills a single 16-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills a single 32-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills a single 64-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills a single 128-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills a single 256-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills a single 512-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W16,Z0.Interval{``0})        | Allocates and fills a single 16-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W32,Z0.Interval{``0})        | Allocates and fills a single 32-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W64,Z0.Interval{``0})        | Allocates and fills a single 64-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W128,Z0.Interval{``0})       | Allocates and fills a single 128-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W256,Z0.Interval{``0})       | Allocates and fills a single 256-bit block
Method      | Z0.RandomBlocks.Block``1(Z0.IPolyrand,Z0.W512,Z0.Interval{``0})       | Allocates and fills a single 512-bit block
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W8,System.Int32,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills specified number of 8-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W8,System.Int32,``0,``0)    | Allocates and fills specified number of 8-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W8,System.Int32,``0)        | Allocates and fills a specified number of 16-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W16,System.Int32,Z0.Interval{``0},System.Func{``0,System.Boolean})| Allocates and fills specified number of 16-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W16,System.Int32,``0,``0)   | Allocates and fills specified number of 16-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W16,System.Int32,``0)       | Allocates and fills a specified number of 16-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,System.Int32)           | Allocates and fills specified number of 32-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 32-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,``0,``0,System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 32-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W32,System.Int32,``0)       | Allocates and fills a specified number of 32-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,System.Int32)           | Allocates and fills specified number of 64-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 64-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,``0,``0,System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 64-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W64,System.Int32,``0)       | Allocates and fills a specified number of 64-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,System.Int32)          | Allocates and fills specified number of 128-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 128-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,``0,``0,System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 128-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W128,System.Int32,``0)      | Allocates and fills a specified number of 128-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,System.Int32)          | Allocates and fills specified number of 256-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 256-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,``0,``0,System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 256-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W256,System.Int32,``0)      | Allocates and fills a specified number of 256-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,System.Int32)          | Allocates and fills specified number of 512-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,Z0.Interval{``0},System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 512-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,``0,``0,System.Int32,System.Func{``0,System.Boolean})| Allocates and fills specified number of 512-bit blocks
Method      | Z0.RandomBlocks.Blocks``1(Z0.IPolyrand,Z0.W512,System.Int32,``0)      | Allocates and fills a specified number of 512-bit blocks
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block8{``0}@)                 | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block16{``0}@)                | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block32{``0}@)                | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block64{``0}@)                | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block128{``0}@)               | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block256{``0}@)               | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,Z0.Block512{``0}@)               | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block16{``0}@)        | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block32{``0}@)        | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block64{``0}@)        | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block128{``0}@)       | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block256{``0}@)       | Fills caller-allocated block storage with random values
Method      | Z0.RandomBlocks.Fill``1(Z0.IPolyrand,``0,``0,Z0.Block512{``0}@)       | Fills caller-allocated block storage with random values
Type        | Z0.IBlockedFunc                                                       | Characterizes structed blocked functions
Type        | Z0.IBlockedFunc`1                                                     | Characterizes identified SBF operations that are width-parametric, homoenously so
Type        | Z0.IBlockedFunc`2                                                     | Characterizes identified SBF operations that are cell and width-parametric, homoenously both
Type        | Z0.Block128`1                                                         | Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32, 64 and 128-bit segments
Property    | Z0.Block128`1.Data                                                    | The backing storage
Property    | Z0.Block128`1.Head                                                    | The leading storage cell
Property    | Z0.Block128`1.IsEmpty                                                 | True if no capacity exists, false otherwise
Property    | Z0.Block128`1.CellCount                                               | The number of allocated cells
Property    | Z0.Block128`1.BlockLength                                             | The number of cells in a block
Property    | Z0.Block128`1.BlockCount                                              | The number of covered blocks
Property    | Z0.Block128`1.BitCount                                                | The number of covered bits
Property    | Z0.Block128`1.Item(System.Int32)                                      | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block128`1.Item(System.Int32,System.Int32)                         | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block128`1.Bytes                                                   | Presents the source data as bytespan
Method      | Z0.Block128`1.Cell(System.Int32,System.Int32)                         | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block128`1.Block(System.Int32)                                     | Retrieves an index-identified data block
Method      | Z0.Block128`1.Extract(System.Int32)                                   | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block128`1.Fill(`0)                                                | Broadcasts a value to all blocked cells
Method      | Z0.Block128`1.Clear                                                   | Zero-fills all blocked cells
Method      | Z0.Block128`1.CopyTo(System.Span{`0})                                 | Copies blocked content to a target span
Method      | Z0.Block128`1.As``1                                                   | Reinterprets the storage cell type
Type        | Z0.Block16`1                                                          | Defines a span of contiguous memory that can be evenly partitioned into 8 and 16-bit segments
Property    | Z0.Block16`1.Data                                                     | The backing storage
Property    | Z0.Block16`1.Head                                                     | The leading storage cell
Property    | Z0.Block16`1.CellCount                                                | The number of allocated cells
Property    | Z0.Block16`1.BlockLength                                              | The number of cells in a block
Property    | Z0.Block16`1.BlockCount                                               | The number of covered blocks
Property    | Z0.Block16`1.BitCount                                                 | The number of covered bits
Property    | Z0.Block16`1.Item(System.Int32)                                       | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block16`1.Item(System.Int32,System.Int32)                          | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block16`1.Bytes                                                    | Presents the source data as bytespan
Method      | Z0.Block16`1.Cell(System.Int32,System.Int32)                          | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block16`1.Block(System.Int32)                                      | Retrieves an index-identified data block
Method      | Z0.Block16`1.Extract(System.Int32)                                    | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block16`1.Fill(`0)                                                 | Broadcasts a value to all blocked cells
Method      | Z0.Block16`1.Clear                                                    | Zero-fills all blocked cells
Method      | Z0.Block16`1.CopyTo(System.Span{`0})                                  | Copies blocked content to a target span
Method      | Z0.Block16`1.As``1                                                    | Reinterprets the storage cell type
Type        | Z0.Block256`1                                                         | Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32, 64, 128 and 256-bit segments
Property    | Z0.Block256`1.Data                                                    | The unblocked storage cells
Property    | Z0.Block256`1.Head                                                    | The leading storage cell
Property    | Z0.Block256`1.IsEmpty                                                 | True if no capacity exists, false otherwise
Property    | Z0.Block256`1.CellCount                                               | The number of covered cells
Property    | Z0.Block256`1.BlockLength                                             | The number of cells in a block
Property    | Z0.Block256`1.BlockCount                                              | The number of covered blocks
Property    | Z0.Block256`1.BitCount                                                | The number of covered bits
Property    | Z0.Block256`1.Item(System.Int32)                                      | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block256`1.Item(System.Int32,System.Int32)                         | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block256`1.Bytes                                                   | Presents the source data as bytespan
Method      | Z0.Block256`1.Cell(System.Int32,System.Int32)                         | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block256`1.Block(System.Int32)                                     | Retrieves an index-identified data block
Method      | Z0.Block256`1.Extract(System.Int32)                                   | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block256`1.Fill(`0)                                                | Broadcasts a value to all blocked cells
Method      | Z0.Block256`1.Clear                                                   | Zero-fills all blocked cells
Method      | Z0.Block256`1.CopyTo(System.Span{`0})                                 | Copies blocked content to a target span
Method      | Z0.Block256`1.As``1                                                   | Reinterprets the storage cell type
Type        | Z0.Block32`1                                                          | Defines a span of contiguous memory that can be evenly partitioned into 8, 16 and 32-bit segments
Property    | Z0.Block32`1.Data                                                     | The backing storage
Property    | Z0.Block32`1.Head                                                     | The leading storage cell
Property    | Z0.Block32`1.CellCount                                                | The number of allocated cells
Property    | Z0.Block32`1.BlockLength                                              | The number of cells in a block
Property    | Z0.Block32`1.BlockCount                                               | The number of covered blocks
Property    | Z0.Block32`1.BitCount                                                 | The number of covered bits
Property    | Z0.Block32`1.Item(System.Int32)                                       | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block32`1.Item(System.Int32,System.Int32)                          | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block32`1.Bytes                                                    | Presents the source data as bytespan
Method      | Z0.Block32`1.Cell(System.Int32,System.Int32)                          | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block32`1.Block(System.Int32)                                      | Retrieves an index-identified data block
Method      | Z0.Block32`1.Extract(System.Int32)                                    | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block32`1.Clear                                                    | Zero-fills all blocked cells
Method      | Z0.Block32`1.CopyTo(System.Span{`0})                                  | Copies blocked content to a target span
Method      | Z0.Block32`1.As``1                                                    | Reinterprets the storage cell type
Type        | Z0.Block512`1                                                         | Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32, 64, 128, 256 and 512-bit segments
Property    | Z0.Block512`1.Data                                                    | The unblocked storage cells
Property    | Z0.Block512`1.Head                                                    | The leading storage cell
Property    | Z0.Block512`1.IsEmpty                                                 | True if no capacity exists, false otherwise
Property    | Z0.Block512`1.CellCount                                               | The number of allocated cells
Property    | Z0.Block512`1.BlockLength                                             | The number of cells in a block
Property    | Z0.Block512`1.BlockCount                                              | The number of covered blocks
Property    | Z0.Block512`1.BitCount                                                | The number of covered bits
Property    | Z0.Block512`1.Item(System.Int32)                                      | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block512`1.Item(System.Int32,System.Int32)                         | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block512`1.Bytes                                                   | Presents the source data as bytespan
Method      | Z0.Block512`1.Cell(System.Int32,System.Int32)                         | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block512`1.Block(System.Int32)                                     | Retrieves an index-identified data block
Method      | Z0.Block512`1.Extract(System.Int32)                                   | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block512`1.LoBlock(System.Int32)                                   | Retrieves the lower 256 bits of an index-identified block
Method      | Z0.Block512`1.HiBlock(System.Int32)                                   | Retrieves the upper 256 bits of an index-identified block
Method      | Z0.Block512`1.Fill(`0)                                                | Broadcasts a value to all blocked cells
Method      | Z0.Block512`1.Clear                                                   | Zero-fills all blocked cells
Method      | Z0.Block512`1.CopyTo(System.Span{`0})                                 | Copies blocked content to a target span
Method      | Z0.Block512`1.As``1                                                   | Reinterprets the storage cell type
Type        | Z0.Block64`1                                                          | Defines a span of contiguous memory that can be evenly partitioned into 8, 16, 32 and 64-bit segments
Property    | Z0.Block64`1.Data                                                     | The unblocked storage cells
Property    | Z0.Block64`1.Head                                                     | The leading storage cell
Property    | Z0.Block64`1.CellCount                                                | The number of allocated cells
Property    | Z0.Block64`1.BlockLength                                              | The number of cells in a block
Property    | Z0.Block64`1.BlockCount                                               | The number of covered blocks
Property    | Z0.Block64`1.BitCount                                                 | The number of covered bits
Property    | Z0.Block64`1.Item(System.Int32)                                       | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block64`1.Item(System.Int32,System.Int32)                          | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block64`1.Bytes                                                    | Presents the source data as bytespan
Method      | Z0.Block64`1.Cell(System.Int32,System.Int32)                          | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block64`1.Block(System.Int32)                                      | Produces a span that covers the cells of an index-identified block
Method      | Z0.Block64`1.Extract(System.Int32)                                    | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block64`1.Fill(`0)                                                 | Broadcasts a value to all blocked cells
Method      | Z0.Block64`1.Clear                                                    | Zero-fills all blocked cells
Method      | Z0.Block64`1.CopyTo(System.Span{`0})                                  | Copies blocked content to a target span
Method      | Z0.Block64`1.As``1                                                    | Reinterprets the storage cell type
Type        | Z0.Block8`1                                                           | Defines a span of contiguous memory that can be evenly partitioned into 8-bit segments
Property    | Z0.Block8`1.Data                                                      | The backing storage
Property    | Z0.Block8`1.Head                                                      | The leading storage cell
Property    | Z0.Block8`1.CellCount                                                 | The number of allocated cells
Property    | Z0.Block8`1.BlockLength                                               | The number of cells in a block
Property    | Z0.Block8`1.BlockCount                                                | The number of covered blocks
Property    | Z0.Block8`1.BitCount                                                  | The number of covered bits
Property    | Z0.Block8`1.Item(System.Int32)                                        | Mediates access to the underlying storage cells via linear index
Property    | Z0.Block8`1.Item(System.Int32,System.Int32)                           | Mediates access to the the underlying storage cells via block index and block-relative cell index
Property    | Z0.Block8`1.Bytes                                                     | Presents the source data as bytespan
Method      | Z0.Block8`1.Cell(System.Int32,System.Int32)                           | Mediates access to the the underlying storage cells via block index and block-relative cell index
Method      | Z0.Block8`1.Block(System.Int32)                                       | Retrieves an index-identified data block
Method      | Z0.Block8`1.Extract(System.Int32)                                     | Extracts an index-identified block (non-allocating, but not free due to the price of creating a new wrapper)
Method      | Z0.Block8`1.Fill(`0)                                                  | Broadcasts a value to all blocked cells
Method      | Z0.Block8`1.Clear                                                     | Zero-fills all blocked cells
Method      | Z0.Block8`1.CopyTo(System.Span{`0})                                   | Copies blocked content to a target span
Method      | Z0.Block8`1.As``1                                                     | Reinterprets the storage cell type
Property    | Z0.Block256`2.Length                                                  | Specifies the length of the vector, i.e. its component count
Method      | Z0.Block256`2.op_Implicit(Z0.Block256{`0,`1})~Z0.NatSpan{`0,`1}       | Vec =&gt; Slice
Method      | Z0.Block256`2.op_Implicit(Z0.NatSpan{`0,`1})~Z0.Block256{`0,`1}       | Slice =&gt; Vec
Method      | Z0.Block256`2.Map``1(System.Func{`1,``0})                             | Projects the source vector onto a target vector of the same length             via a supplied transformation
Method      | Z0.Block256`2.Map``1(System.Func{`1,``0},Z0.Block256{`0,``0}@)        | Projects the source vector onto a caller-supplied target vector of the same length             via a supplied transformation
Type        | Z0.RowVector                                                          | Defines the vector api surface
Method      | Z0.RowVector.natspan``2(Z0.Block256{``1}@,``0)                        | Loads a natural block from blocked storage
Method      | Z0.RowVector.safeload``2(Z0.N256,Z0.NatSpan{``0,``1}@)                | Loads an unsized 256-bit blocked span from a sized unblocked span
Method      | Z0.RowVector.load``2(``1[],``0)                                       | Loads a vector of natural length
Method      | Z0.RowVector.load``2(``0,``1[])                                       | Loads a vector of natural length
Method      | Z0.RowVector.range``2(``1,``0)                                        | Defines a scalar sequence [first, ..., (first + N)]
Method      | Z0.RowVector.blockalloc``2(``0)                                       | Allocates a block vector of natural length
Method      | Z0.RowVector.blockalloc``1(System.Int32)                              | Allocates a block vector optionally filled with a specified value
Method      | Z0.RowVector.blockload``2(System.Span{``1},``0)                       | Loads a vector of natural length from a span that may not be aligned (Allocating if unaligned)
Type        | Z0.RowVector`1                                                        | Defines a vector over cells of unmanaged type
Method      | Z0.RowVector`1.op_Implicit(`0[])~Z0.RowVector{`0}                     | Implicitly converts an array to a vector
Method      | Z0.RowVector`1.op_Implicit(Z0.RowVector{`0})~System.Span{`0}          | Implicitly reveals a vector's underlying memory span
Method      | Z0.RowVector`1.op_Implicit(Z0.RowVector{`0})~System.ReadOnlySpan{`0}  | Implicitly provies a readonly-view of a vector's underlying data
Method      | Z0.RowVector`1.op_BitwiseAnd(Z0.RowVector{`0},Z0.RowVector{`0})       | Calculates the scalar product between the operands
Method      | Z0.RowVector`1.op_Equality(Z0.RowVector{`0},Z0.RowVector{`0})         | Deems vectors are equal if they have the same number of components            and corresponding components have identical content
Method      | Z0.RowVector`1.#ctor(`0[])                                            | Initializes a vector from array content
Property    | Z0.RowVector`1.Item(System.Int32)                                     | Queries/manipulates component values
Property    | Z0.RowVector`1.Data                                                   | The data wrapped by the vector
Property    | Z0.RowVector`1.Length                                                 | The count of vector components, otherwise known as its dimension
Method      | Z0.RowVector`1.Format                                                 | Formats components as a list
Method      | Z0.RowVector`1.CopyTo(System.Span{`0})                                | Copies vector content into a caller-provided span
Property    | Z0.RowVector`2.Dim                                                    | The vector's dimension
Property    | Z0.RowVector`2.Zero                                                   | The zero vector
Method      | Z0.RowVector`2.#ctor(`1[])                                            | Initializes a vector with an array
Property    | Z0.RowVector`2.Item(System.Int32)                                     | Queries/manipulates component values
Property    | Z0.RowVector`2.Data                                                   | The vector data
Property    | Z0.RowVector`2.Length                                                 | The count of vector components, otherwise known as its dimension
Method      | Z0.RowVector`2.Map``1(System.Func{`1,``0})                            | Projects the source vector onto a target vector of the same length             via a supplied transformation
Method      | Z0.RowVector`2.Map``1(System.Func{`1,``0},Z0.RowVector{`0,``0}@)      | Projects the source vector onto a caller-supplied target vector of the same length             via a supplied transformation
