| F:Z0.Asm.Data.AsmDataField.OpCodeId               | 
            <summary>
            The ice opcode identifer
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Sequence               | 
            <summary>
            A unique 0-based sequence number
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Mnemonic               | 
            <summary>
            The instruction mnemonic
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Op0                    | 
            <summary>
            The first instruction operand
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Op1                    | 
            <summary>
            "The second instruction operand"
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Op2                    | 
            <summary>
            The third instruction operand
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Op3                    | 
            <summary>
            The fourth instruction operand
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.Op4                    | 
            <summary>
            The fifth instruction operand
            </summary>
        
| F:Z0.Asm.Data.AsmDataField.CpuId                  | 
            <summary>
            The ice opcode identifer
            </summary>
        
| T:Z0.Asm.Data.AsmFieldWidths                      | 
            <summary>
            Defines the widths of common asm record fields
            </summary>
        
| F:Z0.Asm.Data.AsmFieldWidths.Num8Dec              | 
            <summary>
            The width of a field containing an 8-bit decimal number
            </summary>
        
| F:Z0.Asm.Data.AsmFieldWidths.Num8Hex              | 
            <summary>
            The width of a field containing an 8-bit hex number
            </summary>
        
| F:Z0.Asm.Data.AsmFieldWidths.BoolSmall            | 
            <summary>
            The width of a field containing a boolean indicator [T/F, Y/N, 0/1, ..] that has a small label
            </summary>
        
| F:Z0.Asm.Data.AsmFieldWidths.BoolLarge            | 
            <summary>
            The width of a field containing a boolean indicator [T/F, Y/N, 0/1, ..] that has a large label
            </summary>
        
| P:Z0.Asm.Data.CpuidExpression.Length              | 
            <summary>
            The expression length
            </summary>
        
| P:Z0.Asm.Data.InstructionExpression.Length        | 
            <summary>
            The expression length
            </summary>
        
| P:Z0.Asm.Data.MnemonicExpression.Length           | 
            <summary>
            The expression length
            </summary>
        
| T:Z0.Asm.Data.EncodedOpCode                       | 
            <summary>
            Defines an op code via a sequence bytes
            </summary>
        
| T:Z0.Asm.Data.OpCodeIdentifier                    | 
            <summary>
            Represents an opcode identifier
            </summary>
        
| T:Z0.Asm.Data.OpCodeTokenKind                     | 
            <summary>    
            Defines symbols used to specify opcode syntax
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.NE                  | 
            <summary>    
            Not Encodable
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.NP                  | 
            <summary>    
            Indicates the use of 66/F2/F3 prefixes (beyond those already part of the instructions opcode) are not allowed with the instruction
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.NFx                 | 
            <summary>    
            Indicates the use of F2/F3 prefixes (beyond those already part of the instructions opcode) are not allowed with the instruction.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.REXᕀW               | 
            <summary>    
            Indicates the use of a REX prefix that affects operand size or instruction semantics
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ0                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 0 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ1                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 1 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ2                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 2 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ3                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 3 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ4                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 4 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ5                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 5 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ6                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 6 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉ7                  | 
            <summary>    
            The ModR/M byte of the instruction uses only the r/m operand; The register field digit 7 
            provides an extension to the instruction's opcode
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ﾉr                  | 
            <summary>    
            Indicates that the ModR/M byte of the instruction contains a register operand and an r/m operand
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.cb                  | 
            <summary>    
            A 1-byte value following the opcode to specify a code offset and/or new value for the code segment register.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.cw                  | 
            <summary>    
            A 2-byte value following the opcode to specify a code offset and/or new value for the code segment register.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.cd                  | 
            <summary>    
            A 4-byte value following the opcode to specify a code offset and/or new value for the code segment register.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.cp                  | 
            <summary>    
            A 6-byte value following the opcode to specify a code offset and/or new value for the code segment register.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.co                  | 
            <summary>    
            A 8-byte value following the opcode to specify a code offset and/or new value for the code segment register.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ct                  | 
            <summary>    
            A 10-byte value following the opcode to specify a code offset and/or new value for the code segment register
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ib                  | 
            <summary>    
            A 1-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.iw                  | 
            <summary>    
            A 2-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.id                  | 
            <summary>    
            A 4-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.io                  | 
            <summary>    
            A 8-byte immediate operand to the instruction that follows the opcode or ModR/M bytes or scale-indexing bytes.
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ᕀrb                 | 
            <summary>    
            For an 8-bit register indicates: 
            (a) In non-64-bit mode, a register code is arithmetically added to the value of the opcode byte. 
            (b) In 64-bit mode, the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction 
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ᕀrw                 | 
            <summary>    
            For a 16-bit register indicates: 
            (a) In non-64-bit mode, a register code is arithmetically added to the value of the opcode byte. 
            (b) In 64-bit mode, the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction 
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ᕀrd                 | 
            <summary>    
            For a 32-bit register indicates: 
            (a) In non-64-bit mode, a register code is arithmetically added to the value of the opcode byte. 
            (b) In 64-bit mode, the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction 
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ᕀro                 | 
            <summary>    
            For a 64-bit register, indicates the four bit field of REX.b and opcode[2:0] field encodes the register operand of the instruction  
            </summary>
        
| F:Z0.Asm.Data.OpCodeTokenKind.ᕀi                  | 
            <summary>    
            A number used in floating-point instructions when one of the operands is ST(i) from the FPU register stack. 
            </summary>
        
| M:Z0.Asm.Data.OpCodeIdentity.Compute(Z0.Asm.Data.OpCodeRecord@)| 
            <summary>
            Defines, in a predictable and hopefully meaningful way, a programmatic identifier that designates an op code
            </summary>
            <param name="src">The source record</param>
        
| F:Z0.Asm.FarCallCounts.TargetsFar                 | 
            <summary>
            The distinct count of far-call target addresses
            </summary>
        
| F:Z0.Asm.FarCallCounts.HostedCount                | 
            <summary>
            The distinct count of host-defined addresses
            </summary>
        
| F:Z0.Asm.FarCallCounts.HostedReceivers            | 
            <summary>
            The distinct count of host-defined addresses that are targets of a far-call
            </summary>
        
| F:Z0.Asm.FarCallCounts.UnhostedReceivers          | 
            <summary>
            The distinct count of far-call target addresses that are not provided by a howt
            </summary>
        
| F:Z0.Asm.FarCallSummary.FarCallTargets            | 
            <summary>
            Far-classified call instruction operations
            </summary>
        
| F:Z0.Asm.FarCallSummary.HostBases                 | 
            <summary>
            Base addresses of functions defined by an api host
            </summary>
        
| F:Z0.Asm.FarCallSummary.HostedReceivers           | 
            <summary>
            Base addresses of api host functions that are targets of a far call
            </summary>
        
| F:Z0.Asm.FarCallSummary.UnhostedReceivers         | 
            <summary>
            Far call targets that are not defined by an api host
            </summary>
        
| T:Z0.Asm.AsmBranchInfo                            | 
            <summary>
            Describes a branching instruction operand
            </summary>
        
| P:Z0.Asm.AsmBranchTarget.Kind                     | 
            <summary>
            The target classifier, near or far
            </summary>
        
| P:Z0.Asm.AsmBranchTarget.Size                     | 
            <summary>
            The target size
            </summary>
        
| P:Z0.Asm.AsmBranchTarget.TargetAddress            | 
            <summary>
            The target address
            </summary>
        
| P:Z0.Asm.AsmBranchTarget.Selector                 | 
            <summary>
            Specifies a branch target selector, if far
            </summary>
        
| T:Z0.Asm.AsmCommand                               | 
            <summary>
            Defines an encoded instruction
            </summary>
        
| T:Z0.Asm.AsmFunction                              | 
            <summary>
            Describes the assembly encoding of a member api
            </summary>
        
| P:Z0.Asm.AsmFunction.Uri                          | 
            <summary>
            The definining operation uri
            </summary>
        
| P:Z0.Asm.AsmFunction.OpId                         | 
            <summary>
            The function identifier
            </summary>
        
| P:Z0.Asm.AsmFunction.OpSig                        | 
            <summary>
            The source member signature
            </summary>
        
| P:Z0.Asm.AsmFunction.Code                         | 
            <summary>
            The function encoding
            </summary>
        
| P:Z0.Asm.AsmFunction.Inxs                         | 
            <summary>
            The encoded instructions
            </summary>
        
| P:Z0.Asm.AsmFunction.TermCode                     | 
            <summary>
            Specifies the reason for capture termination
            </summary>
        
| P:Z0.Asm.AsmFunction.BaseAddress                  | 
            <summary>
            The head of the address range
            </summary>
        
| P:Z0.Asm.AsmFunction.InstructionCount             | 
            <summary>
            The number of encoded instructions
            </summary>
        
| T:Z0.Asm.AsmFunctionGroup                         | 
            <summary>
            Defines a group of assembly functions related by an operation identity
            </summary>
        
| T:Z0.Asm.AsmImmInfo                               | 
            <summary>
            Describes an immediate value in the context of an asm instruction operand
            </summary>
        
| T:Z0.Asm.AsmInstructionBlock                      | 
            <summary>
            Encapsulates a contiguous instruction sequence along with the captured bits
            </summary>
        
| F:Z0.Asm.AsmInstructionBlock.Encoded              | 
            <summary>
            Encoded assembly
            </summary>
        
| F:Z0.Asm.AsmInstructionBlock.Decoded              | 
            <summary>
            The decoded instructions
            </summary>
        
| F:Z0.Asm.AsmInstructionBlock.TermCode             | 
            <summary>
            The reason capture was terminated
            </summary>
        
| M:Z0.Asm.AsmInstructionBlock.Define(Z0.MemberCode,Z0.Asm.Instruction[],Z0.ExtractTermCode)| 
            <summary>
            Defines an instruction sequence, in both encoded and decoded form
            </summary>
            <param name="encoded">The encoded instructions</param>
            <param name="decoded">The decoded instructions</param>
        
| P:Z0.Asm.AsmInstructionBlock.Item(System.Int32)   | 
            <summary>
            Queries/Manipulates an index-identified instruction
            </summary>
        
| T:Z0.Asm.AsmInstructionCode                       | 
            <summary>
            Captures an asm opcode together with an instruction string
            </summary>
        
| T:Z0.Asm.AsmInstructionList                       | 
            <summary>
            Defines a contiguous *based* instruction sequence
            </summary>
        
| T:Z0.Asm.AsmInstructions                          | 
            <summary>
            Defines an *unbased* sequence of instructions
            </summary>         
        
| T:Z0.Asm.AsmInstructionSummary                    | 
            <summary>
            Describes an assembly instruction
            </summary>
        
| P:Z0.Asm.AsmInstructionSummary.Base               | 
            <summary>
            The base address
            </summary>
        
| P:Z0.Asm.AsmInstructionSummary.Offset             | 
            <summary>
            The zero-based offset of the function, relative to the base address
            </summary>
        
| P:Z0.Asm.AsmInstructionSummary.AsmContent         | 
            <summary>
            The instruction content, suitable for display
            </summary>
        
| P:Z0.Asm.AsmInstructionSummary.Spec               | 
            <summary>
            The instruction string paired with the op code
            </summary>
        
| P:Z0.Asm.AsmInstructionSummary.Operands           | 
            <summary>
            Describes the instruction operands
            </summary>
        
| P:Z0.Asm.AsmInstructionSummary.Encoded            | 
            <summary>
            The encoded bytes
            </summary>
        
| P:Z0.Asm.AsmMemDx.Size                            | 
            <summary>
            The size of the displacement in bytes
            </summary>
        
| P:Z0.Asm.AsmMemDx.Value                           | 
            <summary>
            The displacement value
            </summary>
        
| T:Z0.Asm.AsmMemInfo                               | 
            <summary>
            Describes a block of memory the context of an asm instruction operand
            </summary>
        
| T:Z0.Asm.AsmOperandInfo                           | 
            <summary>
            Describes an operand in the context of an assembly instruction
            </summary>
        
| P:Z0.Asm.AsmOperandInfo.Index                     | 
            <summary>
            The 0-based operand position
            </summary>
        
| P:Z0.Asm.AsmOperandInfo.Kind                      | 
            <summary>
            Classifies the operand
            </summary>
        
| P:Z0.Asm.AsmOperandInfo.ImmInfo                   | 
            <summary>
            Operand immediate info, if applicable
            </summary>
        
| P:Z0.Asm.AsmOperandInfo.Memory                    | 
            <summary>
            Operand memory info, if applicable
            </summary>
        
| P:Z0.Asm.AsmOperandInfo.Register                  | 
            <summary>
            Operand register info, if applicable
            </summary>
        
| P:Z0.Asm.AsmOperandInfo.Branch                    | 
            <summary>
            Instruction branching info, if applicable
            </summary>
        
| P:Z0.Asm.Aspect.Name                              | 
            <summary>
            The aspect name
            </summary>
        
| P:Z0.Asm.Aspect.Source                            | 
            <summary>
            The defining oject
            </summary>
        
| P:Z0.Asm.Aspect.Value                             | 
            <summary>
            The aspect value
            </summary>
        
| P:Z0.Asm.Aspect.Description                       | 
            <summary>
            An informative description
            </summary>
        
| T:Z0.Asm.EncodedCommand                           | 
            <summary>
            Defines an encoded instruction
            </summary>
        
| P:Z0.Asm.EncodedCommand.EncodingSize              | 
            <summary>
            Specifies the size of the command, in bytes, which is constrained to a number 
            between 0 (the empty command) and 15 (The maximum instruction size)
            </summary>
        
| T:Z0.Asm.HostInstructions                         | 
            <summary>
            Collects a sequence of operation instuction sequences from host-defined members
            </summary>         
        
| P:Z0.Asm.HostInstructions.Content                 | 
            <summary>
            The decoded instructions
            </summary>
        
| P:Z0.Asm.HostInstructions.Host                    | 
            <summary>
            The defining host
            </summary>
        
| P:Z0.Asm.HostInstructions.BaseAddress             | 
            <summary>
            The base address of the first member, where members are ordered by their individual base addresses
            </summary>
        
| P:Z0.Asm.HostInstructions.MemberCount             | 
            <summary>
            The number of host-defined operations
            </summary>
        
| P:Z0.Asm.HostInstructions.Length                  | 
            <summary>
            The member instruction content length
            </summary>
        
| P:Z0.Asm.HostInstructions.Item(System.Int32)      | 
            <summary>
            Indexes into the member instruction content
            </summary>
        
| P:Z0.Asm.HostInstructions.TotalCount              | 
            <summary>
            The total instruction count
            </summary>
        
| P:Z0.Asm.LocatedInstruction.Data                  | 
            <summary>
            The encoded content as byte array
            </summary>
        
| P:Z0.Asm.LocatedInstruction.ByteLength            | 
            <summary>
            The encoded byte count
            </summary>
        
| T:Z0.Asm.MemberInstructions                       | 
            <summary>
            Groups a sequence of located instructions
            </summary>         
        
| T:Z0.Asm.PartInstructions                         | 
            <summary>
            Collects sequences instructions from part-defined api hosts
            </summary>         
        
| P:Z0.Asm.PartInstructions.Content                 | 
            <summary>
            The decoded instructions
            </summary>
        
| P:Z0.Asm.PartInstructions.Part                    | 
            <summary>
            The defining part
            </summary>
        
| P:Z0.Asm.PartInstructions.TotalCount              | 
            <summary>
            The total instruction count
            </summary>
        
| T:Z0.Asm.SignExensionKind                         | 
            <summary>
            Describes a sign exension operation
            </summary>
        
| P:Z0.Asm.IEncodedCommand.Encoding                 | 
            <summary>
            The encoded command
            </summary>
        
| T:Z0.Asm.ZeroExensionKind                         | 
            <summary>
            Describes a zero exension operation
            </summary>
        
| T:Z0.Asm.RegisterBitField                         | 
            <summary>
            The register bitfield
            </summary>
        
| F:Z0.Asm.RegisterBitField.Code                    | 
            <summary>
            The register code data (1 byte)
            </summary>
        
| F:Z0.Asm.RegisterBitField.Class                   | 
            <summary>
            The register class data (1 byte)
            </summary>
        
| F:Z0.Asm.RegisterBitField.Width                   | 
            <summary>
            The register width (2 bytes)
            </summary>
        
| M:Z0.Asm.RegisterBitField.code(Z0.Asm.RegisterKind)| 
            <summary>
            Determines the register code from the kind
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.Asm.RegisterBitField.class(Z0.Asm.RegisterKind)| 
            <summary>
            Determines the register class from the kind
            </summary>
            <param name="src">The source kind</param>
        
| M:Z0.Asm.RegisterBitField.width(Z0.Asm.RegisterKind)| 
            <summary>
            Determines the register width from the kind
            </summary>
            <param name="src">The source kind</param>
        
| F:Z0.Asm.RegisterKinds.FI.C                       | 
            <summary>
            RegisterCode: [0..3]
            </summary>
        
| F:Z0.Asm.RegisterKinds.FI.K                       | 
            <summary>
            RegisterClass: [4..15]
            </summary>
        
| F:Z0.Asm.RegisterKinds.FI.W                       | 
            <summary>
            Register width: [16..31]
            </summary>
        
| M:Z0.Asm.Commands.encode(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Defines a command from data supplied by a bytespan
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.Asm.Commands.encode(System.UInt64)           | 
            <summary>
            Creates a command from data supplied in a 64-bit unsigned integer
            </summary>
            <param name="lo64">The data source</param>
        
| M:Z0.Asm.Commands.encode(System.UInt32)           | 
            <summary>
            Creates a command from the data supplied in a 64-bit unsigned integer
            </summary>
            <param name="lo32">The data source</param>
        
| M:Z0.Asm.Commands.size(Z0.Asm.EncodedCommand@)    | 
            <summary>
            Computes the length, in bytes, of the encoded content
            </summary>
            <param name="src">The command source</param>
        
| M:Z0.Asm.Commands.encoding(Z0.Asm.EncodedCommand@)| 
            <summary>
            Presents the encoded content as a bytespan of variable length from 0 to 15 bytes
            </summary>
            <param name="src">The command source</param>
        
| T:Z0.Asm.ModRm                                    | 
            <summary>
            Defines a byte that follows an opcode that specifies either
            a) two register operands or,
            b) one register operand and a memory operand together with an addressing mode
            ModRM = [Mod:[7 6] | Reg:[5 4 3] | Rm:[2 1 0] ]
            </summary>
        
| P:Z0.Asm.ModRm.Rm                                 | 
            <summary>
            Defines bits [2:0] of the modrm byte
            </summary>
        
| P:Z0.Asm.ModRm.Reg                                | 
            <summary>
            Defines bits [5:3] of the modrm byte
            </summary>
        
| P:Z0.Asm.ModRm.Mod                                | 
            <summary>
            Defines bits [7:6] of the modrm byte
            </summary>
        
| P:Z0.Asm.ModRm.Encoded                            | 
            <summary>
            The encoded bitfield value
            </summary>
        
| T:Z0.Asm.RexPrefix                                | 
            <summary>
            A prefix that occurrs at most once and is applicable to instructions in 64-bit mode and which 
            facilitates specifying
            a) gp and sse register operands
            b) 64-bit operand size
            c) extended control register operands
            </summary>
        
| P:Z0.Asm.RexPrefix.BitField                       | 
            <summary>
            Creates a bitfield over the rex prefix data structure and using the index/width
            enumerations to specified the bit layout
            </summary>
        
| M:Z0.Asm.AsmQuery.Identify(Z0.Asm.MemorySize)     | 
            <summary>
            Specifies the segmented identity of a specified memory size
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Asm.AsmQuery.IsNearBranch(Z0.Asm.OpKind)     | 
            <summary>
            Determines whether the classified operand is a 16-bit, 32-bit or 64-bit near branch
            Assessed respectively via the NearBranch16, NearBranch32 and NearBranch64 instruction attributes
            </summary>
            <param name="src">The operand classification</param>
        
| M:Z0.Asm.AsmQuery.IsFarBranch(Z0.Asm.OpKind)      | 
            <summary>
            Determines whether the classified operand is a 32-bit or 64-bit far branch
            Assessed respectively via the FarBranch32 and FarBranch64 instruction attributes
            </summary>
            <param name="src">The operand classification</param>
        
| M:Z0.Asm.AsmQuery.IsBranch(Z0.Asm.OpKind)         | 
            <summary>
            Determines whether a classified operand is associated with a branching instruction
            </summary>
            <param name="src">The operand classification</param>
        
| M:Z0.Asm.AsmQuery.Summarize(Z0.Asm.AsmInstructionList)| 
            <summary>
            Describes the instructions that comprise an instruction list
            </summary>
            <param name="src">The source instruction list</param>
        
| M:Z0.Asm.AsmQuery.Summarize(Z0.Asm.AsmFunction)   | 
            <summary>
            Describes the instructions that comprise a function
            </summary>
            <param name="src">The source function</param>
        
| M:Z0.Asm.AsmQuery.IsRegister(Z0.Asm.OpKind)       | 
            <summary>
            Tests whether the the source operand kind is a register kind
            </summary>
            <param name="src">The source operand kind</param>
        
| M:Z0.Asm.AsmQuery.RegisterInfo(Z0.Asm.Instruction,System.Int32)| 
            <summary>
            Gets the operand's register value. Use this property if the operand has kind <see cref="F:Z0.Asm.OpKind.Register" />
            </summary>
            <param name="operand">Operand number, 0-4</param>
        
| M:Z0.Asm.ISemanticQuery.ImmInfo(Z0.Asm.Instruction,System.Int32)| 
            <summary>
            Extracts immediate information, if applicable, from an instruction operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        
| M:Z0.Asm.ISemanticQuery.OperandKind(Z0.Asm.Instruction,System.Int32)| 
            <summary>
            Gets an operand's kind if it exists
            </summary>
            <param name="operand">Operand number, 0-4</param>
        
| M:Z0.Asm.ISemanticQuery.ExtractImm(Z0.Asm.Instruction,System.Int32)| 
            <summary>
            Extracts an immediate operand from an instruction
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        
| M:Z0.Asm.ISemanticQuery.MemInfo(Z0.Asm.Instruction,System.Int32)| 
            <summary>
            Extracts memory information, if applicable, from an instruction operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        
| M:Z0.Asm.ISemanticQuery.RegisterInfo(Z0.Asm.Instruction,System.Int32)| 
            <summary>
            Extracts register information, should it exist, from an index-identified register operand
            </summary>
            <param name="src">The source instruction</param>
            <param name="index">The operand index</param>
        
| M:Z0.Asm.ISemanticQuery.IsSegBase(Z0.Asm.OpKind)  | 
            <summary>
            Determines whether the classified operand is a segment of the form 
            seg:[di], seg:[edi], seg:[esi], seg:[rdi], seg:[rsi], seg:[si]
            Relevant instruction attributes include: MemorySize, MemorySegment, SegmentPrefix 
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsNearBranch(Z0.Asm.OpKind)| 
            <summary>
            Determines whether the classified operand is a 16-bit, 32-bit or 64-bit near branch
            Assessed respectively via the NearBranch16, NearBranch32 and NearBranch64 instruction attributes
            </summary>
            <param name="src">The operand classification</param>
        
| M:Z0.Asm.ISemanticQuery.IsFarBranch(Z0.Asm.OpKind)| 
            <summary>
            Determines whether the classified operand is a 32-bit or 64-bit far branch
            Assessed respectively via the FarBranch32 and FarBranch64 instruction attributes
            </summary>
            <param name="src">The operand classification</param>
        
| M:Z0.Asm.ISemanticQuery.IsBranch(Z0.Asm.OpKind)   | 
            <summary>
            Determines whether a classified operand is associated with a branching instruction
            </summary>
            <param name="src">The operand classification</param>
        
| M:Z0.Asm.ISemanticQuery.ImmWidth(Z0.Asm.OpKind)   | 
            <summary>
            Determines the size of a classified immediate operand, if applicable; otherwise, returns 0
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsSignedImm(Z0.Asm.OpKind)| 
            <summary>
            Determines whether the classified operand a sign-extended immediate which may include:
            An 8-bit value sign extended to 16 bits, accessed via the Immediate8to16 instruction attribute
            An 8-bit value sign extended to 32 bits, accessed via Immediate8to32 instruction attribute
            An 8-bit value sign extended to 64 bits, accessed via the Immediate8to64 instruction attribute
            A 32-bit value sign extended to 64 bits, accessed via the Immediate32to64 instruction attribute
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsDirectImm(Z0.Asm.OpKind)| 
            <summary>
            Determines whether the classified operand is an 8-bit, 16-bit, 32-bit or 64-bit constant
            which are accessed respectively through the Immediate8, Immediate16, Immediate32, and Immediate64
            instruction attributes
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsSpecialImm(Z0.Asm.OpKind)| 
            <summary>
            Determines whether the classified operand is an 8-bit immediate
            used by the enter, extrq, or insertq instructions
            Accessed via the instruction attribute Immediate8_2nd
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsImm(Z0.Asm.OpKind)      | 
            <summary>
            Determines whether the classified operand is an immediate of some sort
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsRegister(Z0.Asm.OpKind) | 
            <summary>
            Tests whether the the source operand kind is a register kind
            </summary>
            <param name="src">The source kind to test</param>
        
| M:Z0.Asm.ISemanticQuery.IsMem(Z0.Asm.OpKind)      | 
            <summary>
            Determines whether the classified operand is some sort of memory
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsSegEs(Z0.Asm.OpKind)    | 
            <summary>
            Determines whether the classified operand is an ES ("extra") memory segment.
            Possible choices include es:[di], es:[edi], es:[rdi]
            Relevant instruction attributes inlude: MemorySize
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsMem64(Z0.Asm.OpKind)    | 
            <summary>
            Determines whether the classified operand is a 64-bit memory offset. 
            Relevant instruction attributes include:
            MemoryAddress64, MemorySegment, SegmentPrefix, MemorySize
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.IsMemDirect(Z0.Asm.OpKind)| 
            <summary>
            Determines whether the classified operand is direct memory.
            Relevant instruction attributes include: 
            MemoryDisplSize, MemorySize, MemoryIndexScale, MemoryDisplacement, MemoryBase, 
            MemoryIndex, MemorySegment, SegmentPrefix
            </summary>
            <param name="src">The operand classifier</param>
        
| M:Z0.Asm.ISemanticQuery.Summarize(Z0.Asm.AsmInstructionList)| 
            <summary>
            Describes the instructions that comprise an instruction list
            </summary>
            <param name="src">The source instruction list</param>
        
| M:Z0.Asm.ISemanticQuery.Summarize(Z0.Asm.AsmFunction)| 
            <summary>
            Describes the instructions that comprise a function
            </summary>
            <param name="src">The source function</param>
        
| M:Z0.Asm.ISemanticQuery.Operands(Z0.MemoryAddress,Z0.Asm.Instruction)| 
            <summary>
            Extracts operand instruction data
            </summary>
            <param name="src">The source instruction</param>
            <param name="@base">The base address</param>
        
| T:Z0.Asm.Dsl.arg128                               | 
            <summary>
            Defines a 128-bit oparand
            </summary>
        
| T:Z0.Asm.Dsl.arg16                                | 
            <summary>
            Defines a 16-bit operand
            </summary>
        
| T:Z0.Asm.Dsl.arg256                               | 
            <summary>
            Defines a 256-bit oparand
            </summary>
        
| T:Z0.Asm.Dsl.arg32                                | 
            <summary>
            Defines a 32-bit oparand
            </summary>
        
| T:Z0.Asm.Dsl.arg512                               | 
            <summary>
            Defines a 512-bit oparand
            </summary>
        
| T:Z0.Asm.Dsl.arg64                                | 
            <summary>
            Defines a 64-bit oparand
            </summary>
        
| T:Z0.Asm.Dsl.arg8                                 | 
            <summary>
            Defines an 8-bit operand
            </summary>
        
| T:Z0.Asm.Dsl.cmd                                  | 
            <summary>
            Describes an instruction
            </summary>
        
| T:Z0.Asm.Dsl.cmd`1                                | 
            <summary>
            Defines an instruction that accepts one argument
            </summary>
        
| T:Z0.Asm.Dsl.cmd`2                                | 
            <summary>
            Defines an instruction that accepts two arguments
            </summary>
        
| T:Z0.Asm.Dsl.cmd`3                                | 
            <summary>
            Defines an instruction that accepts three arguments
            </summary>
        
| T:Z0.Asm.CmdOpCode                                | 
            <summary>
            Yet another way to view an op code
            </summary>
        
| T:Z0.Asm.ICmd                                     | 
            <summary>
            Defines facets common to all instructions without regard to arity
            </summary>
        
| P:Z0.Asm.ICmd.Args                                | 
            <summary>
            The instruction operands
            </summary>
        
| P:Z0.Asm.ICmd.Code                                | 
            <summary>
            The instruction op code
            </summary>
        
| P:Z0.Asm.ICmd.Arity                               | 
            <summary>
            The number of arguments accepted by the operand
            </summary>
        
| T:Z0.Asm.ICmd`1                                   | 
            <summary>
            Characterizes an instruction reification
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.Asm.ICmd`2                                   | 
            <summary>
            An instruction that accepts one operand
            </summary>
            <typeparam name="X0">The operand type</typeparam>
        
| T:Z0.Asm.ICmd`3                                   | 
            <summary>
            An instruction that accepts two operands
            </summary>
            <typeparam name="X0">The first operand type</typeparam>
            <typeparam name="X1">The second operand type</typeparam>
        
| T:Z0.Asm.ICmd`4                                   | 
            <summary>
            An instruction that accepts three operands
            </summary>
            <typeparam name="X0">The first operand type</typeparam>
            <typeparam name="X1">The second operand type</typeparam>
            <typeparam name="X2">The second operand type</typeparam>
        
| P:Z0.Asm.IOperand.OpKind                          | 
            <summary>
            The operand sort
            </summary>
        
| P:Z0.Asm.IOperand`1.Value                         | 
            <summary>
            The operand value
            </summary>
        
| T:Z0.Asm.IRegOp                                   | 
            <summary>
            Characterizes a register
            </summary>
        
| P:Z0.Asm.IRegOp.Kind                              | 
            <summary>
            The register's kind classifier
            </summary>
        
| T:Z0.Asm.IRegOp`2                                 | 
            <summary>
            Characterizes a width-parametric register reification
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="W">The register width</typeparam>
        
| T:Z0.Asm.IRegOp`3                                 | 
            <summary>
            Characterizes a width-parametric and state-parametric register reification
            </summary>
            <typeparam name="F">The reifying type</typeparam>
            <typeparam name="W">The register width</typeparam>
        
| T:Z0.Asm.IXmmRegOp`2                              | 
            <summary>
            Characterizes a 128-bit vectorized register reification of parametric index
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="N">The index type</typeparam>
        
| T:Z0.Asm.IYmmRegOp`2                              | 
            <summary>
            Characterizes 128-bit vectorized register reifications of parametric index
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="N">The index type</typeparam>
        
| T:Z0.Asm.IZmmRegOp`2                              | 
            <summary>
            Characterizes 128-bit vectorized register reifications of parametric index
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="N">The index type</typeparam>
        
| P:Z0.Asm.IAsmInxsInfo.InstructionCode             | 
            <summary>
            Encapsulates the result of ToInstructionCodeString() and ToInstructionString()
            </summary>
        
| P:Z0.Asm.IAsmInxsInfo.UsedMemory                  | 
            <summary>
            Retrieves the used memory array as specified by the InstructionInfo type
            </summary>
        
| P:Z0.Asm.IAsmInxsInfo.UsedRegisters               | 
            <summary>
            Captures the used register array as specified by the InstructionInfo type
            </summary>
        
| P:Z0.Asm.IAsmInxsInfo.Access                      | 
            <summary>
            Captures the op access array as specified by the InstructionInfo type
            </summary>
        
| P:Z0.Asm.IAsmInxsInfo.FlowInfo                    | 
            <summary>
            Computes flow information upon request
            </summary>
        
| T:Z0.Asm.IAsmInxsIp                               | 
            <summary>
            Defines IP-related instruction aspects
            </summary>
        
| T:Z0.Asm.IAsmOperandKinds                         | 
            <summary>
            Defines instruciton operand kind designation aspects
            </summary>
        
| T:Z0.Asm.ICalInstruction                          | 
            <summary>
            Defines call-related instruction aspects
            </summary>
        
| T:Z0.Asm.IInstructionBranch                       | 
            <summary>
            Defines branch-related instruction aspects
            </summary>
        
| T:Z0.Asm.IInstructionBranching                    | 
            <summary>
            Aggregates call/jmp/branching instruction aspects
            </summary>
        
| T:Z0.Asm.IInstructionFlags                        | 
            <summary>
            Defines flag-related instruction aspects
            </summary>
        
| T:Z0.Asm.IImmAspects                              | 
            <summary>
            Defines imm-related instruction aspects
            </summary>
        
| P:Z0.Asm.IInstructionInfo.FormattedInstruction    | 
            <summary>
            Captures the formatted view of the instruction
            </summary>
        
| T:Z0.Asm.IInstructionMasking                      | 
            <summary>
            Defines mask-related instruction aspects
            </summary>
        
| T:Z0.Asm.IJccAspects                              | 
            <summary>
            Defines branch-related instruction aspects
            </summary>
        
| T:Z0.Asm.IJmpAspects                              | 
            <summary>
            Defines branch-related instruction aspects
            </summary>
        
| P:Z0.Asm.Instruction.InstructionCode              | 
            <summary>
            Encapsulates the result of ToInstructionCodeString() and ToInstructionString()
            </summary>
        
| P:Z0.Asm.Instruction.FormattedInstruction         | 
            <summary>
            Captures the formatted view of the instruction
            </summary>
        
| P:Z0.Asm.Instruction.UsedMemory                   | 
            <summary>
            Retrieves the used memory array as specified by the InstructionInfo type
            </summary>
        
| P:Z0.Asm.Instruction.UsedRegisters                | 
            <summary>
            Captures the used register array as specified by the InstructionInfo type
            </summary>
        
| P:Z0.Asm.Instruction.Access                       | 
            <summary>
            Captures the op access array as specified by the InstructionInfo type
            </summary>
        
| P:Z0.Asm.Instruction.FlowInfo                     | 
            <summary>
            Computes flow information upon request
            </summary>
        
| M:Z0.Asm.Instruction.Create(Z0.Asm.Code,Z0.Asm.MemoryOperand@)| 
            <summary>
            Creates an instruction
            </summary>
            <param name="code">Code value</param>
            <param name="memory">Memory operand</param>
        
| T:Z0.Asm.InstructionInfo                          | 
            <summary>
            Contains information about an instruction, eg. read/written registers, read/written RFLAGS bits, CPUID feature bit, etc
            </summary>
        
| P:Z0.Asm.InstructionInfo.IsPrivileged             | 
            <summary>
            true if this is a privileged instruction
            </summary>
        
| P:Z0.Asm.InstructionInfo.IsStackInstruction       | 
            <summary>
            true if this is an instruction that implicitly uses the stack pointer (SP/ESP/RSP), eg. call, push, pop, ret, etc.
            See also <see cref="P:Z0.Asm.Instruction.StackPointerIncrement" />
            </summary>
        
| P:Z0.Asm.InstructionInfo.IsSaveRestoreInstruction | 
            <summary>
            true if it's an instruction that saves or restores too many registers (eg. fxrstor, xsave, etc).
            <see cref="!:GetUsedRegisters" /> won't return all read/written registers.
            </summary>
        
| P:Z0.Asm.InstructionInfo.Encoding                 | 
            <summary>
            Instruction encoding, eg. legacy, VEX, EVEX, ...
            </summary>
        
| P:Z0.Asm.InstructionInfo.CpuidFeatures            | 
            <summary>
            Gets the CPU or CPUID feature flags
            </summary>
        
| P:Z0.Asm.InstructionInfo.FlowControl              | 
            <summary>
            Flow control info
            </summary>
        
| T:Z0.Asm.MemoryOperand                            | 
            <summary>
            Memory operand
            </summary>
        
| F:Z0.Asm.MemoryOperand.SegmentPrefix              | 
            <summary>
            Segment override or <see cref="F:Z0.Asm.Register.None" />
            </summary>
        
| F:Z0.Asm.MemoryOperand.Base                       | 
            <summary>
            Base register or <see cref="F:Z0.Asm.Register.None" />
            </summary>
        
| F:Z0.Asm.MemoryOperand.Index                      | 
            <summary>
            Index register or <see cref="F:Z0.Asm.Register.None" />
            </summary>
        
| F:Z0.Asm.MemoryOperand.Scale                      | 
            <summary>
            Index register scale (1, 2, 4, or 8)
            </summary>
        
| F:Z0.Asm.MemoryOperand.Displacement               | 
            <summary>
            Memory displacement
            </summary>
        
| F:Z0.Asm.MemoryOperand.DisplSize                  | 
            <summary>
            0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)
            </summary>
        
| F:Z0.Asm.MemoryOperand.IsBroadcast                | 
            <summary>
            true if it's broadcasted memory (EVEX instructions)
            </summary>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,Z0.Asm.Register,System.Int32,System.Int32,System.Int32,System.Boolean,Z0.Asm.Register)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.Register.None" /></param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,Z0.Asm.Register,System.Int32,System.Boolean,Z0.Asm.Register)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.Register.None" /></param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,System.Int32,System.Int32,System.Boolean,Z0.Asm.Register)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.Register.None" /></param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,System.Int32,System.Int32,System.Int32,System.Boolean,Z0.Asm.Register)| 
            <summary>
            Constructor
            </summary>
            <param name="index">Index register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.Register.None" /></param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,System.Int32,System.Boolean,Z0.Asm.Register)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="displacement">Memory displacement</param>
            <param name="isBroadcast">true if it's broadcasted memory (EVEX instructions)</param>
            <param name="prefixSegment">Segment override or <see cref="F:Z0.Asm.Register.None" /></param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,Z0.Asm.Register,System.Int32,System.Int32,System.Int32)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,Z0.Asm.Register,System.Int32)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="index">Index register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,System.Int32,System.Int32)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,System.Int32,System.Int32,System.Int32)| 
            <summary>
            Constructor
            </summary>
            <param name="index">Index register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="scale">Index register scale (1, 2, 4, or 8)</param>
            <param name="displacement">Memory displacement</param>
            <param name="displSize">0 (no displ), 1 (16/32/64-bit, but use 2/4/8 if it doesn't fit in a <see cref="T:System.SByte" />), 2 (16-bit), 4 (32-bit) or 8 (64-bit)</param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register,System.Int32)| 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
            <param name="displacement">Memory displacement</param>
        
| M:Z0.Asm.MemoryOperand.#ctor(Z0.Asm.Register)     | 
            <summary>
            Constructor
            </summary>
            <param name="base">Base register or <see cref="F:Z0.Asm.Register.None" /></param>
        
| T:Z0.Asm.UsedMemory                               | 
            <summary>
            A memory location used by an instruction
            </summary>
        
| F:Z0.Asm.UsedMemory.Formatted                     | 
            <summary>
            Captures the result of the ToString() method at the time of replication
            </summary>
        
| F:Z0.Asm.UsedMemory.Segment                       | 
            <summary>
            Effective segment register
            </summary>
        
| F:Z0.Asm.UsedMemory.Base                          | 
            <summary>
            The base register, if any
            </summary>
        
| F:Z0.Asm.UsedMemory.Index                         | 
            <summary>
            The index register, if any
            </summary>
        
| F:Z0.Asm.UsedMemory.Scale                         | 
            <summary>
            Index scale (1, 2, 4 or 8)
            </summary>
        
| F:Z0.Asm.UsedMemory.Displacement                  | 
            <summary>
            Displacement
            </summary>
        
| F:Z0.Asm.UsedMemory.MemorySize                    | 
            <summary>
            Size of location
            </summary>
        
| F:Z0.Asm.UsedMemory.Access                        | 
            <summary>
            Memory access
            </summary>
        
| T:Z0.Asm.UsedRegister                             | 
            <summary>
            A register used by an instruction
            </summary>
        
| P:Z0.Asm.UsedRegister.Register                    | 
            <summary>
            Register
            </summary>
        
| P:Z0.Asm.UsedRegister.Access                      | 
            <summary>
            Register access
            </summary>
        
| M:Z0.Asm.UsedRegister.#ctor(Z0.Asm.Register,Z0.Asm.OpAccess)| 
            <summary>
            Constructor
            </summary>
            <param name="register">Register</param>
            <param name="access">Register access</param>
        
| M:Z0.Asm.UsedRegister.ToString                    | 
            <summary>
            ToString()
            </summary>
        
