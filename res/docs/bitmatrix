| M:Z0.BitMatrixA.cimpl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.impl(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.impl(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.impl(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.impl(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.nand``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.nand``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.nand(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.nand(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.nand(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.nand(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.ones``1                           | 
            <summary>
            Allocates a 1-filled generic bitmatrix
            </summary>
            <typeparam name="T">The matrix primal type</typeparam>
        
| M:Z0.BitMatrixA.zero``1                           | 
            <summary>
            Allocates a 0-filled generic bitmatrix
            </summary>
            <typeparam name="T">The matrix primal type</typeparam>
        
| M:Z0.BitMatrixA.identity``1                       | 
            <summary>
            Allocates a generic identity matrix
            </summary>
            <typeparam name="T">The matrix primal type</typeparam>
        
| M:Z0.BitMatrixA.identity``2(``0,``1)              | 
            <summary>
            Allocates an identity bitmatrix of natural order
            </summary>
            <typeparam name="N">The column/row dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrixA.ones``3(``0,``1)                  | 
            <summary>
            Allocates a 1-filled natural bitmatrix
            </summary>
            <typeparam name="M">The row dimension</typeparam>
            <typeparam name="N">The column dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrixA.ones``2(``0)                      | 
            <summary>
            Allocates a 1-filled bitmatrix of natural order
            </summary>
            <typeparam name="M">The row dimension</typeparam>
            <typeparam name="N">The column dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrixA.and``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical And between two generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrixA.or``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.nonimpl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.not``1(Z0.BitMatrix{``0}@)        | 
            <summary>
            Computes the logical negation of a generic bitmatrix, returning the allocated result to the caller
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.cnonimpl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.and``2(Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@)| 
            <summary>
            Computes the bitwise AND between two square bitmatrices of common order
            </summary>
            <param name="A">The first source operand</param>
            <param name="B">The second source operand</param>
            <typeparam name="N">The matrix order</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrixA.nor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.nor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.select``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Applies the ternary select operator to generic source matrices, returning the allocated result to the caller
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>
        
| M:Z0.BitMatrixA.select(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, returning the allocated result to the caller
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrixA.select(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, returning the allocated result to the caller
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrixA.select(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, returning the allocated result to the caller
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrixA.select(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, returning the allocated result to the caller
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix8@)            | 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix{System.Byte}@)| 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix16@)           | 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix{System.UInt16}@)| 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix32@)           | 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix{System.UInt32}@)| 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix64@)           | 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.unpack(Z0.BitMatrix{System.UInt64}@)| 
            <summary>
            Allocates a target matrix of order equivalent to that of the source and projects
            each bit value into the corresponding cell in the target
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrixA.xnor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrixA.xnor(Z0.BitMatrix4@,Z0.BitMatrix4@)| 
            <summary>
            Computes the logical Xnor between two bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xnor(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xnor(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xnor(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xnor(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xor``2(Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@)| 
            <summary>
            Computes the bitwise AND between two square bitmatrices of common order
            </summary>
        
| M:Z0.BitMatrixA.xor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical Xor between two generic bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrixA.xor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical Xor btween two generic bitmatrices, depositing the result to a caller-allocated target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="Z">The target matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrixA.xor(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the logical Xor between two primal bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xor(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical Xor between two primal bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xor(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the logical Xor between two primal bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrixA.xor(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the logical Xor between two primal bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitBlocks.testbit``1(Z0.Block256{``0}@,System.Int32)| 
            <summary>
            Tests a bit value in a T-sequence predicated on a linear index
            </summary>
            <param name="src">The bit source</param>
            <param name="index">The linear index of the target bit, relative to the sequence head</param>
            <typeparam name="T">The sequence type</typeparam>
        
| M:Z0.BitBlocks.bitseg``1(Z0.Block256{``0}@,Z0.BitPos{``0},Z0.BitPos{``0})| 
            <summary>
            Extracts a T-valued segment, cross-cell or same-cell, from the source as determined by an inclusive position range
            </summary>
            <param name="src">The bit source</param>
            <param name="firstpos">The sequence-relative position of the first bit</param>
            <param name="lastpos">The sequence-relative position of the last bit</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.setbit``1(Z0.Block256{``0}@,System.Int32,Z0.bit)| 
            <summary>
            Sets a bit value in a T-sequence predicated on a linear index
            </summary>
            <param name="src">The bit source</param>
            <param name="index">The linear index of the target bit, relative to the sequence head</param>
            <typeparam name="T">The sequence type</typeparam>
        
| M:Z0.BitBlocks.bitseg``1(Z0.Block256{``0}@,System.Int32,System.Int32)| 
            <summary>
            Extracts a T-valued segment, cross-cell or same-cell, from the source as determined by 
            an inclusive linear index range
            </summary>
            <param name="src">The bit source</param>
            <param name="firstidx">The sequence-relative index of the first bit</param>
            <param name="lastidx">The sequence-relative index of the last bit</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.readcell``1(``0@,System.Int32)     | 
            <summary>
            Reads a cell determined by a linear bit position
            </summary>
            <param name="bitpos">The linear bit position</param>
            <param name="src">A reference to grid storage</param>
            <typeparam name="T">The storage segment type</typeparam>
        
| M:Z0.BitBlocks.cell``1(``0@,System.Int32)         | 
            <summary>
            Reads/manipulates a cell identified by a linear bit position
            </summary>
            <param name="bitpos">The linear bit position</param>
            <param name="src">A reference to grid storage</param>
            <typeparam name="T">The storage segment type</typeparam>
        
| M:Z0.BitBlocks.setbit``1(System.Int32,Z0.bit,``0@)| 
            <summary>
            Sets the state of a grid bit identified by its linear position
            </summary>
            <param name="bitpos">The 0-based linear bit index</param>
            <param name="state">The source state</param>
            <param name="dst">A reference to the grid storage</param>
            <typeparam name="T">The grid storage segment type</typeparam>
        
| M:Z0.BitBlocks.transfer``2(System.Span{``1},``0)  | 
            <summary>
            Transfers span content to a bitblock without checks
            </summary>
            <param name="src">The source span</param>
            <param name="n">The bitblock length representative</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.modprod``1(Z0.BitBlock{``0}@,Z0.BitBlock{``0}@)| 
            <summary>
            Computes the Euclidean scalar product between two bitvectors using modular arithmetic
            </summary>
            <param name="x">The first vector</param>
            <param name="y">The second vector</param>
            <remarks>This should be considered a reference implementation; the dot operation is considerably faster</remarks>
        
| M:Z0.BitBlocks.modprod``2(Z0.BitBlock{``0,``1}@,Z0.BitBlock{``0,``1}@)| 
            <summary>
            Computes the Euclidean scalar product between two natural bitvectors using modular arithmetic
            </summary>
            <param name="x">The first vector</param>
            <param name="y">The second vector</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
            <remarks>This should be considered a reference implementation; the dot operation is considerably faster</remarks>
        
| M:Z0.BitBlocks.cellcount``1(System.Int32)         | 
            <summary>
            Computes the number of primal cells required to cover a specified number of bits
            </summary>
            <param name="bitcount">The number of bits to cover</param>
            <typeparam name="T">The primal cell type</typeparam>
        
| M:Z0.BitBlocks.alloc``2(``0,``1)                  | 
            <summary>
            Allocates a block and populates it with a pattern, if supplied
            </summary>
            <param name="n">The bitblock width representative</param>
            <param name="fill">The fill value</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.dot``1(Z0.BitBlock{``0}@,Z0.BitBlock{``0}@)| 
            <summary>
            Computes the scalar product between two bitblocks
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.BitBlocks.dot``2(Z0.BitBlock{``0,``1}@,Z0.BitBlock{``0,``1}@)| 
            <summary>
            Computes the scalar product between this vector and another
            </summary>
            <param name="rhs">The other vector</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.from(Z0.BitVector4)                | 
            <summary>
            Loads a bitblock from a 4-bit bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitBlocks.from(Z0.BitVector8)                | 
            <summary>
            Loads a bitblock from an 8-bit bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitBlocks.from(Z0.BitVector16)               | 
            <summary>
            Loads a bitblock from a 16-bit bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitBlocks.from(Z0.BitVector32)               | 
            <summary>
            Loads a bitblock from a 32-bit bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitBlocks.from(Z0.BitVector64)               | 
            <summary>
            Loads a bitblock from a 64-bit bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitBlocks.from``1(Z0.BitVector{``0})         | 
            <summary>
            Loads a bitblock from a generic bitvector
            </summary>
            <param name="src">The source bitvector</param>
        
| M:Z0.BitBlocks.from``1(Z0.BitString)              | 
            <summary>
            Loads a bitblock from a bitstring
            </summary>
            <param name="src">The bitstring source</param>
        
| M:Z0.BitBlocks.load``1(System.Span{System.Byte},System.Int32)| 
            <summary>
            Creates a bitvector from a span of bytes
            </summary>
            <param name="src">The source bits</param>
            <param name="n">The bitvector length</param>
        
| M:Z0.BitBlocks.single``2(``1,``0)                 | 
            <summary>
            Creates a block over a single cell
            </summary>
            <param name="src">The source value</param>
            <param name="n">The bitblock width representative</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.single``1(``0,System.Int32)        | 
            <summary>
            Creates a bitblock over a single cell
            </summary>
            <param name="src">The source segment</param>
        
| M:Z0.BitBlocks.load``1(System.Span{``0},System.Int32)| 
            <summary>
            Loads a bitblock from a span
            </summary>
            <param name="src">The source span</param>
            <param name="n">The cell count</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.BitBlocks.load``2(``1[],``0)                 | 
            <summary>
            Loads a bitblock from an array
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bitblock width representative</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.load``1(``0[])                     | 
            <summary>
            Creates a bitblock over an arbitrary number of segments
            </summary>
            <param name="src">The source segment</param>
        
| M:Z0.BitBlocks.load``2(System.Span{``1},``0)      | 
            <summary>
            Loads a natural bitcell container from a span
            </summary>
            <param name="src">The source bits</param>
            <param name="n">The bitblock width representative</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitBlocks.load``2(System.ReadOnlySpan{``1},``0)| 
            <summary>
            Loads a natural bitblock from a readonly span; allocation required
            </summary>
            <param name="src">The source bits</param>
            <typeparam name="N">The bitwidth type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.BitBlock`1                                   | 
            <summary>
            A data structure that covers and arbitrary number of 256-bit blocks of packed bits
            </summary>
        
| F:Z0.BitBlock`1.data                              | 
            <summary>
            The bitvector content
            </summary>
        
| F:Z0.BitBlock`1.BitCount                          | 
            <summary>
            The actual number of bits that are represented by the vector
            </summary>
        
| P:Z0.BitBlock`1.CellWidth                         | 
            <summary>
            The maximum number of bits that can be placed a single segment segment
            </summary>
        
| M:Z0.BitBlock`1.op_OnesComplement(Z0.BitBlock{`0}@)| 
            <summary>
            Computes the bitwise complement of the operand
            </summary>
            <param name="x">The source operand</param>
        
| M:Z0.BitBlock`1.op_True(Z0.BitBlock{`0}@)         | 
            <summary>
            Returns true if the source vector is nonzero, false otherwise
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitBlock`1.op_False(Z0.BitBlock{`0}@)        | 
            <summary>
            Returns false if the source vector is the zero vector, false otherwise
            </summary>
            <param name="src">The source vector</param>
        
| P:Z0.BitBlock`1.Data                              | 
            <summary>
            The underlying cell data
            </summary>
        
| P:Z0.BitBlock`1.Bytes                             | 
            <summary>
            Presents the represented data as a span of bytes
            </summary>
        
| P:Z0.BitBlock`1.NonEmpty                          | 
            <summary>
            Is true if at least one enabled bit; false otherwise
            </summary>
        
| P:Z0.BitBlock`1.Item(System.Int32)                | 
            <summary>
            A bit-level accessor/manipulator
            </summary>
        
| M:Z0.BitBlock`1.TakeScalarBits(System.Int32,System.Int32)| 
            <summary>
            Retrieves, at most, one cell's worth of bits defined by an inclusive bit index range
            </summary>
            <param name="first">The linear index of the first bit</param>
            <param name="last">The linear index of the last bit</param>
        
| M:Z0.BitBlock`1.ToBitString                       | 
            <summary>
            Extracts the represented data as a bitstring
            </summary>
        
| M:Z0.BitBlock`1.Pop                               | 
            <summary>
            Counts the enabled bits
            </summary>
        
| T:Z0.BitBlock`2                                   | 
            <summary>
            A data structure that covers a natural count of packed bits
            </summary>
            <typeparam name="N">The number of contained bits</typeparam>
            <typeparam name="T">The storage cell type</typeparam>
        
| P:Z0.BitBlock`2.CellWidth                         | 
            <summary>
            The maximum number of bits contained in an N[T] vector component
            </summary>
        
| P:Z0.BitBlock`2.BitCount                          | 
            <summary>
            The number of bits represented by an N[T] vector
            </summary>
        
| P:Z0.BitBlock`2.CellCount                         | 
            <summary>
            The number of segments required to allocate an N[T] vector
            </summary>
        
| P:Z0.BitBlock`2.BitCapacity                       | 
            <summary>
            The maximum number of bits that can be represented by an N[T] vector
            </summary>
        
| M:Z0.BitBlock`2.op_OnesComplement(Z0.BitBlock{`0,`1}@)| 
            <summary>
            Computes the bitwise complement of the operand
            </summary>
            <param name="lhs">The source operand</param>
        
| M:Z0.BitBlock`2.op_Modulus(Z0.BitBlock{`0,`1}@,Z0.BitBlock{`0,`1}@)| 
            <summary>
            Computes the scalar product of the operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.BitBlock`2.op_UnaryNegation(Z0.BitBlock{`0,`1}@)| 
            <summary>
            Computes the bitwise complement of the operand
            </summary>
            <param name="lhs">The source operand</param>
        
| M:Z0.BitBlock`2.op_True(Z0.BitBlock{`0,`1}@)      | 
            <summary>
            Returns true if the source vector is nonzero, false otherwise
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.BitBlock`2.op_False(Z0.BitBlock{`0,`1}@)     | 
            <summary>
            Returns false if the source vector is the zero vector, false otherwise
            </summary>
            <param name="x">The source vector</param>
        
| P:Z0.BitBlock`2.Data                              | 
            <summary>
            The data over which the bitvector is constructed
            </summary>
        
| P:Z0.BitBlock`2.Head                              | 
            <summary>
            Returns a reference to the leading segment of the underlying storage
            </summary>
        
| P:Z0.BitBlock`2.Width                             | 
            <summary>
            The number of represented bits
            </summary>
        
| P:Z0.BitBlock`2.Length                            | 
            <summary>
            The number of allocated cells
            </summary>
        
| P:Z0.BitBlock`2.Item(System.Int32)                | 
            <summary>
            A bit-level accessor/manipulator
            </summary>
        
| M:Z0.BitBlock`2.Pop                               | 
            <summary>
            Counts the vector's enabled bits
            </summary>
        
| P:Z0.BitBlock`2.Empty                             | 
            <summary>
            Returns true if no bits are enabled, false otherwise
            </summary>
        
| P:Z0.BitBlock`2.Nonempty                          | 
            <summary>
            Returns true if the vector has at least one enabled bit; false otherwise
            </summary>
        
| M:Z0.BitBlock`2.Fill(Z0.bit)                      | 
            <summary>
            Sets all the bits in use to the specified state
            </summary>
            <param name="state">The source state</param>
        
| M:Z0.XTend.FormatMatrixBits(System.Span{System.Byte},System.Int32,System.Nullable{System.Int32},System.Boolean)| 
            <summary>
            Formats a span as a bitmatrix
            </summary>
            <param name="src">The source span</param>
            <param name="rowlen">The number of bits in each row</param>
            <param name="maxbits">The maximum number of bits to format</param>
            <param name="showrow">Indicates whether the content of each row shold be preceded by the row index</param>
        
| M:Z0.XTend.FormatMatrixBits``1(System.Span{``0},System.Int32,System.Nullable{System.Int32},System.Boolean)| 
            <summary>
            Formats the content of a generic span of primal cells as a bitmatrix
            </summary>
            <param name="src">The source span</param>
            <param name="rowlen">The number of bits in each row</param>
            <param name="maxbits">The maximum number of bits to format</param>
            <param name="showrow">Indicates whether the content of each row shold be preceded by the row index</param>
            <typeparam name="T">The primal cell type</typeparam>
        
| M:Z0.XTend.ToBitCells``1(System.Span{``0},System.Int32)| 
            <summary>
            Extracts the bitcells froma span
            </summary>
            <param name="src">The source span</param>
            <param name="len">The bitvector length, if specified</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XTend.ToBitVector``2(Z0.BitBlock{``0,``1},Z0.N8)| 
            <summary>
            Converts the least significant elements of a generic natural bitvector to a 8-bit primal bitvector
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The primal source type</typeparam>        
        
| M:Z0.XTend.ToBitVector``2(Z0.BitBlock{``0,``1},Z0.N16)| 
            <summary>
            Converts the least significant elements of a generic natural bitvector to a 16-bit primal bitvector
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The primal source type</typeparam>        
        
| M:Z0.XTend.ToCpuVector``1(Z0.BitString,Z0.N128,``0)| 
            <summary>
            Extracts a 128-bit cpu vector from a bitsring of sufficient length
            </summary>
            <param name="src">The source bits</param>
            <param name="w">The bit width selector</param>
            <param name="t">The component type representative</param>
            <typeparam name="T">The target vectror component type</typeparam>
        
| M:Z0.XTend.ToCpuVector``1(Z0.BitString,Z0.N256,``0)| 
            <summary>
            Extracts a 256-bit cpu vector from a bitsring of sufficient length
            </summary>
            <param name="src">The source bits</param>
            <param name="w">The bit width selector</param>
            <param name="t">The component type representative</param>
            <typeparam name="T">The target vectror component type</typeparam>
        
| M:Z0.XTend.ToNatBits(Z0.BitVector8)               | 
            <summary>
            Converts the source bitvector to bit cells
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.XTend.ToNatBits(Z0.BitVector16)              | 
            <summary>
            Converts the source bitvector to an equivalent natural/generic bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.XTend.ToNatBits(Z0.BitVector64)              | 
            <summary>
            Converts the source bitvector it the equivalent natural/generic bitvector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.XTend.ToNatBits``2(System.ReadOnlySpan{``1},``0)| 
            <summary>
            Constructs a bitvector of natural length from a source span
            </summary>
            <param name="src">The bit source</param>
            <param name="n">The natural length</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XTend.ToNatBits``2(System.Span{``1},``0)     | 
            <summary>
            Constructs a bitvector of natural length from a source span
            </summary>
            <param name="src">The bit source</param>
            <param name="n">The natural length</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The primal segment type</typeparam>
        
| M:Z0.XTend.BitSeg``1(Z0.Block256{``0},System.Int32,System.Int32)| 
            <summary>
            Retrieves, at most, one cell's worth of bits defined by an inclusive bit index range
            </summary>
            <param name="first">The linear index of the first bit</param>
            <param name="last">The linear index of the last bit</param>
        
| M:Z0.XTend.ToBitMatrix``1(Z0.RowBits{``0})        | 
            <summary>
            Loads a generic bitmatrix from size-conformant sequence of row bits
            </summary>
            <param name="src">The source bits</param>
            <typeparam name="T">The primal data type</typeparam>
        
| M:Z0.XTend.ToBitString``3(Z0.BitMatrix{``0,``1,``2})| 
            <summary>
            Exracts a contiguous bitstring that captures the defined matrix
            </summary>
        
| M:Z0.BitMatrix.init``1(Z0.BitVector{``0})         | 
            <summary>
            Allocates a square generic bitmatrix filled with a specified row
            </summary>
            <typeparam name="T">The primal type over which the bitmatrix is constructed</typeparam>
        
| M:Z0.BitMatrix.init``1(Z0.BitVector{``0},System.Int32)| 
            <summary>
            Allocates a generic bitmatrix filled with a specified row
            </summary>
            <typeparam name="T">The primal type over which the bitmatrix is constructed</typeparam>
        
| M:Z0.BitMatrix.init``2(``1,``0)                   | 
            <summary>
            Allocates a square bitmatrix of natural order filled with a specified row
            </summary>
            <typeparam name="N">The square dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrix.init``3(``2,``0,``1)               | 
            <summary>
            Allocates a bitmatrix of natural dimensions filled with a specified cell
            </summary>
            <typeparam name="M">The row dimension</typeparam>
            <typeparam name="N">The column dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrix.alloc``1                           | 
            <summary>
            Allocates a zero-filled square generic bitmatrix
            </summary>
            <typeparam name="T">The primal type over which the bitmatrix is constructed</typeparam>
        
| M:Z0.BitMatrix.alloc``1(System.Int32)             | 
            <summary>
            Allocates a zero-filled generic bitmatrix with a specified number of rows
            </summary>
            <typeparam name="T">The primal type over which the bitmatrix is constructed</typeparam>
        
| M:Z0.BitMatrix.alloc``2(``0,``1)                  | 
            <summary>
            Allocates a zero-filled square bitmatrix of natural order
            </summary>
            <typeparam name="N">The square dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrix.alloc``3(``0,``1,``2)              | 
            <summary>
            Allocates a zero-filed bitmatrix of natural dimensions
            </summary>
            <typeparam name="M">The row dimension</typeparam>
            <typeparam name="N">The column dimension</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrix.alloc(Z0.N4,Z0.bit)                | 
            <summary>
            Allocates a primal bitmatrix 
            </summary>
            <param name="n">The bitness selector</param>
            <param name="fill">The value with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.N8,Z0.bit)                | 
            <summary>
            Allocates a primal bitmatrix 
            </summary>
            <param name="n">The bitness selector</param>
            <param name="fill">The value with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.N8,Z0.BitVector8)         | 
            <summary>
            Allocates a primal bitmatrix with rows filled by a specified vector
            </summary>
            <param name="fill">The row with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.N16,Z0.bit)               | 
            <summary>
            Allocates a primal bitmatrix 
            </summary>
            <param name="n">The bitness selector</param>
            <param name="fill">The value with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.BitVector16)              | 
            <summary>
            Allocates a primal bitmatrix with rows filled by a specified vector
            </summary>
            <param name="fill">The row with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.N32,Z0.bit)               | 
            <summary>
            Allocates a primal bitmatrix 
            </summary>
            <param name="n">The bitness selector</param>
            <param name="fill">The value with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.BitVector32)              | 
            <summary>
            Allocates a primal bitmatrix with rows filled by a specified vector
            </summary>
            <param name="fill">The row with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.N64,Z0.bit)               | 
            <summary>
            Allocates a primal bitmatrix 
            </summary>
            <param name="n">The bitness selector</param>
            <param name="fill">The value with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.alloc(Z0.BitVector64)              | 
            <summary>
            Allocates a primal bitmatrix with rows filled by a specified vector
            </summary>
            <param name="fill">The row with which the allocated matrix is filled</param>
        
| M:Z0.BitMatrix.and``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical And between two generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrix.and``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical and and between two generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="dst">The target matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrix.and``2(Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@)| 
            <summary>
            Computes the bitwise AND between two square bitmatrices of common natural order and stores the
            result a caller-supplied target matrix
            </summary>
            <param name="A">The first source operand</param>
            <param name="B">The second source operand</param>
            <param name="C">The target</param>
            <typeparam name="N">The matrix order</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix4@,Z0.BitMatrix4@) | 
            <summary>
            Computes the logical And between two source bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix8@,Z0.BitMatrix8@) | 
            <summary>
            Computes the logical And between two source bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the logical and btween two source bitmatrices and deposits the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical And between two primal bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical And btween two source bitmatrices and deposits the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the logical And between two primal bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the logical and btween two source bitmatrices and deposits the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the logical And between two priaml bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.and(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the logical and btween two source bitmatrices and deposits the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| M:Z0.BitMatrix.broadcast``1(Z0.BitVector{``0},Z0.BitMatrix{``0}@)| 
            <summary>
            Overwrites each row of a generic bitmatrix with a specified source vector
            </summary>
            <param name="x">The source vector</param>
            <param name="A">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.broadcast(Z0.BitVector8,Z0.BitMatrix8@)| 
            <summary>
            Overwrites each row of a primal bitmatrix with a specified source vector
            </summary>
            <param name="x">The source vector</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.broadcast(Z0.BitVector16,Z0.BitMatrix16@)| 
            <summary>
            Overwrites each row of a primal bitmatrix with a specified source vector
            </summary>
            <param name="x">The source vector</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.broadcast(Z0.BitVector32,Z0.BitMatrix32@)| 
            <summary>
            Overwrites each row of a primal bitmatrix with a specified source vector
            </summary>
            <param name="x">The source vector</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.broadcast(Z0.BitVector64,Z0.BitMatrix64@)| 
            <summary>
            Overwrites each row of a primal bitmatrix with a specified source vector
            </summary>
            <param name="x">The source vector</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.cellcount``3(``0,``1,``2)          | 
            <summary>
            Computes the minimum number of cells required to store a bitmatrix of natural dimensions where each row is data-type aligned
            </summary>
            <param name="m">The row count representative</param>
            <param name="n">The col count representative</param>
            <param name="t">A cell type representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The col count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrix.cimpl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cimpl(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cnonimpl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.cnonimpl(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.col(Z0.BitMatrix4@,System.Int32)   | 
            <summary>
            Queries the matrix for the data in an index-identified column 
            </summary>
            <param name="index">The row index</param>
        
| M:Z0.BitMatrix.diagonal``1(Z0.BitMatrix{``0}@)    | 
            <summary>
            Extracts the diagonal from a generic bitmatrix
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The matrix storage type</typeparam>
        
| M:Z0.BitMatrix.diagonal(Z0.BitMatrix16@)          | 
            <summary>
            Extracts the diagonal from a primal bitmatrix
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.diagonal(Z0.BitMatrix32@)          | 
            <summary>
            Extracts the diagonal from a primal bitmatrix
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.diagonal(Z0.BitMatrix64@)          | 
            <summary>
            Extracts the diagonal from a primal bitmatrix
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.empty``1(Z0.BitMatrix{``0}@)       | 
            <summary>
            Determines whether the matrix is 0-filled
            </summary>
        
| M:Z0.BitMatrix.empty(Z0.BitMatrix8@)              | 
            <summary>
            Determines whether the matrix is 0-filled
            </summary>
        
| M:Z0.BitMatrix.empty(Z0.BitMatrix16@)             | 
            <summary>
            Determines whether the matrix is 0-filled
            </summary>
        
| M:Z0.BitMatrix.empty(Z0.BitMatrix32@)             | 
            <summary>
            Determines whether the matrix is 0-filled
            </summary>
        
| M:Z0.BitMatrix.empty(Z0.BitMatrix64@)             | 
            <summary>
            Determines whether the matrix is 0-filled
            </summary>
        
| M:Z0.BitMatrix.from``1(Z0.RowBits{``0}@)          | 
            <summary>
            Loads a generic bitmatrix from a rowbit sequence
            </summary>
            <param name="rows">The row content</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.graph``1(Z0.BitMatrix{``0}@)       | 
            <summary>
            Constructs the graph determined by an adjacency bitmatrix
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.graph(Z0.BitMatrix8)               | 
            <summary>
            Constructs a 8-node graph via the adjacency matrix interpretation
            </summary>
            <param name="src">The source matrix</param>
        
| M:Z0.BitMatrix.graph(Z0.BitMatrix16)              | 
            <summary>
            Constructs a 16-node graph via the adjacency matrix interpretation
            </summary>
            <param name="src">The source matrix</param>
        
| M:Z0.BitMatrix.graph(Z0.BitMatrix32)              | 
            <summary>
            Constructs a 32-node graph via the adjacency matrix interpretation
            </summary>
            <param name="src">The source matrix</param>
        
| M:Z0.BitMatrix.graph(Z0.BitMatrix64)              | 
            <summary>
            Constructs a 64-node graph via the adjacency matrix interpretation
            </summary>
            <param name="src">The source matrix</param>
        
| M:Z0.BitMatrix.graph``2(Z0.BitMatrix{``0,``1})    | 
            <summary>
            Constructs a graph from an adjacency bitmatrix of natural order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dim">The dimension of the matrix</param>
            <param name="v">An arbitrary value to help type inference</param>
            <typeparam name="V">The vertex index type</typeparam>
            <typeparam name="N">The dimension type</typeparam>
            <typeparam name="T">The source matrix element type</typeparam>
        
| M:Z0.BitMatrix.hprod``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the Hadamard product of the source matrix and another of the same dimension
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Hadamard_product_(matrices)</remarks>
        
| M:Z0.BitMatrix.hprod(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the Hadamard product of the source matrix and another of the same dimension
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Hadamard_product_(matrices)</remarks>
        
| M:Z0.BitMatrix.hprod(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the Hadamard product of the source matrix and another of the same dimension
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Hadamard_product_(matrices)</remarks>
        
| M:Z0.BitMatrix.hprod(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the Hadamard product of the source matrix and another of the same dimension
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Hadamard_product_(matrices)</remarks>
        
| M:Z0.BitMatrix.hprod(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the Hadamard product of the source matrix and another of the same dimension
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Hadamard_product_(matrices)</remarks>
        
| M:Z0.BitMatrix.impl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.impl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.impl(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.impl(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.impl(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.impl(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.init``2(Z0.BitBlock{``0,``1}@)     | 
            <summary>
            Creates a new generic bitmatrix where each row is initialized to a common source vector
            </summary>
            <param name="row">The source vector used to fill each row</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.init``3(Z0.BitBlock{``1,``2}@,``0) | 
            <summary>
            Creates a new generic bitmatrix where each row is initialized to a common row
            </summary>
            <param name="row">The source vector used to fill each row</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.init(Z0.BitVector8)                | 
            <summary>
            Creates a new primal bitmatrix where each row is initialized to a common source vector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitMatrix.init(Z0.BitVector16)               | 
            <summary>
            Creates a new primal bitmatrix where each row is initialized to a common source vector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitMatrix.init(Z0.BitVector32)               | 
            <summary>
            Creates a new primal bitmatrix where each row is initialized to a common source vector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitMatrix.init(Z0.BitVector64)               | 
            <summary>
            Creates a new primal bitmatrix where each row is initialized to a common source vector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.BitMatrix.load``1(System.Span{``0})          | 
            <summary>
            Loads a generic bitmatrix from a span
            </summary>
            <param name="src">The row content</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.load``2(``0,System.Span{``1})      | 
            <summary>
            Loads a square bitmatrix of natural order from an span
            </summary>
            <param name="src">The source span</param>
            <param name="n">The matrix order</param>
            <typeparam name="N">The matrix order type</typeparam>
            <typeparam name="T">The matrix cell type</typeparam>
        
| M:Z0.BitMatrix.load``2(System.Span{``1})          | 
            <summary>
            Loads a square bitmatrix of natural order from an span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="N">The matrix order type</typeparam>
            <typeparam name="T">The matrix cell type</typeparam>
        
| M:Z0.BitMatrix.load``3(``0,``1,System.Span{``2})  | 
            <summary>
            Loads an MxN natural bitmatrix from an array
            </summary>
            <param name="src">The source array</param>
            <param name="n">The matrix order</param>
            <typeparam name="N">The matrix order type</typeparam>
            <typeparam name="T">The matrix cell type</typeparam>
        
| M:Z0.BitMatrix.load``3(System.Span{``2})          | 
            <summary>
            Loads an MxN natural bitmatrix from an array
            </summary>
            <param name="src">The source array</param>
            <param name="n">The matrix order</param>
            <typeparam name="N">The matrix order type</typeparam>
            <typeparam name="T">The matrix cell type</typeparam>
        
| M:Z0.BitMatrix.mul``1(Z0.BitMatrix{``0}@,Z0.BitVector{``0}@)| 
            <summary>
            Applies a bitmatrix to a bitvector to yield a transformed bitvector
            </summary>
            <param name="A">The bitmatrix that defines the transformation</param>
            <param name="x">The vector to be transformed</param>
        
| M:Z0.BitMatrix.mul(Z0.BitMatrix4,Z0.BitVector4)   | 
            <summary>
            Applies a bitmatrix to a bitvector to yield a transformed bitvector
            </summary>
            <param name="A">The bitmatrix that defines the transformation</param>
            <param name="x">The vector to be transformed</param>
        
| M:Z0.BitMatrix.mul(Z0.BitMatrix8@,Z0.BitVector8@) | 
            <summary>
            Applies a bitmatrix to a bitvector to yield a transformed bitvector
            </summary>
            <param name="A">The bitmatrix that defines the transformation</param>
            <param name="x">The vector to be transformed</param>
        
| M:Z0.BitMatrix.mul(Z0.BitMatrix4@,Z0.BitMatrix4@,Z0.BitMatrix4@)| 
            <summary>
            Multiplies two primal bitmatrices of order 4, writing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.mul(Z0.BitMatrix4@,Z0.BitMatrix4@) | 
            <summary>
            Multiplies two primal bitmatrices of order 8, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.mul(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Multiplies two primal bitmatrices of order 8, writing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.mul(Z0.BitMatrix8@,Z0.BitMatrix8@) | 
            <summary>
            Multiplies two primal bitmatrices of order 8, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.mul``4(Z0.BitMatrix{``0,``1,``3}@,Z0.BitMatrix{``1,``2,``3}@,Z0.BitMatrix{``0,``2,``3}@)| 
            <summary>
            Computes the product of bitmatrices of comparible natural dimensions and stores the
            result to a caller-supplied target matrix
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="Z">The target matrix</param>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The matrix storage type</typeparam>
        
| M:Z0.BitMatrix.mul``2(Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@)| 
            <summary>
            Computes the product of square bitmatrices of common natural order and stores the result to a caller-supplied target matrix
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="Z">The target matrix</param>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The matrix storage type</typeparam>
        
| M:Z0.BitMatrix.mul``2(Z0.BitMatrix{``0,``1}@,Z0.BitMatrix{``0,``1}@)| 
            <summary>
            Computes the product of square bitmatrices of common natural order and returns the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="Z">The target matrix</param>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The matrix storage type</typeparam>
        
| M:Z0.BitMatrix.nand``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.nand(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nand(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nand(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nand(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.natural(Z0.BitMatrix8@)            | 
            <summary>
            Projects, without allocation, a primal bitmatrix onto a generic bitmatrix of natural order
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.natural(Z0.BitMatrix16@)           | 
            <summary>
            Projects, without allocation, a primal bitmatrix onto a generic bitmatrix of natural order
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.natural(Z0.BitMatrix32@)           | 
            <summary>
            Projects, without allocation, a primal bitmatrix onto a generic bitmatrix of natural order
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.natural(Z0.BitMatrix64@)           | 
            <summary>
            Projects, without allocation, a primal bitmatrix onto a generic bitmatrix of natural order
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.natural``2(``1,``0)                | 
            <summary>
            Creates a square bitmatrix of natural order from a single cell
            </summary>
            <param name="data">The data cell</param>
            <param name="n">The order representative</param>
            <typeparam name="N">The order type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrix.natural``2(System.Span{``1},``0)   | 
            <summary>
            Creates a square bitmatrix of natural order from a span
            </summary>
            <param name="data">The data source</param>
            <param name="n">The order representative</param>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The order type</typeparam>
        
| M:Z0.BitMatrix.natural``3(``2,``0,``1)            | 
            <summary>
            Creates a bitmatrix of natural dimensions from a single cell
            </summary>
            <param name="data">The data cell</param>
            <param name="m">The row count representative</param>
            <param name="n">The column count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrix.natural``3(System.Span{``2},``0,``1)| 
            <summary>
            Creates a bitmatrix of natural dimensions from a span
            </summary>
            <param name="data">The data source</param>
            <param name="m">The row count representative</param>
            <param name="n">The column count representative</param>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The column count type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BitMatrix.nonimpl``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nonimpl(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix4@,Z0.BitMatrix4@) | 
            <summary>
            Computes the logical Nor between two bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix8@,Z0.BitMatrix8@) | 
            <summary>
            Computes the logical Nor between two bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical Nor between bitmatrices and deposits the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical Nor between two bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the logical Nor between bitmatrices and deposits the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.nor(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.not``1(Z0.BitMatrix{``0}@)         | 
            <summary>
            Computes the logical negation of a generic bitmatrix, returning the allocated result to the caller
            </summary>
            <param name="a">The source matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.not``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical negation of a generic bitmatrix, depositing the result to the caller-supplied target
            </summary>
            <param name="A">The source matrix</param>
            <param name="Z">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.not(Z0.BitMatrix4@)                | 
            <summary>
            Computes the logical negation of the source matrix, returning the allocated result to the caller 
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix8@)                | 
            <summary>
            Computes the logical negation of a primal bitmatrix, returning the allocated result to the caller
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix8@,Z0.BitMatrix8@) | 
            <summary>
            Computes the logical negation of a primal bitmatrix, depositing the result to the caller-supplied target
            </summary>
            <param name="A">The source matrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix16@)               | 
            <summary>
            Computes the logical negation of a primal bitmatrix, returning the allocated result to the caller
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical negation of a primal bitmatrix, depositing the result to the caller-supplied target
            </summary>
            <param name="A">The source matrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix32@)               | 
            <summary>
            Computes the logical negation of a primal bitmatrix, returning the allocated result to the caller
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the logical negation of a primal bitmatrix, depositing the result to the caller-supplied target
            </summary>
            <param name="A">The source matrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix64@)               | 
            <summary>
            Computes the logical negation of a primal bitmatrix, returning the allocated result to the caller
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.not(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the logical negation of a primal bitmatrix, depositing the result to the caller-supplied target
            </summary>
            <param name="A">The source matrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.oprod(Z0.BitVector32,Z0.BitVector32)| 
            <summary>
            Computes the outer product of two bitvectors and returns the allocated result
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <remarks>See https://en.wikipedia.org/wiki/Outer_product</remarks>
        
| M:Z0.BitMatrix.oprod``1(Z0.BitVector{``0},Z0.BitVector{``0},Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the outer product of two bitvectors and stores the result in a caller-supplied target
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <remarks>See https://en.wikipedia.org/wiki/Outer_product</remarks>
        
| M:Z0.BitMatrix.oprod``1(Z0.BitVector{``0},Z0.BitVector{``0})| 
            <summary>
            Computes the outer product of two bitvectors and returns the allocated result
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <remarks>See https://en.wikipedia.org/wiki/Outer_product</remarks>
        
| M:Z0.BitMatrix.or``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.or(Z0.BitMatrix4@,Z0.BitMatrix4@)  | 
            <summary>
            Computes the logical Or between two bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix8@,Z0.BitMatrix8@)  | 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.or(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, returning the allocated result
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.permute``1(Z0.Perm,Z0.BitMatrix{``0}@)| 
            <summary>
            Permutes the rows of a matrix in-place according to a permutation
            </summary>
            <param name="spec">The permutation definition</param>
            <param name="A">The matrix to be permuted</param>
        
| M:Z0.BitMatrix.permute(Z0.NatPerm{Z0.N8}@,Z0.BitMatrix8@)| 
            <summary>
            Permutes the rows of a matrix in-place according to a permutation
            </summary>
            <param name="perm">The permutation to apply</param>
            <param name="A">The matrix to be permuted</param>
        
| M:Z0.BitMatrix.permute(Z0.NatPerm{Z0.N16}@,Z0.BitMatrix16@)| 
            <summary>
            Permutes the rows of a matrix in-place according to a specified permutation
            </summary>
            <param name="perm">The permutation to apply</param>
            <param name="A">The matrix to be permuted</param>
        
| M:Z0.BitMatrix.permute(Z0.NatPerm{Z0.N32}@,Z0.BitMatrix32@)| 
            <summary>
            Permutes the rows of a matrix in-place according to a permutation
            </summary>
            <param name="perm">The permutation definition</param>
            <param name="A">The source/target matrix</param>
        
| M:Z0.BitMatrix.permute(Z0.NatPerm{Z0.N64}@,Z0.BitMatrix64@)| 
            <summary>
            Permutes the rows of a matrix in-place according to a permutation
            </summary>
            <param name="perm">The permutation definition</param>
            <param name="A">The source/target matrix</param>
        
| M:Z0.BitMatrix.permute(Z0.NatPerm{Z0.N64})        | 
            <summary>
            Creates a canonical permutation matrix by swapping matrix rows of the identity matrix as specified by a permutation
            </summary>
            <param name="spec">The permutation spec</param>
        
| M:Z0.BitMatrix.pop(Z0.BitMatrix8@)                | 
            <summary>
            Counts the number of enabled bits in the matrix
            </summary>
        
| M:Z0.BitMatrix.pop(Z0.BitMatrix16@)               | 
            <summary>
            Counts the number of enabled bits in the matrix
            </summary>
        
| M:Z0.BitMatrix.pop(Z0.BitMatrix32@)               | 
            <summary>
            Counts the number of enabled bits in the matrix
            </summary>
        
| M:Z0.BitMatrix.pop(Z0.BitMatrix64@)               | 
            <summary>
            Counts the number of enabled bits in the matrix
            </summary>
        
| M:Z0.BitMatrix.premul(Z0.NatPerm{Z0.N8}@,Z0.BitMatrix8@)| 
            <summary>
            Permutes the rows of a target matrix via premultiplication by a permutation-identified permutation matrix 
            </summary>
            <param name="spec">The permutation definition</param>
        
| M:Z0.BitMatrix.premul(Z0.NatPerm{Z0.N16}@,Z0.BitMatrix16)| 
            <summary>
            Permutes the rows of a target matrix via premultiplication by a permutation-identified permutation matrix 
            </summary>
            <param name="spec">The permutation definition</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.premul(Z0.NatPerm{Z0.N32}@,Z0.BitMatrix32@)| 
            <summary>
            Permutes the rows of a target matrix via premultiplication by a permutation-identified permutation matrix 
            </summary>
            <param name="spec">The permutation definition</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.premul(Z0.NatPerm{Z0.N64}@,Z0.BitMatrix64@)| 
            <summary>
            Permutes the rows of a target matrix via premultiplication by a permutation-identified permutation matrix 
            </summary>
            <param name="spec">The permutation definition</param>
            <param name="A">The target matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N4,System.UInt16)        | 
            <summary>
            Defines a primal bitmatrix of order 4
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N4,Z0.BitVector4[])      | 
            <summary>
            Defines a primal bitmatrix of order 4
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N8,System.Span{System.Byte})| 
            <summary>
            Defines a primal bitmatrix of order 8
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N8,System.ReadOnlySpan{System.Byte})| 
            <summary>
            Defines a primal bitmatrix of order 8
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N8,System.UInt32,System.UInt32)| 
            <summary>
            Defifines a matrix from two 32-bit unsigned integers; the upper value contains
            the data for rows 0...3 and the lower value contains the dat for rows [4 ... 7]
            </summary>
            <param name="lo">The upper row data</param>
            <param name="hi">The lower row data</param>
        
| M:Z0.BitMatrix.primal(Z0.N16,System.Span{System.UInt16})| 
            <summary>
            Defines a primal bitmatrix of order 16
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N16,System.ReadOnlySpan{System.Byte})| 
            <summary>
            Defines a primal bitmatrix of order 16
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N32,System.Span{System.UInt32})| 
            <summary>
            Defines a primal bitmatrix of order 32
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N32,System.ReadOnlySpan{System.Byte})| 
            <summary>
            Defines a primal bitmatrix of order 32
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N64,System.Span{System.UInt64})| 
            <summary>
            Defines a primal bitmatrix of order 64
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.primal(Z0.N64,System.ReadOnlySpan{System.Byte})| 
            <summary>
            Defines a primal bitmatrix of order 64
            </summary>
            <param name="n">The order selector</param>
            <param name="src">The data used to populate the matrix</param>
        
| M:Z0.BitMatrix.same``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Determines whether two generic bitmatrices are identical, returning an enabled bit if so and a disabled bit otherwise
            </summary>
            <param name="a">The left matrix</param>
            <param name="b">The right matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrix.same(Z0.BitMatrix4,Z0.BitMatrix4)  | 
            <summary>
            Determines whether two primal bitmatrices are identical, returning an enabled bit if so and a disabled bit otherwise
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.same(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Determines whether two primal bitmatrices are identical, returning an enabled bit if so and a disabled bit otherwise
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.same(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Determines whether two primal bitmatrices are identical, returning an enabled bit if so and a disabled bit otherwise
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.same(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Determines whether two primal bitmatrices are identical, returning an enabled bit if so and a disabled bit otherwise
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.same(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Determines whether two primal bitmatrices are identical, returning an enabled bit if so and a disabled bit otherwise
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.select``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Applies the ternary select operator to generic source matrices, writing the result to a caller-supplied target
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>
        
| M:Z0.BitMatrix.select(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, writing the result to a caller-supplied target
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrix.select(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, writing the result to a caller-supplied target
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrix.select(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, writing the result to a caller-supplied target
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrix.select(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Applies the ternary select operator to primal source matrices, writing the result to a caller-supplied target
            </summary>
            <param name="A">The first matrix</param>
            <param name="B">The second matrix</param>
            <param name="C">The third matrix</param>
        
| M:Z0.BitMatrix.testc``1(Z0.BitMatrix{``0}@)       | 
            <summary>
            Returns true if all bits in a source matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>
        
| M:Z0.BitMatrix.testc``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Returns true if all bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
            <param name="B">The mask matrix</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix8@)              | 
            <summary>
            Returns true if all bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
            <param name="mask">The mask matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix16@)             | 
            <summary>
            Returns true if all bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
            <param name="mask">The mask matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix32@)             | 
            <summary>
            Returns true if all bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
            <param name="mask">The mask matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix64@)             | 
            <summary>
            Returns true if all bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
        
| M:Z0.BitMatrix.testc(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are enabled, false otherwise
            </summary>
            <param name="a">The source matrix</param>
            <param name="mask">The mask matrix</param>
        
| M:Z0.BitMatrix.testz``1(Z0.BitMatrix{``0}@)       | 
            <summary>
            Returns true if all bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
            <typeparam name="T">The primal type over which the matrix is defined</typeparam>
        
| M:Z0.BitMatrix.testz``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
            <param name="M">The mask matrix</param>
            <typeparam name="T">The primal type over which the matrix is defined</typeparam>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix8@)              | 
            <summary>
            Returns true if all bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
            <param name="M">The mask matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix16@)             | 
            <summary>
            Returns true if all bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
            <param name="M">The mask matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix32@)             | 
            <summary>
            Returns true if all bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
            <param name="M">The mask matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix64@)             | 
            <summary>
            Returns true if all bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.testz(Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Returns true if all mask-identified bits in a matrix are disabled, false otherwise
            </summary>
            <param name="A">The source matrix</param>
            <param name="M">The mask matrix</param>
        
| M:Z0.BitMatrix.transpose(Z0.BitMatrix4@)          | 
            <summary>
            Transposes a copy of the matrix
            </summary>
        
| M:Z0.BitMatrix.transpose_v4(Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Transposes an 8x8 bitmatrix
            </summary>
            <param name="A"></param>
            <param name="Z"></param>
            <remarks>Code adapted from Hacker's Delight</remarks>
        
| P:Z0.BitMatrix.Tr8x16MaskBytes                    | 
            <summary>
             When used as a mask for _mm_shuffle_epi8, transposes a 8x16 bitmatrix
            </summary>
        
| M:Z0.BitMatrix.unpack``1(Z0.BitMatrix16@,Z0.Matrix{Z0.N16,``0}@)| 
            <summary>
            Projects the bits of a fixed primal bitmatrix into a generic target matrix of the same order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrix.unpack``1(Z0.BitMatrix8@,Z0.Matrix{Z0.N8,``0}@)| 
            <summary>
            Projects the bits of a fixed primal bitmatrix into a generic target matrix of the same order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrix.unpack``1(Z0.BitMatrix32@,Z0.Matrix{Z0.N32,``0}@)| 
            <summary>
            Projects the bits of a fixed primal bitmatrix into a generic target matrix of the same order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrix.unpack``1(Z0.BitMatrix64@,Z0.Matrix{Z0.N64,``0}@)| 
            <summary>
            Projects the bits of a fixed primal bitmatrix into a generic target matrix of the same order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrix.unpack``3(Z0.BitMatrix{``1}@,Z0.Matrix{``0,``2}@)| 
            <summary>
             Projects the bits in the source matrix onto cells of a conventional matrix
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target matrix</param>
            <typeparam name="T">The element type of the target matrix</typeparam>
        
| M:Z0.BitMatrix.unpack``3(Z0.BitMatrix{``0,``1}@,Z0.Matrix{``0,``2}@)| 
            <summary>
            Projects the bits of a generic sqare bitmatix of natural order into a generic target matrix of the same order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="N">The orer type</typeparam>
            <typeparam name="S">The source matrix element type</typeparam>
            <typeparam name="T">The target matrix element type</typeparam>
        
| M:Z0.BitMatrix.unpack``4(Z0.BitMatrix{``0,``1,``2}@,Z0.Matrix{``0,``1,``3}@)| 
            <summary>
            Projects the bits of a generic bitmatix of natural dimensions into a generic matrix of the same dimensions
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="M">The row dimension type</typeparam>
            <typeparam name="N">The col dimension type</typeparam>
            <typeparam name="S">The source matrix element type</typeparam>
            <typeparam name="T">The target matrix element type</typeparam>
        
| M:Z0.BitMatrix.unpack``3(Z0.BitMatrix{``0,``1}@,Z0.Matrix256{``0,``2}@)| 
            <summary>
            Projects the bits of a square generic bitmatix of natural order into a generic block matrix of the same order
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="M">The row dimension type</typeparam>
            <typeparam name="N">The col dimension type</typeparam>
            <typeparam name="S">The source matrix element type</typeparam>
            <typeparam name="T">The target matrix element type</typeparam>
        
| M:Z0.BitMatrix.unpack``4(Z0.BitMatrix{``0,``1,``2}@,Z0.Matrix256{``0,``1,``3}@)| 
            <summary>
            Projects the bits of a generic bitmatix of natural dimensions into a generic block matrix of the same dimensions
            </summary>
            <param name="src">The source matrix</param>
            <param name="dst">The target metrix</param>
            <typeparam name="M">The row dimension type</typeparam>
            <typeparam name="N">The col dimension type</typeparam>
            <typeparam name="S">The source matrix element type</typeparam>
            <typeparam name="T">The target matrix element type</typeparam>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix8@,Z0.Matrix{Z0.N8,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix{System.Byte}@,Z0.Matrix{Z0.N8,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix16@,Z0.Matrix{Z0.N16,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix{System.UInt16}@,Z0.Matrix{Z0.N16,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix32@,Z0.Matrix{Z0.N32,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix{System.UInt32}@,Z0.Matrix{Z0.N32,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix64@,Z0.Matrix{Z0.N64,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.unpack(Z0.BitMatrix{System.UInt64}@,Z0.Matrix{Z0.N64,Z0.bit}@)| 
            <summary>
            Projects each bit value in the source matrix to a cell in a caller-supplied conventional matrix
            </summary>
            <param name="A">The source bitmatrix</param>
            <param name="Z">The target matrix</param>
        
| M:Z0.BitMatrix.vload(Z0.BitMatrix8@)              | 
            <summary>
            Loads the lower half of a 128-bit cpu vector from matrix data
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.vload(Z0.BitMatrix16@)             | 
            <summary>
            Loads a 256-bit cpu vector from matrix data
            </summary>
            <param name="A">The source matrix</param>
        
| M:Z0.BitMatrix.vload(Z0.BitMatrix32@,System.Int32)| 
            <summary>
            Loads a 256-bit cpu vector from matrix data beginning at a specified offset
            </summary>
            <param name="A">The source matrix</param>
            <param name="offset">The offset into the source, relative to the primal type, at which to begin reading data</param>
        
| M:Z0.BitMatrix.vload(Z0.BitMatrix64@,System.Int32)| 
            <summary>
            Loads a 256-bit cpu vector from matrix data beginning at a specified offset
            </summary>
            <param name="A">The source matrix</param>
            <param name="offset">The offset into the source, relative to the primal type, at which to begin reading data</param>
        
| M:Z0.BitMatrix.xnor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the converse implication for generic bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
            <typeparam name="T">The primal type over which the matrix is constructed</typeparam>        
        
| M:Z0.BitMatrix.xnor(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.xnor(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.xnor(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.xnor(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the converse implication for primal bitmatrices, depositing the result to a caller-supplied target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="B">The target matrix</param>
        
| M:Z0.BitMatrix.xor``1(Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@,Z0.BitMatrix{``0}@)| 
            <summary>
            Computes the logical Xor btween two generic bitmatrices, depositing the result to a caller-allocated target
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
            <param name="Z">The target matrix</param>
            <typeparam name="T">The primal type over which the matrices are constructed</typeparam>        
        
| M:Z0.BitMatrix.xor(Z0.BitMatrix4@,Z0.BitMatrix4@) | 
            <summary>
            Computes the logical Xor between two bitmatrices and returns the allocated result to the caller
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.BitMatrix.xor(Z0.BitMatrix8@,Z0.BitMatrix8@,Z0.BitMatrix8@)| 
            <summary>
            Computes the logical Xor btween two primal bitmatrices, depositing the result to a caller-allocated target
            </summary>
            <param name="a">The left matrix</param>
            <param name="b">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| M:Z0.BitMatrix.xor(Z0.BitMatrix16@,Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the logical Xor btween two primal bitmatrices, depositing the result to a caller-allocated target
            </summary>
            <param name="a">The left matrix</param>
            <param name="b">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| M:Z0.BitMatrix.xor(Z0.BitMatrix32@,Z0.BitMatrix32@,Z0.BitMatrix32@)| 
            <summary>
            Computes the logical Xor btween two primal bitmatrices, depositing the result to a caller-allocated target
            </summary>
            <param name="a">The left matrix</param>
            <param name="b">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| M:Z0.BitMatrix.xor(Z0.BitMatrix64@,Z0.BitMatrix64@,Z0.BitMatrix64@)| 
            <summary>
            Computes the logical Xor btween two primal bitmatrices, depositing the result to a caller-allocated target
            </summary>
            <param name="a">The left matrix</param>
            <param name="b">The right matrix</param>
            <param name="dst">The target matrix</param>
        
| T:Z0.RowBits                                      | 
            <summary>
            Defines primary api surface for rowbit manipulation
            </summary>
            <summary>
            Defines primary api surface for rowbit manipulation
            </summary>
        
| M:Z0.RowBits.alloc``1(System.Int32)               | 
            <summary>
            xllocates a specified number of rows
            </summary>
            <param name="rows">The row count</param>
            <typeparam name="T">The primal type that implicitly defines the number of coluns in each row</typeparam>
        
| M:Z0.RowBits.load``1(System.Span{System.Byte})    | 
            <summary>
            Loads loads rows from a bytespan
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The primal type that implicitly defines the number of matrix coluns</typeparam>
        
| M:Z0.RowBits.load``1(System.Span{``0})            | 
            <summary>
            Loads loads rows from a span
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The primal type that implicitly defines the number of matrix coluns</typeparam>
        
| M:Z0.RowBits.load``1(``0[])                       | 
            <summary>
            Loads rows from an array
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The primal type that implicitly defines the number of matrix coluns</typeparam>
        
| M:Z0.BitMatrix16x.ToCells(Z0.BitMatrix16)         | 
            <summary>
            Converts the matrix to a bitvector
            </summary>
        
| M:Z0.BitMatrix16x.ToBitMatrix(Z0.NatPerm{Z0.N16}) | 
            <summary>
            Creates the matrix determined by a permutation
            </summary>
            <param name="perm">The source permutation</param>
        
| M:Z0.BitMatrix16x.ToGeneric(Z0.BitMatrix16)       | 
            <summary>
            Creates a generic matrix from the primal source data
            </summary>
        
| M:Z0.BitMatrix16x.ToNatural(Z0.BitMatrix16)       | 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix16x.ToNatural(Z0.BitMatrix{System.UInt16})| 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix16x.IsZero(Z0.BitMatrix16)          | 
            <summary>
            Determines whether this matrix is equivalent to the canonical 0 matrix
            </summary>
        
| M:Z0.BitMatrix16x.Transpose(Z0.BitMatrix16)       | 
            <summary>
            Transposes a copy of the source matrix
            </summary>
        
| M:Z0.BitMatrix32x.ToBitCells(Z0.BitMatrix32)      | 
            <summary>
            Converts the matrix to a bitvector
            </summary>
        
| M:Z0.BitMatrix32x.ToBitMatrix(Z0.NatPerm{Z0.N32}) | 
            <summary>
            Creates the matrix determined by a permutation
            </summary>
            <param name="src">The source permutation</param>
        
| M:Z0.BitMatrix32x.ToGeneric(Z0.BitMatrix32)       | 
            <summary>
            Creates a generic matrix from the primal source data
            </summary>
        
| M:Z0.BitMatrix32x.ToNatural(Z0.BitMatrix32)       | 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix32x.ToNatural(Z0.BitMatrix{System.UInt32})| 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix32x.IsZero(Z0.BitMatrix32)          | 
            <summary>
            Determines whether this matrix is equivalent to the canonical 0 matrix
            </summary>
        
| M:Z0.BitMatrix4x.ToBitVector(Z0.BitMatrix4)       | 
            <summary>
            Converts the matrix to a bitvector
            </summary>
        
| M:Z0.BitMatrix4x.Transpose(Z0.BitMatrix4)         | 
            <summary>
            Transposes a copy of the source matrix
            </summary>
        
| M:Z0.BitMatrix64x.ToBitVector(Z0.BitMatrix64)     | 
            <summary>
            Converts the matrix to a bitvector
            </summary>
        
| M:Z0.BitMatrix64x.ToBitMatrix(Z0.NatPerm{Z0.N64}) | 
            <summary>
            Creates the matrix determined by a permutation
            </summary>
            <param name="perm">The source permutation</param>
        
| M:Z0.BitMatrix64x.ToGeneric(Z0.BitMatrix64)       | 
            <summary>
            Creates a generic matrix from the primal source data
            </summary>
        
| M:Z0.BitMatrix64x.ToNatural(Z0.BitMatrix64)       | 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix64x.ToNatural(Z0.BitMatrix{System.UInt64})| 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix64x.IsZero(Z0.BitMatrix64)          | 
            <summary>
            Determines whether this matrix is equivalent to the canonical 0 matrix
            </summary>
        
| M:Z0.BitMatrix8x.ToBitVector(Z0.BitMatrix8)       | 
            <summary>
            Converts the matrix to a bitvector
            </summary>
        
| M:Z0.BitMatrix8x.ToGeneric(Z0.BitMatrix8)         | 
            <summary>
            Creates a generic matrix from the primal source data
            </summary>
        
| M:Z0.BitMatrix8x.ToBitMatrix(Z0.NatPerm{Z0.N8})   | 
            <summary>
            Creates the matrix determined by a permutation
            </summary>
            <param name="perm">The source permutation</param>
        
| M:Z0.BitMatrix8x.ToNatural(Z0.BitMatrix8)         | 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix8x.ToNatural(Z0.BitMatrix{System.Byte})| 
            <summary>
            Converts the source matrix to a square matrix of natural order
            </summary>
        
| M:Z0.BitMatrix8x.IsZero(Z0.BitMatrix8)            | 
            <summary>
            Determines whether this matrix is equivalent to the canonical 0 matrix
            </summary>
        
| M:Z0.BitMatrix8x.ToGraph(Z0.BitMatrix8)           | 
            <summary>
            Constructs an 8-node graph via the adjacency matrix interpretation
            </summary>
        
| M:Z0.BitMatrix8x.Pack(Z0.BitMatrix8)              | 
            <summary>
            Packs the matrix into an unsigned 64-bit integer
            </summary>
        
| M:Z0.BitMatrix8x.Transpose(Z0.BitMatrix8)         | 
            <summary>
            Transposes a copy of the source matrix
            </summary>
        
| M:Z0.BitMatrix8x.Diagonal(Z0.BitMatrix8)          | 
            <summary>
            Retrives the bitvector determined by the matrix diagonal
            </summary>
        
| M:Z0.BitMatrix8x.Replicate(Z0.BitMatrix8)         | 
            <summary>
            Creates a new matrix by cloning the existing matrix or allocating a matrix with the same structure
            </summary>
            <param name="structureOnly">Specifies whether the replication reproduces only structure and is thus equivalent to an allocation</param>
        
| M:Z0.TabularTruth.vector(Z0.N4,Z0.UnaryBitLogic)  | 
            <summary>
            Computes a the signature, also referred to as the truth vector, for an identified unary operator
            </summary>
            <param name="kind">The operator kind</param>
        
| M:Z0.TabularTruth.vector(Z0.N4,Z0.BinaryLogicKind)| 
            <summary>
            Computes a the signature, also referred to as the truth vector, for an identified binary operator
            </summary>
            <param name="kind">The operator kind</param>
        
| M:Z0.TabularTruth.vector(Z0.N4,Z0.BinaryBitLogic) | 
            <summary>
            Computes a the signature, also referred to as the truth vector, for an identified binary operator
            </summary>
            <param name="kind">The operator kind</param>
        
| M:Z0.TabularTruth.vector(Z0.N8,Z0.TernaryBitLogic)| 
            <summary>
            Computes a the signature, also referred to as the truth vector, for an identified ternary operator
            </summary>
            <param name="kind">The operator kind</param>
        
| M:Z0.TabularTruth.vector(Z0.N16,Z0.BinaryLogicKind)| 
            <summary>
            Constructs a canonical vector that defines a kind-identified operator
            </summary>
            <param name="kind">The operator kind</param>
        
| T:Z0.RowBits`1                                    | 
            <summary>
            Defines a sequence of generic bitvectors, interpreted as rows, for which the width is determined by the bitvector primal type 
            </summary>
            <remarks>The primary use case for this data structure is to faciltate efficient bitwise 
            operations over generic scalar sequences where the length of the sequence varies</remarks>
        
| M:Z0.RowBits`1.op_BitwiseAnd(Z0.RowBits{`0}@,Z0.RowBits{`0}@)| 
            <summary>
            Computes the bitwise AND between the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.RowBits`1.op_BitwiseOr(Z0.RowBits{`0}@,Z0.RowBits{`0}@)| 
            <summary>
            Computes the bitwise OR between the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.RowBits`1.op_ExclusiveOr(Z0.RowBits{`0}@,Z0.RowBits{`0}@)| 
            <summary>
            Computes the bitwise XOR between the operands
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| M:Z0.RowBits`1.op_OnesComplement(Z0.RowBits{`0}@) | 
            <summary>
            Computes the bitwise complement of the source matrix
            </summary>
            <param name="src">The source matrix</param>
        
| P:Z0.RowBits`1.Head                               | 
            <summary>
            A reference to the first storage cell allocated to the matrix
            </summary>
        
| P:Z0.RowBits`1.Bytes                              | 
            <summary>
            The underlying matrix presented as a bytespan
            </summary>
        
| P:Z0.RowBits`1.IsSquare                           | 
            <summary>
            Specifies whether the matrix is square; if so, it can be represented by one of the primal matrices
            </summary>
        
| P:Z0.RowBits`1.Item(System.Int32)                 | 
            <summary>
            Queries/manipulates index-identified row data
            </summary>
        
| T:Z0.TableIndex                                   | 
            <summary>
            Correlates a linear bit index, a cell index and bit offset, and a row/column coordinate in a grid/matrix
            </summary>
        
| F:Z0.TableIndex.CellIndex                         | 
            <summary>
            The container-relative index of the storage segment containing the bit
            </summary>
        
| F:Z0.TableIndex.RowCellCount                      | 
            <summary>
            The number of cells covered by a row
            </summary>
        
| F:Z0.TableIndex.BitOffset                         | 
            <summary>
            The segment-relative bit offset
            </summary>
        
| F:Z0.TableIndex.BitIndex                          | 
            <summary>
            The 0-based position of the cell
            </summary>
        
| F:Z0.TableIndex.RowIndex                          | 
            <summary>
            The 0-based row index
            </summary>
        
| F:Z0.TableIndex.ColIndex                          | 
            <summary>
            The 0-based column index
            </summary>
        
| T:Z0.BitMatrix`1                                  | 
            <summary>
            Defines a square bitmatrix with order determined by the primal type over which it is defined
            The intent is to provide a primal bitmatrix generalization 
            </summary>
        
| P:Z0.BitMatrix`1.Order                            | 
            <summary>
            Specifies the number rows/columns
            </summary>
        
| T:Z0.BitMatrix16                                  | 
            <summary>
            Defines a 16x16 matrix of bits
            </summary>
        
| F:Z0.BitMatrix16.N                                | 
            <summary>
            The matrix order
            </summary>
        
| P:Z0.BitMatrix16.Identity                         | 
            <summary>
            Defines the 16x16 identity bitmatrix
            </summary>
        
| P:Z0.BitMatrix16.Zero                             | 
            <summary>
            Allocates a 16x16 zero bitmatrix
            </summary>
        
| M:Z0.BitMatrix16.Alloc(Z0.bit)                    | 
            <summary>
            Allocates a matrix with a fill value
            </summary>
        
| M:Z0.BitMatrix16.op_BitwiseAnd(Z0.BitMatrix16@,Z0.BitMatrix16@)| 
            <summary>
            Computes the bitwise and of the operands
            </summary>
        
| P:Z0.BitMatrix16.Bytes                            | 
            <summary>
            The underlying matrix presented as a bytespan
            </summary>
        
| P:Z0.BitMatrix16.Content                          | 
            <summary>
            The underlying matrix data
            </summary>
        
| P:Z0.BitMatrix16.Head                             | 
            <summary>
            A reference to the first row of the matrix
            </summary>
        
| P:Z0.BitMatrix16.Item(System.Int32,System.Int32)  | 
            <summary>
            Reads/manipulates the bit in a specified cell
            </summary>
            <param name="row">The row index</param>
            <param name="col">The column index</param>
            <param name="src">The source value</param>
        
| P:Z0.BitMatrix16.Item(System.Int32)               | 
            <summary>
            Gets/sets an identified row
            </summary>
            <param name="row">The row index</param>
        
| T:Z0.BitMatrix32                                  | 
            <summary>
            Defines a 32x32 matrix of bits
            </summary>    
        
| F:Z0.BitMatrix32.N                                | 
            <summary>
            The matrix order
            </summary>
        
| P:Z0.BitMatrix32.Identity                         | 
            <summary>
            Allocates a 32x32 identity bitmatrix
            </summary>
        
| P:Z0.BitMatrix32.Zero                             | 
            <summary>
            Allocates a 32x32 zero bitmatrix
            </summary>
        
| P:Z0.BitMatrix32.Content                          | 
            <summary>
            The underlying matrix data
            </summary>
        
| P:Z0.BitMatrix32.Bytes                            | 
            <summary>
            The underlying matrix presented as a bytespan
            </summary>
        
| P:Z0.BitMatrix32.Head                             | 
            <summary>
            A reference to the first row of the matrix
            </summary>
        
| P:Z0.BitMatrix32.Order                            | 
            <summary>
            The square matrix order
            </summary>
        
| P:Z0.BitMatrix32.Item(System.Int32,System.Int32)  | 
            <summary>
            Queries/manipulates a bit in an identified cell
            </summary>
            <param name="row">The row index</param>
            <param name="col">The column index</param>
        
| P:Z0.BitMatrix32.Item(System.Int32)               | 
            <summary>
            Queries/manipulates row data
            </summary>
            <param name="row">The row index</param>
        
| F:Z0.BitMatrix4.N                                 | 
            <summary>
            The matrix order
            </summary>
        
| P:Z0.BitMatrix4.Identity                          | 
            <summary>
            Allocates a 4x4 identity bitmatrix
            </summary>
        
| M:Z0.BitMatrix4.Alloc(Z0.bit)                     | 
            <summary>
            Allocates a matrix, optionally assigning each element to the specified bit value
            </summary>
        
| M:Z0.BitMatrix4.GetRow(System.Int32)              | 
            <summary>
            Gets an index-identified row vector
            </summary>
            <param name="index">The row index</param>
        
| T:Z0.BitMatrix64                                  | 
            <summary>
            Defines a 64x64 matrix of bits
            </summary>
        
| F:Z0.BitMatrix64.N                                | 
            <summary>
            The matrix order
            </summary>
        
| P:Z0.BitMatrix64.Identity                         | 
            <summary>
            Defines the 64x64 identity bitmatrix
            </summary>
        
| P:Z0.BitMatrix64.Zero                             | 
            <summary>
            Defines the 64x64 zero bitmatrix
            </summary>
        
| P:Z0.BitMatrix64.Order                            | 
            <summary>
            Specifies the number of rows in the matrix
            </summary>
        
| P:Z0.BitMatrix64.Bytes                            | 
            <summary>
            The underlying matrix presented as a bytespan
            </summary>
        
| P:Z0.BitMatrix64.Content                          | 
            <summary>
            The underlying matrix data
            </summary>
        
| P:Z0.BitMatrix64.Head                             | 
            <summary>
            A reference to the first row of the matrix
            </summary>
        
| P:Z0.BitMatrix64.Item(System.Int32,System.Int32)  | 
            <summary>
            Reads/manipulates the bit in a specified cell
            </summary>
            <param name="row">The row index</param>
            <param name="col">The column index</param>
            <param name="src">The source value</param>
        
| P:Z0.BitMatrix64.Item(System.Int32)               | 
            <summary>
            Gets or sets the data for a specified row
            </summary>
            <param name="row">The row index</param>
        
| T:Z0.BitMatrix8                                   | 
            <summary>
            Defines an 8x8 matrix of bits
            </summary>
        
| F:Z0.BitMatrix8.N                                 | 
            <summary>
            The matrix order
            </summary>
        
| P:Z0.BitMatrix8.Identity                          | 
            <summary>
            Allocates an 8x8 identity bitmatrix
            </summary>
        
| P:Z0.BitMatrix8.Zero                              | 
            <summary>
            Allocates an 8x8 zero bitmatrix
            </summary>
        
| P:Z0.BitMatrix8.Ones                              | 
            <summary>
            Allocates an 8x8 1-filled bitmatrix
            </summary>
        
| P:Z0.BitMatrix8.Head                              | 
            <summary>
            A reference to the first row of the matrix
            </summary>
        
| P:Z0.BitMatrix8.Order                             | 
            <summary>
            The square matrix order
            </summary>
        
| P:Z0.BitMatrix8.Item(System.Int32,System.Int32)   | 
            <summary>
            Reads/manipulates the bit in a specified cell
            </summary>
            <param name="row">The row index</param>
            <param name="col">The column index</param>
            <param name="src">The source value</param>
        
| P:Z0.BitMatrix8.Item(System.Int32)                | 
            <summary>
            Gets/Sets the data for a row
            </summary>
            <param name="index">The row index</param>
        
| T:Z0.BitMatrix`3                                  | 
            <summary>
            Defines a bitmatrix of natural dimensions over a primal type
            </summary>
            <typeparam name="M">The row dimension</typeparam>
            <typeparam name="N">The column dimension</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitMatrix`3.Alloc                            | 
            <summary>
            Allocates a Zero-filled mxn matrix
            </summary>
        
| M:Z0.BitMatrix`3.Load(System.Span{`2})            | 
            <summary>
            Loads a matrix from an array of appopriate length
            </summary>
        
| P:Z0.BitMatrix`3.Content                          | 
            <summary>
            Presents matrix storage as a span of generic cells
            </summary>
        
| P:Z0.BitMatrix`3.Head                             | 
            <summary>
            Returns a reference to the leading segment of the underlying storage
            </summary>
        
| P:Z0.BitMatrix`3.Bytes                            | 
            <summary>
            Presents matrix storage as a bytespan
            </summary>
        
| P:Z0.BitMatrix`3.RowCount                         | 
            <summary>
            The number of rows in the matrix
            </summary>
        
| P:Z0.BitMatrix`3.ColCount                         | 
            <summary>
            The number of columns in the matrix
            </summary>
        
| P:Z0.BitMatrix`3.CellCount                        | 
            <summary>
            The number of allocated storage cells
            </summary>
        
| P:Z0.BitMatrix`3.Item(System.Int32,System.Int32)  | 
            <summary>
            Queries/manipulates a bit at a specified row/col
            </summary>
        
| P:Z0.BitMatrix`3.Item(System.Int32)               | 
            <summary>
            Queries mainpulates a row
            </summary>
        
| M:Z0.BitMatrix`3.SetCol(System.Int32,Z0.BitBlock{`0,`2})| 
            <summary>
            Replaces an index-identied column of data with the content of a column vector
            </summary>
            <param name="col">The column index</param>
        
| M:Z0.BitMatrix`3.GetCol(System.Int32)             | 
            <summary>
            Retrieves an index-identied column of data presented as a bitvector
            </summary>
            <param name="col">The column index</param>
        
| M:Z0.BitMatrix`3.Fill(Z0.bit)                     | 
            <summary>
            Sets all the bits to align with the source value
            </summary>
            <param name="value">The source value</param>
        
| M:Z0.BitMatrix`3.Transpose                        | 
            <summary>
            The world's most inefficient bitmatrix transpose
            </summary>
        
| T:Z0.BitMatrix`2                                  | 
            <summary>
            Defines a square bitmatrix of natural order over a primal type
            </summary>
            <typeparam name="N">The matrix order</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| P:Z0.BitMatrix`2.RowWidth                         | 
            <summary>
            The bit width of each row/column 
            </summary>
        
| P:Z0.BitMatrix`2.CellWidth                        | 
            <summary>
            The bit width of a storage cell
            </summary>
        
| P:Z0.BitMatrix`2.RowCellCount                     | 
            <summary>
            The (padded) number of cells required for each row of storage
            </summary>
        
| M:Z0.BitMatrix`2.op_Multiply(Z0.BitMatrix{`0,`1},Z0.BitMatrix{`0,`1})| 
            <summary>
            Multiplies the left matrix by the right
            </summary>
            <param name="A">The left matrix</param>
            <param name="B">The right matrix</param>
        
| P:Z0.BitMatrix`2.Head                             | 
            <summary>
            Returns a reference to the leading segment of the underlying storage
            </summary>
        
| P:Z0.BitMatrix`2.Item(System.Int32)               | 
            <summary>
            Queries/Specifies a row
            </summary>
        
| P:Z0.BitMatrix`2.Order                            | 
            <summary>
            The number of rows/cols in the matrix
            </summary>
        
| P:Z0.BitMatrix`2.Content                          | 
            <summary>
            Provides direct access to the underlying bitstore
            </summary>
        
| M:Z0.BitMatrix`2.SetCol(System.Int32,Z0.BitBlock{`0,`1})| 
            <summary>
            Replaces an index-identied column of data with the content of a column vector
            </summary>
            <param name="col">The column index</param>
        
| M:Z0.BitMatrix`2.GetCol(System.Int32)             | 
            <summary>
            Retrieves an index-identied column of data presented as a bitvector
            </summary>
            <param name="col">The column index</param>
        
| M:Z0.BitMatrix`2.Fill(Z0.bit)                     | 
            <summary>
            Sets all the bits to align with the source value
            </summary>
            <param name="value">The source value</param>
        
