Method      | Z0.SystemEventWriter.Receive(Z0.PulseEvent)                           | Writes a system heartbeat event
Method      | Z0.Machines.Fsm.TransitionRule``2(``0,``1,``1)                        | Defines a single state transition rule of the form (trigger : E, source : S) -&gt; target : S
Method      | Z0.Machines.Fsm.TransitionFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.ITransitionRule{``0,``1}})| Defines a machine transition function (trigger : E, source: S) -&gt; target : S             that determines machine transition behavior
Method      | Z0.Machines.Fsm.OutputRule``3(``0,``1,``2)                            | Defines an output rule of the form (trigger : E, source : S) -&gt; output : O            that specifies that output to emit when an input is received when in the source state
Method      | Z0.Machines.Fsm.OutputFunction``3(System.Collections.Generic.IEnumerable{Z0.Machines.IOutputRule{``0,``1,``2}})| Defines a machine transition function (trigger : E, source: S) -&gt; target : S             that determines machine transition behavior
Method      | Z0.Machines.Fsm.EntryRule``2(``0,``1)                                 | Defines an action that fires upon state entry
Method      | Z0.Machines.Fsm.EntryFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.IFsmActionRule{``0,``1}})| Defines an entry action function
Method      | Z0.Machines.Fsm.ExitRuleRule``2(``0,``1)                              | Defines an action that fires upon state exit
Method      | Z0.Machines.Fsm.ExitFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.IFsmActionRule{``0,``1}})| Defines an exit action function
Method      | Z0.Machines.Fsm.Machine``2(System.String,Z0.Machines.IFsmContext,``1,``1,Z0.Machines.MachineTransition{``0,``1})| Defines the most basic FSM, predicated only on ground-state, end-state and transition function
Method      | Z0.Machines.Fsm.OutputRuleKey``2(``0,``1)                             | Defines an output rule key
Method      | Z0.Machines.Fsm.EntryRuleKey``1(``0)                                  | Defines an entry rule key
Method      | Z0.Machines.Fsm.ExitRuleKey``1(``0)                                   | Defines an exit rule key
Method      | Z0.Machines.Fsm.TransitionRuleKey``2(``0,``1)                         | Defines a key for a transition rule
Method      | Z0.Machines.Fsm.Machine``3(System.String,Z0.Machines.IFsmContext,``1,``1,Z0.Machines.MachineTransition{``0,``1},Z0.Machines.EntryFunction{``1,``2},Z0.Machines.ExitFunction{``1,``2})| Defines a machine that supports entry/exit actions on a per-state basis
Method      | Z0.Machines.Fsm.DefaultObserver``2(Z0.Machines.Fsm{``0,``1},System.Nullable{Z0.Machines.ObserverTrace})| Creates a default machine observer
Method      | Z0.Machines.Fsm.CreateContext(Z0.IPolyrand,System.Nullable{System.UInt64})| Creates a machine context
Method      | Z0.Machines.Fsm.Run``2(Z0.Machines.Fsm{``0,``1})                      | Runs a machine
Method      | Z0.Machines.FsmX.ToFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.TransitionRule{``0,``1}})| Forms a transition function from a sequence of transition rules
Method      | Z0.Machines.FsmX.TraceTransitions(Z0.Machines.ObserverTrace)          | Specifies whether an observer should be notified when a machine transitions from            one state to a different state
Method      | Z0.Machines.FsmX.TraceEvents(Z0.Machines.ObserverTrace)               | Specifies whether an observer should be notified when a machine receives an event
Method      | Z0.Machines.FsmX.TraceCompletions(Z0.Machines.ObserverTrace)          | Specifies whether an observer should be notified when a machine attains the completion state
Method      | Z0.Machines.FsmX.TraceErrors(Z0.Machines.ObserverTrace)               | Specifies whether an observer should be notified when an error condition is detected
Property    | Z0.Machines.FsmContext.ReceiptLimit                                   | If specified, the maximum number of event submissions the machine            will accept prior to forced termination
Type        | Z0.Machines.InputReceipt`1                                            | Delegate for event that fires when an input event has been received
Type        | Z0.Machines.Transitioned`1                                            | Delegate for event that fires when a state transition occurs
Type        | Z0.Machines.Completed                                                 | Delegate for event that fires when a machine attains endstate
Type        | Z0.Machines.MachineError                                              | Delegate for error event
Type        | Z0.Machines.StateEntry`2                                              | Delegate that fires upon state entry
Type        | Z0.Machines.StateExit`2                                               | Delegate that fires upon state exit
Type        | Z0.Machines.IFsmContext                                               | Defines context specialization for FSM
Property    | Z0.Machines.IRuleKey`2.Trigger                                        | The triggering event
Property    | Z0.Machines.IRuleKey`2.Source                                         | The source state
Property    | Z0.Machines.IFsmActionRule`1.Action                                   | The action invoked
Type        | Z0.Machines.IFsmStateRule`1                                           | Characterizes a state machine rule predicated wholly or in part on a source state
Property    | Z0.Machines.IFsmStateRule`1.Source                                    | The source state
Type        | Z0.Machines.IFsmEventRule`1                                           | Characterizes a state machine rule predicated wholly or in part on an input event
Property    | Z0.Machines.IFsmEventRule`1.Trigger                                   | The triggering event
Property    | Z0.Machines.IFsmActionRule`2.Source                                   | The state upon which the rule is predicated
Type        | Z0.Machines.IFsmRule`2                                                | Characterizes a state machine rule predicated on an input event and source state
Property    | Z0.Machines.IFsmRule`2.Key                                            | The rule key for hash-based lookups
Type        | Z0.Machines.ITransitionRule`2                                         | Characterizes a rule of the form (input : E, source : S) -&gt; target : S
Property    | Z0.Machines.ITransitionRule`2.Target                                  | The target state
Type        | Z0.Machines.IOutputRule`3                                             | Characterizes a rule of the form (input : E, source : S) -&gt; output : S
Property    | Z0.Machines.IOutputRule`3.Output                                      | The output produced
Type        | Z0.Machines.IFsmFunction                                              | Charaterizes a state machine partial function
Type        | Z0.Machines.Fsm`2                                                     | Defines a state machine with minimal feature-set
Property    | Z0.Machines.Fsm`2.Runtime                                             | Records the time spent actively running
Property    | Z0.Machines.Fsm`2.Transition                                          | The machine transition function
Property    | Z0.Machines.Fsm`2.ReceiptCount                                        | The number of events that have been received
Property    | Z0.Machines.Fsm`2.TransitionCount                                     | The number of state transtions that have occurred
Property    | Z0.Machines.Fsm`2.EndState                                            | The endstate which implicitly signals processing completion
Field       | Z0.Machines.Fsm`2.CurrentState                                        | The current state
Field       | Z0.Machines.Fsm`2.Error                                               | An arror that occurred, if any, prior to normal completion
Property    | Z0.Machines.Fsm`2.Context                                             | The machine context
Property    | Z0.Machines.Fsm`2.Id                                                  | Identifies the machine within the process
None        | Z0.Machines.Fsm`2.InputReceipt                                        | Fires when input is received
None        | Z0.Machines.Fsm`2.Transitioned                                        | Fires when a transition occurs from one state to a different state
None        | Z0.Machines.Fsm`2.Completed                                           | Fires when the machine has reached endstate
None        | Z0.Machines.Fsm`2.Oops                                                | Fires when an error is trapped
Property    | Z0.Machines.Fsm`2.Triggers                                            | Specifies the events that the machine can accept
Property    | Z0.Machines.Fsm`2.Finished                                            | Indicates whether the machine has finished
Property    | Z0.Machines.Fsm`2.StartTime                                           | Records the time at which the machine was started
Property    | Z0.Machines.Fsm`2.EndTime                                             | Records the time at which the machine stopped
Property    | Z0.Machines.Fsm`2.Started                                             | Specifies whether the machine has started
Property    | Z0.Machines.Fsm`2.ReceiptLimit                                        | Specifies the maximum number of events that will be accept prior            to forceful termination
Method      | Z0.Machines.Fsm`2.Start                                               | Begins machine execution
Method      | Z0.Machines.Fsm`2.Submit(`0)                                          | Submits input to the machine
Method      | Z0.Machines.Fsm`2.OnEntry(`1)                                         | Called upon state entry
Method      | Z0.Machines.Fsm`2.OnExit(`1)                                          | Called upon state exit
Type        | Z0.Machines.Fsm`3                                                     | Defines a state machine that supports state entry actions
Field       | Z0.Machines.Fsm`3.EntryFunc                                           | The function to evaluate upon state entry to determine the associated action, if any
Field       | Z0.Machines.Fsm`3.ExitFunc                                            | The function to evaluate upon state exit to determine the associated action, if any
Field       | Z0.Machines.Fsm`3.EntryAction                                         | The entry action
Field       | Z0.Machines.Fsm`3.ExitAction                                          | The exit action
Type        | Z0.Machines.FsmMessages                                               | Defines common messages that are issued during setup/execution
Type        | Z0.Machines.FsmObserver`2                                             | Receives notifications from an active machine
Method      | Z0.Machines.FsmObserver`2.OnComplete(Z0.Machines.FsmStats,System.Boolean)| Receives notification that a state machine has attained its endstate
Method      | Z0.Machines.FsmObserver`2.OnTransition(`1,`1)                         | Receives notification that a transition has occurred
Method      | Z0.Machines.FsmObserver`2.OnReceipt(`0)                               | Receives notification that an event has ben submitted
Method      | Z0.Machines.FsmObserver`2.OnError(System.Exception)                   | Receives notification that an error has occurred
Type        | Z0.Machines.FsmStats                                                  | Captures state machine execution metrics
Property    | Z0.Machines.FsmStats.MachineId                                        | Identifies the machine within the executing process
Property    | Z0.Machines.FsmStats.StartTime                                        | The time the machine received the start signal
Property    | Z0.Machines.FsmStats.EndTime                                          | The time the machine workflow completed
Property    | Z0.Machines.FsmStats.ReceiptCount                                     | The number of received events
Property    | Z0.Machines.FsmStats.TransitionCount                                  | The number of state transtions that have occurred
Property    | Z0.Machines.FsmStats.Runtime                                          | The time spent during active execution
Method      | Z0.Machines.PrimalFsm.Specify``1(System.String,``0,``0,``0,``0,System.UInt64)| Defines a primal state machine
Method      | Z0.Machines.PrimalFsm.Create``1(Z0.Machines.PrimalFsmSpec{``0},System.UInt64,System.UInt64)| Creates a primal FSM according to a supplied spec with a specified random seed and stream index
Method      | Z0.Machines.PrimalFsm.Run``1(Z0.Machines.PrimalFsmSpec{``0},System.Int32,System.Boolean)| Executes one or more primal state machines
Method      | Z0.Machines.PrimalFsm.RunConcurrent``1(Z0.Machines.PrimalFsmSpec{``0},System.Span{System.UInt64},System.Span{System.UInt64})| Executes the specified machines concurrently
Method      | Z0.Machines.PrimalFsm.RunSequential``1(Z0.Machines.PrimalFsmSpec{``0},System.Span{System.UInt64},System.Span{System.UInt64})| Executes the specified machines sequentially
Type        | Z0.Machines.PrimalFsmSpec`1                                           | Specifies a state machine via scalar values
Property    | Z0.Machines.PrimalFsmSpec`1.Classifier                                | An identifier that defines a membership class that is propagaged to all machines predicated on the specification
Property    | Z0.Machines.PrimalFsmSpec`1.StateCount                                | The number of states the machine will support
Property    | Z0.Machines.PrimalFsmSpec`1.EventCount                                | The number of events the machine will recognize
Property    | Z0.Machines.PrimalFsmSpec`1.MinEventSamples                           | The minimum number of events that will be sampled for each state
Property    | Z0.Machines.PrimalFsmSpec`1.MaxEventSamples                           | The maximum number of events that will be sampled for each state
Property    | Z0.Machines.PrimalFsmSpec`1.ReceiptLimit                              | The maximum number of events that the machine will accept
Property    | Z0.Machines.PrimalFsmSpec`1.StartState                                | The initial state as determined by the default value of the primal type, i.e. StartState = default
Property    | Z0.Machines.PrimalFsmSpec`1.EndState                                  | The final state as determined by the state count, i.e. EndState := StateCount - 1
Method      | Z0.Machines.PrimalFsmSpec`1.WithStateCount(`0)                        | Modifies the state count in-place
Method      | Z0.Machines.PrimalFsmSpec`1.WithEventCount(`0)                        | Modifies the event count in-place
Method      | Z0.Machines.PrimalFsmSpec`1.WithClassifier(System.String)             | Modifies the classifier in-place
Method      | Z0.Machines.PrimalFsmSpec`1.WithSampleLimits(`0,`0)                   | Modifies the min and max event sample sizes in-place
Type        | Z0.Machines.ActionRule`2                                              | Characterizes an action that that executes per machine rules
Method      | Z0.Machines.ActionRule`2.op_Implicit(System.ValueTuple{`0,`1})~Z0.Machines.ActionRule{`0,`1}| Constructs a rule from a source/action pair
Property    | Z0.Machines.ActionRule`2.Source                                       | The state upon which the rule is predicated
Property    | Z0.Machines.ActionRule`2.Action                                       | The action invoked
Property    | Z0.Machines.ActionRule`2.Key                                          | The rule key
Property    | Z0.Machines.ActionRule`2.RuleId                                       | The rule identifier
Type        | Z0.Machines.ActionRuleKey`1                                           | Identifies an action rule for lookup purposes
Type        | Z0.Machines.EntryFunction`2                                           | Defines a set of rules that define actions associated with state entry
Type        | Z0.Machines.ExitFunction`2                                            | Defines a set of rules that define actions associated with state Exit
Type        | Z0.Machines.MachineOutput`3                                           | Defines a partial state machine output function of the form             (source : S, target : S) -&gt; output : Option[O]            for source/target pairs in the domain. If an input value (s1:S, s2:S)             is not in the function domain, en empty option is returned
Method      | Z0.Machines.MachineOutput`3.Output(`0,`1)                             | Computes the output value, if any, for a specified source state and event
Method      | Z0.Machines.MachineOutput`3.Rule(Z0.Machines.IRuleKey)                | Searches for the output rule given a key
Type        | Z0.Machines.MachineTransition`2                                       | Encapsulates the set of all rules (input : E, source : S) -&gt; target : S that define state machine transitions
Property    | Z0.Machines.MachineTransition`2.Triggers                              | Specifies the set of events that can effect a transition
Type        | Z0.Machines.OutputRule`3                                              | Specifies a state machine rule of the form (input:E, source:S) -&gt; output:O
Method      | Z0.Machines.OutputRule`3.op_Implicit(System.ValueTuple{`0,`1,`2})~Z0.Machines.OutputRule{`0,`1,`2}| Constructs an output rule from a (source,target,output) triple
Property    | Z0.Machines.OutputRule`3.Trigger                                      | The source state
Property    | Z0.Machines.OutputRule`3.Source                                       | The target state
Property    | Z0.Machines.OutputRule`3.Output                                       | The output value associated with the specified state
Property    | Z0.Machines.OutputRule`3.Key                                          | The key that identifies the rule
Property    | Z0.Machines.OutputRule`3.RuleId                                       | The rule id as determined by the key
Type        | Z0.Machines.OutputRuleKey`2                                           | Defines a key for efficient/predicatable output rule indexing/lookup
Property    | Z0.Machines.OutputRuleKey`2.Hash                                      | The invariant hash
Type        | Z0.Machines.TransitionRule`2                                          | Defines state transition rule of the form (input : E, source : S) -&gt; target : S
Method      | Z0.Machines.TransitionRule`2.op_Implicit(System.ValueTuple{`0,`1,`1})~Z0.Machines.TransitionRule{`0,`1}| Constructs a state transition rule from an (input,source,target) triple
Property    | Z0.Machines.TransitionRule`2.Trigger                                  | The transiion event trigger
Property    | Z0.Machines.TransitionRule`2.Source                                   | The state upon which the rule is predicated
Property    | Z0.Machines.TransitionRule`2.Target                                   | The target state
Property    | Z0.Machines.TransitionRule`2.Key                                      | The key that identifies the rule
Property    | Z0.Machines.TransitionRule`2.RuleId                                   | The rule id as determined by the key
Type        | Z0.Machines.TransitionRuleKey`2                                       | Defines a key, predicated on input event and current state, identifies a transition rule
Property    | Z0.Machines.TransitionRuleKey`2.Trigger                               | The triggering event
Property    | Z0.Machines.TransitionRuleKey`2.Source                                | The source state
Type        | Z0.MachineEvent                                                       | Identifies an application-level/logical event
Type        | Z0.MachineEvent`1                                                     | Represents an application-level/logical event with which data specific to an event class is associated
Field       | Z0.MachineEvent`1.Payload                                             | Data specific to an event class
Method      | Z0.MachineEvent`1.Materialize(System.Span{System.Byte})               | Reconstitutes an event from a sequence of bytes
Method      | Z0.MachineEvent`1.Serialize                                           | Renders the event as a sequence of bytes
Type        | Z0.EventEmitter                                                       | Defines base type for event originators
Type        | Z0.EventEmitter`1                                                     | Base type for event type-specific event originators
Type        | Z0.EventIdentity                                                      | Defines logical event identity
Method      | Z0.EventIdentity.Define(System.UInt32,System.UInt32,System.UInt64,System.UInt64)| Constructs an event identity from a (kind,server,agent,time) tuple
Field       | Z0.EventIdentity.ServerId                                             | The originating server
Field       | Z0.EventIdentity.AgentId                                              | The originating agent
Field       | Z0.EventIdentity.Timestamp                                            | Represents the time at which the event originated
Field       | Z0.EventIdentity.EventKind                                            | The event classifier/discriminator
Property    | Z0.EventIdentity.Origin                                               | Specifies the spacetime event origin
Type        | Z0.EventOrigin                                                        | Captures an instant in time with respect to a server/agent,            real or simulated
Field       | Z0.EventOrigin.Location                                               | Uniquely identifies the logical event source
Field       | Z0.EventOrigin.Timestamp                                              | The time of occurrence, expressed as number of elapsed ticks             from some fixed point in time
Method      | Z0.EventOrigin.op_Implicit(System.ValueTuple{System.UInt64,System.UInt64})~Z0.EventOrigin| Constructs an origin from an ordered pair of location and timestamp
Method      | Z0.EventOrigin.op_Implicit(System.ValueTuple{System.UInt32,System.UInt32,System.UInt64})~Z0.EventOrigin| Constructs an origin from an ordered triple of server, agent and timestamp
Property    | Z0.EventOrigin.Server                                                 | The originating server
Property    | Z0.EventOrigin.Agent                                                  | The originating agent / application
Type        | Z0.Heartbeat                                                          | Captures an instant in time with respect to a server/agent
Field       | Z0.Heartbeat.ServerId                                                 | The originating server
Field       | Z0.Heartbeat.AgentId                                                  | The originating agent
Field       | Z0.Heartbeat.Timestamp                                                | Represents the time at which the event originated
Type        | Z0.IntrinsicEvents                                                    | Defines identifiers for intrinsic system events
Type        | Z0.PulseEmitter                                                       | Produces a periodic pulse event
Type        | Z0.PulseEmitterConfig                                                 | Defines configuration parameters for pulse emission
Property    | Z0.PulseEmitterConfig.Frequency                                       | Specifies the emission frequency
Type        | Z0.PulseEvent                                                         | Represents a pulse/tick/heartbeat relative to some frequency
Type        | Z0.IServerEvent                                                       | Bears witness to an occurence of something of identifiable interest             at a unique point in spacetime. The (Location,Timestamp,EventKind) triplet            confers upon the event a logical identity that identifies it across all spacetime.            The implicit invariant that this construct confers upon an event source, which has            a fixed location, is that the source many not produce two events of the same kind            at the same moment in time, relative to timestamp resolution
Property    | Z0.IServerEvent.Identity                                              | Identifies a system event with respect to time/space/subject
Property    | Z0.IServerEvent.EventKind                                             | Specifies an event classifer that can be used to agregate/distinguish sorts of events
Property    | Z0.IServerEvent.ServerId                                              | Identifies the server that originated the event
Property    | Z0.IServerEvent.AgentId                                               | Identifies the server-owned agent that originated the event
Property    | Z0.IServerEvent.LocationId                                            | A value that uniquely identifies the logical event source, predicated            on server and agent identity
Property    | Z0.IServerEvent.Timestamp                                             | The time of occurrence, expressed as number of elapsed units            from some fixed point in time
Type        | Z0.IEventEmitter                                                      | Characterizes an event orignator
Type        | Z0.ServerAgent                                                        | Defines a logical server
Type        | Z0.ServerComplex                                                      | Agent that manages a collection of servers
Method      | Z0.ServerComplex.Start(Z0.AgentContext)                               | Starts a new complex or returns the existing complex
Type        | Z0.ServerConfig                                                       | Defines a server configuration record
Property    | Z0.ServerConfig.ServerId                                              | Identifes the server to which the configuration applies
Property    | Z0.ServerConfig.ServerName                                            | A descriptive name
Property    | Z0.ServerConfig.CoreNumber                                            | The CPU core to which the server is assigned
Type        | Z0.ServerProcess                                                      | Responsible for managing agents owned by a server
Method      | Z0.ServerProcess.Define(Z0.AgentContext,System.UInt32,System.UInt32,Z0.ISystemAgent[])| Creates and configures, but does not start, a server process
Property    | Z0.ServerProcess.ServerAgents                                         | Exposes a readonly stream of the agents under management on behalf of the server
Method      | Z0.ServiceIdentityPool.NextAgentId(System.UInt32)                     | Retrieves the next server-relative agent identity
Method      | Z0.ServiceIdentityPool.NextServerId                                   | Retrieves the next server id
