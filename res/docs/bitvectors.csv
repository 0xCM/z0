Method      | Z0.BitVector.add(Z0.BitVector4,Z0.BitVector4)                         | Computes the arithmetic sum z := x + y for bitvectors x and y
Method      | Z0.BitVector.add(Z0.BitVector8,Z0.BitVector8)                         | Computes the arithmetic sum of two bitvectors
Method      | Z0.BitVector.add(Z0.BitVector16,Z0.BitVector16)                       | Computes the arithmetic sum z := x + y for bitvectors x and y
Method      | Z0.BitVector.add(Z0.BitVector32,Z0.BitVector32)                       | Computes the arithmetic sum z := x + y for bitvectors x and y
Method      | Z0.BitVector.add(Z0.BitVector64,Z0.BitVector64)                       | Computes the arithmetic sum z := x + y for bitvectors x and y
Method      | Z0.BitVector.add``1(Z0.BitVector{``0},Z0.BitVector{``0})              | Computes the arithmetic sum z := x + y for generic bitvectors x and y
Method      | Z0.BitVector.add``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the sum of two 128-bit integers
Method      | Z0.BitVector.alloc``2(``0,``1)                                        | Allocates a natural bitvector
Method      | Z0.BitVector.alloc``1(``0)                                            | Allocates a generic bitvector
Method      | Z0.BitVector.alloc(Z0.N4)                                             | Allocates a 4-bit primal bitvector
Method      | Z0.BitVector.alloc(Z0.N8)                                             | Allocates an 8-bit primal bitvector
Method      | Z0.BitVector.alloc(Z0.N16)                                            | Allocates a primal 16-bit bitvector
Method      | Z0.BitVector.alloc(Z0.N32)                                            | Allocates a primal 32-bit bitvector
Method      | Z0.BitVector.alloc(Z0.N64)                                            | Allocates a primal 64-bit bitvector
Method      | Z0.BitVector.alt``1(Z0.bit)                                           | Creates a bitvector with uniformly alternating states where the state of             the first bit is determine by a parity bit
Method      | Z0.BitVector.alt``2(Z0.bit,``0)                                       | Creates a bitvector with uniformly alternating states where the state of             the first bit is determined by a parity bit
Method      | Z0.BitVector.alt(Z0.N8,Z0.bit)                                        | Creates a bitvector with uniformly alternating states where the state of the            first bit is determine by a specified parity bit
Method      | Z0.BitVector.alt(Z0.N16,Z0.bit)                                       | Creates a bitvector with uniformly alternating states where the state of the            first bit is determine by a specified parity bit
Method      | Z0.BitVector.alt(Z0.N32,Z0.bit)                                       | Creates a bitvector with uniformly alternating states where the state of the            first bit is determine by a specified parity bit
Method      | Z0.BitVector.alt(Z0.N64,Z0.bit)                                       | Creates a bitvector with uniformly alternating states where the state of the            first bit is determine by a specified parity bit
Method      | Z0.BitVector.bitseg``1(Z0.BitVector{``0},System.Byte,System.Byte)     | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitseg``2(Z0.BitVector{``0,``1},System.Byte,System.Byte) | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitseg(Z0.BitVector4,System.Byte,System.Byte)            | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitseg(Z0.BitVector8,System.Byte,System.Byte)            | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitseg(Z0.BitVector16,System.Byte,System.Byte)           | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitseg(Z0.BitVector32,System.Byte,System.Byte)           | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitseg(Z0.BitVector64,System.Byte,System.Byte)           | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector.bitspan(Z0.BitVector4,System.Nullable{System.Int32})     | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan(Z0.BitVector8,System.Nullable{System.Int32})     | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan(Z0.BitVector16,System.Nullable{System.Int32})    | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan(Z0.BitVector24,System.Nullable{System.Int32})    | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan(Z0.BitVector32,System.Nullable{System.Int32})    | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan(Z0.BitVector64,System.Nullable{System.Int32})    | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan``1(Z0.BitVector{``0},System.Nullable{System.Int32})| Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitspan``2(Z0.BitVector{``0,``1})                        | Converts the vector to a bitspan representation
Method      | Z0.BitVector.bitstring``2(Z0.BitVector{``0,``1})                      | Converts the vector content to a bitring representation
Method      | Z0.BitVector.bitstring``2(Z0.BitVector{``0,``1},System.Byte[])        | Converts the vector content to a bitring representation
Method      | Z0.BitVector.bitstring``2(Z0.BitVector128{``0,``1}@)                  | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring(Z0.BitVector4)                                 | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring(Z0.BitVector8)                                 | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring(Z0.BitVector16)                                | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring(Z0.BitVector24)                                | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring(Z0.BitVector32)                                | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring(Z0.BitVector64)                                | Converts the vector to a bistring representation
Method      | Z0.BitVector.bitstring``1(Z0.BitVector{``0})                          | Extracts the represented data as a bitstring
Method      | Z0.BitVector.bitstring``1(Z0.BitVector{``0},System.Int32)             | Extracts the represented data as a bitstring truncated to a specified width
Method      | Z0.BitVector.concat(Z0.BitVector4,Z0.BitVector4)                      | Creates an 8-bit vector by concatenating a pair of 4-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector4,Z0.BitVector4,Z0.BitVector4,Z0.BitVector4)| Creates a 16-bit vector by concatenating 4 4-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector8,Z0.BitVector8)                      | Creates an 16-bit vector by concatenating a pair of 8-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector16,Z0.BitVector16)                    | Creates a 32-bit vector by concatenating a pair of 16-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector8,Z0.BitVector8,Z0.BitVector8,Z0.BitVector8)| Creates a 32-bit vector by concatenating 4 8-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector8,Z0.BitVector8,Z0.BitVector8,Z0.BitVector8,Z0.BitVector8,Z0.BitVector8,Z0.BitVector8,Z0.BitVector8)| Creates a 64-bit vector by concatenating 8 8-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector16,Z0.BitVector16,Z0.BitVector16,Z0.BitVector16)| Creates a 64-bit vector by concatenating 4 16-bit vectors
Method      | Z0.BitVector.concat(Z0.BitVector32,Z0.BitVector32)                    | Creates a 64-bit vector by concatenating a pair of 32-bit vectors
Method      | Z0.BitVector.true``1(Z0.BitVector{``0},Z0.BitVector{``0})             | Computes the bitwise TRUE operator
Method      | Z0.BitVector.false``1(Z0.BitVector{``0},Z0.BitVector{``0})            | Computes the bitwise FALSE operator
Method      | Z0.BitVector.create(Z0.N4,System.Byte)                                | Creates a 4-bit bitvector from the least 4 source bits
Method      | Z0.BitVector.create(Z0.N4,System.UInt16)                              | Creates a 4-bit bitvector from the least 4 source bits
Method      | Z0.BitVector.create(Z0.N4,System.UInt32)                              | Creates a 4-bit bitvector from the least 4 source bits
Method      | Z0.BitVector.create(Z0.N4,System.UInt64)                              | Creates a 4-bit bitvector from the least 4 source bits
Method      | Z0.BitVector.create(Z0.N4,Z0.bit,Z0.bit)                              | Creates a 4-bit bitvector from 2 explicit bits
Method      | Z0.BitVector.create(Z0.N4,Z0.bit,Z0.bit,Z0.bit)                       | Creates a 4-bit bitvector from 3 explicit bitss
Method      | Z0.BitVector.create(Z0.N4,Z0.bit,Z0.bit,Z0.bit,Z0.bit)                | Creates a 4-bit bitvector from 4 explicit bits
Method      | Z0.BitVector.create(Z0.N4,Z0.BitString)                               | Creates a 4-bit bitvector from a bitstring
Method      | Z0.BitVector.create(Z0.N8,Z0.BitString)                               | Creates a vector from a bitstring
Method      | Z0.BitVector.create(Z0.N8,Z0.bit,Z0.bit,Z0.bit,Z0.bit)                | Creates an 8-bit bitvector from 4 explicit bits
Method      | Z0.BitVector.create(Z0.N8,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit,Z0.bit)| Creates an 8-bit bitvector from 8 explicit bits
Method      | Z0.BitVector.create(Z0.N8,System.Byte)                                | Creates an 8-bit bitvector from a byte
Method      | Z0.BitVector.create(Z0.N8,System.Int32)                               | Creates an 8-bit bitvector from the least 8 source bits
Method      | Z0.BitVector.create(Z0.N8,System.UInt32)                              | Creates an 8-bit bitvector from the least 8 source bits
Method      | Z0.BitVector.create(Z0.N8,System.UInt64)                              | Creates an 8-bit bitvector from the least 8 source bits
Method      | Z0.BitVector.create(Z0.N16,Z0.BitString)                              | Creates a 16-bit bitvector from a bitstring
Method      | Z0.BitVector.create(Z0.N16,System.Byte,System.Byte)                   | Creates a 16-bit bitvector from hi and lo parts
Method      | Z0.BitVector.create(Z0.N16,System.UInt64)                             | Creates a 16-bit bitvector from the least 16 source bits
Method      | Z0.BitVector.create(Z0.N32,System.UInt32)                             | Creates a 32-bit bitvector from the totality of the source bits
Method      | Z0.BitVector.create(Z0.N32,System.Int32)                              | Creates a 32-bit bitvector from the totality of the source bits
Method      | Z0.BitVector.create(Z0.N32,System.Int64)                              | Creates a 32-bit bitvector from the least 32 source bits
Method      | Z0.BitVector.create(Z0.N32,System.UInt64)                             | Creates a 32-bit bitvector from the least 32 source bits
Method      | Z0.BitVector.create(Z0.N32,Z0.BitString)                              | Creates a 32-bit bitvector from a bitstring
Method      | Z0.BitVector.create(Z0.N32,System.Byte,System.Byte,System.Byte,System.Byte)| Creates a vector from a bitstring
Method      | Z0.BitVector.create(Z0.N32,System.UInt16,System.UInt16)               | Creates a vector from two unsigned 16-bit integers
Method      | Z0.BitVector.create(Z0.N64,System.UInt16,System.UInt16,System.UInt16,System.UInt16)| Creates a generic bitvector from 4 explicit bytes
Method      | Z0.BitVector.create(Z0.N64,System.Byte)                               | Creates a 64-bit bitvector where the first 8 bits a populated with a specified value and             all others are zero
Method      | Z0.BitVector.create(Z0.N64,System.UInt16)                             | Creates a vector from a primal source value
Method      | Z0.BitVector.create(Z0.N64,System.UInt32)                             | Creates a vector from a primal source value
Method      | Z0.BitVector.create(Z0.N64,System.UInt64)                             | Creates a vector from a primal source value
Method      | Z0.BitVector.create(Z0.N64,System.UInt32,System.UInt32)               | Creates a vector from two unsigned 32-bit integers
Method      | Z0.BitVector.create(Z0.N64,Z0.BitString)                              | Creates a vector from a bitstring
Method      | Z0.BitVector.dec(Z0.BitVector4)                                       | Arithmetically decrements the source vector
Method      | Z0.BitVector.dec(Z0.BitVector8)                                       | Arithmetically decrements the source vector
Method      | Z0.BitVector.dec(Z0.BitVector16)                                      | Arithmetically decrements the source vector
Method      | Z0.BitVector.dec(Z0.BitVector32)                                      | Arithmetically decrements the source vector
Method      | Z0.BitVector.dec(Z0.BitVector64)                                      | Arithmetically decrements the source vector
Method      | Z0.BitVector.dec``1(Z0.BitVector{``0})                                | Arithmetically decrements the source vector
Method      | Z0.BitVector.dec``2(Z0.BitVector{``0,``1})                            | Arithmetically decrements the source vector
Method      | Z0.BitVector.disable``1(Z0.BitVector{``0},System.Int32)               | Disables a bit if it is enabled
Method      | Z0.BitVector.disable``2(Z0.BitVector{``0,``1},System.Int32)           | Disables a bit if it is enabled
Method      | Z0.BitVector.disable(Z0.BitVector4,System.Int32)                      | Disables a bit if it is enabled
Method      | Z0.BitVector.disable(Z0.BitVector8,System.Int32)                      | Disables a bit if it is enabled
Method      | Z0.BitVector.disable(Z0.BitVector16,System.Int32)                     | Disables a bit if it is enabled
Method      | Z0.BitVector.disable(Z0.BitVector32,System.Int32)                     | Disables a bit if it is enabled
Method      | Z0.BitVector.disable(Z0.BitVector64,System.Int32)                     | Disables a bit if it is enabled
Method      | Z0.BitVector.dot(Z0.BitVector4,Z0.BitVector4)                         | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot(Z0.BitVector8,Z0.BitVector8)                         | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot(Z0.BitVector16,Z0.BitVector16)                       | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot(Z0.BitVector32,Z0.BitVector32)                       | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot(Z0.BitVector64,Z0.BitVector64)                       | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot``1(Z0.BitVector{``0},Z0.BitVector{``0})              | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})      | Computes the scalar product between two bitvectors
Method      | Z0.BitVector.dot``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the scalar product between two bitvectors
Method      | Z0.BitVector.enable``1(Z0.BitVector{``0},System.Int32)                | Enables a bit if it is disabled
Method      | Z0.BitVector.enable``2(Z0.BitVector{``0,``1},System.Int32)            | Enables a bit if it is disabled
Method      | Z0.BitVector.enable(Z0.BitVector4,System.Int32)                       | Enables a bit if it is disabled
Method      | Z0.BitVector.enable(Z0.BitVector8,System.Int32)                       | Enables a bit if it is disabled
Method      | Z0.BitVector.enable(Z0.BitVector16,System.Int32)                      | Enables a bit if it is disabled
Method      | Z0.BitVector.enable(Z0.BitVector32,System.Int32)                      | Enables a bit if it is disabled
Method      | Z0.BitVector.enable(Z0.BitVector64,System.Int32)                      | Enables a bit if it is disabled
Method      | Z0.BitVector.extend(Z0.BitVector4,Z0.W8)                              | Zero extends the source vector
Method      | Z0.BitVector.extend(Z0.BitVector8,Z0.W16)                             | Zero extends the source vector
Method      | Z0.BitVector.extend(Z0.BitVector16,Z0.W32)                            | Zero extends the source vector
Method      | Z0.BitVector.extend(Z0.BitVector32,Z0.W64)                            | Zero extends the source vector
Method      | Z0.BitVector.extend(Z0.BitVector64,Z0.W128)                           | Zero extends the source vector
Method      | Z0.BitVector.format``1(Z0.BitVector{``0},System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format``2(Z0.BitVector128{``0,``1}@,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format``2(Z0.BitVector{``0,``1},System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format(Z0.BitVector4,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format(Z0.BitVector8,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format(Z0.BitVector16,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format(Z0.BitVector24,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format(Z0.BitVector32,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.format(Z0.BitVector64,System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.BitVector.gather``1(Z0.BitVector{``0},Z0.BitVector{``0})           | Populates a target vector with specified source bits
Method      | Z0.BitVector.gather``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})   | Populates a target vector with specified source bits
Method      | Z0.BitVector.gather(Z0.BitVector4,Z0.BitVector4)                      | Populates a target vector with specified source bits
Method      | Z0.BitVector.gather(Z0.BitVector8,Z0.BitVector8)                      | Populates a target vector with specified source bits
Method      | Z0.BitVector.gather(Z0.BitVector16,Z0.BitVector16)                    | Populates a target vector with specified source bits
Method      | Z0.BitVector.gather(Z0.BitVector32,Z0.BitVector32)                    | Populates a target vector with specified source bits
Method      | Z0.BitVector.gather(Z0.BitVector64,Z0.BitVector64)                    | Populates a target vector with specified source bits
Method      | Z0.BitVector.generic``1(``0)                                          | Creates a generic bitvector
Method      | Z0.BitVector.generic``1(System.Span{System.Byte})                     | Creates a generic bitvector from a span of bytes
Method      | Z0.BitVector.generic``1(Z0.BitString)                                 | Loads an bitvector of minimal size from a source bitstring
Method      | Z0.BitVector.generic(Z0.N8,System.Byte)                               | Creates a byte-generic bitvector
Method      | Z0.BitVector.generic(Z0.N8,Z0.bit,Z0.bit,Z0.bit,Z0.bit)               | Creates a byte-generic bitvector from 4 bits
Method      | Z0.BitVector.generic(System.Byte,System.Byte,System.Byte,System.Byte) | Creates a byte-generic bitvector from 4 explicit bytes
Method      | Z0.BitVector.gfmul(Z0.BitVector8,Z0.BitVector8)                       | Computes the GF(256) product of the operands.
Method      | Z0.BitVector.hamming``1(Z0.BitVector{``0},Z0.BitVector{``0})          | Computes the Hamming distance between two generic bitvectors
Method      | Z0.BitVector.hamming``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})  | Computes the Hamming distance between bitvectors
Method      | Z0.BitVector.hamming``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the Hamming distance between bitvectors
Method      | Z0.BitVector.hamming(Z0.BitVector4,Z0.BitVector4)                     | Computes the Hamming distance between two bitvectors
Method      | Z0.BitVector.hamming(Z0.BitVector8,Z0.BitVector8)                     | Computes the Hamming distance between two bitvectors
Method      | Z0.BitVector.hamming(Z0.BitVector16,Z0.BitVector16)                   | Computes the Hamming distance between two bitvectors
Method      | Z0.BitVector.hamming(Z0.BitVector32,Z0.BitVector32)                   | Computes the Hamming distance between two bitvectors
Method      | Z0.BitVector.hamming(Z0.BitVector64,Z0.BitVector64)                   | Computes the Hamming distance between two bitvectors
Method      | Z0.BitVector.hiseg``1(Z0.BitVector{``0},System.Byte)                  | Constructs a bitvector formed from the n most significant bits of the source vector
Method      | Z0.BitVector.hiseg(Z0.BitVector4,System.Byte)                         | Constructs a bitvector formed from the n most significant bits of the source vector
Method      | Z0.BitVector.hiseg(Z0.BitVector8,System.Byte)                         | Constructs a bitvector formed from the n most significant bits of the source vector
Method      | Z0.BitVector.hiseg(Z0.BitVector16,System.Byte)                        | Constructs a bitvector formed from the n most significant bits of the source vector
Method      | Z0.BitVector.hiseg(Z0.BitVector32,System.Byte)                        | Constructs a bitvector formed from the n most significant bits of the source vector
Method      | Z0.BitVector.hiseg(Z0.BitVector64,System.Byte)                        | Constructs a bitvector formed from the n most significant bits of the source vector
Method      | Z0.BitVector.impl``1(Z0.BitVector{``0},Z0.BitVector{``0})             | Computes the material implication z := x | ~y for bitvectors x and y
Method      | Z0.BitVector.impl``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})     | Computes the material implication z := x | ~y for bitvectors x and y
Method      | Z0.BitVector.impl``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the material implication z := x | ~y for bitvectors x and y
Method      | Z0.BitVector.inc``1(Z0.BitVector{``0})                                | Arithmetically increments the source vector
Method      | Z0.BitVector.inc``2(Z0.BitVector{``0,``1})                            | Arithmetically increments the source vector
Method      | Z0.BitVector.inc(Z0.BitVector8)                                       | Increments the source vector
Method      | Z0.BitVector.inc(Z0.BitVector16)                                      | Increments the source vector
Method      | Z0.BitVector.inc(Z0.BitVector32)                                      | Increments the source vector
Method      | Z0.BitVector.inc(Z0.BitVector64)                                      | Increments the source vector
Method      | Z0.BitVector.init``1(``0)                                             | Initialzes a generic bitvector with a supplied value
Method      | Z0.BitVector.init``2(``1,``0)                                         | Initializes a natural bitvector over a primal type
Method      | Z0.BitVector.init``1(System.Runtime.Intrinsics.Vector128{``0})        | Initializes a full-width 128-bit bitvector
Method      | Z0.BitVector.init``2(System.Runtime.Intrinsics.Vector128{``1},``0)    | Initializes a 128-bit bitvector with effective width determined by the parametric natural type that must not exeed 128
Method      | Z0.BitVector.init(Z0.N4,System.Byte)                                  | Initializes a 4-bit bitvector with a supplied value
Method      | Z0.BitVector.init(System.Byte)                                        | Initializes an 8-bit bitvector with a supplied value
Method      | Z0.BitVector.init(System.UInt16)                                      | Creates a populated 16-bit bitvector
Method      | Z0.BitVector.init(System.UInt16,System.Byte)                          | Initializes a 24-bit bitvector with supplied upper/lower values
Method      | Z0.BitVector.init(Z0.N24,System.UInt32)                               | Initializes a 24-bit bitvector with a supplied value
Method      | Z0.BitVector.init(System.UInt32)                                      | Initializes a 16-bit bitvector with a supplied value
Method      | Z0.BitVector.init(System.UInt64)                                      | Initializes a 16-bit bitvector with a supplied value
Method      | Z0.BitVector.inject(Z0.N4,System.Byte)                                | Creates a 4-bit vector directly from the source data, bypassing masked initialization
Method      | Z0.BitVector.inject``2(``1,``0)                                       | Creates an N-bit vector directly from the source data, bypassing masked initialization
Method      | Z0.BitVector.list(Z0.N8)                                              | Enumerates each and every 8-bit bitvector exactly once
Method      | Z0.BitVector.nonempty(Z0.N8)                                          | Enumerates each nonempty 8-bit bitvector
Method      | Z0.BitVector.list(Z0.N16,System.Int32)                                | Enumerates all 16-bit bitvectors whose width is less than or equal to a specified maximum
Method      | Z0.BitVector.gray(Z0.N8)                                              | Enumerates the 8-bit Gray codes
Method      | Z0.BitVector.list(Z0.N32,System.Int32)                                | Enumerates all 32-bit bitvectors for which the effective width is less than or equal to a specified maximum
Method      | Z0.BitVector.list(Z0.N64,System.Int32)                                | Enumerates all 64-bit bitvectors for which the effective width is less than or equal to a specified maximum
Method      | Z0.BitVector.loseg``1(Z0.BitVector{``0},System.Byte)                  | Constructs a bitvector formed from the n lest significant bits of the source vector
Method      | Z0.BitVector.loseg(Z0.BitVector4,System.Byte)                         | Constructs a bitvector formed from the n lest significant bits of the current vector
Method      | Z0.BitVector.loseg(Z0.BitVector8,System.Byte)                         | Constructs a bitvector formed from the n lest significant bits of the current vector
Method      | Z0.BitVector.loseg(Z0.BitVector16,System.Byte)                        | Constructs a bitvector formed from the n lest significant bits of the current vector
Method      | Z0.BitVector.loseg(Z0.BitVector32,System.Byte)                        | Constructs a bitvector formed from the n lest significant bits of the current vector
Method      | Z0.BitVector.loseg(Z0.BitVector64,System.Byte)                        | Constructs a bitvector formed from the n lest significant bits of the current vector
Method      | Z0.BitVector.modprod``1(Z0.BitVector{``0},Z0.BitVector{``0})          | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.modprod``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})  | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.modprod(Z0.BitVector4,Z0.BitVector4)                     | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.modprod(Z0.BitVector8,Z0.BitVector8)                     | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.modprod(Z0.BitVector16,Z0.BitVector16)                   | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.modprod(Z0.BitVector32,Z0.BitVector32)                   | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.modprod(Z0.BitVector64,Z0.BitVector64)                   | Computes the Euclidean scalar product between two bitvectors using modular arithmetic
Method      | Z0.BitVector.mux(Z0.BitVector8,Z0.BitVector4)                         | Uses the first three bits of the control operand to select one of 8 bits from the input operand
Method      | Z0.BitVector.mux(Z0.BitVector16,Z0.BitVector4)                        | Uses the four bits of the control operand to select one of 16 bits from the input operand
Method      | Z0.BitVector.mux(Z0.BitVector32,Z0.BitVector8)                        | Uses the first 5 bits of the control operand to select one of 32 bits from the input operand
Method      | Z0.BitVector.mux(Z0.BitVector64,Z0.BitVector8)                        | Uses the first 6 bits of the control operand to select one of 64 bits from the input operand
Method      | Z0.BitVector.width``2(Z0.BitVector{``0,``1})                          | Computes the effective width of the bitvector as determined by the number of leading zero bits
Method      | Z0.BitVector.pop``2(Z0.BitVector128{``0,``1}@)                        | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.natural``2(``0,``1)                                      | Defines a bitvector of natural width
Method      | Z0.BitVector.natural``2(``0,System.Runtime.Intrinsics.Vector128{``1}) | Defines a 128-bit bitvector of natural width
Method      | Z0.BitVector.natural``2(``1)                                          | Defines a bitvector of natural width
Method      | Z0.BitVector.natural``2(Z0.BitString,``0,``1)                         | Creates a vector from a bitstring
Method      | Z0.BitVector.negate``1(Z0.BitVector{``0})                             | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate``2(Z0.BitVector{``0,``1})                         | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate``2(Z0.BitVector128{``0,``1}@)                     | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate(Z0.BitVector4)                                    | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate(Z0.BitVector8)                                    | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate(Z0.BitVector16)                                   | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate(Z0.BitVector32)                                   | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.negate(Z0.BitVector64)                                   | Computes the two's complement bitvector z := ~x + 1 for a bitvector x
Method      | Z0.BitVector.nlz``1(Z0.BitVector{``0})                                | Counts the number of leading zero bits
Method      | Z0.BitVector.nlz``2(Z0.BitVector{``0,``1})                            | Counts the number of leading zero bits
Method      | Z0.BitVector.nlz(Z0.BitVector4)                                       | Counts the number of leading zero bits
Method      | Z0.BitVector.nlz(Z0.BitVector8)                                       | Counts the number of leading zero bits
Method      | Z0.BitVector.nlz(Z0.BitVector16)                                      | Counts the number of leading zero bits
Method      | Z0.BitVector.nlz(Z0.BitVector32)                                      | Counts the number of leading zero bits
Method      | Z0.BitVector.nlz(Z0.BitVector64)                                      | Counts the number of leading zero bits
Method      | Z0.BitVector.nor``1(Z0.BitVector{``0},Z0.BitVector{``0})              | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})      | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor(Z0.BitVector4,Z0.BitVector4)                         | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor(Z0.BitVector8,Z0.BitVector8)                         | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor(Z0.BitVector16,Z0.BitVector16)                       | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor(Z0.BitVector32,Z0.BitVector32)                       | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.nor(Z0.BitVector64,Z0.BitVector64)                       | Computes the bitvector z: = ~(x | y) from bitvectors x and y
Method      | Z0.BitVector.not``1(Z0.BitVector{``0})                                | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not``2(Z0.BitVector{``0,``1})                            | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not``2(Z0.BitVector128{``0,``1}@)                        | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not(Z0.BitVector4)                                       | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not(Z0.BitVector8)                                       | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not(Z0.BitVector16)                                      | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not(Z0.BitVector32)                                      | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.not(Z0.BitVector64)                                      | Computes the bitwise complement z:= ~x of a bitvector x
Method      | Z0.BitVector.ntz``1(Z0.BitVector{``0}@)                               | Counts the number of trailing zero bits
Method      | Z0.BitVector.ntz``2(Z0.BitVector{``0,``1}@)                           | Counts the number of trailing zero bits
Method      | Z0.BitVector.ntz``2(Z0.BitVector128{``0,``1}@)                        | Counts the number of trailing zeros
Method      | Z0.BitVector.ntz(Z0.BitVector8)                                       | Counts the number of trailing zero bits
Method      | Z0.BitVector.ntz(Z0.BitVector16)                                      | Counts the number of trailing zero bits
Method      | Z0.BitVector.ntz(Z0.BitVector32)                                      | Counts the number of trailing zero bits
Method      | Z0.BitVector.ntz(Z0.BitVector64)                                      | Counts the number of trailing zero bits
Method      | Z0.BitVector.ones``1                                                  | Returns a generic vector with all bits enabled
Method      | Z0.BitVector.or``1(Z0.BitVector{``0},Z0.BitVector{``0})               | Computes the bitvector z := x | y from bitvectors x and y
Method      | Z0.BitVector.or``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})       | Computes the bitvector z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.or``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the bitvector z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.or(Z0.BitVector4,Z0.BitVector4)                          | Computes the bitvector z := x | y from bitvectors x and y
Method      | Z0.BitVector.or(Z0.BitVector8,Z0.BitVector8)                          | Computes the bitvector z := x | y from bitvectors x and y
Method      | Z0.BitVector.or(Z0.BitVector16,Z0.BitVector16)                        | Computes the bitvector z := x | y from bitvectors x and y
Method      | Z0.BitVector.or(Z0.BitVector32,Z0.BitVector32)                        | Computes the bitvector z := x | y from bitvectors x and y
Method      | Z0.BitVector.or(Z0.BitVector64,Z0.BitVector64)                        | Computes the bitvector z := x | y from bitvectors x and y
Method      | Z0.BitVector.ord(Z0.BitVector8)                                       | Computes the smallest integer n &gt; 1 such that v^n = identity
Method      | Z0.BitVector.parity``1(Z0.BitVector{``0})                             | Computes the parity of a generic bitvector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity(Z0.BitVector4)                                    | Computes the parity of the source vector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity(Z0.BitVector8)                                    | Computes the parity of the source vector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity(Z0.BitVector16)                                   | Computes the parity of the source vector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity(Z0.BitVector32)                                   | Computes the parity of the source vector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity(Z0.BitVector64)                                   | Computes the parity of the source vector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity``2(Z0.BitVector{``0,``1})                         | Computes the parity of a natural bitvector, which is 1 if an odd number of its components are enabled and 0 otherwise
Method      | Z0.BitVector.parity``2(Z0.BitVector128{``0,``1}@)                     | Computes the parity of the source vector
Method      | Z0.BitVector.perm(Z0.BitVector4,Z0.Perm@)                             | Permutes the vector corrding to the spec
Method      | Z0.BitVector.perm(Z0.BitVector8,Z0.Perm@)                             | Applies a permutation to a replicated vector
Method      | Z0.BitVector.perm(Z0.BitVector16,Z0.Perm@)                            | Rearranges the vector in-place as specified by a permutation
Method      | Z0.BitVector.perm(Z0.BitVector32,Z0.Perm@)                            | Rearranges the vector specified by a permutation
Method      | Z0.BitVector.perm(Z0.BitVector64,Z0.Perm@)                            | Creates a new vector by permuting a replica of the source vector as specified by a permuation
Method      | Z0.BitVector.perm``1(Z0.BitVector{``0},Z0.Perm@)                      | Rearranges the vector as specified by a permutation
Method      | Z0.BitVector.pop``1(Z0.BitVector{``0})                                | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pop``2(Z0.BitVector{``0,``1})                            | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pop(Z0.BitVector4)                                       | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pop(Z0.BitVector8)                                       | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pop(Z0.BitVector16)                                      | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pop(Z0.BitVector32)                                      | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pop(Z0.BitVector64)                                      | Counts the number of enabled bits in the source vector
Method      | Z0.BitVector.pow(Z0.BitVector8,System.Int32)                          | Raises a vector to a power
Method      | Z0.BitVector.left``1(Z0.BitVector{``0},Z0.BitVector{``0})             | Defines the bitwise LeftProject operator
Method      | Z0.BitVector.right``1(Z0.BitVector{``0},Z0.BitVector{``0})            | Defines the bitwise RightProject operator
Method      | Z0.BitVector.lnot``1(Z0.BitVector{``0},Z0.BitVector{``0})             | Defines the bitwise LeftNot operator
Method      | Z0.BitVector.rnot``1(Z0.BitVector{``0},Z0.BitVector{``0})             | Defines the bitwise RightNot operator
Method      | Z0.BitVector.replicate``1(Z0.BitVector{``0})                          | Creates a copy of the source vector
Method      | Z0.BitVector.replicate``2(Z0.BitVector{``0,``1})                      | Creates a copy of the source vector
Method      | Z0.BitVector.replicate``2(Z0.BitVector128{``0,``1}@)                  | Creates a copy of the source vector
Method      | Z0.BitVector.replicate(Z0.BitVector4)                                 | Creates a copy of the source vector
Method      | Z0.BitVector.replicate(Z0.BitVector4,Z0.N2)                           | Creates an 8-bit vector by concatenating the source vector with a replicant
Method      | Z0.BitVector.replicate(Z0.BitVector8)                                 | Creates a copy of the source vector
Method      | Z0.BitVector.replicate(Z0.BitVector8,Z0.N2)                           | Creates a 16-bit vector by concatenating the source vector with a replicant
Method      | Z0.BitVector.replicate(Z0.BitVector8,Z0.N4)                           | Creates a 32-bit vector by concatenating 4 source replicants
Method      | Z0.BitVector.replicate(Z0.BitVector8,Z0.N8)                           | Creates a 64-bit vector by concatenating 8 source replicants
Method      | Z0.BitVector.replicate(Z0.BitVector16)                                | Creates a copy of the source vector
Method      | Z0.BitVector.replicate(Z0.BitVector16,Z0.N2)                          | Creates a 32-bit vector by concatenating the source vector with a replicant
Method      | Z0.BitVector.replicate(Z0.BitVector16,Z0.N4)                          | Creates a 64-bit vector by concatenating 4 source replicants
Method      | Z0.BitVector.replicate(Z0.BitVector32)                                | Creates a copy of the source vector
Method      | Z0.BitVector.replicate(Z0.BitVector32,Z0.N2)                          | Creates a 64-bit vector by concatenating the source vector with a replicant
Method      | Z0.BitVector.replicate(Z0.BitVector64)                                | Creates a copy of the source vector
Method      | Z0.BitVector.reverse``1(Z0.BitVector{``0})                            | Reverses the bits in the source vector
Method      | Z0.BitVector.reverse``2(Z0.BitVector{``0,``1})                        | Reverses the bits in the source vector
Method      | Z0.BitVector.reverse(Z0.BitVector4)                                   | Reverses the bits in the source vector
Method      | Z0.BitVector.reverse(Z0.BitVector8)                                   | Reverses the bits in the source vector
Method      | Z0.BitVector.reverse(Z0.BitVector16)                                  | Reverses the bits in the source vector
Method      | Z0.BitVector.reverse(Z0.BitVector32)                                  | Reverses the bits in the source vector
Method      | Z0.BitVector.reverse(Z0.BitVector64)                                  | Reverses the bits in the source vector
Method      | Z0.BitVector.rotl(Z0.BitVector4,System.Byte)                          | Rotates source bits leftward
Method      | Z0.BitVector.rotl(Z0.BitVector8,System.Byte)                          | Rotates source bits leftward
Method      | Z0.BitVector.rotl(Z0.BitVector16,System.Byte)                         | Rotates source bits leftward
Method      | Z0.BitVector.rotl(Z0.BitVector32,System.Byte)                         | Rotates source bits leftward
Method      | Z0.BitVector.rotl(Z0.BitVector64,System.Byte)                         | Rotates source bits leftward
Method      | Z0.BitVector.rotl``1(Z0.BitVector{``0},System.Byte)                   | Rotates source bits leftward
Method      | Z0.BitVector.rotl``2(Z0.BitVector{``0,``1},System.Byte)               | Rotates source bits leftward
Method      | Z0.BitVector.rotl``2(Z0.BitVector128{``0,``1}@,System.Byte)           | Rotates source bits leftward
Method      | Z0.BitVector.rotr(Z0.BitVector4,System.Byte)                          | Computes a rightward bit rotation
Method      | Z0.BitVector.rotr(Z0.BitVector8,System.Byte)                          | Computes a rightward bit rotation
Method      | Z0.BitVector.rotr(Z0.BitVector16,System.Byte)                         | Rotates source bits rightward
Method      | Z0.BitVector.rotr(Z0.BitVector32,System.Byte)                         | Computes a rightward bit rotation
Method      | Z0.BitVector.rotr(Z0.BitVector64,System.Byte)                         | Rotates source bits rightward
Method      | Z0.BitVector.rotr``1(Z0.BitVector{``0},System.Byte)                   | Rotates source bits rightward
Method      | Z0.BitVector.rotr``2(Z0.BitVector{``0,``1},System.Byte)               | Rotates source bits rightward
Method      | Z0.BitVector.rotr``2(Z0.BitVector128{``0,``1}@,System.Byte)           | Rotates source bits rightward
Method      | Z0.BitVector.select``1(Z0.BitVector{``0},Z0.BitVector{``0},Z0.BitVector{``0})| Computes the bitwise ternary select for bitvector operands
Method      | Z0.BitVector.select``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})| Computes the bitvector z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.select``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the bitvector z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.sll``2(Z0.BitVector{``0,``1},System.Byte)                | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.sll``2(Z0.BitVector128{``0,``1}@,System.Byte)            | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl(Z0.BitVector4,System.Byte)                           | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl(Z0.BitVector8,System.Byte)                           | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl(Z0.BitVector16,System.Byte)                          | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl(Z0.BitVector32,System.Byte)                          | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl(Z0.BitVector64,System.Byte)                          | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl``1(Z0.BitVector{``0},System.Byte)                    | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl``2(Z0.BitVector{``0,``1},System.Byte)                | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.srl``2(Z0.BitVector128{``0,``1}@,System.Byte)            | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.sub(Z0.BitVector4,Z0.BitVector4)                         | Computes the arithmetic difference z := x - y for bitvectors x and y
Method      | Z0.BitVector.sub(Z0.BitVector8,Z0.BitVector8)                         | Computes the arithmetic difference z := x - y for bitvectors x and y
Method      | Z0.BitVector.sub(Z0.BitVector16,Z0.BitVector16)                       | Computes the arithmetic difference z := x - y for bitvectors x and y
Method      | Z0.BitVector.sub(Z0.BitVector32,Z0.BitVector32)                       | Computes the arithmetic difference z := x - y for bitvectors x and y
Method      | Z0.BitVector.sub(Z0.BitVector64,Z0.BitVector64)                       | Computes the arithmetic difference z := x - y for bitvectors x and y
Method      | Z0.BitVector.sub``1(Z0.BitVector{``0},Z0.BitVector{``0})              | Computes the arithmetic difference z := x - y for generic bitvectors x and y
Method      | Z0.BitVector.sub``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})      | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.symbols``2(Z0.BitVector{``1},System.Byte,System.Nullable{System.Int32})| Assumes that             1. The source vector is a symbol tape upon which fixed-width symbols are sequentially recorded            2. The symbol alphabet is defined by the last character of the literals defined by an enumeration            With these preconditions, the operation returns the ordered sequence of symbols written to the tape
Method      | Z0.BitVector.testbit``1(Z0.BitVector{``0},System.Byte)                | Determines whether an index-identified bit is enabled
Method      | Z0.BitVector.testbit``2(Z0.BitVector{``0,``1},System.Byte)            | Determines whether an index-identified bit is enabled
Method      | Z0.BitVector.testbit(Z0.BitVector4,System.Byte)                       | Determines whether a bit is enabled
Method      | Z0.BitVector.testbit(Z0.BitVector8,System.Byte)                       | Determines whether a bit is enabled
Method      | Z0.BitVector.testbit(Z0.BitVector16,System.Byte)                      | Determines whether a bit is enabled
Method      | Z0.BitVector.testbit(Z0.BitVector32,System.Byte)                      | Determines whether a bit is enabled
Method      | Z0.BitVector.testbit(Z0.BitVector64,System.Byte)                      | Determines whether a bit is enabled
Method      | Z0.BitVector.testc(Z0.BitVector8)                                     | Returns true of all bits are enabled, false otherwise
Method      | Z0.BitVector.testc(Z0.BitVector16)                                    | Returns true of all bits are enabled, false otherwise
Method      | Z0.BitVector.testc(Z0.BitVector32)                                    | Returns true of all bits are enabled, false otherwise
Method      | Z0.BitVector.testc(Z0.BitVector64)                                    | Returns true of all bits are enabled, false otherwise
Method      | Z0.BitVector.testc``1(Z0.BitVector{``0})                              | Returns true of all bits are enabled, false otherwise
Method      | Z0.BitVector.testc``2(Z0.BitVector{``0,``1},``0)                      | Returns true of all bits are enabled, false otherwise
Method      | Z0.BitVector.width(Z0.BitVector4)                                     | Computes the effective width of the bitvector as determined by the number of leading zero bits
Method      | Z0.BitVector.width(Z0.BitVector8)                                     | Computes the effective width of the bitvector as determined by the number of leading zero bits
Method      | Z0.BitVector.width(Z0.BitVector16)                                    | Computes the effective width of the bitvector as determined by the number of leading zero bits
Method      | Z0.BitVector.width(Z0.BitVector64)                                    | Computes the effective width of the bitvector as determined by the number of leading zero bits
Method      | Z0.BitVector.width``1(Z0.BitVector{``0})                              | Computes the effective width of the bitvector as determined by the number of leading zero bits
Method      | Z0.BitVector.xnor``1(Z0.BitVector{``0},Z0.BitVector{``0})             | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})     | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor(Z0.BitVector4,Z0.BitVector4)                        | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor(Z0.BitVector8,Z0.BitVector8)                        | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor(Z0.BitVector16,Z0.BitVector16)                      | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor(Z0.BitVector32,Z0.BitVector32)                      | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xnor(Z0.BitVector64,Z0.BitVector64)                      | Computes the bitvector z := ~(x ^ y) from bitvectors x and y
Method      | Z0.BitVector.xor``1(Z0.BitVector{``0},Z0.BitVector{``0})              | Computes  z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor``2(Z0.BitVector{``0,``1},Z0.BitVector{``0,``1})      | Computes the bitvector z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor``2(Z0.BitVector128{``0,``1}@,Z0.BitVector128{``0,``1}@)| Computes the bitvector z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor(Z0.BitVector4,Z0.BitVector4)                         | Computes  z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor(Z0.BitVector8,Z0.BitVector8)                         | Computes  z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor(Z0.BitVector16,Z0.BitVector16)                       | Computes  z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor(Z0.BitVector32,Z0.BitVector32)                       | Computes the bitvector z: = x ^ y from bitvectors x and y
Method      | Z0.BitVector.xor(Z0.BitVector64,Z0.BitVector64)                       | Computes  z := x ^ y from bitvectors x and y
Method      | Z0.BitVector.zero``1                                                  | Returns a generic vector with all bits disabled
Method      | Z0.BitVector.zhi``1(Z0.BitVector{``0},System.Int32)                   | Disables the high bits starting at a specified position
Method      | Z0.BitVector.zhi``2(Z0.BitVector{``0,``1},System.Int32)               | Disables the high bits starting at a specified position
Method      | Z0.BitVector.zhi``2(Z0.BitVector128{``0,``1}@)                        | Computes z := x &gt;&gt; s for a bitvector x and shift offset s
Method      | Z0.BitVector.zhi(Z0.BitVector4,System.Int32)                          | Disables the high bits starting at a specified position
Method      | Z0.BitVector.zhi(Z0.BitVector8,System.Int32)                          | Disables the high bits starting at a specified position
Method      | Z0.BitVector.zhi(Z0.BitVector16,System.Int32)                         | Disables the high bits starting at a specified position
Method      | Z0.BitVector.zhi(Z0.BitVector32,System.Int32)                         | Disables the high bits starting at a specified position
Method      | Z0.BitVector.zhi(Z0.BitVector64,System.Int32)                         | Disables the high bits starting at a specified position
Method      | Z0.XTend.ToBitVector``1(Z0.BitString)                                 | Constructs a generic bitvector from bitstring
Method      | Z0.XTend.ToBitVector(Z0.BitString,Z0.N4)                              | Constructs a 4-bit bitvector from bitstring
Method      | Z0.XTend.ToBitVector(Z0.BitString,Z0.N8)                              | Creates an 8-bit bitvector from bitstring
Method      | Z0.XTend.ToBitVector(Z0.BitString,Z0.N16)                             | Creates a 16-bit bitvector from bitstring
Method      | Z0.XTend.ToBitVector(Z0.BitString,Z0.N24)                             | Creates a 24-bit bitvector from bitstring
Method      | Z0.XTend.ToBitVector(Z0.BitString,Z0.N32)                             | Creates a 32-bit bitvector from bitstring
Method      | Z0.XTend.ToBitVector(Z0.BitString,Z0.N64)                             | Creates a 64-bit bitvector from bitstring
Method      | Z0.XTend.ToBitVector``1(Z0.Block16{``0}@)                             | Creates a 16-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.ToBitVector``1(Z0.Block32{``0}@)                             | Creates a 16-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.ToBitVector``1(Z0.Block64{``0}@,Z0.N64)                      | Creates a 64-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.ToBitVector``1(Z0.Block256{``0}@,Z0.N8)                      | Creates an 8-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.ToBitVector``1(Z0.Block256{``0}@,Z0.N16)                     | Creates a 16-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.ToBitVector``1(Z0.Block256{``0}@,Z0.N32)                     | Creates a 32-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.ToBitVector``1(Z0.Block256{``0}@,Z0.N64)                     | Creates a 64-bit bitvector from the leading cells of a source block
Method      | Z0.XTend.Concat(Z0.BitVector4,Z0.BitVector4)                          | Creates a new vector via concatenation
Method      | Z0.XTend.Concat(Z0.BitVector8,Z0.BitVector8)                          | Concatenates two 8-bit vectors to produce a 16-bit vector
Method      | Z0.XTend.Concat(Z0.BitVector16,Z0.BitVector16)                        | Concatenates two 16-bit vectors to produce a 32-bit vector
Method      | Z0.XTend.Concat(Z0.BitVector32,Z0.BitVector32)                        | Creates a new vector via concatenation
Method      | Z0.XTend.Format``2(Z0.BitVector{``0,``1},System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.XTend.Format``1(Z0.BitVector{``0},System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.XTend.Format``2(Z0.BitVector128{``0,``1},System.Nullable{Z0.BitFormatConfig})| Formats the bitvector as a bitstring
Method      | Z0.XTend.Format(Z0.BitVector4,System.Nullable{Z0.BitFormatConfig})    | Formats the bitvector as a bitstring
Method      | Z0.XTend.Format(Z0.BitVector8,System.Nullable{Z0.BitFormatConfig})    | Formats the bitvector as a bitstring
Method      | Z0.XTend.Format(Z0.BitVector32,System.Nullable{Z0.BitFormatConfig})   | Formats the bitvector as a bitstring
Method      | Z0.XTend.Format(Z0.BitVector16,System.Nullable{Z0.BitFormatConfig})   | Formats the bitvector as a bitstring
Method      | Z0.XTend.Format(Z0.BitVector24,System.Nullable{Z0.BitFormatConfig})   | Formats the bitvector as a bitstring
Method      | Z0.XTend.Format(Z0.BitVector64,System.Nullable{Z0.BitFormatConfig})   | Formats the bitvector as a bitstring
Method      | Z0.XTend.Order(Z0.BitVector8)                                         | Computes the smallest integer n &gt; 1 such that v^n = identity
Method      | Z0.XTend.Permute``1(Z0.BitVector{``0},Z0.Perm@)                       | Applies a permutation to a copy of the source vector
Method      | Z0.XTend.Permute``2(Z0.BitVector{``0,``1},Z0.Perm@)                   | Applies a permutation to a copy of the source vector
Method      | Z0.XTend.Permute(Z0.BitVector4,Z0.Perm@)                              | Applies a permutation to copy of the source vector
Method      | Z0.XTend.Permute(Z0.BitVector8,Z0.Perm@)                              | Applies a permutation to copy of the source vector
Method      | Z0.XTend.Permute(Z0.BitVector16,Z0.Perm@)                             | Applies a permutation to copy of the source vector
Method      | Z0.XTend.Permute(Z0.BitVector32,Z0.Perm@)                             | Applies a permutation to copy of the source vector
Method      | Z0.XTend.Permute(Z0.BitVector64,Z0.Perm@)                             | Applies a permutation to a replicated vector
Method      | Z0.XTend.Replicate``1(Z0.BitVector{``0})                              | Creates a copy of the source vector
Method      | Z0.XTend.Replicate``2(Z0.BitVector{``0,``1})                          | Creates a copy of the source vector
Method      | Z0.XTend.Replicate``2(Z0.BitVector128{``0,``1})                       | Creates a copy of the source vector
Method      | Z0.XTend.Replicate(Z0.BitVector8)                                     | Creates a copy of the vector
Method      | Z0.XTend.Replicate(Z0.BitVector4)                                     | Creates a copy of the source vector
Method      | Z0.XTend.Replicate(Z0.BitVector4,Z0.N2)                               | Concatenates a 4-bit vector with itself to produce a 8-bit vector
Method      | Z0.XTend.Replicate(Z0.BitVector8,Z0.N2)                               | Concatenates an 8-bit vector with itself to produce a 16-bit vector
Method      | Z0.XTend.Replicate(Z0.BitVector8,Z0.N4)                               | Concatenates four copies of an 8-bit vector to produce a 32-bit vector
Method      | Z0.XTend.Replicate(Z0.BitVector8,Z0.N8)                               | Concatenates eight copies of an 8-bit vector to produce a 64-bit vector
Method      | Z0.XTend.Replicate(Z0.BitVector16)                                    | Creates a copy of the vector
Method      | Z0.XTend.Replicate(Z0.BitVector16,Z0.N2)                              | Concatenates a 16-bit vector with itself to produce a 32-bit vector
Method      | Z0.XTend.Replicate(Z0.BitVector16,Z0.N4)                              | Creates a 64-bit vector by concatenating 4 source replicants
Method      | Z0.XTend.Replicate(Z0.BitVector32)                                    | Creates a copy of the source vector
Method      | Z0.XTend.Replicate(Z0.BitVector32,Z0.N2)                              | Creates a 64-bit vector by concatenating the source vector with a replicant
Method      | Z0.XTend.Replicate(Z0.BitVector64)                                    | Creates a copy of the source vector
Method      | Z0.XTend.Reverse``1(Z0.BitVector{``0})                                | Reverses a copy of the source vector
Method      | Z0.XTend.Reverse``2(Z0.BitVector{``0,``1})                            | Reverses the bits in the source vector
Method      | Z0.XTend.Reverse(Z0.BitVector4)                                       | Reverses the vector bits
Method      | Z0.XTend.Reverse(Z0.BitVector8)                                       | Reverses the vector bits
Method      | Z0.XTend.Reverse(Z0.BitVector16)                                      | Reverses the vector bits
Method      | Z0.XTend.Reverse(Z0.BitVector32)                                      | Reverses the vector bits
Method      | Z0.XTend.Reverse(Z0.BitVector64)                                      | Reverses the vector bits
Method      | Z0.XTend.ToBitVector(System.UInt32,Z0.N16)                            | Defines a 16-bit bitvector from the lo 16 bits of the source
Method      | Z0.XTend.ToBitVector(System.Byte)                                     | Constructs a canonical 8-bit bitvector from an 8-bit primal value
Method      | Z0.XTend.ToBitVector(System.UInt32)                                   | Constructs a canonical 32-bit bitvector from a 32-bit primal value
Method      | Z0.XTend.ToBitVector(System.Int32)                                    | Defines a 32-bit bitvector with content determined by a 32-bit usigned integer
Method      | Z0.XTend.ToBitVector(System.UInt16)                                   | Constructs a 16-bit bitvector from a 16-bit scalar
Method      | Z0.XTend.ToBitVector(System.UInt64)                                   | Constructs a 64-bit bitvector from a 64-bit primal value
Method      | Z0.XTend.ToBitVector(System.Byte,Z0.N24)                              | Creates a 24-bit bitvector from an 8-bit scalar
Method      | Z0.XTend.ToBitVector(System.UInt16,Z0.N24)                            | Creates a 24-bit bitvector from a 16-bit scalar
Method      | Z0.XTend.ToBitVector(System.UInt32,Z0.N24)                            | Creates a 24-bit bitvector from a 32-bit scalar
Method      | Z0.XTend.ToBitVector(System.UInt64,Z0.N24)                            | Creates a 24-bit bitvector from a 64-bit scalar
Method      | Z0.XTend.TestC``1(Z0.BitVector{``0})                                  | Returns true of all bits are enabled, false otherwise
Method      | Z0.XTend.TestC``2(Z0.BitVector{``0,``1})                              | Returns true of all bits are enabled, false otherwise
Method      | Z0.XTend.TestC(Z0.BitVector8)                                         | Returns true of all bits are enabled, false otherwise
Method      | Z0.XTend.TestC(Z0.BitVector16)                                        | Returns true of all bits are enabled, false otherwise
Method      | Z0.XTend.TestC(Z0.BitVector32)                                        | Returns true of all bits are enabled, false otherwise
Method      | Z0.XTend.TestC(Z0.BitVector64)                                        | Returns true of all bits are enabled, false otherwise
Method      | Z0.XTend.ToBitSpan(Z0.BitVector4,System.Nullable{System.Int32})       | Creates the vector's bitspan representation
Method      | Z0.XTend.ToBitSpan(Z0.BitVector8,System.Nullable{System.Int32})       | Creates the vector's bitspan representation
Method      | Z0.XTend.ToBitSpan(Z0.BitVector16,System.Nullable{System.Int32})      | Creates the vector's bitspan representation
Method      | Z0.XTend.ToBitSpan(Z0.BitVector24,System.Nullable{System.Int32})      | Creates the vector's bitspan representation
Method      | Z0.XTend.ToBitSpan(Z0.BitVector32,System.Nullable{System.Int32})      | Creates the vector's bitspan representation
Method      | Z0.XTend.ToBitSpan(Z0.BitVector64,System.Nullable{System.Int32})      | Creates the vector's bitspan representation
Method      | Z0.XTend.ToBitString``2(Z0.BitVector128{``0,``1})                     | Converts the vector to a bitstring
Method      | Z0.XTend.ToBitString``2(Z0.BitVector{``0,``1})                        | Converts the vector content to a bitring representation
Method      | Z0.XTend.ToBitString``2(Z0.BitVector{``0,``1},System.Byte[])          | Converts the vector content to a bitring representation
Method      | Z0.XTend.ToBitString``1(Z0.BitVector{``0})                            | Extracts the represented data as a bitstring
Method      | Z0.XTend.ToBitString``1(Z0.BitVector{``0},System.Int32)               | Extracts the represented data as a bitstring truncated to a specified width
Method      | Z0.XTend.ToBitString(Z0.BitVector4)                                   | Creates the vector's bitstring representation
Method      | Z0.XTend.ToBitString(Z0.BitVector8)                                   | Creates the vector's bitstring representation
Method      | Z0.XTend.ToBitString(Z0.BitVector16)                                  | Creates the vector's bitstring representation
Method      | Z0.XTend.ToBitString(Z0.BitVector24)                                  | Creates the vector's bitstring representation
Method      | Z0.XTend.ToBitString(Z0.BitVector32)                                  | Creates the vector's bitstring representation
Method      | Z0.XTend.ToBitString(Z0.BitVector64)                                  | Creates the vector's bitstring representation
Method      | Z0.XTend.ToGeneric(Z0.BitVector8)                                     | Converts the source bitvector to an equivalent generic bitvector
Method      | Z0.XTend.ToGeneric(Z0.BitVector16)                                    | Converts the source bitvector to an equivalent generic bitvector
Method      | Z0.XTend.ToGeneric(Z0.BitVector32)                                    | Converts the source bitvector to an equivalent generic bitvector
Method      | Z0.XTend.ToGeneric(Z0.BitVector64)                                    | Converts the source bitvector to an equivalent generic bitvector
Method      | Z0.XTend.ToNatural(Z0.BitVector4)                                     | Converts the source bitvector to an equivalent natural bitvector
Method      | Z0.XTend.ToNatural(Z0.BitVector8)                                     | Converts the source bitvector to an equivalent natural bitvector
Method      | Z0.XTend.ToNatural(Z0.BitVector32)                                    | Converts the source bitvector to an equivalent natural/generic bitvector
Method      | Z0.XTend.ToNatural(Z0.BitVector64)                                    | Converts the source bitvector to an equivalent natural/generic bitvector
Method      | Z0.XTend.ToNatural``2(Z0.BitVector{``1},``0)                          | Converts a generic bitvector to natural bitvector
Method      | Z0.Gf.Poly``1(System.Byte[])                                          | Defines a binary polynomial from a monotonically decreasing exponent sequence
Method      | Z0.Gf.Poly16(System.Byte[])                                           | Defines a binary polynomial of degree at most 15 from a monotonically decreasing exponent sequence
Method      | Z0.Gf.Poly``2(System.Byte[])                                          | Defines a binary polynomial of natural degree N
Method      | Z0.Gf.Poly(Z0.N3,System.Byte[])                                       | Defines a binary polynomial of natural degree N = 3
Method      | Z0.Gf.Poly(Z0.N8,System.Byte[])                                       | Defines a binary polynomial of natural degree N = 8
Method      | Z0.Gf.Poly(Z0.N16,System.Byte[])                                      | Defines a binary polynomial of natural degree N = 10
Method      | Z0.Gf.Poly(Z0.N32,System.Byte[])                                      | Defines a binary polynomial of natural degree N = 32
Method      | Z0.Gf256.clmul(System.Byte,System.Byte)                               | Computes the GF(256) product reduced by the canonical polynomial
Method      | Z0.Gf256.products(System.Byte,System.Byte,System.Byte@)               | Fills caller-allocated memory with a GF(256) multiplication table
Method      | Z0.Gf256.products``1(``0)                                             | Creates an N^2 multiplication table for the values [1...N]
Method      | Z0.Gf256.products(Z0.Matrix256{Z0.N256,System.Byte}@)                 | Computes the full multiplication table for GF(256) modulo the canonical polynomial
Method      | Z0.Gf256.mul_ref(System.Byte,System.Byte)                             | The reference (slow) implementation of GF(256) multiplication reduced            via the canonical polynomial
Method      | Z0.Gf512.products(Z0.Matrix256{Z0.N512,System.UInt16}@)               | Computes the full multiplication table for GF512
Method      | Z0.Gf8.products(System.Byte,System.Byte,System.Byte@)                 | Fills caller-allocated memory with a multiplication table
Method      | Z0.Gf8.products                                                       | Creates a complete multiplication table
Type        | Z0.GfPoly                                                             | Primitive polynomials for GF reduction
Field       | Z0.GfPoly.Gfp_2_1_0                                                   | x^2 + x^1 + x^0
Field       | Z0.GfPoly.Gfp_3_1_0                                                   | x^3 + x^1 + x^0
Field       | Z0.GfPoly.Gfp_4_1_0                                                   | x^4 + x^1 + x^0
Field       | Z0.GfPoly.Gfp_5_2_0                                                   | x^5 + x^2 + x^0
Field       | Z0.GfPoly.Gfp_6_1_0                                                   | x^6 + x^1 + x^0
Field       | Z0.GfPoly.Gfp_7_1_0                                                   | x^7 + x^1 + x^0
Field       | Z0.GfPoly.Gfp_8_4_3_2_0                                               | x^8 + x^4 + x^3 + x^2 + x^0            0b1_0001_1101
Field       | Z0.GfPoly.Gfp_9_4_0                                                   | x^9 + x^4 + x^0
Field       | Z0.GfPoly.Gfp_10_3_0                                                  | x^10 + x^3 + x^0
Field       | Z0.GfPoly.Gfp_11_2_1                                                  | x^11 + x^2 + x^0
Field       | Z0.GfPoly.Gfp_16_9_8_7_6_4_3_2_0                                      | x^16 + x^9 + x^8 + x^7 + x^6 + x^4 + x^3 + x^2 + x^0
Field       | Z0.GfPoly.Gfp_32_22_2_1_0                                             | x^32 + x^22 + x^2 + x^1 + x^0
Type        | Z0.GfPoly16                                                           | Represents a base-2 polynomial of degree at most N = 15. The represented polynomial is of the form            a_i * x^i + . . . a_1 * x^1 + a_0 * x^0 where  a_i = 0 | 1 and i = 0..N
Property    | Z0.GfPoly16.Item(System.Byte)                                         | Returns a bit indicating whether the coefficient for x^i is 1 or 0
Property    | Z0.GfPoly16.Scalar                                                    | Returns the scalar representation of the polynomial
Property    | Z0.GfPoly16.Degree                                                    | The degree (N) of the polynomial
Property    | Z0.GfPoly16.Nonzero                                                   | Specfies whether the polynomial is the zero polynomial
Method      | Z0.GfPoly16.ToBitVector                                               | Converts the polynomial to a bitvector
Method      | Z0.GfPoly16.ToNatPoly                                                 | Converts the polynomial to a representation with natural degree
Method      | Z0.GfPoly16.Format                                                    | Formats the polynomial
Type        | Z0.GfPoly`2                                                           | Represents a base-2 polynomial of degree N. The represented polynomial is of the form            a_i * x^i + . . . a_1 * x^1 + a_0 * x^0 where  a_i = 0 | 1 and i = 0..N
Property    | Z0.GfPoly`2.Item(System.Byte)                                         | Returns a bit indicating whether the coefficient for x^i is 1 or 0
Property    | Z0.GfPoly`2.Scalar                                                    | Returns the scalar representation of the polynomial
Property    | Z0.GfPoly`2.Degree                                                    | The degree (N) of the polynomial
Property    | Z0.GfPoly`2.Nonzero                                                   | Specfies whether the polynomial is the zero polynomial
Method      | Z0.GfPoly`2.Format(System.Nullable{System.Char})                      | Formats the polynomial
Method      | Z0.BvUtil.packseq(System.ReadOnlySpan{System.Byte},System.Byte@)      | Packs a bitsequence determined by the first 8 (or fewer) bytes from the source into a single byte
Method      | Z0.BvUtil.packseq(System.ReadOnlySpan{System.Byte},System.UInt16@)    | Packs a bitsequence determined by the first 16 (or fewer) bytes from the source into an unsigned short
Method      | Z0.BvUtil.packseq(System.ReadOnlySpan{System.Byte},System.UInt32@)    | Packs a bitsequence determined by the first 32 (or fewer) bytes from the source into an unsigned int
Method      | Z0.BvUtil.packseq(System.ReadOnlySpan{System.Byte},System.UInt64@)    | Packs a bitsequence determined by the first 64 (or fewer) bytes from the source into an unsigned long
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N4)                                | Produces a 4-bit primal bitvector predicated on a random source
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N8)                                | Produces an 8-bit primal bitvector predicated on a random source
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N8,System.Int32)                   | Produces an 8-bit primal bitvector of a specified maximial effective width
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N16)                               | Produces a 16-bit primal bitvector
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N16,System.Int32)                  | Produces a 16-bit primal bitvector of a specified maximial effective width
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N32)                               | Produces a 32-bit primal bitvector
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N32,System.Int32)                  | Produces a 32-bit primal bitvector of a specified maximial effective width
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N64)                               | Produces a 64-bit primal bitvector
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N64,System.Int32)                  | Produces a 64-bit primal bitvector of maximal effective width
Method      | Z0.BvRng.BitVector(Z0.IPolyrand,Z0.N128)                              | Produces a 128-bit primal bitvector
Method      | Z0.BvRng.BitVectors(Z0.IPolyrand,Z0.N4)                               | Produces a stream of random 4-bit bitvectors
Method      | Z0.BvRng.BitVector``1(Z0.IPolyrand)                                   | Produces a generic bitvector
Method      | Z0.BvRng.BitVector``1(Z0.IPolyrand,System.Int32)                      | Produces a generic bitvector of a specified maximum effective width
Method      | Z0.BvRng.BitVector``2(Z0.IPolyrand,``0,``1)                           | Produces a natural bitvector
Type        | Z0.BitVectorLogix                                                     | Implements reference bitvector operations
Method      | Z0.BitVectorLogix.and``1(Z0.BitVector{``0},Z0.BitVector{``0})         | Computes the bitwise AND of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.nand``1(Z0.BitVector{``0},Z0.BitVector{``0})        | Computes the bitwise AND of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.or``1(Z0.BitVector{``0},Z0.BitVector{``0})          | Computes the bitwise OR of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.nor``1(Z0.BitVector{``0},Z0.BitVector{``0})         | Computes the bitwise OR of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.xor``1(Z0.BitVector{``0},Z0.BitVector{``0})         | Computes the bitwise XOR of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.xnor``1(Z0.BitVector{``0},Z0.BitVector{``0})        | Computes the bitwise XOR of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.lnot``1(Z0.BitVector{``0},Z0.BitVector{``0})        | Computes the bitwise LeftNot of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.rnot``1(Z0.BitVector{``0},Z0.BitVector{``0})        | Computes the bitwise LeftNot of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.impl``1(Z0.BitVector{``0},Z0.BitVector{``0})        | Computes the bitwise Impliction of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.nonimpl``1(Z0.BitVector{``0},Z0.BitVector{``0})     | Computes the bitwise NotImpliction of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.cimpl``1(Z0.BitVector{``0},Z0.BitVector{``0})       | Computes the bitwise ConverseImpliction of the source vetors via component-wise logical operations to define a reference implementation
Method      | Z0.BitVectorLogix.cnonimpl``1(Z0.BitVector{``0},Z0.BitVector{``0})    | Computes the bitwise ConverseImpliction of the source vetors via component-wise logical operations to define a reference implementation
Property    | Z0.IBitVector.Bytes                                                   | Presents bitvector content as a bytespan
Method      | Z0.IBitVector.Byte(System.Int32)                                      | Selects an index-identified mutable 8-bit segment from the source vector
Type        | Z0.BitVector128`2                                                     | Defines a natural bitvector over an intrinsic vector
Method      | Z0.BitVector128`2.op_Implicit(System.Runtime.Intrinsics.Vector128{`1})~Z0.BitVector128{`0,`1}| Implicitly convers a scalar to a bitvector
Method      | Z0.BitVector128`2.op_Implicit(Z0.BitVector128{`0,`1})~System.Runtime.Intrinsics.Vector128{`1}| Implicitly convers a bitvector to its scalar representation
Method      | Z0.BitVector128`2.op_BitwiseAnd(Z0.BitVector128{`0,`1}@,Z0.BitVector128{`0,`1}@)| Computes the bitwias AND between the operands
Method      | Z0.BitVector128`2.op_BitwiseOr(Z0.BitVector128{`0,`1}@,Z0.BitVector128{`0,`1}@)| Computes the bitwias AND between the operands
Method      | Z0.BitVector128`2.op_ExclusiveOr(Z0.BitVector128{`0,`1}@,Z0.BitVector128{`0,`1}@)| Computes the bitwise XOR between the operands
Method      | Z0.BitVector128`2.op_Modulus(Z0.BitVector128{`0,`1}@,Z0.BitVector128{`0,`1}@)| Computes the scalar product of the operands
Method      | Z0.BitVector128`2.op_OnesComplement(Z0.BitVector128{`0,`1}@)          | Computes the bitwise complement of the operand
Method      | Z0.BitVector128`2.op_UnaryNegation(Z0.BitVector128{`0,`1}@)           | Computes the two's complement negation of the operand
Method      | Z0.BitVector128`2.op_LeftShift(Z0.BitVector128{`0,`1}@,System.Int32)  | Shifts the source bits leftwards
Method      | Z0.BitVector128`2.op_RightShift(Z0.BitVector128{`0,`1}@,System.Int32) | Shifts the source bits rightwards
Method      | Z0.BitVector128`2.op_True(Z0.BitVector128{`0,`1}@)                    | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector128`2.op_False(Z0.BitVector128{`0,`1}@)                   | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector128`2.op_Equality(Z0.BitVector128{`0,`1}@,Z0.BitVector128{`0,`1}@)| Determines whether operand content is identical
Method      | Z0.BitVector128`2.op_Inequality(Z0.BitVector128{`0,`1}@,Z0.BitVector128{`0,`1}@)| Determines whether operand content is non-identical
Method      | Z0.BitVector128`2.#ctor(System.Runtime.Intrinsics.Vector128{`1})      | Intializes a bitvector with the lo N bits of a scalar source
Property    | Z0.BitVector128`2.Content                                             | The scalar representation of the vector
Property    | Z0.BitVector128`2.Width                                               | The bitvector's natural width
Property    | Z0.BitVector128`2.Lo                                                  | The bitvector's lower 64 bits
Property    | Z0.BitVector128`2.Hi                                                  | The bitvector's upper 64 bits
Property    | Z0.BitVector128`2.Empty                                               | Specifies whether all bits are disabled
Property    | Z0.BitVector128`2.NonEmpty                                            | Specifies whether at least one bit is enabled
Type        | Z0.BitVector16                                                        | Defines a 16-bit bitvector
Method      | Z0.BitVector16.op_BitwiseAnd(Z0.BitVector16,Z0.BitVector16)           | Computes the bitwise AND of the operands
Method      | Z0.BitVector16.op_BitwiseOr(Z0.BitVector16,Z0.BitVector16)            | Computes the bitwise OR of the operands
Method      | Z0.BitVector16.op_ExclusiveOr(Z0.BitVector16,Z0.BitVector16)          | Computes the bitwise XOR of the operands
Method      | Z0.BitVector16.op_OnesComplement(Z0.BitVector16)                      | Computes the bitwise complement of the operand.
Method      | Z0.BitVector16.op_Addition(Z0.BitVector16,Z0.BitVector16)             | Computes the arithmetic sum of the operands
Method      | Z0.BitVector16.op_UnaryNegation(Z0.BitVector16)                       | Computes the two's complement of the operand
Method      | Z0.BitVector16.op_Subtraction(Z0.BitVector16,Z0.BitVector16)          | Computes the arithmetic difference between the operands
Method      | Z0.BitVector16.op_Modulus(Z0.BitVector16,Z0.BitVector16)              | Computes the scalar product of the operands
Method      | Z0.BitVector16.op_LeftShift(Z0.BitVector16,System.Int32)              | Left-shifts the bits in the source
Method      | Z0.BitVector16.op_RightShift(Z0.BitVector16,System.Int32)             | Right-shifts the bits in the source
Method      | Z0.BitVector16.op_Increment(Z0.BitVector16)                           | Arithmetically increments the source vector
Method      | Z0.BitVector16.op_Decrement(Z0.BitVector16)                           | Arithmetically decrements the source vector
Method      | Z0.BitVector16.op_True(Z0.BitVector16)                                | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector16.op_False(Z0.BitVector16)                               | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector16.op_LogicalNot(Z0.BitVector16)                          | Computes the operand's logical negation: if x = 0 then 1 else 0
Method      | Z0.BitVector16.op_Equality(Z0.BitVector16,Z0.BitVector16)             | Determines whether operand content is identical
Method      | Z0.BitVector16.op_Inequality(Z0.BitVector16,Z0.BitVector16)           | Determines whether operand content is non-identical
Method      | Z0.BitVector16.op_LessThan(Z0.BitVector16,Z0.BitVector16)             | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector16.op_GreaterThan(Z0.BitVector16,Z0.BitVector16)          | Determines whether the left operand is arithmetically greater than the second
Method      | Z0.BitVector16.op_LessThanOrEqual(Z0.BitVector16,Z0.BitVector16)      | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector16.#ctor(System.UInt16)                                   | Initializes the vector with the source value it represents
Property    | Z0.BitVector16.Scalar                                                 | Extracts the scalar represented by the vector
Property    | Z0.BitVector16.Width                                                  | The number of bits represented by the vector
Property    | Z0.BitVector16.Empty                                                  | Returns true if no bits are enabled, false otherwise
Property    | Z0.BitVector16.NonEmpty                                               | Returns true if the vector has at least one enabled bit; false otherwise
Property    | Z0.BitVector16.Lo                                                     | The vector's 8 least significant bits
Property    | Z0.BitVector16.Hi                                                     | The vector's 8 most significant bits
Property    | Z0.BitVector16.Bytes                                                  | Presents bitvector content as a bytespan
Property    | Z0.BitVector16.Item(System.Int32)                                     | Gets/Sets an identified bit
Property    | Z0.BitVector16.Item(System.Byte,System.Byte)                          | Selects a contiguous range of bits
Type        | Z0.BitVector24                                                        | Defines a 32-bit bitvector
Property    | Z0.BitVector24.Zero                                                   | Allocates a vector with all bits disabled
Property    | Z0.BitVector24.One                                                    | Allocates a vector that has the least bit enabled and all others disabled
Property    | Z0.BitVector24.Ones                                                   | Allocates a vector with all bits enabled
Method      | Z0.BitVector24.op_Implicit(System.UInt32)~Z0.BitVector24              | Implicitly converts a scalar value to a 32-bit bitvector
Method      | Z0.BitVector24.op_Implicit(System.Byte)~Z0.BitVector24                | Implicitly converts a scalar value to a 32-bit bitvector
Method      | Z0.BitVector24.op_Implicit(System.UInt16)~Z0.BitVector24              | Implicitly converts a scalar value to a 32-bit bitvector
Method      | Z0.BitVector24.op_Implicit(System.ValueTuple{System.UInt16,System.Byte})~Z0.BitVector24| Implicitly constructs a bitvector from a tuple
Method      | Z0.BitVector24.op_ExclusiveOr(Z0.BitVector24,Z0.BitVector24)          | Computes the bitwise XOR of the source operands
Method      | Z0.BitVector24.op_BitwiseAnd(Z0.BitVector24,Z0.BitVector24)           | Computes the bitwise AND of the source operands
Method      | Z0.BitVector24.op_Modulus(Z0.BitVector24,Z0.BitVector24)              | Computes the scalar product of the operands
Method      | Z0.BitVector24.op_BitwiseOr(Z0.BitVector24,Z0.BitVector24)            | Computes the bitwise OR of the source operands
Method      | Z0.BitVector24.op_OnesComplement(Z0.BitVector24)                      | Computes the bitwise complement of the operand.
Method      | Z0.BitVector24.op_UnaryNegation(Z0.BitVector24)                       | Computes the two's complement of the operand
Method      | Z0.BitVector24.op_LeftShift(Z0.BitVector24,System.Int32)              | Left-shifts the bits in the source
Method      | Z0.BitVector24.op_RightShift(Z0.BitVector24,System.Int32)             | Right-shifts the bits in the source
Method      | Z0.BitVector24.op_True(Z0.BitVector24)                                | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector24.op_False(Z0.BitVector24)                               | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector24.op_LogicalNot(Z0.BitVector24)                          | Computes the operand's logical negation: if x = 0 then 1 else 0
Method      | Z0.BitVector24.op_Equality(Z0.BitVector24,Z0.BitVector24)             | Determines whether operand content is identical
Method      | Z0.BitVector24.op_Inequality(Z0.BitVector24,Z0.BitVector24)           | Determines whether operand content is non-identical
Method      | Z0.BitVector24.op_LessThan(Z0.BitVector24,Z0.BitVector24)             | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector24.op_GreaterThan(Z0.BitVector24,Z0.BitVector24)          | Determines whether the left operand is arithmetically greater than the second
Method      | Z0.BitVector24.op_LessThanOrEqual(Z0.BitVector24,Z0.BitVector24)      | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector24.op_GreaterThanOrEqual(Z0.BitVector24,Z0.BitVector24)   | Determines whether the left operand is arithmetically greater than or equal to the second
Method      | Z0.BitVector24.#ctor(System.UInt32)                                   | Initializes the vector
Method      | Z0.BitVector24.#ctor(System.UInt16,System.Byte)                       | Initializes the vector
Property    | Z0.BitVector24.Scalar                                                 | Extracts the scalar represented by the vector
Property    | Z0.BitVector24.Width                                                  | The number of bits represented by the vector
Property    | Z0.BitVector24.Lo8                                                    | The first 8 bits of the vector
Property    | Z0.BitVector24.Mid8                                                   | The middle 8 bits of the vector
Property    | Z0.BitVector24.Hi8                                                    | The upper 8 bits of the vector
Property    | Z0.BitVector24.Lo16                                                   | The first 16 bits of the vector
Property    | Z0.BitVector24.Hi16                                                   | The last 16 bits of the vector
Property    | Z0.BitVector24.Bytes                                                  | Presents bitvector content as a bytespan
Property    | Z0.BitVector24.Empty                                                  | Returns true if no bits are enabled, false otherwise
Property    | Z0.BitVector24.NonEmpty                                               | Returns true if the vector has at least one enabled bit; false otherwise
Property    | Z0.BitVector24.Item(System.Int32)                                     | Queries/Manipulates index-identified bits
Property    | Z0.BitVector24.Item(System.Byte,System.Byte)                          | Selects a contiguous range of bits defined by an inclusive 0-based index range
Type        | Z0.BitVector32                                                        | Defines a 32-bit bitvector
Property    | Z0.BitVector32.Zero                                                   | Allocates a vector with all bits disabled
Property    | Z0.BitVector32.One                                                    | Allocates a vector that has the least bit enabled and all others disabled
Property    | Z0.BitVector32.Ones                                                   | Allocates a vector with all bits enabled
Method      | Z0.BitVector32.op_Implicit(System.Byte)~Z0.BitVector32                | Implicitly converts a scalar value to a 32-bit bitvector
Method      | Z0.BitVector32.op_Implicit(System.UInt16)~Z0.BitVector32              | Implicitly converts a scalar value to a 32-bit bitvector
Method      | Z0.BitVector32.op_Implicit(System.UInt32)~Z0.BitVector32              | Implicitly converts a scalar value to a 32-bit bitvector
Method      | Z0.BitVector32.op_ExclusiveOr(Z0.BitVector32,Z0.BitVector32)          | Computes the bitwise XOR of the source operands
Method      | Z0.BitVector32.op_BitwiseAnd(Z0.BitVector32,Z0.BitVector32)           | Computes the bitwise AND of the source operands
Method      | Z0.BitVector32.op_Modulus(Z0.BitVector32,Z0.BitVector32)              | Computes the scalar product of the operands
Method      | Z0.BitVector32.op_BitwiseOr(Z0.BitVector32,Z0.BitVector32)            | Computes the bitwise OR of the source operands
Method      | Z0.BitVector32.op_OnesComplement(Z0.BitVector32)                      | Computes the bitwise complement of the operand.
Method      | Z0.BitVector32.op_Addition(Z0.BitVector32,Z0.BitVector32)             | Computes the arithmetic sum of the source operands.
Method      | Z0.BitVector32.op_Increment(Z0.BitVector32)                           | Arithmetically increments the source vector
Method      | Z0.BitVector32.op_Decrement(Z0.BitVector32)                           | Arithmetically decrements the source vector
Method      | Z0.BitVector32.op_Subtraction(Z0.BitVector32,Z0.BitVector32)          | Computes the arithmetic difference between the operands
Method      | Z0.BitVector32.op_UnaryNegation(Z0.BitVector32)                       | Computes the two's complement of the operand
Method      | Z0.BitVector32.op_LeftShift(Z0.BitVector32,System.Int32)              | Left-shifts the bits in the source
Method      | Z0.BitVector32.op_RightShift(Z0.BitVector32,System.Int32)             | Right-shifts the bits in the source
Method      | Z0.BitVector32.op_True(Z0.BitVector32)                                | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector32.op_False(Z0.BitVector32)                               | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector32.op_LogicalNot(Z0.BitVector32)                          | Computes the operand's logical negation: if x = 0 then 1 else 0
Method      | Z0.BitVector32.op_Equality(Z0.BitVector32,Z0.BitVector32)             | Determines whether operand content is identical
Method      | Z0.BitVector32.op_Inequality(Z0.BitVector32,Z0.BitVector32)           | Determines whether operand content is non-identical
Method      | Z0.BitVector32.op_LessThan(Z0.BitVector32,Z0.BitVector32)             | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector32.op_GreaterThan(Z0.BitVector32,Z0.BitVector32)          | Determines whether the left operand is arithmetically greater than the second
Method      | Z0.BitVector32.op_LessThanOrEqual(Z0.BitVector32,Z0.BitVector32)      | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector32.op_GreaterThanOrEqual(Z0.BitVector32,Z0.BitVector32)   | Determines whether the left operand is arithmetically greater than or equal to the second
Method      | Z0.BitVector32.#ctor(System.UInt32)                                   | Initializes the vector with the source value it represents
Property    | Z0.BitVector32.Scalar                                                 | Extracts the scalar represented by the vector
Property    | Z0.BitVector32.Width                                                  | The number of bits represented by the vector
Property    | Z0.BitVector32.Bytes                                                  | Presents bitvector content as a bytespan
Property    | Z0.BitVector32.Empty                                                  | Returns true if no bits are enabled, false otherwise
Property    | Z0.BitVector32.NonEmpty                                               | Returns true if the vector has at least one enabled bit; false otherwise
Property    | Z0.BitVector32.Item(System.Int32)                                     | Queries/Manipulates index-identified bits
Property    | Z0.BitVector32.Item(System.Byte,System.Byte)                          | Selects a contiguous range of bits defined by an inclusive 0-based index range
Type        | Z0.BitVector4                                                         | Defines a 4-bit bitvector
Method      | Z0.BitVector4.op_ExclusiveOr(Z0.BitVector4@,Z0.BitVector4@)           | Computes the XOR of the source operands.             Note that this operator is equivalent to the addition operator (+)
Method      | Z0.BitVector4.op_BitwiseAnd(Z0.BitVector4@,Z0.BitVector4@)            | Computes the bitwise AND of the source operands            Note that the AND operator is equivalent to the (*) operator
Method      | Z0.BitVector4.op_BitwiseOr(Z0.BitVector4@,Z0.BitVector4@)             | Computes the bitwise OR of the source operands
Method      | Z0.BitVector4.op_OnesComplement(Z0.BitVector4)                        | Computes the bitwise complement
Method      | Z0.BitVector4.op_Addition(Z0.BitVector4,Z0.BitVector4)                | Computes the arithmetic sum of the source operands.
Method      | Z0.BitVector4.op_Modulus(Z0.BitVector4,Z0.BitVector4)                 | Computes the scalar product of the operands
Method      | Z0.BitVector4.op_Subtraction(Z0.BitVector4,Z0.BitVector4)             | Subtracts the second operand from the first.
Method      | Z0.BitVector4.op_Equality(Z0.BitVector4,Z0.BitVector4)                | Determines whether operand content is identical
Method      | Z0.BitVector4.op_Inequality(Z0.BitVector4,Z0.BitVector4)              | Determines whether operand content is non-identical
Method      | Z0.BitVector4.op_LessThan(Z0.BitVector4,Z0.BitVector4)                | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector4.op_GreaterThan(Z0.BitVector4,Z0.BitVector4)             | Determines whether the left operand is arithmetically greater than than the second
Method      | Z0.BitVector4.op_LessThanOrEqual(Z0.BitVector4,Z0.BitVector4)         | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector4.op_GreaterThanOrEqual(Z0.BitVector4,Z0.BitVector4)      | Determines whether the left operand is arithmetically greater than or equal to the second
Property    | Z0.BitVector4.Scalar                                                  | Extracts the scalar represented by the vector
Property    | Z0.BitVector4.Width                                                   | The number of bits represented by the vector
Property    | Z0.BitVector4.Empty                                                   | Returns true if all bits are disabled, false otherwise
Property    | Z0.BitVector4.NonEmpty                                                | Returns true if at least one bit is enabled, false otherwise
Type        | Z0.BitVector64                                                        | Defines a 64-bit bitvector
Method      | Z0.BitVector64.op_Implicit(System.UInt64)~Z0.BitVector64              | Implicitly converts an unsigned 64-bit integer to a 64-bit bitvector
Method      | Z0.BitVector64.op_Implicit(Z0.BitVector64)~System.UInt64              | Implicitly converts a bitvector to a 64-bit unsigned integer
Method      | Z0.BitVector64.op_Explicit(Z0.BitVector64)~Z0.BitVector4              | Explicitly converts a a 64-bit bitvector to an 8-bit bitvector
Method      | Z0.BitVector64.op_Explicit(Z0.BitVector64)~Z0.BitVector8              | Explicitly converts a a 64-bit bitvector to an 8-bit bitvector
Method      | Z0.BitVector64.op_Explicit(Z0.BitVector64)~Z0.BitVector16             | Explicitly converts a a 64-bit bitvector to a 16-bit bitvector
Method      | Z0.BitVector64.op_Explicit(Z0.BitVector64)~Z0.BitVector32             | Explicitly converts a a 64-bit bitvector to a 32-bit bitvector
Method      | Z0.BitVector64.op_Implicit(System.Byte)~Z0.BitVector64                | Implicitly converts a scalar value to a 64-bit bitvector
Method      | Z0.BitVector64.op_Implicit(System.UInt16)~Z0.BitVector64              | Implicitly converts a scalar value to a 64-bit bitvector
Method      | Z0.BitVector64.op_Implicit(System.UInt32)~Z0.BitVector64              | Implicitly converts a scalar value to a 64-bit bitvector
Method      | Z0.BitVector64.op_ExclusiveOr(Z0.BitVector64,Z0.BitVector64)          | Computes the bitwise XOR of the source operands            Note that the XOR operator is equivalent to the (+) operator
Method      | Z0.BitVector64.op_BitwiseAnd(Z0.BitVector64,Z0.BitVector64)           | Computes the bitwise AND of the source operands
Method      | Z0.BitVector64.op_BitwiseOr(Z0.BitVector64,Z0.BitVector64)            | Computes the bitwise OR of the source operands
Method      | Z0.BitVector64.op_Modulus(Z0.BitVector64,Z0.BitVector64)              | Computes the scalar product of the operands
Method      | Z0.BitVector64.op_Addition(Z0.BitVector64,Z0.BitVector64)             | Computes the arithmetic sum of the source operands.
Method      | Z0.BitVector64.op_OnesComplement(Z0.BitVector64)                      | Computes the bitwise complement of the operand
Method      | Z0.BitVector64.op_UnaryNegation(Z0.BitVector64)                       | Negates the operand via two's complement
Method      | Z0.BitVector64.op_Subtraction(Z0.BitVector64,Z0.BitVector64)          | Arithmetically subtracts the second operand from the first.
Method      | Z0.BitVector64.op_LeftShift(Z0.BitVector64,System.Int32)              | Shifts the source bits leftwards
Method      | Z0.BitVector64.op_RightShift(Z0.BitVector64,System.Int32)             | Shifts the source bits rightwards
Method      | Z0.BitVector64.op_Increment(Z0.BitVector64)                           | Increments the vector arithmetically
Method      | Z0.BitVector64.op_Decrement(Z0.BitVector64)                           | Decrements the vector arithmetically
Method      | Z0.BitVector64.op_True(Z0.BitVector64)                                | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector64.op_False(Z0.BitVector64)                               | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector64.op_LogicalNot(Z0.BitVector64)                          | Computes the operand's logical negation: if x = 0 then 1 else 0
Method      | Z0.BitVector64.op_Equality(Z0.BitVector64,Z0.BitVector64)             | Determines whether operand content is identical
Method      | Z0.BitVector64.op_Inequality(Z0.BitVector64,Z0.BitVector64)           | Determines whether operand content is non-identical
Method      | Z0.BitVector64.op_LessThan(Z0.BitVector64,Z0.BitVector64)             | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector64.op_GreaterThan(Z0.BitVector64,Z0.BitVector64)          | Determines whether the left operand is arithmetically greater than the second
Method      | Z0.BitVector64.op_LessThanOrEqual(Z0.BitVector64,Z0.BitVector64)      | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector64.op_GreaterThanOrEqual(Z0.BitVector64,Z0.BitVector64)   | Determines whether the left operand is arithmetically greater than or equal to the second
Method      | Z0.BitVector64.#ctor(System.UInt64)                                   | Initializes a vector with the primal source value it represents
Property    | Z0.BitVector64.Scalar                                                 | Extracts the scalar represented by the vector
Property    | Z0.BitVector64.Width                                                  | The actual number of bits represented by the vector
Property    | Z0.BitVector64.Bytes                                                  | Presents bitvector content as a bytespan
Property    | Z0.BitVector64.Empty                                                  | Returns true if no bits are enabled, false otherwise
Property    | Z0.BitVector64.NonEmpty                                               | Returns true if the vector has at least one enabled bit; false otherwise
Property    | Z0.BitVector64.AllOn                                                  | Tests whether all bits are on
Property    | Z0.BitVector64.Lo                                                     | The vector's 32 least significant bits
Property    | Z0.BitVector64.Hi                                                     | The vector's 32 most significant bits
Property    | Z0.BitVector64.Item(System.Int32)                                     | Reads/Manipulates a source bit at a specified position
Property    | Z0.BitVector64.Item(System.Byte,System.Byte)                          | Selects a contiguous range of bits
Method      | Z0.BitVector64.Byte(System.Int32)                                     | Selects an index-identified byte where index = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
Method      | Z0.BitVector8.op_Implicit(Z0.HexKind)~Z0.BitVector8                   | Implicitly converts a byte classifier to a vector
Method      | Z0.BitVector8.op_Implicit(Z0.BitVector8)~Z0.HexKind                   | Implicitly converts a vector to a byte classifier
Method      | Z0.BitVector8.op_Implicit(Z0.BitVector8)~System.Byte                  | Converts the source vector to the underlying scalar
Method      | Z0.BitVector8.op_BitwiseOr(Z0.BitVector8,Z0.BitVector8)               | Computes the bitwise OR of the source operands
Method      | Z0.BitVector8.op_LeftShift(Z0.BitVector8,System.Int32)                | Left-shifts the bits in the source
Method      | Z0.BitVector8.op_RightShift(Z0.BitVector8,System.Int32)               | Right-shifts the bits in the source
Method      | Z0.BitVector8.op_OnesComplement(Z0.BitVector8)                        | Computes the one's complement of the operand.
Method      | Z0.BitVector8.op_UnaryNegation(Z0.BitVector8)                         | Computes the two's complement of the operand
Method      | Z0.BitVector8.op_Addition(Z0.BitVector8,Z0.BitVector8)                | Computes the arithmetic sum of the source operands.
Method      | Z0.BitVector8.op_Multiply(Z0.BitVector8,Z0.BitVector8)                | Computes the product of the operands.
Method      | Z0.BitVector8.op_Subtraction(Z0.BitVector8,Z0.BitVector8)             | Computes the arithmetic difference between the operands
Method      | Z0.BitVector8.op_ExclusiveOr(Z0.BitVector8,System.Int32)              | Raises a vector b to a power n where n &gt;= 0
Method      | Z0.BitVector8.op_Modulus(Z0.BitVector8,Z0.BitVector8)                 | Computes the scalar product of the operands
Method      | Z0.BitVector8.op_Increment(Z0.BitVector8)                             | Arithmetically increments the bitvector
Method      | Z0.BitVector8.op_Decrement(Z0.BitVector8)                             | Arithmetically decrements the bitvector
Method      | Z0.BitVector8.op_True(Z0.BitVector8)                                  | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector8.op_False(Z0.BitVector8)                                 | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector8.op_LogicalNot(Z0.BitVector8)                            | Computes the operand's logical negation: if x = 0 then 1 else 0
Method      | Z0.BitVector8.op_Equality(Z0.BitVector8,Z0.BitVector8)                | Determines whether operand content is identical
Method      | Z0.BitVector8.op_Inequality(Z0.BitVector8,Z0.BitVector8)              | Determines whether operand content is non-identical
Method      | Z0.BitVector8.op_LessThan(Z0.BitVector8,Z0.BitVector8)                | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector8.op_GreaterThan(Z0.BitVector8,Z0.BitVector8)             | Determines whether the left operand is arithmetically greater than than the second
Method      | Z0.BitVector8.op_LessThanOrEqual(Z0.BitVector8,Z0.BitVector8)         | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector8.op_GreaterThanOrEqual(Z0.BitVector8,Z0.BitVector8)      | Determines whether the left operand is arithmetically greater than or equal to the second
Property    | Z0.BitVector8.Scalar                                                  | Extracts the scalar represented by the vector
Property    | Z0.BitVector8.Width                                                   | The number of bits represented by the vector
Property    | Z0.BitVector8.Bytes                                                   | Presents bitvector content as a bytespan
Property    | Z0.BitVector8.Empty                                                   | Returns true if no bits are enabled, false otherwise
Property    | Z0.BitVector8.NonEmpty                                                | Returns true if the vector has at least one enabled bit; false otherwise
Property    | Z0.BitVector8.AllOn                                                   | Returns true if all bits are enabled, false otherwise
Property    | Z0.BitVector8.Hi                                                      | The vector's 4 most significant bits
Property    | Z0.BitVector8.Lo                                                      | The vector's 4 least significant bits
Property    | Z0.BitVector8.Item(System.Int32)                                      | Gets/sets the state of an index-identified bit
Property    | Z0.BitVector8.Item(System.Byte,System.Byte)                           | Selects a contiguous range of bits
Type        | Z0.BitVector`2                                                        | Defines a natural bitvector over a primal cell
Property    | Z0.BitVector`2.MaxWidth                                               | The physical width of the vector
Property    | Z0.BitVector`2.MaxValue                                               | The maximum arithmetic value of the vector, constrained by the natural width
Method      | Z0.BitVector`2.Inject(`1)                                             | Directly assigns a value to a vector storage cell, bypassing masked initialization
Method      | Z0.BitVector`2.op_Implicit(`1)~Z0.BitVector{`0,`1}                    | Implicitly convers a scalar to a bitvector
Method      | Z0.BitVector`2.op_Implicit(Z0.BitVector{`0,`1})~`1                    | Implicitly convers a bitvector to its scalar representation
Method      | Z0.BitVector`2.op_Implicit(Z0.BitVector{`0,`1})~Z0.BitVector{`1}      | Implicitly convers a bitvector to its scalar representation
Method      | Z0.BitVector`2.op_BitwiseAnd(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1}) | Computes the bitwias AND between the operands
Method      | Z0.BitVector`2.op_BitwiseOr(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})  | Computes the bitwias AND between the operands
Method      | Z0.BitVector`2.op_ExclusiveOr(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})| Computes the bitwise XOR between the operands
Method      | Z0.BitVector`2.op_Modulus(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})    | Computes the scalar product of the operands
Method      | Z0.BitVector`2.op_OnesComplement(Z0.BitVector{`0,`1})                 | Computes the bitwise complement of the operand
Method      | Z0.BitVector`2.op_Increment(Z0.BitVector{`0,`1})                      | Computes the bitwise complement of the operand
Method      | Z0.BitVector`2.op_Decrement(Z0.BitVector{`0,`1})                      | Computes the bitwise complement of the operand
Method      | Z0.BitVector`2.op_Addition(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})   | Computes the N-modular arithmetic sum between the operands
Method      | Z0.BitVector`2.op_Subtraction(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})| Computes the N-modular arithmetic difference between the operands
Method      | Z0.BitVector`2.op_UnaryNegation(Z0.BitVector{`0,`1})                  | Computes the two's complement negation of the operand
Method      | Z0.BitVector`2.op_LeftShift(Z0.BitVector{`0,`1},System.Int32)         | Shifts the source bits leftwards
Method      | Z0.BitVector`2.op_RightShift(Z0.BitVector{`0,`1},System.Int32)        | Shifts the source bits rightwards
Method      | Z0.BitVector`2.op_LessThan(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})   | Computes the arithmetic less than between the operands
Method      | Z0.BitVector`2.op_GreaterThan(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})| Computes the arithmetic greater than between the operands
Method      | Z0.BitVector`2.op_LessThanOrEqual(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})| Computes the arithmetic less than or equal between the operands
Method      | Z0.BitVector`2.op_GreaterThanOrEqual(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})| Computes the arithmetic greater than or equal between the operands
Method      | Z0.BitVector`2.op_True(Z0.BitVector{`0,`1})                           | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector`2.op_False(Z0.BitVector{`0,`1})                          | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector`2.op_Equality(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1})   | Determines whether operand content is identical
Method      | Z0.BitVector`2.op_Inequality(Z0.BitVector{`0,`1},Z0.BitVector{`0,`1}) | Determines whether operand content is non-identical
Method      | Z0.BitVector`2.#ctor(`1)                                              | Intializes a bitvector with the lo N bits of a scalar source
Property    | Z0.BitVector`2.Scalar                                                 | The scalar representation of the vector
Property    | Z0.BitVector`2.Width                                                  | The bitvector width
Property    | Z0.BitVector`2.Empty                                                  | Specifies whether all bits are disabled
Property    | Z0.BitVector`2.NonEmpty                                               | Specifies whether at least one bit is enabled
Property    | Z0.BitVector`2.Item(System.Int32)                                     | Reads/Manipulates a single bit
Property    | Z0.BitVector`2.Item(System.Byte,System.Byte)                          | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVector`2.As``1                                                  | Creates a new vector by converting the underlying cell to the target type
Type        | Z0.BitVector`1                                                        | Defines a generic bitvector over a primal cell
Method      | Z0.BitVector`1.op_BitwiseAnd(Z0.BitVector{`0},Z0.BitVector{`0})       | Computes the bitwias AND between the operands
Method      | Z0.BitVector`1.op_BitwiseOr(Z0.BitVector{`0},Z0.BitVector{`0})        | Computes the bitwias AND between the operands
Method      | Z0.BitVector`1.op_ExclusiveOr(Z0.BitVector{`0},Z0.BitVector{`0})      | Computes the bitwise XOR between the operands
Method      | Z0.BitVector`1.op_Modulus(Z0.BitVector{`0},Z0.BitVector{`0})          | Computes the scalar product of the operands
Method      | Z0.BitVector`1.op_OnesComplement(Z0.BitVector{`0})                    | Computes the bitwise complement of the operand
Method      | Z0.BitVector`1.op_UnaryNegation(Z0.BitVector{`0})                     | Computes the two's complement negation of the operand
Method      | Z0.BitVector`1.op_LeftShift(Z0.BitVector{`0},System.Int32)            | Shifts the source bits leftwards
Method      | Z0.BitVector`1.op_RightShift(Z0.BitVector{`0},System.Int32)           | Shifts the source bits rightwards
Method      | Z0.BitVector`1.op_True(Z0.BitVector{`0})                              | Returns true if the source vector is nonzero, false otherwise
Method      | Z0.BitVector`1.op_False(Z0.BitVector{`0})                             | Returns false if the source vector is the zero vector, false otherwise
Method      | Z0.BitVector`1.op_Increment(Z0.BitVector{`0})                         | Increments the vector arithmetically
Method      | Z0.BitVector`1.op_Decrement(Z0.BitVector{`0})                         | Decrements the vector arithmetically
Method      | Z0.BitVector`1.op_Addition(Z0.BitVector{`0},Z0.BitVector{`0})         | Computes the arithmetic sum of the source operands.
Method      | Z0.BitVector`1.op_Subtraction(Z0.BitVector{`0},Z0.BitVector{`0})      | Arithmetically subtracts the second operand from the first.
Method      | Z0.BitVector`1.op_Equality(Z0.BitVector{`0},Z0.BitVector{`0})         | Determines whether operand content is identical
Method      | Z0.BitVector`1.op_Inequality(Z0.BitVector{`0},Z0.BitVector{`0})       | Determines whether operand content is non-identical
Method      | Z0.BitVector`1.op_LessThan(Z0.BitVector{`0},Z0.BitVector{`0})         | Determines whether the left operand is arithmetically less than the second
Method      | Z0.BitVector`1.op_GreaterThan(Z0.BitVector{`0},Z0.BitVector{`0})      | Determines whether the left operand is arithmetically greater than the second
Method      | Z0.BitVector`1.op_LessThanOrEqual(Z0.BitVector{`0},Z0.BitVector{`0})  | Determines whether the left operand is arithmetically less than or equal to the second
Method      | Z0.BitVector`1.op_GreaterThanOrEqual(Z0.BitVector{`0},Z0.BitVector{`0})| Determines whether the left operand is arithmetically greater than or equal to the second
Property    | Z0.BitVector`1.Scalar                                                 | Specifies the data over which the vector is defined
Property    | Z0.BitVector`1.Lo                                                     | Extracts the lower bits
Property    | Z0.BitVector`1.Hi                                                     | Extracts the upper bits
Property    | Z0.BitVector`1.Width                                                  | The number of bits represented by the vector
Property    | Z0.BitVector`1.Bytes                                                  | Converts the encapsulated data to a bytespan
Property    | Z0.BitVector`1.Empty                                                  | Specifies whether all bits are disabled
Property    | Z0.BitVector`1.NonEmpty                                               | Specifies whether at least one bit is enabled
Property    | Z0.BitVector`1.Item(System.Int32)                                     | Reads/Manipulates a single bit
Property    | Z0.BitVector`1.Item(System.Byte,System.Byte)                          | Extracts a contiguous sequence of bits defined by an inclusive range
Method      | Z0.BitVectorX.Extend(Z0.BitVector4,Z0.N8)                             | Zero extends the source vector
Method      | Z0.BitVectorX.Extend(Z0.BitVector8,Z0.N16)                            | Zero extends the source vector
Method      | Z0.BitVectorX.Extend(Z0.BitVector16,Z0.N32)                           | Zero extends the source vector
Method      | Z0.BitVectorX.Extend(Z0.BitVector32,Z0.N64)                           | Zero extends the source vector
Method      | Z0.BitVectorX.Extend(Z0.BitVector64,Z0.N128)                          | Zero extends the source vector
