| M:Z0.ITestNumericMatch.MatchNumeric``1(System.String,Z0.UnaryOp{``0},Z0.UnaryOp{``0})| 
            <summary>
            Evaluates a pair of unary operators and asserts their equality over a random sequence
            </summary>
            <param name="label">The case label</param>
            <param name="f">The first operator, often interpreted as the reference implementation</param>
            <param name="g">The second operator, often interpreted as the operator under test</param>
            <typeparam name="T">The operator domain type</typeparam>
        
| M:Z0.ITestNumericMatch.MatchNumeric``1(System.String,Z0.BinaryOp{``0},Z0.BinaryOp{``0})| 
            <summary>
            Evaluates a pair of binary operators and asserts their equality over a random sequence
            </summary>
            <param name="label">The case label</param>
            <param name="f">The first operator, often interpreted as the reference implementation</param>
            <param name="g">The second operator, often interpreted as the operator under test</param>
            <typeparam name="T">The operator domain type</typeparam>
        
| T:Z0.DelegatedContract                            | 
            <summary>
            A primary implementation of the <see cref="T:Z0.IDynamicContractMessenger" /> contract
            that delgates contract implementation through a supplied <see cref="T:Z0.DelegateIndex" />
            </summary>
        
| M:Z0.DelegatedContract.Realize``1(System.String,Z0.DelegateIndex)| 
            <summary>
            Realizes implementation of a contract by mediating access to a <see cref="T:Z0.DelegateIndex" />
            </summary>
            <typeparam name="TContract">The type of realized contract</typeparam>
            <returns></returns>
        
| T:Z0.DelegateIndex                                | 
            <summary>
            Indexes a collection of delegates that (potentially) specify a <see cref="T:Z0.IDynamicContractMessenger" /> realization
            </summary>
        
| M:Z0.DelegateIndex.Getter``1(System.String,System.Func{``0})| 
            <summary>
            Indexes a property get method
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="name">The name of the property get method</param>
            <param name="f">The get delegate</param>
        
| M:Z0.DelegateIndex.Getter(System.String)          | 
            <summary>
            Retrieves a property get method
            </summary>
            <param name="name">The name of the get method</param>
            <returns></returns>
        
| M:Z0.DelegateIndex.Setter``1(System.String,System.Action{``0})| 
            <summary>
            Specifies a property setter
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="name">The name of the property set method</param>
            <param name="a">The set action</param>
        
| M:Z0.DelegateIndex.Setter(System.String)          | 
            <summary>
            Retrieves named property set method
            </summary>
            <param name="name">The name of the get method</param>
            <returns></returns>
        
| M:Z0.DelegateIndex.Function(System.String,System.Delegate)| 
            <summary>
            Specifies a function delegate
            </summary>
            <param name="name">The method</param>
            <param name="f">The delegate</param>
        
| M:Z0.DelegateIndex.Action(System.String,System.Delegate)| 
            <summary>
            Specifies an action delegate
            </summary>
            <param name="name">The name of the action</param>
            <param name="a">The action</param>
        
| M:Z0.DelegateIndex.Action(System.String)          | 
            <summary>
            Retrieves an action delegate
            </summary>
            <param name="name">The name of the action</param>
            <returns></returns>
        
| M:Z0.DelegateIndex.Function(System.String)        | 
            <summary>
            Retrieves a function delegate
            </summary>
            <param name="name">The name of the function</param>
        
| T:Z0.DelegateIndexBuilder`1                       | 
            <summary>
            Implementation of a builder pattern that constructs <see cref="T:Z0.DelegateIndex" /> instances
            based on supplied expressions and upon completion emits an implementation of the specified 
            contract type, returning an instance to this implementation to the caller
            </summary>
            <typeparam name="TContract">The contract type</typeparam>
        
| M:Z0.DelegateIndexBuilder`1.type_array``1         | 
            <summary>
            Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
            </summary>
            <typeparam name="T1">The first type parameter</typeparam>
            <returns></returns>
        
| M:Z0.DelegateIndexBuilder`1.type_array``2         | 
            <summary>
            Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
            </summary>
            <typeparam name="T1">The first type parameter</typeparam>
            <typeparam name="T2">The second type parameter</typeparam>
            <returns></returns>
        
| M:Z0.DelegateIndexBuilder`1.type_array``3         | 
            <summary>
            Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
            </summary>
            <typeparam name="T1">The first type parameter</typeparam>
            <typeparam name="T2">The second type parameter</typeparam>
            <typeparam name="T3">The third type parameter</typeparam>
            <returns></returns>
        
| M:Z0.DelegateIndexBuilder`1.type_array``4         | 
            <summary>
            Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
            </summary>
            <typeparam name="T1">The first type parameter</typeparam>
            <typeparam name="T2">The second type parameter</typeparam>
            <typeparam name="T3">The third type parameter</typeparam>
            <typeparam name="T4">The fourth type parameter</typeparam>
            <returns></returns>
        
| M:Z0.DelegateIndexBuilder`1.Realize               | 
            <summary>
            Emits the implementation defined by the builder and returns an intance of this implementation
            to the caller
            </summary>
            <returns></returns>
        
| T:Z0.DynamicContract                              | 
            <summary>
            Provides access to high-level dynamic contract capabilities
            </summary>
        
| M:Z0.DynamicContract.Realize``1(Z0.IDynamicContractMessenger)| 
            <summary>
            Realizes implementation of a user-defined contract by delegating through a <see cref="T:Z0.IDynamicContractMessenger" /> implementation
            </summary>
            <typeparam name="TContract">The type of realized contract</typeparam>
            <param name="messenger">The dynamic contract</param>
            <returns></returns>
        
| M:Z0.DynamicContract.Realize``1(Z0.IDynamicContract)| 
            <summary>
            Realizes implementation of an interface contract via an instance of the <see cref="T:Z0.DynamicContractHost`1" /> type
            </summary>
            <typeparam name="TContract"></typeparam>
            <param name="contract"></param>
            <returns></returns>
        
| T:Z0.DynamicContractImplementor                   | 
            <summary>
            Generates an implementation of a specified interface type that delegates to an implementation
            of <see cref="T:Z0.IDynamicContractMessenger" />
            </summary>
        
| M:Z0.DynamicContractImplementor.ImplementContract``1(System.String)| 
            <summary>
            Generates implementation of an interface contract that delegates to <see cref="T:Z0.IDynamicContractMessenger" />
            </summary>
            <typeparam name="T">The type of contract for which an implementation will be generated</typeparam>
            <param name="ImplementationName">The name of the implemented type</param>
            <returns></returns>
        
| T:Z0.IDynamicContract                             | 
            <summary>
            Defines contract for dynamic operation invocation
            </summary>
        
| M:Z0.IDynamicContract.InvokeFunction(System.Reflection.MethodInfo,System.Object[])| 
            <summary>
            Invokes a function that is identified by and accessed via a <see cref="T:System.Reflection.MethodInfo" />
            </summary>
            <param name="method">The contracting method</param>
            <param name="parameters">The method parameters</param>
            <returns></returns>
        
| M:Z0.IDynamicContract.InvokeAction(System.Reflection.MethodInfo,System.Object[])| 
            <summary>
            Invokes an action that is identified by and accessed via a <see cref="T:System.Reflection.MethodInfo" />
            </summary>
            <param name="method">The contracting method</param>
            <param name="parameters">The method parameters</param>
            <returns></returns>
        
| M:Z0.IDynamicContract.GetPropertyValue(System.Reflection.PropertyInfo)| 
            <summary>
            Retrieves the value of a property that is indentified by and accessed via a <see cref="T:System.Reflection.PropertyInfo" />
            </summary>
            <param name="property"></param>
            <returns></returns>
        
| M:Z0.IDynamicContract.SetPropertyValue(System.Reflection.PropertyInfo,System.Object)| 
            <summary>
            Sets the value of a property that is indentified by and accessed via a <see cref="T:System.Reflection.PropertyInfo" />
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        
| P:Z0.IDynamicContract.ImplementationName          | 
            <summary>
            The name given to identify a particular implementation
            </summary>
        
| T:Z0.IDynamicContractMessenger                    | 
            <summary>
            Defines communication channel between application code and dynamically generated IL
            </summary>
            <remarks>
            This interface is defined without overloaded methods or other aspects that would
            make IL interop more troublesome
            </remarks>
        
| M:Z0.IDynamicContractMessenger.InvokeFunction(System.Reflection.MethodBase)| 
            <summary>
            Sends a 0-argument function invocation through the channel
            </summary>
            <param name="method">The method to invoke</param>
            <returns></returns>
        
| M:Z0.IDynamicContractMessenger.InvokeFunctionWithParameters(System.Reflection.MethodBase,System.Object[])| 
            <summary>
            Sends an n-argument function invocation through the channel and returns the result
            </summary>
            <param name="method">The method to invoke</param>
            <returns></returns>
        
| M:Z0.IDynamicContractMessenger.InvokeAction(System.Reflection.MethodBase)| 
            <summary>
            Send a 0-argument action invocation through the channel
            </summary>
            <param name="method">The method to invoke</param>
        
| M:Z0.IDynamicContractMessenger.InvokeActionWithParameters(System.Reflection.MethodBase,System.Object[])| 
            <summary>
            Send an n-argument action invocation through the channel
            </summary>
            <param name="method">The method to invoke</param>
        
| M:Z0.IDynamicContractMessenger.GetPropertyValue(System.Reflection.MethodBase)| 
            <summary>
            Retrieves the value of a property through the channel
            </summary>
            <param name="getter">The get accessor</param>
            <returns></returns>
        
| M:Z0.IDynamicContractMessenger.SetPropertyValue(System.Reflection.MethodBase,System.Object[])| 
            <summary>
            Sets the vale of a property through the channel
            </summary>
            <param name="setter">The set accessor</param>
            <param name="value">The value to send</param>
        
| P:Z0.IDynamicContractMessenger.ImplementationName | 
            <summary>
            The name of the contract implementation
            </summary>
        
| M:Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N8,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 8-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="buffer">Identifies the target buffer</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N16,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 16-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="buffer">Identifies the target buffer</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N32,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 32-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="buffer">Identifies the target buffer</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N64,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 64-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="buffer">Identifies the target buffer</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N128,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 128-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="buffer">Identifies the target buffer</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N256,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 256-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="buffer">Identifies the target buffer</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.Dynop.EmitFixedFunc``2(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed unary function over the buffer
            </summary>
            <param name="dst">The target buffer</param>
            <param name="src">The executable source</param>
        
| M:Z0.Dynop.EmitFixedFunc``3(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed binary function over the buffer
            </summary>
            <param name="dst">The target buffer</param>
            <param name="src">The executable source</param>
        
| M:Z0.Dynop.EmitFixedFunc``4(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed binary function over the buffer
            </summary>
            <param name="dst">The target buffer</param>
            <param name="src">The executable source</param>
        
| M:Z0.Dynop.EmitFixedUnaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="src">The executable source</param>
            <typeparam name="F">The fixed operand type</typeparam>
        
| M:Z0.Dynop.EmitFixedBinaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads source into a token-identifed buffer and covers it with a fixed binary operator
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="src">The code to load</param>
            <typeparam name="F">The fixed operand type</typeparam>
        
| M:Z0.Dynop.EmitFixedTernaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
            </summary>
            <param name="dst">The target buffer</param>
            <param name="src">The executable source</param>
            <typeparam name="F">The fixed operand type</typeparam>
        
| M:Z0.Dynop.EmitUnaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable code into a token-identified buffer and covers it with a parametric unary operator
            </summary>
            <param name="buffer">The buffer hande</param>
            <param name="src">The code to load</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Dynop.EmitBinaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable code into a token-identified buffer and covers it with a parametric binary operator
            </summary>
            <param name="buffer">The buffer hande</param>
            <param name="src">The code to load</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Dynop.EmitTernaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable code into a token-identified buffer and covers it with a parametric ternary operator
            </summary>
            <param name="dst">The buffer hande</param>
            <param name="src">The code to load</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Dynop.EmitBinaryOp``1(System.Reflection.MethodInfo,System.Boolean)| 
            <summary>
            Creates a binary operator delegate from a conforming method that is optionally invoked via the Calli opcode
            </summary>
            <param name="src">The methodd that defines a binary operator</param>
            <typeparam name="T">The operand type</typeparam>
        
| T:Z0.Dynamics.BinaryOperator`1                    | 
            <summary>
            Represents a binary operator
            </summary>
            <typeparam name="F"></typeparam>
        
| T:Z0.Dynamics.ComparisonOperator`1                | 
            <summary>
            Represents a comparison operator
            </summary>
            <typeparam name="F"></typeparam>
        
| T:Z0.Dynamics.Junction                            | 
            <summary>
            Represents a logical connective where each constituent is a member predicate
            </summary>
        
| T:Z0.Dynamics.Operator`1                          | 
            <summary>
            Represents an operator
            </summary>
            <typeparam name="F">The operator type</typeparam>
        
| P:Z0.Dynamics.Operator`1.Name                     | 
            <summary>
            The name of the operator
            </summary>
        
| P:Z0.Dynamics.Operator`1.Symbol                   | 
            <summary>
            The symbol used to denote the opeator
            </summary>
        
| T:Z0.Dynamics.OperatorApplication`1               | 
            <summary>
            Represents the application of an operator to a set of operands
            </summary>
            <typeparam name="O"></typeparam>
        
| P:Z0.Dynamics.OperatorApplication`1.Operator      | 
            <summary>
            Specifies the operator
            </summary>
        
| P:Z0.Dynamics.OperatorApplication`1.Operands      | 
            <summary>
            Specivies the operands
            </summary>
        
| T:Z0.Dynamics.ConditionalActions                  | 
            <summary>
            Defines helper methods for working with LINQ expressions
            </summary>
        
| M:Z0.Dynamics.ConditionalActions.IsNullityOperator(System.Linq.Expressions.Expression)| 
            <summary>
            Tests whether an expression is a nullity operator
            </summary>
            <param name="x">The expression to examine</param>
        
| M:Z0.Dynamics.ConditionalActions.TryGetNullityOperator(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts a nullity operator if detected
            </summary>
            <param name="x">The source expression</param>
        
| M:Z0.Dynamics.ConditionalActions.TryGetComparisonOperator(System.Linq.Expressions.Expression)| 
            <summary>
            Extracts a comparison operator if detected
            </summary>
            <param name="x">The source expression</param>
        
| M:Z0.Dynamics.ConditionalActions.OnConjunction``1(``0,System.Action{``0})| 
            <summary>
            Invokes the supplied action if the expression is a conjunction and returns true in this case and otherwise false
            </summary>
            <param name="x">The source expression</param>
            <param name="a">The operation to conditionally invoke</param>
        
| M:Z0.Dynamics.ConditionalActions.OnComparisonOperator(System.Linq.Expressions.Expression,System.Action{Z0.Dynamics.IComparisonOperator})| 
            <summary>
            Invokes the supplied action if the expression is a comparision operator
            </summary>
            <param name="x">The source expression</param>
            <param name="a">The operation to conditionally invoke</param>
        
| M:Z0.Dynamics.ConditionalActions.OnNullityOperator(System.Linq.Expressions.Expression,System.Action{Z0.Dynamics.INullityOperator})| 
            <summary>
            Invokes the supplied action if the expression is a nullity operator and returns true in this case and otherwise false
            </summary>
            <param name="x">The source expression</param>
            <param name="a">The operation to conditionally invoke</param>
        
| M:Z0.Dynamics.ConditionalActions.OnDisjunction``1(``0,System.Action{``0})| 
            <summary>
            Invokes the supplied action if the expression is a disjunction and returns true in this case and otherwise false
            </summary>
            <param name="x">The source expression</param>
            <param name="a">The operation to conditionally invoke</param>
        
| M:Z0.Dynamics.ExpressionFactories.True``1         | 
            <summary>
            Creates an expression that defines a function that returns true
            </summary>
            <typeparam name="T"></typeparam>
        
| M:Z0.Dynamics.ExpressionFactories.False``1        | 
            <summary>
            Creates an expression that defines a function that returns false
            </summary>
            <typeparam name="T"></typeparam>
        
| M:Z0.Dynamics.ExpressionFactories.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})| 
            <summary>
            Creates an expression that defines a logical OR function
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
        
| M:Z0.Dynamics.ExpressionFactories.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})| 
            <summary>
            Creates an expression that defines a logical AND function
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <typeparam name="T"></typeparam>
        
| M:Z0.Dynamics.ExpressionFactories.Equal``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}})| 
            <summary>
            Creates an expression tha defines an equality comparison
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <typeparam name="T"></typeparam>
        
| T:Z0.Dynamics.MemberAssociation                   | 
            <summary>
            Defines a directed association between two value members
            </summary>
        
| P:Z0.Dynamics.MemberAssociation.SourceMember      | 
            <summary>
            The supplier member
            </summary>
        
| P:Z0.Dynamics.MemberAssociation.TargetMember      | 
            <summary>
            The client member
            </summary>
        
| T:Z0.Dynamics.MemberAssociation`2                 | 
            <summary>
            Defines a directed association between two value members defined by two respective types
            </summary>
            <typeparam name="X">The source type</typeparam>
            <typeparam name="Y">The target type</typeparam>
        
| T:Z0.Dynamics.MemberAssociations`2                | 
            <summary>
            Defines a collection of directed member associations
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.Dynamics.ExpressionModelFactory`1            | 
            <summary>
            Defines contract for functions that create models from LINQ expression trees
            </summary>
            <typeparam name="M">The type of model the function will produce</typeparam>
            <param name="X">The expression from which the model's structure will be derived</param>
        
| T:Z0.Dynamics.IOperatorApplication                | 
            <summary>
            Specifies the application of an n-ary operator to n operands
            </summary>
        
| P:Z0.Dynamics.IOperatorApplication.Operator       | 
            <summary>
            The opererator to apply
            </summary>
        
| P:Z0.Dynamics.IOperatorApplication.Operands       | 
            <summary>
            The operands
            </summary>
        
| T:Z0.Dynamics.Conjunction                         | 
            <summary>
            Represents a logical conjunction; i.e., the and conective that evaluates to true if and only if all of its operands are true
            </summary>
        
| T:Z0.Dynamics.Disjunction                         | 
            <summary>
            Represents a logical disjunction; i.e., the or conective that evaluates to true if and only if one or more of it's operands are true
            </summary>
        
| T:Z0.Dynamics.MemberPredicate`1                   | 
            <summary>
            Represents an operation that evaluates a member aspect and returns a boolean result
            </summary>
            <typeparam name="OP">The type of operator that when applied carries out the evaluation represented by the predicate</typeparam>
        
| T:Z0.Dynamics.MemberValuePredicate`1              | 
            <summary>
            Represents an operation that evaluates the value of a member and returns a boolean result
            </summary>
            <typeparam name="OP">The type of operator that when applied carries out the evaluation represented by the predicate</typeparam>
        
| T:Z0.Dynamics.SelectedMember                      | 
            <summary>
            Represents a member selection
            </summary>
        
| T:Z0.Dynamics.SelectionModel                      | 
            <summary>
            Defines a set of members together with the criteria used to determine a selected collection
            </summary>
        
| P:Z0.Dynamics.SelectionModel.SelectedMembers      | 
            <summary>
            The members that represent the columns to be selected
            </summary>
        
| P:Z0.Dynamics.SelectionModel.MemberOrder          | 
            <summary>
            Optional order-by specification
            </summary>
        
| P:Z0.Dynamics.SelectionModel.Junctions            | 
            <summary>
            A sequence of con/dis-junctions that will fitler the results set
            and effectively represents a WHERE clausee
            </summary>
        
| P:Z0.Dynamics.SelectionModel.Facets               | 
            <summary>
            Facets such as TOP and DISTINCT
            </summary>
        
| T:Z0.Dynamics.SelectMethod                        | 
            <summary>
            Identifies a select method
            </summary>
        
| T:Z0.Dynamics.StandardMethods                     | 
            <summary>
            Collects standard method classifications
            </summary>
        
| T:Z0.Dynamics.WhereMethod                         | 
            <summary>
            Identifies a where method
            </summary>
        
| T:Z0.Dynamics.AndOperator                         | 
            <summary>
            Represents the logical and operator
            </summary>
        
| T:Z0.Dynamics.EqualOperator                       | 
            <summary>
            Represents the equal operator
            </summary>
        
| P:Z0.Dynamics.Operators.Add`1.Exists              | 
            <summary>
            Specifies whether the operator exists for <typeparamref name="T" />
            </summary>
        
| P:Z0.Dynamics.Operators.Decrement`1.Exists        | 
            <summary>
            Specifies whether the operator exists for <typeparamref name="T" />
            </summary>
        
| P:Z0.Dynamics.Operators.GreaterThan`1.Exists      | 
            <summary>
            Specifies whether the operator exists for <typeparamref name="T" />
            </summary>
        
| P:Z0.Dynamics.Operators.Increment`1.Exists        | 
            <summary>
            Specifies whether the operator exists for <typeparamref name="T" />
            </summary>
        
| P:Z0.Dynamics.Operators.LessThan`1.Exists         | 
            <summary>
            Specifies whether the operator exists for <typeparamref name="T" />
            </summary>
        
| P:Z0.Dynamics.Operators.LessThanOrEqual`1.Exists  | 
            <summary>
            Specifies whether the operator exists for <typeparamref name="T" />
            </summary>
        
| M:Z0.Dynexus.UnaryInjector``1(Z0.W128)            | 
            <summary>
            Creates a 128-bit T-parametric unary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.Dynexus.UnaryInjector``1(Z0.W256)            | 
            <summary>
            Creates a 256-bit T-parametric unary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.Dynexus.BinaryInjector``1(Z0.W128)           | 
            <summary>
            Creates a 128-bit T-parametric binary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.Dynexus.BinaryInjector``1(Z0.W256)           | 
            <summary>
            Creates a 256-bit T-parametric binary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.IDynamicImmediate.CreateUnaryOp(Z0.TypeWidth,System.Reflection.MethodInfo,System.Byte)| 
            <summary>
            Creates a unary operator with an immedded immediate value
            </summary>
            <param name="w">The operand width</param>
            <param name="src">The defining method that requires an immediate value</param>
            <param name="imm">The immediate value to embed</param>
        
| M:Z0.IDynamicImmediate.CreateBinaryOp(Z0.TypeWidth,System.Reflection.MethodInfo,System.Byte)| 
            <summary>
            Creates a binary operator with an immedded immediate value
            </summary>
            <param name="w">The operand width</param>
            <param name="src">The defining method that requires an immediate value</param>
            <param name="imm">The immediate value to embed</param>
        
| M:Z0.IDynamicImmediate.UnaryInjector``1           | 
            <summary>
            Creates an immediate injector for unary operators with non-immediate operands of parametric width
            </summary>
            <typeparam name="W">The operand width</typeparam>
        
| M:Z0.IDynamicImmediate.BinaryInjector``1          | 
            <summary>
            Creates an immediate injector for binary operators with non-immediate operands of parametric width
            </summary>
            <typeparam name="W">The operand width</typeparam>
        
| M:Z0.IDynamicImmediate.UnaryInjector``1(Z0.W128)  | 
            <summary>
            Creates a 128-bit T-parametric unary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.IDynamicImmediate.UnaryInjector``1(Z0.W256)  | 
            <summary>
            Creates a 256-bit T-parametric unary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.IDynamicImmediate.BinaryInjector``1(Z0.W128) | 
            <summary>
            Creates a 128-bit T-parametric binary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.IDynamicImmediate.BinaryInjector``1(Z0.W256) | 
            <summary>
            Creates a 256-bit T-parametric binary immediate injector
            </summary>
            <param name="w">The vector operand width</param>
            <param name="k">The operator kind</param>
            <typeparam name="T">The vector cell type</typeparam>
        
| M:Z0.IDynamicImmediate.CreateUnaryOp``1(System.Reflection.MethodInfo,Z0.W128,System.Byte)| 
            <summary>
            Creates a 128-bit vectorized parametric unary operator that consumes an immediate value in the second argument
            </summary>
            <param name="src">The defining method</param>
            <param name="imm">The immediate value to embed</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.IDynamicImmediate.CreateBinaryOp``1(System.Reflection.MethodInfo,Z0.W128,System.Byte)| 
            <summary>
            Creates a parametric 128-bit vectorized binary operator that adapts a like-kinded operator that consumes an immediate value in the third argument
            </summary>
            <param name="src">The defining method</param>
            <param name="imm">The immediate value to embed</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.IDynamicImmediate.CreateUnaryOp``1(System.Reflection.MethodInfo,Z0.W256,System.Byte)| 
            <summary>
            Creates a parametric 128-bit vectorized unary operator that adapts a like-kinded operator that consumes an immediate value in the second argument
            </summary>
            <param name="src">The defining method</param>
            <param name="imm">The immediate value to embed</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.IDynamicImmediate.CreateBinaryOp``1(System.Reflection.MethodInfo,Z0.W256,System.Byte)| 
            <summary>
            Creates a parametric 256-bit vectorized binary operator that adapts a like-kinded operator that consumes an immediate value in the third argument
            </summary>
            <param name="src">The defining method</param>
            <param name="imm">The immediate value to embed</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.IFixedDynamic.EmitFixedUnary``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="src">The executable source</param>
            <typeparam name="F">The fixed operand type</typeparam>
        
| M:Z0.IFixedDynamic.EmitFixedBinary``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads source into a token-identifed buffer and covers it with a fixed binary operator
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="src">The code to load</param>
            <typeparam name="F">The fixed operand type</typeparam>
        
| M:Z0.IFixedDynamic.EmitFixedTernary``1(Z0.IBufferToken,Z0.IdentifiedCode)| 
            <summary>
            Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
            </summary>
            <param name="dst">The target buffer</param>
            <param name="src">The executable source</param>
            <typeparam name="F">The fixed operand type</typeparam>
        
| M:Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W8,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 8-bit unary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W16,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 16-bit unary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W32,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 32-bit unary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W64,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 64-bit unary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W128,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 128-bit unary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W256,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 256-bit unary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W8,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 8-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W16,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 16-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W32,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 32-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W64,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 64-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W128,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 128-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| M:Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W256,Z0.IdentifiedCode)| 
            <summary>
            Creates a fixed 256-bit binary operator from caller-supplied x86 source code
            </summary>
            <param name="dst">The target buffer sequence</param>
            <param name="index">The index of the buffer to load</param>
            <param name="w">The width selector</param>
            <param name="src">The source code</param>
        
| T:Z0.StructuredField                              | 
            <summary>
            Characterizes a field in a record
            </summary>
        
| M:Z0.StructureEmit.CreateType(Z0.StructureSpec)   | 
            <summary>
            Manufactures the type that reifies a supplied record definition
            </summary>
            <param name="spec">The record definition</param>
        
| M:Z0.StructureEmit.CreateTypes(Z0.StructureSpec[])| 
            <summary>
            Manufactures the types that reifies supplied record definitions
            </summary>
            <param name="spec">The record definition</param>
        
