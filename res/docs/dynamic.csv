Method      | Z0.ITestNumericMatch.MatchNumeric``1(System.String,Z0.UnaryOp{``0},Z0.UnaryOp{``0})| Evaluates a pair of unary operators and asserts their equality over a random sequence
Method      | Z0.ITestNumericMatch.MatchNumeric``1(System.String,Z0.BinaryOp{``0},Z0.BinaryOp{``0})| Evaluates a pair of binary operators and asserts their equality over a random sequence
Type        | Z0.DelegatedContract                                                  | A primary implementation of the <see cref="T:Z0.IDynamicContractMessenger" /> contract            that delgates contract implementation through a supplied <see cref="T:Z0.DelegateIndex" />
Method      | Z0.DelegatedContract.Realize``1(System.String,Z0.DelegateIndex)       | Realizes implementation of a contract by mediating access to a <see cref="T:Z0.DelegateIndex" />
Type        | Z0.DelegateIndex                                                      | Indexes a collection of delegates that (potentially) specify a <see cref="T:Z0.IDynamicContractMessenger" /> realization
Method      | Z0.DelegateIndex.Getter``1(System.String,System.Func{``0})            | Indexes a property get method
Method      | Z0.DelegateIndex.Getter(System.String)                                | Retrieves a property get method
Method      | Z0.DelegateIndex.Setter``1(System.String,System.Action{``0})          | Specifies a property setter
Method      | Z0.DelegateIndex.Setter(System.String)                                | Retrieves named property set method
Method      | Z0.DelegateIndex.Function(System.String,System.Delegate)              | Specifies a function delegate
Method      | Z0.DelegateIndex.Action(System.String,System.Delegate)                | Specifies an action delegate
Method      | Z0.DelegateIndex.Action(System.String)                                | Retrieves an action delegate
Method      | Z0.DelegateIndex.Function(System.String)                              | Retrieves a function delegate
Type        | Z0.DelegateIndexBuilder`1                                             | Implementation of a builder pattern that constructs <see cref="T:Z0.DelegateIndex" /> instances            based on supplied expressions and upon completion emits an implementation of the specified             contract type, returning an instance to this implementation to the caller
Method      | Z0.DelegateIndexBuilder`1.type_array``1                               | Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
Method      | Z0.DelegateIndexBuilder`1.type_array``2                               | Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
Method      | Z0.DelegateIndexBuilder`1.type_array``3                               | Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
Method      | Z0.DelegateIndexBuilder`1.type_array``4                               | Creates an array of <see cref="T:System.Type" /> references from the supplied type parameters
Method      | Z0.DelegateIndexBuilder`1.Realize                                     | Emits the implementation defined by the builder and returns an intance of this implementation            to the caller
Type        | Z0.DynamicContract                                                    | Provides access to high-level dynamic contract capabilities
Method      | Z0.DynamicContract.Realize``1(Z0.IDynamicContractMessenger)           | Realizes implementation of a user-defined contract by delegating through a <see cref="T:Z0.IDynamicContractMessenger" /> implementation
Method      | Z0.DynamicContract.Realize``1(Z0.IDynamicContract)                    | Realizes implementation of an interface contract via an instance of the <see cref="T:Z0.DynamicContractHost`1" /> type
Type        | Z0.DynamicContractImplementor                                         | Generates an implementation of a specified interface type that delegates to an implementation            of <see cref="T:Z0.IDynamicContractMessenger" />
Method      | Z0.DynamicContractImplementor.ImplementContract``1(System.String)     | Generates implementation of an interface contract that delegates to <see cref="T:Z0.IDynamicContractMessenger" />
Type        | Z0.IDynamicContract                                                   | Defines contract for dynamic operation invocation
Method      | Z0.IDynamicContract.InvokeFunction(System.Reflection.MethodInfo,System.Object[])| Invokes a function that is identified by and accessed via a <see cref="T:System.Reflection.MethodInfo" />
Method      | Z0.IDynamicContract.InvokeAction(System.Reflection.MethodInfo,System.Object[])| Invokes an action that is identified by and accessed via a <see cref="T:System.Reflection.MethodInfo" />
Method      | Z0.IDynamicContract.GetPropertyValue(System.Reflection.PropertyInfo)  | Retrieves the value of a property that is indentified by and accessed via a <see cref="T:System.Reflection.PropertyInfo" />
Method      | Z0.IDynamicContract.SetPropertyValue(System.Reflection.PropertyInfo,System.Object)| Sets the value of a property that is indentified by and accessed via a <see cref="T:System.Reflection.PropertyInfo" />
Property    | Z0.IDynamicContract.ImplementationName                                | The name given to identify a particular implementation
Type        | Z0.IDynamicContractMessenger                                          | Defines communication channel between application code and dynamically generated IL
Method      | Z0.IDynamicContractMessenger.InvokeFunction(System.Reflection.MethodBase)| Sends a 0-argument function invocation through the channel
Method      | Z0.IDynamicContractMessenger.InvokeFunctionWithParameters(System.Reflection.MethodBase,System.Object[])| Sends an n-argument function invocation through the channel and returns the result
Method      | Z0.IDynamicContractMessenger.InvokeAction(System.Reflection.MethodBase)| Send a 0-argument action invocation through the channel
Method      | Z0.IDynamicContractMessenger.InvokeActionWithParameters(System.Reflection.MethodBase,System.Object[])| Send an n-argument action invocation through the channel
Method      | Z0.IDynamicContractMessenger.GetPropertyValue(System.Reflection.MethodBase)| Retrieves the value of a property through the channel
Method      | Z0.IDynamicContractMessenger.SetPropertyValue(System.Reflection.MethodBase,System.Object[])| Sets the vale of a property through the channel
Property    | Z0.IDynamicContractMessenger.ImplementationName                       | The name of the contract implementation
Method      | Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N8,Z0.IdentifiedCode)   | Creates a fixed 8-bit binary operator from caller-supplied x86 source code
Method      | Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N16,Z0.IdentifiedCode)  | Creates a fixed 16-bit binary operator from caller-supplied x86 source code
Method      | Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N32,Z0.IdentifiedCode)  | Creates a fixed 32-bit binary operator from caller-supplied x86 source code
Method      | Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N64,Z0.IdentifiedCode)  | Creates a fixed 64-bit binary operator from caller-supplied x86 source code
Method      | Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N128,Z0.IdentifiedCode) | Creates a fixed 128-bit binary operator from caller-supplied x86 source code
Method      | Z0.Dynop.EmitFixedBinaryOp(Z0.IBufferToken,Z0.N256,Z0.IdentifiedCode) | Creates a fixed 256-bit binary operator from caller-supplied x86 source code
Method      | Z0.Dynop.EmitFixedFunc``2(Z0.IBufferToken,Z0.IdentifiedCode)          | Loads executable source into an identified buffer and creates a fixed unary function over the buffer
Method      | Z0.Dynop.EmitFixedFunc``3(Z0.IBufferToken,Z0.IdentifiedCode)          | Loads executable source into an identified buffer and creates a fixed binary function over the buffer
Method      | Z0.Dynop.EmitFixedFunc``4(Z0.IBufferToken,Z0.IdentifiedCode)          | Loads executable source into an identified buffer and creates a fixed binary function over the buffer
Method      | Z0.Dynop.EmitFixedUnaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)       | Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
Method      | Z0.Dynop.EmitFixedBinaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)      | Loads source into a token-identifed buffer and covers it with a fixed binary operator
Method      | Z0.Dynop.EmitFixedTernaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)     | Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
Method      | Z0.Dynop.EmitUnaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)            | Loads executable code into a token-identified buffer and covers it with a parametric unary operator
Method      | Z0.Dynop.EmitBinaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)           | Loads executable code into a token-identified buffer and covers it with a parametric binary operator
Method      | Z0.Dynop.EmitTernaryOp``1(Z0.IBufferToken,Z0.IdentifiedCode)          | Loads executable code into a token-identified buffer and covers it with a parametric ternary operator
Method      | Z0.Dynop.EmitBinaryOp``1(System.Reflection.MethodInfo,System.Boolean) | Creates a binary operator delegate from a conforming method that is optionally invoked via the Calli opcode
Type        | Z0.Dynamics.BinaryOperator`1                                          | Represents a binary operator
Type        | Z0.Dynamics.ComparisonOperator`1                                      | Represents a comparison operator
Type        | Z0.Dynamics.Junction                                                  | Represents a logical connective where each constituent is a member predicate
Type        | Z0.Dynamics.Operator`1                                                | Represents an operator
Property    | Z0.Dynamics.Operator`1.Name                                           | The name of the operator
Property    | Z0.Dynamics.Operator`1.Symbol                                         | The symbol used to denote the opeator
Type        | Z0.Dynamics.OperatorApplication`1                                     | Represents the application of an operator to a set of operands
Property    | Z0.Dynamics.OperatorApplication`1.Operator                            | Specifies the operator
Property    | Z0.Dynamics.OperatorApplication`1.Operands                            | Specivies the operands
Type        | Z0.Dynamics.ConditionalActions                                        | Defines helper methods for working with LINQ expressions
Method      | Z0.Dynamics.ConditionalActions.IsNullityOperator(System.Linq.Expressions.Expression)| Tests whether an expression is a nullity operator
Method      | Z0.Dynamics.ConditionalActions.TryGetNullityOperator(System.Linq.Expressions.Expression)| Extracts a nullity operator if detected
Method      | Z0.Dynamics.ConditionalActions.TryGetComparisonOperator(System.Linq.Expressions.Expression)| Extracts a comparison operator if detected
Method      | Z0.Dynamics.ConditionalActions.OnConjunction``1(``0,System.Action{``0})| Invokes the supplied action if the expression is a conjunction and returns true in this case and otherwise false
Method      | Z0.Dynamics.ConditionalActions.OnComparisonOperator(System.Linq.Expressions.Expression,System.Action{Z0.Dynamics.IComparisonOperator})| Invokes the supplied action if the expression is a comparision operator
Method      | Z0.Dynamics.ConditionalActions.OnNullityOperator(System.Linq.Expressions.Expression,System.Action{Z0.Dynamics.INullityOperator})| Invokes the supplied action if the expression is a nullity operator and returns true in this case and otherwise false
Method      | Z0.Dynamics.ConditionalActions.OnDisjunction``1(``0,System.Action{``0})| Invokes the supplied action if the expression is a disjunction and returns true in this case and otherwise false
Method      | Z0.Dynamics.ExpressionFactories.True``1                               | Creates an expression that defines a function that returns true
Method      | Z0.Dynamics.ExpressionFactories.False``1                              | Creates an expression that defines a function that returns false
Method      | Z0.Dynamics.ExpressionFactories.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})| Creates an expression that defines a logical OR function
Method      | Z0.Dynamics.ExpressionFactories.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})| Creates an expression that defines a logical AND function
Method      | Z0.Dynamics.ExpressionFactories.Equal``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}})| Creates an expression tha defines an equality comparison
Type        | Z0.Dynamics.MemberAssociation                                         | Defines a directed association between two value members
Property    | Z0.Dynamics.MemberAssociation.SourceMember                            | The supplier member
Property    | Z0.Dynamics.MemberAssociation.TargetMember                            | The client member
Type        | Z0.Dynamics.MemberAssociation`2                                       | Defines a directed association between two value members defined by two respective types
Type        | Z0.Dynamics.MemberAssociations`2                                      | Defines a collection of directed member associations
Type        | Z0.Dynamics.ExpressionModelFactory`1                                  | Defines contract for functions that create models from LINQ expression trees
Type        | Z0.Dynamics.IOperatorApplication                                      | Specifies the application of an n-ary operator to n operands
Property    | Z0.Dynamics.IOperatorApplication.Operator                             | The opererator to apply
Property    | Z0.Dynamics.IOperatorApplication.Operands                             | The operands
Type        | Z0.Dynamics.Conjunction                                               | Represents a logical conjunction; i.e., the and conective that evaluates to true if and only if all of its operands are true
Type        | Z0.Dynamics.Disjunction                                               | Represents a logical disjunction; i.e., the or conective that evaluates to true if and only if one or more of it's operands are true
Type        | Z0.Dynamics.MemberPredicate`1                                         | Represents an operation that evaluates a member aspect and returns a boolean result
Type        | Z0.Dynamics.MemberValuePredicate`1                                    | Represents an operation that evaluates the value of a member and returns a boolean result
Type        | Z0.Dynamics.SelectedMember                                            | Represents a member selection
Type        | Z0.Dynamics.SelectionModel                                            | Defines a set of members together with the criteria used to determine a selected collection
Property    | Z0.Dynamics.SelectionModel.SelectedMembers                            | The members that represent the columns to be selected
Property    | Z0.Dynamics.SelectionModel.MemberOrder                                | Optional order-by specification
Property    | Z0.Dynamics.SelectionModel.Junctions                                  | A sequence of con/dis-junctions that will fitler the results set            and effectively represents a WHERE clausee
Property    | Z0.Dynamics.SelectionModel.Facets                                     | Facets such as TOP and DISTINCT
Type        | Z0.Dynamics.SelectMethod                                              | Identifies a select method
Type        | Z0.Dynamics.StandardMethods                                           | Collects standard method classifications
Type        | Z0.Dynamics.WhereMethod                                               | Identifies a where method
Type        | Z0.Dynamics.AndOperator                                               | Represents the logical and operator
Type        | Z0.Dynamics.EqualOperator                                             | Represents the equal operator
Property    | Z0.Dynamics.Operators.Add`1.Exists                                    | Specifies whether the operator exists for <typeparamref name="T" />
Property    | Z0.Dynamics.Operators.Decrement`1.Exists                              | Specifies whether the operator exists for <typeparamref name="T" />
Property    | Z0.Dynamics.Operators.GreaterThan`1.Exists                            | Specifies whether the operator exists for <typeparamref name="T" />
Property    | Z0.Dynamics.Operators.Increment`1.Exists                              | Specifies whether the operator exists for <typeparamref name="T" />
Property    | Z0.Dynamics.Operators.LessThan`1.Exists                               | Specifies whether the operator exists for <typeparamref name="T" />
Property    | Z0.Dynamics.Operators.LessThanOrEqual`1.Exists                        | Specifies whether the operator exists for <typeparamref name="T" />
Method      | Z0.Dynexus.UnaryInjector``1(Z0.W128)                                  | Creates a 128-bit T-parametric unary immediate injector
Method      | Z0.Dynexus.UnaryInjector``1(Z0.W256)                                  | Creates a 256-bit T-parametric unary immediate injector
Method      | Z0.Dynexus.BinaryInjector``1(Z0.W128)                                 | Creates a 128-bit T-parametric binary immediate injector
Method      | Z0.Dynexus.BinaryInjector``1(Z0.W256)                                 | Creates a 256-bit T-parametric binary immediate injector
Method      | Z0.IDynamicImmediate.CreateUnaryOp(Z0.TypeWidth,System.Reflection.MethodInfo,System.Byte)| Creates a unary operator with an immedded immediate value
Method      | Z0.IDynamicImmediate.CreateBinaryOp(Z0.TypeWidth,System.Reflection.MethodInfo,System.Byte)| Creates a binary operator with an immedded immediate value
Method      | Z0.IDynamicImmediate.UnaryInjector``1                                 | Creates an immediate injector for unary operators with non-immediate operands of parametric width
Method      | Z0.IDynamicImmediate.BinaryInjector``1                                | Creates an immediate injector for binary operators with non-immediate operands of parametric width
Method      | Z0.IDynamicImmediate.UnaryInjector``1(Z0.W128)                        | Creates a 128-bit T-parametric unary immediate injector
Method      | Z0.IDynamicImmediate.UnaryInjector``1(Z0.W256)                        | Creates a 256-bit T-parametric unary immediate injector
Method      | Z0.IDynamicImmediate.BinaryInjector``1(Z0.W128)                       | Creates a 128-bit T-parametric binary immediate injector
Method      | Z0.IDynamicImmediate.BinaryInjector``1(Z0.W256)                       | Creates a 256-bit T-parametric binary immediate injector
Method      | Z0.IDynamicImmediate.CreateUnaryOp``1(System.Reflection.MethodInfo,Z0.W128,System.Byte)| Creates a 128-bit vectorized parametric unary operator that consumes an immediate value in the second argument
Method      | Z0.IDynamicImmediate.CreateBinaryOp``1(System.Reflection.MethodInfo,Z0.W128,System.Byte)| Creates a parametric 128-bit vectorized binary operator that adapts a like-kinded operator that consumes an immediate value in the third argument
Method      | Z0.IDynamicImmediate.CreateUnaryOp``1(System.Reflection.MethodInfo,Z0.W256,System.Byte)| Creates a parametric 128-bit vectorized unary operator that adapts a like-kinded operator that consumes an immediate value in the second argument
Method      | Z0.IDynamicImmediate.CreateBinaryOp``1(System.Reflection.MethodInfo,Z0.W256,System.Byte)| Creates a parametric 256-bit vectorized binary operator that adapts a like-kinded operator that consumes an immediate value in the third argument
Method      | Z0.IFixedDynamic.EmitFixedUnary``1(Z0.IBufferToken,Z0.IdentifiedCode) | Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
Method      | Z0.IFixedDynamic.EmitFixedBinary``1(Z0.IBufferToken,Z0.IdentifiedCode)| Loads source into a token-identifed buffer and covers it with a fixed binary operator
Method      | Z0.IFixedDynamic.EmitFixedTernary``1(Z0.IBufferToken,Z0.IdentifiedCode)| Loads executable source into an identified buffer and creates a fixed unary operator over the buffer
Method      | Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W8,Z0.IdentifiedCode)| Creates a fixed 8-bit unary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W16,Z0.IdentifiedCode)| Creates a fixed 16-bit unary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W32,Z0.IdentifiedCode)| Creates a fixed 32-bit unary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W64,Z0.IdentifiedCode)| Creates a fixed 64-bit unary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W128,Z0.IdentifiedCode)| Creates a fixed 128-bit unary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedUnary(Z0.IBufferToken,Z0.W256,Z0.IdentifiedCode)| Creates a fixed 256-bit unary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W8,Z0.IdentifiedCode)| Creates a fixed 8-bit binary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W16,Z0.IdentifiedCode)| Creates a fixed 16-bit binary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W32,Z0.IdentifiedCode)| Creates a fixed 32-bit binary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W64,Z0.IdentifiedCode)| Creates a fixed 64-bit binary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W128,Z0.IdentifiedCode)| Creates a fixed 128-bit binary operator from caller-supplied x86 source code
Method      | Z0.IFixedDynamic.EmitFixedBinary(Z0.IBufferToken,Z0.W256,Z0.IdentifiedCode)| Creates a fixed 256-bit binary operator from caller-supplied x86 source code
Type        | Z0.StructuredField                                                    | Characterizes a field in a record
Method      | Z0.StructureEmit.CreateType(Z0.StructureSpec)                         | Manufactures the type that reifies a supplied record definition
Method      | Z0.StructureEmit.CreateTypes(Z0.StructureSpec[])                      | Manufactures the types that reifies supplied record definitions
