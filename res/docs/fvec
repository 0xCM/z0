| T:Z0.dinxfp                                       | 
            <summary>
            Direct vectorized intrinsics over floating-point domains
            </summary>
        
| M:Z0.dinxfp.vadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_add_ps (__m128 a, __m128 b)ADDPS xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_add_pd (__m128d a, __m128d b)ADDPD xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_add_ps (__m256 a, __m256 b)VADDPS ymm, ymm, ymm/m256
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_add_pd (__m256d a, __m256d b)VADDPD ymm, ymm, ymm/m256
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128d _mm_ceil_sd (__m128d a) ROUNDSD xmm, xmm/m128, imm8(10) 
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_ceil_pd (__m128d a) ROUNDPD xmm, xmm/m128, imm8(10)
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_ceil_ps (__m256 a) VROUNDPS ymm, ymm/m256, imm8(10)
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.ceil(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256 _mm256_ceil_pd (__m256 a) VROUNDPS ymm, ymm/m256, imm8(10)
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_div_ps (__m128 a, __m128 b)DIVPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             __m128d _mm_div_pd (__m128d a, __m128d b)DIVPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_div_ps (__m256 a, __m256 b)VDIVPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vdiv(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_div_pd (__m256d a, __m256d b)VDIVPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vdot(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Nullable{System.Byte})| 
            <summary>
            __m128 _mm_dp_ps (__m128 a, __m128 b, const int imm8) DPPS xmm, xmm/m128, imm8
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vdot(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Nullable{System.Byte})| 
            <summary>
            __m128d _mm_dp_pd (__m128d a, __m128d b, const int imm8) DPPD xmm, xmm/m128, imm8
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vdot(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Nullable{System.Byte})| 
            <summary>
            __m256 _mm256_dp_ps (__m256 a, __m256 b, const int imm8) VDPPS ymm, ymm, ymm/m256,
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_floor_ps (__m128 a) ROUNDPS xmm, xmm/m128, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128 _mm_floor_ps (__m128 a) ROUNDPS xmm, xmm/m128, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_floor_ps (__m256 a) VROUNDPS ymm, ymm/m256, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vfloor(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
             __m256d _mm256_floor_pd (__m256d a) VROUNDPS ymm, ymm/m256, imm8(9)
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_fnmadd_ps (__m128 a, __m128 b, __m128 c) VFNMADDPS xmm, xmm, xmm/m128
            dst = -(x*y + c)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_fnmadd_pd (__m128d a, __m128d b, __m128d c) VFNMADDPD xmm, xmm, xmm/m128
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c) VFMADDSUBPS xmm, xmm, xmm/m128
            dst = x*y - z
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c) VFMADDSUBPD xmm, xmm, xmm/m128
            dst[i] = x[i]*y[i] + z (i is even?)
            dst[i] = x[i]*y[i] - z (i is odd?)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_fnmadd_ps (__m256 a, __m256 b, __m256 c) VFNMADDPS ymm, ymm, ymm/m256
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfnmadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_fnmadd_pd (__m256d a, __m256d b, __m256d c) VFNMADDPD ymm, ymm,ymm/m256
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c) VFMADDSUBPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vfmaddsub(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c) VFMADDSUBPD ymm, ymm, ymm/m256
            dst[i] = x[i]*y[i] + z (i is even?)
            dst[i] = x[i]*y[i] - z (i is odd?)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            dst = x*y + z
            __m128 _mm_fmadd_ps (__m128 a, __m128 b, __m128 c) VFMADDPS xmm, xmm, xmm/m128
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            dst = x*y + z
             __m128d _mm_fmadd_pd (__m128d a, __m128d b, __m128d c) VFMADDPD xmm, xmm, xmm/m128
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_fmadd_ps (__m256 a, __m256 b, __m256 c) VFMADDPS ymm, ymm, ymm/m256
            dst = a*b + c
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.fmadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_fmadd_pd (__m256d a, __m256d b, __m256d c) VFMADDPS ymm, ymm, ymm/m256
            dst = a*b + c
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_hadd_ps (__m128 a, __m128 b) HADDPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             __m128d _mm_hadd_pd (__m128d a, __m128d b) HADDPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_hadd_ps (__m256 a, __m256 b) VHADDPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhadd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_hadd_pd (__m256d a, __m256d b) VHADDPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_hsub_ps (__m128 a, __m128 b) HSUBPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_hsub_pd (__m128d a, __m128d b) HSUBPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_hsub_ps (__m256 a, __m256 b) VHSUBPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vhsub(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_hsub_pd (__m256d a, __m256d b) VHSUBPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_mul_ps (__m128 a, __m128 b) MULPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_mul_pd (__m128d a, __m128d b) MULPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_mul_ps (__m256 a, __m256 b) VMULPS ymm, ymm, ymm/m256
            Multiplies corresponding components and returns the result
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmul(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_mul_pd (__m256d a, __m256d b) VMULPD ymm, ymm, ymm/m256
            Multiplies corresponding components and returns the result
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vnegate(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            Negates each source vector component
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.rcp(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_rcp_ps (__m128 a) RCPPS xmm, xmm/m128
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.rcp(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_rcp_ps (__m256 a) VRCPPS ymm, ymm/m256
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            _mm_round_ps:
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            _mm_round_pd:
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            _mm_round_ss:
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            _mm_round_sd:
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            _mm256_round_ps:
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vround(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(8)
            Round to nearest integer
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)VROUNDPS ymm, ymm/m256, imm8(11)
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.vroundz(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(11)
            Round towards zero
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_sqrt_ps (__m128 a) SQRTPS xmm, xmm/m128
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_sqrt_pd (__m128d a) SQRTPD xmm, xmm/m128
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_sqrt_ps (__m256 a) VSQRTPS ymm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.sqrt(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_sqrt_pd (__m256d a) VSQRTPD ymm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.rsqrt(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_rsqrt_ps (__m128 a) RSQRTPS xmm, xmm/m128
            </summary>
            <param name="src"></param>
        
| M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128d _mm_sub_ps (__m128d a, __m128d b) SUBPS xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_sub_pd (__m128d a, __m128d b) SUBPD xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_sub_ps (__m256 a, __m256 b) VSUBPS ymm, ymm, ymm/m256
            Subtracts the right vector from the left
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vsub(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_sub_pd (__m256d a, __m256d b) VSUBPD ymm, ymm, ymm/m256
            Subtracts the right vector from the left
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vblend(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)| 
            <summary>
            __m128 _mm_blend_ps (__m128 a, __m128 b, const int imm8) BLENDPS xmm, xmm/m128, imm8
            Produces a new vector by assembling components from two source vectors as dermined by a mask
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)| 
            <summary>
            __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8
            Produces a new vector by assembling components from two source vectors as dermined by a mask
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)| 
            <summary>
            __m256 _mm256_blend_ps (__m256 a, __m256 b, const int imm8) VBLENDPS ymm, ymm, ymm/m256, imm8
            Produces a new vector by assembling components from two source vectors as dermined by a mask
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| 
            <summary>
            __m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8
            Produces a new vector by assembling components from two source vectors as dermined by a mask
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblendv(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
             __m256 _mm256_blendv_ps (__m256 a, __m256 b, __m256 mask) VBLENDVPS ymm, ymm,ymm/m256, ymm
            Produces a new vector by assembling components from two source vectors as specified by a spec vector
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblendv(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            _mm256_blendv_ps
            Produces a new vector by assembling components from two source vectors as specified by a spec vector
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend4x32(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_blendv_ps (__m128 a, __m128 b, __m128 mask) BLENDVPS xmm, xmm/m128,xmm0
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend2x64(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_blendv_pd (__m128d a, __m128d b, __m128d mask) BLENDVPD xmm, xmm/m128,xmm0
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_blendv_ps (__m256 a, __m256 b, __m256 mask) VBLENDVPS ymm, ymm, ymm/m256, ymm
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend4x64(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256 _mm256_blendv_ps (__m256 a, __m256 b, __m256 mask) VBLENDVPS ymm, ymm, ymm/m256, ymm
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vblend(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},Z0.Blend2x64)| 
            <summary>
            __m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8)BLENDPD xmm, xmm/m128, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The blend specification</param>
        
| M:Z0.dinxfp.vbroadcast(Z0.N256,System.Single)     | 
            <summary>
            __m256 _mm256_broadcast_ss (float const * mem_addr) VBROADCASTSS ymm, m32
            </summary>
            <param name="n">The bitsize selector</param>
            <param name="dst">The value to broadcast</param>
        
| M:Z0.dinxfp.vbroadcast(Z0.N256,System.Double)     | 
            <summary>
            __m256d _mm256_broadcast_sd (double const * mem_addr) VBROADCASTSD ymm, m64
            </summary>
            <param name="n">The bitsize selector</param>
            <param name="dst">The value to broadcast</param>
        
| M:Z0.dinxfp.vbroadcast(Z0.N128,System.Single)     | 
            <summary>
            __m128 _mm_broadcast_ss (float const * mem_addr) VBROADCASTSS xmm, m32
            </summary>
            <param name="n">The bitsize selector</param>
            <param name="dst">The value to broadcast</param>
        
| M:Z0.dinxfp.vdup32(Z0.N0,System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_moveldup_ps (__m256 a) VMOVSLDUP ymm, ymm/m256
            </summary>
            <param name="even"></param>
            <param name="src"></param>
        
| M:Z0.dinxfp.vdup32(Z0.N1,System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_movehdup_ps (__m256 a) VMOVSHDUP ymm, ymm/m256
            </summary>
            <param name="odd"></param>
            <param name="src"></param>
        
| M:Z0.dinxfp.vdup64(Z0.N0,System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_movedup_pd (__m256d a) VMOVDDUP ymm, ymm/m256
            </summary>
            <param name="even"></param>
            <param name="src"></param>
        
| M:Z0.dinxfp.vextract(System.Runtime.Intrinsics.Vector128{System.Single},Z0.Hex2)| 
            <summary>
            int _mm_extract_ps (__m128 a, const int imm8)EXTRACTPS xmm, xmm/m32, imm8
            Extracts the value of an identified source vector component
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The zero-based index of the source component to extract</param>
        
| M:Z0.dinxfp.vextract(System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)| 
            <summary>
            __m128 _mm256_extractf128_ps (__m256 a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8
            Extracts either the lo (pos = 0) or hi (pos = 1) 128-bit lane of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The index of the lane to extract</param>
        
| M:Z0.dinxfp.vextract(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| 
            <summary>
            __m128d _mm256_extractf128_pd (__m256d a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8
            Extracts either the lo (pos = 0) or hi (pos = 1) 128-bit lane of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The index of the lane to extract</param>
        
| M:Z0.dinxfp.vxscalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)| 
            <summary>
            Extracts the value of an identified source vector component
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The zero-based index of the source component to extract</param>
        
| M:Z0.dinxfp.vxscalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)| 
            <summary>
            Extracts the value of an identified source vector component
            </summary>
            <param name="src">The source vector</param>
            <param name="pos">The zero-based index of the source component to extract</param>
        
| M:Z0.dinxfp.vhi(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            Creates a scalar vector from the upper 64 bits of the source vector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.vhi(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            Creates a scalar vector from the upper 64 bits of the source vector
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.vinsert(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)| 
            <summary>
            _mm256_insertf128_ps: Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.dinxfp.vinsert(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| 
            <summary>
            _mm256_insertf128_pd: Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.dinxfp.vmaskload(System.Single@,System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_maskload_ps (float const * mem_addr, __m128i mask) VMASKMOVPS xmm,xmm, m128
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        
| M:Z0.dinxfp.vmaskload(System.Double@,System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128 _mm_maskload_ps (float const * mem_addr, __m128i mask) VMASKMOVPS xmm,xmm, m128
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        
| M:Z0.dinxfp.vmaskload(System.Single@,System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask) VMASKMOVPD ymm, ymm, m256
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        
| M:Z0.dinxfp.vmaskload(System.Double@,System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask) VMASKMOVPD ymm, ymm, m256
            </summary>
            <param name="src">The memory source</param>
            <param name="mask">Hi bit on selects the memory, otherwise set to zero</param>
        
| M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Single@)| 
            <summary>
            void _mm_maskstore_ps (float * mem_addr, __m128i mask, __m128 a) VMASKMOVPS m128, xmm, xmm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        
| M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Double@)| 
            <summary>
            void _mm_maskstore_pd (double * mem_addr, __m128i mask, __m128d a) VMASKMOVPD m128, xmm, xmm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        
| M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Single@)| 
            <summary>
            void _mm256_maskstore_ps (float * mem_addr, __m256i mask, __m256 a) VMASKMOVPS m256, ymm, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        
| M:Z0.dinxfp.maskstore(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Double@)| 
            <summary>
            void _mm256_maskstore_pd (double * mem_addr, __m256i mask, __m256d a) VMASKMOVPD m256, ymm, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="mask">The mask</param>
            <param name="dst">The memory reference</param>
        
| M:Z0.dinxfp.vmovescalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_move_ss (__m128 a, __m128 b) MOVSS xmm, xmm
            z[0] = y[0]
            z[1] = x[1]
            z[2] = x[2]
            z[3] = x[3]
            </summary>
        
| M:Z0.dinxfp.vmovescalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_move_sd (__m128d a, __m128d b) MOVSD xmm, xmm
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| 
            <summary>
            __m256d _mm256_permute4x64_pd (__m256d a, const int imm8) VPERMPD ymm, ymm/m256, imm8
            Permutes components in the source vector across lanes as specified by the control byte
            </summary>
            <param name="src">The source vector</param>
            <param name="spec">The control byte</param>
        
| M:Z0.dinxfp.vperm4x64(System.Runtime.Intrinsics.Vector256{System.Double},Z0.Perm4L)| 
            <summary>
            __m256d _mm256_permute4x64_pd (__m256d a, const int imm8)VPERMPD ymm, ymm/m256, imm8
            </summary>
            <param name="x">The source vector</param>
            <param name="spec">The permutation spec</param>
        
| M:Z0.dinxfp.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})| 
            <summary>
            Permutes components in the source vector across lanes as specified by the control vector
            __m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx)VPERMPS ymm, ymm/m256, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="spec">The control vector</param>
        
| M:Z0.dinxfp.vperm8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.UInt32})| 
            <summary>
            __m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx)VPERMPS ymm, ymm/m256, ymm
            </summary>
            <param name="src">The source vector</param>
            <param name="spec">The perm spec</param>
        
| M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)| 
            <summary>
            __m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        
| M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| 
            <summary>
            __m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        
| M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},Z0.Perm2x4)| 
            <summary>
            __m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        
| M:Z0.dinxfp.vperm2x128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},Z0.Perm2x4)| 
            <summary>
            __m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="spec">The permutation spec</param>
        
| M:Z0.dinxfp.vshuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)| 
            <summary>
            __m128 _mm_shuffle_ps (__m128 a, __m128 b, unsigned int control) SHUFPS xmm, xmm/m128, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="control"></param>
        
| M:Z0.dinxfp.vshuffle(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)| 
            <summary>
            __m128d _mm_shuffle_pd (__m128d a, __m128d b, int immediate) SHUFPD xmm, xmm/m128, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
            <param name="control"></param>
        
| M:Z0.dinxfp.vswaphl(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            Swaps hi/lo 128-bit lanes
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.vswaphl(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            Swaps hi/lo 128-bit lanes
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_movemask_pd (__m128d a) MOVMSKPD reg, xmm
            Constructs an integer from the most significant bit of each source vector component
            </summary>
        
| M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            int _mm256_movemask_ps (__m256 a) VMOVMSKPS reg, ymm
            Constructs an integer from the most significant bit of each source vector component
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.takemask(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            int _mm256_movemask_pd (__m256d a) VMOVMSKPD reg, ymm
            Constructs an integer from the most significant bit of each source vector component
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxfp.movehl(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_movehl_ps (__m128 a, __m128 b) MOVHLPS xmm, xmm
            z[0] = x[3]
            z[1] = y[3]
            z[2] = x[0]
            z[3] = y[0]
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.movelh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_movelh_ps (__m128 a, __m128 b) MOVLHPS xmm, xmm
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vtranspose(System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
            Transposes a 4x4 matrix of floats, adapted from MSVC intrinsic headers
            </summary>
            <param name="row0">The first row</param>
            <param name="row1">The second row</param>
            <param name="row2">The third row</param>
            <param name="row3">The fourth row</param>
        
| M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_unpackhi_ps (__m128 a, __m128 b) UNPCKHPS xmm, xmm/m128
            Creates a 128-bit vector where the lower 64 bits are taken from the
            higher 64 bits of the first source vector and the higher 64 bits are taken 
            from the higher 64 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_unpackhi_pd (__m128d a, __m128d b) UNPCKHPD xmm, xmm/m128
            Creates a 128-bit vector where the lower 64 bits are taken from the
            higher 64 bits of the first source vector and the higher 64 bits are taken 
            from the higher 64 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_unpackhi_ps (__m256 a, __m256 b) VUNPCKHPS ymm, ymm, ymm/m256
            Creates a 256-bit vector where the lower 128 bits are taken from the
            higher 128 bits of the first source vector and the higher 128 bits are taken 
            from the higher 128 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpackhi(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_unpackhi_pd (__m256d a, __m256d b) VUNPCKHPD ymm, ymm, ymm/m256
            Creates a 256-bit vector where the lower 128 bits are taken from the
            higher 128 bits of the first source vector and the higher 128 bits are taken 
            from the higher 128 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpacklo(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_unpacklo_ps (__m128 a, __m128 b) UNPCKLPS xmm, xmm/m128
            Creates a 128-bit vector where the lower 64 bits are taken from the
            lower 64 bits of the first source vector and the higher 64 bits are taken 
            from the lower 64 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpacklo(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_unpacklo_pd (__m128d a, __m128d b) UNPCKLPD xmm, xmm/m128
            Creates a 128-bit vector where the lower 64 bits are taken from the
            lower 64 bits of the first source vector and the higher 64 bits are taken 
            from the lower 64 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpacklo(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_unpacklo_ps (__m256 a, __m256 b) VUNPCKLPS ymm, ymm, ymm/m256
            Creates a 256-bit vector where the lower 128 bits are taken from the
            lower 128 bits of the first source vector and the higher 128 bits are taken 
            from the lower 128 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vunpacklo(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_unpacklo_pd (__m256d a, __m256d b) VUNPCKLPD ymm, ymm, ymm/m256
            Creates a 256-bit vector where the lower 128 bits are taken from the
            lower 128 bits of the first source vector and the higher 128 bits are taken 
            from the lower 128 bits of the second source vector
            </summary>
            <param name="x">The left source vector</param>
            <param name="y">The right source vector</param>
        
| M:Z0.dinxfp.vand(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_and_ps (__m128 a, __m128 b)ANDPS xmm, xmm/m128
            Computes the logical and of the operands
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vand(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_and_pd (__m128d a, __m128d b)ANDPD xmm, xmm/m128
            Computes the logical and of the operands
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vand(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m128 _mm_and_ps (__m128 a, __m128 b)ANDPS xmm, xmm/m128
            Computes the logical and of the operands
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vand(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m128d _mm_and_pd (__m128d a, __m128d b) ANDPD xmm, xmm/m128
            Computes the logical and of the operands
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vxor1(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor1(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor1(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor1(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxnor(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxnor(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxnor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxnor(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_xor_ps (__m128 a, __m128 b) XORPS xmm, xmm/m128
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_xor_pd (__m128d a, __m128d b) XORPD xmm, xmm/m128
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_xor_ps (__m256 a, __m256 b) VXORPS ymm, ymm, ymm/m256
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
             __m256 _mm256_xor_ps (__m256 a, __m256 b) VXORPS ymm, ymm, ymm/m256
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector128{System.Single}@,System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector128{System.Double}@,System.Runtime.Intrinsics.Vector128{System.Double}@)| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector256{System.Single}@,System.Runtime.Intrinsics.Vector256{System.Single}@)| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxor(System.Runtime.Intrinsics.Vector256{System.Double}@,System.Runtime.Intrinsics.Vector256{System.Double}@)| 
            <summary>
            Computes the bitwise XOR between operands
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxornot(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            Computes XOR(x,NOT(y)) for vectors x and y
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxornot(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            Computes XOR(x,NOT(y)) for vectors x and y
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxornot(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            Computes XOR(x,NOT(y)) for vectors x and y
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.vxornot(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            Computes XOR(x,NOT(y)) for vectors x and y
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
        
| M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             __m128 _mm_cmpeq_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(0)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpeq_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(0)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.veq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpgt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(6)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpgt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(6)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgt(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm,ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpge_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpge_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vgteq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm,ymm/m256, imm8
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             __m128 _mm_cmplt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(1)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmplt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(1)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vlt(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmple_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmple_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vlteq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8 
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             __m128d _mm_max_pd (__m128d a, __m128d b)MAXPD xmm, xmm/m128
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_max_ps (__m256 a, __m256 b) VMAXPS ymm, ymm, ymm/m256
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vmax(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_max_pd (__m256d a, __m256d b)VMAXPD ymm, ymm, ymm/m256
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_min_ps (__m128 a, __m128 b) MINPS xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_min_pd (__m128d a, __m128d b) MINPD xmm, xmm/m128
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_min_ps (__m256 a, __m256 b) VMINPS ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vmin(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_min_pd (__m256d a, __m256d b) VMINPD ymm, ymm, ymm/m256
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpneq_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(4)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpneq_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(4)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            __m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vneq(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            __m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
        
| M:Z0.dinxfp.vnlt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             __m128d _mm_cmpnlt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vnlt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpnlt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(5)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vnonz(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            Returns true if the source vector is nonzero, false otherwise
            </summary>
            <param name="src">The vector to test</param>
        
| M:Z0.dinxfp.vnonz(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            Returns true if the source vector is nonzero, false otherwise
            </summary>
            <param name="src">The vector to test</param>
        
| M:Z0.dinxfp.vnonz(System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            Returns true if the source vector is nonzero, false otherwise
            </summary>
            <param name="src">The vector to test</param>
        
| M:Z0.dinxfp.vnonz(System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            Returns true if the source vector is nonzero, false otherwise
            </summary>
            <param name="src">The vector to test</param>
        
| M:Z0.dinxfp.vtestc(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            int _mm_testc_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128
            Determines whether mask-specified source bits are all on
            </summary>
            <param name="src">The source bits</param>
            <param name="mask">Specifies the bits in the source to test</param>
        
| M:Z0.dinxfp.vtestc(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_testc_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128
            Determines whether mask-specified source bits are all on
            </summary>
            <param name="src">The source bits</param>
            <param name="mask">Specifies the bits in the source to test</param>
        
| M:Z0.dinxfp.vtestc(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            int _mm256_testc_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256
            Determines whether mask-specified source bits are all on
            </summary>
            <param name="src">The source bits</param>
            <param name="mask">Specifies the bits in the source to test</param>
        
| M:Z0.dinxfp.vtestc(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            int _mm256_testc_pd (__m256d a, __m256d b) VTESTPS ymm, ymm/m256
            Determines whether mask-specified source bits are all on
            </summary>
            <param name="src">The source bits</param>
            <param name="mask">Specifies the bits in the source to test</param>
        
| M:Z0.dinxfp.vtestz(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            int _mm_testz_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128
            Determines whether all mask-specified source bits are off
            </summary>
            <param name="src">The bit source</param>
            <param name="mask">The mask</param>
        
| M:Z0.dinxfp.vtestz(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_testz_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128
            Determines whether all mask-specified source bits are off
            </summary>
            <param name="src">The bit source</param>
            <param name="mask">The mask</param>
        
| M:Z0.dinxfp.vtestz(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})| 
            <summary>
            int _mm256_testz_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256
            Determines whether all mask-specified source bits are off
            </summary>
            <param name="src">The bit source</param>
            <param name="mask">The mask</param>
        
| M:Z0.dinxfp.vtestz(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})| 
            <summary>
            int _mm256_testz_pd (__m256d a, __m256d b) VTESTPD ymm, ymm/m256
            Determines whether all mask-specified source bits are off
            </summary>
            <param name="src">The bit source</param>
            <param name="mask">The mask</param>
        
| M:Z0.dinxfp.vngt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpngt_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vngt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpngt_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(2)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vngteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpnge_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(1)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.vngteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpnge_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(1)
            </summary>
            <param name="x">The left vector</param>
            <param name="y">The right vector</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Single},Z0.N64,System.Int64)| 
            <summary>
            __int64 _mm_cvtss_si64 (__m128 a) CVTSS2SI r64, xmm/m32
            src[0..31] -&gt; r64
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Single},Z0.N32,System.Int32)| 
            <summary>
            int _mm_cvtss_si32 (__m128 a) CVTSS2SI r32, xmm/m32
            src[0..31] -&gt; r32
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Double},Z0.N64,System.Int64)| 
            <summary>
             __int64 _mm_cvtsd_si64 (__m128d a) CVTSD2SI r64, xmm/m64
            src[0..63] -&gt; r64
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Single},Z0.N128,System.Int32)| 
            <summary>
            __m128i _mm_cvttps_epi32 (__m128 a) CVTTPS2DQ xmm, xmm/m128
            Converts a floating-point source vector to an 32-bit integer target vector with a loss of precision
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N128,System.Single)| 
            <summary>
            __m128 _mm_cvtepi32_ps (__m128i a) CVTDQ2PS xmm, xmm/m128
            Converts an integer source vector to a floating-point target vector
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Int32},Z0.N256,System.Double)| 
            <summary>
            __m256d _mm256_cvtepi32_pd (__m128i a)VCVTDQ2PD ymm, xmm/m128
            4x32i -&gt;4x64f
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Double},Z0.N128,System.Single)| 
            <summary>
            __m128 _mm_cvtpd_ps (__m128d a) CVTPD2PS xmm, xmm/m128
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector256{System.Int32},Z0.N256,System.Single)| 
            <summary>
            __m256 _mm256_cvtepi32_ps (__m256i a) VCVTDQ2PS ymm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector128{System.Double},Z0.N128,System.Int32)| 
            <summary>
             __m128i _mm_cvttpd_epi32 (__m128d a) CVTTPD2DQ xmm, xmm/m128
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector256{System.Single},Z0.N256,System.Int32)| 
            <summary>
            __m256i _mm256_cvttps_epi32 (__m256 a) VCVTTPS2DQ ymm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector256{System.Double},Z0.N128,System.Int32)| 
            <summary>
            __m128i _mm256_cvtpd_epi32 (__m256d a) VCVTPD2DQ xmm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| M:Z0.dinxfp.convert(System.Runtime.Intrinsics.Vector256{System.Double},Z0.N128,System.Single)| 
            <summary>
            __m128 _mm256_cvtpd_ps (__m256d a)VCVTPD2PS xmm, ymm/m256
            </summary>
            <param name="src">The source vector</param>
            <param name="w">The target width</param>
            <param name="t">A target type representative</param>
        
| T:Z0.dinxsfp                                      | 
            <summary>
            Direct floating-point scalar intrinsics
            </summary>
        
| M:Z0.dinxsfp.load(System.Single)                  | 
            <summary>
             __m128 _mm_load_ss (float const* mem_address) MOVSS xmm, m32
            </summary>
            <param name="x">The source value</param>
        
| M:Z0.dinxsfp.load(System.Double)                  | 
            <summary>
             __m128d _mm_load_sd (double const* mem_address) MOVSD xmm, m64
            </summary>
            <param name="x">The source value</param>
        
| M:Z0.dinxsfp.store(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            void _mm_store_ss (float* mem_addr, __m128 a) MOVSS m32, xmm
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxsfp.store(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            void _mm_store_sd (double* mem_addr, __m128d a)MOVSD m64, xmm
            </summary>
            <param name="src">The source vector</param>
        
| M:Z0.dinxsfp.convert(System.Int32,System.Runtime.Intrinsics.Vector128{System.Double}@)| 
            <summary>
             __m128d _mm_cvtsi32_sd (__m128d a, int b)CVTSI2SD xmm, reg/m32
            </summary>
            <param name="x"></param>
            <param name="dst"></param>
        
| M:Z0.dinxsfp.convert(System.Int32,System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
             __m128 _mm_cvtsi32_ss (__m128 a, int b)CVTSI2SS xmm, reg/m32
            </summary>
            <param name="src"></param>
            <param name="src"></param>
        
| M:Z0.dinxsfp.convert(System.Int64,System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
             __m128 _mm_cvtsi64_ss (__m128 a, __int64 b)CVTSI2SS xmm, reg/m64
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        
| M:Z0.dinxsfp.to32i(System.Single)                 | 
            <summary>
            int _mm_cvtss_si32 (__m128 a) CVTSS2SI r32, xmm/m32
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.to32i(System.Double)                 | 
            <summary>
            int _mm_cvtsd_si32 (__m128d a) CVTSD2SI r32, xmm/m64
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.to64i(System.Single)                 | 
            <summary>
            __int64 _mm_cvtss_si64 (__m128 a) CVTSS2SI r64, xmm/m32
            </summary>
            <param name="x"></param>
            <returns></returns>
        
| M:Z0.dinxsfp.to64i(System.Double)                 | 
            <summary>
            __int64 _mm_cvtsd_si64 (__m128d a) CVTSD2SI r64, xmm/m64
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_add_ss (__m128 a, __m128 b)ADDSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.add(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_add_sd (__m128d a, __m128d b)ADDSD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.mul(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             __m128 _mm_mul_ss (__m128 a, __m128 b) MULPS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.mul(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             __m128d _mm_mul_sd (__m128d a, __m128d b) MULSD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_fmadd_ss (__m128 a, __m128 b, __m128 c) VFMADDSS xmm, xmm, xmm/m32
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxsfp.fmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c) VFMADDSS xmm, xmm, xmm/m64
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxsfp.fmsub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_fmsub_ss (__m128 a, __m128 b, __m128 c)VFMSUBSS xmm, xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        
| M:Z0.dinxsfp.fmsub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_fmsub_sd (__m128d a, __m128d b, __m128d c)VFMSUBSD xmm, xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        
| M:Z0.dinxsfp.fnmadd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_fnmadd_ss (__m128 a, __m128 b, __m128 c) VFNMADDSS xmm, xmm, xmm/m32
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxsfp.fnmadd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_fnmadd_sd (__m128d a, __m128d b, __m128d c) VFNMADDSD xmm, xmm, xmm/m64
            dst = -(x*y + z)
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="z">The third operand</param>
        
| M:Z0.dinxsfp.div(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_div_ss (__m128 a, __m128 b)DIVSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        
| M:Z0.dinxsfp.div(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             __m128d _mm_div_sd (__m128d a, __m128d b)DIVSD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.sub(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_sub_ss (__m128 a, __m128 b) SUBSS xmm, xmm/m32
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        
| M:Z0.dinxsfp.sub(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_sub_sd (__m128d a, __m128d b) SUBSD xmm, xmm/m64
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        
| M:Z0.dinxsfp.max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_max_ss (__m128 a, __m128 b) MAXSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.max(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_max_sd (__m128d a, __m128d b) MAXSD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             __m128 _mm_min_ss (__m128 a, __m128 b) MINSS xmm, xmm/m32
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        
| M:Z0.dinxsfp.min(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_min_sd (__m128d a, __m128d b) MINSD xmm, xmm/m64
            </summary>
            <param name="x">The left vectorized scalar</param>
            <param name="y">The right vectorized scalar</param>
        
| M:Z0.dinxsfp.eq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             int _mm_ucomieq_ss (__m128 a, __m128 b)UCOMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.eq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_ucomieq_sd (__m128d a, __m128d b)UCOMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.neq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            int _mm_comineq_ss (__m128 a, __m128 b)COMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.neq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
             int _mm_comineq_sd (__m128d a, __m128d b)COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.gt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            int _mm_comigt_ss (__m128 a, __m128 b)COMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.gt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_comigt_sd (__m128d a, __m128d b)COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.gteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            int _mm_comige_ss (__m128 a, __m128 b)COMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.gteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_comige_sd (__m128d a, __m128d b)COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.ngt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_cmpngt_ss (__m128 a, __m128 b)CMPSS xmm, xmm/m32, imm8(2)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.ngt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpngt_sd (__m128d a, __m128d b)CMPSD xmm, xmm/m64, imm8(2)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.lt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            int _mm_comilt_ss (__m128 a, __m128 b)COMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.lt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_comilt_sd (__m128d a, __m128d b)COMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.nlt(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             __m128 _mm_cmpnlt_ss (__m128 a, __m128 b)CMPSS xmm, xmm/m32, imm8(5)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.nlt(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_cmpnlt_sd (__m128d a, __m128d b)CMPSD xmm, xmm/m64, imm8(5)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.lteq(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             int _mm_ucomile_ss (__m128 a, __m128 b)UCOMISS xmm, xmm/m32
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.lteq(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            int _mm_ucomile_sd (__m128d a, __m128d b)UCOMISD xmm, xmm/m64
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        
| M:Z0.dinxsfp.cmp(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},Z0.FpCmpMode)| 
            <summary>
            __m128 _mm_cmp_ss (__m128 a, __m128 b, const int imm8) VCMPSD xmm, xmm, xmm/m64, imm8
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="mode"></param>
        
| M:Z0.dinxsfp.cmp(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},Z0.FpCmpMode)| 
            <summary>
            __m128d _mm_cmp_sd (__m128d a, __m128d b, const int imm8) VCMPSS xmm, xmm, xmm/m32, imm8
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="mode"></param>
        
| M:Z0.dinxsfp.ceil(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_ceil_ss (__m128 a)ROUNDSD xmm, xmm/m128, imm8(10)
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.ceil(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_ceil_sd (__m128d a)ROUNDSD xmm, xmm/m128, imm8(10)
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.floor(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
             __m128 _mm_ceil_ss (__m128 a)ROUNDSD xmm, xmm/m128, imm8(10)
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.floor(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            __m128d _mm_ceil_sd (__m128d a)ROUNDSD xmm, xmm/m128, imm8(10)
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.rcp(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_rcp_ss (__m128 a) RCPSS xmm, xmm/m32
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxsfp.sqrt(System.Runtime.Intrinsics.Vector128{System.Single})| 
            <summary>
            __m128 _mm_sqrt_ss (__m128 a) SQRTSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.sqrt(System.Runtime.Intrinsics.Vector128{System.Double})| 
            <summary>
            _m128d _mm_sqrt_sd (__m128d a) SQRTSD xmm, xmm/64 
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.rsqrt(System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
            __m128 _mm_rsqrt_ss (__m128 a) RSQRTSS xmm, xmm/m32
            </summary>
            <param name="x"></param>
        
| M:Z0.dinxsfp.IsNaN(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)| 
            <summary>
            Determines whether the first component is NaN
            </summary>
            <param name="x">The source vector</param>
        
| M:Z0.dinxsfp.IsNaN(System.Runtime.Intrinsics.Vector128{System.Double},System.Int32)| 
            <summary>
            Determines whether the first component is NaN
            </summary>
            <param name="x">The source vector</param>
        
| T:Z0.ginxfp                                       | 
            <summary>
            Generic intrinsics over floating-point domains
            </summary>
        
| M:Z0.ginxfp.vfpsign``1(Z0.N256)                   | 
            <summary>
            Defines a vector of 32 or 64-bit floating point values where each component has been intialized to the value -0.0
            </summary>
            <typeparam name="T">The floating point type</typeparam>
        
| T:Z0.ginxsfp                                      | 
            <summary>
            Generic scalar intrinsics over floating-point domains
            </summary>
        
