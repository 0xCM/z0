| T:Z0.IAddressable                                 | 
            <summary>
            Characterizes an address-identified target
            </summary>
        
| P:Z0.MemoryAddress.MinWidth                       | 
            <summary>
            Computes the bit-width of the smallest numeric type that can represent the address
            </summary>
        
| P:Z0.MemoryOffset.OffsetAddress                   | 
            <summary>
            The offset magnitude presented as an address
            </summary>
        
| P:Z0.MemoryOffset.Absolute                        | 
            <summary>
            The absolute address
            </summary>
        
| T:Z0.MemoryRange                                  | 
            <summary>
            Defines an inclusive address range
            </summary>
        
| T:Z0.OffsetSeq                                    | 
            <summary>
            Pairs a sequence number with a short memory offset
            </summary>
        
| T:Z0.OpAddress                                    | 
            <summary>
            Pairs a located operation with, well, its location
            </summary>
        
| T:Z0.TextResource                                 | 
            <summary>
            Describes/models a literal text resource
            </summary>
        
| P:Z0.TextResource.Identifier                      | 
            <summary>
            The resource identifier
            </summary>
        
| P:Z0.TextResource.Location                        | 
            <summary>
            The resource address
            </summary>
        
| P:Z0.TextResource.Content                         | 
            <summary>
            The resource value extracted from the accompanying location
            </summary>
        
| T:Z0.TextResource`1                               | 
            <summary>
            Describes/models a literal text resource with an enum-predicated identity
            </summary>
        
| P:Z0.TextResource`1.Identifier                    | 
            <summary>
            The resource identifier
            </summary>
        
| P:Z0.TextResource`1.Location                      | 
            <summary>
            The resource address
            </summary>
        
| P:Z0.TextResource`1.Content                       | 
            <summary>
            The resource value extracted from the accompanying location
            </summary>
        
| M:Z0.AgentX.Agent(Z0.IAgentContext,Z0.AgentIdentity)| 
            <summary>
            Searches a context for an active agent wth a specified identity
            </summary>
            <param name="context">The context to search</param>
            <param name="identity">The identity to match</param>
        
| T:Z0.AgentContext                                 | 
            <summary>
            Defines a shared context for a set of agents
            </summary>
        
| T:Z0.SystemAgent                                  | 
            <summary>
            Defines base system agent abstraction
            </summary>    
        
| P:Z0.SystemAgent.ServerId                         | 
            <summary>
            Identifies the server to which the agent belongs
            </summary>
        
| P:Z0.SystemAgent.AgentId                          | 
            <summary>
            Identifies the agent relative to the server
            </summary>
            <remarks>
            There are three special cases to note: 
            1. The server itself is a service agent and will always be assigned and Id of 0
            2. The server process, which more or less serves the same role as the Windows SCM,
            is always assigned an agent id of 1
            3. The server complex, which serves as the bounding box for synthetic servers, agents,
            etc, is also a service agent. It will be assigned UInt32.MaxValue which will be considered
            an invalid id for any other agent
            </remarks>
        
| P:Z0.SystemAgent.State                            | 
            <summary>
            Specifies the current agent status
            </summary>
        
| M:Z0.SystemAgent.Terminate                        | 
            <summary>
            Terminates the agent,releasing any captured resources
            </summary>
        
| M:Z0.SystemAgent.Configure(System.Object)         | 
            <summary>
            Configures the agent prior to a run
            </summary>
            <param name="config">The agent-specific configuration data</param>
        
| M:Z0.SystemAgent.Start                            | 
            <summary>
            Starts the agent from a running state
            </summary>
        
| M:Z0.SystemAgent.Stop                             | 
            <summary>
            Starts the agent from a stopped state
            </summary>
        
| M:Z0.SystemAgent.Dispose                          | 
            <summary>
            Terminates the agent
            </summary>
        
| M:Z0.SystemAgent.OnStart                          | 
            <summary>
            May be specialized to perform service-specific initialization/precondition operations
            </summary>
        
| M:Z0.SystemAgent.OnTerminate                      | 
            <summary>
            May be specialized to perform service-specific cleanup/postcondition operations
            </summary>
        
| M:Z0.CpuCoreWorker.Start``1(Z0.IContext,System.UInt32,System.Func{``0,``0},``0,System.TimeSpan,System.Nullable{System.UInt64})| 
            <summary>
            Creates and starts a worker
            </summary>
            <param name="context">The context conferred to the worker</param>
            <param name="cpucore">The CPU core number</param>
            <param name="worker">The worker function</param>
            <param name="state">The subject input</param>
            <param name="frequency">The worker frequence</param>
            <param name="MaxCycles">The maximum number of cycles the worker will be allowed to execute before forceful termination</param>
            <typeparam name="T">The subject type</typeparam>
        
| T:Z0.CpuCoreWorker`1                              | 
            <summary>
            Embodies an asynchrounous thread of execution that is assigned to a specific CPU core
            </summary>
        
| M:Z0.CpuCoreWorker`1.thread(System.UInt32)        | 
            <summary>
            Searches for a thread given an OS-assigned id, not the useless clr id
            </summary>
            <param name="id">The OS thread Id</param>
        
| M:Z0.CpuCoreWorker`1.RunCycle                     | 
            <summary>
            Executes a single work cycle
            </summary>
        
| T:Z0.EnvVar                                       | 
            <summary>
            Defines a nonparametric environment variable
            </summary>
        
| P:Z0.EnvVar.Name                                  | 
            <summary>
            The environment variable name
            </summary>
        
| P:Z0.EnvVar.Value                                 | 
            <summary>
            The environment variable value
            </summary>
        
| T:Z0.EnvVar`1                                     | 
            <summary>
            Defines a value-parametric environment variable
            </summary>
        
| M:Z0.XTend.WithPropertyType``1(System.Reflection.PropertyInfo[])| 
            <summary>
            Selects the properties from a property data array of a parametric type
            </summary>
            <param name="src">The source properties</param>
        
| M:Z0.XTend.Values``1(Z0.ClrProperty{``0}[],System.Object)| 
            <summary>
            Gets the property values
            </summary>
            <param name="src"></param>
            <param name="instance"></param>
            <typeparam name="T"></typeparam>
        
| M:Z0.XTend.To(Z0.NumericKind,System.Object)       | 
            <summary>
            Convers a source value, which is hopefully a supported kind, to a target kind
            </summary>
            <param name="k">The primal kind</param>
        
| M:Z0.XTend.WhereSome``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Filters zero-valued elements from the source stream
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="E">The enumeration type</typeparam>
        
| M:Z0.XTend.WhereSome``1(``0[])                    | 
            <summary>
            Filters zero-valued elements from the source array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="E">The enumeration type</typeparam>
        
| M:Z0.XTend.FileHost(Z0.FileName)                  | 
            <summary>
            Determines the api host that owns the file, if any
            </summary>
            <param name="src">The source file</param>
        
| M:Z0.XTend.FileHost(Z0.FilePath)                  | 
            <summary>
            Determines the api host that owns the file, if any
            </summary>
            <param name="src">The source file</param>
        
| M:Z0.XTend.ReadText(Z0.FilePath)                  | 
            <summary>
            Reads the full content of a text file
            </summary>
            <param name="src">The file path</param>
        
| M:Z0.XTend.ReadLines(Z0.FilePath)                 | 
            <summary>
            Reads the line-partitioned content of a text file
            </summary>
            <param name="src">The file path</param>
        
| M:Z0.XTend.ReadBytes(Z0.FilePath)                 | 
            <summary>
            Reads the full content of a file into a byte array
            </summary>
            <param name="src">The file path</param>
        
| M:Z0.XTend.Delete(Z0.FilePath)                    | 
            <summary>
            Deletes the file if it exists
            </summary>
            <param name="src">The path to the file</param>
        
| M:Z0.XTend.Reader(Z0.FilePath)                    | 
            <summary>
            Creates a reader initialized with the source file; caller-disposal required
            </summary>
            <param name="src">The file path</param>
        
| M:Z0.XTend.Writer(Z0.FilePath)                    | 
            <summary>
            Creates an overwriting and caller-disposed stream writer that targets a specified path
            </summary>
            <param name="dst">The file path</param>
        
| M:Z0.XTend.Subscribe``1(``0,Z0.IEventBroker,System.Action{``0})| 
            <summary>
            Registers an event receiver to which brokered events will be relayed
            </summary>
            <param name="e">An event representative</param>
            <param name="broker">The broker</param>
            <param name="receiver">The handler ivoked upon event occurrence</param>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.XTend.IsSymbol(Z0.Perm4L)                    | 
            <summary>
            Determines whether a permutation literal is a symbol
            </summary>
            <param name="src">The value to inspect</param>
        
| M:Z0.XTend.IsSymbol(Z0.Perm8L)                    | 
            <summary>
            Determines whether a permutation literal is a symbol
            </summary>
            <param name="src">The value to inspect</param>
        
| M:Z0.XTend.IsSymbol(Z0.Perm16L)                   | 
            <summary>
            Determines whether a permutation literal is a symbol
            </summary>
            <param name="src">The value to inspect</param>
        
| M:Z0.XTend.Report(System.Exception)               | 
            <summary>
            Emits an exception to the error output stream
            </summary>
            <param name="e">The exection to emit</param>
        
| M:Z0.XTend.Field(System.Type,System.String)       | 
            <summary>
            Attempts to retrieve a name-identified field from a type
            </summary>
            <param name="src">The type to examine</param>
            <param name="name">The name of the field</param>
            <param name="declared">Whether the field is required to be declared by the source type</param>
        
| M:Z0.XTend.GenericDefinition(System.Type)         | 
            <summary>
            For a generic type or reference to a generic type, retrieves the generic type definition; otherwise, returns none
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.All``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Determines whether all of the elements of a source span satisfy a supplied predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Any``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Determines whether any elements of a span satisfy a supplied predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Any``1(System.Span{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Determines whether any elements of a span satisfy a supplied predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Counts the number of values in the source that satisfy the predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate to evaluate over each element</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Counts the number of values in the source that satisfy the predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate to evaluate over each element</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Count``1(System.Span{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Counts the number of values in the source that satisfy the predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate to evaluate over each element</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.First``1(System.Span{``0})             | 
            <summary>
            Returns a reference to the first element of a nonempty span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Last``1(System.Span{``0})              | 
            <summary>
            Returns a reference to the last element of a nonempty span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Intersperse``1(System.ReadOnlySpan{``0},``0)| 
            <summary>
            Creates a new span by interposing a specified element between each element of an existing span
            </summary>
            <param name="src">The source span</param>
            <param name="x">The value to place between each element in the new span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Intersperse``1(System.Span{``0},``0)   | 
            <summary>
            Creates a new span by interposing a specified element between each element of an existing span
            </summary>
            <param name="src">The source span</param>
            <param name="x">The value to place between each element in the new span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Map``2(System.ReadOnlySpan{``0},System.Func{``0,``1})| 
            <summary>
            Projects a source span to target span via a supplied transformation
            </summary>
            <param name="src">The source</param>
            <param name="f">The transformation</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.Map``2(System.Span{``0},System.Func{``0,``1})| 
            <summary>
            Projects a source span to target span
            </summary>
            <param name="src">The source span</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.MapRange``2(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Func{``0,``1})| 
            <summary>
            Projects a range of elements from a source span to a target span
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The source offset</param>
            <param name="length">The length of the segment to project</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.MapRange``2(System.Span{``0},System.Int32,System.Int32,System.Func{``0,``1})| 
            <summary>
            Projects a range of elements from a source span to a target span
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The source offset</param>
            <param name="length">The length of the segment to project</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.MapArray``2(System.ReadOnlySpan{``0},System.Func{``0,``1})| 
            <summary>
            Projects a source span to target span via a supplied transformation
            </summary>
            <param name="src">The source</param>
            <param name="f">The transformation</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.Replicate``1(System.ReadOnlySpan{``0}) | 
            <summary>
            Clones the source span into a new span
            </summary>
            <param name="src">The span to replicate</param>
            <typeparam name="T">The element type</typeparam>
            <returns>Returns the replicated span</returns>
        
| M:Z0.XTend.Replicate``1(System.Span{``0})         | 
            <summary>
            Clones the source span into a new span
            </summary>
            <param name="src">The span to replicate</param>
            <typeparam name="T">The element type</typeparam>
            <returns>Returns the replicated span</returns>
        
| M:Z0.XTend.Reverse``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Produces a reversed span from a readonly span
            </summary>
            <param name="src">The soruce span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Swap``1(System.Span{``0},System.Int32,System.Int32)| 
            <summary>
            Interchanges span elements i and j
            </summary>
            <param name="src">The source span</param>
            <param name="i">An index of a span element</param>
            <param name="j">An index of a span element</param>
            <typeparam name="T">The span element type</typeparam>
        
| M:Z0.XTend.ToDictionary``1(System.ReadOnlySpan{``0})| 
            <summary>
            Creates a dictionary from a span using the element indices as keys
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToDictionary``1(System.Span{``0})      | 
            <summary>
            Creates a dictionary from a span using the element indices as keys
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ValuesEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})| 
            <summary>
            Evaluates whether two spans have identical content
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.XTend.ValuesEqual``1(System.Span{``0},System.ReadOnlySpan{``0})| 
            <summary>
            Evaluates whether two spans have identical content
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.XTend.LeftOf(System.String,System.Int32)     | 
            <summary>
            Gets the string to the left of, but not including, a specified index
            </summary>
            <param name="s">The string to search</param>
            <param name="idx">The index</param>
        
| M:Z0.XTend.LeftOf(System.String,System.Char)      | 
            <summary>
            Gets the string to the left of, but not including, the first instance of a specified character
            </summary>
            <param name="s">The string to search</param>
            <param name="c">The character</param>
        
| M:Z0.XTend.LeftOf(System.String,System.String)    | 
            <summary>
            Gets the string to the left of, but not including, a specified substring
            </summary>
            <param name="s">The string to search</param>
            <param name="substring">The substring to match</param>
        
| M:Z0.XTend.OnSome(System.String,System.Action{System.String})| 
            <summary>
            Invokes an action if the source string is nonempty
            </summary>
            <param name="s">The string to evaluate</param>
            <param name="f">The action to conditionally invoke</param>
        
| M:Z0.XTend.Remove(System.String,System.String)    | 
            <summary>
            Removes a substring from the source string if it exists
            </summary>
            <param name="s">The string to manipulate</param>
            <param name="substring">The substring to remove</param>
        
| M:Z0.XTend.RemoveAny(System.String,System.Collections.Generic.IEnumerable{System.Char})| 
            <summary>
            Erases a specified set of character occurrences in a string
            </summary>
            <param name="s">The string to manipulate</param>
            <param name="removals">The characters to remove</param>
        
| M:Z0.XTend.RemoveAny(System.String,System.Char[]) | 
            <summary>
            Erases a specified set of character occurrences in a string
            </summary>
            <param name="s">The string to manipulate</param>
            <param name="removals">The characters to remove</param>
        
| M:Z0.XTend.RemoveSubstring(System.Collections.Generic.IEnumerable{System.String},System.String)| 
            <summary>
            Removes all occurences of a substring from the source strings where extant
            </summary>
            <param name="s">The strings to manipulate</param>
            <param name="substring">The substring to remove</param>
        
| M:Z0.XTend.RemoveLast(System.String)              | 
            <summary>
            Creates a new string from the first n - 1 characters of a string of length n
            </summary>
            <param name="s">The source string</param>
        
| M:Z0.XTend.RemoveBlanks(System.String)            | 
            <summary>
            Removes whitespace characters from a string
            </summary>
            <param name="src">The source string</param>
        
| M:Z0.XTend.Map``2(System.Nullable{``0},System.Func{``0,``1})| 
            <summary>
            Projects a source value, if non-null, onto a target value; otherwise, returns the target's default value
            </summary>
            <param name="src">The source value</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.XTend.Map``2(System.Nullable{``0},System.Func{``0,``1},System.Func{``1})| 
            <summary>
            Projects a source value, if non-null, onto a target value; otherwise, returns value raised by a caller-supplied emitter
            </summary>
            <param name="src">The source value</param>
            <param name="some">The projector</param>
            <param name="none">The alternative emitter</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.XTend.AppendTo``1(``0[],``0[])               | 
            <summary>
            Concatenates two arrays
            </summary>
        
| M:Z0.XTend.Clear``1(``0[])                        | 
            <summary>
            Fills an array with the element type's default value
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The array element type</typeparam>
        
| M:Z0.XTend.CopyTo``1(System.Collections.Generic.IReadOnlyList{``0},``0[])| 
            <summary>
            Copies a source list to a target array
            </summary>
            <param name="src">The list containing the elements to copy</param>
            <param name="dst">The array that will receive the copied elements</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Fill``1(``0[],``0)                     | 
            <summary>
            Fills an array, in-place, with a specified value
            </summary>
            <param name="dst">The target array</param>
            <param name="src">The source value</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.FirstIndexOf``1(``0[],``0)             | 
            <summary>
            Returns the index of the first value that matches a specified value, if any. Otherwise, returns -1
            </summary>
            <param name="src">The source array</param>
            <param name="value">The value to match in the source</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Replicate``1(``0[])                    | 
            <summary>
            Allocates an populates a new array that is identical to the source array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.Slice``1(``0[],System.Int32,System.Int32)| 
            <summary>
            Creates a new array from a (contiguous) subset of an existing array
            </summary>
            <typeparam name="T">The array element type</typeparam>
            <param name="src">The source array</param>
            <param name="offset">The position of the first element of the source array </param>
            <param name="count">The number of elements to take from the source array following the offset</param>
        
| M:Z0.XTend.Clear(Z0.IBufferToken)                 | 
            <summary>
            Zero-fills a token-identified buffer
            </summary>
        
| M:Z0.XTend.Content``1(Z0.IBufferToken)            | 
            <summary>
            Covers a token-identified buffer with a span
            </summary>
        
| M:Z0.XTend.Fill``1(Z0.IBufferToken,System.ReadOnlySpan{``0})| 
            <summary>
            Fills a token-identified buffer with data from a source span and returns the target memory to the caller as a span
            </summary>
            <param name="src">The source content</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.Fill``1(Z0.IBufferToken,``0[])         | 
            <summary>
            Fills a token-identified buffer with data from an array and returns the target memory to the caller as a span
            </summary>
            <param name="src">The source content</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.FormatTable``1(System.Span{``0},System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char})| 
            <summary>
            Formats a span as a table
            </summary>
            <param name="src">The source data to be formatted</param>
            <param name="rowcount">The number of rows in the output table</param>
            <param name="colcount">The number of columns in the output table</param>
            <param name="cellsep">The character that intersperses the cells of each row</param>
            <param name="rowsep">The character that intersperses the rows </param>
            <param name="padlen">The optional padding for each cell; if less than zero the calls are left-padded; if greater than zero, the cells are right-padded</param>
            <param name="padchar">The optional pad character; if unspecified and padlen is specified it defaults to a space</param>
            <typeparam name="T">The span element type</typeparam>
        
| M:Z0.XTend.Replicate``2(Z0.NatSpan{``0,``1}@)     | 
            <summary>
            Clones a natural span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.StreamTo``3(System.Collections.Generic.IEnumerable{``2},Z0.TableSpan{``0,``1,``2}@)| 
            <summary>
            Fills a tabular span of natural dimensions with streamed elements
            </summary>
            <param name="src">The source stream</param>
            <param name="dst">The target span</param>
            <typeparam name="M">The row dimension type</typeparam>
            <typeparam name="N">The column dimension type</typeparam>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.TakeArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Constructs an array of specified length from a stream
            </summary>
            <param name="src">The source stream</param>
            <param name="length">The length of the index</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.TakeArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)| 
            <summary>
            Constructs an array from a specified number of elmements from a source stream after a skip
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.TakeMemory``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Constructs a memory segment of specified length from a stream (allocating)
            </summary>
            <param name="src">The source stream</param>
            <param name="length">The length of the index</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.TakeReadOnlyMemory``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| 
            <summary>
            Constructs a memory segment of specified length from a stream (allocating)
            </summary>
            <param name="src">The source stream</param>
            <param name="length">The length of the index</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.TakeMemory``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)| 
            <summary>
            Constructs an array from a specified number of elmements from a source stream after a skip (allocating)
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.ToMemory``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
             Constructs a memory segment from the content of the (hopefully finite) stream (allocating)
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.ToReadOnlyMemory``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
             Constructs a memory segment from the content of the (hopefully finite) stream (allocating)
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.XTend.ToEnumerable``1(System.ReadOnlySpan{``0})| 
            <summary>
            Lifts span content into the LINQ monad
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToEnumerable``1(System.Span{``0})      | 
            <summary>
            Lifts span content into the LINQ monad
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.ToSet``1(System.Span{``0})             | 
            <summary>
            Constructs a hash set from span content
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.ToSet``1(System.ReadOnlySpan{``0})     | 
            <summary>
            Constructs a hash set from span content
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.ToSet``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})| 
            <summary>
            Constructs a hash set from span content
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.ToSet``1(System.Span{``0},System.ReadOnlySpan{``0})| 
            <summary>
            Constructs a hash set from span content
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.FormatAsVector``1(System.ReadOnlySpan{``0},System.Char)| 
            <summary>
            Formats a readonly span as a vector
            </summary>
            <param name="src">The source stream</param>
            <param name="sep">The item separator</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.FormatAsVector``1(System.Span{``0},System.Char)| 
            <summary>
            Formats a span as a vector
            </summary>
            <param name="src">The source stream</param>
            <param name="sep">The item separator</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.XTend.FormatCellBlocks``1(System.ReadOnlySpan{``0},System.Nullable{System.Int32},System.Nullable{System.Char},System.Boolean)| 
            <summary>
            Formats a span as [c0   c1 ...  cm]  where m = length - 1
            </summary>
            <param name="src">The source span</param>
            <param name="cellpad">The width of a padded cell, if applicable</param>
            <param name="padchar">The character to use for cell padding, if applicable</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.FormatCellBlocks``1(System.Span{``0},System.Nullable{System.Int32},System.Nullable{System.Char},System.Boolean)| 
            <summary>
            Formats a span as [c0   c1 ...  cm]  where m = length - 1
            </summary>
            <param name="src">The source span</param>
            <param name="cellpad">The width of a padded cell, if applicable</param>
            <param name="padchar">The character to use for cell padding, if applicable</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.XTend.FormatLines``1(System.ReadOnlySpan{``0})| 
            <summary>
            Formats each source element on a new line
            </summary>
            <param name="src">The source span</param>
        
| M:Z0.XTend.FormatLines``1(System.Span{``0})       | 
            <summary>
            Formats each source element on a new line
            </summary>
            <param name="src">The source span</param>
        
| M:Z0.XTend.FormatList(System.Collections.Generic.IEnumerable{System.Object},System.Char)| 
            <summary>
            Formats a sequence of objects as a delimited list
            </summary>
            <param name="src">The source span</param>
            <param name="delimiter">The delimiter, if specified; otherwise, a system default is chosen</param>
            <param name="offset">The index of the source element at which formatting will begin</param>
            <typeparam name="T">A formattable type</typeparam>
        
| M:Z0.XTend.FormatHex(System.SByte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Renders a number as a hexadecimal string
            </summary>
            <param name="src">The source number</param>
            <param name="zpad">Specifies whether the numeric content should be left-padded with zeros</param>
            <param name="specifier">Specifies whether the hex numeric specifier shold prefix the output</param>
            <param name="uppercase">Specifies whether hex characters should be upper-cased</param>
            <param name="prespec">Indicates where the specifier, if applied, is a prefix specifier (true) or a postfix specifier (false)</param>
        
| M:Z0.XTend.FormatHex(System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.FormatHex(System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.SByte,System.Boolean) | 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.Byte,System.Boolean)  | 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.Int16,System.Boolean) | 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.UInt16,System.Boolean)| 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.Int32,System.Boolean) | 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.UInt32,System.Boolean)| 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.Int64,System.Boolean) | 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.HexDigits(System.UInt64,System.Boolean)| 
            <summary>
            Formats a scalar value as a sequence of hex digits
            </summary>
            <param name="src">The source value</param>
            <param name="uppercase">Whether to use uppercase characters for digits A - F</param>
        
| M:Z0.XTend.FormatHex``1(System.ReadOnlySpan{``0},System.Char,System.Boolean)| 
            <summary>
            Formats a span pf presumed integral values as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to format the result as a vector</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XTend.FormatHex``1(System.Span{``0},System.Char,System.Boolean)| 
            <summary>
            Formats a span of numeric cell type as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XTend.FormatHex``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.Boolean)| 
            <summary>
            Formats a (hopefully finite) stream of values (hopefully numeric) as a sequence of hex values
            </summary>
            <param name="src">The source span</param>
            <param name="bracket">Whether to enclose the formatted hex within brackets</param>
            <param name="sep">The character to use when separating digits</param>
            <param name="specifier">Whether to prefix each number with the canonical hex specifier, "0x"</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.XTend.IsTypeNat(System.Type)                 | 
            <summary>
            Determines whether a type encodes a natural number
            </summary>
            <param name="t">The type to test</param>
        
| M:Z0.XTend.NatValue(System.Type)                  | 
            <summary>
            For a type that encodes a natural number, returns the corresponding value; otherwise, returns none
            </summary>
            <param name="t">The type to examine</param>
        
| M:Z0.XTend.TypeNatural(System.Type)               | 
            <summary>
            Returns the type's natural reification if it exists; otherwise, returns the 0 reification
            </summary>
            <param name="t">The type to examine</param>
        
| T:Z0.CilFunction                                  | 
            <summary>
            Adheres a set of IL instructions with the source method
            </summary>
        
| T:Z0.ICilFunctionWriter                           | 
            <summary>
            Defines service contract for persistent emission of cil functions that accompany asm functions
            </summary>
        
| P:Z0.ICilFunctionWriter.Target                    | 
            <summary>
            The writer's destintation path
            </summary>
        
| T:Z0.CilSpecs.Code                                | 
            <summary>
            A CIL opcode. If the high byte is 0 or if it's <see cref="F:Z0.CilSpecs.Code.UNKNOWN1" />, it's a 1-byte opcode,
            else it's a two-byte opcode and the highest byte is the first byte of the opcode.
            </summary>
        
| T:Z0.CilSpecs.FlowControl                         | 
            <summary>
            CIL opcode flow control
            </summary>
        
| F:Z0.CilSpecs.FlowControl.Branch                  | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Break                   | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Call                    | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Cond_Branch             | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Meta                    | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Next                    | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Phi                     | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Return                  | 
            <summary />
        
| F:Z0.CilSpecs.FlowControl.Throw                   | 
            <summary />
        
| T:Z0.CilSpecs.Instruction                         | 
            <summary>
            A CIL instruction (opcode + operand)
            </summary>
        
| F:Z0.CilSpecs.Instruction.OpCode                  | 
            <summary>
            The opcode
            </summary>
        
| F:Z0.CilSpecs.Instruction.Operand                 | 
            <summary>
            The opcode operand
            </summary>
        
| F:Z0.CilSpecs.Instruction.Offset                  | 
            <summary>
            Offset of the instruction in the method body
            </summary>
        
| M:Z0.CilSpecs.Instruction.#ctor(Z0.CilSpecs.OpCode)| 
            <summary>
            Constructor
            </summary>
            <param name="opCode">Opcode</param>
        
| M:Z0.CilSpecs.Instruction.#ctor(Z0.CilSpecs.OpCode,System.Object)| 
            <summary>
            Constructor
            </summary>
            <param name="opCode">Opcode</param>
            <param name="operand">The operand</param>
        
| M:Z0.CilSpecs.Instruction.Clone                   | 
            <summary>
            Clone this instance. The <see cref="F:Z0.CilSpecs.Instruction.Operand" /> and <see cref="!:SequencePoint" /> fields
            are shared by this instance and the created instance.
            </summary>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode)| 
            <summary>
            Creates a new instruction with no operand
            </summary>
            <param name="opCode">The opcode</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Byte)| 
            <summary>
            Creates a new instruction with a <see cref="T:System.Byte" /> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.SByte)| 
            <summary>
            Creates a new instruction with a <see cref="T:System.SByte" /> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Int32)| 
            <summary>
            Creates a new instruction with an <see cref="T:System.Int32" /> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Int64)| 
            <summary>
            Creates a new instruction with a <see cref="T:System.Int64" /> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Single)| 
            <summary>
            Creates a new instruction with a <see cref="T:System.Single" /> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Double)| 
            <summary>
            Creates a new instruction with a <see cref="T:System.Double" /> operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.String)| 
            <summary>
            Creates a new instruction with a string operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="s">The string</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,Z0.CilSpecs.Instruction)| 
            <summary>
            Creates a new instruction with an instruction target operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="target">Target instruction</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Collections.Generic.IList{Z0.CilSpecs.Instruction})| 
            <summary>
            Creates a new instruction with an instruction target list operand
            </summary>
            <param name="opCode">The opcode</param>
            <param name="targets">The targets</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.CreateLdcI4(System.Int32)| 
            <summary>
            Creates a <c>ldci4</c> instruction
            </summary>
            <param name="value">Operand value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.Instruction.GetSize                 | 
            <summary>
            Gets the size in bytes of the instruction
            </summary>
            <returns></returns>
        
| M:Z0.CilSpecs.Instruction.IsLeave                 | 
            <summary>
            Checks whether it's one of the <c>leave</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsBr                    | 
            <summary>
            Checks whether it's one of the <c>br</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsBrfalse               | 
            <summary>
            Checks whether it's one of the <c>brfalse</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsBrtrue                | 
            <summary>
            Checks whether it's one of the <c>brtrue</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsConditionalBranch     | 
            <summary>
            Checks whether it's one of the conditional branch instructions (bcc, brtrue, brfalse)
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsLdcI4                 | 
            <summary>
            Checks whether this is one of the <c>ldc.i4</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Instruction.GetLdcI4Value           | 
            <summary>
            Returns a <c>ldc.i4</c> instruction's operand
            </summary>
            <returns>The integer value</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="F:Z0.CilSpecs.Instruction.OpCode" /> isn't one of the
            <c>ldc.i4</c> opcodes</exception>
        
| M:Z0.CilSpecs.Instruction.IsLdarg                 | 
            <summary>
            Checks whether it's one of the <c>ldarg</c> instructions, but does <c>not</c> check
            whether it's one of the <c>ldarga</c> instructions.
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsLdloc                 | 
            <summary>
            Checks whether it's one of the <c>ldloc</c> instructions, but does <c>not</c> check
            whether it's one of the <c>ldloca</c> instructions.
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsStarg                 | 
            <summary>
            Checks whether it's one of the <c>starg</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Instruction.IsStloc                 | 
            <summary>
            Checks whether it's one of the <c>stloc</c> instructions
            </summary>
        
| M:Z0.CilSpecs.Extensions.GetOpCode(Z0.CilSpecs.Instruction)| 
            <summary>
            Gets the opcode or <see cref="F:Z0.CilSpecs.OpCodes.UNKNOWN1" /> if <paramref name="self" /> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        
| M:Z0.CilSpecs.Extensions.GetOperand(Z0.CilSpecs.Instruction)| 
            <summary>
            Gets the operand or <c>null</c> if <paramref name="self" /> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        
| M:Z0.CilSpecs.Extensions.GetOffset(Z0.CilSpecs.Instruction)| 
            <summary>
            Gets the offset or 0 if <paramref name="self" /> is <c>null</c>
            </summary>
            <param name="self">this</param>
            <returns></returns>
        
| M:Z0.CilSpecs.Extensions.ToOpCode(Z0.CilSpecs.Code)| 
            <summary>
            Converts a <see cref="T:Z0.CilSpecs.Code" /> to an <see cref="T:Z0.CilSpecs.OpCode" />
            </summary>
            <param name="code">The code</param>
            <returns>A <see cref="T:Z0.CilSpecs.OpCode" /> or <c>null</c> if it's invalid</returns>
        
| T:Z0.CilSpecs.MethodImplAttributes                | 
            <summary>
            Method impl attributes, see CorHdr.h/CorMethodImpl
            </summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.CodeTypeMask   | 
            <summary>Flags about code type.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.IL             | 
            <summary>Method impl is IL.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.Native         | 
            <summary>Method impl is native.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.OPTIL          | 
            <summary>Method impl is OPTIL</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.Runtime        | 
            <summary>Method impl is provided by the runtime.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.ManagedMask    | 
            <summary>Flags specifying whether the code is managed or unmanaged.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.Unmanaged      | 
            <summary>Method impl is unmanaged, otherwise managed.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.Managed        | 
            <summary>Method impl is managed.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.ForwardRef     | 
            <summary>Indicates method is defined; used primarily in merge scenarios.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.PreserveSig    | 
            <summary>Indicates method sig is not to be mangled to do HRESULT conversion.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.InternalCall   | 
            <summary>Reserved for internal use.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.Synchronized   | 
            <summary>Method is single threaded through the body.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.NoInlining     | 
            <summary>Method may not be inlined.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.AggressiveInlining| 
            <summary>Method should be inlined if possible.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.NoOptimization | 
            <summary>Method may not be optimized.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.AggressiveOptimization| 
            <summary>Method may contain hot code and should be aggressively optimized.</summary>
        
| F:Z0.CilSpecs.MethodImplAttributes.SecurityMitigations| 
            <summary>The JIT compiler should look for security mitigation attributes, such as the user-defined System.Runtime.CompilerServices.SecurityMitigationsAttribute. If found, the JIT compiler applies any related security mitigations. Available starting with .NET Framework 4.8.</summary>
        
| T:Z0.CilSpecs.OpCode                              | 
            <summary>
            A CIL opcode
            </summary>
        
| F:Z0.CilSpecs.OpCode.Name                         | 
            <summary>
            The opcode name
            </summary>
        
| F:Z0.CilSpecs.OpCode.Code                         | 
            <summary>
            The opcode as a <see cref="F:Z0.CilSpecs.OpCode.Code" /> enum
            </summary>
        
| F:Z0.CilSpecs.OpCode.OperandType                  | 
            <summary>
            Operand type
            </summary>
        
| F:Z0.CilSpecs.OpCode.FlowControl                  | 
            <summary>
            Flow control info
            </summary>
        
| F:Z0.CilSpecs.OpCode.OpCodeType                   | 
            <summary>
            Opcode type
            </summary>
        
| F:Z0.CilSpecs.OpCode.StackBehaviourPush           | 
            <summary>
            Push stack behavior
            </summary>
        
| F:Z0.CilSpecs.OpCode.StackBehaviourPop            | 
            <summary>
            Pop stack behavior
            </summary>
        
| P:Z0.CilSpecs.OpCode.Value                        | 
            <summary>
            Gets the value which is compatible with <see cref="P:System.Reflection.Emit.OpCode.Value" />
            </summary>
        
| P:Z0.CilSpecs.OpCode.Size                         | 
            <summary>
            Gets the size of the opcode. It's either 1 or 2 bytes.
            </summary>
        
| M:Z0.CilSpecs.OpCode.ToInstruction                | 
            <summary>
            Creates a new instruction with no operand
            </summary>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.Byte)   | 
            <summary>
            Creates a new instruction with a <see cref="T:System.Byte" /> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.SByte)  | 
            <summary>
            Creates a new instruction with a <see cref="T:System.SByte" /> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.Int32)  | 
            <summary>
            Creates a new instruction with an <see cref="T:System.Int32" /> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.Int64)  | 
            <summary>
            Creates a new instruction with a <see cref="T:System.Int64" /> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.Single) | 
            <summary>
            Creates a new instruction with a <see cref="T:System.Single" /> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.Double) | 
            <summary>
            Creates a new instruction with a <see cref="T:System.Double" /> operand
            </summary>
            <param name="value">The value</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.String) | 
            <summary>
            Creates a new instruction with a string operand
            </summary>
            <param name="s">The string</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(Z0.CilSpecs.Instruction)| 
            <summary>
            Creates a new instruction with an instruction target operand
            </summary>
            <param name="target">Target instruction</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToInstruction(System.Collections.Generic.IList{Z0.CilSpecs.Instruction})| 
            <summary>
            Creates a new instruction with an instruction target list operand
            </summary>
            <param name="targets">The targets</param>
            <returns>A new <see cref="T:Z0.CilSpecs.Instruction" /> instance</returns>
        
| M:Z0.CilSpecs.OpCode.ToString                     | 
            <inheritdoc />
        
| T:Z0.CilSpecs.OpCodes                             | 
            <summary>
            Contains all valid CIL opcodes
            </summary>
        
| F:Z0.CilSpecs.OpCodes.OneByteOpCodes              | 
            <summary>
            All one-byte opcodes
            </summary>
        
| F:Z0.CilSpecs.OpCodes.TwoByteOpCodes              | 
            <summary>
            All two-byte opcodes (first byte is <c>0xFE</c>)
            </summary>
        
| T:Z0.CilSpecs.OpCodeType                          | 
            <summary>
            CIL opcode type
            </summary>
        
| F:Z0.CilSpecs.OpCodeType.Annotation               | 
            <summary />
        
| F:Z0.CilSpecs.OpCodeType.Macro                    | 
            <summary />
        
| F:Z0.CilSpecs.OpCodeType.Nternal                  | 
            <summary />
        
| F:Z0.CilSpecs.OpCodeType.Objmodel                 | 
            <summary />
        
| F:Z0.CilSpecs.OpCodeType.Prefix                   | 
            <summary />
        
| F:Z0.CilSpecs.OpCodeType.Primitive                | 
            <summary />
        
| T:Z0.CilSpecs.OperandType                         | 
            <summary>
            CIL opcode operand type
            </summary>
        
| F:Z0.CilSpecs.OperandType.InlineBrTarget          | 
            <summary>4-byte relative instruction offset</summary>
        
| F:Z0.CilSpecs.OperandType.InlineField             | 
            <summary>4-byte field token (<see cref="!:Table.Field" /> or <see cref="!:Table.MemberRef" />)</summary>
        
| F:Z0.CilSpecs.OperandType.InlineI                 | 
            <summary>int32</summary>
        
| F:Z0.CilSpecs.OperandType.InlineI8                | 
            <summary>int64</summary>
        
| F:Z0.CilSpecs.OperandType.InlineMethod            | 
            <summary>4-byte method token (<see cref="!:Table.Method" />, <see cref="!:Table.MemberRef" />
            or <see cref="!:Table.MethodSpec" />)</summary>
        
| F:Z0.CilSpecs.OperandType.InlineNone              | 
            <summary>No operand</summary>
        
| F:Z0.CilSpecs.OperandType.InlinePhi               | 
            <summary>Never used</summary>
        
| F:Z0.CilSpecs.OperandType.InlineR                 | 
            <summary>64-bit real</summary>
        
| F:Z0.CilSpecs.OperandType.NOT_USED_8              | 
            <summary />
        
| F:Z0.CilSpecs.OperandType.InlineSig               | 
            <summary>4-byte method sig token (<see cref="!:Table.StandAloneSig" />)</summary>
        
| F:Z0.CilSpecs.OperandType.InlineString            | 
            <summary>4-byte string token (<c>0x70xxxxxx</c>)</summary>
        
| F:Z0.CilSpecs.OperandType.InlineSwitch            | 
            <summary>4-byte count N followed by N 4-byte relative instruction offsets</summary>
        
| F:Z0.CilSpecs.OperandType.InlineTok               | 
            <summary>4-byte token (<see cref="!:Table.Field" />, <see cref="!:Table.MemberRef" />,
            <see cref="!:Table.Method" />, <see cref="!:Table.MethodSpec" />, <see cref="!:Table.TypeDef" />,
            <see cref="!:Table.TypeRef" /> or <see cref="!:Table.TypeSpec" />)</summary>
        
| F:Z0.CilSpecs.OperandType.InlineType              | 
            <summary>4-byte type token (<see cref="!:Table.TypeDef" />, <see cref="!:Table.TypeRef" /> or
            <see cref="!:Table.TypeSpec" />)</summary>
        
| F:Z0.CilSpecs.OperandType.InlineVar               | 
            <summary>2-byte param/local index</summary>
        
| F:Z0.CilSpecs.OperandType.ShortInlineBrTarget     | 
            <summary>1-byte relative instruction offset</summary>
        
| F:Z0.CilSpecs.OperandType.ShortInlineI            | 
            <summary>1-byte sbyte (<see cref="F:Z0.CilSpecs.Code.Ldc_I4_S" />) or byte (the rest)</summary>
        
| F:Z0.CilSpecs.OperandType.ShortInlineR            | 
            <summary>32-bit real</summary>
        
| F:Z0.CilSpecs.OperandType.ShortInlineVar          | 
            <summary>1-byte param/local index</summary>
        
| T:Z0.CilSpecs.StackBehaviour                      | 
            <summary>
            CIL opcode stack behavior
            </summary>
        
| F:Z0.CilSpecs.StackBehaviour.Pop0                 | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pop1                 | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pop1_pop1            | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi                 | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi_pop1            | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi_popi            | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi_popi8           | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi_popi_popi       | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi_popr4           | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popi_popr8           | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref               | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_pop1          | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi          | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi_popi     | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi_popi8    | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi_popr4    | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi_popr8    | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi_popref   | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Push0                | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Push1                | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Push1_push1          | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pushi                | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pushi8               | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pushr4               | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pushr8               | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Pushref              | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Varpop               | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Varpush              | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.Popref_popi_pop1     | 
            <summary />
        
| F:Z0.CilSpecs.StackBehaviour.PopAll               | 
            <summary />
        
| M:Z0.Clr.type``1(System.Type)                     | 
            <summary>
            Embeds a clr type descriptor within a parametric data adapter
            </summary>
            <param name="src">The source property</param>
            <typeparam name="T">The adapter parameter</typeparam>
        
| M:Z0.Clr.property``1(System.Reflection.PropertyInfo)| 
            <summary>
            Embeds a clr property descriptor within a parametric data adapter
            </summary>
            <param name="src">The source property</param>
            <typeparam name="T">The adapter parameter</typeparam>
        
| T:Z0.ClrEnum`1                                    | 
            <summary>
            Represents a parametrically-identified clr enum
            </summary>
        
| T:Z0.ClrStruct`1                                  | 
            <summary>
            Represents a parametrically-identified clr struct
            </summary>
        
| T:Z0.ClrType`1                                    | 
            <summary>
            Represents a parametrically-identified clr type
            </summary>
        
| T:Z0.IClrEnum                                     | 
            <summary>
            Characterizes a model of a clr enum type
            </summary>
        
| T:Z0.IClrEnum`1                                   | 
            <summary>
            Characterizes an F-bound polyorphic enum model reification
            </summary>
            <typeparam name="M">The reifying type</typeparam>
        
| T:Z0.IClrEnum`2                                   | 
            <summary>
            Characterizes a subject-parametric type model
            </summary>
            <typeparam name="M">The reified model type</typeparam>
            <typeparam name="T">The subject of the model</typeparam>
        
| T:Z0.IClrEnum`3                                   | 
            <summary>
            Characterizes an F-bound polymorphic and subject-parametric enum model
            </summary>
            <typeparam name="X">The reifying type</typeparam>
            <typeparam name="M">The reifying type of the equivalent non-parametric model</typeparam>
            <typeparam name="T">The subject of the model</typeparam>
        
| T:Z0.IClrRaw                                      | 
            <summary>
            Characterizes a model of an unmanaged type
            </summary>
        
| T:Z0.IClrRaw`1                                    | 
            <summary>
            Characterizes an F-bound polyorphic unmanaged type model reification
            </summary>
            <typeparam name="M">The reifying type</typeparam>
        
| T:Z0.IClrRaw`2                                    | 
            <summary>
            Characterizes a subject-parametric model of an unmanaged type
            </summary>
            <typeparam name="M">The reified model type</typeparam>
            <typeparam name="T">The subject of the model</typeparam>
        
| T:Z0.IClrRaw`3                                    | 
            <summary>
            Characterizes an F-bound polymorphic and subject-parametric model of an unmanaged type
            </summary>
            <typeparam name="X">The reifying type</typeparam>
            <typeparam name="M">The reifying type of the equivalent non-parametric model</typeparam>
            <typeparam name="T">The subject of the model</typeparam>
        
| T:Z0.IClrType                                     | 
            <summary>
            Characterizes a model of a CLR type
            </summary>
        
| P:Z0.IClrType.IsEmpty                             | 
            <summary>
            Indicates whether the model is empty and thus models nothing
            </summary>
        
| P:Z0.IClrType.NestedTypes                         | 
            <summary>
            Models of the types nested within the subject, if any
            </summary>
        
| T:Z0.IClrType`1                                   | 
            <summary>
            Characterizes an F-bound polyorphic type model reification
            </summary>
            <typeparam name="M">The reifying type</typeparam>
        
| T:Z0.IClrType`2                                   | 
            <summary>
            Characterizes a subject-parametric type model
            </summary>
            <typeparam name="M">The reified model type</typeparam>
            <typeparam name="T">The subject of the model</typeparam>
        
| P:Z0.IClrType`2.Untyped                           | 
            <summary>
            The equivalent non-parametric model
            </summary>
        
| T:Z0.IClrType`3                                   | 
            <summary>
            Characterizes an F-bound polymorphic and subject-parametric type model
            </summary>
            <typeparam name="X">The reifying type</typeparam>
            <typeparam name="M">The reifying type of the equivalent non-parametric model</typeparam>
            <typeparam name="T">The subject of the model</typeparam>
        
| T:Z0.IClrStruct                                   | 
            <summary>
            Characterizes a model of a struct type
            </summary>
        
| T:Z0.IClrClass                                    | 
            <summary>
            Characterizes a model of a class type
            </summary>
        
| T:Z0.IClrDelegate                                 | 
            <summary>
            Characterizes a model of a delegate type
            </summary>
        
| F:Z0.ModifierFacetKind.Const                      | 
            <summary>
            Member is const
            </summary>    
        
| F:Z0.ModifierFacetKind.Static                     | 
            <summary>
            Type or member is static
            </summary>    
        
| F:Z0.ArtifactFacetKind.Const                      | 
            <summary>
            Member is const
            </summary>    
        
| F:Z0.ArtifactFacetKind.Static                     | 
            <summary>
            Type or member is static
            </summary>    
        
| F:Z0.ArtifactFacetKind.Instance                   | 
            <summary>
            Member is non-static
            </summary>    
        
| F:Z0.ArtifactFacetKind.Public                     | 
            <summary>
            Access to target is unrestricted
            </summary>    
        
| F:Z0.ArtifactFacetKind.Private                    | 
            <summary>
            Target is accessible from the containing type
            </summary>    
        
| F:Z0.ArtifactFacetKind.Protected                  | 
            <summary>
            Target is accessible from the declaring type or subtypes
            </summary>    
        
| F:Z0.ArtifactFacetKind.Internal                   | 
            <summary>
            Target is accessible from the declaring assembly
            </summary>    
        
| F:Z0.ArtifactFacetKind.ProtectedInternal          | 
            <summary>
            Target is accessible from the current assembly or from types that are derived from the containing class
            </summary>    
        
| F:Z0.ArtifactFacetKind.PrivateProtected           | 
            <summary>
            Target is accessible from the containing class or types derived from the containing class within the current assembly
            </summary>    
        
| T:Z0.AsciCodeCover                                | 
            <summary>
            Covers an asci code sequence of length 1
            </summary>
        
| T:Z0.AsciNull                                     | 
            <summary>
            Stateless polytype that implicitly converts to the asci null defined for a reified asci sequence
            </summary>
        
| F:Z0.AsciResourceSet`1.Name                       | 
            <summary>
            The resource set name
            </summary>
        
| P:Z0.AsciResourceSet`1.EntryCount                 | 
            <summary>
            The resource entry count
            </summary>
        
| M:Z0.AsciResourceSet`1.Entry(System.Int32)        | 
            <summary>
            Retrives an index-identified resource
            </summary>
            <param name="index">The resource index in the range [0..Count-1]</param>
        
| P:Z0.AsciResourceSet`1.Item(System.Int32)         | 
            <summary>
            Retrives an index-identified resource
            </summary>
            <param name="index">The resource index in the range [0..Count-1]</param>
        
| T:Z0.AppFileExt                                   | 
            <summary>
            Defines widely-used file extensions and a basic extension api
            </summary>
        
| M:Z0.AppFileExt.Ext(System.String)                | 
            <summary>
            Defines a file extension of length 4 or less - and should not include a leading '.'
            </summary>
            <param name="src">The extension name</param>
        
| M:Z0.AppFileExt.Ext(Z0.N8,System.String)          | 
            <summary>
            Defines a file extension of length 8 or or less - and should not include a leading '.'
            </summary>
            <param name="src">The extension name</param>
        
| M:Z0.AppFileExt.Ext(Z0.N16,System.String)         | 
            <summary>
            Defines a file extension of length 16 or or less - and should not include a leading '.'
            </summary>
            <param name="src">The extension name</param>
        
| T:Z0.FileExt                                      | 
            <summary>
            Defines an asci4 file extension
            </summary>
        
| M:Z0.FileExt.Define(System.String)                | 
            <summary>
            Defines a file extension of length 4 or less - and should not include a leading '.'
            </summary>
            <param name="src">The extension name</param>
        
| T:Z0.FileExt`1                                    | 
            <summary>
            Defines an asci-parametric file extension, for when 4 characters just won't cut it
            </summary>
        
| T:Z0.asci16                                       | 
            <summary>
            Defines an asci code sequence of length 16
            </summary>
        
| T:Z0.asci2                                        | 
            <summary>
            Defines an asci code sequence of length 2
            </summary>
        
| T:Z0.asci32                                       | 
            <summary>
            Defines an asci code sequence of length 32
            </summary>
        
| T:Z0.asci4                                        | 
            <summary>
            Defines an asci code sequence of length 4
            </summary>
        
| T:Z0.asci5                                        | 
            <summary>
            Defines an asci code sequence of length 5
            </summary>
        
| T:Z0.asci8                                        | 
            <summary>
            Defines a 64-bit asci code sequence of length 8
            </summary>
        
| M:Z0.asci.code(Z0.UpperCased,Z0.HexDigit)         | 
            <summary>
            Returns the upper-case hex code for a specified digit
            </summary>
            <param name="case">The case selector</param>
            <param name="index">The digit value</param>
            <remarks>movzx eax,dl -&gt; movsxd rax,eax -&gt; mov rdx,28b57e0aca9h -&gt; movzx eax,byte ptr [rax+rdx] </remarks>
        
| M:Z0.asci.code(Z0.LowerCased,Z0.HexDigit)         | 
            <summary>
            Returns the lower-case hex code for a specified digit
            </summary>
            <param name="case">The case selector</param>
            <param name="index">The digit value</param>
            <remarks>movzx eax,dl -&gt; movsxd rax,eax -&gt; mov rdx,28b57e0aed9h -&gt; movzx eax,byte ptr [rax+rdx]</remarks>
        
| M:Z0.asci.codes(System.ReadOnlySpan{System.Byte},Z0.UpperCased,System.Span{Z0.HexCode})| 
            <summary>
            Projects a bytespan into a codespan
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The hexcode target</param>
        
| M:Z0.asci.codes(System.ReadOnlySpan{System.Byte},System.Span{Z0.HexCode})| 
            <summary>
            Projects a bytespan into a codespan
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The hexcode target</param>
        
| M:Z0.asci.digit(Z0.Base16,Z0.LowerCased,System.Char)| 
            <summary>
            Computes the numeric value in in the range [0,..F] identified by a lowercase hex symbol
            </summary>
            <param name="src">The source symbol</param>
        
| M:Z0.asci.digit(Z0.Base16,Z0.UpperCased,System.Char)| 
            <summary>
            Computes the numeric value in in the range [0,..F] identified by a lowercase hex symbol
            </summary>
            <param name="src">The source symbol</param>
        
| M:Z0.asci.digit(Z0.HexSymLo)                      | 
            <summary>
            Computes the numeric value in in the range [0,..F] identified by a lowercase hex symbol
            </summary>
            <param name="src">The source symbol</param>
        
| M:Z0.asci.digit(Z0.HexSymUp)                      | 
            <summary>
            Computes the numeric value in in the range [0,..F] identified by an uppercase hex symbol
            </summary>
            <param name="src">The source symbol</param>
        
| M:Z0.asci.digits(Z0.Perm4L,System.Span{System.Byte})| 
            <summary>
            Computes the digigs corresponding to each 2-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm4L,Z0.NatSpan{Z0.N4,System.Byte}@)| 
            <summary>
            Computes the digigs corresponding to each 2-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm4L)                       | 
            <summary>
            Computes the digigs corresponding to each 2-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm8L,System.Span{Z0.OctalDigit})| 
            <summary>
            Computes the digits corresponding to each 3-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm8L,Z0.NatSpan{Z0.N8,Z0.OctalDigit}@)| 
            <summary>
            Computes the digits corresponding to each 3-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm8L)                       | 
            <summary>
            Computes the digits corresponding to each 3-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm16L,System.Span{Z0.HexDigit})| 
            <summary>
            Computes the digits corresponding to each 4-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm16L,Z0.NatSpan{Z0.N16,Z0.HexDigit}@)| 
            <summary>
            Computes the digits corresponding to each 4-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.digits(Z0.Perm16L)                      | 
            <summary>
            Computes the digits corresponding to each 4-bit segment of the permutation spec
            </summary>
            <param name="src">The perm spec</param>
        
| M:Z0.asci.encode``1(System.ReadOnlySpan{System.Char},System.Span{``0})| 
            <summary>
            Encodes a sequence of source characters and stores a result in a caller-supplied 
            T-parametric target with cells assumed to be at least 16 bits wide
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target</param>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.asci.encode(System.Char)                     | 
            <summary>
            Encodes a single character
            </summary>
            <param name="src">The character to encode</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.String},System.Span{System.Byte})| 
            <summary>
            Encodes each source string and packs the result into the target
            </summary>
            <param name="src">The encoding source</param>
            <param name="dst">The encoding target</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.String},System.Span{System.Byte},System.Byte)| 
            <summary>
            Encodes each source string and packs the result into the target, interspersed by a supplied delimiter
            </summary>
            <param name="src">The encoding source</param>
            <param name="dst">The encoding target</param>
        
| M:Z0.asci.encode(System.Char@,Z0.Hex1,Z0.asci2@)  | 
            <summary>
            Populates an asci target with a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of characters to encode</param>
            <param name="dst">The receiver</param>
        
| M:Z0.asci.encode(System.Char@,Z0.Hex2,Z0.asci4@)  | 
            <summary>
            Populates an asci target with a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of characters to encode</param>
            <param name="dst">The receiver</param>
        
| M:Z0.asci.encode(System.Char@,Z0.Hex3,Z0.asci8@)  | 
            <summary>
            Populates an asci target with a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of characters to encode</param>
            <param name="dst">The receiver</param>
        
| M:Z0.asci.encode(System.Char@,Z0.Hex4,Z0.asci16@) | 
            <summary>
            Populates an asci target with a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of characters to encode</param>
            <param name="dst">The receiver</param>
        
| M:Z0.asci.encode(System.Char@,Z0.Hex5,Z0.asci32@) | 
            <summary>
            Populates an asci target with a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of characters to encode</param>
            <param name="dst">The receiver</param>
        
| M:Z0.asci.encode(System.Char@,Z0.Hex6,Z0.asci64@) | 
            <summary>
            Populates an asci target with a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of characters to encode</param>
            <param name="dst">The receiver</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},System.Span{Z0.AsciCharCode})| 
            <summary>
            Fills a caller-supplied target span with asci codes corresponding to characters in a source span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The data target</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},System.Int32,System.Int32,System.Span{Z0.AsciCharCode})| 
            <summary>
            Encodes a specified number of source characters
            </summary>
            <param name="src">The data source</param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="dst">The data target</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci2@)| 
            <summary>
            Populates a 2-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci4@)| 
            <summary>
            Populates a 4-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci5@)| 
            <summary>
            Populates a 5-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci8@)| 
            <summary>
            Populates an 8-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci16@)| 
            <summary>
            Populates a 16-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci32@)| 
            <summary>
            Populates a 32-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci64@)| 
            <summary>
            Populates a 64-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target block</param>
        
| M:Z0.asci.encode(Z0.N2,System.ReadOnlySpan{System.Char})| 
            <summary>
            Populates a 2-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.asci.encode(Z0.N4,System.ReadOnlySpan{System.Char})| 
            <summary>
            Populates a 4-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.asci.encode(Z0.N8,System.ReadOnlySpan{System.Char})| 
            <summary>
            Populates an 8-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.asci.encode(Z0.N16,System.ReadOnlySpan{System.Char})| 
            <summary>
            Populates a 16-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.asci.encode(Z0.N32,System.ReadOnlySpan{System.Char})| 
            <summary>
            Populates a 32-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.asci.encode(Z0.N64,System.ReadOnlySpan{System.Char})| 
            <summary>
            Populates a 32-code asci block from the leading cells of a character span
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.asci.first(System.ReadOnlySpan{System.Char},System.Char)| 
            <summary>
            Returns the index of the first source character that matches a target character
            </summary>
            <param name="src">The data source</param>
            <param name="match">The character to match</param>
        
| M:Z0.asci.length(Z0.asci2@)                       | 
            <summary>
            Counts the number of characters that precede a null terminator, if any
            </summary>
            <param name="src">The asci source</param>
        
| M:Z0.asci.length(Z0.asci4@)                       | 
            <summary>
            Counts the number of characters that precede a null terminator, if any
            </summary>
            <param name="src">The asci source</param>
        
| M:Z0.asci.length(Z0.asci8@)                       | 
            <summary>
            Counts the number of characters that precede a null terminator, if any
            </summary>
            <param name="src">The asci source</param>
        
| M:Z0.asci.length(Z0.asci16@)                      | 
            <summary>
            Counts the number of characters that precede a null terminator, if any
            </summary>
            <param name="src">The asci source</param>
        
| M:Z0.asci.length(Z0.asci32@)                      | 
            <summary>
            Counts the number of characters that precede a null terminator, if any
            </summary>
            <param name="src">The asci source</param>
        
| M:Z0.asci.length(Z0.asci64@)                      | 
            <summary>
            Counts the number of characters that precede a null terminator, if any
            </summary>
            <param name="src">The asci source</param>
        
| M:Z0.asci.lowercase(System.Char)                  | 
            <summary>
            Transforms an uppercase character [A..Z] to the corresponding lowercase charcter [a..z];
            if the source character is not in the letter domain, the input is returned unharmed
            </summary>
            <param name="src">The source character</param>
        
| M:Z0.asci.render(System.ReadOnlySpan{Z0.BinaryDigit},System.Span{System.Char})| 
            <summary>
            Formats a span of binary digits as a contiguous block
            </summary>
            <param name="src">The source digits</param>
        
| M:Z0.asci.render(System.ReadOnlySpan{Z0.DeciDigit},System.Span{System.Char})| 
            <summary>
            Formats a span of hex digits as a contiguous block
            </summary>
            <param name="src">The source digits</param>
        
| M:Z0.asci.render(System.ReadOnlySpan{Z0.HexDigit},System.Span{System.Char})| 
            <summary>
            Formats a span of hex digits as a contiguous block
            </summary>
            <param name="src">The source digits</param>
        
| M:Z0.asci.spec``3(``0[])                          | 
            <summary>
            Defines a symbol spec
            </summary>
            <param name="symbols"></param>
            <typeparam name="S">The symbol data type</typeparam>
            <typeparam name="T">The symbol domain type</typeparam>
            <typeparam name="N">The symbol bit-width type</typeparam>
        
| M:Z0.asci.uppercase(System.Char)                  | 
            <summary>
            if given a lowercase character [a..z], produces the corresponding uppercase charcter [A..z]
            Otherwise, returns the input unharmed
            </summary>
            <param name="src">The source character</param>
        
| M:Z0.asci.vasci(Z0.W256,System.SByte,Z0.Hex4)     | 
            <summary>
            Loads up to 16 asci scalar symbols [offset, offset + count]
            </summary>
            <param name="count">The number of symbols to load</param>
        
| M:Z0.asci.vasci(Z0.W512,System.SByte,Z0.Hex5)     | 
            <summary>
            Loads up to 32 asci scalar symbols [offset, offset + count]
            </summary>
            <param name="count">The number of symbols to load</param>
        
| M:Z0.asci.vsym(System.Int32)                      | 
            <summary>
            Loads 16 asci symbols beginning at a specified index
            </summary>
            <param name="index">The index of the first code</param>
        
| T:Z0.Digital                                      | 
            <summary>
            Defines operations over character digits
            </summary>
        
| M:Z0.Digital.digit(System.Char)                   | 
            <summary>
            Converts a character in the inclusive range [0,9] to the corresponding number in the same range
            </summary>
            <param name="c">The digit character</param>
        
| M:Z0.Digital.digit8(System.Char)                  | 
            <summary>
            Converts a character in the inclusive range [0,9] to the corresponding number in the same range
            </summary>
            <param name="c">The digit character</param>
        
| M:Z0.Digital.digit8(System.UInt16,System.Int32)   | 
            <summary>
            Extracts an index-identified encoded digit
            </summary>
            <param name="src">The digit source</param>
            <param name="index">An integer in the inclusive range [0, 1] that identifies the digit to extract</param>
        
| M:Z0.Digital.digit8(System.UInt32,System.Int32)   | 
            <summary>
            Extracts an index-identified encoded digit
            </summary>
            <param name="src">The digit source</param>
            <param name="index">An integer in the inclusive range [0, 3] that identifies the digit to extract</param>
        
| M:Z0.Digital.digit8(System.UInt64,System.Int32)   | 
            <summary>
            Extracts an index-identified encoded digit
            </summary>
            <param name="src">The digit source</param>
            <param name="index">An integer in the inclusive range [0, 7] that identifies the digit to extract</param>
        
| M:Z0.Digital.digits(System.Char,System.Char)      | 
            <summary>
            Encodes two decimal digits d := 0x[c1][c0] for characters c2, c1 in the inclusive range [0,9]
            </summary>
            <param name="c1">The source for digit 1, the most significant digit</param>
            <param name="c0">The source for digit 0, the least significant digit</param>
        
| M:Z0.Digital.digits(System.Char,System.Char,System.Char)| 
            <summary>
            Encodes three decimal digits d := 0x[c2][c1][c0] for characters c2, c1, c0 in the inclusive range [0,9]
            </summary>
            <param name="c2">The source for digit 2, the most significant digit</param>
            <param name="c1">The source for digit 1</param>
            <param name="c0">The source for digit 0, the least significant digit</param>
        
| M:Z0.Digital.digits(System.Char,System.Char,System.Char,System.Char)| 
            <summary>
            Encodes four decimal digits d := 0x[c3][c2][c1][c0] for characters c3, c2, c1, c0 in the inclusive range [0,9]
            </summary>
            <param name="c3">The source for digit 3, the most significant digit</param>
            <param name="c2">The source for digit 2</param>
            <param name="c1">The source for digit 1</param>
            <param name="c0">The source for digit 0, the least significant digit</param>
        
| M:Z0.Digital.digits(System.Char,System.Char,System.Char,System.Char,System.Char)| 
            <summary>
            Encodes five decimal digits d := 0x[c4][c3][c2][c1][c0] for characters c4, c3, c2, c1, c0 in the inclusive range [0,9]
            </summary>
            <param name="c4">The source for digit 4, the most significant digit</param>
            <param name="c3">The source for digit 3</param>
            <param name="c2">The source for digit 2</param>
            <param name="c1">The source for digit 1</param>
            <param name="c0">The source for digit 0, the least significant digit</param>
        
| M:Z0.Digital.digits(System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)| 
            <summary>
            Encodes eight decimal digits d := 0x[c7][c6][c5][c4][c3][c2][c1][c0] for characters c7, c6, c5, c4, c3, c2, c1, c0 in the inclusive range [0,9]
            </summary>
            <param name="c7">The source for digit 7, the most significant digit</param>
            <param name="c6">The source for digit 6</param>
            <param name="c5">The source for digit 5</param>
            <param name="c4">The source for digit 4</param>
            <param name="c3">The source for digit 3</param>
            <param name="c2">The source for digit 2</param>
            <param name="c1">The source for digit 1</param>
            <param name="c0">The source for digit 0, the least significant digit</param>
        
| M:Z0.Digital.digit(System.UInt64,System.Int32)    | 
            <summary>
            Extracts an index-identified encoded digit
            </summary>
            <param name="src">The digit source</param>
            <param name="index">An integer in the inclusive range [0, 7] that identifies the digit to extract</param>
        
| M:Z0.Digital.digits(System.UInt64,System.Byte@,System.Byte@)| 
            <summary>
            Extracts two encoded digits
            </summary>
            <param name="src">The digit source</param>
            <param name="d1">The most significant digit</param>
            <param name="d0">The least significant digit</param>
        
| M:Z0.Digital.lo(System.UInt64,System.Byte@,System.Byte@,System.Byte@,System.Byte@)| 
            <summary>
            Extracts the four lo digits
            </summary>
            <param name="src">The encoded digit source</param>
            <param name="d3">The target for the fourth and most-significant digit</param>
            <param name="d2">The target for the third digit</param>
            <param name="d1">The target for the second digit</param>
            <param name="d0">The target for the first and least-significant digit</param>
        
| M:Z0.Digital.hi(System.UInt64,System.Byte@,System.Byte@,System.Byte@,System.Byte@)| 
            <summary>
            Extracts the four hi digits
            </summary>
            <param name="src">The encoded digit source</param>
            <param name="d7">The target for the eighth and most-significant digit</param>
            <param name="d6"></param>
            <param name="d5"></param>
            <param name="d4"></param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N1,System.Byte@)| 
            <summary>
            Extracts the first digit from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N2,System.Byte@)| 
            <summary>
            Extracts the first two digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N3,System.Byte@)| 
            <summary>
            Extracts the first three digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N4,System.Byte@)| 
            <summary>
            Extracts the first four digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N5,System.Byte@)| 
            <summary>
            Extracts the first five digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N6,System.Byte@)| 
            <summary>
            Extracts the first six digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N7,System.Byte@)| 
            <summary>
            Extracts the first seven digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.Digital.digits(System.UInt64,Z0.N8,System.Byte@)| 
            <summary>
            Extracts all eight digits from the source
            </summary>
            <param name="src">The digit source</param>
            <param name="count">The digit count selector</param>
            <param name="dst">The digit receiver</param>
        
| M:Z0.AsciResource.resource``1(Z0.asci32,``0,System.Nullable{Z0.asci64})| 
            <summary>
            Creates an asci resource
            </summary>
            <param name="name">The resource name</param>
            <param name="content">The resource data</param>
            <param name="description">The resource description</param>
            <typeparam name="A">The asci element type</typeparam>
        
| M:Z0.AsciResource.resource``1(``0,System.Nullable{Z0.asci64})| 
            <summary>
            Creates an eponymous asci resource
            </summary>
            <param name="content">The resource data</param>
            <param name="description">The resource description</param>
            <typeparam name="A">The asci element type</typeparam>
        
| M:Z0.AsciTest.digit(System.Char)                  | 
            <summary>
            Tests whether a character symbol is one of '0'..'9'
            </summary>
            <param name="src">The symbol to test</param>
        
| M:Z0.AsciTest.letter(Z0.UpperCased,System.Char)   | 
            <summary>
            Tests whether a character is an uppercase asci letter character
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.letter(Z0.LowerCased,System.Char)   | 
            <summary>
            Tests whether a character is a lowercase asci letter character
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.letter(System.Char)                 | 
            <summary>
            Tests whether a character is an asci letter character
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsNumeral(Z0.HexSymLo)              | 
            <summary>
            Tests whether a lowercase hex symbol is a numeral
            </summary>
            <param name="src">The symbol to test</param>
        
| M:Z0.AsciTest.IsNumeral(Z0.HexSymUp)              | 
            <summary>
            Tests whether a uppercas hex symbol is a numeral
            </summary>
            <param name="src">The symbol to test</param>
        
| M:Z0.AsciTest.IsLetter(Z0.HexSymLo)               | 
            <summary>
            Tests whether a lowercase hex symbol is a letter
            </summary>
            <param name="src">The symbol to test</param>
        
| M:Z0.AsciTest.IsLetter(Z0.HexSymUp)               | 
            <summary>
            Tests whether an uppercase hex symbol is a letter
            </summary>
            <param name="src">The symbol to test</param>
        
| M:Z0.AsciTest.IsHexDigit(Z0.UpperCased,System.Char)| 
            <summary>
            Determines whether a character is an upper-cased hex digit
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsHexDigit(Z0.LowerCased,System.Char)| 
            <summary>
            Determines whether a character is a lower-cased hex digit
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsHexDigit(System.Char)             | 
            <summary>
            Determines whether a character is a hex digit of any case
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsHexScalar(System.Char)            | 
            <summary>
            Determines whether a character corresponds to one of the lower hex codes
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsHexUpper(System.Char)             | 
            <summary>
            Determines whether a character corresponds to one of the uppercase hex code characters
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsHexLower(System.Char)             | 
            <summary>
            Determines whether a character corresponds to one of the lowercase hex code characters
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.AsciTest.IsSpace(System.Char)                | 
            <summary>
            Tests whether a character is a space
            </summary>
            <param name="src">The symbol to test</param>
        
| M:Z0.AsciTest.IsTab(System.Char)                  | 
            <summary>
            Tests whether a character is a space
            </summary>
            <param name="src">The symbol to test</param>
        
| T:Z0.bit                                          | 
            <summary>
            An anti-succinct representation of a bit 
            </summary>
            <remarks>
            An essay would be required to fully explain why a 32-bit integer is used to 
            encose the content of a single bit. Briefly, it is because its the only way
            to acheive performance characteristics on par with the system-defined bool
            data type. Bool, which is itself predicated on a byte, is a privileged 
            data structure that garners special treatment by the runtime. A user-defined
            type predicated on a byte would not enjoy this status and would endure
            a constant barrage of shifts, movements, etc. from not being 32-bit aligned.
            </remarks>    
        
| P:Z0.bit.Off                                      | 
            <summary>
            Constructs a disabled bit
            </summary>
        
| P:Z0.bit.On                                       | 
            <summary>
            Constructs an enabled bit
            </summary>
        
| M:Z0.bit.test(System.SByte,System.Byte)           | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.Byte,System.Int32)           | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.Int16,System.Int32)          | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.UInt16,System.Int32)         | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.Int32,System.Int32)          | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.Int64,System.Int32)          | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.UInt32,System.Int32)         | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.test(System.UInt64,System.Int32)         | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.bit.set(System.SByte,System.Byte,Z0.bit)     | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.Byte,System.Byte,Z0.bit)      | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.Int16,System.Byte,Z0.bit)     | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.UInt16,System.Byte,Z0.bit)    | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.Int32,System.Byte,Z0.bit)     | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.UInt32,System.Byte,Z0.bit)    | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.Int64,System.Byte,Z0.bit)     | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="pos">The source bit index</param>
            <param name="state">The state with which to align a source bit</param>
        
| M:Z0.bit.set(System.UInt64,System.Byte,Z0.bit)    | 
            <summary>
            Aligns an index-identified source bit with with a suplied state
            </summary>
            <param name="src">The source</param>
            <param name="index">The source bit index</param>
            <param name="value">The state with which to align a source bit</param>
        
| M:Z0.bit.identity(Z0.bit)                         | 
            <summary>
            The identity function
            </summary>
            <param name="b">The source bit</param>
        
| M:Z0.bit.or(Z0.bit,Z0.bit)                        | 
            <summary>
            Computes c = a | b
            </summary>
            <param name="a">The left bit</param>
            <param name="b">The right bit</param>
        
| M:Z0.bit.xor(Z0.bit,Z0.bit)                       | 
            <summary>
            Computes c = a ^ b
            </summary>
            <param name="a">The left bit</param>
            <param name="b">The right bit</param>
        
| M:Z0.bit.not(Z0.bit)                              | 
            <summary>
            Computes c := ~a = !a
            </summary>
            <param name="a">The source bit</param>
        
| M:Z0.bit.nor(Z0.bit,Z0.bit)                       | 
            <summary>
            Computes c := ~ (a | b)
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <remarks>See https://en.wikipedia.org/wiki/Logical_biconditional</remarks>
        
| M:Z0.bit.xnor(Z0.bit,Z0.bit)                      | 
            <summary>
            Computes c := ~ (a ^ b)
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <remarks>See https://en.wikipedia.org/wiki/Logical_biconditional</remarks>
        
| M:Z0.bit.impl(Z0.bit,Z0.bit)                      | 
            <summary>
            Computes c := a -&gt; b := a | ~b
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
            <remarks>See https://en.wikipedia.org/wiki/Material_conditional</remarks>
        
| M:Z0.bit.cimpl(Z0.bit,Z0.bit)                     | 
            <summary>
            Computes the converse implication c := ~a | b
            </summary>
            <param name="a">The first operand</param>
            <param name="b">The second operand</param>
        
| M:Z0.bit.op_True(Z0.bit)                          | 
            <summary>
            Returns true if the bit is enabled, false otherwise
            </summary>
            <param name="b">The bit to test</param>
        
| M:Z0.bit.op_False(Z0.bit)                         | 
            <summary>
            Returns false if the bit is disabled, true otherwise
            </summary>
            <param name="b">The bit to test</param>
        
| M:Z0.bit.op_Implicit(System.Boolean)~Z0.bit       | 
            <summary>
            Implicitly constructs a bit from a bool
            </summary>
            <param name="state">The state of the bit to construct</param>
        
| M:Z0.bit.op_Implicit(Z0.bit)~System.Boolean       | 
            <summary>
            Implicitly constructs a bool from a bit
            </summary>
            <param name="state">The state of the bit to construct</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.Byte          | 
            <summary>
            Defines an explicit bit -&gt; byte conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.SByte         | 
            <summary>
            Defines an explicit bit -&gt; byte conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(System.Byte)~Z0.bit          | 
            <summary>
            Defines an explicit byte -&gt; bit conversion
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.UInt16        | 
            <summary>
            Defines an explicit bit -&gt; ushort conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.Int16         | 
            <summary>
            Defines an explicit bit -&gt; ushort conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(System.UInt16)~Z0.bit        | 
            <summary>
            Defines an explicit ushort -&gt; bit conversion
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.Int32         | 
            <summary>
            Defines an explicit bit -&gt; int conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Implicit(System.Int32)~Z0.bit         | 
            <summary>
            Defines an *implicit* int -&gt; bit conversion to aid sanity retention
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.UInt32        | 
            <summary>
            Defines an explicit bit -&gt; uint conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.Int64         | 
            <summary>
            Defines an explicit bit -&gt; long conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.Single        | 
            <summary>
            Defines an explicit bit -&gt; float conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.Double        | 
            <summary>
            Defines an explicit bit -&gt; double conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(System.UInt32)~Z0.bit        | 
            <summary>
            Defines an explicit uint -&gt; bit conversion
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.bit.op_Explicit(Z0.bit)~System.UInt64        | 
            <summary>
            Defines an explicit bit -&gt; ulong conversion
            </summary>
            <param name="src">The source bit</param>
        
| M:Z0.bit.op_Explicit(System.UInt64)~Z0.bit        | 
            <summary>
            Defines an explicit ulong -&gt; bit conversion
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.bit.op_Addition(Z0.bit,Z0.bit)               | 
            <summary>
            Combines the states of the source bits
            </summary>
            <param name="a">The left bit</param>
            <param name="b">The right bit</param>
        
| M:Z0.bit.op_BitwiseAnd(Z0.bit,Z0.bit)             | 
            <summary>
            Computes the bitwise AND between the operands
            </summary>
            <param name="a">The left bit</param>
            <param name="b">The right bit</param>
        
| M:Z0.bit.op_BitwiseOr(Z0.bit,Z0.bit)              | 
            <summary>
            Computes the bitwise OR between the operands
            </summary>
            <param name="a">The left bit</param>
            <param name="b">The right bit</param>
        
| M:Z0.bit.op_ExclusiveOr(Z0.bit,Z0.bit)            | 
            <summary>
            Computes the bitwise XOR between the operands
            </summary>
            <param name="a">The left bit</param>
            <param name="b">The right bit</param>
        
| M:Z0.bit.op_OnesComplement(Z0.bit)                | 
            <summary>
            Inverts the state of the source bit
            </summary>
            <param name="a">The source bit</param>
        
| M:Z0.bit.op_LogicalNot(Z0.bit)                    | 
            <summary>
            Inverts the state of the source bit
            </summary>
            <param name="a">The source bit</param>
        
| M:Z0.bit.Promote``1                               | 
            <summary>
            Promotes a bit to a numeric value where all target bits are enabled if the state of the
            bit is on; otherwise all target bits are disabled
            </summary>
            <param name="src">The source bit</param>
            <typeparam name="T">The target numeric type</typeparam>
        
| T:Z0.BitField32                                   | 
            <summary>
            Defines an extremely lo-tech 32-bit bitfield
            </summary>
        
| T:Z0.BitField32`1                                 | 
            <summary>
            Defines an extremely lo-tech 32-bit bitfield, as in the non-parametric version,
            but field content is indexed by an enumeration
            </summary>
        
| M:Z0.BitStream.from``1(System.Collections.Generic.IEnumerator{``0})| 
            <summary>
            Transforms an primal enumerator into a bitstream
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.BitStream.from``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Transforms an primal source stream into a bitstream
            </summary>
            <param name="src">The source stream</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.Casts.cast``2(``0@,``1@)                     | 
            <summary>
            Reinterprents a source value through the perpective of another type
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.FunctionInfo.size(System.Reflection.MethodInfo)| 
            <summary>
            Returns the size of the method, if known; otherwise, returns the monoidal zero
            </summary>
            <param name="src">The source method</param>
        
| M:Z0.IFunctionJit.Jit(System.Reflection.MethodInfo,System.Nullable{System.Int32})| 
            <summary>
            Jits the source method and confers its size, if specified
            </summary>
            <param name="src">The method to jit</param>
            <param name="size">The method size, if specified</param>
        
| M:Z0.ILocatedCodeParser.Parse(Z0.LocatedCode)     | 
            <summary>
            Located code in, and perhaps, located code out
            </summary>
            <param name="src">The code to parse</param>
        
| T:Z0.IMemoryExtractor                             | 
            <summary>
            Characterizes a service that extracts encoded data from a given base address
            </summary>
        
| T:Z0.IMemoryReader                                | 
            <summary>
            Characterizes a service reads data from a source address and deposits to caller-supplied targets
            </summary>
        
| T:Z0.DynamicDelegate                              | 
            <summary>
            Encloses a delegate that was manufactured dynamically
            </summary>
        
| F:Z0.DynamicDelegate.Id                           | 
            <summary>
            The delegate identity
            </summary>
        
| F:Z0.DynamicDelegate.SourceMethod                 | 
            <summary>
            The method invoked by the dynamic operator that provides the substance of the operation
            </summary>
        
| F:Z0.DynamicDelegate.TargetMethod                 | 
            <summary>
            The dynamically-generated method that backs the dynamic operator
            </summary>
        
| F:Z0.DynamicDelegate.DynamicOp                    | 
            <summary>
            The dynamic operation
            </summary>
        
| M:Z0.DynamicDelegate.Invoke(System.Object[])      | 
            <summary>
            Invokes the dynamic delegate dynamically
            </summary>
            <param name="args">The arguments to pass to the delegate</param>
        
| M:Z0.DynamicDelegate.As``1                        | 
            <summary>
            The existing delegate, parametrically
            </summary>
            <typeparam name="D">The target delegate type</typeparam>
        
| T:Z0.DynamicDelegate`1                            | 
            <summary>
            Encloses a generic delegate that was manufactured dynamically
            </summary>
        
| F:Z0.DynamicDelegate`1.Id                         | 
            <summary>
            The delegate identity
            </summary>
        
| F:Z0.DynamicDelegate`1.Source                     | 
            <summary>
            The method invoked by the dynamic operator that provides the substance of the operation
            </summary>
        
| F:Z0.DynamicDelegate`1.Target                     | 
            <summary>
            The dynamically-generated method that backs the dynamic operator
            </summary>
        
| F:Z0.DynamicDelegate`1.DynamicOp                  | 
            <summary>
            The dynamic operation
            </summary>
        
| T:Z0.DynamicPointer                               | 
            <summary>
            Encloses a pointer to the native definition of a dynamic delegate
            </summary>
        
| M:Z0.DynamicPointer.pointer(System.Reflection.Emit.DynamicMethod)| 
            <summary>
            Finds the magical function pointer for a dynamic method
            </summary>
            <param name="method">The source method</param>
            <remarks>See https://stackoverflow.com/questions/45972562/c-sharp-how-to-get-runtimemethodhandle-from-dynamicmethod</remarks>
        
| T:Z0.BitDataTypeConverter                         | 
            <summary>
            Conversion provider for the bit data type
            </summary>
        
| M:Z0.Cast.to``2(``0)                              | 
            <summary>
            Unconditionally converts, with much haste and no waste, a value of parametric numeric kind 
            to a value of another parametric numeric kind.
            </summary>
            <param name="src">The soruce value</param>
            <typeparam name="S">The source numeric kind</typeparam>
            <typeparam name="T">The target numeric kind</typeparam>
        
| M:Z0.Delegates.action(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates an action delegate from a method
            </summary>
            <param name="src">The source method</param>
        
| M:Z0.Delegates.type(System.Reflection.MethodInfo) | 
            <summary>
            Infers a delegate type compatible with the signature of a specified methods
            </summary>
            <param name="src">The source method</param>
        
| M:Z0.Delegates.binary``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a binary operator from a method
            </summary>
            <param name="src">The source method</param>
            <param name="host">The host instance if not static</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Delegates.dynamic``1(Z0.OpIdentity,System.Reflection.MethodInfo,System.Reflection.Emit.DynamicMethod)| 
            <summary>
            Creates a parameteric dynamic delegate
            </summary>
            <param name="id">The identity to confer on the result</param>
            <param name="src">The source method</param>
            <param name="dst">The dynamic method</param>
            <typeparam name="D">The target delegate type</typeparam>
        
| M:Z0.Delegates.dynamic(Z0.OpIdentity,System.Reflection.MethodInfo,System.Reflection.Emit.DynamicMethod,System.Type)| 
            <summary>
            Creates a non-parameteric dynamic delegate
            </summary>
            <param name="id">The identity to confer on the result</param>
            <param name="src">The source method</param>
            <param name="dst">The dynamic method</param>
            <param name="@delegate">The target delegate type</param>
        
| M:Z0.Delegates.dynamic(Z0.OpIdentity,System.Reflection.MethodInfo,System.Reflection.Emit.DynamicMethod,System.Delegate)| 
            <summary>
            Creates a non-parameteric dynamic delegate
            </summary>
            <param name="id">The identity to confer on the result</param>
            <param name="src">The source method</param>
            <param name="dst">The dynamic method</param>
            <param name="@delegate">The target delegate type</param>
        
| M:Z0.Delegates.from(System.Reflection.MethodInfo,System.Type,System.Object)| 
            <summary>
            Creates an untyped delegate
            </summary>
            <param name="src">The target method</param>
            <param name="tDelegate">The delegate type</param>
            <param name="host">The host instance if not static</param>
        
| M:Z0.Delegates.from``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a generic delegate
            </summary>
            <param name="src">The target method</param>
            <typeparam name="D">The delegate type</typeparam>
        
| M:Z0.Delegates.func``1(System.Reflection.MethodInfo,``0)| 
            <summary>
            Creates a function delegate of generic arity 1 from a static method
            </summary>
            <param name="src">The source method</param>
            <param name="x0">A representative value for the first argument, used only for type inference</param>
            <typeparam name="X0">The first argument type</typeparam>
        
| M:Z0.Delegates.func``2(System.Reflection.MethodInfo,``0,``1)| 
            <summary>
            Creates a function delegate of generic arity 2 from a static method
            </summary>
            <param name="src">The source method</param>
            <param name="x0">A representative value of the first argument, used only for type inference</param>
            <param name="x1">A representative value of the second argument, used only for type inference</param>
            <typeparam name="X0">The first argument type</typeparam>
            <typeparam name="X1">The second argument type</typeparam>
        
| M:Z0.Delegates.func``3(System.Reflection.MethodInfo,``0,``1,``2)| 
            <summary>
            Creates a function delegate of generic arity 3 from a static method
            </summary>
            <param name="src">The source method</param>
            <param name="x0">A representative value of the first argument, used only for type inference</param>
            <param name="x1">A representative value of the second argument, used only for type inference</param>
            <param name="x2">A representative value of the third argument, used only for type inference</param>
            <typeparam name="X0">The first argument type</typeparam>
            <typeparam name="X1">The second argument type</typeparam>
            <typeparam name="X2">The third argument type</typeparam>
        
| M:Z0.Delegates.func``4(System.Reflection.MethodInfo,``0,``1,``2,``3)| 
            <summary>
            Creates a function delegate of generic arity 4 from a static method
            </summary>
            <param name="src">The source method</param>
            <param name="x0">A representative value of the first argument, used only for type inference</param>
            <param name="x1">A representative value of the second argument, used only for type inference</param>
            <param name="x2">A representative value of the third argument, used only for type inference</param>
            <param name="x3">A representative value of the fourth argument, used only for type inference</param>
            <typeparam name="X0">The first argument type</typeparam>
            <typeparam name="X1">The second argument type</typeparam>
            <typeparam name="X2">The third argument type</typeparam>
            <typeparam name="X3">The fourth argument type</typeparam>
        
| M:Z0.Delegates.sink``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a reception delegate/sink from a method
            </summary>
            <param name="src">The source method</param>
            <param name="host">The host instance if not static</param>
            <typeparam name="T">The reception type</typeparam>
        
| M:Z0.Delegates.source``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates an emitter from a method
            </summary>
            <param name="src">The source method</param>
            <param name="host">The host instance if not static</param>
            <typeparam name="T">The emission type</typeparam>
        
| M:Z0.Delegates.ternary``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a ternary operator from a method
            </summary>
            <param name="src">The source method</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Delegates.unary``1(System.Reflection.MethodInfo,System.Object)| 
            <summary>
            Creates a unary operator from a method
            </summary>
            <param name="src">The source method</param>
            <param name="host">The host instance if not static</param>
            <typeparam name="T">The operand type</typeparam>
        
| M:Z0.Boxy.rebox(System.Object,Z0.NumericKind)     | 
            <summary>
            Uncoditionaly converts a boxed numeric value of one kind to a boxed numeric value of specified kind, if possible.
            If not possible, returns the original value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.Int16,Z0.NumericKind)        | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.UInt16,Z0.NumericKind)       | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.Single,Z0.NumericKind)       | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.Int32,Z0.NumericKind)        | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.UInt32,Z0.NumericKind)       | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.Double,Z0.NumericKind)       | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.Int64,Z0.NumericKind)        | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.UInt64,Z0.NumericKind)       | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.SByte,Z0.NumericKind)        | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.Boxy.box(System.Byte,Z0.NumericKind)         | 
            <summary>
            Converts a numeric source value to a boxed numeric value of specified kind
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target kind</param>
        
| M:Z0.FunctionCil.bytes(System.Reflection.Emit.DynamicMethod)| 
            <summary>
            See https://stackoverflow.com/questions/4148297/resolving-the-tokens-found-in-the-il-from-a-dynamic-method/35711376#35711376
            </summary>
        
| M:Z0.FunctionJit.jit(System.Type)                 | 
            <summary>
            Jits the method declared by a specified type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.FunctionPointer.from(Z0.DynamicDelegate)     | 
            <summary>
            Creates a dynamic pointer from an untyped dynamic delegate
            </summary>
            <param name="src">The source delegate</param>
            <param name="handle">A proxy for the unmanaged pointer</param>
        
| M:Z0.FunctionPointer.from``1(Z0.DynamicDelegate{``0})| 
            <summary>
            Creates a dynamic pointer from a generic dynamic delegate
            </summary>
            <param name="src">The source delegate</param>
            <param name="handle">A proxy for the unmanaged pointer</param>
            <typeparam name="D">The delegate type</typeparam>
        
| M:Z0.NumericArray.to``2(``0[],``1[])              | 
            <summary>
            Unconditionally converts the source values to values of parametric numeric type
            </summary>
            <param name="src">The source values</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.NumericArray.to``2(``0[])                    | 
            <summary>
            Unconditionally converts the source values to values of parametric numeric type
            </summary>
            <param name="src">The source values</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.NumericCast.convert``2(``0)                  | 
            <summary>
            If possible, applies the conversion S -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.Byte,``0)      | 
            <summary>
            If possible, applies the conversion byte -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.SByte,``0)     | 
            <summary>
            If possible, applies the conversion sbyte -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.UInt16,``0)    | 
            <summary>
            If possible, applies the conversion ushort -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.Int16,``0)     | 
            <summary>
            If possible, applies the conversion short -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.Int32,``0)     | 
            <summary>
            If possible, applies the conversion int -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.UInt32,``0)    | 
            <summary>
            If possible, applies the conversion uint -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.Int64,``0)     | 
            <summary>
            If possible, applies the conversion long -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.UInt64,``0)    | 
            <summary>
            If possible, applies the conversion ulong -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.Single,``0)    | 
            <summary>
            If possible, applies the conversion float -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.NumericCast.convert``1(System.Double,``0)    | 
            <summary>
            If possible, applies the conversion double -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| F:Z0.NumericLiterals.z8i                          | 
            <summary>
            The zero-value for an 8-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.z8                           | 
            <summary>
            The zero-value for an 8-bit usigned integer
            </summary>
        
| F:Z0.NumericLiterals.z16i                         | 
            <summary>
            The zero-value for a 16-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.z16                          | 
            <summary>
            The zero-value for a 16-bit unsigned integer
            </summary>
        
| F:Z0.NumericLiterals.z32i                         | 
            <summary>
            The zero-value for a 32-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.z32                          | 
            <summary>
            The zero-value for a 32-bit usigned integer
            </summary>
        
| F:Z0.NumericLiterals.z64i                         | 
            <summary>
            The zero-value for a 64-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.z64                          | 
            <summary>
            The zero-value for a 64-bit usigned integer
            </summary>
        
| F:Z0.NumericLiterals.z32f                         | 
            <summary>
            The zero-value for a 32-bit float
            </summary>
        
| F:Z0.NumericLiterals.z64f                         | 
            <summary>
            The zero-value for a 64-bit float
            </summary>
        
| F:Z0.NumericLiterals.i8max                        | 
            <summary>
            The maximum value for an 8-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.u8max                        | 
            <summary>
            The maximum value for an 8-bit usigned integer
            </summary>
        
| F:Z0.NumericLiterals.i16max                       | 
            <summary>
            The maximum value for a 16-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.u16max                       | 
            <summary>
            The maximum value for a 16-bit unsigned integer
            </summary>
        
| F:Z0.NumericLiterals.i32max                       | 
            <summary>
            The maximum value for a 32-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.u32max                       | 
            <summary>
            The maximum value for a 32-bit usigned integer
            </summary>
        
| F:Z0.NumericLiterals.i64max                       | 
            <summary>
            The maximum value for a 64-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.u64max                       | 
            <summary>
            The maximum value for a 64-bit usigned integer
            </summary>
        
| F:Z0.NumericLiterals.f32max                       | 
            <summary>
            The maximum value for a 32-bit float
            </summary>
        
| F:Z0.NumericLiterals.f64max                       | 
            <summary>
            The maximum value for a 64-bit float
            </summary>
        
| F:Z0.NumericLiterals.i8min                        | 
            <summary>
            The minimum value for an 8-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.i16min                       | 
            <summary>
            The minimum value for a 16-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.i32min                       | 
            <summary>
            The minimum value for a 32-bit signed integer
            </summary>
        
| F:Z0.NumericLiterals.i64min                       | 
            <summary>
            The minimum value for a 64-bit signed integer
            </summary>
        
| M:Z0.NumericLiterals.zero``1                      | 
            <summary>
            Returns generic 0 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.zero``1(``0)                 | 
            <summary>
            Returns generic 0 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.one``1                       | 
            <summary>
            Returns generic 1 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.one``1(``0)                  | 
            <summary>
            Returns generic 1 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.ones``1                      | 
            <summary>
            Ones all bits each and every ... one
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.ones``1(``0)                 | 
            <summary>
            Ones all bits each and every ... one
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.minval``1                    | 
            <summary>
            Returns the minimum value supported by a parametrically-identified primal type
            </summary>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.NumericLiterals.maxval``1                    | 
            <summary>
            Returns the maximim value supported by a parametrically-identified primal type
            </summary>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.SByte)                | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.Byte)                 | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.Int16)                | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.UInt16)               | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.Int32)                | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.UInt32)               | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.Int64)                | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.UInt64)               | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.Single)               | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ToNumeric.to``1(System.Double)               | 
            <summary>
            Unconditionally converts the source value to a value of parametric numeric type
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.ICheckInvariant.yea(System.Boolean,System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts the operand is true
            </summary>
            <param name="src">The value claimed to be false</param>
            <param name="msg">An optional message describint the assertion</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
        
| M:Z0.ICheckInvariant.nea(System.Boolean,System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts the operand is false
            </summary>
            <param name="src">The value claimed to be false</param>
            <param name="msg">An optional message describint the assertion</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
        
| M:Z0.ICheckNull.notnull(System.Void*,System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts the pointer is not null
            </summary>
            <param name="p">The pointer to check</param>
            <param name="msg">An optional message describint the assertion</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
        
| P:Z0.ICheckOptions.Enabled                        | 
            <summary>
            Specifies whether the test is enabled
            </summary>
        
| P:Z0.ICheckOptions.CycleCount                     | 
            <summary>
            The number times to repeat an action
            </summary>
        
| P:Z0.ICheckOptions.RoundCount                     | 
            <summary>
            The number of times to repeat a cycle
            </summary>
        
| M:Z0.ICheckSets.seteq``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts the equality of two sets
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>        
        
| M:Z0.ICheckSets.contains``1(System.Collections.Generic.ISet{``0},``0,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts that a set contains a specified element
            </summary>
            <param name="set">The set</param>
            <param name="item">The test element</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
            <typeparam name="T"></typeparam>
        
| M:Z0.ICheckSets.contains``1(System.Collections.Generic.ISet{``0},``0[])| 
            <summary>
            Asserts that a set contains a specified element
            </summary>
            <param name="set">The set</param>
            <param name="item">The test element</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
            <typeparam name="T"></typeparam>
        
| M:Z0.IValidator.Failed(Z0.ClaimKind,Z0.IAppMsg)   | 
            <summary>
            Creates, but does not throw, a claim exception
            </summary>
            <param name="claim">The sort of claim that failed</param>
            <param name="msg">The failure description</param>
        
| M:Z0.IValidator.OnFailure(Z0.ClaimKind,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Handles a claim failure by throwing an exception
            </summary>
            <param name="claim">The sort of claim that failed</param>
        
| M:Z0.IValidator.Require(System.Boolean,Z0.ClaimKind,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Raises an exception if an invariant does not hold
            </summary>
            <param name="condition">The invariant state</param>
            <param name="claim">The sort of claim that failed</param>
        
| M:Z0.IValidator.Failed(Z0.ClaimKind,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Creates, but does not throw, a claim exception
            </summary>
            <param name="claim">The sort of claim that failed</param>
        
| M:Z0.IValidator.FailWith(System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Fails unconditionally with a message
            </summary>
            <param name="msg">The failure reason</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
        
| T:Z0.ClaimException                               | 
            <summary>
            Raised when a validation check has failed
            </summary>
        
| M:Z0.Streams.nonempty``1(``0,``0[])               | 
            <summary>
            Constructs a nonempty stream
            </summary>
            <param name="head">The first element in the stream</param>
            <param name="tail">The remaining elements of the stream</param>
            <typeparam name="T">The streamed element type</typeparam>
        
| M:Z0.Streams.from``1(``0[])                       | 
            <summary>
            Constructs a stream, possily empty
            </summary>
            <param name="src">The stream elements</param>
            <typeparam name="T">The streamed element type</typeparam>
        
| M:Z0.Streams.from``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Concatenates the source streams to create a unified stream
            </summary>
            <param name="head">The first part of the sequence</param>
            <param name="tail">The last part of the sequence</param>
            <typeparam name="T">The streamed element type</typeparam>
        
| M:Z0.Streams.from``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Concatenates the source streams to create a unified stream
            </summary>
            <param name="s1">The leading segment</param>
            <param name="s2">The second segment</param>
            <param name="s3">The terminal segment</param>
            <typeparam name="T">The streamed element type</typeparam>
        
| M:Z0.Streams.join``1(System.Collections.Generic.IEnumerable{``0}[])| 
            <summary>
            All of your streams belong to us
            </summary>
            <param name="src">The source streams</param>
            <typeparam name="T">The streamed element type</typeparam>
        
| T:Z0.IOpIndex`1                                   | 
            <summary>
            Characterizes anything that can be uniquely identified by an operation identity and
            </summary>
            <typeparam name="T">The type of identified thing</typeparam>
        
| P:Z0.IOpIndex`1.EntryCount                        | 
            <summary>
            The number of indexed items
            </summary>
        
| P:Z0.IOpIndex`1.Keys                              | 
            <summary>
            The item keys
            </summary>
        
| P:Z0.IOpIndex`1.DuplicateKeys                     | 
            <summary>
            Duplicate keys found the source that were rejected from the index
            </summary>
        
| P:Z0.IOpIndex`1.Item(Z0.OpIdentity)               | 
            <summary>
            Looks up the index item and blows up if item does not exist
            </summary>
        
| M:Z0.IOpIndex`1.Lookup(Z0.OpIdentity)             | 
            <summary>
            A server version of the lookup indexer that returns an optional value, thus allowing
            for the possibility that the id doesn't identify anything in the index
            </summary>
            <param name="id"></param>
        
| P:Z0.IOpIndex`1.Enumerated                        | 
            <summary>
            Enumerates the key/value index pairs
            </summary>
        
| M:Z0.Primitive.kind(System.TypeCode)              | 
            <summary>
            Returns the type-code identified primal kind
            </summary>
            <param name="src">The type code</param>
        
| T:Z0.IndexedSeq`1                                 | 
            <summary>
            Reifies a canonical indexed sequence container
            </summary>
        
| M:Z0.IndexedSeq`1.op_Implicit(`0[])~Z0.IndexedSeq{`0}| 
            <summary>
            Implicitly constructs a sequence from an array
            </summary>
            <param name="src">The source array</param>
        
| T:Z0.Multiset`1                                   | 
            <summary>
            Implementation of a basic multiset
            </summary>
            <remarks>See https://en.wikipedia.org/wiki/Multiset</remarks>
        
| M:Z0.Multiset`1.AddRange(System.Collections.Generic.IEnumerable{`0})| 
            <summary>
            Adds a sequence of items to the set
            </summary>
            <param name="src">The source items</param>
        
| M:Z0.Multiset`1.DistinctCounts(System.Collections.Generic.IEnumerable{`0})| 
            <summary>
            Selects the occurrence count for each item in the source
            </summary>
            <param name="src">The soruce items</param>
        
| P:Z0.Multiset`1.Duplicates                        | 
            <summary>
            Selects the members that occur more than once
            </summary>
        
| M:Z0.Multiset`1.IsMember(`0)                      | 
            <summary>
            Determines whether an item exists in the set
            </summary>
            <param name="candidate">The search item</param>
        
| M:Z0.Multiset`1.Occurrences                       | 
            <summary>
            Selects all contained items with their occurrence counts
            </summary>
            <param name="item">The item</param>
            <param name="count">The number of itmes the item occurs</param>
        
| M:Z0.Multiset`1.DistinctCount(`0)                 | 
            <summary>
            Retrieves the times a specified item appears in the set
            </summary>
            <param name="subject">The item to count</param>
        
| P:Z0.Multiset`1.Members                           | 
            <summary>
            Enumerates the distinct members
            </summary>
        
| T:Z0.ReadOnlySet`1                                | 
            <summary>
            Contains a finite set of values
            </summary>
        
| M:Z0.ReadOnlySet`1.IsSubset(Z0.ReadOnlySet{`0},System.Boolean)| 
            <summary>
            Determines whether the current set is a subset of a specified set.
            </summary>
            <param name="rhs">The candidate superset</param>
            <param name="proper">Specifies whether only proper subsets are considered "subsets"</param>
        
| M:Z0.ReadOnlySet`1.IsSuperset(Z0.ReadOnlySet{`0},System.Boolean)| 
            <summary>
            Determines whether the current set is a superset of a specified set.
            </summary>
            <param name="rhs">The candidate subset</param>
            <param name="proper">Specifies whether only proper subsets are considered "subsets"</param>
        
| M:Z0.ReadOnlySet`1.Intersect(Z0.ReadOnlySet{`0})  | 
            <summary>
            Calculates the intersection between the current set and a specified set and
            returns a new set that embodies this result
            </summary>
            <param name="rhs">The set with which to intersect</param>
        
| M:Z0.ReadOnlySet`1.Difference(Z0.ReadOnlySet{`0},System.Boolean)| 
            <summary>
            Calculates the set difference, or symmetric difference, between the current set and a specified set 
            and returns a new set that embodies this result
            </summary>
            <param name="rhs">The set that should be differenced</param>
            <remarks>See https://en.wikipedia.org/wiki/Symmetric_difference</remarks>
        
| M:Z0.ReadOnlySet`1.Intersects(Z0.ReadOnlySet{`0}) | 
            <summary>
            Determine whether the current set and a specified set have a nonemtpy intersection
            </summary>
            <param name="rhs">The set to compare</param>
        
| T:Z0.Seq`1                                        | 
            <summary>
            Refies a canonical sequence container with content that need not be finite
            </summary>
        
| M:Z0.Seq`1.op_Implicit(`0[])~Z0.Seq{`0}           | 
            <summary>
            Implicitly constructs a sequence from an array
            </summary>
            <param name="src">The source array</param>
        
| M:Z0.FiniteSet.define``1(``0[])                   | 
            <summary>
            Constructs a finite set from supplied members
            </summary>
            <param name="members">The defining members</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.FiniteSet.define``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Constructs a finite set from supplied sequence
            </summary>
            <param name="members">The defining members</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.MultisetX.ToMultiSet``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Creates a multiset from a source sequence
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The data type</typeparam>
        
| P:Z0.EncodedIndex.EntryCount                      | 
            <summary>
            The number of indexed functions
            </summary>
        
| P:Z0.EncodedIndex.LocationKeys                    | 
            <summary>
            The base addresses that identify entries in the index
            </summary>
        
| P:Z0.EncodedIndex.IndexedCode                     | 
            <summary>
            All indexed code
            </summary>
        
| P:Z0.EncodedIndex.Operations                      | 
            <summary>
            Operation idenfiers, each of which are associated with one or more code blocks
            </summary>
        
| P:Z0.EncodedIndex.Hosts                           | 
            <summary>
            Hosts with at least one archived code block
            </summary>
        
| T:Z0.HostCodeIndex                                | 
            <summary>
            Collects code derived from members declared by a specific operation host
            </summary>
        
| P:Z0.HostCodeIndex.Id                             | 
            <summary>
            The owning part
            </summary>
        
| P:Z0.HostCodeIndex.Code                           | 
            <summary>
            The host-owned code
            </summary>
        
| P:Z0.HostCodeIndex.Length                         | 
            <summary>
            The number of collected functions
            </summary>
        
| T:Z0.PartCodeIndex                                | 
            <summary>
            Pairs a part with owned code
            </summary>
        
| P:Z0.PartCodeIndex.Part                           | 
            <summary>
            The owning part
            </summary>
        
| P:Z0.PartCodeIndex.Code                           | 
            <summary>
            The code in the set
            </summary>
        
| M:Z0.Encoded.located(Z0.MemoryAddress,Z0.BinaryCode)| 
            <summary>
            Defines a block of encoded data based at a specifed address
            </summary>
            <param name="data">The source data</param>
        
| P:Z0.IIdentifiedCode`2.OpUri                      | 
            <summary>
            The identifying uri
            </summary>
        
| T:Z0.IMemberCode`2                                | 
            <summary>
            Characterizes identified code with a known address
            </summary>
            <typeparam name="F"></typeparam>
            <typeparam name="C"></typeparam>
        
| T:Z0.IReflectedCode`2                             | 
            <summary>
            Characterizes identified code with a known address and defining member
            </summary>
            <typeparam name="F"></typeparam>
            <typeparam name="C"></typeparam>
        
| P:Z0.IReflectedCode`2.Method                      | 
            <summary>
            The defining member
            </summary>
        
| T:Z0.ApiCode                                      | 
            <summary>
            Identifies a member defined by executable code (derived from the method implementation)
            </summary>    
        
| T:Z0.BinaryCode                                   | 
            <summary>
            Encoded x86 bytes extracted from a memory source
            </summary>
        
| P:Z0.BinaryCode.Encoded                           | 
            <summary>
            The encoded bytes
            </summary>
        
| P:Z0.BinaryCode.Data                              | 
            <summary>
            The encoded content as byte array
            </summary>
        
| P:Z0.BinaryCode.Empty                             | 
            <summary>
            The canonical zero
            </summary>
        
| T:Z0.CapturedCode                                 | 
            <summary>
             Defines the dataset accumulated for an operation-targeted capture workflow
            </summary>
        
| T:Z0.CaptureOutcome                               | 
            <summary>
            Describes the outcome of a native capture operation
            </summary>
        
| P:Z0.CaptureOutcome.Id                            | 
            <summary>
            The identity of the capture subject
            </summary>
        
| F:Z0.CaptureOutcome.State                         | 
            <summary>
            The final state in the capture process
            </summary>
        
| F:Z0.CaptureOutcome.Range                         | 
            <summary>
            The origin of the captured data
            </summary>
        
| F:Z0.CaptureOutcome.TermCode                      | 
            <summary>
            The capture termination code indicating why the capture process reached end-state
            </summary>
        
| T:Z0.ExtractState                                 | 
            <summary>
            Defines the state of the routine capture workflow at a given step
            </summary>
        
| P:Z0.ExtractState.Id                              | 
            <summary>
            The operation identifier
            </summary>
        
| P:Z0.ExtractState.Address                         | 
            <summary>
            The memory address from which the state payload was extracted
            </summary>
        
| F:Z0.ExtractState.Offset                          | 
            <summary>
            The zero-based and monotonically-increasing state index
            </summary>
        
| F:Z0.ExtractState.Captured                        | 
            <summary>
            The captured data
            </summary>
        
| M:Z0.ExtractState.#ctor(Z0.OpIdentity,System.Int32,System.Int64,System.Byte)| 
            <summary>
            Initializes a capture state
            </summary>
            <param name="id">The exraction subject identifier</param>
            <param name="offset">A zero-based and capture-relative index that identifes a state in the context of a capture workflow</param>
            <param name="location">The memory location from which data was extracted</param>
            <param name="captured">The extracted data</param>
        
| P:Z0.ExtractState.Empty                           | 
            <summary>
            The empty state
            </summary>
        
| T:Z0.IdentifiedCode                               | 
            <summary>
            The hex bits found at the end of a uri
            </summary>
        
| M:Z0.IdentifiedCode.From(Z0.ParseResult{Z0.OpUri},Z0.BinaryCode)| 
            <summary>
            Defines uri bits with a potentially bad uri (for diagnostic purposes)
            </summary>
            <param name="perhaps">The uri, perhaps</param>
            <param name="src">The source code</param>
        
| P:Z0.IdentifiedCode.Encoded                       | 
            <summary>
            The encoded operation data
            </summary>
        
| P:Z0.IdentifiedCode.Identifier                    | 
            <summary>
            An identifier populated with parsed operation uri text, when possible; otherwise populated with unparseable uri text 
            </summary>
        
| P:Z0.IdentifiedCode.OpUri                         | 
            <summary>
            The operation uri
            </summary>
        
| P:Z0.IdentifiedCode.Id                            | 
            <summary>
            The identifier of the defined operation
            </summary>
        
| P:Z0.IdentifiedCode.Empty                         | 
            <summary>
            No code, no identity, no life
            </summary>
        
| T:Z0.LocatedCode                                  | 
            <summary>
            Encoded x86 bytes extracted from a memory source with a known (nonzero) location
            </summary>
        
| P:Z0.LocatedCode.Address                          | 
            <summary>
            The head of the memory location from which the data originated
            </summary>
        
| P:Z0.LocatedCode.Encoded                          | 
            <summary>
            The encoded content
            </summary>
        
| P:Z0.LocatedCode.Data                             | 
            <summary>
            The encoded content as byte array
            </summary>
        
| T:Z0.MemberCode                                   | 
            <summary>
            Defines a uri-identified encoded block with a known base address
            </summary>
        
| P:Z0.MemberCode.OpUri                             | 
            <summary>
            The source member identity
            </summary>
        
| P:Z0.MemberCode.Encoded                           | 
            <summary>
            The data, located
            </summary>
        
| P:Z0.MemberCode.Data                              | 
            <summary>
            The encoded content as byte array
            </summary>
        
| P:Z0.MemberCode.Size                              | 
            <summary>
            The encoded byte count
            </summary>
        
| F:Z0.ParsedExtract.Extracted                      | 
            <summary>
            The extracted code
            </summary>
        
| P:Z0.ParsedExtract.Encoded                        | 
            <summary>
            The parsed code
            </summary>
        
| P:Z0.ParsedExtract.Sequence                       | 
            <summary>
            The extracted member sequence
            </summary>
        
| P:Z0.ParsedExtract.TermCode                       | 
            <summary>
            The reason for extract completion
            </summary>
        
| P:Z0.ParsedExtract.OpUri                          | 
            <summary>
            The operation uri 
            </summary>
        
| P:Z0.ParsedExtract.Id                             | 
            <summary>
            The operation identifier
            </summary>
        
| P:Z0.ParsedExtract.Method                         | 
            <summary>
            The member operation, reflected
            </summary>
        
| P:Z0.ParsedExtract.KindId                         | 
            <summary>
            The member kind, if known
            </summary>
        
| M:Z0.Enums.width(Z0.EnumScalarKind)               | 
            <summary>
            Computes the bit-width of an enum with a specified base kind
            </summary>
            <param name="base">An integral type refined by an enum</param>
        
| M:Z0.Enums.signed(Z0.EnumScalarKind)              | 
            <summary>
            Determines whether an enum base kind is signed
            </summary>
            <param name="base">An integral type refined by an enum</param>
        
| M:Z0.Enums.base(System.Type)                      | 
            <summary>
            Determines the integral type refined by a specified enum type
            </summary>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.base``1                                | 
            <summary>
            Determines the integral type refined by a parametrically-identified enum type
            </summary>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.typecode``1                            | 
            <summary>
            Determines an enumeration's underlying kind
            </summary>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.scalar``2(``0)                         | 
            <summary>
            Reads a generic numeric value from a generic enum. 
            </summary>
            <param name="e">The enum value to reinterpret</param>
            <typeparam name="E">The enum source type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| M:Z0.Enums.literal``2(``1)                        | 
            <summary>
            Reads a generic enum member from a generic value
            </summary>
            <param name="v">The value to reinterpret</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="V">The numeric value type</typeparam>
        
| M:Z0.Enums.scalar_slow``1(System.Enum)            | 
            <summary>
            Reads a generic numeric value from a boxed enum
            </summary>
            <param name="e">The enum value to reinterpret</param>
            <typeparam name="V">The numeric value type</typeparam>
        
| M:Z0.Enums.values``2                              | 
            <summary>
            Gets the literals defined by an enumeration together with their integral values
            </summary>
            <param name="peek">If true, extracts the content, bypassing any caching</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="V">The numeric value type</typeparam>
        
| M:Z0.Enums.defined``2(``1)                        | 
            <summary>
            Determines whether an enum has a specified integral value
            </summary>
            <param name="v">The test value</param>
            <typeparam name="E">The enum source type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| M:Z0.Enums.evalue``2(Z0.EnumLiteral{``0},``1)     | 
            <summary>
            Defines an E-V parametric enum value given an E-parametric literal an a value:V
            </summary>
            <param name="literal">The source literal</param>
            <param name="value">The source value</param>
            <typeparam name="E">The enum source type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| M:Z0.Enums.defined``1(``0)                        | 
            <summary>
            Determines whether an enum value is valid
            </summary>
            <param name="v">The test value</param>
            <typeparam name="E">The enum source type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| M:Z0.Enums.index``1                               | 
            <summary>
            Gets the declaration-order indices for each named literal
            </summary>
            <param name="peek">If true, extracts the content directly, bypassing any caching</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.literals``1                            | 
            <summary>
            Gets the literals defined by an enumeration
            </summary>
            <param name="peek">If true, extracts the content directly, bypassing any caching</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.defined``1(System.String)              | 
            <summary>
            Determines whether an enum defines a name-identified literal
            </summary>
            <param name="name">The test name</param>
            <typeparam name="E">The enum source type</typeparam>
        
| M:Z0.Enums.dictionary``2                          | 
            <summary>
            Constructs a arbitrarily deduplicated value-to-member index
            </summary>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="V">The numeric value type</typeparam>
        
| M:Z0.Enums.names``1                               | 
            <summary>
            Gets the names of the (unique) enumeration literals
            </summary>
            <param name="e">An enum type representative</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.convert``1(System.Byte,``0)            | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.SByte,``0)           | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.Int16,``0)           | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.UInt16,``0)          | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.Int32,``0)           | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.UInt32,``0)          | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.Int64,``0)           | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.convert``1(System.UInt64,``0)          | 
            <summary>
            Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value
            is represented by a declared literal 
            </summary>
            <param name="value">The numeric source value</param>
            <param name="default">The enum value to return if the conversion fails</param>
        
| M:Z0.Enums.correlate``2                           | 
            <summary>
            Correlates literal values predicated on identifier equality
            </summary>
            <typeparam name="E1">The first enum type</typeparam>
            <typeparam name="E2">The second enum type</typeparam>
        
| M:Z0.Enums.correlate``2(System.String,``0,``1)    | 
            <summary>
             Defines, but does not verify, a correlation between enum literals
            </summary>
            <param name="name">The correlation axis</param>
            <param name="first">The first literal</param>
            <param name="second">THe second literal</param>
            <typeparam name="E1">The first enum type</typeparam>
            <typeparam name="E2">The second enum type</typeparam>
        
| M:Z0.Enums.LiteralSequence``2                     | 
            <summary>
            Gets the literals defined by an enumeration together with their integral values
            </summary>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Enums.CreateLiteralArray``1                  | 
            <summary>
            Gets the literals defined by an enumeration
            </summary>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e8i``1(``0)                            | 
            <summary>
            Interprets an enum value as a signed byte
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e8u``1(``0)                            | 
            <summary>
            Interprets an enum value as a byte
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e16u``1(``0)                           | 
            <summary>
            Interprets an enum value as an unsigned 16-bit integer
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e16i``1(``0)                           | 
            <summary>
            Interprets an enum value as a signed 16-bit integer
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e32i``1(``0)                           | 
            <summary>
            Interprets an enum value as a signed 32-bit integer
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e32u``1(``0)                           | 
            <summary>
            Interprets an enum value as an unsigned 32-bit integer
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e64i``1(``0)                           | 
            <summary>
            Interprets an enum value as a signed 64-bit integer
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.e64u``1(``0)                           | 
            <summary>
            Interprets an enum value as an unsigned 64-bit integer
            </summary>
            <param name="e">The enum value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.Parse``1(System.String,``0)            | 
            <summary>
            Attempts to parses an enumeration literal, ignoring case, and returns a default value if parsing failed
            </summary>
            <param name="name">The literal name</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Enums.Parse``1(System.String)                | 
            <summary>
            Attempts o parse an enum literal, ignoring case, and returns a null value if parsing failed
            </summary>
            <param name="name">The literal name</param>
            <typeparam name="E">The enum type</typeparam>
        
| T:Z0.EnumDataSource                               | 
            <summary>
            Specifies a file that contains enum literal data aspects of the target enum type
            </summary>
        
| P:Z0.EnumDataSource.File                          | 
            <summary>
            The name of the archived file that defines the enumeration literals
            </summary>
        
| P:Z0.EnumDataSource.EnumName                      | 
            <summary>
            The enum type name identifier
            </summary>
        
| P:Z0.EnumDataSource.BaseType                      | 
            <summary>
            The primal kind refined by the enum
            </summary>
        
| P:Z0.EnumDataSource.Description                   | 
            <summary>
            The purpose of the enum
            </summary>
        
| M:Z0.EnumInfo.define``2(Z0.MetadataToken,System.Int32,System.String,``0,``1)| 
            <summary>
            Defines a useful representation of an enumeration literal
            </summary>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The scalar type refined by the enum</typeparam>
            <typeparam name="A">The asci identifier type</typeparam>
        
| T:Z0.EnumLiteral                                  | 
            <summary>
            Defines a boxed enumeration literal as the triple (index,identifier,value)
            </summary>
        
| P:Z0.EnumLiteral.Field                            | 
            <summary>
            The compiler-emitted field that defines the literal
            </summary>
        
| P:Z0.EnumLiteral.Index                            | 
            <summary>
            The literal declaration order, unique within the declaring enum
            </summary>
        
| P:Z0.EnumLiteral.Identifier                       | 
            <summary>
            The literal identifier, unique within the declaring enum
            </summary>
        
| P:Z0.EnumLiteral.LiteralValue                     | 
            <summary>
            The literal value
            </summary>
        
| P:Z0.EnumLiteral.DataType                         | 
            <summary>
            The enum's numeric data type
            </summary>
        
| P:Z0.EnumLiteral.Token                            | 
            <summary>
            The metadata token that identifies the backing field
            </summary>
        
| T:Z0.EnumLiteral`1                                | 
            <summary>
            Defines an enumeration literal as the triple (index,identifier,value)
            </summary>
            <remarks>
            Defining a literal this way attempts to overcome troublesome aspects in which C#/clr enums 
            are implemented and preserves all enum information content. It is value-invariant in the sense 
            that the numeric content of does of a member not impact the n index/name content. 
            Thus, enum value duplication isn't an issue since all data are preserved, the api end-user can decide what
            value duplication means in a given context
            </remarks>
        
| P:Z0.EnumLiteral`1.Field                          | 
            <summary>
            The compiler-emitted field that defines the literal
            </summary>
        
| P:Z0.EnumLiteral`1.Index                          | 
            <summary>
            The literal declaration order, unique within the declaring enum
            </summary>
        
| P:Z0.EnumLiteral`1.Identifier                     | 
            <summary>
            The literal identifier, unique within the declaring enum
            </summary>
        
| P:Z0.EnumLiteral`1.LiteralValue                   | 
            <summary>
            The literal E-value
            </summary>
        
| P:Z0.EnumLiteral`1.DataType                       | 
            <summary>
            The enum's numeric data type
            </summary>
        
| P:Z0.EnumLiteral`1.Description                    | 
            <summary>
            The meaning of the literal, if available
            </summary>
        
| P:Z0.EnumLiteral`1.UserData                       | 
            <summary>
            User data attched to the literal, if any
            </summary>
        
| P:Z0.EnumLiteral`1.Token                          | 
            <summary>
            The metadata token that identifies the backing field
            </summary>
        
| T:Z0.EnumLiteral`2                                | 
            <summary>
            Defines an E-V parametric enum value
            </summary>
        
| P:Z0.EnumLiteral`2.NumericValue                   | 
            <summary>
            The literal V-value
            </summary>
        
| P:Z0.EnumLiteral`2.Index                          | 
            <summary>
            The literal declaration order, unique within the declaring enum
            </summary>
        
| P:Z0.EnumLiteral`2.Identifier                     | 
            <summary>
            The literal identifier, unique within the declaring enum
            </summary>
        
| P:Z0.EnumLiteral`2.LiteralValue                   | 
            <summary>
            The literal E-value
            </summary>
        
| P:Z0.EnumLiteral`2.DataType                       | 
            <summary>
            The numeric kind refined by the enum
            </summary>
        
| T:Z0.EnumLiterals                                 | 
            <summary>
            Defines an untyped literal index
            </summary>
        
| T:Z0.EnumLiterals`1                               | 
            <summary>
            Defines an E-parametric literal index
            </summary>
        
| T:Z0.EnumLiterals`2                               | 
            <summary>
            Defines an E-V parametric literal index
            </summary>
        
| T:Z0.LiteralCorrelation`2                         | 
            <summary>
            Captures name-corellated literals values
            </summary>
        
| F:Z0.LiteralCorrelation`2.Name                    | 
            <summary>
            The common name
            </summary>
        
| F:Z0.LiteralCorrelation`2.First                   | 
            <summary>
            The first enum value
            </summary>
        
| F:Z0.LiteralCorrelation`2.Second                  | 
            <summary>
            The second enum value
            </summary>
        
| T:Z0.Refinement`2                                 | 
            <summary>
            Let's pretend we can make refinement types in .Net
            </summary>
        
| T:Z0.IEncodedHexArchive                           | 
            <summary>
            Specifies archive service operations for hosted bits
            </summary>
        
| M:Z0.IEncodedHexArchive.Read                      | 
            <summary>
            Reads all files in the archive
            </summary>
        
| M:Z0.IEncodedHexArchive.Read(PartId)              | 
            <summary>
            Reads the archived files owned by a specified part
            </summary>
        
| M:Z0.IEncodedHexArchive.Read(Z0.ApiHostUri)       | 
            <summary>
            Reads the archived files owned by a specified host
            </summary>
        
| M:Z0.IEncodedHexArchive.Read(System.Func{Z0.FileName,System.Boolean})| 
            <summary>
            Reads all files in the archive that satisfy a supplied predicate
            </summary>
        
| M:Z0.IEncodedHexArchive.Read(Z0.OpIdentity)       | 
            <summary>
            Reads the bits of an identified operation
            </summary>
            <param name="id">The source path</param>
        
| M:Z0.IEncodedHexArchive.Read(Z0.FilePath)         | 
            <summary>
            Reads ths bits that live at a specified path
            </summary>
            <param name="src">The source path</param>
        
| M:Z0.IEncodedHexArchive.ReadIndices(PartId[])     | 
            <summary>
            Reads the code owned by a specified collection of parts
            </summary>
            <param name="owners">The owning parts</param>
        
| M:Z0.IEncodedHexArchive.ReadIndex(Z0.FilePath)    | 
            <summary>
            Reads the code defined by a specified file
            </summary>
            <param name="src">The source path</param>
        
| M:Z0.IEncodedHexReader.Read(Z0.FilePath)          | 
            <summary>
            Reads the content of a source file
            </summary>
            <param name="src">The source file path</param>
        
| T:Z0.IFileArchive                                 | 
            <summary>
            Characterizes an archive rooted at a specified path
            </summary>
        
| P:Z0.IFileArchive.ArchiveRoot                     | 
            <summary>
            The directory to which path calculations are relative
            </summary>
        
| M:Z0.IFileArchive.Files                           | 
            <summary>
            Enumerates the archived files
            </summary>
        
| M:Z0.IFileArchive.Files(PartId)                   | 
            <summary>
            Enumerates the archived files owned by a specified part
            </summary>
        
| T:Z0.IFileStreamWriter                            | 
            <summary>
            Characterizes an allocated file writer that targets a specified path
            </summary>
        
| P:Z0.IFileStreamWriter.TargetPath                 | 
            <summary>
            The path to which the writer writes
            </summary>
        
| T:Z0.IFileStreamWriter`1                          | 
            <summary>
            Characterizes a filestream writer that writes data of parametric type
            </summary>
            <typeparam name="T">The type of data the writer writes</typeparam>
        
| M:Z0.IFileStreamWriter`1.Write(`0)                | 
            <summary>
            Write one
            </summary>
            <param name="src">The one to write</param>
        
| M:Z0.IFileStreamWriter`1.Write(`0[])              | 
            <summary>
            Write many
            </summary>
            <param name="src">The many to write</param>
        
| T:Z0.IMemberCodeReader                            | 
            <summary>
            Defines service operations that support reading text-formatted encoded x86 asm data
            </summary>
        
| M:Z0.IMemberCodeReader.Read(Z0.FilePath)          | 
            <summary>
            Reads the content of a source file
            </summary>
            <param name="src">The source file path</param>
        
| T:Z0.IMemberCodeWriter                            | 
            <summary>
            Defines serivce contract for persting text-formatted x86 encoded assembly 
            </summary>
        
| M:Z0.IMemberCodeWriter.Write(Z0.MemberCode,System.Int32)| 
            <summary>
            Write host bits with a specified uri identifier padding
            </summary>
            <param name="src">The source bits</param>
            <param name="idpad">The padding amount</param>
        
| T:Z0.FileName                                     | 
            <summary>
            Defines a file name along with the extension in isolation 
            and without ascribing additional path content
            </summary>
        
| P:Z0.FileName.HasExtension                        | 
            <summary>
            Does the file have an extension?
            </summary>
        
| P:Z0.FileName.WithoutExtension                    | 
            <summary>
            The name of the file sans extension
            </summary>
        
| P:Z0.FileName.Ext                                 | 
            <summary>
            The file's extension, if any
            </summary>
        
| P:Z0.FileName.ExtOption                           | 
            <summary>
            The file extension, if any
            </summary>
        
| M:Z0.FileName.WithNewName(System.String)          | 
            <summary>
            Renames the file (in the model, not on disk)
            </summary>
            <param name="newName">The new file name</param>
        
| M:Z0.FileName.Contains(System.String)             | 
            <summary>
            Determines whether the filename, including the extension, contains a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FileName.EndsWith(System.String)             | 
            <summary>
            Determines whether the filename, including the extension, ends with a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FileName.StartsWith(System.String)           | 
            <summary>
            Determines whether the filename, begins with a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FileName.OwnedBy(PartId)                     | 
            <summary>
            Dtermines whether the name of a file is of the form {owner}.{.}.{*}
            </summary>
            <param name="owner">The owner to test</param>
        
| P:Z0.FileName.Owner                               | 
            <summary>
            Specifies the file's owning part, if any
            </summary>
        
| M:Z0.FileName.HostedBy(Z0.ApiHostUri)             | 
            <summary>
            Determines whether the name of a file is of the form {owner}.{host}.{*}
            </summary>
            <param name="host">The owner to test</param>
        
| T:Z0.FilePath                                     | 
            <summary>
            Represents a fully-qualified path to a file on the local machine
            </summary>
        
| P:Z0.FilePath.None                                | 
            <summary>
            Lonely, so
            </summary>
        
| P:Z0.FilePath.Exists                              | 
            <summary>
            Determines whether the modeled file exists on disk
            </summary>
        
| M:Z0.FilePath.OwnedBy(PartId)                     | 
            <summary>
            Determines whether the filename is of the form {owner}.{.}.{*}
            </summary>
            <param name="owner">The owner to test</param>
        
| M:Z0.FilePath.HostedBy(Z0.ApiHostUri)             | 
            <summary>
            Determines whether the filename is of the form {owner}.{host}.{*}
            </summary>
            <param name="owner">The owner to test</param>
        
| P:Z0.FilePath.Owner                               | 
            <summary>
            Specifies the file's owning part, if any
            </summary>
        
| M:Z0.FilePath.Contains(System.String)             | 
            <summary>
            Determines whether the path contains a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FilePath.StartsWith(System.String)           | 
            <summary>
            Determines whether the path begins with a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FilePath.EndsWith(System.String)             | 
            <summary>
            Determines whether the path ends with a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| T:Z0.FolderName                                   | 
            <summary>
            Defines a folder name in isolation without ascribing additional path content
            </summary>
        
| P:Z0.FolderName.Description                       | 
            <summary>
            Describes the sort of file contained by the folder
            </summary>
        
| M:Z0.FolderName.Define(PartId)                    | 
            <summary>
            Defines the name of a part-owned folder
            </summary>
            <param name="part">The owning part</param>
        
| M:Z0.FolderName.Define(Z0.ApiHostUri)             | 
            <summary>
            Defines the name of an api host-owned folder
            </summary>
            <param name="part">The owning host</param>
        
| T:Z0.FolderPath                                   | 
            <summary>
            Represents a fully-qualified path to a folder on the local machine
            </summary>
        
| P:Z0.FolderPath.Name                              | 
            <summary>
            The full path name
            </summary>
        
| P:Z0.FolderPath.One                               | 
            <summary>
            Just the one
            </summary>
        
| P:Z0.FolderPath.FolderName                        | 
            <summary>
            The name of the folder sans path
            </summary>
        
| M:Z0.FolderPath.Define(System.String)             | 
            <summary>
            Creates a folder path directly from text, with no intervening manipulation
            </summary>
            <param name="name">The source path</param>
        
| M:Z0.FolderPath.op_Addition(Z0.FolderPath,Z0.FolderName)| 
            <summary>
            Combines a folder path with a subfolder name to form a new folder path
            </summary>
            <param name="path">The source path</param>
            <param name="folder">The subfolder to append</param>
        
| M:Z0.FolderPath.op_Addition(Z0.FolderPath,Z0.FileName)| 
            <summary>
            Combines a folder path with a filename to form a file path
            </summary>
            <param name="path">The source path</param>
            <param name="file">The file name</param>
        
| P:Z0.FolderPath.Exists                            | 
            <summary>
            Specifies whether the represented directory actually exists within the file system
            </summary>
        
| M:Z0.FolderPath.SubDir(Z0.FolderName)             | 
            <summary>
            Defines a subdirectory path
            </summary>
            <param name="name">The subdirectory name</param>
        
| M:Z0.FolderPath.SubDir(Z0.RelativeLocation)       | 
            <summary>
            Defines a relative subdirectory path
            </summary>
            <param name="name">The subdirectory name</param>
        
| P:Z0.FolderPath.SubDirs                           | 
            <summary>
            Nonrecursively enumerates the folder's subfolders
            </summary>
        
| P:Z0.FolderPath.AllFiles                          | 
            <summary>
            Nonrecursively enumerates all files in the folder
            </summary>
        
| P:Z0.FolderPath.WithoutSeparatorSuffix            | 
            <summary>
            The folder path sans trailing separator
            </summary>
        
| M:Z0.FolderPath.Files(Z0.FileExtension)           | 
            <summary>
            Nonrecursively enumerates files in the directory, if it exists, that match a specified extension
            </summary>
            <param name="ext">The extension to match</param>
        
| M:Z0.FolderPath.Files(PartId,Z0.FileExtension)    | 
            <summary>
            Nonrecursively enumerates part-owned folder files
            </summary>
            <param name="part">The owning part</param>
            <param name="ext">The extension to match</param>
        
| M:Z0.FolderPath.Files(Z0.ApiHostUri,Z0.FileExtension)| 
            <summary>
            Nonrecursively enumerates host-owned folder files
            </summary>
            <param name="part">The owning part</param>
            <param name="ext">The extension to match</param>
        
| M:Z0.FolderPath.Files(Z0.FileExtension,System.Boolean)| 
            <summary>
            Enumerates files in the folder, with optional recursion, that match a specified extension
            </summary>
            <param name="ext">The extension to match</param>
            <param name="recursive">Whether to enumerate recursively</param>
        
| M:Z0.FolderPath.Files(PartId)                     | 
            <summary>
            Nonrecursively enumerates folder files owned by a specified part
            </summary>
            <param name="part">The owning part</param>
        
| M:Z0.FolderPath.Files(System.String)              | 
            <summary>
            Nonrecursively enumerates folder files with names (including the extension) that contain a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FolderPath.Files(Z0.FileExtension,System.String)| 
            <summary>
            Nonrecursively Enumerates folder files that match a specified exension and with names that contain a specified substring
            </summary>
            <param name="substring">The substring to match</param>
        
| M:Z0.FolderPath.Files(PartId,Z0.FileExtension,System.Boolean)| 
            <summary>
            Enumerates the files in the folder, with optional recursion, owned by a specified parth and which match a specified extension
            </summary>
            <param name="part">The owning part</param>
            <param name="ext">The extension to match</param>
            <param name="recursive">Whether to enumerate recursively</param>
        
| M:Z0.FolderPath.Delete(System.Boolean)            | 
            <summary>
            Consigns the folder and its contents to oblivion
            </summary>
            <param name="recursive">How sure are you?</param>
        
| M:Z0.FolderPath.Create                            | 
            <summary>
            Creates the represented directory in the file system if it doesn't exist
            </summary>
            <param name="dst">The target path</param>
        
| M:Z0.FolderPath.Clear(PartId[])                   | 
            <summary>
            Deletes all files in the directory, but neither does it recurse nor delete folders
            </summary>
            <param name="owners">If nonempty, restricts the deletion operation to only files owned by a specified owner</param>
        
| T:Z0.RelativeLocation                             | 
            <summary>
            Represents a relative folder name
            </summary>
        
| T:Z0.TArchive                                     | 
            <summary>
            Characterizes a file-system repository for anticipated file kinds
            </summary>
        
| P:Z0.TArchive.ArchiveRoot                         | 
            <summary>
            The path to which all archive path arithmetic is relative
            </summary>
        
| P:Z0.TArchive.RootPartition                       | 
            <summary>
            A folder name of the form PartFolder(part):{TestPartition | AppPartition} as determined by the identifier of the entry process  
            </summary>
        
| P:Z0.TArchive.ExeRoot                             | 
            <summary>
            Defines a path that determines the root directory for process-specific archives 
            and is of the form {ArchiveRoot}/{RootPartition} 
            </summary>
        
| P:Z0.TArchive.ExeDir                              | 
            <summary>
            Defines a process-specific path of the form {ExeRoot}/{ExeFolder} where 
            ExeFolder := PartFolder(part:PartId) and {part} is the identifier of the entry process
            </summary>
        
| M:Z0.TArchive.ExeSubDir(Z0.FolderName)            | 
            <summary>
            Defines a path of the form {ExeDir}/{folder}
            </summary>
            <param name="folder">The source folder</param>
        
| M:Z0.TArchive.PartDir(PartId)                     | 
            <summary>
            Defines a path of the form {ExeRoot}/{ExeDir}/{part:Folder}
            </summary>
            <param name="part">The source part</param>
        
| T:Z0.TArchiveExtensions                           | 
            <summary>
            Defines file extensions common to all archives
            </summary>
        
| P:Z0.TArchiveExtensions.Hex                       | 
            <summary>
            Extension for hex files
            </summary>
        
| P:Z0.TArchiveExtensions.Asm                       | 
            <summary>
            Extension for formatted asm files
            </summary>
        
| P:Z0.TArchiveExtensions.Il                        | 
            <summary>
            Extension for Cil files
            </summary>
        
| P:Z0.TArchiveExtensions.Log                       | 
            <summary>
            Extension for application log files
            </summary>
        
| T:Z0.TArchiveFileNames                            | 
            <summary>
            Defines filename facilites common to all archives
            </summary>
        
| T:Z0.TArchiveFolders                              | 
            <summary>
            Defines folder names and facilites common to all archives
            </summary>
        
| P:Z0.TArchiveFolders.TestPartition                | 
            <summary>
            An archive partition for files emitted during test execution
            </summary>
        
| P:Z0.TArchiveFolders.AppPartition                 | 
            <summary>
            An archive partition for files emitted during application execution
            </summary>
        
| P:Z0.TArchiveFolders.DataPartition                | 
            <summary>
            An archive partition for static data
            </summary>
        
| P:Z0.TArchiveFolders.ExeFolder                    | 
            <summary>
            A folder name of form PartFolder(part:PartId) where {part} is the entry process identifier
            </summary>
        
| T:Z0.TPathServices                                | 
            <summary>
            Defines stateless file system services
            </summary>
        
| M:Z0.TPathServices.Files(Z0.FolderPath,PartId[])  | 
            <summary>
            Nonrecursively enumerates the files in a directory owned by one of a supplied list of parts
            </summary>
            <param name="src">The directory to search</param>
            <param name="parts">The owning parts</param>
        
| M:Z0.TPathServices.PartFolder(PartId)             | 
            <summary>
            Defines a part-specific folder name {part}
            </summary>
            <param name="part">The source part</param>
        
| M:Z0.TPathServices.HostFolder(Z0.ApiHostUri)      | 
            <summary>
            Defines a host-specific folder name {host.Name}
            </summary>
            <param name="part">The source part</param>
        
| M:Z0.TPathServices.TypeFolder(System.Type)        | 
            <summary>
            Defines a type-specific folder name {t.Name}
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.TPathServices.TypeFolder``1                  | 
            <summary>
            Defines a type-specific folder name {[T].Name} for parametric type T
            </summary>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Pipelines.ValueObserverPipe``1(Z0.Receiver{``0})| 
            <summary>
            Creates an observation pipe from a receiver function
            </summary>
            <param name="f">The receiver</param>
            <typeparam name="T">The transmission type</typeparam>
        
| M:Z0.Pipelines.ValueObserverFlow``1               | 
            <summary>
            Creates a value observation flow
            </summary>
            <typeparam name="T">The transmission type</typeparam>
        
| M:Z0.Pipelines.ValueObserverFlow``2               | 
            <summary>
            Creates a value observation flow
            </summary>
            <typeparam name="T">The transmission type</typeparam>
            <typeparam name="P">The conduit type</typeparam>
        
| M:Z0.Pipelines.RunObservationFlow``1(System.Collections.Generic.IEnumerable{``0},Z0.Receiver{``0})| 
            <summary>
            Pushes a stream through a reciever via obbservation flow/pipe system
            </summary>
            <param name="src">The source data</param>
            <param name="f">The receiver upon which the observation pipe will be predicated</param>
            <typeparam name="T">The transmission type</typeparam>
        
| M:Z0.Pipelines.ValueFactoryPipe``2(Z0.Mapper{``0,``1})| 
            <summary>
            Creates a factory pipe froma production function
            </summary>
            <param name="f">The production function</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.Pipelines.ObjectFactoryPipe``2(Z0.ObjectTransformer{``0,``1})| 
            <summary>
            Creates a factory pipe froma production function
            </summary>
            <param name="f">The production function</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.Pipelines.ObjectObserverFlow``1              | 
            <summary>
            Creates an object observation flow
            </summary>
            <typeparam name="T">The transmission type</typeparam>
        
| M:Z0.Pipelines.ObjectObserverFlow``2              | 
            <summary>
            Creates an object observation flow
            </summary>
            <typeparam name="T">The transmission type</typeparam>
            <typeparam name="P">The conduit type</typeparam>
        
| M:Z0.Pipelines.SpanPipe``1(Z0.EditorOp{``0})      | 
            <summary>
            Creates a piple that uses spans as the unit of transmission, predicated on a suppled editor
            </summary>
            <param name="f">The editer function</param>
            <typeparam name="T">The spann cell type</typeparam>
        
| M:Z0.Pipelines.SpanFlow``1                        | 
            <summary>
            Creates a piple that uses spans as the unit of transmission
            </summary>
            <typeparam name="T">The spann cell type</typeparam>
        
| M:Z0.Pipelines.StreamSink``1(Z0.StreamReceiver{``0})| 
            <summary>
            Creates a stream value sink predicated on a supplied delegate receiver
            </summary>
            <param name="receiver">The delegate receiver</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Pipelines.SpanSink``1(Z0.SpanReceiver{``0})  | 
            <summary>
            Creates a span value sink predicated on a supplied delegate receiver
            </summary>
            <param name="receiver">The delegate receiver</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Pipelines.SendBatch``1(System.Collections.Generic.IEnumerable{``0},Z0.SpanReceiver{``0},System.Int32,System.Action{System.Int32})| 
            <summary>
            Sends data from the source stream to a span receiver in batches
            </summary>
            <param name="items">The items to process</param>
            <param name="receiver">The processor</param>
            <param name="batchSize">The block size</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Pipelines.SendBatched``1(System.Collections.Generic.IEnumerable{``0},Z0.SpanReceiver{``0},System.Int32)| 
            <summary>
            Sends data from the source stream to a span receiver in batches
            </summary>
            <param name="items">The items to process</param>
            <param name="processor">The processor</param>
            <param name="batchSize">The block size</param>
            <typeparam name="T"></typeparam>
        
| T:Z0.ObjectFactoryPipe`2                          | 
            <summary>
            Reifies a value factor pipe via a supplied production function
            </summary>
        
| M:Z0.ObjectFactoryPipe`2.Flow(`0@)                | 
            <summary>
            Transforms a source value to a target value via the producer with which the pipe was instantiated
            </summary>
            <param name="src">The source value</param>
        
| T:Z0.ValueFactoryPipe`2                           | 
            <summary>
            Reifies a value factor pipe via a supplied production function
            </summary>
        
| M:Z0.ValueFactoryPipe`2.Flow(`0@)                 | 
            <summary>
            Transforms a source value to a target value via the producer with which the pipe was instantiated
            </summary>
            <param name="src">The source value</param>
        
| T:Z0.ObjectTransformer`2                          | 
            <summary>
            Characterizes a function that produces T-objects from S-objects
            </summary>
            <param name="src">The source object</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.ObjectRelay`1                                | 
            <summary>
            Characterizes a function that receives/emits an object without modification
            </summary>
            <param name="src">The source object</param>
            <typeparam name="T">The object type</typeparam>
        
| T:Z0.IObjectFactoryFlow`3                         | 
            <summary>
            Characterizes a coordinator that manages value production
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.ISpanFlow`1                                  | 
            <summary>
            Characterizes an orchestrator that coordinates data transmission
            </summary>
        
| T:Z0.IValueFactoryFlow`2                          | 
            <summary>
            Characterizes a coordinator that manages value production
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.IValueFactoryFlow`3                          | 
            <summary>
            Characterizes a coordinator that manages value production
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.IFlow                                        | 
            <summary>
            Characterizes an orchestrator that coordinates data transmission
            </summary>
        
| T:Z0.IPipe                                        | 
            <summary>
            Characterizes a conduit that transmits singletons and sequences from A -&gt; B
            </summary>
        
| T:Z0.IObjectFactoryPipe`2                         | 
            <summary>
            Characterizes a conduit that accepts S-values and produces T-values
            </summary>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.IObjectFactoryPipe`2.Flow(`0@)               | 
            <summary>
            Produces a target value from a source value
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.IObjectFactoryPipe`2.Flow(System.Collections.Generic.IEnumerable{`0})| 
            <summary>
            Transforms a stream of source values into a stream of target values
            </summary>
            <param name="src">The source stream</param>
        
| T:Z0.IValueFactoryPipe`2                          | 
            <summary>
            Characterizes a conduit that accepts S-values and produces T-values
            </summary>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.IValueFactoryPipe`2.Flow(`0@)                | 
            <summary>
            Produces a target value from a source value
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.IValueFactoryPipe`2.Flow(System.Collections.Generic.IEnumerable{`0})| 
            <summary>
            Transforms a stream of source values into a stream of target values
            </summary>
            <param name="src">The source stream</param>
        
| T:Z0.HexIndex`1                                   | 
            <summary>
            Defines a sequence of umanaged values indexed by an integer in the range [0,255]
            </summary>
        
| T:Z0.HexKindValue`1                               | 
            <summary>
            Defines an association between an integer in the range [0,0xFF] and unmanaged data of parametric type
            </summary>
        
| M:Z0.Hex.code(System.Byte)                        | 
            <summary>
            Returns the hex character code for a number in the interval [0,15]
            </summary>
            <param name="value">The value to be hex-encoded</param>
        
| M:Z0.Hex.digits(System.Byte)                      | 
            <summary>
            Computes the 2-character hex representation of a byte
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.SByte)                     | 
            <summary>
            Computes the 2-character hex representation of a signed byte
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.UInt16)                    | 
            <summary>
            Computes the 4-character hex representation of an unsigned 16-bit integer
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.Int16)                     | 
            <summary>
            Computes the 4-character hex representation of a signed 16-bit integer
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.UInt32)                    | 
            <summary>
            Computes the 8-character hex representation of an unsigned 32-bit integer
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.Int32)                     | 
            <summary>
            Computes the 8-character hex representation of a signed 32-bit integer
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.UInt64)                    | 
            <summary>
            Computes the 16-character hex representation of an unsigned 64-bit integer
            </summary>
            <param name="src">The byte value</param>
        
| M:Z0.Hex.digits(System.Int64)                     | 
            <summary>
            Computes the 16-character hex representation of a signed 64-bit integer
            </summary>
            <param name="src">The byte value</param>
        
| P:Z0.IApiMethod.HostUri                           | 
            <summary>
            The globally-unique host uri
            </summary>
        
| P:Z0.IApiMethod.Method                            | 
            <summary>
            The hosted method
            </summary>
        
| P:Z0.IApiMethod.KindId                            | 
            <summary>
            The method's kind identifier if it exists
            </summary>
        
| T:Z0.ApiMember                                    | 
            <summary>
            Describes a reified api member wich may be of hosted or located state
            </summary>
        
| T:Z0.ClosedApiMethod                              | 
            <summary>
            Captures identifying/descriptive information about a generic closure
            </summary>
        
| P:Z0.ClosedApiMethod.Host                         | 
            <summary>
            The delcaring host
            </summary>
        
| P:Z0.ClosedApiMethod.Id                           | 
            <summary>
            The closure identity
            </summary>
        
| P:Z0.ClosedApiMethod.Kind                         | 
            <summary>
            The primal kind over which the subject operation was closed
            </summary>
        
| P:Z0.ClosedApiMethod.Method                       | 
            <summary>
            The closed method
            </summary>
        
| P:Z0.ClosedApiMethod.HostUri                      | 
            <summary>
            The hosting type uri
            </summary>
        
| M:Z0.ClosedApiMethod.#ctor(Z0.IApiHost,Z0.OpIdentity,Z0.NumericKind,System.Reflection.MethodInfo)| 
            <summary>
            Initializes a closure specification
            </summary>
            <param name="id">The assigned identity</param>
            <param name="kind">The primal kind over which the subject was closed</param>
            <param name="closed">The closed method</param>
        
| P:Z0.DelegateIdentity.Parameters                  | 
            <summary>
            The type parameters that define the full delegate signature that includes the return type
            as the last identity in the array
            </summary>
        
| P:Z0.DelegateIdentity.DelegateName                | 
            <summary>
            The unadorned name of the delegate tyepe
            </summary>
        
| P:Z0.DelegateIdentity.Identifier                  | 
            <summary>
            The identifier computed from the name and parameter identities
            </summary>
        
| P:Z0.DelegateIdentity.Generic                     | 
            <summary>
            Indicates whether identifier should be rendered with a generic marker
            </summary>
        
| T:Z0.DirectApiGroup                               | 
            <summary>
            Defines a grouping construct for relating non-generic operations
            </summary>
        
| P:Z0.DirectApiGroup.GroupId                       | 
            <summary>
            The group identity
            </summary>
        
| P:Z0.DirectApiGroup.Host                          | 
            <summary>
            The delcaring host
            </summary>
        
| P:Z0.DirectApiGroup.Members                       | 
            <summary>
            The grouped operations
            </summary>
        
| P:Z0.DirectApiMethod.Host                         | 
            <summary>
            The delcaring host
            </summary>
        
| P:Z0.DirectApiMethod.Id                           | 
            <summary>
            The operation identity
            </summary>
        
| P:Z0.DirectApiMethod.Method                       | 
            <summary>
            The concrete method that defines the operation
            </summary>
        
| P:Z0.DirectApiMethod.HostUri                      | 
            <summary>
            The hosting type uri
            </summary>
        
| P:Z0.GenericOpIdentity.Identifier                 | 
            <summary>
            The operation identifier
            </summary>
        
| M:Z0.GenericOpIdentity.Define(System.String)      | 
            <summary>
            Creates a moniker directly from source text
            </summary>
            <param name="src">The source text</param>
        
| T:Z0.LegalIdentifier                              | 
            <summary>
            Alternate identity indidators for use in source code identifier production
            </summary>
        
| P:Z0.OpUri.UriText                                | 
            <summary>
            The full uri in the form {Scheme}://{HostPath}/{OpId}
            </summary>
        
| F:Z0.OpUri.Scheme                                 | 
            <summary>
            The uri scheme, constrained to the defining enumeration
            </summary>
        
| F:Z0.OpUri.Host                                   | 
            <summary>
            The host fragment, of the form {assmblyid}/{hostname}
            </summary>
        
| F:Z0.OpUri.GroupName                              | 
            <summary>
            The name assigned to a group of methods; usually agrees with what is called a "method group" in clr-land
            The purpose of the group name is to classify/identify a related set of methods and, again, this typically
            corresponds to the "name" property on a method
            </summary>
        
| F:Z0.OpUri.OpId                                   | 
            <summary>
            Defines host-relative identity in the form, for example, {opname}_{typewidth}X{segwidth}{u | i | f}
            </summary>
        
| P:Z0.OpUri.Part                                   | 
            <summary>
            The defining part
            </summary>
        
| P:Z0.OpUri.Empty                                  | 
            <summary>
            Emptiness of nothing
            </summary>
        
| T:Z0.IIdentityProvider`1                          | 
            <summary>
            Characterizes a serviice capable of assigning identity to T-values
            </summary>
            <typeparam name="S">The subject of identification</typeparam>
        
| F:Z0.Memories.One8u                               | 
            <summary>
            One, presented as an 8-bit unsigned integer
            </summary>
        
| F:Z0.Memories.Zero16i                             | 
            <summary>
            Zero, presented as a 16-bit signed integer
            </summary>
        
| F:Z0.Memories.Zero16u                             | 
            <summary>
            Zero, presented as a 16-bit unsigned integer
            </summary>
        
| F:Z0.Memories.Zero32i                             | 
            <summary>
            Zero, presented as a 32-bit signed integer
            </summary>
        
| F:Z0.Memories.Zero32u                             | 
            <summary>
            Zero, presented as a 32-bit unsigned integer
            </summary>
        
| F:Z0.Memories.Zero64i                             | 
            <summary>
            Zero, presented as a 64-bit signed integer
            </summary>
        
| F:Z0.Memories.Zero64u                             | 
            <summary>
            Zero, presented as a 64-bit unsigned integer
            </summary>
        
| F:Z0.Memories.z8i                                 | 
            <summary>
            The zero-value for an 8-bit signed integer
            </summary>
        
| F:Z0.Memories.z8                                  | 
            <summary>
            The zero-value for an 8-bit usigned integer
            </summary>
        
| F:Z0.Memories.z16i                                | 
            <summary>
            The zero-value for a 16-bit signed integer
            </summary>
        
| F:Z0.Memories.z16                                 | 
            <summary>
            The zero-value for a 16-bit unsigned integer
            </summary>
        
| F:Z0.Memories.z32i                                | 
            <summary>
            The zero-value for a 32-bit signed integer
            </summary>
        
| F:Z0.Memories.z32                                 | 
            <summary>
            The zero-value for a 32-bit usigned integer
            </summary>
        
| F:Z0.Memories.z64i                                | 
            <summary>
            The zero-value for a 64-bit signed integer
            </summary>
        
| F:Z0.Memories.z64                                 | 
            <summary>
            The zero-value for a 64-bit usigned integer
            </summary>
        
| F:Z0.Memories.z32f                                | 
            <summary>
            The zero-value for a 32-bit float
            </summary>
        
| F:Z0.Memories.z64f                                | 
            <summary>
            The zero-value for a 64-bit float
            </summary>
        
| F:Z0.Memories.Max8u                               | 
            <summary>
            The largest representable value v where v:uint8
            </summary>
        
| F:Z0.Memories.Max16u                              | 
            <summary>
            The largest representable value v where v:uint16
            </summary>
        
| F:Z0.Memories.Max24u                              | 
            <summary>
            The largest representable value v where v:uint24
            </summary>
        
| F:Z0.Memories.Max32u                              | 
            <summary>
            The largest representable value v where v:uint32
            </summary>
        
| F:Z0.Memories.Max40u                              | 
            <summary>
            The largest representable value v where v:uint40
            </summary>
        
| F:Z0.Memories.Max48u                              | 
            <summary>
            The largest representable value v where v:uint48
            </summary>
        
| F:Z0.Memories.Max56u                              | 
            <summary>
            The largest representable value v where v:uint56
            </summary>
        
| F:Z0.Memories.Max64u                              | 
            <summary>
            The largest representable value v where v:uint64
            </summary>
        
| M:Z0.Memories.array``1(``0[])                     | 
            <summary>
            Constructs an array from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.set``1(``0[])                       | 
            <summary>
            Constructs an array from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.cast``1(System.Object)              | 
            <summary>
            Explicitly casts a source value to value of the indicated type, raising an exception if operation fails
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.cells``2(``0,``1)                   | 
            <summary>
            Counts the number of numeric T-cells that can be convered by contiguous memory of width W
            </summary>
            <param name="w">The memory bit-width</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Memories.concat(System.Object[])             | 
            <summary>
            Joins the string representation of a sequence of items with no interspersed separator
            </summary>
            <param name="src">The values to be joined</param>
        
| M:Z0.Memories.constptr``1(``0@)                   | 
            <summary>
            Presents a readonly reference as a generic pointer which should intself be considered constant
            but, as far as the author is aware, no facility within the language can encode that constraint
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Memories.constptr``1(``0@,System.Int32)      | 
            <summary>
            Presents a readonly reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Memories.convert``2(``0)                     | 
            <summary>
            If possible, applies the conversion S -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.Byte,``0)         | 
            <summary>
            If possible, applies the conversion byte -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.SByte,``0)        | 
            <summary>
            If possible, applies the conversion sbyte -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.UInt16,``0)       | 
            <summary>
            If possible, applies the conversion ushort -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.Int16,``0)        | 
            <summary>
            If possible, applies the conversion short -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.Int32,``0)        | 
            <summary>
            If possible, applies the conversion int -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.UInt32,``0)       | 
            <summary>
            If possible, applies the conversion uint -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.Int64,``0)        | 
            <summary>
            If possible, applies the conversion long -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.UInt64,``0)       | 
            <summary>
            If possible, applies the conversion ulong -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.Single,``0)       | 
            <summary>
            If possible, applies the conversion float -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.convert``1(System.Double,``0)       | 
            <summary>
            If possible, applies the conversion double -&gt; T
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Memories.delay(System.TimeSpan)              | 
            <summary>
            Returns after specified duration has elapsed
            </summary>
            <param name="duration">The time to wait before returning</param>
        
| M:Z0.Memories.delayAsync(System.TimeSpan)         | 
            <summary>
            Introduces an asynchronous delay
            </summary>
            <param name="duration">The length of the delay to introduce</param>
        
| M:Z0.Memories.edit``1(``0@)                       | 
            <summary>
            Presents a readonly reference as reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Double}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Single}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Double}@)| 
            <summary>
            Reinterprets the source vector as a vector over parametric T-cells
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The target type</typeparam>
            <remarks>This operation should be dissolved when the method is closed over a concrete type
            and should not impact instruction generation</remarks>
        
| M:Z0.Memories.head``1(System.Span{``0})           | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Memories.head``1(System.Span{``0},System.Int32)| 
            <summary>
            Returns a reference to the head of a span, offset by a specified amount
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Memories.head``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Memories.head``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Returns a readonly reference to the head of a readonly span, offset by a specified amount
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Memories.head``1(``0[])                      | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Memories.increment(System.Int32@)            | 
            <summary>
            Atomically increments a value in-place
            </summary>
            <param name="src">The value to increment in-place</param>
        
| M:Z0.Memories.increment(System.Int64@)            | 
            <summary>
            Atomically increments a value in-place
            </summary>
            <param name="src">The value to increment in-place</param>
        
| M:Z0.Memories.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)| 
            <summary>
            Iterates over the supplied items, invoking a receiver for each
            </summary>
            <param name="src">The source items</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Memories.iteri``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})| 
            <summary>
            Iterates over the supplied items, invoking an indexed receiver for each
            </summary>
            <param name="src">The source items</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Memories.list``1(System.Int32)               | 
            <summary>
            Creates a list with specified capacity
            </summary>
            <param name="capacity">The list capacity</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Memories.list``1(``0[])                      | 
            <summary>
            Creates a list from a parameter array
            </summary>
            <param name="src">The source items</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Memories.location``1(``0@)                   | 
            <summary>
            Returns the memory addres of the source reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The referent type</typeparam>
        
| M:Z0.Memories.mapi``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})| 
            <summary>
            Applies the supplied function to each element in the input sequence to produce a list
            </summary>
            <typeparam name="X">The input sequence item type</typeparam>
            <typeparam name="S">The output sequence item type</typeparam>
            <param name="seq">The sequence to transform</param>
            <param name="f">The transformation function</param>
        
| M:Z0.Memories.maxval``1                           | 
            <summary>
            Returns the maximum value supported by a parametrically-identified primal type
            </summary>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.minval``1                           | 
            <summary>
            Returns the minimum value supported by a parametrically-identified primal type
            </summary>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.min``1(Z0.NK{``0})                  | 
            <summary>
            Returns the minimum value supported by a parametrically-identified primal type
            </summary>
            <param name="nk">The kind classifier</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.nati``1(``0)                        | 
            <summary>
            Retrieves the value of a type natural represented as a signed integer
            </summary>
            <typeparam name="N">The nat type</typeparam>
        
| M:Z0.Memories.none``1                             | 
            <summary>
            Defines a non-valued option
            </summary>
            <typeparam name="T">The value type, if the value existed</typeparam>
        
| M:Z0.Memories.denullify(System.String)            | 
            <summary>
            If the test string is null, returns the empty string; otherwise, returns the test string
            </summary>
            <param name="test">The subject string</param>
            <param name="replace">The replacement value if blank</param>
        
| M:Z0.Memories.one``1                              | 
            <summary>
            Returns generic 1 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.one``1(``0)                         | 
            <summary>
            Returns generic 1 for a primal source type
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.ones``1                             | 
            <summary>
            Ones all bits each and every ... one
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.ones``1(``0)                        | 
            <summary>
            Ones all bits each and every ... one
            </summary>
            <param name="t">A primal type representative</param>
            <typeparam name="T">The primal source type</typeparam>
        
| M:Z0.Memories.option``1(``0)                      | 
            <summary>
            Defines an option for a reference type; a valued option is produced if the source is non-null; otherwise, a non-valued option is produced
            </summary>
            <param name="src">A source value, or null</param>
            <typeparam name="T">The enclosed type</typeparam>
        
| M:Z0.Memories.option``1(System.Nullable{``0})     | 
            <summary>
            Defines an option for a nullable value type; a valued option is produced if the source is non-null; otherwise, a non-valued option is produced
            </summary>
            <param name="src">A source value, or null</param>
            <typeparam name="T">The enclosed type</typeparam>
        
| M:Z0.Memories.ptr``1(``0@)                        | 
            <summary>
            Presents generic reference as a generic pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Memories.ptr``1(``0@,System.Int32)           | 
            <summary>
            Presents generic reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Memories.seek``1(``0@,System.Int32)          | 
            <summary>
            Adds an offset to a reference, measured relative to the reference type
            </summary>
            <param name="src">The source reference</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.seek``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.seek64``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to 64-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Memories.seq``1(``0[])                       | 
            <summary>
            Constructs a enumerable from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.sfunc``1                            | 
            <summary>
            Creates a structural function of specified parametric type
            </summary>
            <typeparam name="S">The host type</typeparam>
        
| M:Z0.Memories.sfunc``2(``0,``1)                   | 
            <summary>
            Creates a structural function of specified parametric type
            </summary>
            <typeparam name="S">The host type</typeparam>
        
| M:Z0.Memories.sfunc``3(``0,``1,``2)               | 
            <summary>
            Creates a structural function of specified parametric type
            </summary>
            <typeparam name="S">The host type</typeparam>
        
| M:Z0.Memories.skip``1(``0@,System.Int32)          | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the resulting element
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Memories.skip``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.skip``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Memories.some``1(``0)                        | 
            <summary>
            Defines a valued option
            </summary>
            <param name="value">The value</param>
            <typeparam name="T">The type of the extant value</typeparam>
        
| M:Z0.Memories.span``1(``0[])                      | 
            <summary>
            Constructs a span from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Memories.task``1(System.Func{``0})           | 
            <summary>
            Executes a worker that computes a value within the context of a new task
            </summary>
            <param name="worker">The worker to execute</param>
        
| M:Z0.Memories.task(System.Action)                 | 
            <summary>
            Executes a worker within the context of a new task
            </summary>
            <param name="worker">The worker to execute</param>
        
| M:Z0.Memories.task``2(System.Func{``0,``1},``0)   | 
            <summary>
            Executes a worker that computes a value within the context of a new task
            </summary>
            <param name="worker">The worker to execute</param>
            <param name="s0">The value to supply to the worker</param>
        
| M:Z0.Memories.thread(System.UInt32)               | 
            <summary>
            Searches for a thread given an OS-assigned id, not the useless clr id
            </summary>
            <param name="id">The OS thread Id</param>
        
| M:Z0.Memories.Try``1(System.Func{``0},System.Action{System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None and invokes an error handler if supplied
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="f">The function to evaluate</param>
        
| M:Z0.Memories.Try(System.Action,System.Action{System.Exception})| 
            <summary>
            Invokes an action within a try block and, upon error, calls
            the handler if specified. If no handler is specified, the exception
            message is emitted to stderr
            </summary>
            <param name="f">The action to invoke</param>
            <param name="onerror">The error handler to call, if specified</param>
        
| M:Z0.Memories.TryCast``1(System.Object)           | 
            <summary>
            Casts a value to a parametric type, if possible, otherwise returns none
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="src">The object to cast</param>
        
| M:Z0.Memories.unbox``1(System.Object)             | 
            <summary>
            Takes a value out of a box
            </summary>
            <param name="src">The boxed value</param>
            <typeparam name="T">The boxed type</typeparam>
        
| M:Z0.Memories.unbox``1(System.Enum)               | 
            <summary>
            Takes an enum value out of a box
            </summary>
            <param name="src">The boxed value</param>
            <typeparam name="T">The boxed type</typeparam>
        
| M:Z0.Memories.unparsed``1(System.Object,System.String)| 
            <summary>
            Defines a parse failure result
            </summary>
            <param name="src">The unparseable thing</param>
            <param name="reason">The reason the parser failed, if know, or if laziness doesn't prevent reason specification</param>
            <typeparam name="T">The target type that could not be hydrated </typeparam>
        
| M:Z0.Memories.value``1(``0)                       | 
            <summary>
            Returns the numeric value represented by a natural type
            </summary>
            <param name="n">The natural type representativev</param>
            <typeparam name="K">A natural type</typeparam>
        
| M:Z0.Memories.val8u``1(``0)                       | 
            <summary>
            Returns the numeric value represented by a natural type
            </summary>
            <param name="n">The natural type representativev</param>
            <typeparam name="K">A natural type</typeparam>
        
| M:Z0.Memories.vcell``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extracts an index-identified component from the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.vcell``2(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extracts a T-indexed component from a vector obtained by converting the S-vector to a T-vector
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.vcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Sets an index-identified component to a specified value
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <param name="value">The new component value</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.vcell``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extracts an index-identified component from the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.vcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Sets an index-identified component to a specified value
            </summary>
            <param name="src">The source vector</param>
            <param name="index">The index of the component to extract</param>
            <param name="value">The new component value</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.vcell8i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell8``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell16i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell16``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell32i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell32``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell64i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell64``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell32f``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell64f``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell8i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell8``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell16i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell16``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell32i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell32``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell64``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell64i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell32f``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcell64f``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| 
            <summary>
            Extract an index-identified component of a reinterpreted vector
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vto``2(System.Runtime.Intrinsics.Vector128{``0},``1)| 
            <summary>
            Reinterprets a vector over S-cells as a vector over T-cells
            </summary>
            <param name="x">The source vector</param>
            <param name="t">A target cell type representative</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Memories.vto``2(System.Runtime.Intrinsics.Vector256{``0},``1)| 
            <summary>
            Reinterprets a vector over S-cells as a vector over T-cells
            </summary>
            <param name="x">The source vector</param>
            <param name="t">A target cell type representative</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Memories.v8i``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.v8u``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v16i``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v16u``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v32i``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v32u``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v64i``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v64u``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v32f``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v64f``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v8i``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v8u``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint8
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v16i``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v16u``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint16
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v32i``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v32u``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v64i``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type int64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v64u``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type uint64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v32f``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float32
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.v64f``1(System.Runtime.Intrinsics.Vector256{``0})| 
            <summary>
            Presents a generic cpu vector as a cpu vector with components of type float64
            </summary>
            <param name="x">The source vector</param>
            <typeparam name="T">The source vector primal component type</typeparam>
        
| M:Z0.Memories.vcount``2(``0,``1)                  | 
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Memories.vcount``1(Z0.N128,``0)              | 
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Memories.vcount``1(Z0.N256,``0)              | 
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Memories.vcount``1(Z0.N512,``0)              | 
            <summary>
            Computes the vector component count for a given bit-width and component type
            </summary>
            <param name="w">The width selector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Memories.vhead``1(System.Runtime.Intrinsics.Vector128{``0})| 
            <summary>
            Extracts the first component of the source vector
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The primal component type</typeparam>
        
| M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| 
            <summary>
            __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.SByte,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| 
            <summary>
             __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)PINSRB xmm, reg/m8, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.Int16,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| 
            <summary>
            __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| 
            <summary>
            __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.Int32,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| 
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| 
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N0)| 
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[0] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N1)| 
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[1] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N2)| 
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[2] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N3)| 
            <summary>
            __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8
            Effects dst[3] = src
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="n">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.Int64,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| 
            <summary>
            __m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64,imm8
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt64,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| 
            <summary>
            _mm_insert_epi64:
            Overwrites an identified component in the target vector with a specified value
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target vector</param>
            <param name="index">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in an index-identified lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="laneidx">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N0,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in the first in the lower lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in the upper lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N0,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in the lower lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N1,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in the upper lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N0,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in the lower lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N1,System.Byte)| 
            <summary>
            Overwrites an index-indentified cell in the upper lane with a specified value
            </summary>
            <param name="src">The soruce value</param>
            <param name="dst">The target vector</param>
            <param name="lane">The lane selector</param>
            <param name="cellidx">The cell selector</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| 
            <summary>
             __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8
            Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)| 
            <summary>
            _mm256_insertf128_ps: Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| 
            <summary>
            _mm256_insertf128_pd: Overwrites a 128-bit lane in the target with the content of the source vector
            </summary>
            <param name="src">The source vector</param>
            <param name="dst">The target vector</param>
            <param name="index">Identifies the lane in the target to overwrite, either 0 or 1 respectively 
            identifing low or hi</param>
        
| M:Z0.Memories.width``1                            | 
            <summary>
            Computes the type width of a prametrically-identified type
            </summary>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Memories.yn(System.Boolean)                  | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(Z0.bit)                          | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.Byte)                     | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.SByte)                    | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.Int16)                    | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.UInt16)                   | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.Int32)                    | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.UInt32)                   | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.Int64)                    | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn(System.UInt64)                   | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Memories.yn``1(``0)                          | 
            <summary>
            Yea or Nea?
            </summary>
            <param name="src">The source value</param>
        
| T:Z0.IBufferedChecker                             | 
            <summary>
            Characterizes a test service that provides access to a buffer sequence
            </summary>
        
| P:Z0.IBufferedChecker.Buffers                     | 
            <summary>
            All the buffers belong to this
            </summary>
        
| P:Z0.IBufferedChecker.Z0#IBufferTokenSource#Item(Z0.BufferSeqId)| 
            <summary>
            Returns the token of an index-identified buffer
            </summary>
        
| M:Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.UInt64},System.ReadOnlySpan{System.UInt64})| 
            <summary>
            Returns true if the character spans are equal as strings, false otherwise
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.ICheckPrimalSeq.eq(System.Boolean[],System.Boolean[],System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts the equality of two boolean arrays
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
            <param name="caller">The caller member name</param>
            <param name="file">The source file of the calling function</param>
            <param name="line">The source file line number where invocation ocurred</param>
        
| M:Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts content equality for two character spans
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts content equality for two byte spans
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts content equality for two byte spans
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts content equality for two byte spans
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.UInt64},System.ReadOnlySpan{System.UInt64},System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Asserts content equality for two byte spans
            </summary>
            <param name="lhs">The left span</param>
            <param name="rhs">The right span</param>
            <param name="caller">The invoking function</param>
            <param name="file">The file in which the invoking function is defined </param>
            <param name="line">The file line number of invocation</param>
            <typeparam name="T">The element type</typeparam>
        
| T:Z0.AppMsg                                       | 
            <summary>
            Defines a message that encapsulates application diagnstic/status/error message content
            </summary>
        
| P:Z0.AppMsg.Content                               | 
            <summary>
            The message body
            </summary>
        
| P:Z0.AppMsg.Kind                                  | 
            <summary>
            The message classification
            </summary>
        
| P:Z0.AppMsg.Color                                 | 
            <summary>
            The message foreground color when rendered for display
            </summary>
        
| P:Z0.AppMsg.Caller                                | 
            <summary>
            The name of the member that originated the message
            </summary>
        
| P:Z0.AppMsg.CallerFile                            | 
            <summary>
            The path to the source file in which the message originated
            </summary>
        
| P:Z0.AppMsg.FileLine                              | 
            <summary>
            The source file line number on which the message originated
            </summary>
        
| P:Z0.AppMsg.Displayed                             | 
            <summary>
            Specifies whether the message has been emitted to an output device, such as the terminal
            </summary>
        
| M:Z0.AppMsg.WithPrependedContent(System.Object)   | 
            <summary>
            Prepends the message body with specified content
            </summary>
            <param name="prefix">The prefix conent</param>
        
| M:Z0.AppMsg.AsDisplayed                           | 
            <summary>
            Sets the display state to true
            </summary>
        
| M:Z0.AppEvents.sink``1(System.Action{``0})        | 
            <summary>
            Creates an even sink predicated on a receiver
            </summary>
            <param name="receiver">The receiver to invoke upon event receipt</param>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.AppEvents.sink(System.Action{Z0.IAppEvent})  | 
            <summary>
            Creates an even sink predicated on a receiver
            </summary>
            <param name="receiver">The receiver to invoke upon event receipt</param>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.AppEvents.subscribe``1(``0,Z0.IEventBroker,System.Action{``0})| 
            <summary>
            Registers an event receiver to which brokered events will be relayed
            </summary>
            <param name="model">An event representative</param>
            <param name="broker">The broker</param>
            <param name="receiver">The handler ivoked upon event occurrence</param>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.AppMsgExchange.Create(Z0.IAppMsgQueue)       | 
            <summary>
            Creates an exchange over an existing queue
            </summary>
        
| M:Z0.AppMsgExchange.Create                        | 
            <summary>
            Creates an exchange and underlying queue
            </summary>
        
| M:Z0.AppMsgExchange.Deposit(Z0.IAppMsg)           | 
            <summary>
            Enqueues application messages
            </summary>
            <param name="msg">The messages to enqueue</param>
        
| T:Z0.AppMsgQueue                                  | 
            <summary>
            A container of messages which isnt't realy a queue but is more-or-less thread-safe
            </summary>
        
| M:Z0.term.magenta(System.Object)                  | 
            <summary>
            Emits an information-level message with a magenta foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.magenta(System.String,System.Object)    | 
            <summary>
            Emits an information-level message with a magenta foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.green(System.Object)                    | 
            <summary>
            Emits an information-level message with a magenta foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.green(System.String,System.Object)      | 
            <summary>
            Emits an information-level message with a magenta foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.cyan(System.Object)                     | 
            <summary>
            Emits an information-level message with a cyan foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.cyan(System.String,System.Object)       | 
            <summary>
            Emits an information-level message with a cyan foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.red(System.Object)                      | 
            <summary>
            Emits an information-level message with a red foreground, typically used to emit error messages 
            at the point of occurrence, not at the point at which they are handled
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.red(System.String,System.Object)        | 
            <summary>
            Emits an information-level message with a red foreground, typically used to emit error messages 
            at the point of occurrence, not at the point at which they are handled
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.yellow(System.Object)                   | 
            <summary>
            Emits an information-level message with a yellow foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.yellow(System.String,System.Object)     | 
            <summary>
            Emits an information-level message with a yellow foreground
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.babble(System.Object)                   | 
            <summary>
            Emits a verbose-level message
            </summary>
            <param name="content">The message to emit</param>
        
| M:Z0.term.inform(System.Object)                   | 
            <summary>
            Emits an information-level message
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.announce(System.String)                 | 
            <summary>
            Announces a menthod invocation
            </summary>
            <param name="caller">The invoked method</param>
        
| M:Z0.term.warn(System.Object,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Emits a warning-level message
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.error(System.Object,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Emits message to the error output stream
            </summary>
            <param name="content">The message to emit</param>
            <param name="caller">The calling member</param>
        
| M:Z0.term.error(System.Exception,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Emits a message to the error output stream
            </summary>
            <param name="e">The raised exception</param>
            <param name="title">The name/context of the error</param>
        
| M:Z0.term.error(Z0.ClaimException,System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Emits a message to the error output stream
            </summary>
            <param name="e">The raised exception</param>
            <param name="title">The name/context of the error</param>
        
| M:Z0.term.errlabel(System.Exception,System.String,System.String,System.String,System.Nullable{System.Int32})| 
            <summary>
            Emits a message to the error output stream
            </summary>
            <param name="e">The raised exception</param>
            <param name="title">The name/context of the error</param>
        
| M:Z0.term.print                                   | 
            <summary>
            Writes an empty line to the console
            </summary>
        
| M:Z0.term.print(Z0.IAppMsg)                       | 
            <summary>
            Writes a single messages to the terminal
            </summary>
            <param name="msg">The message to print</param>    
        
| M:Z0.term.print(Z0.IAppMsg,Z0.AppMsgColor)        | 
            <summary>
            Writes a single messages to the terminal
            </summary>
            <param name="msg">The message to print</param>    
        
| M:Z0.term.print(Z0.AppMsg)                        | 
            <summary>
            Writes a single messages to the terminal
            </summary>
            <param name="msg">The message to print</param>    
        
| M:Z0.term.print(System.Object)                    | 
            <summary>
            Writes a single line to the terminal
            </summary>
            <param name="content">The message to print</param>    
        
| M:Z0.term.print``1(``0,Z0.AppMsgColor)            | 
            <summary>
            Writes formattables to the console in a contiguous block
            </summary>
            <param name="content">The content to print</param>    
        
| M:Z0.term.print``1(``0)                           | 
            <summary>
            Writes formattables to the console in a contiguous block
            </summary>
            <param name="content">The content to print</param>    
        
| M:Z0.term.print``1(``0[])                         | 
            <summary>
            Writes formattables to the console in a contiguous block
            </summary>
            <param name="content">The content to print</param>    
        
| M:Z0.term.print``1(Z0.AppMsgColor,``0[])          | 
            <summary>
            Writes formattables to the console in a contiguous block using a specified foreground color
            </summary>
            <param name="color">The message foreground color</param>    
            <param name="content">The content to print</param>    
        
| M:Z0.term.print(System.Collections.Generic.IEnumerable{Z0.AppMsg})| 
            <summary>
            Prints a sequence of messages in an unbroken block
            </summary>
            <param name="content">The messages to print</param>    
        
| M:Z0.term.read                                    | 
            <summary>
            Reads a line of text from the terminal
            </summary>
        
| M:Z0.term.readKey(System.String)                  | 
            <summary>
            Reads a character from the terminal
            </summary>
        
| M:Z0.term.read(System.String)                     | 
            <summary>
            Reads a line of text from the terminal after printing a supplied message
            </summary>
        
| T:Z0.EventRelay                                   | 
            <summary>
            Defines a sink that forwards deposits to a receiver
            </summary>
        
| T:Z0.EventRelay`1                                 | 
            <summary>
            Defines a sink that forwards deposits to a receiver
            </summary>
        
| T:Z0.Terminal                                     | 
            <summary>
            Implments a thread-safe/thread-aware terminal absraction
            </summary>
        
| M:Z0.Terminal.SetTerminationHandler(System.Action)| 
            <summary>
            Specfifies the handler to invoke when the user enters a cancellation
            command, such as Ctrl+C
            </summary>
            <param name="handler">The handler to invoke when a termination command is received</param>
        
| M:Z0.Terminal.WriteChar(System.Char,System.Nullable{Z0.AppMsgColor})| 
            <summary>
            Writes a single character to the console
            </summary>
            <param name="c">The char to emit</param>
            <param name="severity">The severity</param>
        
| T:Z0.IAppError                                    | 
            <summary>
            Characterizes an event that describes an error
            </summary>
        
| T:Z0.IAppError`1                                  | 
            <summary>
            Characterizes an error event reification
            </summary>
        
| T:Z0.IAppEvent                                    | 
            <summary>
            Characterizes a correlated message, accompanied by arbitrary content, 
            that describes an occurrence of something interesting
            </summary>
        
| P:Z0.IAppEvent.Content                            | 
            <summary>
            The data associated with the event
            </summary>
        
| T:Z0.IAppEvent`1                                  | 
            <summary>
            Characterizes a reified application event
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IAppEventSink`1                              | 
            <summary>
            Characterizes an event-parametric application event sink
            </summary>
            <typeparam name="E">The event type</typeparam>
        
| T:Z0.IAppMsgContext                               | 
            <summary>
            Joines a sink and receiver to form a context
            </summary>
        
| T:Z0.IAppMsgExchange                              | 
            <summary>
            Characterizes a stateful thing that functions as an exchange for application messages
            </summary>
        
| T:Z0.IEventBroker                                 | 
            <summary>
            Characterizes an application even exchange hub
            </summary>
        
| M:Z0.IEventBroker.Subscribe``2(``0,``1)           | 
            <summary>
            Registers a target sink to which events will be routed
            </summary>
            <param name="sink">The target sink</param>
            <param name="model">An event representative</param>
            <typeparam name="S">The sink type</typeparam>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.IEventBroker.Subscribe``1(System.Action{``0},``0)| 
            <summary>
            Registers an Event-parametric receiver to invoke upon occurrence of the parametrically-identified event
            </summary>
            <param name="receiver">The event receiver</param>
            <param name="model">An event model representative that identifies the event of interest</param>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.IEventBroker.Subscribe(System.Action{Z0.IAppEvent},Z0.IAppEvent)| 
            <summary>
            Registers a non-parametric receiver to invoke upon occurrence of a specified event
            </summary>
            <param name="receiver"></param>
            <param name="model">An event model representative that identifies the event of interest</param>
        
| M:Z0.IEventBroker.Raise``1(``0@)                  | 
            <summary>
            Relays an event to sinks and receivers registerd with the broker
            </summary>
            <param name="e">The event to relay</param>
            <typeparam name="E">The event type</typeparam>
        
| M:Z0.Unsupported.define``1                        | 
            <summary>
            Populates a <see cref="T:System.NotSupportedException" /> complaining that a 
            parametrically-identified type is not supported
            </summary>
            <typeparam name="T">The unsupported type</typeparam>
        
| M:Z0.Unsupported.define(System.Type)              | 
            <summary>
            Populates a <see cref="T:System.NotSupportedException" /> complaining that a 
            parametrically-identified type is not supported
            </summary>
            <typeparam name="T">The unsupported type</typeparam>
        
| M:Z0.Unsupported.value``1(``0)                    | 
            <summary>
            Populates a <see cref="T:System.NotSupportedException" /> complaining that a  value is not supported
            </summary>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Unsupported.define``1(System.String)         | 
            <summary>
            Populates a <see cref="T:System.NotSupportedException" />, populated with a custom message describing why a 
            parametrically-identified type is not supported
            </summary>
            <typeparam name="T">The unsupported type</typeparam>
        
| M:Z0.Unsupported.define(Z0.NumericKind)           | 
            <summary>
            Populates a <see cref="T:System.NotSupportedException" /> complaining that a specified numeric kind isn't supported
            </summary>
            <typeparam name="T">The unsupported type</typeparam>
        
| M:Z0.Unsupported.raise``1                         | 
            <summary>
            Raises <see cref="T:System.NotSupportedException" /> complaining that a 
            parametrically-identified type is not supported
            </summary>
            <typeparam name="T">The unsupported type</typeparam>
        
| M:Z0.Unsupported.raise``1(``0)                    | 
            <summary>
            Populates a <see cref="T:System.NotSupportedException" /> complaining that a  value is not supported
            </summary>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Unsupported.raise``1(System.String)          | 
            <summary>
            Raises <see cref="T:System.NotSupportedException" /> populated with a custom message describing why a 
            parametrically-identified type is not supported
            </summary>
            <typeparam name="T">The unsupported type</typeparam>
        
| T:Z0.IFixed                                       | 
            <summary>
            Characterizes a type that occupies a fixed amount of space at runtime
            </summary>
        
| P:Z0.IFixed.BitWidth                              | 
            <summary>
            The invariant number of bits covered by the reifying type
            </summary>
        
| T:Z0.IFixed`1                                     | 
            <summary>
             Characterizes a fixed type with storage and reification types of equal size
            </summary>
            <typeparam name="S">The storage type</typeparam>
        
| T:Z0.IFuncW`1                                     | 
            <summary>
            Characterizes a structural function that is width-parametric
            </summary>
            <typeparam name="W">The width type</typeparam>
        
| T:Z0.IFuncWT`2                                    | 
            <summary>
            Characterizes a width-parametric and T-parameteric structural function
            </summary>
            <typeparam name="W">The width type</typeparam>
            <typeparam name="T">Unconstrained</typeparam>
        
| T:Z0.Env                                          | 
            <summary>
            Reifies an application evironment service predicated on environment variables
            </summary>
        
| T:Z0.AppSetting                                   | 
            <summary>
            Defines a nonparametric kvp application setting
            </summary>
        
| P:Z0.AppSetting.Name                              | 
            <summary>
            The setting name
            </summary>
        
| P:Z0.AppSetting.Value                             | 
            <summary>
            The setting value
            </summary>
        
| T:Z0.AppSettingFormat                             | 
            <summary>
            Defines an application setting format configuration
            </summary>
        
| P:Z0.AppSettingFormat.FormatAsJson                | 
            <summary>
            Specifies whether to render application settings as JSON text
            </summary>
        
| T:Z0.AppSettings                                  | 
            <summary>
            Reifies an application settings service
            </summary>
        
| T:Z0.AppSetting`1                                 | 
            <summary>
            Defines a value-parametric application setting
            </summary>
        
| P:Z0.AppSetting`1.Name                            | 
            <summary>
            The setting name
            </summary>
        
| P:Z0.AppSetting`1.Value                           | 
            <summary>
            The setting value
            </summary>
        
| M:Z0.ArraySpan.alloc``1(System.Int32)             | 
            <summary>
            Allocates an array|span of a specified length
            </summary>
            <param name="length">The cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.cover``1(``0[])                    | 
            <summary>
            Creates an array|span from an array
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.uncover``1(Z0.ArraySpan{``0}@)     | 
            <summary>
            Reveals the covered array
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.span``1(Z0.ArraySpan{``0}@)        | 
            <summary>
            Presents the covered array as a span
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.span``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Presents a segment of covered cells as a span
            </summary>
            <param name="src">The data source</param>
            <param name="index">The 0-based cell offset of the first element to include in the segment</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.span``1(Z0.ArraySpan{``0}@,System.Int32,System.Int32)| 
            <summary>
            Presents a segment of covered cells as a span
            </summary>
            <param name="src">The data source</param>
            <param name="index">The 0-based cell offset of the first element to include in the segment</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.cell``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Returns a reference to an index-identified cell
            </summary>
            <param name="src">The data source</param>
            <param name="index">The 0-based cell index</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.head``1(Z0.ArraySpan{``0}@)        | 
            <summary>
            Returns a reference to the first source element
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.count``1(Z0.ArraySpan{``0}@)       | 
            <summary>
            Computes the number of covered cells
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.size``1(Z0.ArraySpan{``0}@)        | 
            <summary>
            Computes the size of the source in bytes
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.width``1(Z0.ArraySpan{``0}@)       | 
            <summary>
            Computes the size of the source in bits
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.clear``1(Z0.ArraySpan{``0}@)       | 
            <summary>
            Zero-fills the data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.seek8``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a reference to an 8-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.seek16``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a reference to a 16-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.seek32``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a reference to a 32-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.seek64``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a reference to a 32-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.skip8``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a readonly reference to an 8-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.skip16``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a readonly reference to a 16-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.skip32``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a readonly reference to a 32-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.ArraySpan.skipk64``1(Z0.ArraySpan{``0}@,System.Int32)| 
            <summary>
            Advances a data source reference to a cell-relative offset and presents the offset cell 
            reference as a readonly reference to a 32-bit unsigned integer
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The cell-relative offset</param>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.ArraySpan`1                                  | 
            <summary>
            An array that works like a span, more-or-less
            </summary>
        
| T:Z0.BinaryLiteral                                | 
            <summary>
            Defines a base2 literal via text and a boxed value; for the literal to be valid,
            the text, when parsed, must yield a value equivalent to the boxed value
            </summary>
        
| P:Z0.BinaryLiteral.Name                           | 
            <summary>
            The literal name
            </summary>
        
| P:Z0.BinaryLiteral.Data                           | 
            <summary>
            The literal value
            </summary>
        
| P:Z0.BinaryLiteral.Text                           | 
            <summary>
            Text that represents the boxed value
            </summary>
        
| T:Z0.MetadataToken                                | 
            <summary>
            Identifies a metadata element along with the declaring module
            </summary>
        
| T:Z0.TheEmpty                                     | 
            <summary>
            Represents the nothingness of the void
            </summary>
        
| P:Z0.TheEmpty.The                                 | 
            <summary>
            The only one
            </summary>
        
| T:Z0.TheEmpty`1                                   | 
            <summary>
            Represents the nothingness of the parametric void
            </summary>
        
| M:Z0.TheEmpty`1.The(`0)                           | 
            <summary>
            The only parametric one
            </summary>            
        
| M:Z0.IPartIndexBuilder.Build                      | 
            <summary>
            Computes the known parts, which excludes those that aren't known, whether they are known unknowables, 
            unknown unknowables, outside our search scope or simply missing because of an errant build 
            process, a random file deletion algorithm rampaging throgh the environs 'digitale, or any 
            unforseen for forseen reason.
            </summary>
        
| T:Z0.ITargetPart`2                                | 
            <summary>
            Characterizes a directed dependency d:S -&gt; T from a client s:S to a suppler t:T
            </summary>
            <typeparam name="S">The source client type</typeparam>
            <typeparam name="T">The target supplier type</typeparam>
        
| P:Z0.KnownParts.SearchLocation                    | 
            <summary>
            The location of potentially knowable parts
            </summary>
        
| P:Z0.KnownParts.External                          | 
            <summary>
            External dependencies that don' participate in the componentization framework
            </summary>
        
| M:Z0.PartIdParser.WhereSome``1(``0[])             | 
            <summary>
            Filters zero-valued elements from the source array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="E">The enumeration type</typeparam>
        
| M:Z0.PartIdParser.parse``1(System.String)         | 
            <summary>
            Attempts o parse an enum literal, ignoring case, and returns a null value if parsing failed
            </summary>
            <param name="name">The literal name</param>
            <typeparam name="E">The enum type</typeparam>
        
| P:Z0.PartIndexBuilder.Service                     | 
            <summary>
            Creates the builder, not the index
            </summary>
        
| M:Z0.PartIndexBuilder.Build                       | 
            <summary>
            Creates an index over the known parts
            </summary>
        
| M:Z0.PartResolver.Resolve(Z0.FilePath)            | 
            <summary>
            Attempts to resolve a part from an assembly file path
            </summary>
        
| M:Z0.PartResolver.LoadAssembly(Z0.FilePath)       | 
            <summary>
            Loads an assembly from a potential part path
            </summary>
        
| M:Z0.PartResolver.resolve(System.Reflection.Assembly)| 
            <summary>
            Attempts to resolve a part resolution type
            </summary>
        
| M:Z0.PartResolver.resolve(System.Type)            | 
            <summary>
            Attempts to resolve a part resolution property
            </summary>
        
| M:Z0.PartResolver.resolve(System.Reflection.PropertyInfo)| 
            <summary>
            Attempts to resolve a part from a resolution property
            </summary>
        
| M:Z0.PermLiterals.test(Z0.Perm4L)                 | 
            <summary>
            Determines whether a permutation literal is a symbol
            </summary>
            <param name="src">The value to inspect</param>
        
| M:Z0.PermLiterals.test(Z0.Perm8L)                 | 
            <summary>
            Determines whether a permutation literal is a symbol
            </summary>
            <param name="src">The value to inspect</param>
        
| M:Z0.PermLiterals.test(Z0.Perm16L)                | 
            <summary>
            Determines whether a permutation literal is a symbol
            </summary>
            <param name="src">The value to inspect</param>
        
| F:Z0.TabularWidths.Sequence                       | 
            <summary>
            The width of a sequence number field
            </summary>
        
| F:Z0.TabularWidths.Identifier                     | 
            <summary>
            The width of a programmatic identifier field
            </summary>
        
| F:Z0.TabularWidths.Description                    | 
            <summary>
            The width of a field that contains summary descriptive information
            </summary>
        
| F:Z0.TabularWidths.Count                          | 
            <summary>
            The width of a count field
            </summary>
        
| F:Z0.TabularWidths.Bool                           | 
            <summary>
            The width of a boolean field with a concise header
            </summary>
        
| F:Z0.TabularWidths.BoolLarge                      | 
            <summary>
            The width of a boolean field with a not-so-concise header
            </summary>
        
| F:Z0.TabularWidths.Num8Dec                        | 
            <summary>
            The width of a field containing an 8-bit decimal number
            </summary>
        
| F:Z0.TabularWidths.Num8Hex                        | 
            <summary>
            The width of a field containing an 8-bit hex number
            </summary>
        
| F:Z0.TabularWidths.Num16Dec                       | 
            <summary>
            The width of a field containing an 8-bit decimal number
            </summary>
        
| F:Z0.TabularWidths.Num16Hex                       | 
            <summary>
            The width of a field containing an 8-bit hex number
            </summary>
        
| F:Z0.TabularWidths.Num32Dec                       | 
            <summary>
            The width of a field containing an 8-bit decimal number
            </summary>
        
| F:Z0.TabularWidths.Num32Hex                       | 
            <summary>
            The width of a field containing an 8-bit hex number
            </summary>
        
| F:Z0.TabularWidths.Num64Dec                       | 
            <summary>
            The width of a field containing an 8-bit decimal number
            </summary>
        
| F:Z0.TabularWidths.Num64Hex                       | 
            <summary>
            The width of a field containing an 8-bit hex number
            </summary>
        
| T:Z0.RecordHeader`1                               | 
            <summary>
            Defines enum-predicated header content
            </summary>
        
| M:Z0.RecordHeader`1.Render(System.Func{System.Int32,`0,System.String},System.Char)| 
            <summary>
            Formates a header row using a caller-supplied label producer
            </summary>
            <param name="label">The label factory</param>
            <param name="delimiter">The delimiter</param>
            <typeparam name="F">The field type</typeparam>
        
| T:Z0.TextCell                                     | 
            <summary>
            Defines a text segment in the context of a line in a file
            </summary>
        
| F:Z0.TextFormat.RowSeparator                      | 
            <summary>
            Specifies leading content that identifies a non-semantic row division marker
            </summary>
        
| F:Z0.TextFormat.HasDataHeader                     | 
            <summary>
            Indicates whether the first line of the data is a header row
            </summary>
        
| F:Z0.TextFormat.IsDelimited                       | 
            <summary>
            Specifes whether the file contains regular delimited contetn
            </summary>
        
| F:Z0.TextFormat.Delimiter                         | 
            <summary>
            The character used to delimit parts of a line, if delimited
            </summary>
        
| F:Z0.TextFormat.CommentPrefix                     | 
            <summary>
            If specified, indicates the character that begins a comment
            </summary>
        
| F:Z0.TextFormat.ColWidth                          | 
            <summary>
            If specified, defines a uniform column width
            </summary>
        
| T:Z0.TextHeader                                   | 
            <summary>
            Defines header content in a text data file
            </summary>
        
| T:Z0.TextLine                                     | 
            <summary>
            Represents a line of text in the context of a line-oriented text data source
            </summary>
        
| P:Z0.TextLine.LineNumber                          | 
            <summary>
            The line number of the data source from which the line was extracted
            </summary>
        
| P:Z0.TextLine.LineText                            | 
            <summary>
            The line text, as it was found in the source
            </summary>
        
| T:Z0.TextRow                                      | 
            <summary>
            Defines a row of text parttioned into a sequence of cells
            </summary>
        
| M:Z0.TextRow.Format(System.Nullable{System.Char}) | 
            <summary>
            Joins the enclosed cells to produce a line of text
            </summary>
            <param name="delimiter">The separator to apply to delimit the cell data in the line </param>
        
| T:Z0.LiteralFieldId                               | 
            <summary>
            Defines the fields into which a literal table is partitioned
            </summary>
        
| F:Z0.LiteralFieldId.TypeName                      | 
            <summary>
            The defining type, such as an enum or a type that declares constant fields
            </summary>
        
| F:Z0.LiteralFieldId.Index                         | 
            <summary>
            The declaration order of the literal relative to other literals in the same dataset
            </summary>
        
| F:Z0.LiteralFieldId.Name                          | 
            <summary>
            The literal name
            </summary>
        
| F:Z0.LiteralFieldId.Hex                           | 
            <summary>
            The literal's value in base-16
            </summary>
        
| F:Z0.LiteralFieldId.BitString                     | 
            <summary>
            The literal's bitstring representation
            </summary>
        
| F:Z0.LiteralFieldId.Description                   | 
            <summary>
             A description of the literal if it exist
            </summary>
        
| F:Z0.LiteralFieldWidth.TypeName                   | 
            <summary>
            The defining type, such as an enum or a type that declares constant fields
            </summary>
        
| F:Z0.LiteralFieldWidth.Index                      | 
            <summary>
            The declaration order of the literal relative to other literals in the same dataset
            </summary>
        
| F:Z0.LiteralFieldWidth.Name                       | 
            <summary>
            The literal name
            </summary>
        
| F:Z0.LiteralFieldWidth.Hex                        | 
            <summary>
            The literal's value in base-16
            </summary>
        
| F:Z0.LiteralFieldWidth.BitString                  | 
            <summary>
            The literal's bitstring representation
            </summary>
        
| F:Z0.LiteralFieldWidth.Description                | 
            <summary>
             A description of the literal if it exist
            </summary>
        
| T:Z0.LiteralTableField                            | 
            <summary>
            Defines the fields into which a literal table is partitioned
            </summary>
        
| F:Z0.LiteralTableField.TypeName                   | 
            <summary>
            The defining type, such as an enum or a type that declares constant fields
            </summary>
        
| F:Z0.LiteralTableField.Index                      | 
            <summary>
            The declaration order of the literal relative to other literals in the same dataset
            </summary>
        
| F:Z0.LiteralTableField.Name                       | 
            <summary>
            The literal name
            </summary>
        
| F:Z0.LiteralTableField.Hex                        | 
            <summary>
            The literal's value in base-16
            </summary>
        
| F:Z0.LiteralTableField.BitString                  | 
            <summary>
            The literal's bitstring representation
            </summary>
        
| F:Z0.LiteralTableField.Description                | 
            <summary>
             A description of the literal if it exist
            </summary>
        
| T:Z0.TabularField`1                               | 
            <summary>
            Specifies salient characteristics of a tabular field predicated
            on an enumeration value
            </summary>
        
| F:Z0.TabularField`1.Specifier                     | 
            <summary>
            The field specifier
            </summary>
        
| F:Z0.TabularField`1.Name                          | 
            <summary>
            The field name
            </summary>
        
| F:Z0.TabularField`1.Index                         | 
            <summary>
            The 0-based field index
            </summary>
        
| F:Z0.TabularField`1.Width                         | 
            <summary>
            The field width
            </summary>
        
| F:Z0.TabularFormat.Fields                         | 
            <summary>
            The field specifications
            </summary>
        
| F:Z0.TabularFormat.Headers                        | 
            <summary>
            The column header names
            </summary>
        
| F:Z0.TabularFormat.Delimiter                      | 
            <summary>
            The default field delimiter
            </summary>
        
| F:Z0.TabularFormat.EmitHeader                     | 
            <summary>
            Whether to produce a header when formatting a collection
            </summary>
        
| F:Z0.TabularFormat.FieldCount                     | 
            <summary>
            The number of fields accounted for
            </summary>
        
| M:Z0.TabularFormat.Format                         | 
            <summary>
            Formats the format specification, not the object being specified
            </summary>
        
| F:Z0.TabularFormat`1.Fields                       | 
            <summary>
            The field specifications
            </summary>
        
| F:Z0.TabularFormat`1.Headers                      | 
            <summary>
            The column header names
            </summary>
        
| M:Z0.TabularFormat`1.Format                       | 
            <summary>
            Formats the format specification, not the object being specified
            </summary>
        
| T:Z0.BenchmarkRecord                              | 
            <summary>
            Defines a benchmark measure for an operator
            </summary>
        
| F:Z0.BenchmarkRecord.OpId                         | 
            <summary>
            The name of the measured operation
            </summary>
        
| F:Z0.BenchmarkRecord.OpCount                      | 
            <summary>
            Either the invocation count or the number of discrete operations performed
            </summary>
        
| F:Z0.BenchmarkRecord.Timing                       | 
            <summary>
            The measured time
            </summary>
        
| T:Z0.ITestLogger                                  | 
            <summary>
            Defines minimal contract for a log message sink
            </summary>
        
| T:Z0.TestCaseRecord                               | 
            <summary>
            Describes the outcome of a test case
            </summary>
        
| M:Z0.RecordFormatter.Create``1(System.Char)       | 
            <summary>
            Creates a record formatter predicated on an enum that specifies the record fields
            </summary>
            <typeparam name="F">The field specification type</typeparam>
        
| M:Z0.RecordHeader.render``1(System.Func{System.Int32,``0,System.String},System.Char)| 
            <summary>
            Formates a header row using a caller-supplied label producer
            </summary>
            <param name="f">The label factory</param>
            <param name="delimiter">The delimiter</param>
            <typeparam name="F">The field type</typeparam>
        
| M:Z0.Records.formatter``1(System.Char)            | 
            <summary>
            Creates a record formatter predicated on a field definition set defined by an enum
            </summary>
            <param name="sep">The default field delimiter</param>
            <typeparam name="F">The type of the defining enum</typeparam>
        
| M:Z0.Records.formatter``1                         | 
            <summary>
            Creates a record formatter predicated on a field definition set defined by an enum
            </summary>
            <typeparam name="F">The type of the defining enum</typeparam>
        
| M:Z0.Records.Formatter``1                         | 
            <summary>
            Creates a record formatter predicated on an enum that specifies the record fields
            </summary>
            <typeparam name="F">The field specification type</typeparam>
        
| M:Z0.Records.Formatter``1(System.Char)            | 
            <summary>
            Creates a record formatter predicated on a field definition set defined by an enum
            </summary>
            <param name="sep">The default field delimiter</param>
            <typeparam name="F">The type of the defining enum</typeparam>
        
| F:Z0.Tabular.PosMask                              | 
            <summary>
            Defines a mask that, when applied, reveals the field position
            </summary>
        
| M:Z0.Tabular.index``1(``0)                        | 
            <summary>
            Computes the field index from a field specifier
            </summary>
            <param name="field">The field specifier</param>
            <typeparam name="F">The field specifier type</typeparam>
        
| M:Z0.Tabular.width``1(``0)                        | 
            <summary>
            Computes the field width from a field specifier
            </summary>
            <param name="field">The field specifier</param>
            <typeparam name="F">The field specifier type</typeparam>
        
| M:Z0.Tabular.format``1                            | 
            <summary>
            Defines a tabular format specifiecation predicated on a parametric enum type
            </summary>
            <typeparam name="F">The field specifier</typeparam>
        
| M:Z0.Tabular.field``1(``0)                        | 
            <summary>
            Defines a tabular field specification predicated on an enumeration literal
            </summary>
            <param name="field">The field specifier</param>
            <typeparam name="F">The field specifier type</typeparam>
        
| M:Z0.TabularFormats.derive``1(System.Char)        | 
            <summary>
            Derives format configuration data from a type
            </summary>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.TextDocParser.Create``1(System.Func{Z0.TextDoc,Z0.ParseResult{``0}})| 
            <summary>
            Creates a text document parser from a parse function
            </summary>
            <param name="f">The parse function</param>
            <typeparam name="T">The parsed type</typeparam>
        
| M:Z0.TextDocParsing.ParseDocument(System.IO.StreamReader,System.Nullable{Z0.TextFormat})| 
            <summary>
            Attempts to parse a text document and returns the result if successful
            </summary>
            <param name="src">The source document path</param>
            <param name="format">The document format</param>
            <param name="observer">An optional observer to witness intersting events</param>
        
| M:Z0.TextDocParsing.ParseHeader(Z0.TextLine,Z0.TextFormat@)| 
            <summary>
            Parses a header row from a line of text
            </summary>
            <param name="src">The source line</param>
            <param name="spec">The text format</param>
            <param name="observer">An observer to witness interesting events</param>
        
| M:Z0.TextDocParsing.ParseRow(Z0.TextLine,Z0.TextFormat@)| 
            <summary>
            Parses a row from a line of text
            </summary>
            <param name="src">The source text</param>
            <param name="spec">The text format spec</param>
        
| T:Z0.IDataFlow`2                                  | 
            <summary>
            Characterizes a flow that represents a data movement from A -&gt; B, or, in this case, S -&gt; T
            </summary>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ITableLog`2.Save(`1[],Z0.FilePath)           | 
            <summary>
            Saves tabular data using derived metadata for format configuration 
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target file</param>
            <typeparam name="R">The source type</typeparam>
        
| M:Z0.ITabular.DelimitedText(System.Char)          | 
            <summary>
            Returns a line of text represents the record value
            </summary>
        
| T:Z0.BinaryResource                               | 
            <summary>
            Describes an embedded data resource
            </summary>
        
| M:Z0.BinaryResource.Providers``1                  | 
            <summary>
            Returns the properties declared by a type that define binary resource content
            </summary>
            <typeparam name="T">The defining type</typeparam>
        
| M:Z0.BinaryResource.Location(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Computes the address of resource content
            </summary>
            <param name="src">The resource provider value</param>
        
| T:Z0.BinaryResourceSpec                           | 
            <summary>
            Defines the content of a binary resource
            </summary>
        
| T:Z0.HostResourceSpec                             | 
            <summary>
            Defines the content of a set of binary resources for an api host
            </summary>
        
| M:Z0.Root.add``1(``0@,System.Int32)               | 
            <summary>
            Adds an offset to a reference
            </summary>
            <param name="src">The source reference</param>
            <param name="offset">The source-relative offset amount</param>
            <typeparam name="T">The reference type</typeparam>
            <remarks>
            u8:  movsxd rax,edx -&gt; add rax,rcx
            u16: movsxd rax,edx -&gt; lea rax,[rcx+rax*2]
            u32: movsxd rax,edx -&gt; lea rax,[rcx+rax*4]
            u64: movsxd rax,edx -&gt; lea rax,[rcx+rax*8]
            </remarks>
        
| M:Z0.Root.address``1(``0@)                        | 
            <summary>
            Presents a reference as an address
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Root.array``1(``0[])                         | 
            <summary>
            Produces an array from a parameter array
            </summary>
            <param name="src">The source items</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Root.insist``1(``0)                          | 
            <summary>
            Complains if the source operand, of reference type, is null; otherwise returns it
            </summary>
            <param name="src">The thing that should not be null</param>
            <typeparam name="T">The thing's type</typeparam>
        
| M:Z0.Root.bind``2(Z0.Option{``0},System.Func{``0,Z0.Option{``1}})| 
            <summary>
            Implements the canonical bind operation
            </summary>
            <typeparam name="X">The source domain type</typeparam>
            <typeparam name="Y">The target domain type</typeparam>
            <param name="x">The point in the monadic space over X</param>
            <param name="f">The function to apply to effect the bind</param>
        
| M:Z0.Root.typecode``1                             | 
            <summary>
            Gets type typecode of a parametrically-identified type
            </summary>
        
| M:Z0.Root.char(System.Boolean)                    | 
            <summary>
            Reimagines a boolean value as a character value
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.Root.eStore``1(``0@,System.UInt64@)          | 
            <summary>
            Stores an enum value of any primal kind to a u64 target
            </summary>
            <param name="eVal">The enum value</param>
            <param name="dst">The storage target</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Root.eVal``2(``1,``0)                        | 
            <summary>
            Reads an E-value from an enum of primal T-kind
            </summary>
            <param name="tVal">The integral value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.Root.eVal``1(System.Byte,``0)                | 
            <summary>
            Envisions a u8 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u8-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.SByte,``0)               | 
            <summary>
            Envisions an i8 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i8-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.Int16,``0)               | 
            <summary>
            Envisions an i16 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i16-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.UInt16,``0)              | 
            <summary>
            Envisions a u16 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u16-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.Char,``0)                | 
            <summary>
            Envisions a c16 value as a value of an enum of like u16 kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u16-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.Int32,``0)               | 
            <summary>
            Envisions an i32 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i32-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.UInt32,``0)              | 
            <summary>
            Envisions a u32 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u32-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.Int64,``0)               | 
            <summary>
            Envisions an i64 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal i64-kind</typeparam>
        
| M:Z0.Root.eVal``1(System.UInt64,``0)              | 
            <summary>
            Envisions a u64 value as a value of an enum of like primal kind
            </summary>
            <param name="tVal">The source value</param>
            <param name="eRep">A representative enum value, used only for type inference</param>
            <typeparam name="E">The enum target type of primal u64-kind</typeparam>
        
| M:Z0.Root.filter``1(``0[],System.Func{``0,System.Boolean})| 
            <summary>
            Allocates and populates a new array by filtering the source array with 
            a specified predicate
            </summary>
            <param name="src">The soruce array</param>
            <param name="f">The predicate</param>
            <typeparam name="T">The array element type</typeparam>
        
| M:Z0.Root.fmap``2(System.Func{``0,``1})           | 
            <summary>
            Defines the canonical option functor F:Option[A] -&gt; Option[B] induced by a non-monadic dual f:A-&gt;B
            </summary>
            <param name="f">A non-monadic projector</param>
            <typeparam name="A">The source type</typeparam>
            <typeparam name="B">The target type</typeparam>
        
| M:Z0.Root.guard``2(``0,System.Func{``0,System.Boolean},System.Func{``0,Z0.Option{``1}})| 
            <summary>
            Evaluates a function if a predicate is satisfied; otherwise, returns None
            </summary>
            <typeparam name="X">The type of value to evaluate</typeparam>
            <typeparam name="Y">The evaluation type</typeparam>
            <param name="x">The point of evaluation</param>
            <param name="predicate">A precondition for evaulation to proceed</param>
            <param name="f">The evaluation function</param>
        
| M:Z0.Root.hash``1(``0)                            | 
            <summary>
            Calculates a hash code for structured content and returns the content along with the calculated hash
            </summary>
            <param name="src">The source content</param>
            <typeparam name="C">The content type</typeparam>
        
| M:Z0.Root.hash_ref(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Computes the FNV-1a hash of the source sequence
            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="src">The data source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.UInt32,System.UInt32)       | 
            <summary>
            Calculates a combined hash for 2 unsigned 32-bit integers
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.SByte,System.SByte)         | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Byte,System.Byte)           | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Int16,System.Int16)         | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.UInt16,System.UInt16)       | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Int32,System.Int32)         | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.UInt64,System.UInt64)       | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Int64,System.Int64)         | 
            <summary>
            Creates a combined/unsigned hash code
            </summary>
            <param name="x">The left source</param>
            <param name="y">The right source</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.SByte)                      | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Byte)                       | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Int16)                      | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.UInt16)                     | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Int32)                      | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.UInt32)                     | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.UInt64)                     | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.Int64)                      | 
            <summary>
            Creates an unsigned hash code
            </summary>
            <param name="x">The source value</param>
            <remarks>Adapted from the .Net core type System.Reflection.Internal.Hash</remarks>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.SByte}) | 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.Byte})  | 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.Int16}) | 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.UInt16})| 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.Int32}) | 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.UInt32})| 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.UInt64})| 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.hash(System.ReadOnlySpan{System.Int64}) | 
            <summary>
            Calculates a combined hash for a sequence integral values
            </summary>
            <param name="src">The value source</param>
        
| M:Z0.Root.ifNotNull``2(``0,System.Func{``0,``1},``1)| 
            <summary>
            Evaluates a function over a value if the value is not null; otherwise, returns the default result value
            </summary>
            <typeparam name="X">The operand type</typeparam>
            <typeparam name="Y">The return type</typeparam>
            <param name="x">The operand</param>
            <param name="f1">The function to potentially evaluate</param>
        
| M:Z0.Root.ifelse``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})| 
            <summary>
            Executes one of two functions depending on the evaulation criterion
            </summary>
            <param name="x">The value to supply to the predicate and one of the handlers</param>
            <param name="bool">The predicate to evalue to determine which function will map the value</param>
            <param name="true">The function to evaulate when the criterion is true</param>
            <param name="false">The function to evaulate when the criterion is false</param>
            <typeparam name="X">The function input type</typeparam>
            <typeparam name="Y">The function output type</typeparam>
        
| M:Z0.Root.ifelse(System.Boolean,System.Action,System.Action)| 
            <summary>
            Executes one action if a condition is true and another should it be false
            </summary>
            <param name="condition">Specifies whether some condition is true</param>
            <param name="true">The action to invoke when condition is true</param>
            <param name="false">The action to invoke when condition is false</param>
        
| M:Z0.Root.ifempty(System.String,System.String)    | 
            <summary>
            A string-specific coalescing operation
            </summary>
            <param name="test">The subject string</param>
            <param name="replace">The replacement value if blank</param>
        
| M:Z0.Root.none``1                                 | 
            <summary>
            Defines a non-valued option
            </summary>
            <typeparam name="T">The value type, if the value existed</typeparam>
        
| M:Z0.Root.ifnone``2(``0,System.Func{``1},System.Func{``0,``1})| 
            <summary>
            Transforms an input, branching on nullity evaluation
            </summary>
            <param name="x">The input</param>
            <param name="null">The emitter to invoke if the input is null</param>
            <param name="else">The function to invoke if the input is not null</param>
            <typeparam name="X">The input type</typeparam>
            <typeparam name="Y">The output type</typeparam>
        
| M:Z0.Root.ifnone``2(System.Nullable{``0},System.Func{``1},System.Func{``0,``1})| 
            <summary>
            Transforms an input value, branching on nullity evaluation
            </summary>
            <param name="x">The input</param>
            <param name="null">The emitter to invoke if the input is null</param>
            <param name="else">The onptional function to invoke if the input is not null; if no
            function is provided, the default target type value will be returned</param>
            <typeparam name="X">The input type</typeparam>
            <typeparam name="Y">The output type</typeparam>
        
| M:Z0.Root.some``1(``0)                            | 
            <summary>
            Defines a valued option
            </summary>
            <param name="value">The value</param>
            <typeparam name="T">The type of the extant value</typeparam>
        
| M:Z0.Root.ifsome``1(``0,System.Action{``0})       | 
            <summary>
            Invokes an action if the supplied value is not null
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="x">The potentially null value</param>
            <param name="f">The action to invoke if possible</param>
        
| M:Z0.Root.ifsome``1(System.Nullable{``0},System.Action{``0})| 
            <summary>
            Invokes an action if the supplied value is not null
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="x">The potentially null value</param>
            <param name="f">The action to invoke if possible</param>
        
| M:Z0.Root.iftrue``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})| 
            <summary>
            Executes a function if the criterion is true, otherwise returns the supplied value
            </summary>
            <typeparam name="T">The function input/output type</typeparam>
            <param name="criterion">The criterion on which to branch</param>
            <param name="x">The value to supply to the chosen function</param>
            <param name="onTrue">The function to evaulate when the criterion is true</param>
        
| M:Z0.Root.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)| 
            <summary>
            Iterates over the supplied items, invoking a receiver for each
            </summary>
            <param name="src">The source items</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Root.iter``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Action{``0,``1})| 
            <summary>
            Iterates a pair of readonly spans in tandem, invoking a caller-supplied action for each cell pair
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        
| M:Z0.Root.iter``2(System.Span{``0},System.Span{``1},System.Action{``0,``1})| 
            <summary>
            Iterates a pair of spans in tandem, invoking a caller-supplied action for each cell pair
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        
| M:Z0.Root.iteri(System.Int32,System.Int32,System.Action{System.Int32})| 
            <summary>
            Aplies an action to the sequence of integers min,min+1,...,max - 1
            </summary>
            <param name="min">The inclusive lower bound of the sequence</param>
            <param name="max">The non-inclusive upper bound of the sequence
            over intergers over which iteration will occur</param>
            <param name="f">The action to be applied to each  value</param>
        
| M:Z0.Root.iteri``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})| 
            <summary>
            Iterates over the supplied items, invoking an indexed receiver for each
            </summary>
            <param name="src">The source items</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Root.length``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1})| 
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        
| M:Z0.Root.length``2(System.ReadOnlySpan{``0},System.Span{``1})| 
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        
| M:Z0.Root.length``2(System.Span{``0},System.ReadOnlySpan{``1})| 
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        
| M:Z0.Root.length``2(System.Span{``0},System.Span{``1})| 
            <summary>
            Computs min(x.Length,y.Length)
            </summary>
            <param name="x">The first span</param>
            <param name="y">The second span</param>
            <typeparam name="S">The first span cell type</typeparam>
            <typeparam name="T">The second span cell type</typeparam>
        
| M:Z0.Root.list``1(``0[])                          | 
            <summary>
            Creates a list from a parameter array
            </summary>
            <param name="src">The source items</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Root.map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})| 
            <summary>
            Applies a function to an input sequence to yield a transformed output sequence
            </summary>
            <param name="src">The source sequence</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.map``2(System.Nullable{``0},System.Func{``0,``1})| 
            <summary>
            Projects a source value, if non-null, onto a target value; otherwise, returns the target's default value
            </summary>
            <param name="src">The source value</param>
            <param name="f">The projector</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target value type</typeparam>
        
| M:Z0.Root.map``2(System.Nullable{``0},System.Func{``0,``1},System.Func{``1})| 
            <summary>
            Projects a source value, if non-null, onto a target value; otherwise, returns value raised by a caller-supplied emitter
            </summary>
            <param name="src">The source value</param>
            <param name="some">The projector</param>
            <param name="none">The alternative emitter</param>
            <typeparam name="S">The source value type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.map``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})| 
            <summary>
            Projects a source span to target span via a supplied transformation
            </summary>
            <param name="src">The source</param>
            <param name="f">The transformation</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>        
        
| M:Z0.Root.apply``1(System.ReadOnlySpan{``0},System.Func{``0,``0},System.Span{``0})| 
            <summary>
            Applies a unary operator to an input sequence and deposits the result to a caller-supplied target
            </summary>
            <param name="src">The source</param>
            <param name="f">The operator</param>
            <typeparam name="T">The operand type</typeparam>        
        
| M:Z0.Root.map``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,``0},System.Span{``0})| 
            <summary>
            Projects a pair of source spans to target span via a binary operator
            </summary>
            <param name="x">The left operand</param>
            <param name="y">The right operand</param>
            <param name="f">The operator</param>
            <typeparam name="T">The operand type</typeparam>        
        
| M:Z0.Root.map``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2},System.Span{``2})| 
            <summary>
            Iterates a pair of readonly spans in tandem, invoking a function for each cell pair
            and deposits the result in a caller-supplied target
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        
| M:Z0.Root.map``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2})| 
            <summary>
            Iterates a pair of readonly spans in tandem, invoking a function for each cell pair, 
            and deposits the result to an allocated target that is returned
            </summary>
            <param name="x">The first operand</param>
            <param name="y">The second operand</param>
            <param name="f">The action to invoke</param>
            <typeparam name="S">The cell type of the first operand</typeparam>
            <typeparam name="T">The cell type of the second operand</typeparam>
        
| M:Z0.Root.memref(Z0.MemoryAddress,Z0.ByteSize)    | 
            <summary>
            Defines a memory reference
            </summary>
            <param name="address">The address</param>
            <param name="size">The number of reference bytes</param>
        
| M:Z0.Root.method``3(System.String)                | 
            <summary>
            Searches a type for any method that matches the supplied signature
            </summary>
            <param name="name">The name of the method</param>    
            <typeparam name="T">The type to search</typeparam>
            <typeparam name="A1">The first argument type</typeparam>
            <typeparam name="A2">The second argument type</typeparam>
        
| M:Z0.Root.ctor(System.Type,System.Type[])         | 
            <summary>
            Searches a type for an instance constructor that matches a specified signature
            </summary>
            <param name="declaring">The type to search</param>
            <param name="args">The method parameter types in ordinal position</param>
        
| M:Z0.Root.ctor``1(System.Type[])                  | 
            <summary>
            Searches a type for an instance constructor that matches a specified signature
            </summary>
            <param name="args">The method parameter types in ordinal position</param>
            <typeparam name="T">The type to search</typeparam>
        
| M:Z0.Root.nullis``1(``0)                          | 
            <summary>
            Returns true if the source is null
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Root.nullnot``1(``0)                         | 
            <summary>
            Returns true if the source is non-null
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Root.primal(System.TypeCode)                 | 
            <summary>
            Returns the type-code identified primal kind
            </summary>
            <param name="src">The type code</param>
        
| M:Z0.Root.readonly``1(System.Span{``0})           | 
            <summary>
            Reflects the immutable self
            </summary>
            <param name="src">The self</param>
            <typeparam name="T">The self cell type</typeparam>
        
| M:Z0.Root.readonly``1(``0[])                      | 
            <summary>
            Reflects the content of an array as a readonly span
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.reduce``1(Z0.Option{Z0.Option{``0}})    | 
            <summary>
            Implements the canonical join operation that reduces the monadic depth by one level
            </summary>
            <param name="src">The optional option</param>
            <typeparam name="T">The encapsulated value</typeparam>
        
| M:Z0.Root.reduce``1(System.Collections.Generic.IEnumerable{``0}[])| 
            <summary>
            Implements the canonical join operation that reduces the (LiNQ-monadic) depth by one level
            </summary>
            <param name="src">The optional option</param>
            <typeparam name="T">The encapsulated value</typeparam>
        
| M:Z0.Root.seq``1(``0[])                           | 
            <summary>
            An indespensable combinator that produces a stream from a parameter array
            </summary>
            <param name="src">The source items</param>
            <typeparam name="T">The item type</typeparam>
        
| M:Z0.Root.span(System.String)                     | 
            <summary>
            Creates a readonly character span from a string
            </summary>
            <param name="src">The source string</param>
        
| M:Z0.Root.span``1(``0@,System.Int32)              | 
            <summary>
            Creates a T-span from a supplied reference
            </summary>
            <param name="src">A reference to the leading cell</param>
            <param name="count">The source cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span``1(``0[])                          | 
            <summary>
            Creates a span from an array
            </summary>
            <param name="src">A reference to the leading cell</param>
            <param name="count">The source cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span``1(``0@)                           | 
            <summary>
            Creates a single-cell T-span from a supplied reference
            </summary>
            <param name="src">A reference to the cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span8u``1(``0@)                         | 
            <summary>
            Creates a bytespan from a T-cell reference
            </summary>
            <param name="src">The reference cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span16u``1(``0@)                        | 
            <summary>
            Creates a u16 span from a T-cell reference
            </summary>
            <param name="src">The reference cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span32u``1(``0@)                        | 
            <summary>
            Creates a u32 span from a T-cell reference
            </summary>
            <param name="src">The reference cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span64u``1(``0@)                        | 
            <summary>
            Creates a u64 span from a T-cell reference
            </summary>
            <param name="src">The reference cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span16c``1(``0@)                        | 
            <summary>
            Creates a u16 span from a T-cell reference
            </summary>
            <param name="src">The reference cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span16c(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Creates a u16 span from a T-cell reference
            </summary>
            <param name="src">The reference cell</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Root.span``2(``0@,System.Int32)              | 
            <summary>
            Creates a T-span from an S-reference
            </summary>
            <param name="src">A reference to the leading source cell</param>
            <param name="count">The source cell count</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Root.span``2(``0@)                           | 
            <summary>
            Creates a T-span from a single S-reference
            </summary>
            <param name="src">A reference to the source cell</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Root.swap``1(System.Span{``0},System.Int32,System.Int32)| 
            <summary>
            Interchanges span elements i and j
            </summary>
            <param name="src">The source span</param>
            <param name="i">An index of a span element</param>
            <param name="j">An index of a span element</param>
            <typeparam name="T">The span element type</typeparam>
        
| M:Z0.Root.testbit(System.Byte,System.Int32)       | 
            <summary>
            Tests the state of an index-identified source bit
            </summary>
            <param name="src">The source value</param>
            <param name="pos">The 0-based index of the bit to test</param>
        
| M:Z0.Root.Try``1(System.Func{``0},System.Action{System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None and invokes an error handler if supplied
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="f">The function to evaluate</param>
        
| M:Z0.Root.Try``1(System.Func{Z0.Option{``0}},System.Action{System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if 
            successful; otherwise, returns None together with the reported exception
            </summary>
            <param name="f">The function to evaluate</param>
            <typeparam name="T">The function result type, if successful</typeparam>
        
| M:Z0.Root.Try(System.Action,System.Action{System.Exception})| 
            <summary>
            Invokes an action within a try block and, upon error, calls the handler if specified. 
            If no handler is specified, the exception message is emitted to stderr
            </summary>
            <param name="f">The action to invoke</param>
            <param name="onerror">The error handler to call, if specified</param>
        
| M:Z0.Root.Try``2(``0,System.Func{``0,``1},System.Action{``0,System.Exception})| 
            <summary>
            Evaluates a function within a try block and returns the value of the computation if successful.
            Otherwise, returns None together with the reported exception
            </summary>
            <typeparam name="X">The input type</typeparam>
            <typeparam name="Y">The output type</typeparam>
            <param name="x">The input value</param>
            <param name="f">The function to evaluate</param>
        
| M:Z0.Root.TryCast``1(System.Object)               | 
            <summary>
            Casts a value if possible, otherwise returns none
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="item">The object to cast</param>
        
| M:Z0.Root.tVal``2(``0)                            | 
            <summary>
            Reads a T-value from the value of an E-enum of primal T-kind
            </summary>
            <param name="eVal">The enum value</param>
            <param name="tVal">The primal output value</param>
            <typeparam name="E">The enum type</typeparam>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.Root.e8u``1(``0)                             | 
            <summary>
            Reads a u8 value from the value of an E-enum of primal u8-kind
            </summary>
            <param name="eVal">The enum source value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.Root.type``1                                 | 
            <summary>
            Returns the type of the type
            </summary>
            <typeparam name="T"></typeparam>
        
| M:Z0.Root.unbox``1(System.Object)                 | 
            <summary>
            Takes a value out of a box
            </summary>
            <param name="src">The boxed value</param>
            <typeparam name="T">The boxed type</typeparam>
        
| M:Z0.Root.unbox``1(System.Enum)                   | 
            <summary>
            Takes an enum value out of a box
            </summary>
            <param name="src">The boxed value</param>
            <typeparam name="T">The boxed type</typeparam>
        
| M:Z0.Root.unpack``1(``0,System.Span{Z0.Bit})      | 
            <summary>
            Populates a caller-supplied target with unpacked source bits
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target</param>
            <typeparam name="T">The data source type</typeparam>
        
| M:Z0.Root.value``1(``0)                           | 
            <summary>
            Returns the numeric value represented by a natural type
            </summary>
            <param name="n">The natural type representativev</param>
            <typeparam name="K">A natural type</typeparam>
        
| M:Z0.Root.view``1(Z0.W8,``0@)                     | 
            <summary>
            Presents a readonly T-reference as a reference of bit-width w
            </summary>
            <param name="w">The target width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Root.view``1(Z0.W16,``0@)                    | 
            <summary>
            Presents a readonly T-reference as a reference of bit-width w
            </summary>
            <param name="w">The target width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Root.view``1(Z0.W32,``0@)                    | 
            <summary>
            Presents a readonly T-reference as a reference of bit-width w
            </summary>
            <param name="w">The target width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Root.view``1(Z0.W64,``0@)                    | 
            <summary>
            Presents a readonly T-reference as a reference of bit-width w
            </summary>
            <param name="w">The target width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Root.view``2(``0@)                           | 
            <summary>
            Presents a readonly S-reference as a readonly T-reference
            </summary>
            <param name="src">The data soruce</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Single}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Double}@)| 
            <summary>
            Presents a readonly reference to 128-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Single}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Double}@)| 
            <summary>
            Presents a readonly reference to 256-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.Byte}@)    | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.SByte}@)   | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.Int16}@)   | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.UInt16}@)  | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.Int32}@)   | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.UInt32}@)  | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.Int64}@)   | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.UInt64}@)  | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.Single}@)  | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{System.Double}@)  | 
            <summary>
            Presents a readonly reference to 512-bit vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target reference type</typeparam>
        
| M:Z0.Root.vread``2(System.Runtime.Intrinsics.Vector128{``0}@)| 
            <summary>
            Presents a readonly reference to 128-bit S-vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="S">The vector cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Root.vread``2(System.Runtime.Intrinsics.Vector256{``0}@)| 
            <summary>
            Presents a readonly reference to 256-bit S-vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="S">The vector cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Root.vread``2(Z0.Vector512{``0}@)            | 
            <summary>
            Presents a readonly reference to 512-bit S-vector as a readonly T-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="S">The vector cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{``0}@)| 
            <summary>
            Returns a readonly refererence to the leading component of the source
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{``0}@)| 
            <summary>
            Returns a readonly refererence to the leading component of the source
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Root.vread``1(Z0.Vector512{``0}@)            | 
            <summary>
            Returns a readonly refererence to the leading component of the source
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Root.vref``1(System.Runtime.Intrinsics.Vector128{``0}@)| 
            <summary>
            Returns a refererence to the leading component of the source
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Root.vref``1(System.Runtime.Intrinsics.Vector256{``0}@)| 
            <summary>
            Returns a refererence to the leading component of the source
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Root.vref``1(Z0.Vector512{``0}@)             | 
            <summary>
            Returns a refererence to the leading component of the source
            </summary>
            <param name="src">The source vector</param>
            <typeparam name="T">The vector component type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Byte@)         | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.SByte@)        | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Int16@)        | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.UInt16@)       | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Int32@)        | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.UInt32@)       | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Int64@)        | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.UInt64@)       | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Boolean@)      | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Char@)         | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W128,System.Decimal@)      | 
            <summary>
            Hydrates a 128-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Byte@)         | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.SByte@)        | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Int16@)        | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.UInt16@)       | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Int32@)        | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.UInt32@)       | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Int64@)        | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.UInt64@)       | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Boolean@)      | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Char@)         | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W256,System.Decimal@)      | 
            <summary>
            Hydrates a 256-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Byte@)         | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.SByte@)        | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Int16@)        | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.UInt16@)       | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Int32@)        | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.UInt32@)       | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Int64@)        | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.UInt64@)       | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Boolean@)      | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Char@)         | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``1(Z0.W512,System.Decimal@)      | 
            <summary>
            Hydrates a 512-bit T-vector from a reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``2(Z0.W128,``0@)                 | 
            <summary>
            Hydrates a 128-bit T-vector from an S-reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="S">The source reference type</typeparam>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``2(Z0.W256,``0@)                 | 
            <summary>
            Hydrates a 256-bit T-vector from an S-reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="S">The source reference type</typeparam>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.vwrite``2(Z0.W512,``0@)                 | 
            <summary>
            Hydrates a 512-bit T-vector from an S-reference
            </summary>
            <param name="w">The vector width selector</param>
            <param name="src">The data source</param>
            <typeparam name="S">The source reference type</typeparam>
            <typeparam name="T">The target vector cell type</typeparam>
        
| M:Z0.Root.write``1(System.SByte@)                 | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Byte@)                  | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Int16@)                 | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.UInt16@)                | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Int32@)                 | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.UInt32@)                | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Int64@)                 | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Boolean@)               | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Char@)                  | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Decimal@)               | 
            <summary>
            Hydrates a T-cell from a reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.SByte@,System.Int32)    | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Byte@,System.Int32)     | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Int16@,System.Int32)    | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.UInt16@,System.Int32)   | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Int32@,System.Int32)    | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.UInt32@,System.Int32)   | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Int64@,System.Int32)    | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Boolean@,System.Int32)  | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Char@,System.Int32)     | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``1(System.Decimal@,System.Int32)  | 
            <summary>
            Hydrates a T-cell from a reference after skipping a specified number of source cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of source elements to skip</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``2(``0@)                          | 
            <summary>
            Hydrates a T-cell from an S-reference
            </summary>
            <param name="src">The data source</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Root.write``2(``0@,System.Int32)             | 
            <summary>
            Hydrates a T-cell from an S-reference after skipping a specified number of S-cells
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The number of S-cells to skip</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.IAgentControl                                | 
            <summary>
            Defines a means by which agents can be queried and directed
            </summary>
        
| T:Z0.IAppSetting                                  | 
            <summary>
            Characterizes a nonparametric application setting
            </summary>
        
| P:Z0.IAppSetting.Name                             | 
            <summary>
            The setting name
            </summary>
        
| P:Z0.IAppSetting.Value                            | 
            <summary>
            The setting value
            </summary>
        
| T:Z0.IAppSetting`1                                | 
            <summary>
            Characterizes a value-parametric application setting
            </summary>
        
| P:Z0.IAppSetting`1.Value                          | 
            <summary>
            The typed setting value
            </summary>
        
| T:Z0.IAppSettings                                 | 
            <summary>
            Characterizes an app settings collection
            </summary>
        
| T:Z0.IAppSettingsProvider                         | 
            <summary>
            Characterizes an application settings provider that supports settings persistence
            </summary>
        
| P:Z0.IAppSettingsProvider.Settings                | 
            <summary>
            The provided settings
            </summary>
        
| M:Z0.IAppSettingsProvider.Save(Z0.FilePath)       | 
            <summary>
            Saves the settings to a file
            </summary>
            <param name="dst">The target path</param>        
        
| T:Z0.IAppSettingsProvider`1                       | 
            <summary>
            Characterizes an F-bound polymorphic app setting set reification
            </summary>
            <typeparam name="F">The reification type</typeparam>
        
| T:Z0.IConversionProvider`1                        | 
            <summary>
            Characterizes a service that exposes a two-way converter
            </summary>
            <typeparam name="S">The conversion type </typeparam>
        
| P:Z0.IPointedReader.Position                      | 
            <summary>
            The current position of the stream
            </summary>
        
| P:Z0.IPointedReader.HasNext                       | 
            <summary>
            Spefifies whether the reader can advance to and read the next cell
            </summary>
        
| P:Z0.IPointedReader.Length                        | 
            <summary>
            Spefifies the length of the data soruce
            </summary>
        
| P:Z0.IPointedReader.Remaining                     | 
            <summary>
            Spefifies the number of elements that remain to be read
            </summary>
        
| M:Z0.IPointedReader.Seek(System.UInt32)           | 
            <summary>
            If source value pos is within the range [0,Length), assigns Current = pos;
            otherwise, assigns Current = -1 and returns true if the former and false if the latter
            </summary>
            <param name="pos">The desired reader position</param>
        
| M:Z0.IPointedReader`1.Read(`0@)                   | 
            <summary>
            Deposits the next value in a caller-supplied target and returns true if there are yet more values to read
            </summary>
            <param name="dst">The value of the next byte</param>
        
| M:Z0.IPointedReader`1.Read(System.Int32,System.Int32,System.Span{`0})| 
            <summary>
            Reads a specified number of elements if they exist or fewer if not and deposits the values in a caller-suppled target
            Returns the actual number of elements read
            </summary>
            <param name="offset">The offset at which to begin reading</param>
            <param name="wantedCount">The number of desired</param>
            <param name="dst">The target buffer</param>
        
| T:Z0.IShell                                       | 
            <summary>
            Characterizes console-controlled, perhaps user-initiated, thread of execution
            </summary>
        
| T:Z0.IShell`1                                     | 
            <summary>
            Characterizes a reified shell
            </summary>
        
| T:Z0.IShell`2                                     | 
            <summary>
            Characterizes a reified shell with parametric context
            </summary>
        
| T:Z0.IStateless`2                                 | 
            <summary>
            Characterizes an F-bound polymorphick stateless reification
            </summary>
            <typeparam name="F">The reification type</typeparam>
            <typeparam name="I">The service contract</typeparam>
        
| P:Z0.IStreamProvider`1.Stream                     | 
            <summary>
            In infinite T-stream
            </summary>
        
| T:Z0.ISystemAgent                                 | 
            <summary>
            Characterizes a thread of control with independent volition
            </summary>
        
| P:Z0.ISystemAgent.ServerId                        | 
            <summary>
            Identifies the server on which the agent is executing
            </summary>
        
| P:Z0.ISystemAgent.AgentId                         | 
            <summary>
            Identifies the agent relative to the hosting server
            </summary>
        
| M:Z0.ISystemAgent.Start                           | 
            <summary>
            Starts agent execution
            </summary>
        
| M:Z0.ISystemAgent.Stop                            | 
            <summary>
            Stops agent execution
            </summary>
        
| P:Z0.ISystemAgent.State                           | 
            <summary>
            The agent state
            </summary>
        
| E:Z0.ISystemAgent.StateChanged                    | 
            <summary>
            Signals when the agents transitions from its current state to a different state
            </summary>
        
| P:Z0.ISystemAgent.Identity                        | 
            <summary>
            The global agent identity
            </summary>
            <param name="agent">The agent</param>
        
| T:Z0.ITypeIdentityProvider`1                      | 
            <summary>
            Characterizes a type identity provider than can define an identity predicated solely on a parametric type
            </summary>
            <typeparam name="S">The type for which identity will be defined</typeparam>
        
| P:Z0.Shell`1.AppPaths                             | 
            <summary>
            The default application path collection
            </summary>
        
| P:Z0.Shell`1.Term                                 | 
            <summary>
            The shell terminal
            </summary>
        
| P:Z0.Shell`1.KnownParts                           | 
            <summary>
            The parts that are not unknown
            </summary>
        
| T:Z0.Shell`2                                      | 
            <summary>
            Base class for shells with pararametric context
            </summary>
            <typeparam name="S">The shell refication type</typeparam>
            <typeparam name="C">The shell context type</typeparam>
        
| T:Z0.AppEnv                                       | 
            <summary>
            Reifies an app environment service with the default implementation
            </summary>
        
| T:Z0.AppPaths                                     | 
            <summary>
            Reifies default application path service
            </summary>
        
| M:Z0.Context.from``1(``0)                         | 
            <summary>
            Wraps a context over a value
            </summary>
            <param name="src">The source value</param>
            <typeparam name="C">The value type</typeparam>
        
| T:Z0.CurrentProcess                               | 
            <summary>
            Surfaces information about the currently executing process
            </summary>
        
| P:Z0.CurrentProcess.CurrentThreadId               | 
            <summary>
            Gets the OS thread ID, not the "ManagedThreadId" which is useless
            </summary>
        
| P:Z0.CurrentProcess.Handle                        | 
            <summary>
            The handle for the current process
            </summary>
        
| M:Z0.CurrentProcess.ProcessThread(System.UInt32)  | 
            <summary>
            Searches for a thread given an OS-assigned id, not the useless clr id
            </summary>
            <param name="id">The OS thread Id</param>
        
| M:Z0.CurrentProcess.GetCurrentThreadId            | 
            <summary>
            Get the OS ID of the current thread
            </summary>
        
| M:Z0.CurrentProcess.GetCurrentThread              | 
            <summary>
            Gets the handle of the current thread
            </summary>
        
| M:Z0.Edits.edit``1(``0@)                          | 
            <summary>
            Presents a readonly reference as mutable reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Edits.edit8``1(``0@)                         | 
            <summary>
            Interprets a generic reference as a uint8 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Edits.edit16``1(``0@)                        | 
            <summary>
            Interprets a generic reference as a uint16 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Edits.edit32``1(``0@)                        | 
            <summary>
            Interprets a generic reference as a uint32 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Edits.edit64``1(``0@)                        | 
            <summary>
            Interprets a generic reference as a uint64 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Literati.attributed(Z0.Base2,System.Type)    | 
            <summary>
            Selects the binary literals declared by a type
            </summary>
            <param name="src">The source type</param>
        
| M:Z0.Literati.attributed``1(Z0.Base2,System.Type) | 
            <summary>
            Selects the binary literals declared by a type that are of a specified parametric primal type
            </summary>
            <param name="src">The source type</param>
            <typeparam name="T">The primal literal type</typeparam>
        
| M:Z0.Literati.kind``1(Z0.BinaryLiteral{``0})      | 
            <summary>
            Discerns the numeric kind of a specified binary literal
            </summary>
            <param name="src">The source literal</param>
        
| M:Z0.Literati.kind(Z0.BinaryLiteral)              | 
            <summary>
            Discerns the numeric kind of a specified binary literal
            </summary>
            <param name="src">The source literal</param>
        
| M:Z0.Pointed.ptr``1(``0@)                         | 
            <summary>
            Presents generic reference as a generic pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Pointed.constptr``1(``0@)                    | 
            <summary>
            Presents a readonly reference as a generic pointer which should intself be considered constant
            but, as far as the author is aware, no facility within the language can encode that constraint
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Pointed.constptr``1(``0@,System.Int32)       | 
            <summary>
            Presents a readonly reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Pointed.pvoid``1(``0@)                       | 
            <summary>
            Converts a generic reference into a void pointer
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The type of the referenced data</typeparam>
        
| M:Z0.Pointed.ptr``1(``0@,System.Int32)            | 
            <summary>
            Presents generic reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Pointed.ptr``2(``0@)                         | 
            <summary>
            Presents a generic reference r:T as a generic pointer p:T
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
            <typeparam name="P">The target pointer type</typeparam>
        
| M:Z0.Pointed.pbyte``1(``0@)                       | 
            <summary>
            Presents a generic reference as a byte pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.psbyte``1(``0@)                      | 
            <summary>
            Presents a generic reference as an sbyte pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.puint8``1(``0@)                      | 
            <summary>
            Presents a generic reference as a byte pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.pint8``1(``0@)                       | 
            <summary>
            Presents a generic reference as an sbyte pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.pint16``1(``0@)                      | 
            <summary>
            Presents a generic reference as a short pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.puint16``1(``0@)                     | 
            <summary>
            Presents a generic reference as a ushort pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.pint32``1(``0@)                      | 
            <summary>
            Presents a generic reference as an int32 pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.puint32``1(``0@)                     | 
            <summary>
            Presents a generic reference as an uint32 pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.plong``1(``0@)                       | 
            <summary>
            Presents a generic reference as an int64 pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.pint64``1(``0@)                      | 
            <summary>
            Presents a generic reference as an int64 pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.pulong``1(``0@)                      | 
            <summary>
            Presents a generic reference as a uint64 pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| M:Z0.Pointed.puint64``1(``0@)                     | 
            <summary>
            Presents a generic reference as a uint64 pointer
            </summary>
            <param name="r">The memory reference</param>
            <typeparam name="T">The source reference type</typeparam>
        
| P:Z0.PointedReader.HasNext                        | 
            <summary>
            Spefifies whether the reader can advance to and read the next cell
            </summary>
        
| P:Z0.PointedReader.Length                         | 
            <summary>
            Spefifies the length of the data soruce
            </summary>
        
| P:Z0.PointedReader.Remaining                      | 
            <summary>
            Spefifies the number of elements that remain to be read
            </summary>
        
| M:Z0.PointedReaderState.Advance                   | 
            <summary>
            Advances the stream to the next position, if any
            </summary>
        
| M:Z0.PointedReaderState.Advance(System.UInt32)    | 
            <summary>
            Advances the stream a specified number if elements, if possible
            </summary>
            <param name="count">The number of elements to advance</param>
        
| M:Z0.PointedReaderState.Seek(System.UInt32)       | 
            <summary>
            If source value pos is within the range [0,Length), assigns Current = pos;
            otherwise, assigns Current = -1 and returns true if the former and false if the latter
            </summary>
            <param name="pos">The desired reader position</param>
        
| P:Z0.PointedReaderState.HasNext                   | 
            <summary>
            Spefifies whether the reader can advance to and read the next cell
            </summary>
        
| T:Z0.PointedReader`1                              | 
            <summary>
            Defines a stream reader (of sourts) over a sequence of pointer-identified unmanaged values
            This ought to be fast, but if your looking for safe, many other choices would be better
            </summary>
        
| M:Z0.PointedReader`1.Read(`0@)                    | 
            <summary>
            Deposits the next byte in a caller-supplied target and returns true if there are yet more bytes to read
            </summary>
            <param name="dst">The value of the next byte</param>
        
| M:Z0.PointedReader`1.Read(System.Int32,System.Int32,System.Span{`0})| 
            <summary>
            Reads a specified number of elements if they exist or fewer if not and deposits the values in a caller-suppled target
            Returns the actual number of elements read
            </summary>
            <param name="offset">The offset at which to begin reading</param>
            <param name="wantedCount">The number of desired</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.PointedReader`1.Read(System.Int32,System.Int32,`0@)| 
            <summary>
            Reads a specified number of elements if they exist or fewer if not and deposits the values in a caller-suppled target
            Returns the actual number of elements read
            </summary>
            <param name="offset">The offset at which to begin reading</param>
            <param name="wantedCount">The number of desired</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.PointedReader`1.Seek(System.UInt32)          | 
            <summary>
            If source value pos is within the range [0,Length), assigns Current = pos;
            otherwise, assigns Current = -1 and returns true if the former and false if the latter
            </summary>
            <param name="pos">The desired reader position</param>
        
| P:Z0.PointedReader`1.Position                     | 
            <summary>
            The current position of the stream
            </summary>
        
| P:Z0.PointedReader`1.HasNext                      | 
            <summary>
            Spefifies whether the reader can advance to and read the next cell
            </summary>
        
| P:Z0.PointedReader`1.Length                       | 
            <summary>
            Spefifies the length of the data soruce
            </summary>
        
| P:Z0.PointedReader`1.Remaining                    | 
            <summary>
            Spefifies the number of elements that remain to be read
            </summary>
        
| T:Z0.TAppEnv                                      | 
            <summary>
            Characterizes a context that provides access to application configuration data
            </summary>
        
| P:Z0.TAppPaths.StandardOutFolder                  | 
            <summary>
            The name of the folder that receives standard out stream data
            </summary>
        
| P:Z0.TAppPaths.ErrorOutFolder                     | 
            <summary>
            The name of the folder that receives error stream data
            </summary>
        
| P:Z0.TAppPaths.DataFolder                         | 
            <summary>
            The name of a data folder
            </summary>
        
| P:Z0.TAppPaths.TestLogFolder                      | 
            <summary>
            The name of a folder that contains test result logs
            </summary>
        
| P:Z0.TAppPaths.TestDataFolder                     | 
            <summary>
            The name of a folder to which test data is emitted
            </summary>
        
| P:Z0.TAppPaths.ResoureFolder                      | 
            <summary>
            The name of an application resource folder
            </summary>
        
| P:Z0.TAppPaths.TestResultFolder                   | 
            <summary>
            The name of the folder into which test results are deposited
            </summary>
        
| P:Z0.TAppPaths.RuntimeLogFolder                   | 
            <summary>
            The name of the runtime log folder
            </summary>
        
| P:Z0.TAppPaths.CaptureFolder                      | 
            <summary>
            The name of the folder into which capture results are deposited
            </summary>
        
| P:Z0.TAppPaths.SrcFolder                          | 
            <summary>
            The name of the development source folder
            </summary>
        
| P:Z0.TAppPaths.ConfigFileName                     | 
            <summary>
            The name of an application configuration file
            </summary>
        
| P:Z0.TAppPaths.LogRoot                            | 
            <summary>
            The global application log root
            </summary>
        
| P:Z0.TAppPaths.DataRoot                           | 
            <summary>
            The path to the root data directory
            </summary>
        
| P:Z0.TAppPaths.DevRoot                            | 
            <summary>
            The path to the root development directory
            </summary>
        
| P:Z0.TAppPaths.ResourceRoot                       | 
            <summary>
            The path to the root application resource directory
            </summary>
        
| P:Z0.TAppPaths.RuntimeRoot                        | 
            <summary>
            The runtime root
            </summary>
        
| P:Z0.TAppPaths.AppId                              | 
            <summary>
            The executing application's part identifier
            </summary>
        
| P:Z0.TAppPaths.AppName                            | 
            <summary>
            The executing application's name
            </summary>
        
| P:Z0.TAppPaths.AppFolder                          | 
            <summary>
            The executing application's folder name
            </summary>
        
| P:Z0.TAppPaths.TestLogRoot                        | 
            <summary>
            The root test directory
            </summary>
        
| P:Z0.TAppPaths.AppStandardOut                     | 
            <summary>
            The directory into into which standard out stream emissions are deposited
            </summary>
        
| P:Z0.TAppPaths.AppErrorOut                        | 
            <summary>
            The path to the global test error log directory
            </summary>
        
| P:Z0.TAppPaths.AppStandardOutName                 | 
            <summary>
            The executing application's standard out log filename
            </summary>
        
| P:Z0.TAppPaths.AppErrorOutName                    | 
            <summary>
            The executing application's error log filename
            </summary>
        
| P:Z0.TAppPaths.AppDataFileName                    | 
            <summary>
            The executing application's data filename
            </summary>
        
| P:Z0.TAppPaths.AppStandardOutPath                 | 
            <summary>
            The executing application's standard out log path
            </summary>
        
| P:Z0.TAppPaths.AppErrorOutPath                    | 
            <summary>
            The executing application's error log path 
            </summary>
        
| P:Z0.TAppPaths.AppDevRoot                         | 
            <summary>
            The application-relative source code directory
            </summary>
        
| P:Z0.TAppPaths.AppConfigPath                      | 
            <summary>
            The executing application's configuration file path
            </summary>
        
| P:Z0.TAppPaths.AppDataPath                        | 
            <summary>
            The executing application's data directory
            </summary>
        
| P:Z0.TAppPaths.AppCaptureDir                      | 
            <summary>
            The application-relative capture directory
            </summary>
        
| P:Z0.TAppPaths.TestDataRoot                       | 
            <summary>
            The root folder for test-specific data
            </summary>
        
| P:Z0.TAppPaths.TestErrorOut                       | 
            <summary>
            The path to the global test error log directory
            </summary>
        
| P:Z0.TAppPaths.TestErrorPath                      | 
            <summary>
            The application-specific error stream log path
            </summary>
        
| P:Z0.TAppPaths.TestResults                        | 
            <summary>
            The directory into which structured data describing test results are deposited
            </summary>
        
| P:Z0.TAppPaths.TestResultPath                     | 
            <summary>
            The application-specific test result file path
            </summary>
        
| P:Z0.TAppPaths.BenchRootFolder                    | 
            <summary>
            The name of the root bench partition
            </summary>
        
| P:Z0.TAppPaths.BenchResults                       | 
            <summary>
            The directory into which structured data describing test results are deposited
            </summary>
        
| P:Z0.TAppPaths.BenchResultPath                    | 
            <summary>
            The application-specific bench result file path
            </summary>
        
| M:Z0.TAppPaths.ForApp(PartId)                     | 
            <summary>
            Creates a provider rooted at the current root directory for another application
            </summary>
            <param name="dst">The target app id</param>
        
| M:Z0.TAppPaths.TestDataDir(System.Type)           | 
            <summary>
            Defines a test-specific data folder
            </summary>
            <param name="test">The test host type</param>
        
| M:Z0.TAppPaths.TestDataDir``1                     | 
            <summary>
            Defines a parametrically-identified test-specific data folder
            </summary>
            <typeparam name="T">The test host type</typeparam>
        
| M:Z0.Arrays.empty``1                              | 
            <summary>
            Returns an empty array
            </summary>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.head``1(``0[])                        | 
            <summary>
            Returns a reference to the location of the first element
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.skip``1(``0[],System.Int32)           | 
            <summary>
            Adds an offset to the head of an array, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.seek``1(``0[],System.Int32)           | 
            <summary>
            Adds an offset to the head of an array, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.empty``1(``0[])                       | 
            <summary>
            Tests whether an array is empty
            </summary>
            <param name="src">The array to test</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.alloc``1(System.Int32)                | 
            <summary>
            Allocates a new array
            </summary>
            <param name="length">The array length</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.alloc``1(System.Int32,``0)            | 
            <summary>
            Allocates a new array and populates it with a specified value
            </summary>
            <param name="length">The array length</param>
            <param name="src">The value with which to populate the array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.fill``1(``0[],``0)                    | 
            <summary>
            Fills an array, in-place, with a specified value
            </summary>
            <param name="dst">The target array</param>
            <param name="dst">The source value</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.clear``1(``0[])                       | 
            <summary>
            Fills an array with the element type's default value
            </summary>
            <param name="dst">The source array</param>
            <typeparam name="T">The array element type</typeparam>
        
| M:Z0.Arrays.replicate``1(``0,System.Int32)        | 
            <summary>
            Constructs an array filled with a replicated value
            </summary>
            <param name="value">The value to replicate</param>
            <param name="count">The number of replicants</param>
            <typeparam name="T">The replicant type</typeparam>
        
| M:Z0.Arrays.reverse``1(``0[])                     | 
            <summary>
            Reverses an array in-place
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Arrays.concat(System.Byte[],System.Byte[])   | 
            <summary>
            Concatentates two byte arrays
            </summary>
            <param name="first">The first array of bytes</param>
            <param name="second">The second array of bytes</param>
            <remarks>See https://stackoverflow.com/questions/415291/best-way-to-combine-two-or-more-byte-arrays-in-c-sharp</remarks>
        
| M:Z0.Arrays.concat``1(``0[][])                    | 
            <summary>
            Concatenates a sequence of parameter arrays
            </summary>
            <param name="src">The source arrays</param>
        
| M:Z0.Arrays.concat``1(System.Collections.Generic.IEnumerable{``0[]})| 
            <summary>
            Concatenates a sequence of arrays
            </summary>
            <param name="src">The source arrays</param>
        
| M:Z0.Arrays.concat(System.Byte[][])               | 
            <summary>
            Concatentates a parameter array of byte arrays
            </summary>
            <remarks>See https://stackoverflow.com/questions/415291/best-way-to-combine-two-or-more-byte-arrays-in-c-sharp</remarks>
        
| M:Z0.Arrays.concat(System.Collections.Generic.IEnumerable{System.Byte[]})| 
            <summary>
            Concatenates a sequence of byte arrays
            </summary>
            <param name="src">The source arrays</param>
            <remarks>See https://stackoverflow.com/questions/415291/best-way-to-combine-two-or-more-byte-arrays-in-c-sharp</remarks>
        
| M:Z0.Arrays.indexed``1(``0[],System.Int32[])      | 
            <summary>
            Creates a new array by sampling the source array at each specified index
            </summary>
            <param name="src">The source array</param>
            <param name="indices">The indices that define the values to be extracted from the source</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.BitConvert.GetBytes``1(``0@)                 | 
            <summary>
            Allocates and fills a buffer with source bytes
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.BitConvert.GetBytes``1(System.ReadOnlySpan{``0},System.Int32,System.Int32)| 
            <summary>
            Converts a specified number of source elements to bytes
            </summary>
            <param name="src">The data source</param>
            <param name="offset">The source offset</param>
            <param name="count">The number of source elements to convert</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.BitConvert.GetBytes``1(``0@,System.Span{System.Byte})| 
            <summary>
            Fills a caller-supplied buffer with source bytes
            </summary>
            <param name="src">The data source</param>
            <param name="dst">The target buffer</param>
        
| M:Z0.BitWriter.write(Z0.N0,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N1,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.Write(Z0.N2,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N3,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N4,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N5,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.Write(Z0.N6,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.Write(Z0.N7,System.UInt32,System.UInt32)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N0,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N1,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N2,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N3,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N4,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N5,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N6,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitWriter.write(Z0.N7,System.Byte,System.Byte)| 
            <summary>
            Transfers the state of a naturally-identified source bit to the corresponding bit in the target
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The source</param>
            <param name="dst">The target</param>
        
| M:Z0.BitReader.bit(Z0.N0,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The data source</param>
        
| M:Z0.BitReader.bit(Z0.N1,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N2,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N3,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N4,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N5,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N6,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N7,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N8,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N9,System.UInt16)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N10,System.UInt16)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N11,System.UInt16)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N12,System.UInt16)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N13,System.UInt16)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N14,System.UInt16)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N15,System.UInt16)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N0,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The data source</param>
        
| M:Z0.BitReader.bit(Z0.N1,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N2,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N3,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N4,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N5,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N6,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N7,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N8,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N9,System.UInt32)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N10,System.UInt32)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N11,System.UInt32)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N12,System.UInt32)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N13,System.UInt32)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N14,System.UInt32)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N15,System.UInt32)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N0,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The data source</param>
        
| M:Z0.BitReader.bit(Z0.N1,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N2,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N3,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N4,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N5,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N6,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N7,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N8,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N9,System.UInt64)           | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N10,System.UInt64)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N11,System.UInt64)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N12,System.UInt64)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N13,System.UInt64)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N14,System.UInt64)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N15,System.UInt64)          | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N0,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="n">The bit selector</param>
            <param name="src">The data source</param>
        
| M:Z0.BitReader.bit(Z0.N1,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N2,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N3,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N4,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N5,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N6,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| M:Z0.BitReader.bit(Z0.N7,System.Byte)             | 
            <summary>
            Reads the state of a naturally-identified bit
            </summary>
            <param name="src">The data source</param>
            <param name="n">The bit selector</param>
        
| T:Z0.Buffers                                      | 
            <summary>
            Api for managing native buffers
            </summary>
        
| M:Z0.Buffers.tokenize(System.IntPtr,System.Int32,System.Int32)| 
            <summary>
            Creates an array of tokens that identify a squence of buffers
            </summary>
            <param name="base">The base address</param>
            <param name="size">The number of bytes covered by each buffer</param>
            <param name="count">The length of the buffer sequence</param>
        
| M:Z0.Buffers.content``1(Z0.IBufferToken)          | 
            <summary>
            Covers a token-identified buffer with a span
            </summary>
        
| M:Z0.Buffers.liberate(System.Span{System.Byte})   | 
            <summary>
            Enables bytespan execution
            </summary>
            <param name="src">The executable code</param>
        
| M:Z0.Buffers.liberate(System.Byte@,System.Int32)  | 
            <summary>
            Enables execution over a reference-identified memory segment of specified length
            </summary>
            <param name="src">The executable code</param>
        
| M:Z0.Buffers.native(System.Int32)                 | 
            <summary>
            Allocates a native buffer
            </summary>
            <param name="length">The buffer length in bytes</param>
        
| M:Z0.Buffers.release(System.IntPtr)               | 
            <summary>
            Deallocates a native allocation
            </summary>
            <param name="handle">The allocation handle</param>
        
| M:Z0.Buffers.bytes``1(System.ReadOnlySpan{``0})   | 
            <summary>
            Reimagines a readonly span of generic values as a span of readonly bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source span element type</typeparam>
        
| M:Z0.Buffers.fill``1(System.ReadOnlySpan{``0},Z0.IBufferToken)| 
            <summary>
            Fills a token-identified buffer with data from a source span and returns the target memory to the caller as a span
            </summary>
            <param name="src">The source content</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Buffers.liberate(System.IntPtr,System.Int32) | 
            <summary>
            Enables an executable memory segment
            </summary>
            <param name="src">The leading cell pointer</param>
            <param name="length">The length of the segment, in bytes</param>
        
| M:Z0.Buffers.Liberate``1(``0@,System.Int32)       | 
            <summary>
            Enables en executable memory segment
            </summary>
            <param name="src">The leading cell reference</param>
            <param name="length">The length of the segment, in bytes</param>
            <typeparam name="T">The memory cell type</typeparam>
        
| M:Z0.Buffers.VirtualProtectEx(System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32,System.UInt32@)| 
            <summary>
            Windows API that applies memory protection attributes
            </summary>
        
| P:Z0.BufferAllocation.Data                        | 
            <summary>
            Presents the allocation via a span
            </summary>
        
| M:Z0.BufferSeq.alloc(System.Int32,System.Byte)    | 
            <summary>
            Creates a buffer sequence that owns the underlying memory allocation and releases
            it upon disposal
            </summary>
            <param name="size">The size of each buffer</param>
            <param name="count">The number of buffers to allocate</param>
        
| M:Z0.BufferSeq.alloc(System.Int32,System.Byte,Z0.BufferAllocation@)| 
            <summary>
            Creates a caller-owed buffer sequence
            </summary>
            <param name="size">The size of each buffer</param>
            <param name="count">The number of buffers to allocate</param>
            <param name="allocation">The allocation handle that defines ownership</param>
        
| M:Z0.BufferSeq.Buffer(System.Byte)                | 
            <summary>
            Presents an index-identifed buffer as a span of bytes
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq.Token(System.Byte)                 | 
            <summary>
            Retrieves an index-identifed token
            </summary>
            <param name="index">The buffer index</param>
        
| P:Z0.BufferSeq.Item(System.Byte)                  | 
            <summary>
            Retrieves an index-identifed token
            </summary>
            <param name="index">The buffer index</param>
        
| P:Z0.BufferSeq.Item(Z0.BufferSeqId)               | 
            <summary>
            Retrieves a token identified by sequence id
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq.Clear(System.Byte)                 | 
            <summary>
            Zero-fills a token-identified buffer and returns the cleared memory content
            </summary>
        
| M:Z0.BufferSeq.Cells``1(System.Byte)              | 
            <summary>
            Covers a token-identified buffer with a span over cells of unmanaged type
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq.Fill``1(System.Byte,System.ReadOnlySpan{``0})| 
            <summary>
            Fills a token-identifed buffer with content from a source span and returns the covering span
            </summary>
            <param name="index">The buffer index</param>
            <param name="src">The source content</param>
            <typeparam name="T">The content cell type</typeparam>
        
| P:Z0.BufferSeq`1.Head                             | 
            <summary>
            The leading buffer
            </summary>
        
| M:Z0.BufferSeq`1.Buffer(System.Byte)              | 
            <summary>
            Retrieves the content of an index-identified buffer
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq`1.Bytes(System.Byte)               | 
            <summary>
            Presents an index-identifed buffer as a span of bytes
            </summary>
            <param name="index">The buffer index</param>
        
| P:Z0.BufferSeq`1.Item(System.Byte)                | 
            <summary>
            Presents an index-identifed buffer as a span of bytes
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq`1.Token(System.Byte)               | 
            <summary>
            Retrieves an index-identifed token
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq`1.Clear(System.Byte)               | 
            <summary>
            Zero-fills a token-identified buffer and returns the cleared memory content
            </summary>
        
| M:Z0.BufferSeq`1.Cells``1(System.Byte)            | 
            <summary>
            Covers a token-identified buffer with a span over cells of unmanaged type
            </summary>
            <param name="index">The buffer index</param>
        
| M:Z0.BufferSeq`1.Fill``1(System.Byte,System.ReadOnlySpan{``0})| 
            <summary>
            Fills a token-identifed buffer with content from a source span and returns the covering span
            </summary>
            <param name="index">The buffer index</param>
            <param name="src">The source content</param>
            <typeparam name="T">The content cell type</typeparam>
        
| T:Z0.BufferToken                                  | 
            <summary>
            Describes an allocated buffer
            </summary>
        
| P:Z0.BufferToken.Handle                           | 
            <summary>
            The location of the represented buffer allocation
            </summary>
        
| P:Z0.BufferToken.Size                             | 
            <summary>
            The size, in bytes, of the represented buffer
            </summary>
        
| T:Z0.BufferToken`1                                | 
            <summary>
            Describes a fixed-width allocated buffer
            </summary>
        
| P:Z0.BufferToken`1.Handle                         | 
            <summary>
            The location of the represented buffer allocation
            </summary>
        
| P:Z0.BufferToken`1.Size                           | 
            <summary>
            The size, in bytes, of the represented buffer
            </summary>
        
| M:Z0.BufferToken`1.Tokenize(System.IntPtr,System.Int32,System.Int32)| 
            <summary>
            Creates an array of tokens that identify a squence of buffers
            </summary>
            <param name="base">The base address</param>
            <param name="size">The number of bytes covered by each represented buffer</param>
            <param name="count">The length of the buffer sequence</param>
        
| M:Z0.BufferToken`1.Content``1                     | 
            <summary>
            Covers a token-identified buffer with a span
            </summary>
        
| M:Z0.BufferToken`1.Fill``1(System.ReadOnlySpan{``0})| 
            <summary>
            Fills a token-identified buffer with data from a source span and returns the target memory to the caller as a span
            </summary>
            <param name="src">The source content</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.BufferToken`1.Clear                          | 
            <summary>
            Zero-fills a token-identified buffer
            </summary>
        
| M:Z0.ByteReader.Read``1(System.Span{System.Byte},System.Int32,``0@)| 
            <summary>
            Reads an unmanaged generic value from a bytespan beginning at a specified offset and deposits the result in a caller-supplied target
            </summary>
            <param name="src">The source value</param>
            <param name="offset">The source span offset</param>
            <param name="dst">The target reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.ByteReader.Read``1(``0@)                     | 
            <summary>
            Reads a single cell into a span of bytes
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.ByteReader.Read(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Reads at most 8 bytes from the data source, as determined by source length
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read(System.Byte@,System.Byte)    | 
            <summary>
            Reads up to 8 bytes from a data source reference, as determined by a specified {count} of bytes,
            and will likely incinerate the process with a segmentation fault if there aren't {count} bytes to read
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of bytes to read</param>
        
| M:Z0.ByteReader.Read1(System.Byte@)               | 
            <summary>
            Reads 1 byte from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read2(System.Byte@)               | 
            <summary>
            Reads 2 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read3(System.Byte@)               | 
            <summary>
            Reads 3 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read4(System.Byte@)               | 
            <summary>
            Reads 4 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read5(System.Byte@)               | 
            <summary>
            Reads 5 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read6(System.Byte@)               | 
            <summary>
            Reads 6 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read7(System.Byte@)               | 
            <summary>
            Reads 7 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.Read8(System.Byte@)               | 
            <summary>
            Reads 8 bytes from a data source reference
            </summary>
            <param name="src">The data source</param>
        
| M:Z0.ByteReader.ReadAll(System.Int16@)            | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.ReadAll(System.UInt16@)           | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.Read(System.UInt16,Z0.N0)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt16,Z0.N1)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.ReadAll(System.Int32@)            | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.ReadAll(System.UInt32@)           | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.Read(System.UInt32,Z0.N0)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt32,Z0.N1)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt32,Z0.N2)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt32,Z0.N3)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.ReadAll(System.Int64@)            | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.ReadAll(System.UInt64@)           | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.ReadAll(System.Single@)           | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.ReadAll(System.Double@)           | 
            <summary>
            Reads the bytes that define a numeric value
            </summary>
            <param name="src">The value to read</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N0)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N1)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N2)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N3)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N4)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N5)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N6)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| M:Z0.ByteReader.Read(System.UInt64,Z0.N7)         | 
            <summary>
            Reads a source byte, identified by natural index
            </summary>
            <param name="src">The data source</param>
            <param name="n">The byte index selector</param>
        
| T:Z0.ByteReaderG                                  | 
            <summary>
            Defines a bitreader that targets parametric unsigned numeric types
            </summary>
        
| M:Z0.ByteReaderG.Read``1(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Reads at most size[T] bytes as determined by the length of the data source
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The unsigned numeric type</typeparam>
        
| M:Z0.Bytes.span``1(``0[])                         | 
            <summary>
            Constructs a span from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Bytes.from``1(``0@)                          | 
            <summary>
            Reads a single cell into a span of bytes
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Bytes.from``1(``0)                           | 
            <summary>
            Converts the source value to a bytespan
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Bytes.from``1(``0@,System.Span{System.Byte},System.Int32)| 
            <summary>
            Writes an unmanaged source value to an array
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target span</param>
            <param name="offset">The target span offset</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Bytes.get``1(``0@)                           | 
            <summary>
            Converts the source value to a bytespan
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Bytes.one``1(``0@,System.Int32)              | 
            <summary>
            Reads/writes a byte from/to a reference
            </summary>
            <param name="src">The source reference</param>
            <param name="offset">The 0-based/byte-relative offset</param>
            <typeparam name="T">The data type</typeparam>
        
| M:Z0.Bytes.to``1(``0@,System.Span{System.Byte})   | 
            <summary>
            Reads a byte array from an unmanaged source value and stored the result in a caller-allocated target
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target array</param>
            <typeparam name="T">The soruce type</typeparam>
        
| M:Z0.Cells.cell``1(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Reads a generic value from the head of a source span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Cells.cell``1(System.ReadOnlySpan{System.Byte},System.Int32)| 
            <summary>
            Reads a generic value beginning at a specified offset
            </summary>
            <param name="src">The source span</param>
            <param name="offset">The index at which span consumption should begin</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Cells.cell``1(System.Span{System.Byte})      | 
            <summary>
            Reads a generic value from the head of a source span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.Cells.cell``1(System.Span{System.Byte},System.Int32)| 
            <summary>
            Reads an unmanaged generic value from a bytespan beginning at a specified offset
            </summary>
            <param name="src">The source value</param>
            <param name="offset">The source array offset</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Cells.copy``2(``0@,``1@,System.Int32,System.Int32)| 
            <summary>
            Copies a specified number of source values to the target and returns the count of copied bytes
            </summary>
            <param name="src">The source reference</param>
            <param name="srcCount">The number of source values to copy</param>
            <param name="dst">The target reference</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Cells.copy``2(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Span{``1},System.Int32)| 
            <summary>
            Copies a specified number source cells to the target and returns the count of copied bytes
            </summary>
            <param name="src">The data source</param>
            <param name="start">The source start index</param>
            <param name="count">The soruce cell count</param>
            <param name="dst">The data target</param>
            <param name="offset">The target offset</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Cells.copy``2(System.Span{``0},System.Int32,System.Int32,System.Span{``1},System.Int32)| 
            <summary>
            Copies a specified number source cells to the target and returns the count of copied bytes
            </summary>
            <param name="src">The data source</param>
            <param name="start">The source start index</param>
            <param name="count">The soruce cell count</param>
            <param name="dst">The data target</param>
            <param name="offset">The target offset</param>
            <typeparam name="S">The source cell type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Copier.copy``2(``0@,``1@,System.Int32,System.Int32)| 
            <summary>
            Copies a specified number of source values to the target and returns the count of copied bytes
            </summary>
            <param name="src">The source reference</param>
            <param name="srcCount">The number of source values to copy</param>
            <param name="dst">The target reference</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.Copier.copy``2(``0@,System.Span{``1})        | 
            <summary>
            Copies data from an unmanaged value to a target span
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.Copier.copy(System.Byte*,System.Byte*,System.UInt32)| 
            <summary>
            Copies a contiguous segments of bytes from one location to another
            </summary>
            <param name="pSrc">The location of the source bytes</param>
            <param name="pDst">The location of the target</param>
            <param name="srcCount">The number of values to copy</param>
        
| M:Z0.Copier.copy``1(``0*,``0*,System.UInt32)      | 
            <summary>
            Copies a contiguous segments of values from one location to another
            </summary>
            <param name="pSrc">The location of the source bytes</param>
            <param name="pDst">The location of the target</param>
            <param name="srcCount">The number of values to copy</param>
        
| M:Z0.Copier.copy``1(``0*,System.Span{``0},System.Int32,System.UInt32)| 
            <summary>
            Copies a contiguous segments of values to a span
            </summary>
            <param name="pSrc">The location of the source bytes</param>
            <param name="pDst">The location of the target</param>
            <param name="srcCount">The number of values to copy</param>
        
| M:Z0.Copier.copy(System.Byte*,System.Span{System.Byte},System.Int32,System.UInt32)| 
            <summary>
            Copies a contiguous segments of bytes from a source location to a target span
            </summary>
            <param name="pSrc">The location of the source bytes</param>
            <param name="dst">The location of the target</param>
            <param name="srcCount">The number of values to copy</param>
        
| T:Z0.IndexFunction`1                              | 
            <summary>
            Canonical signature for a function that projects the values of an enumeration onto a congiguous and strictly monotonic sequence
            of integers [0,.., n - 1] where n denotes the maximum number of indexed items
            </summary>
            <param name="kind">The enum literal to map to an integer value</param>
            <typeparam name="E">The enum type</typeparam>
        
| M:Z0.memory.reader(System.Byte*,System.Int64,System.Int64)| 
            <summary>
            Allocates a caller-disposed read-only stream over a block of unmanaged memory
            </summary>
            <param name="pSrc">The address of the leading cell</param>
            <param name="length">The number of available bytes</param>
            <param name="capacity">The size of the working buffer</param>
        
| M:Z0.memory.writer(System.Byte*,System.Int64,System.Int64)| 
            <summary>
            Allocates a caller-disposed read/write stream over a block of unmanaged memory
            </summary>
            <param name="pSrc">The address of the leading cell</param>
            <param name="length">The number of available bytes</param>
            <param name="capacity">The size of the working buffer</param>
        
| M:Z0.memory.copy``2(``0@,``1@,System.Int32,System.Int32)| 
            <summary>
            Copies a specified number of source values to the target and returns the count of copied bytes
            </summary>
            <param name="src">The source reference</param>
            <param name="srcCount">The number of source values to copy</param>
            <param name="dst">The target reference</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.memory.copy``2(``0@,System.Span{``1})        | 
            <summary>
            Copies data from an unmanaged value to a target span
            </summary>
            <param name="src">The source value</param>
            <param name="dst">The target span</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target cell type</typeparam>
        
| M:Z0.memory.copy``1(``0*,System.Span{``0},System.Int32,System.UInt32)| 
            <summary>
            Copies a contiguous segments of values to a span
            </summary>
            <param name="pSrc">The location of the source bytes</param>
            <param name="pDst">The location of the target</param>
            <param name="srcCount">The number of values to copy</param>
        
| M:Z0.memory.copy(System.Byte*,System.Span{System.Byte},System.Int32,System.UInt32)| 
            <summary>
            Copies a contiguous segments of bytes from a source location to a target span
            </summary>
            <param name="pSrc">The location of the source bytes</param>
            <param name="dst">The location of the target</param>
            <param name="srcCount">The number of values to copy</param>
        
| M:Z0.memory.read8(System.Byte@)                   | 
            <summary>
            Copies a byte
            </summary>
            <param name="src">The source reference</param>
        
| M:Z0.memory.read16(System.Byte@)                  | 
            <summary>
            Reads 16 bits from a contiguous sequence of 2 bytes
            </summary>
            <param name="src">The source reference</param>
        
| M:Z0.memory.read32(System.Byte@)                  | 
            <summary>
            Reads 32 bits from a contiguous sequence of 4 bytes
            </summary>
            <param name="src">The source reference</param>
        
| M:Z0.memory.read32(System.UInt16@)                | 
            <summary>
            Reads 32 bits from a contiguous sequence of 2 16-bit integers
            </summary>
            <param name="src">The bit source</param>
        
| M:Z0.memory.read64(System.Byte@)                  | 
            <summary>
            Reads 64 bits from a contiguous sequence of 8 bytes
            </summary>
            <param name="src">The source reference</param>
        
| M:Z0.memory.read64(System.UInt16@)                | 
            <summary>
            Reads 64 bits from a contiguous sequence of 4 16-bit integers
            </summary>
            <param name="src">The source reference</param>
        
| M:Z0.memory.read64(System.UInt32@)                | 
            <summary>
            Reads 64 bits from a contiguous sequence of 2 32-bit integers
            </summary>
            <param name="src">The source reference</param>
        
| M:Z0.memory.store8(System.Byte,System.Byte@)      | 
            <summary>
            Projects a source byte onto a byte reference
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.store16(System.UInt16,System.Byte@)   | 
            <summary>
            Projects 16 source bits onto a contiguous sequence of 2 bytes
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.store32(System.UInt32,System.Byte@)   | 
            <summary>
            Projects 32 source bits onto a contiguous sequence of 4 bytes
            </summary>
            <param name="src">The source</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.store32(System.UInt32,System.UInt16@) | 
            <summary>
            Projects 32 source bits onto a contiguous sequence of 2 16-bit integers
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.store64(System.UInt64,System.Byte@)   | 
            <summary>
            Projects 64 source bits onto a contiguous sequence of 8 bytes
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.store64(System.UInt64,System.UInt16@) | 
            <summary>
            Projects 64 source bits onto a contiguous sequence of 4 16-bit integers
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.store64(System.UInt64,System.UInt32@) | 
            <summary>
            Projects 64 source bits onto a contiguous sequence of 2 32-bit integers
            </summary>
            <param name="src">The source data</param>
            <param name="dst">The target reference</param>
        
| M:Z0.memory.cast``2(System.Memory{``0})           | 
            <summary>
            Casts memory cells of one type to another
            </summary>
            <param name="src">The source memory</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.memory.edit``1(System.ReadOnlyMemory{``0})   | 
            <summary>
            Constructs a mutable memory segment from a readonly memory segment
            </summary>
            <param name="src">The source memory</param>
            <typeparam name="T">The memory cell type</typeparam>
        
| M:Z0.memory.reverse``1(System.Memory{``0})        | 
            <summary>
            Reverses the memory cells in-place
            </summary>
            <param name="src">The source memory</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.memory.enumerate``1(System.ReadOnlyMemory{``0})| 
            <summary>
            Enumerates the content of a readonly memory segment
            </summary>
            <param name="src">The source memory</param>
            <typeparam name="T">The memory cell type</typeparam>
        
| M:Z0.memory.map``2(System.Memory{``0},System.Func{``0,``1})| 
            <summary>
            Projects a memory source to target via a supplied transformation
            </summary>
            <param name="src">The source</param>
            <param name="f">The transformation</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.NatSpan`2                                    | 
            <summary>
            Defines a span of natural length N
            </summary>
        
| P:Z0.NatSpan`2.Data                               | 
            <summary>
            The backing storage
            </summary>
        
| P:Z0.NatSpan`2.Head                               | 
            <summary>
            The leading storage cell
            </summary>
        
| P:Z0.NatSpan`2.IsEmpty                            | 
            <summary>
            True if no capacity exist, false otherwise
            </summary>
        
| P:Z0.NatSpan`2.Item(System.Int32)                 | 
            <summary>
            Queries/manipulates an index-identified cell
            </summary>
        
| M:Z0.NatSpan`2.Cell``1(System.Int32)              | 
            <summary>
            Queries/manipulates the underlying strorage through the perspective of another type
            </summary>
        
| T:Z0.TableSpan`3                                  | 
            <summary>
            Defines a tabular span of dimension MxN 
            </summary>
            <typeparam name="M">The row count type</typeparam>
            <typeparam name="N">The row count type</typeparam>
            <typeparam name="T">The span element type</typeparam>
        
| P:Z0.TableSpan`3.RowCount                         | 
            <summary>
            The number of rows in the structure
            </summary>
        
| P:Z0.TableSpan`3.ColCount                         | 
            <summary>
            The number of columns in the structure
            </summary>
        
| P:Z0.TableSpan`3.RowLenth                         | 
            <summary>
            The number of cells in each row
            </summary>
        
| P:Z0.TableSpan`3.ColLength                        | 
            <summary>
            The number of cells in each column
            </summary>
        
| P:Z0.TableSpan`3.CellCount                        | 
            <summary>
            The total number of allocated elements
            </summary>
        
| M:Z0.TableSpan`3.CheckedTransfer(System.Span{`2}) | 
            <summary>
            Verifies correct source span length prior to backing store assignment
            </summary>
            <param name="src">The source span</param>
            <typeparam name="U">The source element type</typeparam>
        
| P:Z0.TableSpan`3.Data                             | 
            <summary>
            Provides access to the underlying linear storage
            </summary>
        
| M:Z0.NatSpan.bytes``2(System.Span{``1},``0)       | 
            <summary>
            Loads a bytespan of natural length from a generic source span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.NatSpan.alloc``2(``0,``1)                    | 
            <summary>
            Allocates span of natural length
            </summary>
            <param name="n">The cell count representative</param>
            <param name="t">A cell type representative</param>
            <typeparam name="N">The cell count type</typeparam>
            <typeparam name="T">The cell data type</typeparam>
        
| M:Z0.NatSpan.broadcast``2(``1,Z0.NatSpan{``0,``1}@)| 
            <summary>
            Fills a target block with replicated cell data
            </summary>
            <param name="data">The data used to fill the block</param>
            <param name="dst">The target block</param>
            <typeparam name="T">The cell type</typeparam>        
        
| M:Z0.NatSpan.load``2(System.Span{``1},``0)        | 
            <summary>
            Verifies correct source span length prior to backing store assignment
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
            <typeparam name="N">The length type</typeparam>
        
| M:Z0.NatSpan.load``2(``1@,``0)                    | 
            <summary>
            Loads a natural block from a reference
            </summary>
            <param name="src">The source reference</param>
            <param name="n">The length representative</param>
            <typeparam name="N">The length type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.refs.edit``1(``0@)                           | 
            <summary>
            Presents a readonly reference as reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.refs.seek``1(``0@,System.Int32)              | 
            <summary>
            Adds an offset to a reference, measured relative to the reference type
            </summary>
            <param name="src">The source reference</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.refs.skip``1(``0@,System.Int32)              | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the result
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.refs.skip``1(``0@,System.UInt32)             | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the resulting element
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.refs.skip``1(``0@,System.UInt64)             | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the resulting element
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.refs.swap``1(``0@,``0@)                      | 
            <summary>
            The canonical swap function
            </summary>
            <param name="lhs">The left value</param>
            <param name="rhs">The right value</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.refs.seek8``1(``0@,System.Int32)             | 
            <summary>
            Interprets a generic element source as a uint8 element source and skips {count} elments of bit-width 8
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 8-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.refs.seek16``1(``0@,System.Int32)            | 
            <summary>
            Interprets a generic element source as a uint16 element source and skips {count} elments of bit-width 16
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 16-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.refs.seek32``1(``0@,System.Int32)            | 
            <summary>
            Interprets a generic element source as a uint32 element source and skips {count} elments of bit-width 32
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 32-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.refs.seek64``1(``0@,System.Int32)            | 
            <summary>
            Interprets a generic element source as a uint64 element source and skips {count} elments of bit-width 64
            </summary>
            <param name="src">The data source</param>
            <param name="count">The number of 64-bit elements to skip</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.refs.seekb``1(``0@,System.Int64)             | 
            <summary>
            Adds an offset to a reference, measured in bytes
            </summary>
            <param name="src">The soruce reference</param>
            <param name="count">The number of bytes to add</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.refs.skip8``1(``0@,System.Int32)             | 
            <summary>
            Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.refs.const64``1(``0@)                        | 
            <summary>
            Interprets a readonly generic reference as a readonly uint64 reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.refs.head``1(System.Span{``0})               | 
            <summary>
            Returns a reference to the location of the first span element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.refs.head``1(System.ReadOnlySpan{``0})       | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.refs.skip``1(System.Span{``0},System.Int32)  | 
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.refs.skip``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.refs.seek``1(System.Span{``0},System.Int32)  | 
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.refs.ptr``1(``0@,System.Int32)               | 
            <summary>
            Presents generic reference as a generic pointer displaced by an element offset
            </summary>
            <param name="src">The memory reference</param>
            <param name="offset">The number of elements to skip</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.refs.constptr``1(``0@)                       | 
            <summary>
            Presents a readonly reference as a generic pointer which should intself be considered constant
            but, as far as the author is aware, no facility within the language can encode that constraint
            </summary>
            <param name="src">The memory reference</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Spans.alloc``1(System.Int32)                 | 
            <summary>
            Allocates a span
            </summary>
            <param name="length">The number cells to allocate</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.alloc``1(System.UInt16)                | 
            <summary>
            Allocates a span
            </summary>
            <param name="length">The number cells to allocate</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.alloc``1(System.Byte)                  | 
            <summary>
            Allocates a span
            </summary>
            <param name="length">The number cells to allocate</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.bytes``1(System.Span{``0})             | 
            <summary>
            Presents a span of generic values as a span of bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.cast``1(System.Span{System.Byte},System.Span{System.Byte}@)| 
            <summary>
            Produces a target T-span from a source bytespan populated with a maximal
            number of elemements obtainable from the source bytes; remaining bytes, if
            any, are deposited into a remainder bytespan
            </summary>
            <param name="src">The data source</param>
            <param name="rem">The span populated with left-over bytes, if any</param>
            <typeparam name="T">The target element type</typeparam>
        
| M:Z0.Spans.cast``2(System.ReadOnlySpan{``0})      | 
            <summary>
            Reimagines a readonly span of one element type as a readonly span of another element type
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source element type</typeparam>
            <typeparam name="T">The target element type</typeparam>
        
| M:Z0.Spans.cast``2(System.Span{``0})              | 
            <summary>
            Reimagines a span of one element type as a span of another element type
            </summary>
            <param name="src">The source span</param>
            <typeparam name="S">The source element type</typeparam>
            <typeparam name="T">The target element type</typeparam>
        
| M:Z0.Spans.count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| 
            <summary>
            Counts the number of values in the source that satisfy the predicate
            </summary>
            <param name="src">The source span</param>
            <param name="f">The predicate to evaluate over each element</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.edit``1(``0@)                          | 
            <summary>
            Presents a readonly reference as reference
            </summary>
            <param name="src">The source reference</param>
            <typeparam name="T">The source type</typeparam>
        
| M:Z0.Spans.edit``1(``0@,System.Int32)             | 
            <summary>
            Loads a span from a memory reference
            </summary>
            <param name="src">The memory source</param>
            <param name="count">The number of source cells to read</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head``1(System.Span{``0})              | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head``1(System.Span{``0},System.Int32) | 
            <summary>
            Returns a reference to the head of a span, offset by a specified amount
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Returns a reference to the head of a readonly span
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Returns a readonly reference to the head of a readonly span, offset by a specified amount
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head``2(Z0.NatSpan{``0,``1})           | 
            <summary>
            Returns a reference to the location of the first span element
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.head8``1(System.Span{``0})             | 
            <summary>
            Presents the bytespan head as a reference to an unsigned 8-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head16``1(System.Span{``0})            | 
            <summary>
            Presents the span head as a reference to an unsigned 16-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head32``1(System.Span{``0})            | 
            <summary>
            Presents the bytespan head as a reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head8``1(System.ReadOnlySpan{``0})     | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 8-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head16``1(System.ReadOnlySpan{``0})    | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 16-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head64``1(System.Span{``0})            | 
            <summary>
            Presents the span head as a reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head64``1(System.ReadOnlySpan{``0})    | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head32``1(System.ReadOnlySpan{``0})    | 
            <summary>
            Presents the span head as a readonly reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head32i(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Presents the span head as a reference to a signed 32-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.head64i(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Presents the span head as a reference to a signed 64-bit integer
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.iter``1(System.ReadOnlySpan{``0},System.Action{``0})| 
            <summary>
            Inovkes an action for each element in a source span
            </summary>
            <param name="src">The source span</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.iteri``1(System.ReadOnlySpan{``0},System.Action{System.Int32,``0})| 
            <summary>
            Inovkes an action for each element in a source span
            </summary>
            <param name="src">The source span</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.iter``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Action{``0,``0})| 
            <summary>
            Inovkes an action for each pair of elements in source spans of equal length
            </summary>
            <param name="src">The source span</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.iter``1(System.Span{``0},System.Span{``0},System.Action{``0,``0})| 
            <summary>
            Inovkes an action for each pair of elements in source spans of equal length
            </summary>
            <param name="src">The source span</param>
            <param name="f">The receiver</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.liberate(System.Span{System.Byte})     | 
            <summary>
            Enables bytespan execution
            </summary>
            <param name="src">The executable code</param>
        
| M:Z0.Spans.map``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})| 
            <summary>
            Maps the elements of a source span to a target span
            </summary>
            <param name="src">The source span</param>
            <param name="f">The mapping function</param>
            <param name="dst">The target span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.mapi``2(System.ReadOnlySpan{``0},System.Func{System.Int32,``0,``1},System.Span{``1})| 
            <summary>
            Maps the elements of a source span to a target span
            </summary>
            <param name="src">The source span</param>
            <param name="f">The mapping function</param>
            <param name="dst">The target span</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.seek``1(``0@,System.Int32)             | 
            <summary>
            Adds an offset to a reference, measured relative to the reference type
            </summary>
            <param name="src">The source reference</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.seek8``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to 8-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.seek16``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to 16-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 16-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.seek32``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to 32-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 32-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.seek64``1(System.Span{``0},System.Int32)| 
            <summary>
            Adds an offset to the head of a span, measured relative to 64-bit segments, and returns the resulting reference
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.seek``1(System.Span{``0},System.Int32) | 
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.skip``1(System.Span{``0},System.Int32) | 
            <summary>
            Adds an offset to the head of a span, measured relative to the reference type
            </summary>
            <param name="src">The source span</param>
            <param name="bytes">The number of elements to advance</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.skip``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.skip``1(``0@,System.Int32)             | 
            <summary>
            Skips a specified number of source elements and returns a readonly reference to the resulting element
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of elements to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.skip8``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 8-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.skip16``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of 16-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 16-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.skip32``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of 32-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 32-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.skip64``1(System.ReadOnlySpan{``0},System.Int32)| 
            <summary>
            Skips a specified number of 64-bit source segments and returns a readonly reference to the resulting memory location
            </summary>
            <param name="src">The source span</param>
            <param name="count">The number of 64-bit segments to skip</param>
            <typeparam name="T">The source element type</typeparam>
        
| M:Z0.Spans.s8u``1(System.Span{``0})               | 
            <summary>
            Presents a span of generic values as a span of bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s8i``1(System.Span{``0})               | 
            <summary>
            Presents a readonly span of generic values as a span of signed bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s16i``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of signed 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s16u``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of unsigned 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s32i``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of signed 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s32u``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of unsigned 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s64i``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of 64-bit signed integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s64u``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of 64-bit unsigned integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s32f``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of 32-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s64f``1(System.Span{``0})              | 
            <summary>
            Presents a span of generic values as a span of 64-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s8i``1(System.ReadOnlySpan{``0})       | 
            <summary>
            Presents a readonly span ofgeneric values as a readonly span of signed bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s8u``1(System.ReadOnlySpan{``0})       | 
            <summary>
            Presents a readonly span ofgeneric values as a readonly span of bytes
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s16i``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of signed 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s16u``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of unsigned 16-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s32i``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of signed 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s32u``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of unsigned 32-bit integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s64i``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of 64-bit signed integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s64u``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of 64-bit unsigned integers
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s32f``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly span of generic values as a readonly span of 32-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.s64f``1(System.ReadOnlySpan{``0})      | 
            <summary>
            Presents a readonly readonly span of generic values as a readonly readonly span of 64-bit floats
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.span``1(``0[])                         | 
            <summary>
            Constructs a span from a parameter array
            </summary>
            <param name="src">The source array</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.Byte})        | 
            <summary>
            Reimagines a span of bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.UInt32})      | 
            <summary>
            Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.SByte})       | 
            <summary>
            Reimagines a span of signed bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.Int16})       | 
            <summary>
            Reimagines a span of signed 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.UInt16})      | 
            <summary>
            Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.Int32})       | 
            <summary>
            Reimagines a span of unsigned 32-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.Int64})       | 
            <summary>
            Reimagines a span of unsigned 64-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.UInt64})      | 
            <summary>
            Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.Double})      | 
            <summary>
            Reimagines a span of unsigned 64-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.Span{System.Single})      | 
            <summary>
            Reimagines a span of unsigned 32-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.SByte})| 
            <summary>
            Reimagines a span of signed bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.Byte})| 
            <summary>
            Reimagines a span of bytes as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.Int16})| 
            <summary>
            Reimagines a span of signed 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.UInt16})| 
            <summary>
            Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.UInt32})| 
            <summary>
            Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.Int32})| 
            <summary>
            Reimagines a span of unsigned 32-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.Int64})| 
            <summary>
            Reimagines a span of unsigned 64-bit signed integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.UInt64})| 
            <summary>
            Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.Single})| 
            <summary>
            Reimagines a span of unsigned 32-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.to``1(System.ReadOnlySpan{System.Double})| 
            <summary>
            Reimagines a span of unsigned 64-bit floats as a span of generic values
            </summary>
            <param name="src">The source span</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.Spans.view``1(``0@,System.Int32)             | 
            <summary>
            Loads a span from a memory reference
            </summary>
            <param name="src">The memory source</param>
            <param name="count">The number of source cells to read</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Spans.view8``1(``0@,System.Int32)            | 
            <summary>
            Loads a bytespan from a memory reference
            </summary>
            <param name="src">The memory source</param>
            <param name="count">The number of source cells to read</param>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.PartRing`2                                   | 
            <summary>
            Defines a mutable circular S-cell buffer partitioned into T-cell parts
            </summary>
        
| P:Z0.RingBuffer`1.Count                           | 
            <summary>
            The number of elements stored in the queue
            </summary>
        
| P:Z0.RingBuffer`1.InPos                           | 
            <summary>
            The current position of the writer
            </summary>
        
| P:Z0.RingBuffer`1.OutPos                          | 
            <summary>
            The current position of the reader
            </summary>
        
| P:Z0.RingBuffer`1.Capacity                        | 
            <summary>
            The number of elements the buffer can store
            </summary>
        
| M:Z0.SpanBuffers.parts``2(System.Int32)           | 
            <summary>
            Allocates a span-predicated S/T ring buffer
            </summary>
            <param name="capacity">The segment count</param>
            <typeparam name="S">The segmented type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.SpanBuffers.parts``2(System.Span{``0})       | 
            <summary>
            Covers an S-span with an S/T ring buffer
            </summary>
            <param name="src">The data source</param>
            <typeparam name="S">The segmented type</typeparam>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.SpanBuffers.ring``1(System.Int32)            | 
            <summary>
            Allocates a span-predicated T-ring buffer
            </summary>
            <param name="capacity">The T-cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.SpanBuffers.ring``1(System.Span{``0})        | 
            <summary>
            Covers a span with a ring buffer
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.SpanBuffers.stack``1(System.Int32)           | 
            <summary>
            Allocates a span-predicated T-stack
            </summary>
            <param name="capacity">The T-cell count</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.SpanBuffers.stack``1(System.Span{``0})       | 
            <summary>
            Covers a span with a stack buffer
            </summary>
            <param name="src">The data source</param>
            <typeparam name="T">The cell type</typeparam>
        
| T:Z0.Stacked.MemStack128                          | 
            <summary>
            Defines 16 bytes = 512 bits of stack-allocated storage
            </summary>
        
| T:Z0.Stacked.MemStack256                          | 
            <summary>
            Covers 32 bytes = 256 bits of stack-allocated storage
            </summary>
        
| T:Z0.Stacked.MemStack512                          | 
            <summary>
            Covers 64 bytes = 512 bits of stack-allocated storage
            </summary>
        
| T:Z0.Stacked.MemStack1024                         | 
            <summary>
            Covers 128 bytes = 1024 bits of stack-allocated storage
            </summary>
        
| M:Z0.Stacks.alloc(Z0.W8)                          | 
            <summary>
            Stack allocates 8 bits of storage
            </summary>
            <param name="w">The storage width</param>
        
| M:Z0.Stacks.alloc(Z0.W16)                         | 
            <summary>
            Stack allocates 16 bits of storage
            </summary>
            <param name="w">The storage width</param>
        
| M:Z0.Stacks.alloc(Z0.W32)                         | 
            <summary>
            Stack allocates 32 bits of storage
            </summary>
            <param name="w">The storage width</param>
        
| M:Z0.Stacks.alloc(Z0.W64)                         | 
            <summary>
            Stack allocates 64 bits of storage
            </summary>
            <param name="w">The storage width</param>
        
| M:Z0.Stacks.alloc(Z0.W128)                        | 
            <summary>
            Stack allocates 16 bytes = 128 bits of storage
            </summary>
            <param name="w">The storage width</param>
            <param name="seg">The segment width</param>
        
| M:Z0.Stacks.alloc(Z0.W256)                        | 
            <summary>
            Stack allocates 32 bytes = 256-bits of storage
            </summary>
            <param name="w">The storage width</param>
            <param name="seg">The segment width</param>
        
| M:Z0.Stacks.alloc(Z0.W512)                        | 
            <summary>
            Stack allocates 64 bytes = 512-bits of storage
            </summary>
            <param name="w">The storage width</param>
            <param name="seg">The segment width</param>
        
| M:Z0.Stacks.alloc(Z0.W1024)                       | 
            <summary>
            Stack allocates 128 bytes = 1024-bits of storage
            </summary>
            <param name="w">The storage width</param>
        
| M:Z0.Stacks.char2                                 | 
            <summary>
            Allocates a 2-character storage stack
            </summary>
        
| M:Z0.Stacks.char4                                 | 
            <summary>
            Allocates a 4-character storage stack
            </summary>
        
| M:Z0.Stacks.char8                                 | 
            <summary>
            Allocates an 8-character storage stack
            </summary>
        
| M:Z0.Stacks.char16                                | 
            <summary>
            Allocates a 16-character storage stack
            </summary>
        
| M:Z0.Stacks.char32                                | 
            <summary>
            Allocates a 32-character storage stack
            </summary>
        
| M:Z0.Stacks.char64                                | 
            <summary>
            Allocates a 64-character storage stack
            </summary>
        
| M:Z0.Stacks.cell``1(Z0.Stacked.MemStack64@,System.Int32,``0)| 
            <summary>
            Queries/manipulates an index-identified generic cell value
            </summary>
            <param name="src">The source storage</param>
            <param name="index">The source index, relative to the cell type</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Stacks.cell``1(Z0.Stacked.MemStack128@,System.Int32,``0)| 
            <summary>
            Queries/manipulates an index-identified generic cell value
            </summary>
            <param name="src">The source storage</param>
            <param name="index">The source index, relative to the cell type</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Stacks.cell``1(Z0.Stacked.MemStack256@,System.Int32,``0)| 
            <summary>
            Queries/manipulates an index-identified generic cell value
            </summary>
            <param name="src">The source storage</param>
            <param name="index">The source index, relative to the cell type</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Stacks.cell``1(Z0.Stacked.MemStack512@,System.Int32,``0)| 
            <summary>
            Queries/manipulates an index-identified generic cell value
            </summary>
            <param name="src">The source storage</param>
            <param name="index">The source index, relative to the cell type</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Stacks.cell``1(Z0.Stacked.MemStack1024@,System.Int32,``0)| 
            <summary>
            Queries/manipulates an index-identified generic cell value
            </summary>
            <param name="src">The source storage</param>
            <param name="index">The source index, relative to the cell type</param>
            <typeparam name="T">The cell type</typeparam>
        
| M:Z0.Stacks.cell(Z0.Stacked.CharStack2@,System.Int32)| 
            <summary>
            Queries/manipulates a index-identified character in a storage stack
            </summary>
            <param name="src">The character storage</param>
            <param name="index">The character index</param>
        
| M:Z0.Stacks.cell(Z0.Stacked.CharStack4@,System.Int32)| 
            <summary>
            Queries/manipulates a index-identified character in a storage stack
            </summary>
            <param name="src">The character storage</param>
            <param name="index">The character index</param>
        
| M:Z0.Stacks.cell(Z0.Stacked.CharStack8@,System.Int32)| 
            <summary>
            Queries/manipulates a index-identified character in a storage stack
            </summary>
            <param name="src">The character storage</param>
            <param name="index">The character index</param>
        
| M:Z0.Stacks.cell(Z0.Stacked.CharStack16@,System.Int32)| 
            <summary>
            Queries/manipulates a index-identified character in a storage stack
            </summary>
            <param name="src">The character storage</param>
            <param name="index">The character index</param>
        
| M:Z0.Stacks.cell(Z0.Stacked.CharStack32@,System.Int32)| 
            <summary>
            Queries/manipulates a index-identified character in a storage stack
            </summary>
            <param name="src">The character storage</param>
            <param name="index">The character index</param>
        
| M:Z0.Stacks.cell(Z0.Stacked.CharStack64@,System.Int32)| 
            <summary>
            Queries/manipulates a index-identified character in a storage stack
            </summary>
            <param name="src">The character storage</param>
            <param name="index">The character index</param>
        
| M:Z0.Stacks.first(Z0.Stacked.CharStack2@)         | 
            <summary>
            Retrieves a readonly reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.first(Z0.Stacked.CharStack4@)         | 
            <summary>
            Retrieves a readonly reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.first(Z0.Stacked.CharStack8@)         | 
            <summary>
            Retrieves a readonly reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.first(Z0.Stacked.CharStack16@)        | 
            <summary>
            Retrieves a readonly reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.first(Z0.Stacked.CharStack32@)        | 
            <summary>
            Retrieves a readonly reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.first(Z0.Stacked.CharStack64@)        | 
            <summary>
            Retrieves a readonly reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head``1(Z0.Stacked.MemStack64@,``0)   | 
            <summary>
            Presents the leading source storage cell as a generic reference
            </summary>
            <param name="src">The source storage</param>
            <param name="t">A cell type representative</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Stacks.head``1(Z0.Stacked.MemStack128@,``0)  | 
            <summary>
            Presents the leading source storage cell as a generic reference
            </summary>
            <param name="src">The source storage</param>
            <param name="t">A cell type representative</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Stacks.head``1(Z0.Stacked.MemStack256@,``0)  | 
            <summary>
            Presents the leading source storage cell as a generic reference
            </summary>
            <param name="src">The source storage</param>
            <param name="t">A cell type representative</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Stacks.head``1(Z0.Stacked.MemStack512@,``0)  | 
            <summary>
            Presents the leading source storage cell as a generic reference
            </summary>
            <param name="src">The source storage</param>
            <param name="t">A cell type representative</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Stacks.head``1(Z0.Stacked.MemStack1024@,``0) | 
            <summary>
            Presents the leading source storage cell as a generic reference
            </summary>
            <param name="src">The source storage</param>
            <param name="t">A cell type representative</param>
            <typeparam name="T">The reference type</typeparam>
        
| M:Z0.Stacks.head(Z0.Stacked.CharStack2@)          | 
            <summary>
            Retrieves a reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head(Z0.Stacked.CharStack4@)          | 
            <summary>
            Retrieves a reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head(Z0.Stacked.CharStack8@)          | 
            <summary>
            Retrieves a reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head(Z0.Stacked.CharStack16@)         | 
            <summary>
            Retrieves a reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head(Z0.Stacked.CharStack32@)         | 
            <summary>
            Retrieves a reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head(Z0.Stacked.CharStack64@)         | 
            <summary>
            Retrieves a reference to the leading character storage cell
            </summary>
            <param name="src">The character storage source</param>
        
| M:Z0.Stacks.head32(Z0.Stacked.MemStack32@)        | 
            <summary>
            Presents the leading source storage cell as reference to an unsigned 32-bit integer
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head64(Z0.Stacked.MemStack64@)        | 
            <summary>
            Presents the leading source storage cell as reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head64(Z0.Stacked.MemStack128@)       | 
            <summary>
            Presents the leading source storage cell as reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head64(Z0.Stacked.MemStack256@)       | 
            <summary>
            Presents the leading source storage cell as reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head64(Z0.Stacked.MemStack512@)       | 
            <summary>
            Presents the leading source storage cell as reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head64(Z0.Stacked.MemStack1024@)      | 
            <summary>
            Presents the leading source storage cell as reference to an unsigned 64-bit integer
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack8@)          | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack16@)         | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack32@)         | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack64@)         | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack128@)        | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack256@)        | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack512@)        | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.head8(Z0.Stacked.MemStack1024@)       | 
            <summary>
            Presents the leading source storage cell as a byte reference
            </summary>
            <param name="src">The storage source</param>
        
| M:Z0.Stacks.span``1(Z0.Stacked.MemStack64@,``0)   | 
            <summary>
            Fills a span with data from a stack storage block
            </summary>
            <param name="src">The stack storage source</param>
            <param name="t">A span cell type representative</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.Stacks.span``1(Z0.Stacked.MemStack128@,``0)  | 
            <summary>
            Fills a span with data from a stack storage block
            </summary>
            <param name="src">The stack storage source</param>
            <param name="t">A span cell type representative</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.Stacks.span``1(Z0.Stacked.MemStack256@,``0)  | 
            <summary>
            Fills a span with data from a stack storage block
            </summary>
            <param name="src">The stack storage source</param>
            <param name="t">A span cell type representative</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.Stacks.span``1(Z0.Stacked.MemStack512@,``0)  | 
            <summary>
            Fills a span with data from a stack storage block
            </summary>
            <param name="src">The stack storage source</param>
            <param name="t">A span cell type representative</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.Stacks.span``1(Z0.Stacked.MemStack1024@,``0) | 
            <summary>
            Fills a span with data from a stack storage block
            </summary>
            <param name="src">The stack storage source</param>
            <param name="t">A span cell type representative</param>
            <typeparam name="T">The span cell type</typeparam>
        
| M:Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack64@)| 
            <summary>
            Deposits a specified number reference-identified bytes to a storage target
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of bytes to copy</param>
            <param name="dst">The storage target</param>
        
| M:Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack128@)| 
            <summary>
            Deposits a specified number reference-identified bytes to a storage target
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of bytes to copy</param>
            <param name="dst">The storage target</param>
        
| M:Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack256@)| 
            <summary>
            Deposits a specified number reference-identified bytes to a storage target
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of bytes to copy</param>
            <param name="dst">The storage target</param>
        
| M:Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack512@)| 
            <summary>
            Deposits a specified number reference-identified bytes to a storage target
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of bytes to copy</param>
            <param name="dst">The storage target</param>
        
| M:Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack1024@)| 
            <summary>
            Deposits a specified number reference-identified bytes to a storage target
            </summary>
            <param name="src">The source reference</param>
            <param name="count">The number of bytes to copy</param>
            <param name="dst">The storage target</param>
        
| T:Z0.ByteBlocks.ByteBlock1                        | 
            <summary>
            1 byte of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock2                        | 
            <summary>
            2 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock3                        | 
            <summary>
            3 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock4                        | 
            <summary>
            4 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock5                        | 
            <summary>
            5 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock6                        | 
            <summary>
            6 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock7                        | 
            <summary>
            7 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock8                        | 
            <summary>
            8 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock9                        | 
            <summary>
            9 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock10                       | 
            <summary>
            10 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock11                       | 
            <summary>
            11 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock12                       | 
            <summary>
            12 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock13                       | 
            <summary>
            13 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock14                       | 
            <summary>
            14 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock15                       | 
            <summary>
            15 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock16                       | 
            <summary>
            16 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock32                       | 
            <summary>
            32 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock64                       | 
            <summary>
            64 bytes of storage
            </summary>
        
| T:Z0.ByteBlocks.ByteBlock128                      | 
            <summary>
            127 bytes of storage
            </summary>
        
| M:Z0.SymBits.extract(System.SByte,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.Byte,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.Int16,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.UInt16,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.UInt32,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.Int32,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.UInt64,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.Int64,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.Single,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.extract(System.Double,System.Byte,System.Byte)| 
            <summary>
            Extracts a contiguous range of bits from the source inclusively between two index positions
            </summary>
            <param name="src">The source value</param>
            <param name="k0">The bit position within the source where extraction should begin</param>
            <param name="k1">The bit position within the source where extraction should end</param>
        
| M:Z0.SymBits.vmove8x16(System.Byte@)              | 
            <summary>
            VPMOVZXBW ymm, m128
            16x8u -&gt; 16x16u
            Projects 16 unsigned 8-bit integers onto 16 unsigned 16-bit integers
            </summary>
            <param name="src">The input component source</param>
            <param name="n">The source component count</param>
            <param name="w">The target component width</param>
        
| M:Z0.MemStore.Load(System.Int32)                  | 
            <summary>
            Loads the data tracked by an index-identified memory reference
            </summary>
            <param name="index">The ref index</param>    
        
| M:Z0.ResourceStore.Accessors(System.Type)         | 
            <summary>
            Queries the source type for ByteSpan property getters
            </summary>
            <param name="src">The type to query</param>
        
| M:Z0.ResourceStore.Accessors(System.Collections.Generic.IEnumerable{System.Type})| 
            <summary>
            Queries the source types for ByteSpan property getters
            </summary>
            <param name="src">The types to query</param>
        
| M:Z0.ResourceStore.Accessors(System.Reflection.Assembly)| 
            <summary>
            Queries the source assembly for ByteSpan property getters
            </summary>
            <param name="src">The assembly to query</param>
        
| M:Z0.ResourceStore.Accessors(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})| 
            <summary>
            Queries the source assemblies for ByteSpan property getters
            </summary>
            <param name="src">The assemblies to query</param>
        
| P:Z0.ISymbol`1.Value                              | 
            <summary>
            The symbol value
            </summary>
        
| P:Z0.ISymbol`2.SegWidth                           | 
            <summary>
            The bit-width of a storage cell
            </summary>
        
| P:Z0.ISymbol`2.Cell                               | 
            <summary>
            The symbol value, from storage cell persective
            </summary>
        
| P:Z0.ISymbol`3.SymWidth                           | 
            <summary>
            The bit-width of a symbol
            </summary>
        
| P:Z0.ISymbol`3.Capacity                           | 
            <summary>
            The maximum number of symbols that can be packed into a storage cell
            </summary>
        
| T:Z0.Symbol`1                                     | 
            <summary>
            Defines an S-symbol value
            </summary>
        
| P:Z0.Symbol`1.Value                               | 
            <summary>
            The symbol value
            </summary>
        
| T:Z0.Symbol`2                                     | 
            <summary>
            Defines an S-symbol value covered by a T-storage cell
            </summary>
        
| P:Z0.Symbol`2.Value                               | 
            <summary>
            The symbol value
            </summary>
        
| P:Z0.Symbol`2.Cell                                | 
            <summary>
            The symbol value, from storage cell persective
            </summary>
        
| T:Z0.Symbol`3                                     | 
            <summary>
            Defines an S-symbol value, of bit-width N, covered by a T-storage cell
            </summary>
        
| P:Z0.Symbol`3.Value                               | 
            <summary>
            The symbol value
            </summary>
        
| P:Z0.Symbol`3.Cell                                | 
            <summary>
            The symbol value, from storage cell persective
            </summary>
        
| P:Z0.Symbol`3.SymWidth                            | 
            <summary>
            The bit-width of a symbol
            </summary>
        
| P:Z0.Symbol`3.SegWidth                            | 
            <summary>
            The bit-width of a storage cell
            </summary>
        
| P:Z0.Symbol`3.Capacity                            | 
            <summary>
            The maximum number of symbols that can be packed into a storage cell
            </summary>
        
| P:Z0.SymbolSpec`1.SegWidth                        | 
            <summary>
            The bit-width of a storage cell
            </summary>
        
| P:Z0.SymbolSpec`1.Capacity                        | 
            <summary>
            The maximum number of symbols that can be stored in a segment
            </summary>
        
| T:Z0.SymbolSpec`2                                 | 
            <summary>
            Specifes symbol characteristics
            </summary>
        
| P:Z0.SymbolSpec`2.SymWidth                        | 
            <summary>
            The number of bits occupied by a symbol
            </summary>
        
| P:Z0.SymbolSpec`2.SegWidth                        | 
            <summary>
            The bit-width of a storage cell
            </summary>
        
| P:Z0.SymbolSpec`2.Capacity                        | 
            <summary>
            The maximum number of symbols that can be stored in a segment
            </summary>
        
| T:Z0.SymbolSpec`3                                 | 
            <summary>
            Specifes symbol characteristics
            </summary>
        
| P:Z0.SymbolSpec`3.SymWidth                        | 
            <summary>
            The number of bits occupied by a symbol
            </summary>
        
| P:Z0.SymbolSpec`3.SegWidth                        | 
            <summary>
            The width of the underlying numeric primitive
            </summary>
        
| P:Z0.SymbolSpec`3.Capacity                        | 
            <summary>
            The maximum number of symbols that can be stored in a segment
            </summary>
        
| T:Z0.BitFormatConfig                              | 
            <summary>
            Controls formatting when bitstring content is rendered as text
            </summary>
        
| F:Z0.BitFormatConfig.TrimLeadingZeros             | 
            <summary>
            Indicates whether leading zeros should be trimmed
            </summary>
        
| F:Z0.BitFormatConfig.SpecifierPrefix              | 
            <summary>
            Indicates whether the '0b' prefix should be emitted
            </summary>
        
| F:Z0.BitFormatConfig.MaxBitCount                  | 
            <summary>
            The maximum number of bits to be extracted/formatted from the source
            </summary>
        
| F:Z0.BitFormatConfig.BlockWidth                   | 
            <summary>
            Optional contiguous digit sequence width; if unspecified the bistring will be formatted without blocks
            </summary>
        
| F:Z0.BitFormatConfig.BlockSep                     | 
            <summary>
            The character with which to intersperse blocks; if unspecified, a space will be used
            </summary>
        
| F:Z0.BitFormatConfig.RowWidth                     | 
            <summary>
            The optional row width, applicable when formatting rectangular regions of bits
            </summary>
        
| F:Z0.BitFormatConfig.ZPad                         | 
            <summary>
            The number of leading zeroes to pad
            </summary>
        
| T:Z0.BitFormatter`1                               | 
            <summary>
            Configurable bit data type formatter
            </summary>
        
| M:Z0.Formatters.content``1(Z0.FormatRender{``0})  | 
            <summary>
            Creates a formatter from a rendering function render:T -&gt; string
            </summary>
            <param name="render">A function that produces text from an element value</param>
            <typeparam name="T">The type of element to render</typeparam>
        
| M:Z0.Formatters.content``2(Z0.FormatRender{``0,``1})| 
            <summary>
            Creates a formatter from a rendering function render:T -&gt; string
            </summary>
            <param name="render">A function that produces text from an element value</param>
            <typeparam name="T">The type of element to format</typeparam>
        
| M:Z0.Formatters.title``1(Z0.TitleRender{``0})     | 
            <summary>
            Creates a title formatter from a rendering function render:T -&gt; string
            </summary>
            <param name="render">A function that produces text from an element value</param>
            <typeparam name="T">The type of element to render</typeparam>
        
| M:Z0.Formatters.entitled``1(Z0.ITitleFormatter{``0},Z0.IFormatter{``0})| 
            <summary>
            Creates an entitled formatter that provides formatting, entitling and entitled formatting
            </summary>
            <param name="fContent">The content formatter to use</param>
            <param name="fTitle">The title formatter to use</param>
            <typeparam name="T">The type of element to render</typeparam>
        
| M:Z0.Formatters.entitled``1(Z0.TitleRender{``0},Z0.FormatRender{``0})| 
            <summary>
            Creates an entitled formatter that provides formatting, entitling and entitled formatting
            from a format/title render function pair
            </summary>
            <param name="renderF">The format render function</param>
            <param name="renderT">The title render function</param>
            <typeparam name="T">The type of element to render</typeparam>
        
| T:Z0.Formatters.DefaultFormatter                  | 
            <summary>
            Reifies a formatter via Object.ToString()
            </summary>
        
| T:Z0.TitleFormatter`1                             | 
            <summary>
            Provies a parametric title reification predicated on a render function
            </summary>
        
| T:Z0.FormatterAttribute                           | 
            <summary>
            Applied to a type to specify a non-default formatter
            </summary>
        
| P:Z0.FormatterAttribute.Realization               | 
            <summary>
            Specifies the type that realizes IFormatter and its generic variants if extant
            </summary>
        
| T:Z0.IEntitled`1                                  | 
            <summary>
            Characterizes a content formatter that can also produces titles and titled content
            </summary>
            <typeparam name="T"></typeparam>
        
| T:Z0.ITitleFormatter                              | 
            <summary>
            Characterizes a service that knows how to produce titles for things
            </summary>
        
| T:Z0.ITitleFormatter`1                            | 
            <summary>
            Characterizes a parametric title formatter
            </summary>
        
| F:Z0.HexSpecs.UC                                  | 
            <summary>
            The uppercase hex format code
            </summary>
        
| F:Z0.HexSpecs.LC                                  | 
            <summary>
            The lowercase hex format code
            </summary>
        
| F:Z0.HexSpecs.DataDelimiter                       | 
            <summary>
            The delimiter used to separate hex numbers when rendering a hex data sequence
            </summary>
        
| F:Z0.HexSpecs.HexPad8                             | 
            <summary>
            The maximum number of hex characters required to represent an 8-bit number
            </summary>
        
| F:Z0.HexSpecs.HexPad16                            | 
            <summary>
            The maximum number of hex characters required to represent a 16-bit number
            </summary>
        
| F:Z0.HexSpecs.HexPad32                            | 
            <summary>
            The maximum number of hex characters required to represent a 32-bit number
            </summary>
        
| F:Z0.HexSpecs.HexPad64                            | 
            <summary>
            The maximum number of hex characters required to represent a 64-bit number
            </summary>
        
| F:Z0.HexSpecs.PreSpec                             | 
            <summary>
            Standard hex specifier that leads the numeric content
            </summary>
        
| F:Z0.HexSpecs.PostSpec                            | 
            <summary>
            Standard hex specifier that trails the numeric content
            </summary>
        
| F:Z0.HexSpecs.MinScalarCode                       | 
            <summary>
            The asci code of the '0' digit
            </summary>
        
| F:Z0.HexSpecs.MaxScalarCode                       | 
            <summary>
            The asci code of the '9' digit
            </summary>
        
| F:Z0.HexSpecs.MinCharCodeU                        | 
            <summary>
            The asci code of the 'A' digit
            </summary>
        
| F:Z0.HexSpecs.MaxCharCodeU                        | 
            <summary>
            The asci code of the 'F' digit
            </summary>
        
| F:Z0.HexSpecs.MinCharCodeL                        | 
            <summary>
            The asci code of the 'a' digit
            </summary>
        
| F:Z0.HexSpecs.MaxCharCodeL                        | 
            <summary>
            The asci code of the 'f' digit
            </summary>
        
| P:Z0.HexSpecs.Uppercase                           | 
            <summary>
            Defines the asci character codes for uppercase hex digits 1,2, ..., 9, A, ..., F
            </summary>
        
| P:Z0.HexSpecs.Lowercase                           | 
            <summary>
            Defines the asci character codes for uppercase hex digits 1,2, ..., 9, a, ..., f
            </summary>
        
| M:Z0.HexSpecs.IsScalar(System.Char)               | 
            <summary>
            Determines whether a character corresponds to one of the lower hex codes
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.HexSpecs.IsUpperChar(System.Char)            | 
            <summary>
            Determines whether a character corresponds to one of the uppercase hex code characters
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.HexSpecs.IsLowerChar(System.Char)            | 
            <summary>
            Determines whether a character corresponds to one of the lowercase hex code characters
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.HexSpecs.IsHex(System.Char)                  | 
            <summary>
            Determines whether a character is a hex digit
            </summary>
            <param name="c">The character to test</param>
        
| M:Z0.HexSpecs.CaseSpec(System.Boolean)            | 
            <summary>
            Selects either the uppercase format code 'X' or lowercase format code 'x'
            </summary>
            <param name="upper">True for uppercase, false for lowercase</param>
        
| M:Z0.HexSpecs.ClearSpecs(System.String)           | 
            <summary>
            Removes leading or trailing hex specifiers
            </summary>
            <param name="src">The source string</param>
        
| M:Z0.HexSpecs.Parse(System.Char)                  | 
            <summary>
            Attempts to parse a hex digit
            </summary>
            <param name="c">The source character</param>
        
| M:Z0.MemoryRangeParser.Parse(System.String)       | 
            <summary>
            Attempts to parse an address segment in standard form, [start,end]
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.MemoryRangeParser.ParseOption(System.String) | 
            <summary>
            Attempts to parse an address segment in standard form, [start,end]
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.HexByteParser.Parse(System.Char)             | 
            <summary>
            Parses the Hex digit if possible; otherwise raises an error
            </summary>
            <param name="c">The source character</param>
        
| M:Z0.HexByteParser.ParseData(System.String)       | 
            <summary>
            Parses a space-delimited sequence of hex text
            </summary>
            <param name="src">The space-delimited hex</param>
        
| M:Z0.HexByteParser.ParseByte(System.String)       | 
            <summary>
            Parses a hex byte
            </summary>
            <param name="src">hex text</param>
        
| M:Z0.HexFormat.data``1(``0[])                     | 
            <summary>
            Formats a numeric array as hex data content
            </summary>
            <param name="src">The source data</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.HexFormat.array``1(``0[])                    | 
            <summary>
            Formats a numeric aray as...numeric array content
            </summary>
            <param name="src">The source data</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.HexFormat.data``1(System.ReadOnlySpan{``0})  | 
            <summary>
            Formats a numeric array as hex data
            </summary>
            <param name="src">The source data</param>
            <typeparam name="T">The numeric type</typeparam>
        
| M:Z0.HexFormat.digits``1(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| 
            <summary>
            Formats a sequence of hex characters encoded in a string according to the characteristics of the parametric
            type over which the operation is closed
            </summary>
            <typeparam name="T">The type the source text presumes to render</typeparam>
        
| T:Z0.HexFormatConfig                              | 
            <summary>
            Defines a common set of hex formatting options
            </summary>
        
| F:Z0.HexFormatConfig.ZPad                         | 
            <summary>
            Indicates whether the numeric content should be left-padded with zeros
            </summary>
        
| F:Z0.HexFormatConfig.Specifier                    | 
            <summary>
            Indicates whether a hex specifier, either prefixing or suffixing the numeric content, should be emitted
            </summary>
        
| F:Z0.HexFormatConfig.Uppercase                    | 
            <summary>
            Indicates whether the hex digits 'A',..,'F' should be upper-cased
            </summary>
        
| F:Z0.HexFormatConfig.PreSpec                      | 
            <summary>
            Indicates whether the hex numeric specifier, if emitted, shold prefix the output
            </summary>
        
| F:Z0.HexFormatConfig.CaseFormatChar               | 
            <summary>
            The case format character, either 'X' or 'x'
            </summary>
        
| F:Z0.HexFormatConfig.Delimiter                    | 
            <summary>
            The character with which to intersperse hex number sequences
            </summary>
        
| P:Z0.HexFormatConfig.FormatCode                   | 
            <summary>
            The hex format string as determined by configuration
            </summary>
        
| P:Z0.HexFormatConfig.HexData                      | 
            <summary>
            Specifies the default configuration for hex data emission
            </summary>
        
| P:Z0.HexFormatConfig.ArrayContent                 | 
            <summary>
            The default configuration for array initialization content
            </summary>
        
| M:Z0.HexScalarParser.SystemParse(System.String)   | 
            <summary>
            Attempts to parse a hex string as an unsigned long
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.NumericParser.transposition``1(System.String)| 
            <summary>
            Parses a transposition in canonical form (i j), if possible; otherwise returns the empty transposition
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.NumericParser.create``1                      | 
            <summary>
            Creates a numeric parser
            </summary>
            <typeparam name="T">The numeric type to parse</typeparam>
        
| M:Z0.NumericParser.infallible``1                  | 
            <summary>
            Creates an infallible numeric parser
            </summary>
            <typeparam name="T">The numeric type to parse</typeparam>
        
| M:Z0.NumericParser.parse``1(System.String)        | 
            <summary>
            Attempts to parse the source text as a parametrically-identified type
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.Parsers.from``2(Z0.Parse{``0,``1})           | 
            <summary>
            Defines a parser predicated on a parse function
            </summary>
            <param name="f">The parse function</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="T">The target type</typeparam>
        
| F:Z0.text.Eol                                     | 
            <summary>
            Renders an end-of-line marker
            </summary>
        
| F:Z0.text.blank                                   | 
            <summary>
            The non-null empty string
            </summary>
        
| M:Z0.text.space                                   | 
            <summary>
            Produces a space character 
            </summary>
        
| M:Z0.text.build                                   | 
            <summary>
            Creates a new stringbuilder
            </summary>
        
| M:Z0.text.assign(System.Object,System.Object)     | 
            <summary>
            Creates a string of the form "lhs := rhs"
            </summary>
            <param name="lhs">The left</param>
            <param name="rhs">The right</param>
        
| M:Z0.text.label(System.Object,System.Object)      | 
            <summary>
            Creates a string of the form "name: content"
            </summary>
            <param name="name">The label name</param>
            <param name="content">The labeled content</param>
        
| M:Z0.text.nonempty(System.String)                 | 
            <summary>
            Tests whether the source string is nonempty
            </summary>
            <param name="src">The string to evaluate</param>
        
| M:Z0.text.empty(System.String)                    | 
            <summary>
            Tests whether the source string is empty
            </summary>
            <param name="src">The string to evaluate</param>
        
| M:Z0.text.ifempty(System.String,System.String)    | 
            <summary>
            A string-specific coalescing operation
            </summary>
            <param name="test">The subject string</param>
            <param name="replace">The replacement value if blank</param>
        
| M:Z0.text.denullify(System.String)                | 
            <summary>
            If the test string is null, returns the empty string; otherwise, returns the test string
            </summary>
            <param name="test">The subject string</param>
            <param name="replace">The replacement value if blank</param>
        
| M:Z0.text.slice(System.String,System.Int32)       | 
            <summary>
            Extracts a substring
            </summary>
            <param name="src">The source text</param>
            <param name="startidx">The index of the first character</param>
        
| M:Z0.text.slice(System.String,System.Int32,System.Int32)| 
            <summary>
            Extracts a substring
            </summary>
            <param name="src">The source text</param>
            <param name="startidx">The index of the first character</param>
            <param name="length">The substring length</param>
        
| M:Z0.text.split(System.String,System.Char)        | 
            <summary>
            Splits the string, removing empty entries
            </summary>
            <param name="src">The source text</param>
            <param name="sep">The delimiter</param>
        
| M:Z0.text.replicate(System.Char,System.Int32)     | 
            <summary>
            Creates a stream of replicated characters 
            </summary>
            <param name="src">The character to replicate</param>
            <param name="count">The replication count</param>
        
| M:Z0.text.replicate(System.String,System.Int32)   | 
            <summary>
            Repeats a string a specified number of times
            </summary>
            <param name="src">The text content to replicate</param>
            <param name="count">The number of copies to produce</param>
        
| M:Z0.text.concat(System.Collections.Generic.IEnumerable{System.Object})| 
            <summary>
            Concatenates a sequence of values with no intervening delimiter
            </summary>
            <param name="src">The characters to concatenate</param>
        
| M:Z0.text.concat(System.Collections.Generic.IEnumerable{System.Char})| 
            <summary>
            Concatenates a sequence of characters with no intervening delimiter
            </summary>
            <param name="src">The characters to concatenate</param>
        
| M:Z0.text.format``1(``0)                          | 
            <summary>
            Formats a custom-formattable elements
            </summary>
            <param name="src">The source element</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.text.format``1(System.Collections.Generic.IEnumerable{``0})| 
            <summary>
            Produces a sequence of formatted strings given a sequence of custom-formattable elements
            </summary>
            <param name="src">The source element</param>
            <typeparam name="T">The element type</typeparam>
        
| M:Z0.text.quote(System.String)                    | 
            <summary>
            Produces a quote
            </summary>
        
| M:Z0.text.lspace(System.Object)                   | 
            <summary>
            Prepends a space to the source content
            </summary>
            <param name="content">The source content</param>
        
| M:Z0.text.rspace(System.Object)                   | 
            <summary>
            Appends a space to the source content
            </summary>
            <param name="content">The source content</param>
        
| M:Z0.text.spaced(System.Object)                   | 
            <summary>
            Formats the content with a space on either side
            </summary>
            <param name="content">The source content</param>
        
| M:Z0.text.spaced(System.Collections.Generic.IEnumerable{System.Object})| 
            <summary>
            Separates each item with a space
            </summary>
        
| M:Z0.text.join(System.Char,System.Object[])       | 
            <summary>
            Concatenates a sequence of strings intersprsed by a character delimiter with a space on either side
            </summary>
            <param name="src">The characters to concatenate</param>
        
| M:Z0.text.concat(System.Char,System.Collections.Generic.IEnumerable{System.Object})| 
            <summary>
            Concatenates a sequence of strings intersprsed by a character delimiter with a space on either side
            </summary>
            <param name="src">The characters to concatenate</param>
        
| M:Z0.text.concat(System.String,System.Collections.Generic.IEnumerable{System.Object})| 
            <summary>
            Joins the string representation of a sequence of items interspersed by a separator
            </summary>
            <param name="sep">The value delimiter</param>
            <param name="src">The values to be joined</param>
        
| M:Z0.text.concat(System.Object[])                 | 
            <summary>
            Joins the string representation of a sequence of items with no interspersed separator
            </summary>
            <param name="src">The values to be joined</param>
        
| M:Z0.text.intersperse(System.String,System.Char)  | 
            <summary>
            Creates a new string by weaving a specified character between each character in the source
            </summary>
            <param name="src">The source string</param>
            <param name="c">The character to intersperse</param>
        
| M:Z0.text.intersperse(System.String,System.String)| 
            <summary>
            Creates a new string by weaving a substring between each character in the source
            </summary>
            <param name="src">The source string</param>
            <param name="sep">The value to intersperse</param>
        
| M:Z0.text.apply``2(``0,System.Func{``0,``1})      | 
            <summary>
            Applies a function to a value
            </summary>
            <param name="x">The source value</param>
            <param name="f">The function to apply</param>
            <typeparam name="X">The source value type</typeparam>
            <typeparam name="Y">The output value type</typeparam>
        
| M:Z0.text.embrace(System.String)                  | 
            <summary>
            Encloses text content between left and right braces
            </summary>
            <param name="content">The content to be embraced</param>
        
| M:Z0.text.line(System.String)                     | 
            <summary>
            Produces a line of content
            </summary>
            <param name="content">The line content</param>
        
| M:Z0.text.enquote(System.Object)                  | 
            <summary>
            Encloses the supplied text in quotation marks
            </summary>
            <param name="content">The content to be quoted</param>
        
| M:Z0.text.enclose(System.Object,System.String,System.String)| 
            <summary>
            Encloses text within (possibly distinct) left and right boundaries
            </summary>
            <param name="content">The text to be bounded</param>
            <param name="left">The text on the left</param>
            <param name="right">The text on the right</param>
        
| M:Z0.text.enclose(System.Object,System.String)    | 
            <summary>
            Encloses text within a bounding string
            </summary>
            <param name="content">The text to enclose</param>
            <param name="sep">The left and right boundary</param>
        
| M:Z0.text.enclose(System.Char,System.String)      | 
            <summary>
            Encloses a character within uniform left/right bounding string
            </summary>
            <param name="content">The character to be surrounded by the left and right delimiters</param>
            <param name="sep">The boundary delimiter</param>
        
| M:Z0.text.enclose(System.Char,System.String,System.String)| 
            <summary>
            Encloses a character within (possibly distinct) left and right boundaries
            </summary>
            <param name="content">The character to be bounded</param>
            <param name="left">The text on the left</param>
            <param name="right">The text on the right</param>
        
| M:Z0.text.squote(System.Object)                   | 
            <summary>
            Encloses text between single quote (') characters
            </summary>
            <param name="src">The text to enclose</param>
        
| M:Z0.text.parenthetical(System.Object[])          | 
            <summary>
            Encloses content between '(' and ')' characters
            </summary>
            <param name="content">The items to be enclosed</param>
        
| M:Z0.text.parenthetical(System.Char,System.Object[])| 
            <summary>
            Encloses content between '(' and ')' where items are interspersed with a separator
            </summary>
            <param name="content">The items to be enclosed</param>
        
| M:Z0.text.csv(System.Object,System.Object,System.Object[])| 
            <summary>
            Renders a content array as a comma-separated list of values
            </summary>
            <param name="content">The data to delimit and format</param>
        
| M:Z0.text.line(System.Collections.Generic.IEnumerable{System.Object})| 
            <summary>
            Renders each item from a sequence as list of values, delimited by end-of-line
            </summary>
            <param name="content">The content to enclose</param>
        
| M:Z0.text.enclose(System.Object,System.Char,System.Char)| 
            <summary>
            Encloses text within (possibly distinct) left and right boundaries
            </summary>
            <param name="content">The text to be surrounded by the left and right delimiters</param>
            <param name="left">The left delimiter</param>
            <param name="right">The right delimiter</param>
        
| M:Z0.text.bracket(System.Object)                  | 
            <summary>
            Encloses text between '[' and ']' characters
            </summary>
            <param name="content">The content to enclose</param>
        
| M:Z0.text.fenced(System.String,System.Char,System.Char)| 
            <summary>
            Determines whether the source text is of the form {left:char}{content:string}{right:char},
            ignoring leading/trailing whitespace
            </summary>
            <param name="src">The text to analyze</param>
            <param name="left">The left boundary</param>
            <param name="right">The right boundary</param>
        
| M:Z0.text.indices(System.String,System.Char,System.Char)| 
            <summary>
            Returns the index of the first occurrence of the first character and the first occurrence of the second character
            </summary>
            <param name="src">The source thext</param>
            <param name="first">The first index match</param>
            <param name="second">THe second index match</param>
        
| M:Z0.text.unfence(System.String,System.Char,System.Char)| 
            <summary>
            If fenced with specified left and right characters, extracts the enclosed content; otherwise, returns the content unmolested
            </summary>
            <param name="src">The putative fenced content</param>
        
| M:Z0.text.bracketed(System.String)                | 
            <summary>
            Determines whether the source text is of the form "[{content}]"
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.text.unbracket(System.String)                | 
            <summary>
            If bracketed, extracts the enclosed content; otherwise, returns the empty string
            </summary>
            <param name="src">The source text</param>
        
| M:Z0.text.ltrim(System.String,System.Char[])      | 
            <summary>
            Trims leading characters when matched
            </summary>
            <param name="src">The text to manipulate</param>
            <param name="chars">The leading characters to remove</param>
        
| M:Z0.text.rtrim(System.String,System.Char[])      | 
            <summary>
            Trims trailing characters when matched
            </summary>
            <param name="src">The text to manipulate</param>
            <param name="chars">The leading characters to remove</param>
        
| M:Z0.text.dots(System.Int32)                      | 
            <summary>
            Produces "..." where count has the default value of 3
            </summary>
        
| M:Z0.text.indented(System.String,System.Int32)    | 
            <summary>
            Produces an indented string
            </summary>
            <param name="offset">The left indentation offset </param>
        
| M:Z0.text.spaces(System.Int32)                    | 
            <summary>
            Produces a string containing a specified number of spaces
            </summary>
            <param name="count">The number of spaces the output string should contain</param>
        
| M:Z0.text.remove(System.String,System.String)     | 
            <summary>
            Removes a substring from the subject
            </summary>
        
| M:Z0.text.enquote(System.String)                  | 
            <summary>
            Encloses text in quotation marks if nonempty; otherwirse returns empty
            </summary>
            <param name="src">The text to be quoted</param>
        
| M:Z0.text.segment(System.String,System.Int32,System.Int32)| 
            <summary>
            Returns a substring identified by inclusive indices
            </summary>
            <param name="src"></param>
            <param name="i0">The index of the first character in the substring</param>
            <param name="i1">The index of the last character in the substring</param>
        
| M:Z0.text.format(System.Object,System.Object[])   | 
            <summary>
            Formats and concatenates an arbitrary number of elements
            </summary>
            <param name="rest">The formattables to be rendered and concatenated</param>
        
| M:Z0.text.left(System.String,System.Int32)        | 
            <summary>
            Returns the substring [0,chars-1]
            </summary>
        
| M:Z0.text.stream(System.String,System.Text.Encoding)| 
            <summary>
            Allocates a stream over a string
            </summary>
            <param name="src">The source text</param>
            <param name="encoding">The text encoding</param>
        
| M:Z0.text.list``1(System.ReadOnlySpan{``0},System.Char,System.Int32)| 
            <summary>
            Formats a sequence of formattable things as delimited list
            </summary>
            <param name="src">The source span</param>
            <param name="sep">The delimiter, if specified; otherwise, a system default is chosen</param>
            <param name="offset">The index of the source element at which formatting will begin</param>
            <typeparam name="T">A formattable type</typeparam>
        
| M:Z0.text.list``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Char},System.Int32)| 
            <summary>
            Formats a sequence of formattable things as delimited list
            </summary>
            <param name="src">The source span</param>
            <param name="delimiter">The delimiter, if specified; otherwise, a system default is chosen</param>
            <param name="offset">The index of the source element at which formatting will begin</param>
            <typeparam name="T">A formattable type</typeparam>
        
| T:Z0.Duration                                     | 
            <summary>
            Captures the length of a time period predicated on timer ticks
            </summary>
        
| F:Z0.Duration.Ticks                               | 
            <summary>
            The number of elapsed timer ticks that determines the period length
            </summary>
        
| P:Z0.Duration.Ns                                  | 
            <summary>
            The duration expressed in nanoseconds
            </summary>
        
| P:Z0.Duration.TickCount                           | 
            <summary>
            The duration expressed in timer ticks
            </summary>
        
| P:Z0.Duration.Ms                                  | 
            <summary>
            The duration expressed in milliseconds
            </summary>
        
| T:Z0.SystemCounter                                | 
            <summary>
            A stopwatch-like type in the form of a struct rather than a class
            </summary>
        
| P:Z0.SystemCounter.Elapsed                        | 
            <summary>
            Measures the accumulated duration
            </summary>
        
| M:Z0.SystemCounter.Reset                          | 
            <summary>
            Clears the counter's state
            </summary>
        
| P:Z0.SystemCounter.Count                          | 
            <summary>
            Gets the total number of timer ticks
            </summary>
        
| P:Z0.SystemCounter.Time                           | 
            <summary>
            Gets the elapsed time implied by the tick count
            </summary>
        
| M:Z0.IClocked.counter(System.Boolean)             | 
            <summary>
            Allocates and optionally starts a system counter
            </summary>
        
| M:Z0.IClocked.stopwatch(System.Boolean)           | 
            <summary>
            Creates a new stopwatch and optionally start it
            </summary>
            <param name="start">Whether to start the new stopwatch</param>
        
| M:Z0.IClocked.snapshot(System.Diagnostics.Stopwatch)| 
            <summary>
            Captures a stopwatch duration
            </summary>
            <param name="sw">A running/stopped stopwatch</param>
        
| M:Z0.Time.now                                     | 
            <summary>
            Right now
            </summary>
        
| M:Z0.Time.stopwatch(System.Boolean)               | 
            <summary>
            Creates a new stopwatch and optionally start it
            </summary>
            <param name="start">Whether to start the new stopwatch</param>
        
| M:Z0.Time.counter(System.Boolean)                 | 
            <summary>
            Allocates and optionally starts a system counter
            </summary>
        
| M:Z0.Tuples.constant``1(``0,``0)                  | 
            <summary>
            Creates an immutable homogenous 2-tuple
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Tuples.constant``1(``0,``0,``0)              | 
            <summary>
            Creates an immutable homogenous 2-tuple
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Tuples.constant``1(``0,``0,``0,``0)          | 
            <summary>
            Creates an immutable homogenous 4-tuple
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <param name="c">The third member</param>
            <param name="d">The fourth member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Tuples.pair``1(``0,``0)                      | 
            <summary>
            Creates an homogenous pair
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Tuples.paired``2(``0,``1)                    | 
            <summary>
            Creates a non-homogenous pair
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T0">The first member type</typeparam>
            <typeparam name="T1">The second member type</typeparam>
        
| M:Z0.Tuples.pairs``1(System.Int32)                | 
            <summary>
            Allocates an homogenous pair store
            </summary>
            <param name="count">The store capacity</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Tuples.triple``1(``0,``0,``0)                | 
            <summary>
            Creates an homogenous triple
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <param name="c">The third member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Tuples.tripled``3(``0,``1,``2)               | 
            <summary>
            Creates a non-homogenous triple
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <param name="c">The third member</param>
            <typeparam name="T0">The first member type</typeparam>
            <typeparam name="T1">The second member type</typeparam>
            <typeparam name="T2">The third member type</typeparam>
        
| M:Z0.Tuples.triples``1(System.Int32)              | 
            <summary>
            Allocates an homogenous triplestore
            </summary>
            <param name="count">The store capacity</param>
            <typeparam name="T">The member type</typeparam>
        
| T:Z0.ConstPair                                    | 
            <summary>
            Defines const pair manipulation api
            </summary>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.SByte}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.Byte}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.Int16}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.UInt16}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.Int32}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.UInt32}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.Int64}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.UInt64}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.Single}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| M:Z0.ConstPair.generic``1(Z0.ConstPair{System.Double}@)| 
            <summary>
            Presents a scalar pair as a parametric pair
            </summary>
            <param name="src">The source pair</param>
            <typeparam name="T">The target type</typeparam>
        
| T:Z0.BinaryEval`1                                 | 
            <summary>
            Captures the operands and outcome of binary operator evaluation 
            </summary>
            <typeparam name="T">The evaluation result type</typeparam>
        
| T:Z0.EvalResult                                   | 
            <summary>
            Describes the outcome of a test case
            </summary>
        
| T:Z0.PairEval`1                                   | 
            <summary>
            Captures paired evaluations
            </summary>
            <typeparam name="T">The evaluation result type</typeparam>
        
| T:Z0.UnaryEval`1                                  | 
            <summary>
            Captures the operands and outcome unary pair evaluation
            </summary>
            <typeparam name="T">The evaluation result type</typeparam>
        
| F:Z0.UnaryEval`1.Source                           | 
            <summary>
            The source operand data
            </summary>
        
| F:Z0.UnaryEval`1.Target                           | 
            <summary>
            The evaluation data
            </summary>
        
| P:Z0.UnaryEval`1.Count                            | 
            <summary>
            The evaluated pair count
            </summary>
        
| P:Z0.UnaryEval`1.LeftLabel                        | 
            <summary>
            Designates the left operator
            </summary>
        
| P:Z0.UnaryEval`1.RightLabel                       | 
            <summary>
            Designates the right operator
            </summary>
        
| T:Z0.HashTable                                    | 
            <summary>
            Defines a K-V hashtable manipulation api
            </summary>
        
| M:Z0.HashTable.Create``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})| 
            <summary>
            Creates a hashtable from a dictionary
            </summary>
            <param name="src">The data source</param>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| M:Z0.HashTable.Create(System.Collections.IEnumerable)| 
            <summary>
            Creates a boxed hash table from an enumerable sequence of key-value pairs
            </summary>
            <param name="src">The kvp sequence, hopefully</param>
        
| T:Z0.Interval                                     | 
            <summary>
            Defines interval manipulation api
            </summary>
        
| M:Z0.Interval.open``1(``0,``0)                    | 
            <summary>
            Defines an open interval (min,max)
            </summary>
            <param name="min">The exclusive left endpoint</param>
            <param name="max">The exclusive right endpoint</param>
            <typeparam name="T">The numeric type over which the interval is defined</typeparam>
        
| M:Z0.Interval.closed``1(``0,``0)                  | 
            <summary>
            Defines a closed interval [min,max]
            </summary>
            <param name="min">The inclusive left endpoint</param>
            <param name="max">The inclusive right endpoint</param>
            <typeparam name="T">The numeric type over which the interval is defined</typeparam>
        
| M:Z0.Interval.closedL``1(``0,``0)                 | 
            <summary>
            Constructs the (left-closed | right-open) interval [min,max)
            </summary>
            <param name="min">The inclusive left endpoint</param>
            <param name="max">The exclusive right endpoint</param>
            <typeparam name="T">The underlying type</typeparam>
        
| M:Z0.Interval.closedR``1(``0,``0)                 | 
            <summary>
            Constructs the (left-closed | right-open) interval [min,max)
            </summary>
            <param name="min">The inclusive left endpoint</param>
            <param name="max">The exclusive right endpoint</param>
            <typeparam name="T">The underlying type</typeparam>
        
| M:Z0.Interval.define``1(``0,``0,Z0.IntervalKind)  | 
            <summary>
            Defines an interval of specified sort
            </summary>
            <param name="min">The left endpoint</param>
            <param name="max">The right endpoint</param>
            <param name="kind">The interval kind</param>
            <typeparam name="T"></typeparam>
        
| T:Z0.Bin`1                                        | 
            <summary>
            Represents one or more occurrence of a value within an interval
            </summary>
            <typeparam name="T">The value domain</typeparam>
        
| T:Z0.ConstPair`1                                  | 
            <summary>
            An homogenous immutable 2-tuple
            </summary>
        
| F:Z0.ConstPair`1.Left                             | 
            <summary>
            The first/left/lo member of the pair
            </summary>
        
| F:Z0.ConstPair`1.Right                            | 
            <summary>
            The second/right/hi member of the pair
            </summary>
        
| M:Z0.ConstPair`1.As``1                            | 
            <summary>
            Presents the source T-pair as a U-pair
            </summary>
            <typeparam name="U">The target type</typeparam>
        
| T:Z0.ConstQuad`1                                  | 
            <summary>
            An homogenous immutable 4-tuple
            </summary>
        
| F:Z0.ConstQuad`1.First                            | 
            <summary>
            The first member
            </summary>
        
| F:Z0.ConstQuad`1.Second                           | 
            <summary>
            The second member
            </summary>
        
| F:Z0.ConstQuad`1.Third                            | 
            <summary>
            The third member
            </summary>
        
| F:Z0.ConstQuad`1.Fourth                           | 
            <summary>
            The fourth member
            </summary>
        
| M:Z0.ConstQuad`1.As``1                            | 
            <summary>
            Interprets the pair over an alternate domain
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| T:Z0.ConstTriple`1                                | 
            <summary>
            An homogenous immutable 3-tuple
            </summary>
        
| F:Z0.ConstTriple`1.First                          | 
            <summary>
            The first member
            </summary>
        
| F:Z0.ConstTriple`1.Second                         | 
            <summary>
            The second member
            </summary>
        
| F:Z0.ConstTriple`1.Third                          | 
            <summary>
            The third member
            </summary>
        
| M:Z0.ConstTriple`1.As``1                          | 
            <summary>
            Interprets the pair over an alternate domain
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| T:Z0.HashTable`2                                  | 
            <summary>
            Reifies a K-V parametric hashtable, along with extras
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
        
| P:Z0.HashTable`2.Empty                            | 
            <summary>
            A hashtable that hashes nothing
            </summary>
        
| T:Z0.Interval`1                                   | 
            <summary>
            Defines a contiguous segment of homogenous values that lie within left and right boundaries 
            </summary>
            <remarks>
            Note that models of extended real numbers may also serve as endpoints, enabling representations such as (-∞,3] and (-3, ∞).
            </remarks>
        
| F:Z0.Interval`1.Left                              | 
            <summary>
            The left endpoint
            </summary>
        
| F:Z0.Interval`1.Right                             | 
            <summary>
            The right endpoint
            </summary>
        
| P:Z0.Interval`1.Kind                              | 
            <summary>
            The interval classification
            </summary>
        
| P:Z0.Interval`1.U01                               | 
            <summary>
            Specifies the canonical closed unit interval over the underlying primitive
            </summary>
            <typeparam name="T">The primal type</typeparam>
        
| P:Z0.Interval`1.Full                              | 
            <summary>
            Defines a closed interval that subsumes all points representable by the primal type
            </summary>
        
| P:Z0.Interval`1.Unbound                           | 
            <summary>
            Defines an open interval that subsumes all points representable by the primal type and all points represented 
            by increasing the size of the primal type without altering other characteristics
            </summary>
        
| P:Z0.Interval`1.LeftClosed                        | 
            <summary>
            Specifies whether the interval is left-closed, or equivalently right-open, denoted by [Left,Right),
            </summary>
        
| P:Z0.Interval`1.RightClosed                       | 
            <summary>
            Specifies whether the interval is right-closed, or equivalently left-open, denoted by (Left,Right],
            </summary>
        
| P:Z0.Interval`1.Open                              | 
            <summary>
            Specifies whether the interval is open, denoted by (Left,Right)
            </summary>
        
| P:Z0.Interval`1.Closed                            | 
            <summary>
            Specifies whether the interval is closed, denoted by [Left,Right]
            </summary>
        
| P:Z0.Interval`1.RightOpen                         | 
            <summary>
            Specifies whether the interval is open on the right and closed on the left, denoted by [Left,Right)
            </summary>
        
| P:Z0.Interval`1.LeftOpen                          | 
            <summary>
            Specifies whether the interval is open on the left and closed on the right, denoted by (Left,Right]
            </summary>
        
| P:Z0.Interval`1.LeftUnbounded                     | 
            <summary>
            Specifies whether the interval is unbounded on the left, denoted by (-∞, right).
            </summary>
        
| P:Z0.Interval`1.RightUnbounded                    | 
            <summary>
            Specifies whether the interval is unbounded on the left, denoted by (left, ∞).
            </summary>
        
| P:Z0.Interval`1.Unbounded                         | 
            <summary>
            Specifies whether the interval is unbounded on the left and right, denoted by (-∞, ∞).
            </summary>
        
| P:Z0.Interval`1.Degenerate                        | 
            <summary>
            Specifies whether the left and right enpoints are the same
            </summary>
        
| P:Z0.Interval`1.IsEmpty                           | 
            <summary>
            Specifies whether the interval is the zero interval
            </summary>
        
| P:Z0.Interval`1.Zero                              | 
            <summary>
            Specifies the zero interval
            </summary>
        
| M:Z0.Interval`1.ToOpen                            | 
            <summary>
            Creates an open interval with endpoints from the existing interval
            </summary>
        
| M:Z0.Interval`1.ToLeftOpen                        | 
            <summary>
            Creates a left-open/right-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.Interval`1.ToRightClosed                     | 
            <summary>
            Creates a left-open/right-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.Interval`1.ToRightOpen                       | 
            <summary>
            Creates a left-open/right-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.Interval`1.ToLeftClosed                      | 
            <summary>
            Creates a left-closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.Interval`1.ToClosed                          | 
            <summary>
            Creates a closed interval with endpoints from the existing interval
            </summary>
        
| M:Z0.Interval`1.Convert``1                        | 
            <summary>
            Converts the left and right underlying values
            </summary>
            <typeparam name="U">The target type</typeparam>
        
| M:Z0.Interval`1.As``1                             | 
            <summary>
            Creates a view of the data in the inverval as seen through the
            lens of another type, but performs no conversion
            </summary>
            <typeparam name="U">The target type</typeparam>
        
| P:Z0.Interval`1.Empty                             | 
            <summary>
            The interval of nothingness
            </summary>
        
| T:Z0.Pair`1                                       | 
            <summary>
            An homogenous mutable 2-tuple
            </summary>
        
| F:Z0.Pair`1.Left                                  | 
            <summary>
            The first member
            </summary>
        
| F:Z0.Pair`1.Right                                 | 
            <summary>
            The second member
            </summary>
        
| M:Z0.Pair`1.As``1                                 | 
            <summary>
            Interprets the pair over an alternate domain
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| T:Z0.Triple`1                                     | 
            <summary>
            An homogenous mutable 3-tuple
            </summary>
        
| F:Z0.Triple`1.First                               | 
            <summary>
            The first member
            </summary>
        
| F:Z0.Triple`1.Second                              | 
            <summary>
            The second member
            </summary>
        
| F:Z0.Triple`1.Third                               | 
            <summary>
            The third member
            </summary>
        
| M:Z0.Triple`1.As``1                               | 
            <summary>
            Interprets the pair over an alternate domain
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| T:Z0.Tripled`3                                    | 
            <summary>
            Defines a non-homogenous mutable 3-tuple
            </summary>
            <typeparam name="T0">The type of the first member</typeparam>
            <typeparam name="T1">The type of the second member</typeparam>
            <typeparam name="T2">The type of the third member</typeparam>
        
| F:Z0.Tripled`3.First                              | 
            <summary>
            The first member
            </summary>
        
| F:Z0.Tripled`3.Second                             | 
            <summary>
            The second member
            </summary>
        
| F:Z0.Tripled`3.Third                              | 
            <summary>
            The third member
            </summary>
        
| M:Z0.Tripled`3.As``3                              | 
            <summary>
            Interprets the pair over alternate domains
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| T:Z0.U01`1                                        | 
            <summary>
            Defines a unit interval for a primal type
            </summary>
        
| F:Z0.U01`1.LeftClosed                             | 
            <summary>
            Specifies whether the interval is closed on the left
            </summary>
        
| F:Z0.U01`1.RightClosed                            | 
            <summary>
            Specifies whether the interval is closed on the right
            </summary>
        
| M:Z0.U01`1.Close                                  | 
            <summary>
            Manufactures the interval [0,1]
            </summary>
        
| M:Z0.U01`1.Open                                   | 
            <summary>
            Manufactures the interval (0,1)
            </summary>
        
| T:Z0.Pairs                                        | 
            <summary>
            Defines pair/paired manipulation api
            </summary>
        
| M:Z0.Pairs.pair``1(``0,``0)                       | 
            <summary>
            Creates an homogenous pair
            </summary>
            <param name="left">The left member</param>
            <param name="right">The right member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Pairs.paired``2(``0,``1)                     | 
            <summary>
            Creates a non-homogenous pair
            </summary>
            <param name="left">The left member</param>
            <param name="right">The right member</param>
            <typeparam name="L">The first member type</typeparam>
            <typeparam name="R">The second member type</typeparam>
        
| M:Z0.Pairs.constant``1(``0,``0)                   | 
            <summary>
            Creates an immutable homogenous 2-tuple
            </summary>
            <param name="a">The first member</param>
            <param name="b">The second member</param>
            <typeparam name="T">The member type</typeparam>
        
| M:Z0.Pairs.index``1(Z0.Pair{``0}[])               | 
            <summary>
            Creates a pair index from an array of pairs
            </summary>
            <param name="src">The source pairs</param>
            <typeparam name="T">The paired element type</typeparam>
        
| T:Z0.IPolyrand                                    | 
            <summary>
            Characterizes source capable of producing an interminable sequence of pseudorandom bounded points 
            of any numeric type among: sbyte, byte, short, ushort, int, uint, long, ulong, float, double
            </summary>
        
| P:Z0.IPolyrand.Navigator                          | 
            <summary>
            Retrieves the random stream navigator, if supported
            </summary>
        
| T:Z0.IPolyrandProvider                            | 
            <summary>
            Characterizes a type that provides access to a stateful and parametric-polymorphic 
            pseudorandom number generator
            </summary>
        
| T:Z0.IPolySource                                  | 
            <summary>
            Characterizes a fountain of generic points
            </summary>
        
| M:Z0.IPolySource.Next``1                          | 
            <summary>
            Retrieves the next point from the source, bound only by the domain of the type
            </summary>
            <typeparam name="T">The point type</typeparam>
        
| M:Z0.IPolySource.Next``1(``0)                     | 
            <summary>
            Retrieves the next point from the source, constrained by an upper bounds
            </summary>
            <param name="max">The exclusive max value</param>
            <typeparam name="T">The point type</typeparam>
        
| M:Z0.IPolySource.Next``1(``0,``0)                 | 
            <summary>
            Retrieves the next point from the source, constrained by upper and lower bounds
            </summary>
            <param name="min">The inclusive min value</param>
            <param name="max">The exclusive max value</param>
            <typeparam name="T">The point type</typeparam>
        
| M:Z0.IPolySource.Domain``1                        | 
            <summary>
            Returns the default domain used when producing random points for a parametrically-identifed type
            </summary>
            <typeparam name="T">The point type</typeparam>
        
| M:Z0.IPolySource.Next``1(Z0.Interval{``0})        | 
            <summary>
            Retrieves the next point from the source, bound within a specified interval
            </summary>
            <param name="src">The random source</param>
            <param name="domain">The domain of the random variable</param>
            <typeparam name="T">The point type</typeparam>
        
| P:Z0.ISampleDefaults`1.SampleDomain               | 
            <summary>
            The domain of potential values
            </summary>
        
| T:Z0.Pairs`1                                      | 
            <summary>
            Captures a pair sequence
            </summary>
            <typeparam name="T">The sequence element type</typeparam>
        
| F:Z0.Pairs`1.Data                                 | 
            <summary>
            The captured sequence
            </summary>
        
| M:Z0.Pairs`1.Select(System.Int32)                 | 
            <summary>
            Returns a mutable reference to an index-identified sequence element
            </summary>
            <param name="index">The zero-based sequence index</param>
        
| P:Z0.Pairs`1.Item(System.Int32)                   | 
            <summary>
            Returns a mutable reference to an index-identified sequence element
            </summary>
            <param name="index">The zero-based sequence index</param>
        
| P:Z0.Pairs`1.Count                                | 
            <summary>
            Specifies the number of elements in the sequence
            </summary>
        
| M:Z0.Pairs`1.Enumerate                            | 
            <summary>
            Lifts sequence content into the LINQ monad
            </summary>
        
| M:Z0.NaturalNumericClosures.Define(System.Reflection.MethodInfo,System.Nullable{System.UInt64},System.UInt64,Z0.NumericKind)| 
            <summary>
            Defines an untyped closure over a natural numeric method of sort NxT or MxNxT
            </summary>
            <param name="def">A generic method definition that requires either arguments M, and T 
            in that order or, alternately, M, N and T in that order</param>
            <param name="m">The M-natural kind, if present</param>
            <param name="n">The N-natural kind</param>
            <param name="t">The T-numeric kind</param>
        
| M:Z0.NaturalNumericClosures.Define``1(System.Reflection.MethodInfo,System.Nullable{System.UInt64},System.UInt64)| 
            <summary>
            Defines a T-parametric closure that includes either one or two natural parameter specifications
            </summary>
            <param name="def">A generic method definition that requires either arguments M, and T 
            in that order or, alternately, M, N and T in that order</param>
            <typeparam name="N">An intrinsic natural type</typeparam>
            <typeparam name="T">A numeric type</typeparam>
        
| M:Z0.NaturalNumericClosures.Define``2(System.Reflection.MethodInfo)| 
            <summary>
            Defines a closure pair NxT over a conforming generic method definition
            </summary>
            <param name="def">A generic method definition that requires arguments M, and T, in that order</param>
            <typeparam name="N">An intrinsic natural type</typeparam>
            <typeparam name="T">A numeric type</typeparam>
        
| M:Z0.NaturalNumericClosures.Define``3(System.Reflection.MethodInfo)| 
            <summary>
            Defines a closure triple MxNxT over a conforming generic method definition
            </summary>
            <param name="def">A generic method definition that requires arguments M, N, and T, in that order</param>
            <typeparam name="M">An intrinsic natural type</typeparam>
            <typeparam name="N">An intrinsic natural type</typeparam>
            <typeparam name="T">A numeric type</typeparam>
        
| M:Z0.IInsist.insist(System.Boolean)               | 
            <summary>
            Demands mystery invariant satisfaction
            </summary>
            <param name="invariant">The mystery invariant</param>
        
| M:Z0.IInsist.insist(System.Boolean,System.String) | 
            <summary>
            Demands mystery invariant satisfaction, but with an attendant message 
            that, hopefully, expounds the mystery
            </summary>
            <param name="invariant">The mystery invariant</param>
            <param name="msg">The mystery, expounded, hopefully</param>
        
| M:Z0.IInsist.insist``1(System.UInt64)             | 
            <summary>
            Demands that a numeric value matches the value of parametric type natural
            </summary>
            <param name="src">The numeric source value</param>
            <typeparam name="N">The natural type</typeparam>
        
| M:Z0.IInsist.insist``1(System.Int32)              | 
            <summary>
            Demands that a numeric value matches the value of parametric type natural, because .Net is hooked on int32
            </summary>
            <param name="src">The numeric source value</param>
            <typeparam name="N">The natural type</typeparam>
        
| M:Z0.IInsist.insist``1(``0)                       | 
            <summary>
            Demands that a reference type value is non-null
            </summary>
            <param name="src">The value to test</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.IInsist.insist``1(``0,System.Func{``0,System.Boolean})| 
            <summary>
            Demands that a value satisfies a predicate
            </summary>
            <param name="src">The source value</param>
            <param name="f">The predicate to evaluate over the source</param>
            <typeparam name="T">The source value type</typeparam>
        
| M:Z0.IInsist.insist``1(System.Nullable{``0})      | 
            <summary>
            Demands that a nullable value type value is non-null
            </summary>
            <param name="src">The value to test</param>
            <typeparam name="T">The value type</typeparam>
        
| M:Z0.IInsist.insist``1(Z0.Option{``0})            | 
            <summary>
            Demands that an option has a value
            </summary>
            <param name="src">The potential value</param>
            <typeparam name="T">The value type, should it exist</typeparam>
        
| M:Z0.IInsist.insist``1(``0,``0)                   | 
            <summary>
            Demands operand equality
            </summary>
            <param name="lhs">The left operand</param>
            <param name="lhs">The right operand</param>
            <typeparam name="T">The value type, should it exist</typeparam>
        
| F:Z0.Typed.z8i                                    | 
            <summary>
            The zero-value for an 8-bit signed integer
            </summary>
        
| F:Z0.Typed.z8                                     | 
            <summary>
            The zero-value for an 8-bit usigned integer
            </summary>
        
| F:Z0.Typed.z16i                                   | 
            <summary>
            The zero-value for a 16-bit signed integer
            </summary>
        
| F:Z0.Typed.z16                                    | 
            <summary>
            The zero-value for a 16-bit unsigned integer
            </summary>
        
| F:Z0.Typed.z32i                                   | 
            <summary>
            The zero-value for a 32-bit signed integer
            </summary>
        
| F:Z0.Typed.z32                                    | 
            <summary>
            The zero-value for a 32-bit usigned integer
            </summary>
        
| F:Z0.Typed.z64i                                   | 
            <summary>
            The zero-value for a 64-bit signed integer
            </summary>
        
| F:Z0.Typed.z64                                    | 
            <summary>
            The zero-value for a 64-bit usigned integer
            </summary>
        
| F:Z0.Typed.z32f                                   | 
            <summary>
            The zero-value for a 32-bit float
            </summary>
        
| F:Z0.Typed.z64f                                   | 
            <summary>
            The zero-value for a 64-bit float
            </summary>
        
| M:Z0.Typed.value``1(``0)                          | 
            <summary>
            Returns the numeric value represented by a natural type
            </summary>
            <param name="n">The natural type representativev</param>
            <typeparam name="K">A natural type</typeparam>
        
| M:Z0.NatCalc.add``2(``0,``1)                      | 
            <summary>
            Computes k := k1 + k2
            </summary>
        
| M:Z0.NatCalc.min``2(``0,``1)                      | 
            <summary>
            Computes k := k1 + k2
            </summary>
        
| M:Z0.NatCalc.max``2(``0,``1)                      | 
            <summary>
            Computes k := k1 + k2
            </summary>
        
| M:Z0.NatCalc.or``2(``0,``1)                       | 
            <summary>
            Computes k := k1 | k2
            </summary>
        
| M:Z0.NatCalc.xor``2(``0,``1)                      | 
            <summary>
            Computes k := k1 ^ k2
            </summary>
        
| M:Z0.NatCalc.not``1(``0)                          | 
            <summary>
            Computes k := ~k1
            </summary>
        
| M:Z0.NatCalc.div``2(``0,``1)                      | 
            <summary>
            Computes k := k1 / k2
            </summary>
        
| M:Z0.NatCalc.divprod``3(``0,``1,``2)              | 
            <summary>
            Computes k := (k1*k2) / k3
            </summary>
        
| M:Z0.NatCalc.divT``2(``0,``1)                     | 
            <summary>
            Computes k := value[N] / bitsize[T]
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The bit width type</typeparam>
        
| M:Z0.NatCalc.divT``3(``0,``1,``2)                 | 
            <summary>
            Computes k := (k1 / k2) / bitsize[t]
            </summary>
        
| M:Z0.NatCalc.divceilT``2(``0,``1)                 | 
            <summary>
            Computes the upward-rounded quotient 
            q := natval[N] % bitsize[T] == 0 ? natval[N] / bitsize[T] : (natval[N] / bitsize[T]) + 1
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The width type</typeparam>
        
| M:Z0.NatCalc.eqT``2(``0,``1)                      | 
            <summary>
            Computes the predicate p := natval[N] == bitsize[T]
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The bit width type</typeparam>
        
| M:Z0.NatCalc.gt``2(``0,``1)                       | 
            <summary>
            Computes the predicate p := value[K1] &gt; value[K2]
            </summary>
            <param name="k1">The representative of the first natural</param>
            <param name="k2">The representative of the second natural</param>
            <typeparam name="K1">The first natural type</typeparam>
            <typeparam name="K2">The second natural type</typeparam>
        
| M:Z0.NatCalc.gteq``2(``0,``1)                     | 
            <summary>
            Computes the predicate p := value[K1] &gt;= value[K2]
            </summary>
            <param name="k1">The representative of the first natural</param>
            <param name="k2">The representative of the second natural</param>
            <typeparam name="K1">The first natural type</typeparam>
            <typeparam name="K2">The second natural type</typeparam>
        
| M:Z0.NatCalc.gtT``2(``0,``1)                      | 
            <summary>
            Computes the predicate p := value[N] &gt; bitsize[T]
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The bit width type</typeparam>
        
| M:Z0.NatCalc.gteqT``2(``0,``1)                    | 
            <summary>
            Computes the predicate p := value[N] &gt;= bitsize[T]
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The bit width type</typeparam>
        
| M:Z0.NatCalc.mod``2(``0,``1)                      | 
            <summary>
            Computes k := k1 % k2
            </summary>
        
| M:Z0.NatCalc.modT``2(``0,``1)                     | 
            <summary>
            Computes k := value[N] % bitsize[T]
            </summary>
            <param name="n">The natural representative</param>
            <param name="t">A type representative</param>
            <typeparam name="N">The natural type</typeparam>
            <typeparam name="T">The bit width type</typeparam>
        
| M:Z0.NatCalc.modprod``3(``0,``1,``2)              | 
            <summary>
            Computes k := (k1*k2) % k3
            </summary>
        
| M:Z0.NatCalc.mul``2(``0,``1)                      | 
            <summary>
            Computes k := k1*k2
            </summary>
        
| M:Z0.NatCalc.mul``3(``0,``1,``2)                  | 
            <summary>
            Computes k := k1*k2*k3
            </summary>
        
| M:Z0.NatCalc.even``1(``0)                         | 
            <summary>
            Computes k := k % 2 == 0
            </summary>
        
| M:Z0.NatCalc.odd``1(``0)                          | 
            <summary>
            Computes k := k % 2 != 0
            </summary>
        
| M:Z0.NatCalc.pow2m1``1(``0)                       | 
            <summary>
            Computes k := 2^n - 1
            </summary>
            <param name="n">The power of 2 exponent, between 0 and 64</param>
            <typeparam name="K">The exponent type</typeparam>
        
| M:Z0.NatCalc.pow2``1(``0)                         | 
            <summary>
            Computes k := 2^n
            </summary>
            <param name="n">The power of 2 exponent, between 0 and 63</param>
            <typeparam name="K">The exponent type</typeparam>
        
| M:Z0.NatCalc.square``1(``0)                       | 
            <summary>
            Computes k := k1*k1
            </summary>
        
| M:Z0.NatCalc.srl``2(``0,``1)                      | 
            <summary>
            Computes k := x &gt;&gt; n
            </summary>
        
| M:Z0.NatCalc.sub``2(``0,``1)                      | 
            <summary>
            Computes k := k1 - k2
            </summary>
        
| M:Z0.NatCalc.prodgteq``3(``0,``1,``2)             | 
            <summary>
            Computes b := k1 * k2 &gt;= k3
            </summary>
        
| M:Z0.NatCalc.prodeq``3(``0,``1,``2)               | 
            <summary>
            Computes b := k1 * k2 == k3
            </summary>
        
| M:Z0.Dim.define``2(``0,``1)                       | 
            <summary>
            Constructs an natural dimension of order 2
            </summary>
            <typeparam name="M">The type of the first axis</typeparam>
            <typeparam name="N">The type of the second axis</typeparam>
        
| M:Z0.Dim.define(System.UInt64,System.UInt64)      | 
            <summary>
            Defines a dimension of order 2 
            </summary>
            <param name="i">The length of the first axis</param>
        
| T:Z0.DimInfo                                      | 
            <summary>
            Describes a dimension of any order
            </summary>
        
| F:Z0.DimInfo.Order                                | 
            <summary>
            The number of dimension axes
            </summary>
        
| F:Z0.DimInfo.Axes                                 | 
            <summary>
            The axis index
            </summary>
        
| F:Z0.DimInfo.Volume                               | 
            <summary>
            Specifies the maximum number of cells that may inhabit the associated space
            </summary>
        
| T:Z0.DimK                                         | 
            <summary>
            Defines a dimension with an arbitrary number of axes
            </summary>
        
| T:Z0.Dim2                                         | 
            <summary>
            Defines a rectangular dimension
            </summary>
        
| F:Z0.Dim2.I                                       | 
            <summary>
            The first axis, e.g. the x-axis
            </summary>
        
| F:Z0.Dim2.J                                       | 
            <summary>
            The second axis, e.g. the y-axis
            </summary>
        
| P:Z0.Dim2.Volume                                  | 
            <summary>
            The volume bound by the rectangle defined by the two axes
            </summary>
        
| P:Z0.Dim2.Item(System.Int32)                      | 
            <summary>
            Returns the axis corresponding to its 0-based index
            </summary>
        
| P:Z0.Dim2.Order                                   | 
            <summary>
            The axis count - 2
            </summary>
        
| T:Z0.Dim`2                                        | 
            <summary>
            Defines a rectangular dimension
            </summary>
            <typeparam name="M">The type of the first dimension</typeparam>
            <typeparam name="N">The type of the second dimension</typeparam>
        
| P:Z0.Dim`2.I                                      | 
            <summary>
            Specifies the first component of the dimension
            </summary>
        
| P:Z0.Dim`2.J                                      | 
            <summary>
            Specifies the second component of the dimension
            </summary>
        
| P:Z0.Dim`2.Volume                                 | 
            <summary>
            The volume bound by the rectangle defined by the two axes
            </summary>
        
| P:Z0.Dim`2.Item(System.Int32)                     | 
            <summary>
            Returns the axis corresponding to its 0-based index
            </summary>
        
| P:Z0.Dim`2.Order                                  | 
            <summary>
            The axis count - 2
            </summary>
        
| T:Z0.Dim1                                         | 
            <summary>
            Specifies a dimension with one axis
            </summary>
        
| T:Z0.Dim`1                                        | 
            <summary>
            Defines a dimension axis which may represent the dimension of a vector of length N
            or the dimensions of a square matrix that contains N vectors of dimension N
            </summary>
            <typeparam name="N">The dimension type</typeparam>
        
| P:Z0.Dim`1.I                                      | 
            <summary>
            The one-dimensional axis
            </summary>
        
| T:Z0.IDim                                         | 
            <summary>
            Characterizes a dimension of arbitrary order
            </summary>
        
| P:Z0.IDim.Order                                   | 
            <summary>
            Specifies the number of axes in the dimension
            </summary>
        
| P:Z0.IDim.Volume                                  | 
            <summary>
            Specifies the maximum number of cells that may inhabit the associated space
            </summary>
        
| P:Z0.IDim.Item(System.Int32)                      | 
            <summary>
            Gets the dimension axis determined by its 0-based index, an integer in the interval [0,Order-1]
            </summary>
        
| P:Z0.IDim`2.RowCount                              | 
            <summary>
            Specifies the first component of the dimension
            </summary>
        
| P:Z0.IDim`2.ColCount                              | 
            <summary>
            Specifies the second component of the dimension
            </summary>
        
| T:Z0.Mod                                          | 
            <summary>
            Defines mod/div operations
            </summary>
            <remarks>See https://arxiv.org/pdf/1902.01961.pdf</remarks>
        
| F:Z0.Mod.n                                        | 
            <summary>
            Specifies the divisor for which the modulus was constructed
            </summary>
        
| F:Z0.Mod.stateMax                                 | 
            <summary>
            The maximum state value
            </summary>
        
| M:Z0.Mod.Define``1(``0)                           | 
            <summary>
            Constructs a modulus operator with a persistent type-natural divisor
            </summary>
            <param name="n">The divisor</param>
        
| M:Z0.Mod.Define(System.UInt32,System.UInt32)      | 
            <summary>
            Constructs a modulus operator with a persistent divisor
            </summary>
            <param name="n">The divisor</param>
        
| M:Z0.Mod.op_Increment(Z0.Mod)                     | 
            <summary>
            Increments the source operand in-place
            </summary>
            <param name="src">The source operand</param>
        
| M:Z0.Mod.op_Decrement(Z0.Mod)                     | 
            <summary>
            Decrements the source operand in-place
            </summary>
            <param name="src">The source operand</param>
        
| M:Z0.Mod.mod(System.UInt32)                       | 
            <summary>
            Computes a % n
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.Mod.div(System.UInt32)                       | 
            <summary>
            Computes the quotient a / n
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.Mod.divrem(System.UInt32,System.UInt32@)     | 
            <summary>
            Computes the quotient and remainder
            </summary>
            <param name="a">The dividend</param>
            <param name="rem">The remainder</param>
        
| M:Z0.Mod.divisible(System.UInt32)                 | 
            <summary>
            Computes whether a % n == 0
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.ModOps.mod(System.UInt64,System.UInt64,System.UInt32)| 
            <summary>
            Computes a % N
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.ModOps.div(System.UInt64,System.UInt64,System.UInt32)| 
            <summary>
            Computes the quotient a / N
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.ModOps.divisible(System.UInt64,System.UInt64,System.UInt32)| 
            <summary>
            Computes whether a % n == 0
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.ModOps.add(System.UInt64,System.UInt64,System.UInt32,System.UInt32)| 
            <summary>
            Computes (a + b) mod n
            </summary>
        
| M:Z0.ModOps.mul(System.UInt64,System.UInt64,System.UInt32,System.UInt32)| 
            <summary>
            Computes (a * b) mod n
            </summary>
        
| T:Z0.Mod`1                                        | 
            <summary>
            Represents div/mod operations for a divisor of type N; This type forms a commutative
            ring over the set of least residues {0,...,N-1}, i.e. the ring of integers modulo N,
            typically denoted Z/nZ. Moreover, Z/nZ is a field iff n is prime
            </summary>
        
| P:Z0.Mod`1.M64                                    | 
            <summary>
            The fixed 64-bit modulus for the generic closure
            </summary>
        
| P:Z0.Mod`1.M32                                    | 
            <summary>
            The fixed 32-bit modulus for the generic closure
            </summary>
        
| P:Z0.Mod`1.MR                                     | 
            <summary>
            The fixed modulus reciprocal
            </summary>
        
| M:Z0.Mod`1.Define(System.UInt32)                  | 
            <summary>
            Constructs a modulus with a specified state
            </summary>
            <param name="state">The initial state</param>
        
| M:Z0.Mod`1.op_Implicit(System.UInt32)~Z0.Mod{`0}  | 
            <summary>
            Implicitly constructs a typed modulus with an initial state, reducing as necessary
            </summary>
            <param name="state">The intial state</param>
            <typeparam name="N">The modulus type</typeparam>
        
| M:Z0.Mod`1.op_Implicit(System.Int32)~Z0.Mod{`0}   | 
            <summary>
            Implicitly constructs a modulus with an initial state from a signed integer, converting/reducing as necessary
            </summary>
            <param name="state">The intial state</param>
            <typeparam name="N">The modulus type</typeparam>
        
| M:Z0.Mod`1.op_Implicit(Z0.Mod{`0})~System.UInt32  | 
            <summary>
            Implicitly extracts the state value as an unsigned integer from the source
            </summary>
            <param name="src">The source modulus</param>
        
| M:Z0.Mod`1.op_Implicit(Z0.Mod{`0})~System.Int32   | 
            <summary>
            Implicitly extracts the state value as a signed integer from the source
            </summary>
            <param name="src">The source modulus</param>
        
| M:Z0.Mod`1.op_Increment(Z0.Mod{`0})               | 
            <summary>
            Increments the source operand in-place
            </summary>
            <param name="src">The source operand</param>
        
| M:Z0.Mod`1.op_Decrement(Z0.Mod{`0})               | 
            <summary>
            Decrements the source operand in-place
            </summary>
            <param name="src">The source operand</param>
        
| M:Z0.Mod`1.op_Subtraction(Z0.Mod{`0},Z0.Mod{`0})  | 
            <summary>
            Subtracts the second operand from the first
            </summary>
            <param name="lhs">The left operand</param>
            <param name="rhs">The right operand</param>
        
| M:Z0.Mod`1.mod(System.UInt32)                     | 
            <summary>
            Computes a % n
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.Mod`1.div(System.UInt32)                     | 
            <summary>
            Computes the quotient a / n
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.Mod`1.divrem(System.UInt32,System.UInt32@)   | 
            <summary>
            Computes the quotient a / n and remainder a % n
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.Mod`1.divisible(System.UInt32)               | 
            <summary>
            Computes whether a % n == 0
            </summary>
            <param name="a">The dividend</param>
        
| M:Z0.Mod`1.add(System.UInt64,System.UInt64)       | 
            <summary>
            Computes the modular sum of the operands
            </summary>
            <param name="a">The lefdt operand</param>
            <param name="b">The right operand</param>
        
| M:Z0.Mod`1.sub(System.UInt64,System.UInt64)       | 
            <summary>
            Computes the modular difference of the operands
            </summary>
            <param name="a">The lefdt operand</param>
            <param name="b">The right operand</param>
        
| M:Z0.Mod`1.mul(System.UInt64,System.UInt64)       | 
            <summary>
            Computes the modular product of the operands
            </summary>
            <param name="a">The lefdt operand</param>
            <param name="b">The right operand</param>
            <remarks>Follows the approach of Arndt in Matters Computational, Chapter 39: Modular arithmetic and some number theory</remarks>
        
| M:Z0.Mod`1.inc(System.UInt64)                     | 
            <summary>
             Modular increment
            </summary>
            <param name="a">The source operand</param>
        
| M:Z0.Mod`1.dec(System.UInt64)                     | 
            <summary>
             Modular decrement
            </summary>
            <param name="a">The source operand</param>
        
| P:Z0.Mod`1.State                                  | 
            <summary>
            Returns the current state
            </summary>
        
| P:Z0.Mod`1.StateMax                               | 
            <summary>
            The maximum state value
            </summary>
        
| P:Z0.Mod`1._Mod                                   | 
            <summary>
            The equivalent untyped modulus with nullary state
            </summary>
        
| T:Z0.Digit`2                                      | 
            <summary>
            Defines a generic digit representation realtive to a natural base
            </summary>
            <typeparam name="N">The natural base type</typeparam>
            <typeparam name="T">The digit's primal type</typeparam>
        
| M:Z0.NatTypes.sequence(System.UInt32)             | 
            <summary>
            Computes the generic type definition for a natural sequence
            </summary>
            <param name="length">The sequence length</param>
        
| T:Z0.NatVal                                       | 
            <summary>
            Captures the value of a type natural
            </summary>
        
| T:Z0.N0                                           | 
            <summary>
            The singleton type representative for 0
            </summary>
        
| T:Z0.N1                                           | 
            <summary>
            The singleton type representative for 1
            </summary>
        
| T:Z0.N2                                           | 
            <summary>
            The type that represents 2
            </summary>
        
| T:Z0.N3                                           | 
            <summary>
            The singleton type representative for 3
            </summary>
        
| T:Z0.N4                                           | 
            <summary>
            The singleton type representative for 4
            </summary>
        
| T:Z0.N5                                           | 
            <summary>
            The singleton type representative for 5
            </summary>
        
| T:Z0.N6                                           | 
            <summary>
            The singleton type representative for 6
            </summary>
        
| T:Z0.N7                                           | 
            <summary>
            The singleton type representative for 7
            </summary>
        
| T:Z0.N8                                           | 
            <summary>
            The singleton type representative for 8
            </summary>
        
| T:Z0.N9                                           | 
            <summary>
            The singleton type representative for 9
            </summary>
        
| M:Z0.TypeNats.between(System.UInt64,System.UInt64)| 
            <summary>
            Consructs the canonical sequence representatives for the natural numbers within an inclusive range
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
        
| M:Z0.TypeNats.digits(System.UInt64)               | 
            <summary>
            Creates a squence of prmitive values from a natural value
            </summary>
            <param name="src">The source value</param>
        
| M:Z0.TypeNats.primitives(System.Byte[])           | 
            <summary>
            Constructs an array of types that defines a sequence of natural primitives
            </summary>
            <param name="digits">The digit values where each value is in the range 0..9</param>
        
| M:Z0.TypeNats.seq(System.Byte[])                  | 
            <summary>
            Creates a reflected natural sequence from a sequence of primitive values
            </summary>
            <param name="digits">The source digits</param>
        
| M:Z0.TypeNats.seq``2(``0,``1)                     | 
            <summary>
            Creates a two-term natural sequence {D0, D1} from natural primative types D0 and D1
            that represents the value k = d0*10 + d1
            </summary>
            <param name="d0">The primal representative of the leading term</param>
            <param name="d1">The primal representative of the second term</param>
            <typeparam name="D0">The primitive type of the leading term</typeparam>
            <typeparam name="D1">The primitive type of the second term</typeparam>
        
| M:Z0.TypeNats.seq``3(``0,``1,``2)                 | 
            <summary>
            Creates a three-term natural sequence {D0, D1, D2} from natural primitive types D0, D1, D2
            that represents the value k = d0*10^2 + d1*10^1 + d2
            </summary>
            <param name="d0">The primal representative of the leading term</param>
            <param name="d1">The primal representative of the second term</param>
            <param name="d2">The primal representative of the third term</param>
            <typeparam name="D0">The primitive type of the leading term</typeparam>
            <typeparam name="D1">The primitive type of the second term</typeparam>
            <typeparam name="D2">The primitive type of the third term</typeparam>
        
| M:Z0.TypeNats.seq``4(``0,``1,``2,``3)             | 
            <summary>
            Creates a four-term natural sequence {D0, D1, D2, D3} from natural primitive types D0, D1, D2, D3
            that represents the value k = d0*10^3 + d1*10^2 + d2*10 + d3
            </summary>
            <param name="d0">The primal representative of the leading term</param>
            <param name="d1">The primal representative of the second term</param>
            <param name="d2">The primal representative of the third term</param>
            <param name="d3">The primal representative of the fourth term</param>
            <typeparam name="D0">The primitive type of the leading term</typeparam>
            <typeparam name="D1">The primitive type of the second term</typeparam>
            <typeparam name="D2">The primitive type of the third term</typeparam>
            <typeparam name="D3">The primitive type of the fourth term</typeparam>
        
| M:Z0.TypeNats.seq``5(``0,``1,``2,``3,``4)         | 
            <summary>
            Creates a five-term natural sequence {D0, D1, D2, D3, D4} from natural primitive types D0, D1, D2, D3, D4
            that represents the value k = d0*10^4 + d1*10^3 + d2*10^2 + d3*10 + d4
            </summary>
            <param name="d0">The primal representative of the leading term</param>
            <param name="d1">The primal representative of the second term</param>
            <param name="d2">The primal representative of the third term</param>
            <param name="d3">The primal representative of the fourth term</param>
            <param name="d4">The primal representative of the fifth term</param>
            <typeparam name="D0">The primitive type of the leading term</typeparam>
            <typeparam name="D1">The primitive type of the second term</typeparam>
            <typeparam name="D2">The primitive type of the third term</typeparam>
            <typeparam name="D3">The primitive type of the fourth term</typeparam>
            <typeparam name="D4">The primitive type of the fifth term</typeparam>
        
| M:Z0.TypeNats.seq(System.Byte,System.Byte)        | 
            <summary>
            Creates a reflected two-term natural sequence {d0, d1} from three primitive values d0 and d1
            </summary>
            <param name="d0">The value of the leading term</param>
            <param name="d1">The value of the second term</param>
        
| M:Z0.TypeNats.seq(System.Byte,System.Byte,System.Byte)| 
            <summary>
            Creates a reflected three-term natural sequence {d0, d1, d2} from three primitive values d0, d1, d2
            </summary>
            <param name="d0">The value of the leading term</param>
            <param name="d1">The value of the second term</param>
            <param name="d2">The value of the third term</param>
        
| M:Z0.TypeNats.seq(System.Byte,System.Byte,System.Byte,System.Byte)| 
            <summary>
            Creates a reflected four-term natural sequence from three primitive values
            </summary>
            <param name="d0">The value of the leading term</param>
            <param name="d1">The value of the second term</param>
            <param name="d2">The value of the third term</param>
            <param name="d3">The value of the fourth term</param>
        
| M:Z0.TypeNats.value``1(``0)                       | 
            <summary>
            Reveals the natural number in bijection with a parametric type natural
            </summary>
            <param name="n">The representative, used only for method invocation type inference</param>
            <typeparam name="K">The natural type</typeparam>
        
| M:Z0.TypeNats.digit``2(``1,``0)                   | 
            <summary>
            Defines a digit relative to a natural base
            </summary>
            <param name="src">The source value</param>
            <typeparam name="T">The digit's enumeration type</typeparam>
            <typeparam name="N">The natural base type</typeparam>
        
| M:Z0.TypeNats.nat``1(``0)                         | 
            <summary>
            Constructs a natural representative for a specified parametric type
            </summary>
            <typeparam name="K">The representative type to construct</typeparam>
        
| M:Z0.TypeNats.reflect(System.UInt64)              | 
            <summary>
            Constructs the natural type corresponding to an integral value
            </summary>
            <param name="digits">The source digits</param>
        
| T:Z0.NatSeq0`1                                    | 
            <summary>
            Reifies a one-term natural sequence
            </summary>
            <typeparam name="D0">The type of the first term</typeparam>
        
| T:Z0.NatSeq`2                                     | 
            <summary>
            Reifies a two-term natural sequence that represents the value k := k1*10 + k2
            </summary>
        
| T:Z0.NatSeq`3                                     | 
            <summary>
            Reifies a three-term natural sequence
            </summary>
        
| T:Z0.NatSeq`4                                     | 
            <summary>
            Reifies a four-term natural sequence
            </summary>
        
| T:Z0.NatSeq`5                                     | 
            <summary>
            Reifies a five-term natural sequence
            </summary>
        
| T:Z0.NatSeq`6                                     | 
            <summary>
            Reifies a six-term natural sequence
            </summary>
        
| T:Z0.NatSeq`7                                     | 
            <summary>
            Reifies a seven-term natural sequence
            </summary>
        
| T:Z0.NatSeq`8                                     | 
            <summary>
            Reifies a seven-term natural sequence
            </summary>
        
| T:Z0.NatSeq`9                                     | 
            <summary>
            Reifies a seven-term natural sequence
            </summary>
        
| T:Z0.INatEven`1                                   | 
            <summary>
            Requires k:K =&gt; k % 2 == 0
            </summary>
            <typeparam name="K">An even natural type</typeparam>
        
| T:Z0.INatPow2`1                                   | 
            <summary>
            Characterizes a natural k such that e:E =&gt; k = 2^e
            </summary>
            <typeparam name="B">The base type</typeparam>
            <typeparam name="E">The exponent type</typeparam>
        
| T:Z0.INatSum`2                                    | 
            <summary>
            Requires k := k1 + k2
            </summary>
            <typeparam name="K1">The first operand type</typeparam>
            <typeparam name="K2">The second operand type</typeparam>
        
| T:Z0.Vector1024`1                                 | 
            <summary>
            4x256 / 2x512
            </summary>
        
| F:Z0.Vector1024`1.A                               | 
            <summary>
            The lo 256 bit segment
            </summary>
        
| F:Z0.Vector1024`1.B                               | 
            <summary>
            The second 256-bit segment
            </summary>
        
| F:Z0.Vector1024`1.C                               | 
            <summary>
            The third 256-bit segment
            </summary>
        
| F:Z0.Vector1024`1.D                               | 
            <summary>
            The hi 256-bit segment
            </summary>
        
| P:Z0.Vector1024`1.Count                           | 
            <summary>
            The number of cells covered by the vector
            </summary>
        
| M:Z0.Vector1024`1.As``1                           | 
            <summary>
            Interprets the pair over an alternate domain
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
| F:Z0.Vector512`1.Lo                               | 
            <summary>
            The lo 256 bits 
            </summary>
        
| F:Z0.Vector512`1.Hi                               | 
            <summary>
            The hi 256 bits
            </summary>
        
| P:Z0.Vector512`1.Count                            | 
            <summary>
            The number of cells covered by the vector
            </summary>
        
| M:Z0.Vector512`1.As``1                            | 
            <summary>
            Interprets the pair over an alternate domain
            </summary>
            <typeparam name="U">The alternate type</typeparam>
        
