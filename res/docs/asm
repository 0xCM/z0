| M:Z0.Asm.XTend.FarCalls(Z0.Asm.AsmFunction)       | 
            <summary>
            Selects a (non-distinct) sequence of far addresses that are target by call instructions in the source function
            </summary>
            <param name="src">The source functions</param>
        
| M:Z0.Asm.XTend.FarCalls(Z0.Asm.AsmFunctionList)   | 
            <summary>
            Selects a (non-distinct) sequence of the far addresses targeted by functions in the source
            </summary>
            <param name="src">The source functions</param>
        
| M:Z0.Asm.XTend.FarCalls(Z0.CapturedHost)          | 
            <summary>
            Selects a (non-distinct) sequence of the far addresses targeted by functions in an extract
            </summary>
            <param name="src">The source extract</param>
        
| M:Z0.Asm.XTend.FarCalls(System.Collections.Generic.IEnumerable{Z0.CapturedHost})| 
            <summary>
            Selects a (non-distinct) sequence of the far addresses targeted by functions in an extract
            </summary>
            <param name="src">The source extract</param>
        
| M:Z0.Asm.XTend.BaseAddresses(Z0.CapturedHost)     | 
            <summary>
            Selects base addresses of functions in an extract
            </summary>
            <param name="src">The source extract</param>
        
| M:Z0.Asm.XTend.BaseAddresses(System.Collections.Generic.IEnumerable{Z0.CapturedHost})| 
            <summary>
            Selects function base addresss from an extract stream
            </summary>
            <param name="src">The source extract</param>
        
| T:Z0.Asm.TAsmCore                                 | 
            <summary>
            Defines factory methods that produce context-free services that require no *unsupplied* state to operate 
            </summary>
        
| P:Z0.Asm.TAsmCore.AsmWriterFactory                | 
            <summary>
            Writer factory accessor
            </summary>
        
| P:Z0.Asm.TAsmCore.FunctionBuilder                 | 
            <summary>
            Function Builder service accessor
            </summary>
        
| P:Z0.Asm.TAsmCore.MemoryReader                    | 
            <summary>
            Memory Reader service accessor
            </summary>
        
| P:Z0.Asm.TAsmCore.DefaultFormatter                | 
            <summary>
            Default asm formatter accessor
            </summary>
        
| P:Z0.Asm.TAsmCore.DefaultCilFormatter             | 
            <summary>
            Accessor for default CIL formatter
            </summary>
            <param name="config">The format configuration</param>
        
| M:Z0.Asm.TAsmCore.Formatter(System.Nullable{Z0.Asm.AsmFormatSpec}@)| 
            <summary>
            Creates an asm formatter with an optional configuration
            </summary>
            <param name="config">The format configuration, if any</param>
        
| M:Z0.Asm.TAsmCore.AsmWriter(Z0.FilePath)          | 
            <summary>
            Allocates a caller-disposed asm text writer with the default formatter
            </summary>
            <param name="dst">The target path</param>
        
| M:Z0.Asm.TAsmCore.AsmWriter(Z0.FilePath,Z0.Asm.IAsmFormatter)| 
            <summary>
            Allocates a caller-disposed asm text writer with a specified formatter
            </summary>
            <param name="dst">The target path</param>
            <param name="formatter">The formatter to use</param>
        
| M:Z0.Asm.TAsmCore.AsmWriter(Z0.FilePath,Z0.Asm.AsmFormatSpec@)| 
            <summary>
            Allocates a caller-disposed asm text writer with a customized format configuration
            </summary>
            <param name="config">The format configuration</param>
            <param name="dst">The target path</param>
        
| M:Z0.Asm.TAsmCore.CilFormatter(Z0.CilFormatConfig)| 
            <summary>
            Creates a cil function formatter with an optionally-specified configuration
            </summary>
            <param name="config">The format configuration</param>
        
| M:Z0.Asm.TAsmCore.HostArchiver(Z0.ApiHostUri,Z0.FolderPath)| 
            <summary>
            Creates a host-specific archiver service using the default formatter
            </summary>
            <param name="host">The host uri</param>
            <param name="dst">The archive target</param>
        
| M:Z0.Asm.TAsmCore.HostArchiver(Z0.ApiHostUri,Z0.Asm.IAsmFormatter,Z0.FolderPath)| 
            <summary>
            Creates a host-specific archiver service
            </summary>
            <param name="host">The host uri</param>
            <param name="formatter">The formatter to use</param>
            <param name="dst">The archive target</param>
        
| T:Z0.Asm.AsmArchiveConfig                         | 
            <summary>
            Defines common asm workfow configuration settings
            </summary>
        
| P:Z0.Asm.AsmArchiveConfig.ArchiveRoot             | 
            <summary>
            Specifies the root emisson folder, bwlow which all data will be written
            </summary>
        
| M:Z0.Asm.AsmFormat.label(System.UInt64)           | 
            <summary>
            Formats a line label
            </summary>
            <param name="src">The relative line location</param>
        
| M:Z0.Asm.AsmFormat.lines(Z0.Asm.AsmFunction@,System.Nullable{Z0.Asm.AsmFormatSpec}@)| 
            <summary>
            Formats the instructions in a function
            </summary>
            <param name="src">The source function</param>
            <param name="config">An optional format configuration</param>
        
| M:Z0.Asm.AsmFormat.lines(Z0.Asm.AsmInstructionList@,System.Nullable{Z0.Asm.AsmFormatSpec}@)| 
            <summary>
            Formats a contiguous sequence of instructions defined in an instruction list
            </summary>
            <param name="src">The instruction source</param>
            <param name="config">An optional format configuration</param>
        
| M:Z0.Asm.AsmFormat.header(Z0.LocatedCode,Z0.OpIdentity)| 
            <summary>
            Formats source bits on a single line intended for emission in the function header
            </summary>
            <param name="src">The source bits</param>
        
| M:Z0.Asm.AsmFormat.render(Z0.Asm.AsmFunction,System.Nullable{Z0.Asm.AsmFormatSpec}@)| 
            <summary>
            Formats the assembly function detail
            </summary>
            <param name="src">The source function</param>
            <param name="fmt">The format configuration</param>
        
| M:Z0.Asm.AsmFormat.header(Z0.Asm.AsmFunction,System.Nullable{Z0.Asm.AsmFormatSpec}@)| 
            <summary>
            Formats the function header
            </summary>
            <param name="src">The source function</param>
        
| M:Z0.Asm.AsmFormatter.FormatFunction(Z0.Asm.AsmFunction)| 
            <summary>
            Formats the assembly function detail
            </summary>
            <param name="src">The source function</param>
            <param name="fmt">The format configuration</param>
        
| T:Z0.Asm.AsmMnemonicTrigger                       | 
            <summary>
            Fires when an instruction mnemonic matches a specified mnemonic
            </summary>
        
| F:Z0.Asm.CaptureExchange.TargetBuffer             | 
            <summary>
            The buffer that receives the captured data
            </summary>
        
| F:Z0.Asm.CaptureExchange.Service                  | 
            <summary>
            The juncture-coincident operation set 
            </summary>
        
| M:Z0.Asm.CaptureExchange.Create(Z0.Asm.IAsmContext)| 
            <summary>
            Allocatates buffers and creates an exchange over the allocation
            </summary>
            <param name="context">The source context</param>
        
| M:Z0.Asm.CaptureExchange.Create(Z0.Asm.ICaptureCore,System.Int32)| 
            <summary>
            Allocatates buffers and creates an exchange over the allocation
            </summary>
            <param name="context">The source context</param>
        
| M:Z0.Asm.CaptureExchange.Target(System.Int32)     | 
            <summary>
            Queries and manipulates an index-identified target buffer byte
            </summary>
            <param name="index">The cell index to query/manipulate</param>
        
| M:Z0.Asm.CaptureExchange.Target(System.Int32,System.Int32)| 
            <summary>
            Slices a section of the target buffer
            </summary>
            <param name="start">The start index</param>
            <param name="length">The slice length</param>
        
| P:Z0.Asm.CaptureExchangeProxy.Service             | 
            <summary>
            The juncture-coincident operation set 
            </summary>
        
| P:Z0.Asm.CaptureExchangeProxy.TargetBuffer        | 
            <summary>
            The buffer that receives the captured data
            </summary>
        
| P:Z0.Asm.CaptureExchangeProxy.StateBuffer         | 
            <summary>
            A buffer that tracks state meaningful to the capture workflow
            </summary>
        
| T:Z0.Asm.IAsmContext                              | 
            <summary>
            Defines a nexus of shared state and services for assembly-related services
            </summary>
        
| P:Z0.Asm.IAsmContext.ApiSet                       | 
            <summary>
            The api collection known to the context
            </summary>
        
| P:Z0.Asm.IAsmContext.AsmFormat                    | 
            <summary>
            The default asm formatting configuration
            </summary>
        
| P:Z0.Asm.IAsmContext.Formatter                    | 
            <summary>
            The context formatter
            </summary>
        
| P:Z0.Asm.IAsmContext.Decoder                      | 
            <summary>
            The context decoder
            </summary>
        
| M:Z0.Asm.IAsmContext.Writer(Z0.FilePath)          | 
            <summary>
            The context writer factory
            </summary>
        
| P:Z0.Asm.IAsmContext.CaptureCore                  | 
            <summary>
            The capture service
            </summary>
        
| P:Z0.Asm.IAsmContext.Dynamic                      | 
            <summary>
            Provides access to dynamic operator production facilities
            </summary>
        
| P:Z0.Asm.IAsmContext.ImmServices                  | 
            <summary>
            Provides access to immeditate specialization services
            </summary>
        
| P:Z0.Asm.IAsmContext.Contextual                   | 
            <summary>
            Reveals the context-predicated service factory
            </summary>
        
| P:Z0.Asm.IAsmContext.RootCapturePath              | 
            <summary>
            The capture archive root
            </summary>
        
| P:Z0.Asm.IAsmContext.Hosts                        | 
            <summary>
            The hosts known to the context
            </summary>
        
| P:Z0.Asm.IAsmContext.DefaultBufferLength          | 
            <summary>
            The buffer length to use whenever a buffer length is unspecified
            </summary>
        
| P:Z0.Asm.IAsmContext.RootCaptureArchive           | 
            <summary>
            The primary capture archive, predicated on the context-specified root path
            </summary>
        
| M:Z0.Asm.IAsmContext.CaptureArchive(Z0.FolderName,Z0.FolderName)| 
            <summary>
            A root archive descendant narrowed by area/subject
            </summary>
            <param name="area">Root stratification</param>
            <param name="subject">Area stratification</param>
        
| T:Z0.Asm.IAsmFormatter                            | 
            <summary>
            Defines service contract for asm text formatting support
            </summary>
        
| P:Z0.Asm.IAsmFormatter.Config                     | 
            <summary>
            The configuration used when rendering the formatted text
            </summary>
        
| M:Z0.Asm.IAsmFormatter.FormatFunction(Z0.Asm.AsmFunction)| 
            <summary>
            Creates a detailed presentation of decoded x86 asm data per the accompanying configuration spec
            </summary>
            <param name="src">The function to render as asm text</param>
        
| M:Z0.Asm.IAsmFormatter.FormatInstruction(Z0.MemoryAddress@,Z0.Asm.AsmInstructionSummary@)| 
            <summary>
            Formats a single instruction
            </summary>
            <param name="@base">The base address to which the instruction is relative</param>
            <param name="src">The source instruction</param>
        
| M:Z0.Asm.IAsmFormatter.FormatLines(Z0.Asm.AsmFunction)| 
            <summary>
            Formats the instruction in the source and returns a line for each and every one
            </summary>
            <param name="src">The source function</param>
        
| M:Z0.Asm.IAsmFormatter.FormatLines(Z0.Asm.AsmInstructionList)| 
            <summary>
            Formats the instruction in the source and returns a line for each and every one
            </summary>
            <param name="src">The source function</param>
        
| M:Z0.Asm.IAsmFunctionBuilder.BuildFunction(Z0.OpUri,System.String,Z0.Asm.AsmInstructionBlock)| 
            <summary>
            Builds a function from an instruction block
            </summary>
            <param name="uri">The operation uri</param>
            <param name="src">The instructions that comprise the function</param>
        
| T:Z0.Asm.IAsmFunctionDecoder                      | 
            <summary>
            Characterizes function-centric asm decoding operations
            </summary>
        
| M:Z0.Asm.IAsmFunctionDecoder.Decode(Z0.CapturedCode)| 
            <summary>
            Decodes a function from member capture data
            </summary>
            <param name="src">The source data</param>
        
| M:Z0.Asm.IAsmFunctionDecoder.Decode(Z0.ParsedExtract)| 
            <summary>
            Decodes a fucntion for a parsed extract
            </summary>
            <param name="src">The source data</param>
        
| M:Z0.Asm.IAsmFunctionDecoder.Decode(Z0.LocatedCode)| 
            <summary>
            Decodes an instruction list
            </summary>
            <param name="src">The code source</param>
        
| T:Z0.Asm.ICaptureCore                             | 
            <summary>
            Defines supported x86-encoding capture operations
            </summary>
        
| M:Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,Z0.OpIdentity,System.Reflection.MethodInfo)| 
            <summary>
            Captures jitted x86 encoded assembly for nongeneric methods
            </summary>
            <param name="exchange">The selected exchange</param>
            <param name="id">The identity to confer to the captured member</param>
            <param name="src">The source method</param>
        
| M:Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,System.Reflection.MethodInfo,System.Type[])| 
            <summary>
            Captures jitted x86 encoded assembly for generic or nongeneric methods
            </summary>
            <param name="exchange">The selected exchange</param>
            <param name="src">The source method</param>
            <param name="args">The types over which to close open generic methods, if applicable</param>
            <remarks>
            If the method is open generic, it is closed over supplied type arguments or
            If the method is nongeneric or closed-generic, the method is captured as-is
            </remarks>
        
| M:Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,Z0.OpIdentity,Z0.DynamicDelegate@)| 
            <summary>
            Captures jitted x86 encoded assembly for a dynamic delegate
            </summary>
            <param name="exchange">The selected exchange</param>
            <param name="id">The operation identity to confer</param>
            <param name="src">The dynamic delegate to capture</param>
        
| M:Z0.Asm.ICaptureCore.Capture(Z0.Asm.CaptureExchange@,Z0.OpIdentity,System.Delegate)| 
            <summary>
            Captures jitted x86 encoded assembly for a delegate
            </summary>
            <param name="exchange">The selected exchange</param>
            <param name="id">The operation identity to confer</param>
            <param name="src">The delegate to capture</param>
        
| M:Z0.Asm.ICaptureCore.ParseBuffer(Z0.Asm.CaptureExchange@,Z0.OpIdentity,System.Span{System.Byte})| 
            <summary>
            Captures encoded data from a caller-supplied source buffer.
            </summary>
            <param name="exchange">The selected exchange</param>
            <param name="id">The operation identity to confer</param>
            <param name="src">The source buffer</param>
        
| M:Z0.Asm.ICaptureCore.Capture``1(Z0.Asm.CaptureExchange@,Z0.OpIdentity,Z0.DynamicDelegate{``0})| 
            <summary>
            Captures jitted x86 encoded assembly for a dynamic delegate
            </summary>
            <param name="exchange">The selected exchange</param>
            <param name="id">The operation identity to confer</param>
            <param name="src">The dynamic delegate to capture</param>
        
| P:Z0.Asm.ICaptureExchange.Service                 | 
            <summary>
            The capture service in use
            </summary>
        
| P:Z0.Asm.ICaptureExchange.TargetBuffer            | 
            <summary>
            The buffer that receives the captured data
            </summary>
        
| P:Z0.Asm.ICaptureExchange.StateBuffer             | 
            <summary>
            A buffer that tracks state meaningful to the capture workflow
            </summary>
        
| T:Z0.Asm.ICaptureServiceProxy                     | 
            <summary>
            Exposes capture services without the hassle of passing a ref struct about hither thither and yon
            </summary>
        
| P:Z0.Asm.ICaptureServiceProxy.CaptureExchange     | 
            <summary>
            The capture exchange
            </summary>
        
| P:Z0.Asm.ICaptureServiceProxy.CaptureService      | 
            <summary>
            The exchange service
            </summary>
        
| M:Z0.Asm.ICaptureServiceProxy.Capture(Z0.OpIdentity,System.Reflection.MethodInfo)| 
            <summary>
            Captures jitted x86 encoded assembly for nongeneric methods
            </summary>
            <param name="id">The identity to confer to the captured member</param>
            <param name="src">The source method</param>
        
| M:Z0.Asm.ICaptureServiceProxy.Capture(System.Reflection.MethodInfo,System.Type[])| 
            <summary>
            Captures jitted x86 encoded assembly for generic or nongeneric methods
            </summary>
            <param name="src">The source method</param>
            <param name="args">The types over which to close open generic methods, if applicable</param>
            <remarks>
            If the method is open generic, it is closed over supplied type arguments or
            If the method is nongeneric or closed-generic, the method is captured as-is
            </remarks>
        
| M:Z0.Asm.ICaptureServiceProxy.Capture(Z0.OpIdentity,Z0.DynamicDelegate@)| 
            <summary>
            Captures jitted x86 encoded assembly for a dynamic delegate
            </summary>
            <param name="id">The identity to confer to the captured member</param>
            <param name="src">The dynamic delegate to capture</param>
        
| M:Z0.Asm.ICaptureServiceProxy.Capture(Z0.OpIdentity,System.Delegate)| 
            <summary>
            Captures jitted x86 encoded assembly for a delegate
            </summary>
            <param name="id">The identity to confer to the captured member</param>
            <param name="src">The delegate to capture</param>
        
| M:Z0.Asm.ICaptureServiceProxy.ParseBuffer(Z0.OpIdentity,System.Span{System.Byte})| 
            <summary>
            Captures encoded data from a caller-supplied source buffer.
            </summary>
            <param name="id">The identity to confer to the parsed buffer</param>
            <param name="src">The source buffer</param>
        
| M:Z0.Asm.ICaptureServiceProxy.Capture``1(Z0.OpIdentity,Z0.DynamicDelegate{``0})| 
            <summary>
            Captures jitted x86 encoded assembly for a dynamic delegate
            </summary>
            <param name="id">The identity to confer to the captured member</param>
            <param name="src">The dynamic delegate to capture</param>
        
| M:Z0.Asm.ICaptureServices.MemoryExtractor(System.Byte[])| 
            <summary>
            Creates a service that extracts data that lives in memory using a caller-suppled working buffer
            </summary>
            <param name="buffer">The working buffer</param>
        
| M:Z0.Asm.ICaptureServices.AsmDecoder(System.Nullable{Z0.Asm.AsmFormatSpec}@)| 
            <summary>
            Creates a function decoder
            </summary>
            <param name="context">The source context</param>
            <param name="format">The format configuration</param>
        
| M:Z0.Asm.ICaptureServices.HostExtractor(System.Nullable{System.Int32})| 
            <summary>
            Creates a code extractor with an optionally-specified buffer length
            </summary>
            <param name="bufferlen">The desired buffer length</param>
        
| T:Z0.Asm.IHostArchiver                            | 
            <summary>
            Defines service contract for persisting asm functions which are derived from .net member functions
            </summary>
        
| P:Z0.Asm.IHostArchiver.Owner                      | 
            <summary>
            The .net assembly from which deposited asm originates
            </summary>
        
| P:Z0.Asm.IHostArchiver.Host                       | 
            <summary>
            The api host
            </summary>
        
| P:Z0.Asm.IHostArchiver.ArchiveRoot                | 
            <summary>
            The directory into which the archiver archives
            </summary>
        
| M:Z0.Asm.IHostArchiver.SaveHex(Z0.Asm.AsmFunction[],System.Boolean)| 
            <summary>
            Saves the encoded data contained in an array of dedoded functions
            </summary>
            <param name="src">The source functions</param>
            <param name="append">Whether to append to an existing file or else overwrite</param>
        
| M:Z0.Asm.IHostArchiver.SaveAsm(Z0.Asm.AsmFunction[],System.Boolean)| 
            <summary>
            Saves an array of functions as formatted asm
            </summary>
            <param name="src">The source functions</param>
            <param name="append">Whether to append to an existing file or else overwrite</param>
        
| M:Z0.Asm.IHostArchiver.SaveAsmImm(Z0.OpIdentity,Z0.Asm.AsmFunction[],System.Boolean)| 
            <summary>
            Saves an array of functions as formatted asm
            </summary>
            <param name="src">The source functions</param>
            <param name="append">Whether to append to an existing file or else overwrite</param>
        
| M:Z0.Asm.IHostArchiver.SaveHexImm(Z0.OpIdentity,Z0.Asm.AsmFunction[],System.Boolean)| 
            <summary>
            Saves the encoded data contained in an array of dedoded functions
            </summary>
            <param name="src">The source functions</param>
            <param name="append">Whether to append to an existing file or else overwrite</param>
        
| T:Z0.Asm.IHostCaptureService                      | 
            <summary>
            Characterizes host-centric capture service operations
            </summary>
        
| T:Z0.CapturedHost                                 | 
            <summary>
            Aggregates artifacts from a host capture workflow
            </summary>
        
