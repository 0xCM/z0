Type        | Z0.IAddressable                                                       | Characterizes an address-identified target
Property    | Z0.MemoryAddress.MinWidth                                             | Computes the bit-width of the smallest numeric type that can represent the address
Property    | Z0.MemoryOffset.OffsetAddress                                         | The offset magnitude presented as an address
Property    | Z0.MemoryOffset.Absolute                                              | The absolute address
Type        | Z0.MemoryRange                                                        | Defines an inclusive address range
Type        | Z0.OffsetSeq                                                          | Pairs a sequence number with a short memory offset
Type        | Z0.OpAddress                                                          | Pairs a located operation with, well, its location
Type        | Z0.TextResource                                                       | Describes/models a literal text resource
Property    | Z0.TextResource.Identifier                                            | The resource identifier
Property    | Z0.TextResource.Location                                              | The resource address
Property    | Z0.TextResource.Content                                               | The resource value extracted from the accompanying location
Type        | Z0.TextResource`1                                                     | Describes/models a literal text resource with an enum-predicated identity
Property    | Z0.TextResource`1.Identifier                                          | The resource identifier
Property    | Z0.TextResource`1.Location                                            | The resource address
Property    | Z0.TextResource`1.Content                                             | The resource value extracted from the accompanying location
Method      | Z0.AgentX.Agent(Z0.IAgentContext,Z0.AgentIdentity)                    | Searches a context for an active agent wth a specified identity
Type        | Z0.AgentContext                                                       | Defines a shared context for a set of agents
Type        | Z0.SystemAgent                                                        | Defines base system agent abstraction
Property    | Z0.SystemAgent.ServerId                                               | Identifies the server to which the agent belongs
Property    | Z0.SystemAgent.AgentId                                                | Identifies the agent relative to the server
Property    | Z0.SystemAgent.State                                                  | Specifies the current agent status
Method      | Z0.SystemAgent.Terminate                                              | Terminates the agent,releasing any captured resources
Method      | Z0.SystemAgent.Configure(System.Object)                               | Configures the agent prior to a run
Method      | Z0.SystemAgent.Start                                                  | Starts the agent from a running state
Method      | Z0.SystemAgent.Stop                                                   | Starts the agent from a stopped state
Method      | Z0.SystemAgent.Dispose                                                | Terminates the agent
Method      | Z0.SystemAgent.OnStart                                                | May be specialized to perform service-specific initialization/precondition operations
Method      | Z0.SystemAgent.OnTerminate                                            | May be specialized to perform service-specific cleanup/postcondition operations
Method      | Z0.CpuCoreWorker.Start``1(Z0.IContext,System.UInt32,System.Func{``0,``0},``0,System.TimeSpan,System.Nullable{System.UInt64})| Creates and starts a worker
Type        | Z0.CpuCoreWorker`1                                                    | Embodies an asynchrounous thread of execution that is assigned to a specific CPU core
Method      | Z0.CpuCoreWorker`1.thread(System.UInt32)                              | Searches for a thread given an OS-assigned id, not the useless clr id
Method      | Z0.CpuCoreWorker`1.RunCycle                                           | Executes a single work cycle
Type        | Z0.EnvVar                                                             | Defines a nonparametric environment variable
Property    | Z0.EnvVar.Name                                                        | The environment variable name
Property    | Z0.EnvVar.Value                                                       | The environment variable value
Type        | Z0.EnvVar`1                                                           | Defines a value-parametric environment variable
Method      | Z0.XTend.WithPropertyType``1(System.Reflection.PropertyInfo[])        | Selects the properties from a property data array of a parametric type
Method      | Z0.XTend.Values``1(Z0.ClrProperty{``0}[],System.Object)               | Gets the property values
Method      | Z0.XTend.To(Z0.NumericKind,System.Object)                             | Convers a source value, which is hopefully a supported kind, to a target kind
Method      | Z0.XTend.WhereSome``1(System.Collections.Generic.IEnumerable{``0})    | Filters zero-valued elements from the source stream
Method      | Z0.XTend.WhereSome``1(``0[])                                          | Filters zero-valued elements from the source array
Method      | Z0.XTend.FileHost(Z0.FileName)                                        | Determines the api host that owns the file, if any
Method      | Z0.XTend.FileHost(Z0.FilePath)                                        | Determines the api host that owns the file, if any
Method      | Z0.XTend.ReadText(Z0.FilePath)                                        | Reads the full content of a text file
Method      | Z0.XTend.ReadLines(Z0.FilePath)                                       | Reads the line-partitioned content of a text file
Method      | Z0.XTend.ReadBytes(Z0.FilePath)                                       | Reads the full content of a file into a byte array
Method      | Z0.XTend.Delete(Z0.FilePath)                                          | Deletes the file if it exists
Method      | Z0.XTend.Reader(Z0.FilePath)                                          | Creates a reader initialized with the source file; caller-disposal required
Method      | Z0.XTend.Writer(Z0.FilePath)                                          | Creates an overwriting and caller-disposed stream writer that targets a specified path
Method      | Z0.XTend.Subscribe``1(``0,Z0.IEventBroker,System.Action{``0})         | Registers an event receiver to which brokered events will be relayed
Method      | Z0.XTend.IsSymbol(Z0.Perm4L)                                          | Determines whether a permutation literal is a symbol
Method      | Z0.XTend.IsSymbol(Z0.Perm8L)                                          | Determines whether a permutation literal is a symbol
Method      | Z0.XTend.IsSymbol(Z0.Perm16L)                                         | Determines whether a permutation literal is a symbol
Method      | Z0.XTend.Report(System.Exception)                                     | Emits an exception to the error output stream
Method      | Z0.XTend.Field(System.Type,System.String)                             | Attempts to retrieve a name-identified field from a type
Method      | Z0.XTend.GenericDefinition(System.Type)                               | For a generic type or reference to a generic type, retrieves the generic type definition; otherwise, returns none
Method      | Z0.XTend.All``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| Determines whether all of the elements of a source span satisfy a supplied predicate
Method      | Z0.XTend.Any``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| Determines whether any elements of a span satisfy a supplied predicate
Method      | Z0.XTend.Any``1(System.Span{``0},System.Func{``0,System.Boolean})     | Determines whether any elements of a span satisfy a supplied predicate
Method      | Z0.XTend.count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| Counts the number of values in the source that satisfy the predicate
Method      | Z0.XTend.Count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| Counts the number of values in the source that satisfy the predicate
Method      | Z0.XTend.Count``1(System.Span{``0},System.Func{``0,System.Boolean})   | Counts the number of values in the source that satisfy the predicate
Method      | Z0.XTend.First``1(System.Span{``0})                                   | Returns a reference to the first element of a nonempty span
Method      | Z0.XTend.Last``1(System.Span{``0})                                    | Returns a reference to the last element of a nonempty span
Method      | Z0.XTend.Intersperse``1(System.ReadOnlySpan{``0},``0)                 | Creates a new span by interposing a specified element between each element of an existing span
Method      | Z0.XTend.Intersperse``1(System.Span{``0},``0)                         | Creates a new span by interposing a specified element between each element of an existing span
Method      | Z0.XTend.Map``2(System.ReadOnlySpan{``0},System.Func{``0,``1})        | Projects a source span to target span via a supplied transformation
Method      | Z0.XTend.Map``2(System.Span{``0},System.Func{``0,``1})                | Projects a source span to target span
Method      | Z0.XTend.MapRange``2(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Func{``0,``1})| Projects a range of elements from a source span to a target span
Method      | Z0.XTend.MapRange``2(System.Span{``0},System.Int32,System.Int32,System.Func{``0,``1})| Projects a range of elements from a source span to a target span
Method      | Z0.XTend.MapArray``2(System.ReadOnlySpan{``0},System.Func{``0,``1})   | Projects a source span to target span via a supplied transformation
Method      | Z0.XTend.Replicate``1(System.ReadOnlySpan{``0})                       | Clones the source span into a new span
Method      | Z0.XTend.Replicate``1(System.Span{``0})                               | Clones the source span into a new span
Method      | Z0.XTend.Reverse``1(System.ReadOnlySpan{``0})                         | Produces a reversed span from a readonly span
Method      | Z0.XTend.Swap``1(System.Span{``0},System.Int32,System.Int32)          | Interchanges span elements i and j
Method      | Z0.XTend.ToDictionary``1(System.ReadOnlySpan{``0})                    | Creates a dictionary from a span using the element indices as keys
Method      | Z0.XTend.ToDictionary``1(System.Span{``0})                            | Creates a dictionary from a span using the element indices as keys
Method      | Z0.XTend.ValuesEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})| Evaluates whether two spans have identical content
Method      | Z0.XTend.ValuesEqual``1(System.Span{``0},System.ReadOnlySpan{``0})    | Evaluates whether two spans have identical content
Method      | Z0.XTend.LeftOf(System.String,System.Int32)                           | Gets the string to the left of, but not including, a specified index
Method      | Z0.XTend.LeftOf(System.String,System.Char)                            | Gets the string to the left of, but not including, the first instance of a specified character
Method      | Z0.XTend.LeftOf(System.String,System.String)                          | Gets the string to the left of, but not including, a specified substring
Method      | Z0.XTend.OnSome(System.String,System.Action{System.String})           | Invokes an action if the source string is nonempty
Method      | Z0.XTend.Remove(System.String,System.String)                          | Removes a substring from the source string if it exists
Method      | Z0.XTend.RemoveAny(System.String,System.Collections.Generic.IEnumerable{System.Char})| Erases a specified set of character occurrences in a string
Method      | Z0.XTend.RemoveAny(System.String,System.Char[])                       | Erases a specified set of character occurrences in a string
Method      | Z0.XTend.RemoveSubstring(System.Collections.Generic.IEnumerable{System.String},System.String)| Removes all occurences of a substring from the source strings where extant
Method      | Z0.XTend.RemoveLast(System.String)                                    | Creates a new string from the first n - 1 characters of a string of length n
Method      | Z0.XTend.RemoveBlanks(System.String)                                  | Removes whitespace characters from a string
Method      | Z0.XTend.Map``2(System.Nullable{``0},System.Func{``0,``1})            | Projects a source value, if non-null, onto a target value; otherwise, returns the target's default value
Method      | Z0.XTend.Map``2(System.Nullable{``0},System.Func{``0,``1},System.Func{``1})| Projects a source value, if non-null, onto a target value; otherwise, returns value raised by a caller-supplied emitter
Method      | Z0.XTend.AppendTo``1(``0[],``0[])                                     | Concatenates two arrays
Method      | Z0.XTend.Clear``1(``0[])                                              | Fills an array with the element type's default value
Method      | Z0.XTend.CopyTo``1(System.Collections.Generic.IReadOnlyList{``0},``0[])| Copies a source list to a target array
Method      | Z0.XTend.Fill``1(``0[],``0)                                           | Fills an array, in-place, with a specified value
Method      | Z0.XTend.FirstIndexOf``1(``0[],``0)                                   | Returns the index of the first value that matches a specified value, if any. Otherwise, returns -1
Method      | Z0.XTend.Replicate``1(``0[])                                          | Allocates an populates a new array that is identical to the source array
Method      | Z0.XTend.Slice``1(``0[],System.Int32,System.Int32)                    | Creates a new array from a (contiguous) subset of an existing array
Method      | Z0.XTend.Clear(Z0.IBufferToken)                                       | Zero-fills a token-identified buffer
Method      | Z0.XTend.Content``1(Z0.IBufferToken)                                  | Covers a token-identified buffer with a span
Method      | Z0.XTend.Fill``1(Z0.IBufferToken,System.ReadOnlySpan{``0})            | Fills a token-identified buffer with data from a source span and returns the target memory to the caller as a span
Method      | Z0.XTend.Fill``1(Z0.IBufferToken,``0[])                               | Fills a token-identified buffer with data from an array and returns the target memory to the caller as a span
Method      | Z0.XTend.FormatTable``1(System.Span{``0},System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char})| Formats a span as a table
Method      | Z0.XTend.Replicate``2(Z0.NatSpan{``0,``1}@)                           | Clones a natural span
Method      | Z0.XTend.StreamTo``3(System.Collections.Generic.IEnumerable{``2},Z0.TableSpan{``0,``1,``2}@)| Fills a tabular span of natural dimensions with streamed elements
Method      | Z0.XTend.TakeArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| Constructs an array of specified length from a stream
Method      | Z0.XTend.TakeArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)| Constructs an array from a specified number of elmements from a source stream after a skip
Method      | Z0.XTend.TakeMemory``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| Constructs a memory segment of specified length from a stream (allocating)
Method      | Z0.XTend.TakeReadOnlyMemory``1(System.Collections.Generic.IEnumerable{``0},System.Int32)| Constructs a memory segment of specified length from a stream (allocating)
Method      | Z0.XTend.TakeMemory``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)| Constructs an array from a specified number of elmements from a source stream after a skip (allocating)
Method      | Z0.XTend.ToMemory``1(System.Collections.Generic.IEnumerable{``0})     | Constructs a memory segment from the content of the (hopefully finite) stream (allocating)
Method      | Z0.XTend.ToReadOnlyMemory``1(System.Collections.Generic.IEnumerable{``0})| Constructs a memory segment from the content of the (hopefully finite) stream (allocating)
Method      | Z0.XTend.ToEnumerable``1(System.ReadOnlySpan{``0})                    | Lifts span content into the LINQ monad
Method      | Z0.XTend.ToEnumerable``1(System.Span{``0})                            | Lifts span content into the LINQ monad
Method      | Z0.XTend.ToSet``1(System.Span{``0})                                   | Constructs a hash set from span content
Method      | Z0.XTend.ToSet``1(System.ReadOnlySpan{``0})                           | Constructs a hash set from span content
Method      | Z0.XTend.ToSet``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})  | Constructs a hash set from span content
Method      | Z0.XTend.ToSet``1(System.Span{``0},System.ReadOnlySpan{``0})          | Constructs a hash set from span content
Method      | Z0.XTend.FormatAsVector``1(System.ReadOnlySpan{``0},System.Char)      | Formats a readonly span as a vector
Method      | Z0.XTend.FormatAsVector``1(System.Span{``0},System.Char)              | Formats a span as a vector
Method      | Z0.XTend.FormatCellBlocks``1(System.ReadOnlySpan{``0},System.Nullable{System.Int32},System.Nullable{System.Char},System.Boolean)| Formats a span as [c0   c1 ...  cm]  where m = length - 1
Method      | Z0.XTend.FormatCellBlocks``1(System.Span{``0},System.Nullable{System.Int32},System.Nullable{System.Char},System.Boolean)| Formats a span as [c0   c1 ...  cm]  where m = length - 1
Method      | Z0.XTend.FormatLines``1(System.ReadOnlySpan{``0})                     | Formats each source element on a new line
Method      | Z0.XTend.FormatLines``1(System.Span{``0})                             | Formats each source element on a new line
Method      | Z0.XTend.FormatList(System.Collections.Generic.IEnumerable{System.Object},System.Char)| Formats a sequence of objects as a delimited list
Method      | Z0.XTend.FormatHex(System.SByte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Renders a number as a hexadecimal string
Method      | Z0.XTend.FormatHex(System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.FormatHex(System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.SByte,System.Boolean)                       | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.Byte,System.Boolean)                        | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.Int16,System.Boolean)                       | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.UInt16,System.Boolean)                      | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.Int32,System.Boolean)                       | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.UInt32,System.Boolean)                      | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.Int64,System.Boolean)                       | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.HexDigits(System.UInt64,System.Boolean)                      | Formats a scalar value as a sequence of hex digits
Method      | Z0.XTend.FormatHex``1(System.ReadOnlySpan{``0},System.Char,System.Boolean)| Formats a span pf presumed integral values as a sequence of hex values
Method      | Z0.XTend.FormatHex``1(System.Span{``0},System.Char,System.Boolean)    | Formats a span of numeric cell type as a sequence of hex values
Method      | Z0.XTend.FormatHex``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.Boolean)| Formats a (hopefully finite) stream of values (hopefully numeric) as a sequence of hex values
Method      | Z0.XTend.IsTypeNat(System.Type)                                       | Determines whether a type encodes a natural number
Method      | Z0.XTend.NatValue(System.Type)                                        | For a type that encodes a natural number, returns the corresponding value; otherwise, returns none
Method      | Z0.XTend.TypeNatural(System.Type)                                     | Returns the type's natural reification if it exists; otherwise, returns the 0 reification
Type        | Z0.CilFunction                                                        | Adheres a set of IL instructions with the source method
Type        | Z0.ICilFunctionWriter                                                 | Defines service contract for persistent emission of cil functions that accompany asm functions
Property    | Z0.ICilFunctionWriter.Target                                          | The writer's destintation path
Type        | Z0.CilSpecs.Code                                                      | A CIL opcode. If the high byte is 0 or if it's <see cref="F:Z0.CilSpecs.Code.UNKNOWN1" />, it's a 1-byte opcode,            else it's a two-byte opcode and the highest byte is the first byte of the opcode.
Type        | Z0.CilSpecs.FlowControl                                               | CIL opcode flow control
Field       | Z0.CilSpecs.FlowControl.Branch                                        | 
Field       | Z0.CilSpecs.FlowControl.Break                                         | 
Field       | Z0.CilSpecs.FlowControl.Call                                          | 
Field       | Z0.CilSpecs.FlowControl.Cond_Branch                                   | 
Field       | Z0.CilSpecs.FlowControl.Meta                                          | 
Field       | Z0.CilSpecs.FlowControl.Next                                          | 
Field       | Z0.CilSpecs.FlowControl.Phi                                           | 
Field       | Z0.CilSpecs.FlowControl.Return                                        | 
Field       | Z0.CilSpecs.FlowControl.Throw                                         | 
Type        | Z0.CilSpecs.Instruction                                               | A CIL instruction (opcode + operand)
Field       | Z0.CilSpecs.Instruction.OpCode                                        | The opcode
Field       | Z0.CilSpecs.Instruction.Operand                                       | The opcode operand
Field       | Z0.CilSpecs.Instruction.Offset                                        | Offset of the instruction in the method body
Method      | Z0.CilSpecs.Instruction.#ctor(Z0.CilSpecs.OpCode)                     | Constructor
Method      | Z0.CilSpecs.Instruction.#ctor(Z0.CilSpecs.OpCode,System.Object)       | Constructor
Method      | Z0.CilSpecs.Instruction.Clone                                         | Clone this instance. The <see cref="F:Z0.CilSpecs.Instruction.Operand" /> and <see cref="!:SequencePoint" /> fields            are shared by this instance and the created instance.
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode)                    | Creates a new instruction with no operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Byte)        | Creates a new instruction with a <see cref="T:System.Byte" /> operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.SByte)       | Creates a new instruction with a <see cref="T:System.SByte" /> operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Int32)       | Creates a new instruction with an <see cref="T:System.Int32" /> operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Int64)       | Creates a new instruction with a <see cref="T:System.Int64" /> operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Single)      | Creates a new instruction with a <see cref="T:System.Single" /> operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Double)      | Creates a new instruction with a <see cref="T:System.Double" /> operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.String)      | Creates a new instruction with a string operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,Z0.CilSpecs.Instruction)| Creates a new instruction with an instruction target operand
Method      | Z0.CilSpecs.Instruction.Create(Z0.CilSpecs.OpCode,System.Collections.Generic.IList{Z0.CilSpecs.Instruction})| Creates a new instruction with an instruction target list operand
Method      | Z0.CilSpecs.Instruction.CreateLdcI4(System.Int32)                     | Creates a <c>ldci4</c> instruction
Method      | Z0.CilSpecs.Instruction.GetSize                                       | Gets the size in bytes of the instruction
Method      | Z0.CilSpecs.Instruction.IsLeave                                       | Checks whether it's one of the <c>leave</c> instructions
Method      | Z0.CilSpecs.Instruction.IsBr                                          | Checks whether it's one of the <c>br</c> instructions
Method      | Z0.CilSpecs.Instruction.IsBrfalse                                     | Checks whether it's one of the <c>brfalse</c> instructions
Method      | Z0.CilSpecs.Instruction.IsBrtrue                                      | Checks whether it's one of the <c>brtrue</c> instructions
Method      | Z0.CilSpecs.Instruction.IsConditionalBranch                           | Checks whether it's one of the conditional branch instructions (bcc, brtrue, brfalse)
Method      | Z0.CilSpecs.Instruction.IsLdcI4                                       | Checks whether this is one of the <c>ldc.i4</c> instructions
Method      | Z0.CilSpecs.Instruction.GetLdcI4Value                                 | Returns a <c>ldc.i4</c> instruction's operand
Method      | Z0.CilSpecs.Instruction.IsLdarg                                       | Checks whether it's one of the <c>ldarg</c> instructions, but does <c>not</c> check            whether it's one of the <c>ldarga</c> instructions.
Method      | Z0.CilSpecs.Instruction.IsLdloc                                       | Checks whether it's one of the <c>ldloc</c> instructions, but does <c>not</c> check            whether it's one of the <c>ldloca</c> instructions.
Method      | Z0.CilSpecs.Instruction.IsStarg                                       | Checks whether it's one of the <c>starg</c> instructions
Method      | Z0.CilSpecs.Instruction.IsStloc                                       | Checks whether it's one of the <c>stloc</c> instructions
Method      | Z0.CilSpecs.Extensions.GetOpCode(Z0.CilSpecs.Instruction)             | Gets the opcode or <see cref="F:Z0.CilSpecs.OpCodes.UNKNOWN1" /> if <paramref name="self" /> is <c>null</c>
Method      | Z0.CilSpecs.Extensions.GetOperand(Z0.CilSpecs.Instruction)            | Gets the operand or <c>null</c> if <paramref name="self" /> is <c>null</c>
Method      | Z0.CilSpecs.Extensions.GetOffset(Z0.CilSpecs.Instruction)             | Gets the offset or 0 if <paramref name="self" /> is <c>null</c>
Method      | Z0.CilSpecs.Extensions.ToOpCode(Z0.CilSpecs.Code)                     | Converts a <see cref="T:Z0.CilSpecs.Code" /> to an <see cref="T:Z0.CilSpecs.OpCode" />
Type        | Z0.CilSpecs.MethodImplAttributes                                      | Method impl attributes, see CorHdr.h/CorMethodImpl
Field       | Z0.CilSpecs.MethodImplAttributes.CodeTypeMask                         | Flags about code type.
Field       | Z0.CilSpecs.MethodImplAttributes.IL                                   | Method impl is IL.
Field       | Z0.CilSpecs.MethodImplAttributes.Native                               | Method impl is native.
Field       | Z0.CilSpecs.MethodImplAttributes.OPTIL                                | Method impl is OPTIL
Field       | Z0.CilSpecs.MethodImplAttributes.Runtime                              | Method impl is provided by the runtime.
Field       | Z0.CilSpecs.MethodImplAttributes.ManagedMask                          | Flags specifying whether the code is managed or unmanaged.
Field       | Z0.CilSpecs.MethodImplAttributes.Unmanaged                            | Method impl is unmanaged, otherwise managed.
Field       | Z0.CilSpecs.MethodImplAttributes.Managed                              | Method impl is managed.
Field       | Z0.CilSpecs.MethodImplAttributes.ForwardRef                           | Indicates method is defined; used primarily in merge scenarios.
Field       | Z0.CilSpecs.MethodImplAttributes.PreserveSig                          | Indicates method sig is not to be mangled to do HRESULT conversion.
Field       | Z0.CilSpecs.MethodImplAttributes.InternalCall                         | Reserved for internal use.
Field       | Z0.CilSpecs.MethodImplAttributes.Synchronized                         | Method is single threaded through the body.
Field       | Z0.CilSpecs.MethodImplAttributes.NoInlining                           | Method may not be inlined.
Field       | Z0.CilSpecs.MethodImplAttributes.AggressiveInlining                   | Method should be inlined if possible.
Field       | Z0.CilSpecs.MethodImplAttributes.NoOptimization                       | Method may not be optimized.
Field       | Z0.CilSpecs.MethodImplAttributes.AggressiveOptimization               | Method may contain hot code and should be aggressively optimized.
Field       | Z0.CilSpecs.MethodImplAttributes.SecurityMitigations                  | The JIT compiler should look for security mitigation attributes, such as the user-defined System.Runtime.CompilerServices.SecurityMitigationsAttribute. If found, the JIT compiler applies any related security mitigations. Available starting with .NET Framework 4.8.
Type        | Z0.CilSpecs.OpCode                                                    | A CIL opcode
Field       | Z0.CilSpecs.OpCode.Name                                               | The opcode name
Field       | Z0.CilSpecs.OpCode.Code                                               | The opcode as a <see cref="F:Z0.CilSpecs.OpCode.Code" /> enum
Field       | Z0.CilSpecs.OpCode.OperandType                                        | Operand type
Field       | Z0.CilSpecs.OpCode.FlowControl                                        | Flow control info
Field       | Z0.CilSpecs.OpCode.OpCodeType                                         | Opcode type
Field       | Z0.CilSpecs.OpCode.StackBehaviourPush                                 | Push stack behavior
Field       | Z0.CilSpecs.OpCode.StackBehaviourPop                                  | Pop stack behavior
Property    | Z0.CilSpecs.OpCode.Value                                              | Gets the value which is compatible with <see cref="P:System.Reflection.Emit.OpCode.Value" />
Property    | Z0.CilSpecs.OpCode.Size                                               | Gets the size of the opcode. It's either 1 or 2 bytes.
Method      | Z0.CilSpecs.OpCode.ToInstruction                                      | Creates a new instruction with no operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.Byte)                         | Creates a new instruction with a <see cref="T:System.Byte" /> operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.SByte)                        | Creates a new instruction with a <see cref="T:System.SByte" /> operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.Int32)                        | Creates a new instruction with an <see cref="T:System.Int32" /> operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.Int64)                        | Creates a new instruction with a <see cref="T:System.Int64" /> operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.Single)                       | Creates a new instruction with a <see cref="T:System.Single" /> operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.Double)                       | Creates a new instruction with a <see cref="T:System.Double" /> operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.String)                       | Creates a new instruction with a string operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(Z0.CilSpecs.Instruction)             | Creates a new instruction with an instruction target operand
Method      | Z0.CilSpecs.OpCode.ToInstruction(System.Collections.Generic.IList{Z0.CilSpecs.Instruction})| Creates a new instruction with an instruction target list operand
Method      | Z0.CilSpecs.OpCode.ToString                                           | 
Type        | Z0.CilSpecs.OpCodes                                                   | Contains all valid CIL opcodes
Field       | Z0.CilSpecs.OpCodes.OneByteOpCodes                                    | All one-byte opcodes
Field       | Z0.CilSpecs.OpCodes.TwoByteOpCodes                                    | All two-byte opcodes (first byte is <c>0xFE</c>)
Type        | Z0.CilSpecs.OpCodeType                                                | CIL opcode type
Field       | Z0.CilSpecs.OpCodeType.Annotation                                     | 
Field       | Z0.CilSpecs.OpCodeType.Macro                                          | 
Field       | Z0.CilSpecs.OpCodeType.Nternal                                        | 
Field       | Z0.CilSpecs.OpCodeType.Objmodel                                       | 
Field       | Z0.CilSpecs.OpCodeType.Prefix                                         | 
Field       | Z0.CilSpecs.OpCodeType.Primitive                                      | 
Type        | Z0.CilSpecs.OperandType                                               | CIL opcode operand type
Field       | Z0.CilSpecs.OperandType.InlineBrTarget                                | 4-byte relative instruction offset
Field       | Z0.CilSpecs.OperandType.InlineField                                   | 4-byte field token (<see cref="!:Table.Field" /> or <see cref="!:Table.MemberRef" />)
Field       | Z0.CilSpecs.OperandType.InlineI                                       | int32
Field       | Z0.CilSpecs.OperandType.InlineI8                                      | int64
Field       | Z0.CilSpecs.OperandType.InlineMethod                                  | 4-byte method token (<see cref="!:Table.Method" />, <see cref="!:Table.MemberRef" />            or <see cref="!:Table.MethodSpec" />)
Field       | Z0.CilSpecs.OperandType.InlineNone                                    | No operand
Field       | Z0.CilSpecs.OperandType.InlinePhi                                     | Never used
Field       | Z0.CilSpecs.OperandType.InlineR                                       | 64-bit real
Field       | Z0.CilSpecs.OperandType.NOT_USED_8                                    | 
Field       | Z0.CilSpecs.OperandType.InlineSig                                     | 4-byte method sig token (<see cref="!:Table.StandAloneSig" />)
Field       | Z0.CilSpecs.OperandType.InlineString                                  | 4-byte string token (<c>0x70xxxxxx</c>)
Field       | Z0.CilSpecs.OperandType.InlineSwitch                                  | 4-byte count N followed by N 4-byte relative instruction offsets
Field       | Z0.CilSpecs.OperandType.InlineTok                                     | 4-byte token (<see cref="!:Table.Field" />, <see cref="!:Table.MemberRef" />,            <see cref="!:Table.Method" />, <see cref="!:Table.MethodSpec" />, <see cref="!:Table.TypeDef" />,            <see cref="!:Table.TypeRef" /> or <see cref="!:Table.TypeSpec" />)
Field       | Z0.CilSpecs.OperandType.InlineType                                    | 4-byte type token (<see cref="!:Table.TypeDef" />, <see cref="!:Table.TypeRef" /> or            <see cref="!:Table.TypeSpec" />)
Field       | Z0.CilSpecs.OperandType.InlineVar                                     | 2-byte param/local index
Field       | Z0.CilSpecs.OperandType.ShortInlineBrTarget                           | 1-byte relative instruction offset
Field       | Z0.CilSpecs.OperandType.ShortInlineI                                  | 1-byte sbyte (<see cref="F:Z0.CilSpecs.Code.Ldc_I4_S" />) or byte (the rest)
Field       | Z0.CilSpecs.OperandType.ShortInlineR                                  | 32-bit real
Field       | Z0.CilSpecs.OperandType.ShortInlineVar                                | 1-byte param/local index
Type        | Z0.CilSpecs.StackBehaviour                                            | CIL opcode stack behavior
Field       | Z0.CilSpecs.StackBehaviour.Pop0                                       | 
Field       | Z0.CilSpecs.StackBehaviour.Pop1                                       | 
Field       | Z0.CilSpecs.StackBehaviour.Pop1_pop1                                  | 
Field       | Z0.CilSpecs.StackBehaviour.Popi                                       | 
Field       | Z0.CilSpecs.StackBehaviour.Popi_pop1                                  | 
Field       | Z0.CilSpecs.StackBehaviour.Popi_popi                                  | 
Field       | Z0.CilSpecs.StackBehaviour.Popi_popi8                                 | 
Field       | Z0.CilSpecs.StackBehaviour.Popi_popi_popi                             | 
Field       | Z0.CilSpecs.StackBehaviour.Popi_popr4                                 | 
Field       | Z0.CilSpecs.StackBehaviour.Popi_popr8                                 | 
Field       | Z0.CilSpecs.StackBehaviour.Popref                                     | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_pop1                                | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi                                | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi_popi                           | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi_popi8                          | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi_popr4                          | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi_popr8                          | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi_popref                         | 
Field       | Z0.CilSpecs.StackBehaviour.Push0                                      | 
Field       | Z0.CilSpecs.StackBehaviour.Push1                                      | 
Field       | Z0.CilSpecs.StackBehaviour.Push1_push1                                | 
Field       | Z0.CilSpecs.StackBehaviour.Pushi                                      | 
Field       | Z0.CilSpecs.StackBehaviour.Pushi8                                     | 
Field       | Z0.CilSpecs.StackBehaviour.Pushr4                                     | 
Field       | Z0.CilSpecs.StackBehaviour.Pushr8                                     | 
Field       | Z0.CilSpecs.StackBehaviour.Pushref                                    | 
Field       | Z0.CilSpecs.StackBehaviour.Varpop                                     | 
Field       | Z0.CilSpecs.StackBehaviour.Varpush                                    | 
Field       | Z0.CilSpecs.StackBehaviour.Popref_popi_pop1                           | 
Field       | Z0.CilSpecs.StackBehaviour.PopAll                                     | 
Method      | Z0.Clr.type``1(System.Type)                                           | Embeds a clr type descriptor within a parametric data adapter
Method      | Z0.Clr.property``1(System.Reflection.PropertyInfo)                    | Embeds a clr property descriptor within a parametric data adapter
Type        | Z0.ClrEnum`1                                                          | Represents a parametrically-identified clr enum
Type        | Z0.ClrStruct`1                                                        | Represents a parametrically-identified clr struct
Type        | Z0.ClrType`1                                                          | Represents a parametrically-identified clr type
Type        | Z0.IClrEnum                                                           | Characterizes a model of a clr enum type
Type        | Z0.IClrEnum`1                                                         | Characterizes an F-bound polyorphic enum model reification
Type        | Z0.IClrEnum`2                                                         | Characterizes a subject-parametric type model
Type        | Z0.IClrEnum`3                                                         | Characterizes an F-bound polymorphic and subject-parametric enum model
Type        | Z0.IClrRaw                                                            | Characterizes a model of an unmanaged type
Type        | Z0.IClrRaw`1                                                          | Characterizes an F-bound polyorphic unmanaged type model reification
Type        | Z0.IClrRaw`2                                                          | Characterizes a subject-parametric model of an unmanaged type
Type        | Z0.IClrRaw`3                                                          | Characterizes an F-bound polymorphic and subject-parametric model of an unmanaged type
Type        | Z0.IClrType                                                           | Characterizes a model of a CLR type
Property    | Z0.IClrType.IsEmpty                                                   | Indicates whether the model is empty and thus models nothing
Property    | Z0.IClrType.NestedTypes                                               | Models of the types nested within the subject, if any
Type        | Z0.IClrType`1                                                         | Characterizes an F-bound polyorphic type model reification
Type        | Z0.IClrType`2                                                         | Characterizes a subject-parametric type model
Property    | Z0.IClrType`2.Untyped                                                 | The equivalent non-parametric model
Type        | Z0.IClrType`3                                                         | Characterizes an F-bound polymorphic and subject-parametric type model
Type        | Z0.IClrStruct                                                         | Characterizes a model of a struct type
Type        | Z0.IClrClass                                                          | Characterizes a model of a class type
Type        | Z0.IClrDelegate                                                       | Characterizes a model of a delegate type
Field       | Z0.ModifierFacetKind.Const                                            | Member is const
Field       | Z0.ModifierFacetKind.Static                                           | Type or member is static
Field       | Z0.ArtifactFacetKind.Const                                            | Member is const
Field       | Z0.ArtifactFacetKind.Static                                           | Type or member is static
Field       | Z0.ArtifactFacetKind.Instance                                         | Member is non-static
Field       | Z0.ArtifactFacetKind.Public                                           | Access to target is unrestricted
Field       | Z0.ArtifactFacetKind.Private                                          | Target is accessible from the containing type
Field       | Z0.ArtifactFacetKind.Protected                                        | Target is accessible from the declaring type or subtypes
Field       | Z0.ArtifactFacetKind.Internal                                         | Target is accessible from the declaring assembly
Field       | Z0.ArtifactFacetKind.ProtectedInternal                                | Target is accessible from the current assembly or from types that are derived from the containing class
Field       | Z0.ArtifactFacetKind.PrivateProtected                                 | Target is accessible from the containing class or types derived from the containing class within the current assembly
Type        | Z0.AsciCodeCover                                                      | Covers an asci code sequence of length 1
Type        | Z0.AsciNull                                                           | Stateless polytype that implicitly converts to the asci null defined for a reified asci sequence
Field       | Z0.AsciResourceSet`1.Name                                             | The resource set name
Property    | Z0.AsciResourceSet`1.EntryCount                                       | The resource entry count
Method      | Z0.AsciResourceSet`1.Entry(System.Int32)                              | Retrives an index-identified resource
Property    | Z0.AsciResourceSet`1.Item(System.Int32)                               | Retrives an index-identified resource
Property    | Z0.IAsciSequence.Length                                               | Specifies the number of characters that precede a null terminator, if any; otherwise, returns the capacity
Property    | Z0.IAsciSequence.Capacity                                             | The maximum number of asci characters the sequence can cover
Property    | Z0.IAsciSequence.Text                                                 | The sequence content rendered as text
Property    | Z0.IAsciSequence.Encoded                                              | The sequence prasented as an encoded byte span
Property    | Z0.IAsciSequence.Decoded                                              | The sequence prasented as a decoded character span
Type        | Z0.asci16                                                             | Defines an asci code sequence of length 16
Type        | Z0.asci2                                                              | Defines an asci code sequence of length 2
Type        | Z0.asci32                                                             | Defines an asci code sequence of length 32
Type        | Z0.asci4                                                              | Defines an asci code sequence of length 4
Type        | Z0.asci8                                                              | Defines a 64-bit asci code sequence of length 8
Property    | Z0.asci8.Length                                                       | Specifies the number of characters that precede a null terminator, if any; otherwise, returns the maximum content length
Method      | Z0.asci.code(Z0.UpperCased,Z0.HexDigit)                               | Returns the upper-case hex code for a specified digit
Method      | Z0.asci.code(Z0.LowerCased,Z0.HexDigit)                               | Returns the lower-case hex code for a specified digit
Method      | Z0.asci.codes(System.ReadOnlySpan{System.Byte},Z0.UpperCased,System.Span{Z0.HexCode})| Projects a bytespan into a codespan
Method      | Z0.asci.codes(System.ReadOnlySpan{System.Byte},System.Span{Z0.HexCode})| Projects a bytespan into a codespan
Method      | Z0.asci.digit(Z0.Base16,Z0.LowerCased,System.Char)                    | Computes the numeric value in in the range [0,..F] identified by a lowercase hex symbol
Method      | Z0.asci.digit(Z0.Base16,Z0.UpperCased,System.Char)                    | Computes the numeric value in in the range [0,..F] identified by a lowercase hex symbol
Method      | Z0.asci.digit(Z0.HexSymLo)                                            | Computes the numeric value in in the range [0,..F] identified by a lowercase hex symbol
Method      | Z0.asci.digit(Z0.HexSymUp)                                            | Computes the numeric value in in the range [0,..F] identified by an uppercase hex symbol
Method      | Z0.asci.digit(Z0.Base10,System.UInt16,System.Int32)                   | Extracts an index-identified encoded digit
Method      | Z0.asci.digit(Z0.Base10,System.UInt32,System.Int32)                   | Extracts an index-identified encoded digit
Method      | Z0.asci.digit(Z0.Base10,System.UInt64,System.Int32)                   | Extracts an index-identified encoded digit
Method      | Z0.asci.digits(Z0.Perm4L,System.Span{System.Byte})                    | Computes the digigs corresponding to each 2-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm4L,Z0.NatSpan{Z0.N4,System.Byte}@)              | Computes the digigs corresponding to each 2-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm4L)                                             | Computes the digigs corresponding to each 2-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm8L,System.Span{Z0.OctalDigit})                  | Computes the digits corresponding to each 3-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm8L,Z0.NatSpan{Z0.N8,Z0.OctalDigit}@)            | Computes the digits corresponding to each 3-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm8L)                                             | Computes the digits corresponding to each 3-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm16L,System.Span{Z0.HexDigit})                   | Computes the digits corresponding to each 4-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm16L,Z0.NatSpan{Z0.N16,Z0.HexDigit}@)            | Computes the digits corresponding to each 4-bit segment of the permutation spec
Method      | Z0.asci.digits(Z0.Perm16L)                                            | Computes the digits corresponding to each 4-bit segment of the permutation spec
Method      | Z0.asci.encode``1(System.ReadOnlySpan{System.Char},System.Span{``0})  | Encodes a sequence of source characters and stores a result in a caller-supplied             T-parametric target with cells assumed to be at least 16 bits wide
Method      | Z0.asci.encode(System.Char)                                           | Encodes a single character
Method      | Z0.asci.encode(System.ReadOnlySpan{System.String},System.Span{System.Byte})| Encodes each source string and packs the result into the target
Method      | Z0.asci.encode(System.ReadOnlySpan{System.String},System.Span{System.Byte},System.Byte)| Encodes each source string and packs the result into the target, interspersed by a supplied delimiter
Method      | Z0.asci.encode(System.Char@,Z0.Hex1,Z0.asci2@)                        | Populates an asci target with a specified number of source characters
Method      | Z0.asci.encode(System.Char@,Z0.Hex2,Z0.asci4@)                        | Populates an asci target with a specified number of source characters
Method      | Z0.asci.encode(System.Char@,Z0.Hex3,Z0.asci8@)                        | Populates an asci target with a specified number of source characters
Method      | Z0.asci.encode(System.Char@,Z0.Hex4,Z0.asci16@)                       | Populates an asci target with a specified number of source characters
Method      | Z0.asci.encode(System.Char@,Z0.Hex5,Z0.asci32@)                       | Populates an asci target with a specified number of source characters
Method      | Z0.asci.encode(System.Char@,Z0.Hex6,Z0.asci64@)                       | Populates an asci target with a specified number of source characters
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},System.Span{Z0.AsciCharCode})| Fills a caller-supplied target span with asci codes corresponding to characters in a source span
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},System.Int32,System.Int32,System.Span{Z0.AsciCharCode})| Encodes a specified number of source characters
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci2@)            | Populates a 2-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci4@)            | Populates a 4-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci8@)            | Populates an 8-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci16@)           | Populates a 16-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci32@)           | Populates a 32-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(System.ReadOnlySpan{System.Char},Z0.asci64@)           | Populates a 64-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(Z0.N2,System.ReadOnlySpan{System.Char})                | Populates a 2-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(Z0.N4,System.ReadOnlySpan{System.Char})                | Populates a 4-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(Z0.N8,System.ReadOnlySpan{System.Char})                | Populates an 8-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(Z0.N16,System.ReadOnlySpan{System.Char})               | Populates a 16-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(Z0.N32,System.ReadOnlySpan{System.Char})               | Populates a 32-code asci block from the leading cells of a character span
Method      | Z0.asci.encode(Z0.N64,System.ReadOnlySpan{System.Char})               | Populates a 32-code asci block from the leading cells of a character span
Method      | Z0.asci.first(Z0.asci4@,System.Byte)                                  | Returns the index of the first source element that matches a specified value
Method      | Z0.asci.first(Z0.asci8@,System.Byte)                                  | Returns the index of the first source element that matches a specified value
Method      | Z0.asci.first(Z0.asci16@,System.Byte)                                 | Returns the index of the first source element that matches a specified value
Method      | Z0.asci.first(Z0.asci32@,System.Byte)                                 | Returns the index of the first source element that matches a specified value
Method      | Z0.asci.first(Z0.asci64@,System.Byte)                                 | Returns the index of the first source element that matches a specified value
Method      | Z0.asci.first(System.ReadOnlySpan{System.Char},System.Char)           | Returns the index of the first source character that matches a target character
Method      | Z0.asci.length(Z0.asci2@)                                             | Counts the number of characters that precede a null terminator, if any
Method      | Z0.asci.length(Z0.asci4@)                                             | Counts the number of characters that precede a null terminator, if any
Method      | Z0.asci.length(Z0.asci8@)                                             | Counts the number of characters that precede a null terminator, if any
Method      | Z0.asci.length(Z0.asci16@)                                            | Counts the number of characters that precede a null terminator, if any
Method      | Z0.asci.length(Z0.asci32@)                                            | Counts the number of characters that precede a null terminator, if any
Method      | Z0.asci.length(Z0.asci64@)                                            | Counts the number of characters that precede a null terminator, if any
Method      | Z0.asci.lowercase(System.Char)                                        | Transforms an uppercase character [A..Z] to the corresponding lowercase charcter [a..z];            if the source character is not in the letter domain, the input is returned unharmed
Method      | Z0.asci.pack(Z0.Base10,System.Char,System.Char)                       | Encodes two decimal digits d := 0x[c1][c0] for characters c2, c1 in the inclusive range [0,9]
Method      | Z0.asci.pack(Z0.Base10,System.Char,System.Char,System.Char)           | Encodes three decimal digits d := 0x[c2][c1][c0] for characters c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.asci.pack(Z0.Base10,System.Char,System.Char,System.Char,System.Char)| Encodes four decimal digits d := 0x[c3][c2][c1][c0] for characters c3, c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.asci.pack(Z0.Base10,System.Char,System.Char,System.Char,System.Char,System.Char)| Encodes five decimal digits d := 0x[c4][c3][c2][c1][c0] for characters c4, c3, c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.asci.pack(Z0.Base10,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)| Encodes eight decimal digits d := 0x[c7][c6][c5][c4][c3][c2][c1][c0] for characters c7, c6, c5, c4, c3, c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.asci.unpack(Z0.Base10,System.UInt64,Z0.N8,System.Byte@)            | Extracts all eight digits from the source
Method      | Z0.asci.render(System.ReadOnlySpan{Z0.BinaryDigit},System.Span{System.Char})| Formats a span of binary digits as a contiguous block
Method      | Z0.asci.render(System.ReadOnlySpan{Z0.DeciDigit},System.Span{System.Char})| Formats a span of hex digits as a contiguous block
Method      | Z0.asci.render(System.ReadOnlySpan{Z0.HexDigit},System.Span{System.Char})| Formats a span of hex digits as a contiguous block
Method      | Z0.asci.u8(Z0.Base10,System.Char)                                     | Converts a character in the inclusive range [0,9] to the corresponding number in the same range
Method      | Z0.asci.u16(Z0.Base10,System.Char)                                    | Converts a character in the inclusive range [0,9] to the corresponding number in the same range
Method      | Z0.asci.u32(Z0.Base10,System.Char)                                    | Converts a character in the inclusive range [0,9] to the corresponding number in the same range
Method      | Z0.asci.u64(Z0.Base10,System.Char)                                    | Converts a character in the inclusive range [0,9] to the corresponding number in the same range
Method      | Z0.asci.spec``3(``0[])                                                | Defines a symbol spec
Method      | Z0.asci.symval(Z0.BinaryDigit)                                        | Computes the source digit's symbol value
Method      | Z0.asci.symval(Z0.OctalDigit)                                         | Computes the source digit's symbol value
Method      | Z0.asci.symval(Z0.DeciDigit)                                          | Computes the source digit's symbol value
Method      | Z0.asci.symval(Z0.LowerCased,Z0.HexDigit)                             | Computes the source digit's symbol value
Method      | Z0.asci.symval(Z0.UpperCased,Z0.HexDigit)                             | Computes the source digit's symbol value
Method      | Z0.asci.uppercase(System.Char)                                        | if given a lowercase character [a..z], produces the corresponding uppercase charcter [A..z]            Otherwise, returns the input unharmed
Method      | Z0.asci.vasci(Z0.W256,System.SByte,Z0.Hex4)                           | Loads up to 16 asci scalar symbols [offset, offset + count]
Method      | Z0.asci.vasci(Z0.W512,System.SByte,Z0.Hex5)                           | Loads up to 32 asci scalar symbols [offset, offset + count]
Type        | Z0.Digital                                                            | Defines operations over character digits
Method      | Z0.Digital.digit(System.Char)                                         | Converts a character in the inclusive range [0,9] to the corresponding number in the same range
Method      | Z0.Digital.digit8(System.Char)                                        | Converts a character in the inclusive range [0,9] to the corresponding number in the same range
Method      | Z0.Digital.digit8(System.UInt16,System.Int32)                         | Extracts an index-identified encoded digit
Method      | Z0.Digital.digit8(System.UInt32,System.Int32)                         | Extracts an index-identified encoded digit
Method      | Z0.Digital.digit8(System.UInt64,System.Int32)                         | Extracts an index-identified encoded digit
Method      | Z0.Digital.digits(Z0.Base10,System.Char,System.Char)                  | Encodes two decimal digits d := 0x[c1][c0] for characters c2, c1 in the inclusive range [0,9]
Method      | Z0.Digital.digits(Z0.Base10,System.Char,System.Char,System.Char)      | Encodes three decimal digits d := 0x[c2][c1][c0] for characters c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.Digital.digits(Z0.Base10,System.Char,System.Char,System.Char,System.Char)| Encodes four decimal digits d := 0x[c3][c2][c1][c0] for characters c3, c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.Digital.digits(Z0.Base10,System.Char,System.Char,System.Char,System.Char,System.Char)| Encodes five decimal digits d := 0x[c4][c3][c2][c1][c0] for characters c4, c3, c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.Digital.digits(Z0.Base10,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)| Encodes eight decimal digits d := 0x[c7][c6][c5][c4][c3][c2][c1][c0] for characters c7, c6, c5, c4, c3, c2, c1, c0 in the inclusive range [0,9]
Method      | Z0.Digital.digit(System.UInt64,System.Int32)                          | Extracts an index-identified encoded digit
Method      | Z0.Digital.digits(System.UInt64,System.Byte@,System.Byte@)            | Extracts two encoded digits
Method      | Z0.Digital.lo(System.UInt64,System.Byte@,System.Byte@,System.Byte@,System.Byte@)| Extracts the four lo digits
Method      | Z0.Digital.hi(System.UInt64,System.Byte@,System.Byte@,System.Byte@,System.Byte@)| Extracts the four hi digits
Method      | Z0.Digital.digits(System.UInt64,Z0.N1,System.Byte@)                   | Extracts the first digit from the source
Method      | Z0.Digital.digits(System.UInt64,Z0.N2,System.Byte@)                   | Extracts the first two digits from the source
Method      | Z0.Digital.digits(System.UInt64,Z0.N3,System.Byte@)                   | Extracts the first three digits from the source
Method      | Z0.Digital.digits(System.UInt64,Z0.N4,System.Byte@)                   | Extracts the first four digits from the source
Method      | Z0.Digital.digits(System.UInt64,Z0.N5,System.Byte@)                   | Extracts the first five digits from the source
Method      | Z0.Digital.digits(System.UInt64,Z0.N6,System.Byte@)                   | Extracts the first six digits from the source
Method      | Z0.Digital.digits(System.UInt64,Z0.N7,System.Byte@)                   | Extracts the first seven digits from the source
Method      | Z0.Digital.unpack(Z0.Base10,System.UInt64,Z0.N8,System.Byte@)         | Extracts all eight digits from the source
Method      | Z0.AsciResource.resource``1(Z0.asci32,``0,System.Nullable{Z0.asci64}) | Creates an asci resource
Method      | Z0.AsciResource.resource``1(``0,System.Nullable{Z0.asci64})           | Creates an eponymous asci resource
Method      | Z0.AsciTest.digit(System.Char)                                        | Tests whether a character symbol is one of '0'..'9'
Method      | Z0.AsciTest.letter(Z0.UpperCased,System.Char)                         | Tests whether a character is an uppercase asci letter character
Method      | Z0.AsciTest.letter(Z0.LowerCased,System.Char)                         | Tests whether a character is a lowercase asci letter character
Method      | Z0.AsciTest.letter(System.Char)                                       | Tests whether a character is an asci letter character
Method      | Z0.AsciTest.IsNumeral(Z0.HexSymLo)                                    | Tests whether a lowercase hex symbol is a numeral
Method      | Z0.AsciTest.IsNumeral(Z0.HexSymUp)                                    | Tests whether a uppercas hex symbol is a numeral
Method      | Z0.AsciTest.IsLetter(Z0.HexSymLo)                                     | Tests whether a lowercase hex symbol is a letter
Method      | Z0.AsciTest.IsLetter(Z0.HexSymUp)                                     | Tests whether an uppercase hex symbol is a letter
Method      | Z0.AsciTest.IsHexDigit(Z0.UpperCased,System.Char)                     | Determines whether a character is an upper-cased hex digit
Method      | Z0.AsciTest.IsHexDigit(Z0.LowerCased,System.Char)                     | Determines whether a character is a lower-cased hex digit
Method      | Z0.AsciTest.IsHexDigit(System.Char)                                   | Determines whether a character is a hex digit of any case
Method      | Z0.AsciTest.IsHexScalar(System.Char)                                  | Determines whether a character corresponds to one of the lower hex codes
Method      | Z0.AsciTest.IsHexUpper(System.Char)                                   | Determines whether a character corresponds to one of the uppercase hex code characters
Method      | Z0.AsciTest.IsHexLower(System.Char)                                   | Determines whether a character corresponds to one of the lowercase hex code characters
Method      | Z0.AsciTest.IsSpace(System.Char)                                      | Tests whether a character is a space
Method      | Z0.AsciTest.IsTab(System.Char)                                        | Tests whether a character is a space
Type        | Z0.bit                                                                | An anti-succinct representation of a bit
Property    | Z0.bit.Off                                                            | Constructs a disabled bit
Property    | Z0.bit.On                                                             | Constructs an enabled bit
Method      | Z0.bit.test(System.SByte,System.Byte)                                 | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.Byte,System.Int32)                                 | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.Int16,System.Int32)                                | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.UInt16,System.Int32)                               | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.Int32,System.Int32)                                | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.Int64,System.Int32)                                | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.UInt32,System.Int32)                               | Tests the state of an index-identified source bit
Method      | Z0.bit.test(System.UInt64,System.Int32)                               | Tests the state of an index-identified source bit
Method      | Z0.bit.set(System.SByte,System.Byte,Z0.bit)                           | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.Byte,System.Byte,Z0.bit)                            | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.Int16,System.Byte,Z0.bit)                           | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.UInt16,System.Byte,Z0.bit)                          | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.Int32,System.Byte,Z0.bit)                           | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.UInt32,System.Byte,Z0.bit)                          | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.Int64,System.Byte,Z0.bit)                           | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.set(System.UInt64,System.Byte,Z0.bit)                          | Aligns an index-identified source bit with with a suplied state
Method      | Z0.bit.identity(Z0.bit)                                               | The identity function
Method      | Z0.bit.or(Z0.bit,Z0.bit)                                              | Computes c = a | b
Method      | Z0.bit.xor(Z0.bit,Z0.bit)                                             | Computes c = a ^ b
Method      | Z0.bit.not(Z0.bit)                                                    | Computes c := ~a = !a
Method      | Z0.bit.nor(Z0.bit,Z0.bit)                                             | Computes c := ~ (a | b)
Method      | Z0.bit.xnor(Z0.bit,Z0.bit)                                            | Computes c := ~ (a ^ b)
Method      | Z0.bit.impl(Z0.bit,Z0.bit)                                            | Computes c := a -&gt; b := a | ~b
Method      | Z0.bit.cimpl(Z0.bit,Z0.bit)                                           | Computes the converse implication c := ~a | b
Method      | Z0.bit.op_True(Z0.bit)                                                | Returns true if the bit is enabled, false otherwise
Method      | Z0.bit.op_False(Z0.bit)                                               | Returns false if the bit is disabled, true otherwise
Method      | Z0.bit.op_Implicit(System.Boolean)~Z0.bit                             | Implicitly constructs a bit from a bool
Method      | Z0.bit.op_Implicit(Z0.bit)~System.Boolean                             | Implicitly constructs a bool from a bit
Method      | Z0.bit.op_Explicit(Z0.bit)~System.Byte                                | Defines an explicit bit -&gt; byte conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.SByte                               | Defines an explicit bit -&gt; byte conversion
Method      | Z0.bit.op_Explicit(System.Byte)~Z0.bit                                | Defines an explicit byte -&gt; bit conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.UInt16                              | Defines an explicit bit -&gt; ushort conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.Int16                               | Defines an explicit bit -&gt; ushort conversion
Method      | Z0.bit.op_Explicit(System.UInt16)~Z0.bit                              | Defines an explicit ushort -&gt; bit conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.Int32                               | Defines an explicit bit -&gt; int conversion
Method      | Z0.bit.op_Implicit(System.Int32)~Z0.bit                               | Defines an *implicit* int -&gt; bit conversion to aid sanity retention
Method      | Z0.bit.op_Explicit(Z0.bit)~System.UInt32                              | Defines an explicit bit -&gt; uint conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.Int64                               | Defines an explicit bit -&gt; long conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.Single                              | Defines an explicit bit -&gt; float conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.Double                              | Defines an explicit bit -&gt; double conversion
Method      | Z0.bit.op_Explicit(System.UInt32)~Z0.bit                              | Defines an explicit uint -&gt; bit conversion
Method      | Z0.bit.op_Explicit(Z0.bit)~System.UInt64                              | Defines an explicit bit -&gt; ulong conversion
Method      | Z0.bit.op_Explicit(System.UInt64)~Z0.bit                              | Defines an explicit ulong -&gt; bit conversion
Method      | Z0.bit.op_Addition(Z0.bit,Z0.bit)                                     | Combines the states of the source bits
Method      | Z0.bit.op_BitwiseAnd(Z0.bit,Z0.bit)                                   | Computes the bitwise AND between the operands
Method      | Z0.bit.op_BitwiseOr(Z0.bit,Z0.bit)                                    | Computes the bitwise OR between the operands
Method      | Z0.bit.op_ExclusiveOr(Z0.bit,Z0.bit)                                  | Computes the bitwise XOR between the operands
Method      | Z0.bit.op_OnesComplement(Z0.bit)                                      | Inverts the state of the source bit
Method      | Z0.bit.op_LogicalNot(Z0.bit)                                          | Inverts the state of the source bit
Method      | Z0.bit.Promote``1                                                     | Promotes a bit to a numeric value where all target bits are enabled if the state of the            bit is on; otherwise all target bits are disabled
Type        | Z0.BitField32                                                         | Defines an extremely lo-tech 32-bit bitfield
Type        | Z0.BitField32`1                                                       | Defines an extremely lo-tech 32-bit bitfield, as in the non-parametric version,            but field content is indexed by an enumeration
Method      | Z0.BitStream.from``1(System.Collections.Generic.IEnumerator{``0})     | Transforms an primal enumerator into a bitstream
Method      | Z0.BitStream.from``1(System.Collections.Generic.IEnumerable{``0})     | Transforms an primal source stream into a bitstream
Method      | Z0.Casts.cast``2(``0@,``1@)                                           | Reinterprents a source value through the perpective of another type
Method      | Z0.FunctionInfo.size(System.Reflection.MethodInfo)                    | Returns the size of the method, if known; otherwise, returns the monoidal zero
Method      | Z0.IFunctionJit.Jit(System.Reflection.MethodInfo,System.Nullable{System.Int32})| Jits the source method and confers its size, if specified
Method      | Z0.ILocatedCodeParser.Parse(Z0.LocatedCode)                           | Located code in, and perhaps, located code out
Type        | Z0.IMemoryExtractor                                                   | Characterizes a service that extracts encoded data from a given base address
Type        | Z0.IMemoryReader                                                      | Characterizes a service reads data from a source address and deposits to caller-supplied targets
Type        | Z0.DynamicDelegate                                                    | Encloses a delegate that was manufactured dynamically
Field       | Z0.DynamicDelegate.Id                                                 | The delegate identity
Field       | Z0.DynamicDelegate.SourceMethod                                       | The method invoked by the dynamic operator that provides the substance of the operation
Field       | Z0.DynamicDelegate.TargetMethod                                       | The dynamically-generated method that backs the dynamic operator
Field       | Z0.DynamicDelegate.DynamicOp                                          | The dynamic operation
Method      | Z0.DynamicDelegate.Invoke(System.Object[])                            | Invokes the dynamic delegate dynamically
Method      | Z0.DynamicDelegate.As``1                                              | The existing delegate, parametrically
Type        | Z0.DynamicDelegate`1                                                  | Encloses a generic delegate that was manufactured dynamically
Field       | Z0.DynamicDelegate`1.Id                                               | The delegate identity
Field       | Z0.DynamicDelegate`1.Source                                           | The method invoked by the dynamic operator that provides the substance of the operation
Field       | Z0.DynamicDelegate`1.Target                                           | The dynamically-generated method that backs the dynamic operator
Field       | Z0.DynamicDelegate`1.DynamicOp                                        | The dynamic operation
Type        | Z0.DynamicPointer                                                     | Encloses a pointer to the native definition of a dynamic delegate
Method      | Z0.DynamicPointer.pointer(System.Reflection.Emit.DynamicMethod)       | Finds the magical function pointer for a dynamic method
Type        | Z0.BitDataTypeConverter                                               | Conversion provider for the bit data type
Method      | Z0.Cast.to``2(``0)                                                    | Unconditionally converts, with much haste and no waste, a value of parametric numeric kind             to a value of another parametric numeric kind.
Method      | Z0.Delegates.action(System.Reflection.MethodInfo,System.Object)       | Creates an action delegate from a method
Method      | Z0.Delegates.type(System.Reflection.MethodInfo)                       | Infers a delegate type compatible with the signature of a specified methods
Method      | Z0.Delegates.binary``1(System.Reflection.MethodInfo,System.Object)    | Creates a binary operator from a method
Method      | Z0.Delegates.dynamic``1(Z0.OpIdentity,System.Reflection.MethodInfo,System.Reflection.Emit.DynamicMethod)| Creates a parameteric dynamic delegate
Method      | Z0.Delegates.dynamic(Z0.OpIdentity,System.Reflection.MethodInfo,System.Reflection.Emit.DynamicMethod,System.Type)| Creates a non-parameteric dynamic delegate
Method      | Z0.Delegates.dynamic(Z0.OpIdentity,System.Reflection.MethodInfo,System.Reflection.Emit.DynamicMethod,System.Delegate)| Creates a non-parameteric dynamic delegate
Method      | Z0.Delegates.from(System.Reflection.MethodInfo,System.Type,System.Object)| Creates an untyped delegate
Method      | Z0.Delegates.from``1(System.Reflection.MethodInfo,System.Object)      | Creates a generic delegate
Method      | Z0.Delegates.func``1(System.Reflection.MethodInfo,``0)                | Creates a function delegate of generic arity 1 from a static method
Method      | Z0.Delegates.func``2(System.Reflection.MethodInfo,``0,``1)            | Creates a function delegate of generic arity 2 from a static method
Method      | Z0.Delegates.func``3(System.Reflection.MethodInfo,``0,``1,``2)        | Creates a function delegate of generic arity 3 from a static method
Method      | Z0.Delegates.func``4(System.Reflection.MethodInfo,``0,``1,``2,``3)    | Creates a function delegate of generic arity 4 from a static method
Method      | Z0.Delegates.sink``1(System.Reflection.MethodInfo,System.Object)      | Creates a reception delegate/sink from a method
Method      | Z0.Delegates.source``1(System.Reflection.MethodInfo,System.Object)    | Creates an emitter from a method
Method      | Z0.Delegates.ternary``1(System.Reflection.MethodInfo,System.Object)   | Creates a ternary operator from a method
Method      | Z0.Delegates.unary``1(System.Reflection.MethodInfo,System.Object)     | Creates a unary operator from a method
Method      | Z0.Boxy.rebox(System.Object,Z0.NumericKind)                           | Uncoditionaly converts a boxed numeric value of one kind to a boxed numeric value of specified kind, if possible.            If not possible, returns the original value
Method      | Z0.Boxy.box(System.Int16,Z0.NumericKind)                              | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.UInt16,Z0.NumericKind)                             | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.Single,Z0.NumericKind)                             | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.Int32,Z0.NumericKind)                              | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.UInt32,Z0.NumericKind)                             | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.Double,Z0.NumericKind)                             | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.Int64,Z0.NumericKind)                              | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.UInt64,Z0.NumericKind)                             | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.SByte,Z0.NumericKind)                              | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.Boxy.box(System.Byte,Z0.NumericKind)                               | Converts a numeric source value to a boxed numeric value of specified kind
Method      | Z0.FunctionCil.bytes(System.Reflection.Emit.DynamicMethod)            | See https://stackoverflow.com/questions/4148297/resolving-the-tokens-found-in-the-il-from-a-dynamic-method/35711376#35711376
Method      | Z0.FunctionJit.jit(System.Type)                                       | Jits the method declared by a specified type
Method      | Z0.FunctionPointer.from(Z0.DynamicDelegate)                           | Creates a dynamic pointer from an untyped dynamic delegate
Method      | Z0.FunctionPointer.from``1(Z0.DynamicDelegate{``0})                   | Creates a dynamic pointer from a generic dynamic delegate
Method      | Z0.NumericArray.to``2(``0[],``1[])                                    | Unconditionally converts the source values to values of parametric numeric type
Method      | Z0.NumericArray.to``2(``0[])                                          | Unconditionally converts the source values to values of parametric numeric type
Method      | Z0.NumericCast.convert``2(``0)                                        | If possible, applies the conversion S -&gt; T
Method      | Z0.NumericCast.convert``1(System.Byte,``0)                            | If possible, applies the conversion byte -&gt; T
Method      | Z0.NumericCast.convert``1(System.SByte,``0)                           | If possible, applies the conversion sbyte -&gt; T
Method      | Z0.NumericCast.convert``1(System.UInt16,``0)                          | If possible, applies the conversion ushort -&gt; T
Method      | Z0.NumericCast.convert``1(System.Int16,``0)                           | If possible, applies the conversion short -&gt; T
Method      | Z0.NumericCast.convert``1(System.Int32,``0)                           | If possible, applies the conversion int -&gt; T
Method      | Z0.NumericCast.convert``1(System.UInt32,``0)                          | If possible, applies the conversion uint -&gt; T
Method      | Z0.NumericCast.convert``1(System.Int64,``0)                           | If possible, applies the conversion long -&gt; T
Method      | Z0.NumericCast.convert``1(System.UInt64,``0)                          | If possible, applies the conversion ulong -&gt; T
Method      | Z0.NumericCast.convert``1(System.Single,``0)                          | If possible, applies the conversion float -&gt; T
Method      | Z0.NumericCast.convert``1(System.Double,``0)                          | If possible, applies the conversion double -&gt; T
Field       | Z0.NumericLiterals.z8i                                                | The zero-value for an 8-bit signed integer
Field       | Z0.NumericLiterals.z8                                                 | The zero-value for an 8-bit usigned integer
Field       | Z0.NumericLiterals.z16i                                               | The zero-value for a 16-bit signed integer
Field       | Z0.NumericLiterals.z16                                                | The zero-value for a 16-bit unsigned integer
Field       | Z0.NumericLiterals.z32i                                               | The zero-value for a 32-bit signed integer
Field       | Z0.NumericLiterals.z32                                                | The zero-value for a 32-bit usigned integer
Field       | Z0.NumericLiterals.z64i                                               | The zero-value for a 64-bit signed integer
Field       | Z0.NumericLiterals.z64                                                | The zero-value for a 64-bit usigned integer
Field       | Z0.NumericLiterals.z32f                                               | The zero-value for a 32-bit float
Field       | Z0.NumericLiterals.z64f                                               | The zero-value for a 64-bit float
Field       | Z0.NumericLiterals.i8max                                              | The maximum value for an 8-bit signed integer
Field       | Z0.NumericLiterals.u8max                                              | The maximum value for an 8-bit usigned integer
Field       | Z0.NumericLiterals.i16max                                             | The maximum value for a 16-bit signed integer
Field       | Z0.NumericLiterals.u16max                                             | The maximum value for a 16-bit unsigned integer
Field       | Z0.NumericLiterals.i32max                                             | The maximum value for a 32-bit signed integer
Field       | Z0.NumericLiterals.u32max                                             | The maximum value for a 32-bit usigned integer
Field       | Z0.NumericLiterals.i64max                                             | The maximum value for a 64-bit signed integer
Field       | Z0.NumericLiterals.u64max                                             | The maximum value for a 64-bit usigned integer
Field       | Z0.NumericLiterals.f32max                                             | The maximum value for a 32-bit float
Field       | Z0.NumericLiterals.f64max                                             | The maximum value for a 64-bit float
Field       | Z0.NumericLiterals.i8min                                              | The minimum value for an 8-bit signed integer
Field       | Z0.NumericLiterals.i16min                                             | The minimum value for a 16-bit signed integer
Field       | Z0.NumericLiterals.i32min                                             | The minimum value for a 32-bit signed integer
Field       | Z0.NumericLiterals.i64min                                             | The minimum value for a 64-bit signed integer
Method      | Z0.NumericLiterals.zero``1                                            | Returns generic 0 for a primal source type
Method      | Z0.NumericLiterals.zero``1(``0)                                       | Returns generic 0 for a primal source type
Method      | Z0.NumericLiterals.one``1                                             | Returns generic 1 for a primal source type
Method      | Z0.NumericLiterals.one``1(``0)                                        | Returns generic 1 for a primal source type
Method      | Z0.NumericLiterals.ones``1                                            | Ones all bits each and every ... one
Method      | Z0.NumericLiterals.ones``1(``0)                                       | Ones all bits each and every ... one
Method      | Z0.NumericLiterals.minval``1                                          | Returns the minimum value supported by a parametrically-identified primal type
Method      | Z0.NumericLiterals.maxval``1                                          | Returns the maximim value supported by a parametrically-identified primal type
Method      | Z0.ICheckInvariant.yea(System.Boolean,System.String,System.String,System.String,System.Nullable{System.Int32})| Asserts the operand is true
Method      | Z0.ICheckInvariant.nea(System.Boolean,System.String,System.String,System.String,System.Nullable{System.Int32})| Asserts the operand is false
Method      | Z0.ICheckNull.notnull(System.Void*,System.String,System.String,System.String,System.Nullable{System.Int32})| Asserts the pointer is not null
Property    | Z0.ICheckOptions.Enabled                                              | Specifies whether the test is enabled
Property    | Z0.ICheckOptions.CycleCount                                           | The number times to repeat an action
Property    | Z0.ICheckOptions.RoundCount                                           | The number of times to repeat a cycle
Method      | Z0.ICheckSets.seteq``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.String,System.String,System.Nullable{System.Int32})| Asserts the equality of two sets
Method      | Z0.ICheckSets.contains``1(System.Collections.Generic.ISet{``0},``0,System.String,System.String,System.Nullable{System.Int32})| Asserts that a set contains a specified element
Method      | Z0.ICheckSets.contains``1(System.Collections.Generic.ISet{``0},``0[]) | Asserts that a set contains a specified element
Method      | Z0.IValidator.Failed(Z0.ClaimKind,Z0.IAppMsg)                         | Creates, but does not throw, a claim exception
Method      | Z0.IValidator.OnFailure(Z0.ClaimKind,System.String,System.String,System.Nullable{System.Int32})| Handles a claim failure by throwing an exception
Method      | Z0.IValidator.Require(System.Boolean,Z0.ClaimKind,System.String,System.String,System.Nullable{System.Int32})| Raises an exception if an invariant does not hold
Method      | Z0.IValidator.Failed(Z0.ClaimKind,System.String,System.String,System.Nullable{System.Int32})| Creates, but does not throw, a claim exception
Method      | Z0.IValidator.FailWith(System.String,System.String,System.String,System.Nullable{System.Int32})| Fails unconditionally with a message
Type        | Z0.ClaimException                                                     | Raised when a validation check has failed
Method      | Z0.Streams.nonempty``1(``0,``0[])                                     | Constructs a nonempty stream
Method      | Z0.Streams.from``1(``0[])                                             | Constructs a stream, possily empty
Method      | Z0.Streams.from``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})| Concatenates the source streams to create a unified stream
Method      | Z0.Streams.from``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})| Concatenates the source streams to create a unified stream
Method      | Z0.Streams.join``1(System.Collections.Generic.IEnumerable{``0}[])     | All of your streams belong to us
Type        | Z0.IOpIndex`1                                                         | Characterizes anything that can be uniquely identified by an operation identity and
Property    | Z0.IOpIndex`1.EntryCount                                              | The number of indexed items
Property    | Z0.IOpIndex`1.Keys                                                    | The item keys
Property    | Z0.IOpIndex`1.DuplicateKeys                                           | Duplicate keys found the source that were rejected from the index
Property    | Z0.IOpIndex`1.Item(Z0.OpIdentity)                                     | Looks up the index item and blows up if item does not exist
Method      | Z0.IOpIndex`1.Lookup(Z0.OpIdentity)                                   | A server version of the lookup indexer that returns an optional value, thus allowing            for the possibility that the id doesn't identify anything in the index
Property    | Z0.IOpIndex`1.Enumerated                                              | Enumerates the key/value index pairs
Method      | Z0.Primitive.kind(System.TypeCode)                                    | Returns the type-code identified primal kind
Type        | Z0.IndexedSeq`1                                                       | Reifies a canonical indexed sequence container
Method      | Z0.IndexedSeq`1.op_Implicit(`0[])~Z0.IndexedSeq{`0}                   | Implicitly constructs a sequence from an array
Type        | Z0.Multiset`1                                                         | Implementation of a basic multiset
Method      | Z0.Multiset`1.AddRange(System.Collections.Generic.IEnumerable{`0})    | Adds a sequence of items to the set
Method      | Z0.Multiset`1.DistinctCounts(System.Collections.Generic.IEnumerable{`0})| Selects the occurrence count for each item in the source
Property    | Z0.Multiset`1.Duplicates                                              | Selects the members that occur more than once
Method      | Z0.Multiset`1.IsMember(`0)                                            | Determines whether an item exists in the set
Method      | Z0.Multiset`1.Occurrences                                             | Selects all contained items with their occurrence counts
Method      | Z0.Multiset`1.DistinctCount(`0)                                       | Retrieves the times a specified item appears in the set
Property    | Z0.Multiset`1.Members                                                 | Enumerates the distinct members
Type        | Z0.ReadOnlySet`1                                                      | Contains a finite set of values
Method      | Z0.ReadOnlySet`1.IsSubset(Z0.ReadOnlySet{`0},System.Boolean)          | Determines whether the current set is a subset of a specified set.
Method      | Z0.ReadOnlySet`1.IsSuperset(Z0.ReadOnlySet{`0},System.Boolean)        | Determines whether the current set is a superset of a specified set.
Method      | Z0.ReadOnlySet`1.Intersect(Z0.ReadOnlySet{`0})                        | Calculates the intersection between the current set and a specified set and            returns a new set that embodies this result
Method      | Z0.ReadOnlySet`1.Difference(Z0.ReadOnlySet{`0},System.Boolean)        | Calculates the set difference, or symmetric difference, between the current set and a specified set             and returns a new set that embodies this result
Method      | Z0.ReadOnlySet`1.Intersects(Z0.ReadOnlySet{`0})                       | Determine whether the current set and a specified set have a nonemtpy intersection
Type        | Z0.Seq`1                                                              | Refies a canonical sequence container with content that need not be finite
Method      | Z0.Seq`1.op_Implicit(`0[])~Z0.Seq{`0}                                 | Implicitly constructs a sequence from an array
Method      | Z0.FiniteSet.define``1(``0[])                                         | Constructs a finite set from supplied members
Method      | Z0.FiniteSet.define``1(System.Collections.Generic.IEnumerable{``0})   | Constructs a finite set from supplied sequence
Method      | Z0.MultisetX.ToMultiSet``1(System.Collections.Generic.IEnumerable{``0})| Creates a multiset from a source sequence
Property    | Z0.EncodedIndex.EntryCount                                            | The number of indexed functions
Property    | Z0.EncodedIndex.LocationKeys                                          | The base addresses that identify entries in the index
Property    | Z0.EncodedIndex.IndexedCode                                           | All indexed code
Property    | Z0.EncodedIndex.Operations                                            | Operation idenfiers, each of which are associated with one or more code blocks
Property    | Z0.EncodedIndex.Hosts                                                 | Hosts with at least one archived code block
Type        | Z0.HostCodeIndex                                                      | Collects code derived from members declared by a specific operation host
Property    | Z0.HostCodeIndex.Id                                                   | The owning part
Property    | Z0.HostCodeIndex.Code                                                 | The host-owned code
Property    | Z0.HostCodeIndex.Length                                               | The number of collected functions
Type        | Z0.PartCodeIndex                                                      | Pairs a part with owned code
Property    | Z0.PartCodeIndex.Part                                                 | The owning part
Property    | Z0.PartCodeIndex.Code                                                 | The code in the set
Method      | Z0.Encoded.located(Z0.MemoryAddress,Z0.BinaryCode)                    | Defines a block of encoded data based at a specifed address
Property    | Z0.IIdentifiedCode`2.OpUri                                            | The identifying uri
Type        | Z0.IMemberCode`2                                                      | Characterizes identified code with a known address
Type        | Z0.IReflectedCode`2                                                   | Characterizes identified code with a known address and defining member
Property    | Z0.IReflectedCode`2.Method                                            | The defining member
Type        | Z0.ApiCode                                                            | Identifies a member defined by executable code (derived from the method implementation)
Type        | Z0.BinaryCode                                                         | Encoded x86 bytes extracted from a memory source
Property    | Z0.BinaryCode.Encoded                                                 | The encoded bytes
Property    | Z0.BinaryCode.Data                                                    | The encoded content as byte array
Property    | Z0.BinaryCode.Empty                                                   | The canonical zero
Type        | Z0.CapturedCode                                                       | Defines the dataset accumulated for an operation-targeted capture workflow
Type        | Z0.CaptureOutcome                                                     | Describes the outcome of a native capture operation
Property    | Z0.CaptureOutcome.Id                                                  | The identity of the capture subject
Field       | Z0.CaptureOutcome.State                                               | The final state in the capture process
Field       | Z0.CaptureOutcome.Range                                               | The origin of the captured data
Field       | Z0.CaptureOutcome.TermCode                                            | The capture termination code indicating why the capture process reached end-state
Type        | Z0.ExtractState                                                       | Defines the state of the routine capture workflow at a given step
Property    | Z0.ExtractState.Id                                                    | The operation identifier
Property    | Z0.ExtractState.Address                                               | The memory address from which the state payload was extracted
Field       | Z0.ExtractState.Offset                                                | The zero-based and monotonically-increasing state index
Field       | Z0.ExtractState.Captured                                              | The captured data
Method      | Z0.ExtractState.#ctor(Z0.OpIdentity,System.Int32,System.Int64,System.Byte)| Initializes a capture state
Property    | Z0.ExtractState.Empty                                                 | The empty state
Type        | Z0.IdentifiedCode                                                     | The hex bits found at the end of a uri
Method      | Z0.IdentifiedCode.From(Z0.ParseResult{Z0.OpUri},Z0.BinaryCode)        | Defines uri bits with a potentially bad uri (for diagnostic purposes)
Property    | Z0.IdentifiedCode.Encoded                                             | The encoded operation data
Property    | Z0.IdentifiedCode.Identifier                                          | An identifier populated with parsed operation uri text, when possible; otherwise populated with unparseable uri text
Property    | Z0.IdentifiedCode.OpUri                                               | The operation uri
Property    | Z0.IdentifiedCode.Id                                                  | The identifier of the defined operation
Property    | Z0.IdentifiedCode.Empty                                               | No code, no identity, no life
Type        | Z0.LocatedCode                                                        | Encoded x86 bytes extracted from a memory source with a known (nonzero) location
Property    | Z0.LocatedCode.Address                                                | The head of the memory location from which the data originated
Property    | Z0.LocatedCode.Encoded                                                | The encoded content
Property    | Z0.LocatedCode.Data                                                   | The encoded content as byte array
Type        | Z0.MemberCode                                                         | Defines a uri-identified encoded block with a known base address
Property    | Z0.MemberCode.OpUri                                                   | The source member identity
Property    | Z0.MemberCode.Encoded                                                 | The data, located
Property    | Z0.MemberCode.Data                                                    | The encoded content as byte array
Property    | Z0.MemberCode.Size                                                    | The encoded byte count
Field       | Z0.ParsedExtract.Extracted                                            | The extracted code
Property    | Z0.ParsedExtract.Encoded                                              | The parsed code
Property    | Z0.ParsedExtract.Sequence                                             | The extracted member sequence
Property    | Z0.ParsedExtract.TermCode                                             | The reason for extract completion
Property    | Z0.ParsedExtract.OpUri                                                | The operation uri
Property    | Z0.ParsedExtract.Id                                                   | The operation identifier
Property    | Z0.ParsedExtract.Method                                               | The member operation, reflected
Property    | Z0.ParsedExtract.KindId                                               | The member kind, if known
Method      | Z0.Enums.width(Z0.EnumScalarKind)                                     | Computes the bit-width of an enum with a specified base kind
Method      | Z0.Enums.signed(Z0.EnumScalarKind)                                    | Determines whether an enum base kind is signed
Method      | Z0.Enums.base(System.Type)                                            | Determines the integral type refined by a specified enum type
Method      | Z0.Enums.base``1                                                      | Determines the integral type refined by a parametrically-identified enum type
Method      | Z0.Enums.typecode``1                                                  | Determines an enumeration's underlying kind
Method      | Z0.Enums.scalar``2(``0)                                               | Reads a generic numeric value from a generic enum.
Method      | Z0.Enums.literal``2(``1)                                              | Reads a generic enum member from a generic value
Method      | Z0.Enums.scalar_slow``1(System.Enum)                                  | Reads a generic numeric value from a boxed enum
Method      | Z0.Enums.values``2                                                    | Gets the literals defined by an enumeration together with their integral values
Method      | Z0.Enums.defined``2(``1)                                              | Determines whether an enum has a specified integral value
Method      | Z0.Enums.evalue``2(Z0.EnumLiteral{``0},``1)                           | Defines an E-V parametric enum value given an E-parametric literal an a value:V
Method      | Z0.Enums.defined``1(``0)                                              | Determines whether an enum value is valid
Method      | Z0.Enums.index``1                                                     | Gets the declaration-order indices for each named literal
Method      | Z0.Enums.literals``1                                                  | Gets the literals defined by an enumeration
Method      | Z0.Enums.defined``1(System.String)                                    | Determines whether an enum defines a name-identified literal
Method      | Z0.Enums.dictionary``2                                                | Constructs a arbitrarily deduplicated value-to-member index
Method      | Z0.Enums.names``1                                                     | Gets the names of the (unique) enumeration literals
Method      | Z0.Enums.convert``1(System.Byte,``0)                                  | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.SByte,``0)                                 | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.Int16,``0)                                 | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.UInt16,``0)                                | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.Int32,``0)                                 | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.UInt32,``0)                                | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.Int64,``0)                                 | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.convert``1(System.UInt64,``0)                                | Safely, thus slowly, converts a numeric value to an enum value if and only if the numeric value            is represented by a declared literal
Method      | Z0.Enums.correlate``2                                                 | Correlates literal values predicated on identifier equality
Method      | Z0.Enums.correlate``2(System.String,``0,``1)                          | Defines, but does not verify, a correlation between enum literals
Method      | Z0.Enums.LiteralSequence``2                                           | Gets the literals defined by an enumeration together with their integral values
Method      | Z0.Enums.CreateLiteralArray``1                                        | Gets the literals defined by an enumeration
Method      | Z0.Enums.e8i``1(``0)                                                  | Interprets an enum value as a signed byte
Method      | Z0.Enums.e8u``1(``0)                                                  | Interprets an enum value as a byte
Method      | Z0.Enums.e16u``1(``0)                                                 | Interprets an enum value as an unsigned 16-bit integer
Method      | Z0.Enums.e16i``1(``0)                                                 | Interprets an enum value as a signed 16-bit integer
Method      | Z0.Enums.e32i``1(``0)                                                 | Interprets an enum value as a signed 32-bit integer
Method      | Z0.Enums.e32u``1(``0)                                                 | Interprets an enum value as an unsigned 32-bit integer
Method      | Z0.Enums.e64i``1(``0)                                                 | Interprets an enum value as a signed 64-bit integer
Method      | Z0.Enums.e64u``1(``0)                                                 | Interprets an enum value as an unsigned 64-bit integer
Method      | Z0.Enums.Parse``1(System.String,``0)                                  | Attempts to parses an enumeration literal, ignoring case, and returns a default value if parsing failed
Method      | Z0.Enums.Parse``1(System.String)                                      | Attempts o parse an enum literal, ignoring case, and returns a null value if parsing failed
Type        | Z0.EnumDataSource                                                     | Specifies a file that contains enum literal data aspects of the target enum type
Property    | Z0.EnumDataSource.File                                                | The name of the archived file that defines the enumeration literals
Property    | Z0.EnumDataSource.EnumName                                            | The enum type name identifier
Property    | Z0.EnumDataSource.BaseType                                            | The primal kind refined by the enum
Property    | Z0.EnumDataSource.Description                                         | The purpose of the enum
Method      | Z0.EnumInfo.define``2(Z0.MetadataToken,System.Int32,System.String,``0,``1)| Defines a useful representation of an enumeration literal
Type        | Z0.EnumLiteral                                                        | Defines a boxed enumeration literal as the triple (index,identifier,value)
Property    | Z0.EnumLiteral.Field                                                  | The compiler-emitted field that defines the literal
Property    | Z0.EnumLiteral.Index                                                  | The literal declaration order, unique within the declaring enum
Property    | Z0.EnumLiteral.Identifier                                             | The literal identifier, unique within the declaring enum
Property    | Z0.EnumLiteral.LiteralValue                                           | The literal value
Property    | Z0.EnumLiteral.DataType                                               | The enum's numeric data type
Property    | Z0.EnumLiteral.Token                                                  | The metadata token that identifies the backing field
Type        | Z0.EnumLiteral`1                                                      | Defines an enumeration literal as the triple (index,identifier,value)
Property    | Z0.EnumLiteral`1.Field                                                | The compiler-emitted field that defines the literal
Property    | Z0.EnumLiteral`1.Index                                                | The literal declaration order, unique within the declaring enum
Property    | Z0.EnumLiteral`1.Identifier                                           | The literal identifier, unique within the declaring enum
Property    | Z0.EnumLiteral`1.LiteralValue                                         | The literal E-value
Property    | Z0.EnumLiteral`1.DataType                                             | The enum's numeric data type
Property    | Z0.EnumLiteral`1.Description                                          | The meaning of the literal, if available
Property    | Z0.EnumLiteral`1.UserData                                             | User data attched to the literal, if any
Property    | Z0.EnumLiteral`1.Token                                                | The metadata token that identifies the backing field
Type        | Z0.EnumLiteral`2                                                      | Defines an E-V parametric enum value
Property    | Z0.EnumLiteral`2.NumericValue                                         | The literal V-value
Property    | Z0.EnumLiteral`2.Index                                                | The literal declaration order, unique within the declaring enum
Property    | Z0.EnumLiteral`2.Identifier                                           | The literal identifier, unique within the declaring enum
Property    | Z0.EnumLiteral`2.LiteralValue                                         | The literal E-value
Property    | Z0.EnumLiteral`2.DataType                                             | The numeric kind refined by the enum
Type        | Z0.EnumLiterals                                                       | Defines an untyped literal index
Type        | Z0.EnumLiterals`1                                                     | Defines an E-parametric literal index
Type        | Z0.EnumLiterals`2                                                     | Defines an E-V parametric literal index
Type        | Z0.LiteralCorrelation`2                                               | Captures name-corellated literals values
Field       | Z0.LiteralCorrelation`2.Name                                          | The common name
Field       | Z0.LiteralCorrelation`2.First                                         | The first enum value
Field       | Z0.LiteralCorrelation`2.Second                                        | The second enum value
Type        | Z0.Refinement`2                                                       | Let's pretend we can make refinement types in .Net
Type        | Z0.AppFileExt                                                         | Defines widely-used file extensions and a basic extension api
Method      | Z0.AppFileExt.Ext(System.String)                                      | Defines a file extension of length 4 or less - and should not include a leading '.'
Method      | Z0.AppFileExt.Ext(Z0.N8,System.String)                                | Defines a file extension of length 8 or or less - and should not include a leading '.'
Method      | Z0.AppFileExt.Ext(Z0.N16,System.String)                               | Defines a file extension of length 16 or or less - and should not include a leading '.'
Type        | Z0.FileExt                                                            | Defines an asci4 file extension
Type        | Z0.FileExt`1                                                          | Defines an asci-parametric file extension, for when 4 characters just won't cut it
Property    | Z0.FileExtA.Csv                                                       | Spcifies the 'csv' file extension
Property    | Z0.FileExtA.Cs                                                        | Spcifies the 'cs' file extension
Property    | Z0.FileExtA.Asm                                                       | Spcifies the 'asm' file extension
Property    | Z0.FileExtA.Dll                                                       | Spcifies the 'dll' file extension
Property    | Z0.FileExtA.Xml                                                       | Spcifies the 'xml' file extension
Property    | Z0.FileExtA.Exe                                                       | Spcifies the 'exe' file extension
Property    | Z0.FileExtA.Txt                                                       | Spcifies the 'txt' file extension
Property    | Z0.FileExtA.Il                                                        | Spcifies the 'il' file extension
Property    | Z0.FileExtA.Hex                                                       | Spcifies the 'hex' file extension
Property    | Z0.FileExtA.Log                                                       | Spcifies the 'log' file extension
Property    | Z0.FileExtA.StdOut                                                    | Spcifies the 'stdout' file extension
Property    | Z0.FileExtA.ErrOut                                                    | Spcifies the 'errors' file extension
Type        | Z0.IEncodedHexArchive                                                 | Specifies archive service operations for hosted bits
Method      | Z0.IEncodedHexArchive.Read                                            | Reads all files in the archive
Method      | Z0.IEncodedHexArchive.Read(PartId)                                    | Reads the archived files owned by a specified part
Method      | Z0.IEncodedHexArchive.Read(Z0.ApiHostUri)                             | Reads the archived files owned by a specified host
Method      | Z0.IEncodedHexArchive.Read(System.Func{Z0.FileName,System.Boolean})   | Reads all files in the archive that satisfy a supplied predicate
Method      | Z0.IEncodedHexArchive.Read(Z0.OpIdentity)                             | Reads the bits of an identified operation
Method      | Z0.IEncodedHexArchive.Read(Z0.FilePath)                               | Reads ths bits that live at a specified path
Method      | Z0.IEncodedHexArchive.ReadIndices(PartId[])                           | Reads the code owned by a specified collection of parts
Method      | Z0.IEncodedHexArchive.ReadIndex(Z0.FilePath)                          | Reads the code defined by a specified file
Method      | Z0.IEncodedHexReader.Read(Z0.FilePath)                                | Reads the content of a source file
Type        | Z0.IFileArchive                                                       | Characterizes an archive rooted at a specified path
Property    | Z0.IFileArchive.ArchiveRoot                                           | The directory to which path calculations are relative
Method      | Z0.IFileArchive.Files                                                 | Enumerates the archived files
Method      | Z0.IFileArchive.Files(PartId)                                         | Enumerates the archived files owned by a specified part
Type        | Z0.IFileStreamWriter                                                  | Characterizes an allocated file writer that targets a specified path
Property    | Z0.IFileStreamWriter.TargetPath                                       | The path to which the writer writes
Type        | Z0.IFileStreamWriter`1                                                | Characterizes a filestream writer that writes data of parametric type
Method      | Z0.IFileStreamWriter`1.Write(`0)                                      | Write one
Method      | Z0.IFileStreamWriter`1.Write(`0[])                                    | Write many
Type        | Z0.IMemberCodeReader                                                  | Defines service operations that support reading text-formatted encoded x86 asm data
Method      | Z0.IMemberCodeReader.Read(Z0.FilePath)                                | Reads the content of a source file
Type        | Z0.IMemberCodeWriter                                                  | Defines serivce contract for persting text-formatted x86 encoded assembly
Method      | Z0.IMemberCodeWriter.Write(Z0.MemberCode,System.Int32)                | Write host bits with a specified uri identifier padding
Type        | Z0.FileName                                                           | Defines a file name along with the extension in isolation             and without ascribing additional path content
Property    | Z0.FileName.HasExtension                                              | Does the file have an extension?
Property    | Z0.FileName.WithoutExtension                                          | The name of the file sans extension
Property    | Z0.FileName.Ext                                                       | The file's extension, if any
Method      | Z0.FileName.WithNewName(System.String)                                | Renames the file (in the model, not on disk)
Method      | Z0.FileName.Contains(System.String)                                   | Determines whether the filename, including the extension, contains a specified substring
Method      | Z0.FileName.EndsWith(System.String)                                   | Determines whether the filename, including the extension, ends with a specified substring
Method      | Z0.FileName.StartsWith(System.String)                                 | Determines whether the filename, begins with a specified substring
Method      | Z0.FileName.OwnedBy(PartId)                                           | Dtermines whether the name of a file is of the form {owner}.{.}.{*}
Property    | Z0.FileName.Owner                                                     | Specifies the file's owning part, if any
Method      | Z0.FileName.HostedBy(Z0.ApiHostUri)                                   | Determines whether the name of a file is of the form {owner}.{host}.{*}
Property    | Z0.FileName.ExtOption                                                 | The file extension, if any
Type        | Z0.FilePath                                                           | Represents a fully-qualified path to a file on the local machine
Property    | Z0.FilePath.None                                                      | Lonely, so
Property    | Z0.FilePath.Exists                                                    | Determines whether the modeled file exists on disk
Method      | Z0.FilePath.OwnedBy(PartId)                                           | Determines whether the filename is of the form {owner}.{.}.{*}
Method      | Z0.FilePath.HostedBy(Z0.ApiHostUri)                                   | Determines whether the filename is of the form {owner}.{host}.{*}
Property    | Z0.FilePath.Owner                                                     | Specifies the file's owning part, if any
Method      | Z0.FilePath.Contains(System.String)                                   | Determines whether the path contains a specified substring
Method      | Z0.FilePath.StartsWith(System.String)                                 | Determines whether the path begins with a specified substring
Method      | Z0.FilePath.EndsWith(System.String)                                   | Determines whether the path ends with a specified substring
Type        | Z0.FolderName                                                         | Defines a folder name in isolation without ascribing additional path content
Property    | Z0.FolderName.Description                                             | Describes the sort of file contained by the folder
Method      | Z0.FolderName.Define(PartId)                                          | Defines the name of a part-owned folder
Method      | Z0.FolderName.Define(Z0.ApiHostUri)                                   | Defines the name of an api host-owned folder
Type        | Z0.FolderPath                                                         | Represents a fully-qualified path to a folder on the local machine
Property    | Z0.FolderPath.Name                                                    | The full path name
Property    | Z0.FolderPath.One                                                     | Just the one
Property    | Z0.FolderPath.FolderName                                              | The name of the folder sans path
Method      | Z0.FolderPath.Define(System.String)                                   | Creates a folder path directly from text, with no intervening manipulation
Method      | Z0.FolderPath.op_Addition(Z0.FolderPath,Z0.FolderName)                | Combines a folder path with a subfolder name to form a new folder path
Method      | Z0.FolderPath.op_Addition(Z0.FolderPath,Z0.FileName)                  | Combines a folder path with a filename to form a file path
Property    | Z0.FolderPath.Exists                                                  | Specifies whether the represented directory actually exists within the file system
Method      | Z0.FolderPath.SubDir(Z0.FolderName)                                   | Defines a subdirectory path
Method      | Z0.FolderPath.SubDir(Z0.RelativeLocation)                             | Defines a relative subdirectory path
Property    | Z0.FolderPath.SubDirs                                                 | Nonrecursively enumerates the folder's subfolders
Property    | Z0.FolderPath.AllFiles                                                | Nonrecursively enumerates all files in the folder
Property    | Z0.FolderPath.WithoutSeparatorSuffix                                  | The folder path sans trailing separator
Method      | Z0.FolderPath.Files(Z0.FileExtension)                                 | Nonrecursively enumerates files in the directory, if it exists, that match a specified extension
Method      | Z0.FolderPath.Files(PartId,Z0.FileExtension)                          | Nonrecursively enumerates part-owned folder files
Method      | Z0.FolderPath.Files(Z0.ApiHostUri,Z0.FileExtension)                   | Nonrecursively enumerates host-owned folder files
Method      | Z0.FolderPath.Files(Z0.FileExtension,System.Boolean)                  | Enumerates files in the folder, with optional recursion, that match a specified extension
Method      | Z0.FolderPath.Files(PartId)                                           | Nonrecursively enumerates folder files owned by a specified part
Method      | Z0.FolderPath.Files(System.String)                                    | Nonrecursively enumerates folder files with names (including the extension) that contain a specified substring
Method      | Z0.FolderPath.Files(Z0.FileExtension,System.String)                   | Nonrecursively Enumerates folder files that match a specified exension and with names that contain a specified substring
Method      | Z0.FolderPath.Files(PartId,Z0.FileExtension,System.Boolean)           | Enumerates the files in the folder, with optional recursion, owned by a specified parth and which match a specified extension
Method      | Z0.FolderPath.Delete(System.Boolean)                                  | Consigns the folder and its contents to oblivion
Method      | Z0.FolderPath.Create                                                  | Creates the represented directory in the file system if it doesn't exist
Method      | Z0.FolderPath.Clear(PartId[])                                         | Deletes all files in the directory, but neither does it recurse nor delete folders
Type        | Z0.RelativeLocation                                                   | Represents a relative folder name
Type        | Z0.TArchive                                                           | Characterizes a file-system repository for anticipated file kinds
Property    | Z0.TArchive.ArchiveRoot                                               | The path to which all archive path arithmetic is relative
Property    | Z0.TArchive.RootPartition                                             | A folder name of the form PartFolder(part):{TestPartition | AppPartition} as determined by the identifier of the entry process
Property    | Z0.TArchive.ExeRoot                                                   | Defines a path that determines the root directory for process-specific archives             and is of the form {ArchiveRoot}/{RootPartition}
Property    | Z0.TArchive.ExeDir                                                    | Defines a process-specific path of the form {ExeRoot}/{ExeFolder} where             ExeFolder := PartFolder(part:PartId) and {part} is the identifier of the entry process
Method      | Z0.TArchive.ExeSubDir(Z0.FolderName)                                  | Defines a path of the form {ExeDir}/{folder}
Method      | Z0.TArchive.PartDir(PartId)                                           | Defines a path of the form {ExeRoot}/{ExeDir}/{part:Folder}
Type        | Z0.TArchiveExtensions                                                 | Defines file extensions common to all archives
Property    | Z0.TArchiveExtensions.Hex                                             | Extension for hex files
Property    | Z0.TArchiveExtensions.Asm                                             | Extension for formatted asm files
Property    | Z0.TArchiveExtensions.Il                                              | Extension for Cil files
Property    | Z0.TArchiveExtensions.Log                                             | Extension for application log files
Type        | Z0.TArchiveFileNames                                                  | Defines filename facilites common to all archives
Type        | Z0.TArchiveFolders                                                    | Defines folder names and facilites common to all archives
Property    | Z0.TArchiveFolders.TestPartition                                      | An archive partition for files emitted during test execution
Property    | Z0.TArchiveFolders.AppPartition                                       | An archive partition for files emitted during application execution
Property    | Z0.TArchiveFolders.DataPartition                                      | An archive partition for static data
Property    | Z0.TArchiveFolders.ExeFolder                                          | A folder name of form PartFolder(part:PartId) where {part} is the entry process identifier
Type        | Z0.TPathServices                                                      | Defines stateless file system services
Method      | Z0.TPathServices.Files(Z0.FolderPath,PartId[])                        | Nonrecursively enumerates the files in a directory owned by one of a supplied list of parts
Method      | Z0.TPathServices.PartFolder(PartId)                                   | Defines a part-specific folder name {part}
Method      | Z0.TPathServices.HostFolder(Z0.ApiHostUri)                            | Defines a host-specific folder name {host.Name}
Method      | Z0.TPathServices.TypeFolder(System.Type)                              | Defines a type-specific folder name {t.Name}
Method      | Z0.TPathServices.TypeFolder``1                                        | Defines a type-specific folder name {[T].Name} for parametric type T
Method      | Z0.Pipelines.ValueObserverPipe``1(Z0.Receiver{``0})                   | Creates an observation pipe from a receiver function
Method      | Z0.Pipelines.ValueObserverFlow``1                                     | Creates a value observation flow
Method      | Z0.Pipelines.ValueObserverFlow``2                                     | Creates a value observation flow
Method      | Z0.Pipelines.RunObservationFlow``1(System.Collections.Generic.IEnumerable{``0},Z0.Receiver{``0})| Pushes a stream through a reciever via obbservation flow/pipe system
Method      | Z0.Pipelines.ValueFactoryPipe``2(Z0.Mapper{``0,``1})                  | Creates a factory pipe froma production function
Method      | Z0.Pipelines.ObjectFactoryPipe``2(Z0.ObjectTransformer{``0,``1})      | Creates a factory pipe froma production function
Method      | Z0.Pipelines.ObjectObserverFlow``1                                    | Creates an object observation flow
Method      | Z0.Pipelines.ObjectObserverFlow``2                                    | Creates an object observation flow
Method      | Z0.Pipelines.SpanPipe``1(Z0.EditorOp{``0})                            | Creates a piple that uses spans as the unit of transmission, predicated on a suppled editor
Method      | Z0.Pipelines.SpanFlow``1                                              | Creates a piple that uses spans as the unit of transmission
Method      | Z0.Pipelines.StreamSink``1(Z0.StreamReceiver{``0})                    | Creates a stream value sink predicated on a supplied delegate receiver
Method      | Z0.Pipelines.SpanSink``1(Z0.SpanReceiver{``0})                        | Creates a span value sink predicated on a supplied delegate receiver
Method      | Z0.Pipelines.SendBatch``1(System.Collections.Generic.IEnumerable{``0},Z0.SpanReceiver{``0},System.Int32,System.Action{System.Int32})| Sends data from the source stream to a span receiver in batches
Method      | Z0.Pipelines.SendBatched``1(System.Collections.Generic.IEnumerable{``0},Z0.SpanReceiver{``0},System.Int32)| Sends data from the source stream to a span receiver in batches
Type        | Z0.ObjectFactoryPipe`2                                                | Reifies a value factor pipe via a supplied production function
Method      | Z0.ObjectFactoryPipe`2.Flow(`0@)                                      | Transforms a source value to a target value via the producer with which the pipe was instantiated
Type        | Z0.ValueFactoryPipe`2                                                 | Reifies a value factor pipe via a supplied production function
Method      | Z0.ValueFactoryPipe`2.Flow(`0@)                                       | Transforms a source value to a target value via the producer with which the pipe was instantiated
Type        | Z0.ObjectTransformer`2                                                | Characterizes a function that produces T-objects from S-objects
Type        | Z0.ObjectRelay`1                                                      | Characterizes a function that receives/emits an object without modification
Type        | Z0.IObjectFactoryFlow`3                                               | Characterizes a coordinator that manages value production
Type        | Z0.ISpanFlow`1                                                        | Characterizes an orchestrator that coordinates data transmission
Type        | Z0.IValueFactoryFlow`2                                                | Characterizes a coordinator that manages value production
Type        | Z0.IValueFactoryFlow`3                                                | Characterizes a coordinator that manages value production
Type        | Z0.IFlow                                                              | Characterizes an orchestrator that coordinates data transmission
Type        | Z0.IPipe                                                              | Characterizes a conduit that transmits singletons and sequences from A -&gt; B
Type        | Z0.IObjectFactoryPipe`2                                               | Characterizes a conduit that accepts S-values and produces T-values
Method      | Z0.IObjectFactoryPipe`2.Flow(`0@)                                     | Produces a target value from a source value
Method      | Z0.IObjectFactoryPipe`2.Flow(System.Collections.Generic.IEnumerable{`0})| Transforms a stream of source values into a stream of target values
Type        | Z0.IValueFactoryPipe`2                                                | Characterizes a conduit that accepts S-values and produces T-values
Method      | Z0.IValueFactoryPipe`2.Flow(`0@)                                      | Produces a target value from a source value
Method      | Z0.IValueFactoryPipe`2.Flow(System.Collections.Generic.IEnumerable{`0})| Transforms a stream of source values into a stream of target values
Type        | Z0.HexIndex`1                                                         | Defines a sequence of umanaged values indexed by an integer in the range [0,255]
Type        | Z0.HexKindValue`1                                                     | Defines an association between an integer in the range [0,0xFF] and unmanaged data of parametric type
Method      | Z0.Hex.code(System.Byte)                                              | Returns the hex character code for a number in the interval [0,15]
Method      | Z0.Hex.digits(System.Byte)                                            | Computes the 2-character hex representation of a byte
Method      | Z0.Hex.digits(System.SByte)                                           | Computes the 2-character hex representation of a signed byte
Method      | Z0.Hex.digits(System.UInt16)                                          | Computes the 4-character hex representation of an unsigned 16-bit integer
Method      | Z0.Hex.digits(System.Int16)                                           | Computes the 4-character hex representation of a signed 16-bit integer
Method      | Z0.Hex.digits(System.UInt32)                                          | Computes the 8-character hex representation of an unsigned 32-bit integer
Method      | Z0.Hex.digits(System.Int32)                                           | Computes the 8-character hex representation of a signed 32-bit integer
Method      | Z0.Hex.digits(System.UInt64)                                          | Computes the 16-character hex representation of an unsigned 64-bit integer
Method      | Z0.Hex.digits(System.Int64)                                           | Computes the 16-character hex representation of a signed 64-bit integer
Property    | Z0.IApiMethod.HostUri                                                 | The globally-unique host uri
Property    | Z0.IApiMethod.Method                                                  | The hosted method
Property    | Z0.IApiMethod.KindId                                                  | The method's kind identifier if it exists
Type        | Z0.ApiMember                                                          | Describes a reified api member wich may be of hosted or located state
Type        | Z0.ClosedApiMethod                                                    | Captures identifying/descriptive information about a generic closure
Property    | Z0.ClosedApiMethod.Host                                               | The delcaring host
Property    | Z0.ClosedApiMethod.Id                                                 | The closure identity
Property    | Z0.ClosedApiMethod.Kind                                               | The primal kind over which the subject operation was closed
Property    | Z0.ClosedApiMethod.Method                                             | The closed method
Property    | Z0.ClosedApiMethod.HostUri                                            | The hosting type uri
Method      | Z0.ClosedApiMethod.#ctor(Z0.IApiHost,Z0.OpIdentity,Z0.NumericKind,System.Reflection.MethodInfo)| Initializes a closure specification
Property    | Z0.DelegateIdentity.Parameters                                        | The type parameters that define the full delegate signature that includes the return type            as the last identity in the array
Property    | Z0.DelegateIdentity.DelegateName                                      | The unadorned name of the delegate tyepe
Property    | Z0.DelegateIdentity.Identifier                                        | The identifier computed from the name and parameter identities
Property    | Z0.DelegateIdentity.Generic                                           | Indicates whether identifier should be rendered with a generic marker
Type        | Z0.DirectApiGroup                                                     | Defines a grouping construct for relating non-generic operations
Property    | Z0.DirectApiGroup.GroupId                                             | The group identity
Property    | Z0.DirectApiGroup.Host                                                | The delcaring host
Property    | Z0.DirectApiGroup.Members                                             | The grouped operations
Property    | Z0.DirectApiMethod.Host                                               | The delcaring host
Property    | Z0.DirectApiMethod.Id                                                 | The operation identity
Property    | Z0.DirectApiMethod.Method                                             | The concrete method that defines the operation
Property    | Z0.DirectApiMethod.HostUri                                            | The hosting type uri
Property    | Z0.GenericOpIdentity.Identifier                                       | The operation identifier
Method      | Z0.GenericOpIdentity.Define(System.String)                            | Creates a moniker directly from source text
Type        | Z0.LegalIdentifier                                                    | Alternate identity indidators for use in source code identifier production
Property    | Z0.OpUri.UriText                                                      | The full uri in the form {Scheme}://{HostPath}/{OpId}
Field       | Z0.OpUri.Scheme                                                       | The uri scheme, constrained to the defining enumeration
Field       | Z0.OpUri.Host                                                         | The host fragment, of the form {assmblyid}/{hostname}
Field       | Z0.OpUri.GroupName                                                    | The name assigned to a group of methods; usually agrees with what is called a "method group" in clr-land            The purpose of the group name is to classify/identify a related set of methods and, again, this typically            corresponds to the "name" property on a method
Field       | Z0.OpUri.OpId                                                         | Defines host-relative identity in the form, for example, {opname}_{typewidth}X{segwidth}{u | i | f}
Property    | Z0.OpUri.Part                                                         | The defining part
Property    | Z0.OpUri.Empty                                                        | Emptiness of nothing
Type        | Z0.IIdentityProvider`1                                                | Characterizes a serviice capable of assigning identity to T-values
Field       | Z0.Memories.One8u                                                     | One, presented as an 8-bit unsigned integer
Field       | Z0.Memories.Zero16i                                                   | Zero, presented as a 16-bit signed integer
Field       | Z0.Memories.Zero16u                                                   | Zero, presented as a 16-bit unsigned integer
Field       | Z0.Memories.Zero32i                                                   | Zero, presented as a 32-bit signed integer
Field       | Z0.Memories.Zero32u                                                   | Zero, presented as a 32-bit unsigned integer
Field       | Z0.Memories.Zero64i                                                   | Zero, presented as a 64-bit signed integer
Field       | Z0.Memories.Zero64u                                                   | Zero, presented as a 64-bit unsigned integer
Field       | Z0.Memories.z8i                                                       | The zero-value for an 8-bit signed integer
Field       | Z0.Memories.z8                                                        | The zero-value for an 8-bit usigned integer
Field       | Z0.Memories.z16i                                                      | The zero-value for a 16-bit signed integer
Field       | Z0.Memories.z16                                                       | The zero-value for a 16-bit unsigned integer
Field       | Z0.Memories.z32i                                                      | The zero-value for a 32-bit signed integer
Field       | Z0.Memories.z32                                                       | The zero-value for a 32-bit usigned integer
Field       | Z0.Memories.z64i                                                      | The zero-value for a 64-bit signed integer
Field       | Z0.Memories.z64                                                       | The zero-value for a 64-bit usigned integer
Field       | Z0.Memories.z32f                                                      | The zero-value for a 32-bit float
Field       | Z0.Memories.z64f                                                      | The zero-value for a 64-bit float
Field       | Z0.Memories.Max8u                                                     | The largest representable value v where v:uint8
Field       | Z0.Memories.Max16u                                                    | The largest representable value v where v:uint16
Field       | Z0.Memories.Max24u                                                    | The largest representable value v where v:uint24
Field       | Z0.Memories.Max32u                                                    | The largest representable value v where v:uint32
Field       | Z0.Memories.Max40u                                                    | The largest representable value v where v:uint40
Field       | Z0.Memories.Max48u                                                    | The largest representable value v where v:uint48
Field       | Z0.Memories.Max56u                                                    | The largest representable value v where v:uint56
Field       | Z0.Memories.Max64u                                                    | The largest representable value v where v:uint64
Method      | Z0.Memories.array``1(``0[])                                           | Constructs an array from a parameter array
Method      | Z0.Memories.set``1(``0[])                                             | Constructs an array from a parameter array
Method      | Z0.Memories.cast``1(System.Object)                                    | Explicitly casts a source value to value of the indicated type, raising an exception if operation fails
Method      | Z0.Memories.cells``2(``0,``1)                                         | Counts the number of numeric T-cells that can be convered by contiguous memory of width W
Method      | Z0.Memories.concat(System.Object[])                                   | Joins the string representation of a sequence of items with no interspersed separator
Method      | Z0.Memories.constptr``1(``0@)                                         | Presents a readonly reference as a generic pointer which should intself be considered constant            but, as far as the author is aware, no facility within the language can encode that constraint
Method      | Z0.Memories.constptr``1(``0@,System.Int32)                            | Presents a readonly reference as a generic pointer displaced by an element offset
Method      | Z0.Memories.convert``2(``0)                                           | If possible, applies the conversion S -&gt; T
Method      | Z0.Memories.convert``1(System.Byte,``0)                               | If possible, applies the conversion byte -&gt; T
Method      | Z0.Memories.convert``1(System.SByte,``0)                              | If possible, applies the conversion sbyte -&gt; T
Method      | Z0.Memories.convert``1(System.UInt16,``0)                             | If possible, applies the conversion ushort -&gt; T
Method      | Z0.Memories.convert``1(System.Int16,``0)                              | If possible, applies the conversion short -&gt; T
Method      | Z0.Memories.convert``1(System.Int32,``0)                              | If possible, applies the conversion int -&gt; T
Method      | Z0.Memories.convert``1(System.UInt32,``0)                             | If possible, applies the conversion uint -&gt; T
Method      | Z0.Memories.convert``1(System.Int64,``0)                              | If possible, applies the conversion long -&gt; T
Method      | Z0.Memories.convert``1(System.UInt64,``0)                             | If possible, applies the conversion ulong -&gt; T
Method      | Z0.Memories.convert``1(System.Single,``0)                             | If possible, applies the conversion float -&gt; T
Method      | Z0.Memories.convert``1(System.Double,``0)                             | If possible, applies the conversion double -&gt; T
Method      | Z0.Memories.delay(System.TimeSpan)                                    | Returns after specified duration has elapsed
Method      | Z0.Memories.delayAsync(System.TimeSpan)                               | Introduces an asynchronous delay
Method      | Z0.Memories.edit``1(``0@)                                             | Presents a readonly reference as reference
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Single}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector128{System.Double}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Single}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.generic``1(System.Runtime.Intrinsics.Vector256{System.Double}@)| Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.Memories.head``1(System.Span{``0})                                 | Returns a reference to the head of a readonly span
Method      | Z0.Memories.head``1(System.Span{``0},System.Int32)                    | Returns a reference to the head of a span, offset by a specified amount
Method      | Z0.Memories.head``1(System.ReadOnlySpan{``0})                         | Returns a reference to the head of a readonly span
Method      | Z0.Memories.head``1(System.ReadOnlySpan{``0},System.Int32)            | Returns a readonly reference to the head of a readonly span, offset by a specified amount
Method      | Z0.Memories.head``1(``0[])                                            | Returns a reference to the head of a readonly span
Method      | Z0.Memories.increment(System.Int32@)                                  | Atomically increments a value in-place
Method      | Z0.Memories.increment(System.Int64@)                                  | Atomically increments a value in-place
Method      | Z0.Memories.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)| Iterates over the supplied items, invoking a receiver for each
Method      | Z0.Memories.iteri``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})| Iterates over the supplied items, invoking an indexed receiver for each
Method      | Z0.Memories.list``1(System.Int32)                                     | Creates a list with specified capacity
Method      | Z0.Memories.list``1(``0[])                                            | Creates a list from a parameter array
Method      | Z0.Memories.location``1(``0@)                                         | Returns the memory addres of the source reference
Method      | Z0.Memories.mapi``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})| Applies the supplied function to each element in the input sequence to produce a list
Method      | Z0.Memories.maxval``1                                                 | Returns the maximum value supported by a parametrically-identified primal type
Method      | Z0.Memories.minval``1                                                 | Returns the minimum value supported by a parametrically-identified primal type
Method      | Z0.Memories.min``1(Z0.NK{``0})                                        | Returns the minimum value supported by a parametrically-identified primal type
Method      | Z0.Memories.nati``1(``0)                                              | Retrieves the value of a type natural represented as a signed integer
Method      | Z0.Memories.none``1                                                   | Defines a non-valued option
Method      | Z0.Memories.denullify(System.String)                                  | If the test string is null, returns the empty string; otherwise, returns the test string
Method      | Z0.Memories.one``1                                                    | Returns generic 1 for a primal source type
Method      | Z0.Memories.one``1(``0)                                               | Returns generic 1 for a primal source type
Method      | Z0.Memories.ones``1                                                   | Ones all bits each and every ... one
Method      | Z0.Memories.ones``1(``0)                                              | Ones all bits each and every ... one
Method      | Z0.Memories.option``1(``0)                                            | Defines an option for a reference type; a valued option is produced if the source is non-null; otherwise, a non-valued option is produced
Method      | Z0.Memories.option``1(System.Nullable{``0})                           | Defines an option for a nullable value type; a valued option is produced if the source is non-null; otherwise, a non-valued option is produced
Method      | Z0.Memories.ptr``1(``0@)                                              | Presents generic reference as a generic pointer
Method      | Z0.Memories.ptr``1(``0@,System.Int32)                                 | Presents generic reference as a generic pointer displaced by an element offset
Method      | Z0.Memories.seek``1(``0@,System.Int32)                                | Adds an offset to a reference, measured relative to the reference type
Method      | Z0.Memories.seek``1(System.Span{``0},System.Int32)                    | Adds an offset to the head of a span, measured relative to the reference type
Method      | Z0.Memories.seek64``1(System.Span{``0},System.Int32)                  | Adds an offset to the head of a span, measured relative to 64-bit segments, and returns the resulting reference
Method      | Z0.Memories.seq``1(``0[])                                             | Constructs a enumerable from a parameter array
Method      | Z0.Memories.sfunc``1                                                  | Creates a structural function of specified parametric type
Method      | Z0.Memories.sfunc``2(``0,``1)                                         | Creates a structural function of specified parametric type
Method      | Z0.Memories.sfunc``3(``0,``1,``2)                                     | Creates a structural function of specified parametric type
Method      | Z0.Memories.skip``1(``0@,System.Int32)                                | Skips a specified number of source elements and returns a readonly reference to the resulting element
Method      | Z0.Memories.skip``1(System.Span{``0},System.Int32)                    | Adds an offset to the head of a span, measured relative to the reference type
Method      | Z0.Memories.skip``1(System.ReadOnlySpan{``0},System.Int32)            | Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
Method      | Z0.Memories.some``1(``0)                                              | Defines a valued option
Method      | Z0.Memories.span``1(``0[])                                            | Constructs a span from a parameter array
Method      | Z0.Memories.task``1(System.Func{``0})                                 | Executes a worker that computes a value within the context of a new task
Method      | Z0.Memories.task(System.Action)                                       | Executes a worker within the context of a new task
Method      | Z0.Memories.task``2(System.Func{``0,``1},``0)                         | Executes a worker that computes a value within the context of a new task
Method      | Z0.Memories.thread(System.UInt32)                                     | Searches for a thread given an OS-assigned id, not the useless clr id
Method      | Z0.Memories.Try``1(System.Func{``0},System.Action{System.Exception})  | Evaluates a function within a try block and returns the value of the computation if             successful; otherwise, returns None and invokes an error handler if supplied
Method      | Z0.Memories.Try(System.Action,System.Action{System.Exception})        | Invokes an action within a try block and, upon error, calls            the handler if specified. If no handler is specified, the exception            message is emitted to stderr
Method      | Z0.Memories.TryCast``1(System.Object)                                 | Casts a value to a parametric type, if possible, otherwise returns none
Method      | Z0.Memories.unbox``1(System.Object)                                   | Takes a value out of a box
Method      | Z0.Memories.unbox``1(System.Enum)                                     | Takes an enum value out of a box
Method      | Z0.Memories.unparsed``1(System.Object,System.String)                  | Defines a parse failure result
Method      | Z0.Memories.value``1(``0)                                             | Returns the numeric value represented by a natural type
Method      | Z0.Memories.val8u``1(``0)                                             | Returns the numeric value represented by a natural type
Method      | Z0.Memories.vcell``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extracts an index-identified component from the source vector
Method      | Z0.Memories.vcell``2(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extracts a T-indexed component from a vector obtained by converting the S-vector to a T-vector
Method      | Z0.Memories.vcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector128{``0})| Sets an index-identified component to a specified value
Method      | Z0.Memories.vcell``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extracts an index-identified component from the source vector
Method      | Z0.Memories.vcell``1(``0,System.Int32,System.Runtime.Intrinsics.Vector256{``0})| Sets an index-identified component to a specified value
Method      | Z0.Memories.vcell8i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell8``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell16i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell16``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell32i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell32``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell64i``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell64``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell32f``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell64f``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell8i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell8``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell16i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell16``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell32i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell32``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell64``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell64i``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell32f``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vcell64f``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)| Extract an index-identified component of a reinterpreted vector
Method      | Z0.Memories.vto``2(System.Runtime.Intrinsics.Vector128{``0},``1)      | Reinterprets a vector over S-cells as a vector over T-cells
Method      | Z0.Memories.vto``2(System.Runtime.Intrinsics.Vector256{``0},``1)      | Reinterprets a vector over S-cells as a vector over T-cells
Method      | Z0.Memories.v8i``1(System.Runtime.Intrinsics.Vector128{``0})          | Presents a generic cpu vector as a cpu vector with components of type int8
Method      | Z0.Memories.v8u``1(System.Runtime.Intrinsics.Vector128{``0})          | Presents a generic cpu vector as a cpu vector with components of type uint8
Method      | Z0.Memories.v16i``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type int16
Method      | Z0.Memories.v16u``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type uint16
Method      | Z0.Memories.v32i``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type int32
Method      | Z0.Memories.v32u``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type uint32
Method      | Z0.Memories.v64i``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type int64
Method      | Z0.Memories.v64u``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type uint64
Method      | Z0.Memories.v32f``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type float32
Method      | Z0.Memories.v64f``1(System.Runtime.Intrinsics.Vector128{``0})         | Presents a generic cpu vector as a cpu vector with components of type float64
Method      | Z0.Memories.v8i``1(System.Runtime.Intrinsics.Vector256{``0})          | Presents a generic cpu vector as a cpu vector with components of type int8
Method      | Z0.Memories.v8u``1(System.Runtime.Intrinsics.Vector256{``0})          | Presents a generic cpu vector as a cpu vector with components of type uint8
Method      | Z0.Memories.v16i``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type int16
Method      | Z0.Memories.v16u``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type uint16
Method      | Z0.Memories.v32i``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type int32
Method      | Z0.Memories.v32u``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type uint32
Method      | Z0.Memories.v64i``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type int64
Method      | Z0.Memories.v64u``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type uint64
Method      | Z0.Memories.v32f``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type float32
Method      | Z0.Memories.v64f``1(System.Runtime.Intrinsics.Vector256{``0})         | Presents a generic cpu vector as a cpu vector with components of type float64
Method      | Z0.Memories.vcount``2(``0,``1)                                        | Computes the vector component count for a given bit-width and component type
Method      | Z0.Memories.vcount``1(Z0.N128,``0)                                    | Computes the vector component count for a given bit-width and component type
Method      | Z0.Memories.vcount``1(Z0.N256,``0)                                    | Computes the vector component count for a given bit-width and component type
Method      | Z0.Memories.vcount``1(Z0.N512,``0)                                    | Computes the vector component count for a given bit-width and component type
Method      | Z0.Memories.vhead``1(System.Runtime.Intrinsics.Vector128{``0})        | Extracts the first component of the source vector
Method      | Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)| __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.SByte,System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)| __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)PINSRB xmm, reg/m8, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.Int16,System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)| __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)| __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.Int32,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N0)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Effects dst[0] = src
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N1)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Effects dst[1] = src
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N2)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Effects dst[2] = src
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector128{System.UInt32},Z0.N3)| __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, xmm8            Effects dst[3] = src
Method      | Z0.Memories.vinsert(System.Int64,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)| __m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64,imm8            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.UInt64,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)| _mm_insert_epi64:            Overwrites an identified component in the target vector with a specified value
Method      | Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte,System.Byte)| Overwrites an index-indentified cell in an index-identified lane with a specified value
Method      | Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N0,System.Byte)| Overwrites an index-indentified cell in the first in the lower lane with a specified value
Method      | Z0.Memories.vinsert(System.Byte,System.Runtime.Intrinsics.Vector256{System.Byte},Z0.N1,System.Byte)| Overwrites an index-indentified cell in the upper lane with a specified value
Method      | Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N0,System.Byte)| Overwrites an index-indentified cell in the lower lane with a specified value
Method      | Z0.Memories.vinsert(System.UInt16,System.Runtime.Intrinsics.Vector256{System.UInt16},Z0.N1,System.Byte)| Overwrites an index-indentified cell in the upper lane with a specified value
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N0,System.Byte)| Overwrites an index-indentified cell in the lower lane with a specified value
Method      | Z0.Memories.vinsert(System.UInt32,System.Runtime.Intrinsics.Vector256{System.UInt32},Z0.N1,System.Byte)| Overwrites an index-indentified cell in the upper lane with a specified value
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)| __m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8            Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)| _mm256_insertf128_ps: Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.vlane(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)| _mm256_insertf128_pd: Overwrites a 128-bit lane in the target with the content of the source vector
Method      | Z0.Memories.width``1                                                  | Computes the type width of a prametrically-identified type
Method      | Z0.Memories.yn(System.Boolean)                                        | Yea or Nea?
Method      | Z0.Memories.yn(Z0.bit)                                                | Yea or Nea?
Method      | Z0.Memories.yn(System.Byte)                                           | Yea or Nea?
Method      | Z0.Memories.yn(System.SByte)                                          | Yea or Nea?
Method      | Z0.Memories.yn(System.Int16)                                          | Yea or Nea?
Method      | Z0.Memories.yn(System.UInt16)                                         | Yea or Nea?
Method      | Z0.Memories.yn(System.Int32)                                          | Yea or Nea?
Method      | Z0.Memories.yn(System.UInt32)                                         | Yea or Nea?
Method      | Z0.Memories.yn(System.Int64)                                          | Yea or Nea?
Method      | Z0.Memories.yn(System.UInt64)                                         | Yea or Nea?
Method      | Z0.Memories.yn``1(``0)                                                | Yea or Nea?
Type        | Z0.IBufferedChecker                                                   | Characterizes a test service that provides access to a buffer sequence
Property    | Z0.IBufferedChecker.Buffers                                           | All the buffers belong to this
Property    | Z0.IBufferedChecker.Z0#IBufferTokenSource#Item(Z0.BufferSeqId)        | Returns the token of an index-identified buffer
Method      | Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})| Returns true if the character spans are equal as strings, false otherwise
Method      | Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})| Returns true if the character spans are equal as strings, false otherwise
Method      | Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})| Returns true if the character spans are equal as strings, false otherwise
Method      | Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32})| Returns true if the character spans are equal as strings, false otherwise
Method      | Z0.ICheckPrimalSeq.ContentEqual(System.ReadOnlySpan{System.UInt64},System.ReadOnlySpan{System.UInt64})| Returns true if the character spans are equal as strings, false otherwise
Method      | Z0.ICheckPrimalSeq.eq(System.Boolean[],System.Boolean[],System.String,System.String,System.Nullable{System.Int32})| Asserts the equality of two boolean arrays
Method      | Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.String,System.String,System.Nullable{System.Int32})| Asserts content equality for two character spans
Method      | Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.String,System.Nullable{System.Int32})| Asserts content equality for two byte spans
Method      | Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.String,System.String,System.Nullable{System.Int32})| Asserts content equality for two byte spans
Method      | Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.UInt32},System.ReadOnlySpan{System.UInt32},System.String,System.String,System.Nullable{System.Int32})| Asserts content equality for two byte spans
Method      | Z0.ICheckPrimalSeq.eq(System.ReadOnlySpan{System.UInt64},System.ReadOnlySpan{System.UInt64},System.String,System.String,System.Nullable{System.Int32})| Asserts content equality for two byte spans
Type        | Z0.AppMsg                                                             | Defines a message that encapsulates application diagnstic/status/error message content
Property    | Z0.AppMsg.Content                                                     | The message body
Property    | Z0.AppMsg.Kind                                                        | The message classification
Property    | Z0.AppMsg.Color                                                       | The message foreground color when rendered for display
Property    | Z0.AppMsg.Caller                                                      | The name of the member that originated the message
Property    | Z0.AppMsg.CallerFile                                                  | The path to the source file in which the message originated
Property    | Z0.AppMsg.FileLine                                                    | The source file line number on which the message originated
Property    | Z0.AppMsg.Displayed                                                   | Specifies whether the message has been emitted to an output device, such as the terminal
Method      | Z0.AppMsg.WithPrependedContent(System.Object)                         | Prepends the message body with specified content
Method      | Z0.AppMsg.AsDisplayed                                                 | Sets the display state to true
Method      | Z0.AppEvents.sink``1(System.Action{``0})                              | Creates an even sink predicated on a receiver
Method      | Z0.AppEvents.sink(System.Action{Z0.IAppEvent})                        | Creates an even sink predicated on a receiver
Method      | Z0.AppEvents.subscribe``1(``0,Z0.IEventBroker,System.Action{``0})     | Registers an event receiver to which brokered events will be relayed
Method      | Z0.AppMsgExchange.Create(Z0.IAppMsgQueue)                             | Creates an exchange over an existing queue
Method      | Z0.AppMsgExchange.Create                                              | Creates an exchange and underlying queue
Method      | Z0.AppMsgExchange.Deposit(Z0.IAppMsg)                                 | Enqueues application messages
Type        | Z0.AppMsgQueue                                                        | A container of messages which isnt't realy a queue but is more-or-less thread-safe
Method      | Z0.term.magenta(System.Object)                                        | Emits an information-level message with a magenta foreground
Method      | Z0.term.magenta(System.String,System.Object)                          | Emits an information-level message with a magenta foreground
Method      | Z0.term.green(System.Object)                                          | Emits an information-level message with a magenta foreground
Method      | Z0.term.green(System.String,System.Object)                            | Emits an information-level message with a magenta foreground
Method      | Z0.term.cyan(System.Object)                                           | Emits an information-level message with a cyan foreground
Method      | Z0.term.cyan(System.String,System.Object)                             | Emits an information-level message with a cyan foreground
Method      | Z0.term.red(System.Object)                                            | Emits an information-level message with a red foreground, typically used to emit error messages             at the point of occurrence, not at the point at which they are handled
Method      | Z0.term.red(System.String,System.Object)                              | Emits an information-level message with a red foreground, typically used to emit error messages             at the point of occurrence, not at the point at which they are handled
Method      | Z0.term.yellow(System.Object)                                         | Emits an information-level message with a yellow foreground
Method      | Z0.term.yellow(System.String,System.Object)                           | Emits an information-level message with a yellow foreground
Method      | Z0.term.babble(System.Object)                                         | Emits a verbose-level message
Method      | Z0.term.inform(System.Object)                                         | Emits an information-level message
Method      | Z0.term.announce(System.String)                                       | Announces a menthod invocation
Method      | Z0.term.warn(System.Object,System.String,System.String,System.Nullable{System.Int32})| Emits a warning-level message
Method      | Z0.term.error(System.Object,System.String,System.String,System.Nullable{System.Int32})| Emits message to the error output stream
Method      | Z0.term.error(System.Exception,System.String,System.String,System.Nullable{System.Int32})| Emits a message to the error output stream
Method      | Z0.term.error(Z0.ClaimException,System.String,System.String,System.String,System.Nullable{System.Int32})| Emits a message to the error output stream
Method      | Z0.term.errlabel(System.Exception,System.String,System.String,System.String,System.Nullable{System.Int32})| Emits a message to the error output stream
Method      | Z0.term.print                                                         | Writes an empty line to the console
Method      | Z0.term.print(Z0.IAppMsg)                                             | Writes a single messages to the terminal
Method      | Z0.term.print(Z0.IAppMsg,Z0.AppMsgColor)                              | Writes a single messages to the terminal
Method      | Z0.term.print(Z0.AppMsg)                                              | Writes a single messages to the terminal
Method      | Z0.term.print(System.Object)                                          | Writes a single line to the terminal
Method      | Z0.term.print``1(``0,Z0.AppMsgColor)                                  | Writes formattables to the console in a contiguous block
Method      | Z0.term.print``1(``0)                                                 | Writes formattables to the console in a contiguous block
Method      | Z0.term.print``1(``0[])                                               | Writes formattables to the console in a contiguous block
Method      | Z0.term.print``1(Z0.AppMsgColor,``0[])                                | Writes formattables to the console in a contiguous block using a specified foreground color
Method      | Z0.term.print(System.Collections.Generic.IEnumerable{Z0.AppMsg})      | Prints a sequence of messages in an unbroken block
Method      | Z0.term.read                                                          | Reads a line of text from the terminal
Method      | Z0.term.readKey(System.String)                                        | Reads a character from the terminal
Method      | Z0.term.read(System.String)                                           | Reads a line of text from the terminal after printing a supplied message
Type        | Z0.EventRelay                                                         | Defines a sink that forwards deposits to a receiver
Type        | Z0.EventRelay`1                                                       | Defines a sink that forwards deposits to a receiver
Type        | Z0.Terminal                                                           | Implments a thread-safe/thread-aware terminal absraction
Method      | Z0.Terminal.SetTerminationHandler(System.Action)                      | Specfifies the handler to invoke when the user enters a cancellation            command, such as Ctrl+C
Method      | Z0.Terminal.WriteChar(System.Char,System.Nullable{Z0.AppMsgColor})    | Writes a single character to the console
Type        | Z0.IAppError                                                          | Characterizes an event that describes an error
Type        | Z0.IAppError`1                                                        | Characterizes an error event reification
Type        | Z0.IAppEvent                                                          | Characterizes a correlated message, accompanied by arbitrary content,             that describes an occurrence of something interesting
Property    | Z0.IAppEvent.Content                                                  | The data associated with the event
Type        | Z0.IAppEvent`1                                                        | Characterizes a reified application event
Type        | Z0.IAppEventSink`1                                                    | Characterizes an event-parametric application event sink
Type        | Z0.IAppMsgContext                                                     | Joines a sink and receiver to form a context
Type        | Z0.IAppMsgExchange                                                    | Characterizes a stateful thing that functions as an exchange for application messages
Type        | Z0.IEventBroker                                                       | Characterizes an application even exchange hub
Method      | Z0.IEventBroker.Subscribe``2(``0,``1)                                 | Registers a target sink to which events will be routed
Method      | Z0.IEventBroker.Subscribe``1(System.Action{``0},``0)                  | Registers an Event-parametric receiver to invoke upon occurrence of the parametrically-identified event
Method      | Z0.IEventBroker.Subscribe(System.Action{Z0.IAppEvent},Z0.IAppEvent)   | Registers a non-parametric receiver to invoke upon occurrence of a specified event
Method      | Z0.IEventBroker.Raise``1(``0@)                                        | Relays an event to sinks and receivers registerd with the broker
Type        | Z0.IFixed                                                             | Characterizes a type that occupies a fixed amount of space at runtime
Property    | Z0.IFixed.BitWidth                                                    | The invariant number of bits covered by the reifying type
Type        | Z0.IFixed`1                                                           | Characterizes a fixed type with storage and reification types of equal size
Type        | Z0.IFuncW`1                                                           | Characterizes a structural function that is width-parametric
Type        | Z0.IFuncWT`2                                                          | Characterizes a width-parametric and T-parameteric structural function
Type        | Z0.Env                                                                | Reifies an application evironment service predicated on environment variables
Type        | Z0.AppSetting                                                         | Defines a nonparametric kvp application setting
Property    | Z0.AppSetting.Name                                                    | The setting name
Property    | Z0.AppSetting.Value                                                   | The setting value
Type        | Z0.AppSettingFormat                                                   | Defines an application setting format configuration
Property    | Z0.AppSettingFormat.FormatAsJson                                      | Specifies whether to render application settings as JSON text
Type        | Z0.AppSettings                                                        | Reifies an application settings service
Type        | Z0.AppSetting`1                                                       | Defines a value-parametric application setting
Property    | Z0.AppSetting`1.Name                                                  | The setting name
Property    | Z0.AppSetting`1.Value                                                 | The setting value
Method      | Z0.ArraySpan.alloc``1(System.Int32)                                   | Allocates an array|span of a specified length
Method      | Z0.ArraySpan.cover``1(``0[])                                          | Creates an array|span from an array
Method      | Z0.ArraySpan.uncover``1(Z0.ArraySpan{``0}@)                           | Reveals the covered array
Method      | Z0.ArraySpan.span``1(Z0.ArraySpan{``0}@)                              | Presents the covered array as a span
Method      | Z0.ArraySpan.span``1(Z0.ArraySpan{``0}@,System.Int32)                 | Presents a segment of covered cells as a span
Method      | Z0.ArraySpan.span``1(Z0.ArraySpan{``0}@,System.Int32,System.Int32)    | Presents a segment of covered cells as a span
Method      | Z0.ArraySpan.cell``1(Z0.ArraySpan{``0}@,System.Int32)                 | Returns a reference to an index-identified cell
Method      | Z0.ArraySpan.head``1(Z0.ArraySpan{``0}@)                              | Returns a reference to the first source element
Method      | Z0.ArraySpan.count``1(Z0.ArraySpan{``0}@)                             | Computes the number of covered cells
Method      | Z0.ArraySpan.size``1(Z0.ArraySpan{``0}@)                              | Computes the size of the source in bytes
Method      | Z0.ArraySpan.width``1(Z0.ArraySpan{``0}@)                             | Computes the size of the source in bits
Method      | Z0.ArraySpan.clear``1(Z0.ArraySpan{``0}@)                             | Zero-fills the data source
Method      | Z0.ArraySpan.seek8``1(Z0.ArraySpan{``0}@,System.Int32)                | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a reference to an 8-bit unsigned integer
Method      | Z0.ArraySpan.seek16``1(Z0.ArraySpan{``0}@,System.Int32)               | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a reference to a 16-bit unsigned integer
Method      | Z0.ArraySpan.seek32``1(Z0.ArraySpan{``0}@,System.Int32)               | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a reference to a 32-bit unsigned integer
Method      | Z0.ArraySpan.seek64``1(Z0.ArraySpan{``0}@,System.Int32)               | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a reference to a 32-bit unsigned integer
Method      | Z0.ArraySpan.skip8``1(Z0.ArraySpan{``0}@,System.Int32)                | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a readonly reference to an 8-bit unsigned integer
Method      | Z0.ArraySpan.skip16``1(Z0.ArraySpan{``0}@,System.Int32)               | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a readonly reference to a 16-bit unsigned integer
Method      | Z0.ArraySpan.skip32``1(Z0.ArraySpan{``0}@,System.Int32)               | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a readonly reference to a 32-bit unsigned integer
Method      | Z0.ArraySpan.skipk64``1(Z0.ArraySpan{``0}@,System.Int32)              | Advances a data source reference to a cell-relative offset and presents the offset cell             reference as a readonly reference to a 32-bit unsigned integer
Type        | Z0.ArraySpan`1                                                        | An array that works like a span, more-or-less
Type        | Z0.BinaryLiteral                                                      | Defines a base2 literal via text and a boxed value; for the literal to be valid,            the text, when parsed, must yield a value equivalent to the boxed value
Property    | Z0.BinaryLiteral.Name                                                 | The literal name
Property    | Z0.BinaryLiteral.Data                                                 | The literal value
Property    | Z0.BinaryLiteral.Text                                                 | Text that represents the boxed value
Type        | Z0.MetadataToken                                                      | Identifies a metadata element along with the declaring module
Type        | Z0.TheEmpty                                                           | Represents the nothingness of the void
Property    | Z0.TheEmpty.The                                                       | The only one
Type        | Z0.TheEmpty`1                                                         | Represents the nothingness of the parametric void
Method      | Z0.TheEmpty`1.The(`0)                                                 | The only parametric one
Method      | Z0.IPartIndexBuilder.Build                                            | Computes the known parts, which excludes those that aren't known, whether they are known unknowables,             unknown unknowables, outside our search scope or simply missing because of an errant build             process, a random file deletion algorithm rampaging throgh the environs 'digitale, or any             unforseen for forseen reason.
Type        | Z0.ITargetPart`2                                                      | Characterizes a directed dependency d:S -&gt; T from a client s:S to a suppler t:T
Property    | Z0.KnownParts.SearchLocation                                          | The location of potentially knowable parts
Property    | Z0.KnownParts.External                                                | External dependencies that don' participate in the componentization framework
Method      | Z0.PartIdParser.WhereSome``1(``0[])                                   | Filters zero-valued elements from the source array
Method      | Z0.PartIdParser.parse``1(System.String)                               | Attempts o parse an enum literal, ignoring case, and returns a null value if parsing failed
Property    | Z0.PartIndexBuilder.Service                                           | Creates the builder, not the index
Method      | Z0.PartIndexBuilder.Build                                             | Creates an index over the known parts
Method      | Z0.PartResolver.Resolve(Z0.FilePath)                                  | Attempts to resolve a part from an assembly file path
Method      | Z0.PartResolver.LoadAssembly(Z0.FilePath)                             | Loads an assembly from a potential part path
Method      | Z0.PartResolver.resolve(System.Reflection.Assembly)                   | Attempts to resolve a part resolution type
Method      | Z0.PartResolver.resolve(System.Type)                                  | Attempts to resolve a part resolution property
Method      | Z0.PartResolver.resolve(System.Reflection.PropertyInfo)               | Attempts to resolve a part from a resolution property
Method      | Z0.PermLiterals.test(Z0.Perm4L)                                       | Determines whether a permutation literal is a symbol
Method      | Z0.PermLiterals.test(Z0.Perm8L)                                       | Determines whether a permutation literal is a symbol
Method      | Z0.PermLiterals.test(Z0.Perm16L)                                      | Determines whether a permutation literal is a symbol
Field       | Z0.TabularWidths.Sequence                                             | The width of a sequence number field
Field       | Z0.TabularWidths.Identifier                                           | The width of a programmatic identifier field
Field       | Z0.TabularWidths.Description                                          | The width of a field that contains summary descriptive information
Field       | Z0.TabularWidths.Count                                                | The width of a count field
Field       | Z0.TabularWidths.Bool                                                 | The width of a boolean field with a concise header
Field       | Z0.TabularWidths.BoolLarge                                            | The width of a boolean field with a not-so-concise header
Field       | Z0.TabularWidths.Num8Dec                                              | The width of a field containing an 8-bit decimal number
Field       | Z0.TabularWidths.Num8Hex                                              | The width of a field containing an 8-bit hex number
Field       | Z0.TabularWidths.Num16Dec                                             | The width of a field containing an 8-bit decimal number
Field       | Z0.TabularWidths.Num16Hex                                             | The width of a field containing an 8-bit hex number
Field       | Z0.TabularWidths.Num32Dec                                             | The width of a field containing an 8-bit decimal number
Field       | Z0.TabularWidths.Num32Hex                                             | The width of a field containing an 8-bit hex number
Field       | Z0.TabularWidths.Num64Dec                                             | The width of a field containing an 8-bit decimal number
Field       | Z0.TabularWidths.Num64Hex                                             | The width of a field containing an 8-bit hex number
Type        | Z0.RecordHeader`1                                                     | Defines enum-predicated header content
Method      | Z0.RecordHeader`1.Render(System.Func{System.Int32,`0,System.String},System.Char)| Formates a header row using a caller-supplied label producer
Type        | Z0.TextCell                                                           | Defines a text segment in the context of a line in a file
Field       | Z0.TextFormat.RowSeparator                                            | Specifies leading content that identifies a non-semantic row division marker
Field       | Z0.TextFormat.HasDataHeader                                           | Indicates whether the first line of the data is a header row
Field       | Z0.TextFormat.IsDelimited                                             | Specifes whether the file contains regular delimited contetn
Field       | Z0.TextFormat.Delimiter                                               | The character used to delimit parts of a line, if delimited
Field       | Z0.TextFormat.CommentPrefix                                           | If specified, indicates the character that begins a comment
Field       | Z0.TextFormat.ColWidth                                                | If specified, defines a uniform column width
Type        | Z0.TextHeader                                                         | Defines header content in a text data file
Type        | Z0.TextLine                                                           | Represents a line of text in the context of a line-oriented text data source
Property    | Z0.TextLine.LineNumber                                                | The line number of the data source from which the line was extracted
Property    | Z0.TextLine.LineText                                                  | The line text, as it was found in the source
Type        | Z0.TextRow                                                            | Defines a row of text parttioned into a sequence of cells
Method      | Z0.TextRow.Format(System.Nullable{System.Char})                       | Joins the enclosed cells to produce a line of text
Type        | Z0.LiteralFieldId                                                     | Defines the fields into which a literal table is partitioned
Field       | Z0.LiteralFieldId.TypeName                                            | The defining type, such as an enum or a type that declares constant fields
Field       | Z0.LiteralFieldId.Index                                               | The declaration order of the literal relative to other literals in the same dataset
Field       | Z0.LiteralFieldId.Name                                                | The literal name
Field       | Z0.LiteralFieldId.Hex                                                 | The literal's value in base-16
Field       | Z0.LiteralFieldId.BitString                                           | The literal's bitstring representation
Field       | Z0.LiteralFieldId.Description                                         | A description of the literal if it exist
Field       | Z0.LiteralFieldWidth.TypeName                                         | The defining type, such as an enum or a type that declares constant fields
Field       | Z0.LiteralFieldWidth.Index                                            | The declaration order of the literal relative to other literals in the same dataset
Field       | Z0.LiteralFieldWidth.Name                                             | The literal name
Field       | Z0.LiteralFieldWidth.Hex                                              | The literal's value in base-16
Field       | Z0.LiteralFieldWidth.BitString                                        | The literal's bitstring representation
Field       | Z0.LiteralFieldWidth.Description                                      | A description of the literal if it exist
Type        | Z0.LiteralTableField                                                  | Defines the fields into which a literal table is partitioned
Field       | Z0.LiteralTableField.TypeName                                         | The defining type, such as an enum or a type that declares constant fields
Field       | Z0.LiteralTableField.Index                                            | The declaration order of the literal relative to other literals in the same dataset
Field       | Z0.LiteralTableField.Name                                             | The literal name
Field       | Z0.LiteralTableField.Hex                                              | The literal's value in base-16
Field       | Z0.LiteralTableField.BitString                                        | The literal's bitstring representation
Field       | Z0.LiteralTableField.Description                                      | A description of the literal if it exist
Type        | Z0.TabularField`1                                                     | Specifies salient characteristics of a tabular field predicated            on an enumeration value
Field       | Z0.TabularField`1.Specifier                                           | The field specifier
Field       | Z0.TabularField`1.Name                                                | The field name
Field       | Z0.TabularField`1.Index                                               | The 0-based field index
Field       | Z0.TabularField`1.Width                                               | The field width
Field       | Z0.TabularFormat.Fields                                               | The field specifications
Field       | Z0.TabularFormat.Headers                                              | The column header names
Field       | Z0.TabularFormat.Delimiter                                            | The default field delimiter
Field       | Z0.TabularFormat.EmitHeader                                           | Whether to produce a header when formatting a collection
Field       | Z0.TabularFormat.FieldCount                                           | The number of fields accounted for
Method      | Z0.TabularFormat.Format                                               | Formats the format specification, not the object being specified
Field       | Z0.TabularFormat`1.Fields                                             | The field specifications
Field       | Z0.TabularFormat`1.Headers                                            | The column header names
Method      | Z0.TabularFormat`1.Format                                             | Formats the format specification, not the object being specified
Type        | Z0.BenchmarkRecord                                                    | Defines a benchmark measure for an operator
Field       | Z0.BenchmarkRecord.OpId                                               | The name of the measured operation
Field       | Z0.BenchmarkRecord.OpCount                                            | Either the invocation count or the number of discrete operations performed
Field       | Z0.BenchmarkRecord.Timing                                             | The measured time
Type        | Z0.ITestLogger                                                        | Defines minimal contract for a log message sink
Type        | Z0.TestCaseRecord                                                     | Describes the outcome of a test case
Method      | Z0.RecordFormatter.Create``1(System.Char)                             | Creates a record formatter predicated on an enum that specifies the record fields
Method      | Z0.RecordHeader.render``1(System.Func{System.Int32,``0,System.String},System.Char)| Formates a header row using a caller-supplied label producer
Method      | Z0.Records.formatter``1(System.Char)                                  | Creates a record formatter predicated on a field definition set defined by an enum
Method      | Z0.Records.formatter``1                                               | Creates a record formatter predicated on a field definition set defined by an enum
Method      | Z0.Records.Formatter``1                                               | Creates a record formatter predicated on an enum that specifies the record fields
Method      | Z0.Records.Formatter``1(System.Char)                                  | Creates a record formatter predicated on a field definition set defined by an enum
Field       | Z0.Tabular.PosMask                                                    | Defines a mask that, when applied, reveals the field position
Method      | Z0.Tabular.index``1(``0)                                              | Computes the field index from a field specifier
Method      | Z0.Tabular.width``1(``0)                                              | Computes the field width from a field specifier
Method      | Z0.Tabular.format``1                                                  | Defines a tabular format specifiecation predicated on a parametric enum type
Method      | Z0.Tabular.field``1(``0)                                              | Defines a tabular field specification predicated on an enumeration literal
Method      | Z0.TabularFormats.derive``1(System.Char)                              | Derives format configuration data from a type
Method      | Z0.TextDocParser.Create``1(System.Func{Z0.TextDoc,Z0.ParseResult{``0}})| Creates a text document parser from a parse function
Method      | Z0.TextDocParsing.ParseDocument(System.IO.StreamReader,System.Nullable{Z0.TextFormat})| Attempts to parse a text document and returns the result if successful
Method      | Z0.TextDocParsing.ParseHeader(Z0.TextLine,Z0.TextFormat@)             | Parses a header row from a line of text
Method      | Z0.TextDocParsing.ParseRow(Z0.TextLine,Z0.TextFormat@)                | Parses a row from a line of text
Type        | Z0.IDataFlow`2                                                        | Characterizes a flow that represents a data movement from A -&gt; B, or, in this case, S -&gt; T
Method      | Z0.ITableLog`2.Save(`1[],Z0.FilePath)                                 | Saves tabular data using derived metadata for format configuration
Method      | Z0.ITabular.DelimitedText(System.Char)                                | Returns a line of text represents the record value
Type        | Z0.BinaryResource                                                     | Describes an embedded data resource
Method      | Z0.BinaryResource.Providers``1                                        | Returns the properties declared by a type that define binary resource content
Method      | Z0.BinaryResource.Location(System.ReadOnlySpan{System.Byte})          | Computes the address of resource content
Type        | Z0.BinaryResourceSpec                                                 | Defines the content of a binary resource
Type        | Z0.HostResourceSpec                                                   | Defines the content of a set of binary resources for an api host
Method      | Z0.Root.add``1(``0@,System.Int32)                                     | Adds an offset to a reference
Method      | Z0.Root.address``1(``0@)                                              | Presents a reference as an address
Method      | Z0.Root.array``1(``0[])                                               | Produces an array from a parameter array
Method      | Z0.Root.insist``1(``0)                                                | Complains if the source operand, of reference type, is null; otherwise returns it
Method      | Z0.Root.bind``2(Z0.Option{``0},System.Func{``0,Z0.Option{``1}})       | Implements the canonical bind operation
Method      | Z0.Root.typecode``1                                                   | Gets type typecode of a parametrically-identified type
Method      | Z0.Root.char(System.Boolean)                                          | Reimagines a boolean value as a character value
Method      | Z0.Root.eStore``1(``0@,System.UInt64@)                                | Stores an enum value of any primal kind to a u64 target
Method      | Z0.Root.eVal``2(``1,``0)                                              | Reads an E-value from an enum of primal T-kind
Method      | Z0.Root.eVal``1(System.Byte,``0)                                      | Envisions a u8 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.SByte,``0)                                     | Envisions an i8 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.Int16,``0)                                     | Envisions an i16 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.UInt16,``0)                                    | Envisions a u16 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.Char,``0)                                      | Envisions a c16 value as a value of an enum of like u16 kind
Method      | Z0.Root.eVal``1(System.Int32,``0)                                     | Envisions an i32 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.UInt32,``0)                                    | Envisions a u32 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.Int64,``0)                                     | Envisions an i64 value as a value of an enum of like primal kind
Method      | Z0.Root.eVal``1(System.UInt64,``0)                                    | Envisions a u64 value as a value of an enum of like primal kind
Method      | Z0.Root.filter``1(``0[],System.Func{``0,System.Boolean})              | Allocates and populates a new array by filtering the source array with             a specified predicate
Method      | Z0.Root.fmap``2(System.Func{``0,``1})                                 | Defines the canonical option functor F:Option[A] -&gt; Option[B] induced by a non-monadic dual f:A-&gt;B
Method      | Z0.Root.guard``2(``0,System.Func{``0,System.Boolean},System.Func{``0,Z0.Option{``1}})| Evaluates a function if a predicate is satisfied; otherwise, returns None
Method      | Z0.Root.hash``1(``0)                                                  | Calculates a hash code for structured content and returns the content along with the calculated hash
Method      | Z0.Root.hash_ref(System.ReadOnlySpan{System.Byte})                    | Computes the FNV-1a hash of the source sequence            See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
Method      | Z0.Root.hash(System.UInt32,System.UInt32)                             | Calculates a combined hash for 2 unsigned 32-bit integers
Method      | Z0.Root.hash(System.SByte,System.SByte)                               | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.Byte,System.Byte)                                 | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.Int16,System.Int16)                               | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.UInt16,System.UInt16)                             | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.Int32,System.Int32)                               | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.UInt64,System.UInt64)                             | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.Int64,System.Int64)                               | Creates a combined/unsigned hash code
Method      | Z0.Root.hash(System.SByte)                                            | Creates an unsigned hash code
Method      | Z0.Root.hash(System.Byte)                                             | Creates an unsigned hash code
Method      | Z0.Root.hash(System.Int16)                                            | Creates an unsigned hash code
Method      | Z0.Root.hash(System.UInt16)                                           | Creates an unsigned hash code
Method      | Z0.Root.hash(System.Int32)                                            | Creates an unsigned hash code
Method      | Z0.Root.hash(System.UInt32)                                           | Creates an unsigned hash code
Method      | Z0.Root.hash(System.UInt64)                                           | Creates an unsigned hash code
Method      | Z0.Root.hash(System.Int64)                                            | Creates an unsigned hash code
Method      | Z0.Root.hash(System.ReadOnlySpan{System.SByte})                       | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.Byte})                        | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.Int16})                       | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.UInt16})                      | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.Int32})                       | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.UInt32})                      | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.UInt64})                      | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.hash(System.ReadOnlySpan{System.Int64})                       | Calculates a combined hash for a sequence integral values
Method      | Z0.Root.ifNotNull``2(``0,System.Func{``0,``1},``1)                    | Evaluates a function over a value if the value is not null; otherwise, returns the default result value
Method      | Z0.Root.ifelse``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})| Executes one of two functions depending on the evaulation criterion
Method      | Z0.Root.ifelse(System.Boolean,System.Action,System.Action)            | Executes one action if a condition is true and another should it be false
Method      | Z0.Root.ifempty(System.String,System.String)                          | A string-specific coalescing operation
Method      | Z0.Root.none``1                                                       | Defines a non-valued option
Method      | Z0.Root.ifnone``2(``0,System.Func{``1},System.Func{``0,``1})          | Transforms an input, branching on nullity evaluation
Method      | Z0.Root.ifnone``2(System.Nullable{``0},System.Func{``1},System.Func{``0,``1})| Transforms an input value, branching on nullity evaluation
Method      | Z0.Root.some``1(``0)                                                  | Defines a valued option
Method      | Z0.Root.ifsome``1(``0,System.Action{``0})                             | Invokes an action if the supplied value is not null
Method      | Z0.Root.ifsome``1(System.Nullable{``0},System.Action{``0})            | Invokes an action if the supplied value is not null
Method      | Z0.Root.iftrue``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})| Executes a function if the criterion is true, otherwise returns the supplied value
Method      | Z0.Root.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)| Iterates over the supplied items, invoking a receiver for each
Method      | Z0.Root.iter``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Action{``0,``1})| Iterates a pair of readonly spans in tandem, invoking a caller-supplied action for each cell pair
Method      | Z0.Root.iter``2(System.Span{``0},System.Span{``1},System.Action{``0,``1})| Iterates a pair of spans in tandem, invoking a caller-supplied action for each cell pair
Method      | Z0.Root.iteri(System.Int32,System.Int32,System.Action{System.Int32})  | Aplies an action to the sequence of integers min,min+1,...,max - 1
Method      | Z0.Root.iteri``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})| Iterates over the supplied items, invoking an indexed receiver for each
Method      | Z0.Root.length``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1})  | Computs min(x.Length,y.Length)
Method      | Z0.Root.length``2(System.ReadOnlySpan{``0},System.Span{``1})          | Computs min(x.Length,y.Length)
Method      | Z0.Root.length``2(System.Span{``0},System.ReadOnlySpan{``1})          | Computs min(x.Length,y.Length)
Method      | Z0.Root.length``2(System.Span{``0},System.Span{``1})                  | Computs min(x.Length,y.Length)
Method      | Z0.Root.list``1(``0[])                                                | Creates a list from a parameter array
Method      | Z0.Root.map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})| Applies a function to an input sequence to yield a transformed output sequence
Method      | Z0.Root.map``2(System.Nullable{``0},System.Func{``0,``1})             | Projects a source value, if non-null, onto a target value; otherwise, returns the target's default value
Method      | Z0.Root.map``2(System.Nullable{``0},System.Func{``0,``1},System.Func{``1})| Projects a source value, if non-null, onto a target value; otherwise, returns value raised by a caller-supplied emitter
Method      | Z0.Root.map``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})| Projects a source span to target span via a supplied transformation
Method      | Z0.Root.apply``1(System.ReadOnlySpan{``0},System.Func{``0,``0},System.Span{``0})| Applies a unary operator to an input sequence and deposits the result to a caller-supplied target
Method      | Z0.Root.map``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,``0},System.Span{``0})| Projects a pair of source spans to target span via a binary operator
Method      | Z0.Root.map``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2},System.Span{``2})| Iterates a pair of readonly spans in tandem, invoking a function for each cell pair            and deposits the result in a caller-supplied target
Method      | Z0.Root.map``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2})| Iterates a pair of readonly spans in tandem, invoking a function for each cell pair,             and deposits the result to an allocated target that is returned
Method      | Z0.Root.memref(Z0.MemoryAddress,Z0.ByteSize)                          | Defines a memory reference
Method      | Z0.Root.method``3(System.String)                                      | Searches a type for any method that matches the supplied signature
Method      | Z0.Root.ctor(System.Type,System.Type[])                               | Searches a type for an instance constructor that matches a specified signature
Method      | Z0.Root.ctor``1(System.Type[])                                        | Searches a type for an instance constructor that matches a specified signature
Method      | Z0.Root.nullis``1(``0)                                                | Returns true if the source is null
Method      | Z0.Root.nullnot``1(``0)                                               | Returns true if the source is non-null
Method      | Z0.Root.primal(System.TypeCode)                                       | Returns the type-code identified primal kind
Method      | Z0.Root.readonly``1(System.Span{``0})                                 | Reflects the immutable self
Method      | Z0.Root.readonly``1(``0[])                                            | Reflects the content of an array as a readonly span
Method      | Z0.Root.reduce``1(Z0.Option{Z0.Option{``0}})                          | Implements the canonical join operation that reduces the monadic depth by one level
Method      | Z0.Root.reduce``1(System.Collections.Generic.IEnumerable{``0}[])      | Implements the canonical join operation that reduces the (LiNQ-monadic) depth by one level
Method      | Z0.Root.seq``1(``0[])                                                 | An indespensable combinator that produces a stream from a parameter array
Method      | Z0.Root.skip``1(``0@,System.UInt64)                                   | Skips a specified number of source elements and returns a readonly reference to the resulting element
Method      | Z0.Root.span(System.String)                                           | Creates a readonly character span from a string
Method      | Z0.Root.span``1(``0@,System.Int32)                                    | Creates a T-span from a supplied reference
Method      | Z0.Root.span``1(``0[])                                                | Creates a span from an array
Method      | Z0.Root.span``1(``0@)                                                 | Creates a single-cell T-span from a supplied reference
Method      | Z0.Root.span8u``1(``0@)                                               | Creates a bytespan from a T-cell reference
Method      | Z0.Root.span16u``1(``0@)                                              | Creates a u16 span from a T-cell reference
Method      | Z0.Root.span32u``1(``0@)                                              | Creates a u32 span from a T-cell reference
Method      | Z0.Root.span64u``1(``0@)                                              | Creates a u64 span from a T-cell reference
Method      | Z0.Root.span16c``1(``0@)                                              | Creates a u16 span from a T-cell reference
Method      | Z0.Root.span16c(System.ReadOnlySpan{System.Byte})                     | Creates a u16 span from a T-cell reference
Method      | Z0.Root.span``2(``0@,System.Int32)                                    | Creates a T-span from an S-reference
Method      | Z0.Root.span``2(``0@)                                                 | Creates a T-span from a single S-reference
Method      | Z0.Root.swap``1(System.Span{``0},System.Int32,System.Int32)           | Interchanges span elements i and j
Method      | Z0.Root.testbit(System.Byte,System.Int32)                             | Tests the state of an index-identified source bit
Method      | Z0.Root.Try``1(System.Func{``0},System.Action{System.Exception})      | Evaluates a function within a try block and returns the value of the computation if             successful; otherwise, returns None and invokes an error handler if supplied
Method      | Z0.Root.Try``1(System.Func{Z0.Option{``0}},System.Action{System.Exception})| Evaluates a function within a try block and returns the value of the computation if             successful; otherwise, returns None together with the reported exception
Method      | Z0.Root.Try(System.Action,System.Action{System.Exception})            | Invokes an action within a try block and, upon error, calls the handler if specified.             If no handler is specified, the exception message is emitted to stderr
Method      | Z0.Root.Try``2(``0,System.Func{``0,``1},System.Action{``0,System.Exception})| Evaluates a function within a try block and returns the value of the computation if successful.            Otherwise, returns None together with the reported exception
Method      | Z0.Root.TryCast``1(System.Object)                                     | Casts a value if possible, otherwise returns none
Method      | Z0.Root.tVal``2(``0)                                                  | Reads a T-value from the value of an E-enum of primal T-kind
Method      | Z0.Root.e8u``1(``0)                                                   | Reads a u8 value from the value of an E-enum of primal u8-kind
Method      | Z0.Root.type``1                                                       | Returns the type of the type
Method      | Z0.Root.unbox``1(System.Object)                                       | Takes a value out of a box
Method      | Z0.Root.unbox``1(System.Enum)                                         | Takes an enum value out of a box
Method      | Z0.Root.unpack``1(``0,System.Span{Z0.Bit})                            | Populates a caller-supplied target with unpacked source bits
Method      | Z0.Root.value``1(``0)                                                 | Returns the numeric value represented by a natural type
Method      | Z0.Root.view``1(Z0.W8,``0@)                                           | Presents a readonly T-reference as a reference of bit-width w
Method      | Z0.Root.view``1(Z0.W16,``0@)                                          | Presents a readonly T-reference as a reference of bit-width w
Method      | Z0.Root.view``1(Z0.W32,``0@)                                          | Presents a readonly T-reference as a reference of bit-width w
Method      | Z0.Root.view``1(Z0.W64,``0@)                                          | Presents a readonly T-reference as a reference of bit-width w
Method      | Z0.Root.view``2(``0@)                                                 | Presents a readonly S-reference as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)   | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)  | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)  | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@) | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)  | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@) | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)  | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@) | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Single}@) | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{System.Double}@) | Presents a readonly reference to 128-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)   | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)  | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)  | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@) | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)  | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@) | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)  | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@) | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Single}@) | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{System.Double}@) | Presents a readonly reference to 256-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.Byte}@)                          | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.SByte}@)                         | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.Int16}@)                         | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.UInt16}@)                        | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.Int32}@)                         | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.UInt32}@)                        | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.Int64}@)                         | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.UInt64}@)                        | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.Single}@)                        | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``1(Z0.Vector512{System.Double}@)                        | Presents a readonly reference to 512-bit vector as a readonly T-reference
Method      | Z0.Root.vread``2(System.Runtime.Intrinsics.Vector128{``0}@)           | Presents a readonly reference to 128-bit S-vector as a readonly T-reference
Method      | Z0.Root.vread``2(System.Runtime.Intrinsics.Vector256{``0}@)           | Presents a readonly reference to 256-bit S-vector as a readonly T-reference
Method      | Z0.Root.vread``2(Z0.Vector512{``0}@)                                  | Presents a readonly reference to 512-bit S-vector as a readonly T-reference
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector128{``0}@)           | Returns a readonly refererence to the leading component of the source
Method      | Z0.Root.vread``1(System.Runtime.Intrinsics.Vector256{``0}@)           | Returns a readonly refererence to the leading component of the source
Method      | Z0.Root.vread``1(Z0.Vector512{``0}@)                                  | Returns a readonly refererence to the leading component of the source
Method      | Z0.Root.vref``1(System.Runtime.Intrinsics.Vector128{``0}@)            | Returns a refererence to the leading component of the source
Method      | Z0.Root.vref``1(System.Runtime.Intrinsics.Vector256{``0}@)            | Returns a refererence to the leading component of the source
Method      | Z0.Root.vref``1(Z0.Vector512{``0}@)                                   | Returns a refererence to the leading component of the source
Method      | Z0.Root.vwrite``1(Z0.W128,System.Byte@)                               | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.SByte@)                              | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.Int16@)                              | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.UInt16@)                             | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.Int32@)                              | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.UInt32@)                             | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.Int64@)                              | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.UInt64@)                             | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.Boolean@)                            | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.Char@)                               | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W128,System.Decimal@)                            | Hydrates a 128-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Byte@)                               | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.SByte@)                              | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Int16@)                              | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.UInt16@)                             | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Int32@)                              | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.UInt32@)                             | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Int64@)                              | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.UInt64@)                             | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Boolean@)                            | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Char@)                               | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W256,System.Decimal@)                            | Hydrates a 256-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Byte@)                               | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.SByte@)                              | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Int16@)                              | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.UInt16@)                             | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Int32@)                              | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.UInt32@)                             | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Int64@)                              | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.UInt64@)                             | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Boolean@)                            | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Char@)                               | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``1(Z0.W512,System.Decimal@)                            | Hydrates a 512-bit T-vector from a reference
Method      | Z0.Root.vwrite``2(Z0.W128,``0@)                                       | Hydrates a 128-bit T-vector from an S-reference
Method      | Z0.Root.vwrite``2(Z0.W256,``0@)                                       | Hydrates a 256-bit T-vector from an S-reference
Method      | Z0.Root.vwrite``2(Z0.W512,``0@)                                       | Hydrates a 512-bit T-vector from an S-reference
Method      | Z0.Root.write``1(System.SByte@)                                       | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Byte@)                                        | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Int16@)                                       | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.UInt16@)                                      | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Int32@)                                       | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.UInt32@)                                      | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Int64@)                                       | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Boolean@)                                     | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Char@)                                        | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.Decimal@)                                     | Hydrates a T-cell from a reference
Method      | Z0.Root.write``1(System.SByte@,System.Int32)                          | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Byte@,System.Int32)                           | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Int16@,System.Int32)                          | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.UInt16@,System.Int32)                         | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Int32@,System.Int32)                          | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.UInt32@,System.Int32)                         | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Int64@,System.Int32)                          | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Boolean@,System.Int32)                        | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Char@,System.Int32)                           | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``1(System.Decimal@,System.Int32)                        | Hydrates a T-cell from a reference after skipping a specified number of source cells
Method      | Z0.Root.write``2(``0@)                                                | Hydrates a T-cell from an S-reference
Method      | Z0.Root.write``2(``0@,System.Int32)                                   | Hydrates a T-cell from an S-reference after skipping a specified number of S-cells
Type        | Z0.IAgentControl                                                      | Defines a means by which agents can be queried and directed
Type        | Z0.IAppSetting                                                        | Characterizes a nonparametric application setting
Property    | Z0.IAppSetting.Name                                                   | The setting name
Property    | Z0.IAppSetting.Value                                                  | The setting value
Type        | Z0.IAppSetting`1                                                      | Characterizes a value-parametric application setting
Property    | Z0.IAppSetting`1.Value                                                | The typed setting value
Type        | Z0.IAppSettings                                                       | Characterizes an app settings collection
Type        | Z0.IAppSettingsProvider                                               | Characterizes an application settings provider that supports settings persistence
Property    | Z0.IAppSettingsProvider.Settings                                      | The provided settings
Method      | Z0.IAppSettingsProvider.Save(Z0.FilePath)                             | Saves the settings to a file
Type        | Z0.IAppSettingsProvider`1                                             | Characterizes an F-bound polymorphic app setting set reification
Type        | Z0.IConversionProvider`1                                              | Characterizes a service that exposes a two-way converter
Property    | Z0.IPointedReader.Position                                            | The current position of the stream
Property    | Z0.IPointedReader.HasNext                                             | Spefifies whether the reader can advance to and read the next cell
Property    | Z0.IPointedReader.Length                                              | Spefifies the length of the data soruce
Property    | Z0.IPointedReader.Remaining                                           | Spefifies the number of elements that remain to be read
Method      | Z0.IPointedReader.Seek(System.UInt32)                                 | If source value pos is within the range [0,Length), assigns Current = pos;            otherwise, assigns Current = -1 and returns true if the former and false if the latter
Method      | Z0.IPointedReader`1.Read(`0@)                                         | Deposits the next value in a caller-supplied target and returns true if there are yet more values to read
Method      | Z0.IPointedReader`1.Read(System.Int32,System.Int32,System.Span{`0})   | Reads a specified number of elements if they exist or fewer if not and deposits the values in a caller-suppled target            Returns the actual number of elements read
Type        | Z0.IShell                                                             | Characterizes console-controlled, perhaps user-initiated, thread of execution
Type        | Z0.IShell`1                                                           | Characterizes a reified shell
Type        | Z0.IShell`2                                                           | Characterizes a reified shell with parametric context
Type        | Z0.IStateless`2                                                       | Characterizes an F-bound polymorphick stateless reification
Property    | Z0.IStreamProvider`1.Stream                                           | In infinite T-stream
Type        | Z0.ISystemAgent                                                       | Characterizes a thread of control with independent volition
Property    | Z0.ISystemAgent.ServerId                                              | Identifies the server on which the agent is executing
Property    | Z0.ISystemAgent.AgentId                                               | Identifies the agent relative to the hosting server
Method      | Z0.ISystemAgent.Start                                                 | Starts agent execution
Method      | Z0.ISystemAgent.Stop                                                  | Stops agent execution
Property    | Z0.ISystemAgent.State                                                 | The agent state
None        | Z0.ISystemAgent.StateChanged                                          | Signals when the agents transitions from its current state to a different state
Property    | Z0.ISystemAgent.Identity                                              | The global agent identity
Type        | Z0.ITypeIdentityProvider`1                                            | Characterizes a type identity provider than can define an identity predicated solely on a parametric type
Property    | Z0.Shell`1.AppPaths                                                   | The default application path collection
Property    | Z0.Shell`1.Term                                                       | The shell terminal
Property    | Z0.Shell`1.KnownParts                                                 | The parts that are not unknown
Type        | Z0.Shell`2                                                            | Base class for shells with pararametric context
Type        | Z0.AppEnv                                                             | Reifies an app environment service with the default implementation
Type        | Z0.AppPaths                                                           | Reifies default application path service
Method      | Z0.Context.from``1(``0)                                               | Wraps a context over a value
Type        | Z0.CurrentProcess                                                     | Surfaces information about the currently executing process
Property    | Z0.CurrentProcess.CurrentThreadId                                     | Gets the OS thread ID, not the "ManagedThreadId" which is useless
Property    | Z0.CurrentProcess.Handle                                              | The handle for the current process
Method      | Z0.CurrentProcess.ProcessThread(System.UInt32)                        | Searches for a thread given an OS-assigned id, not the useless clr id
Method      | Z0.CurrentProcess.GetCurrentThreadId                                  | Get the OS ID of the current thread
Method      | Z0.CurrentProcess.GetCurrentThread                                    | Gets the handle of the current thread
Method      | Z0.Edits.edit``1(``0@)                                                | Presents a readonly reference as mutable reference
Method      | Z0.Edits.edit8``1(``0@)                                               | Interprets a generic reference as a uint8 reference
Method      | Z0.Edits.edit16``1(``0@)                                              | Interprets a generic reference as a uint16 reference
Method      | Z0.Edits.edit32``1(``0@)                                              | Interprets a generic reference as a uint32 reference
Method      | Z0.Edits.edit64``1(``0@)                                              | Interprets a generic reference as a uint64 reference
Method      | Z0.Literati.attributed(Z0.Base2,System.Type)                          | Selects the binary literals declared by a type
Method      | Z0.Literati.attributed``1(Z0.Base2,System.Type)                       | Selects the binary literals declared by a type that are of a specified parametric primal type
Method      | Z0.Literati.kind``1(Z0.BinaryLiteral{``0})                            | Discerns the numeric kind of a specified binary literal
Method      | Z0.Literati.kind(Z0.BinaryLiteral)                                    | Discerns the numeric kind of a specified binary literal
Method      | Z0.Pointed.pvoid``1(``0@)                                             | Converts a generic reference into a void pointer
Method      | Z0.Pointed.ptr``1(``0@)                                               | Presents generic reference as a generic pointer
Method      | Z0.Pointed.ptr``1(``0@,System.Int32)                                  | Presents generic reference as a generic pointer displaced by an element offset
Method      | Z0.Pointed.ptr``2(``0@)                                               | Presents a generic reference r:T as a generic pointer p:T
Property    | Z0.PointedReader.HasNext                                              | Spefifies whether the reader can advance to and read the next cell
Property    | Z0.PointedReader.Length                                               | Spefifies the length of the data soruce
Property    | Z0.PointedReader.Remaining                                            | Spefifies the number of elements that remain to be read
Method      | Z0.PointedReaderState.Advance                                         | Advances the stream to the next position, if any
Method      | Z0.PointedReaderState.Advance(System.UInt32)                          | Advances the stream a specified number if elements, if possible
Method      | Z0.PointedReaderState.Seek(System.UInt32)                             | If source value pos is within the range [0,Length), assigns Current = pos;            otherwise, assigns Current = -1 and returns true if the former and false if the latter
Property    | Z0.PointedReaderState.HasNext                                         | Spefifies whether the reader can advance to and read the next cell
Type        | Z0.PointedReader`1                                                    | Defines a stream reader (of sourts) over a sequence of pointer-identified unmanaged values            This ought to be fast, but if your looking for safe, many other choices would be better
Method      | Z0.PointedReader`1.Read(`0@)                                          | Deposits the next byte in a caller-supplied target and returns true if there are yet more bytes to read
Method      | Z0.PointedReader`1.Read(System.Int32,System.Int32,System.Span{`0})    | Reads a specified number of elements if they exist or fewer if not and deposits the values in a caller-suppled target            Returns the actual number of elements read
Method      | Z0.PointedReader`1.Read(System.Int32,System.Int32,`0@)                | Reads a specified number of elements if they exist or fewer if not and deposits the values in a caller-suppled target            Returns the actual number of elements read
Method      | Z0.PointedReader`1.Seek(System.UInt32)                                | If source value pos is within the range [0,Length), assigns Current = pos;            otherwise, assigns Current = -1 and returns true if the former and false if the latter
Property    | Z0.PointedReader`1.Position                                           | The current position of the stream
Property    | Z0.PointedReader`1.HasNext                                            | Spefifies whether the reader can advance to and read the next cell
Property    | Z0.PointedReader`1.Length                                             | Spefifies the length of the data soruce
Property    | Z0.PointedReader`1.Remaining                                          | Spefifies the number of elements that remain to be read
Type        | Z0.TAppEnv                                                            | Characterizes a context that provides access to application configuration data
Property    | Z0.TAppPaths.StandardOutFolder                                        | The name of the folder that receives standard out stream data
Property    | Z0.TAppPaths.ErrorOutFolder                                           | The name of the folder that receives error stream data
Property    | Z0.TAppPaths.DataFolder                                               | The name of a data folder
Property    | Z0.TAppPaths.TestLogFolder                                            | The name of a folder that contains test result logs
Property    | Z0.TAppPaths.TestDataFolder                                           | The name of a folder to which test data is emitted
Property    | Z0.TAppPaths.ResoureFolder                                            | The name of an application resource folder
Property    | Z0.TAppPaths.TestResultFolder                                         | The name of the folder into which test results are deposited
Property    | Z0.TAppPaths.RuntimeLogFolder                                         | The name of the runtime log folder
Property    | Z0.TAppPaths.CaptureFolder                                            | The name of the folder into which capture results are deposited
Property    | Z0.TAppPaths.SrcFolder                                                | The name of the development source folder
Property    | Z0.TAppPaths.ConfigFileName                                           | The name of an application configuration file
Property    | Z0.TAppPaths.LogRoot                                                  | The global application log root
Property    | Z0.TAppPaths.DataRoot                                                 | The path to the root data directory
Property    | Z0.TAppPaths.DevRoot                                                  | The path to the root development directory
Property    | Z0.TAppPaths.ResourceRoot                                             | The path to the root application resource directory
Property    | Z0.TAppPaths.RuntimeRoot                                              | The runtime root
Property    | Z0.TAppPaths.AppId                                                    | The executing application's part identifier
Property    | Z0.TAppPaths.AppName                                                  | The executing application's name
Property    | Z0.TAppPaths.AppFolder                                                | The executing application's folder name
Property    | Z0.TAppPaths.TestLogRoot                                              | The root test directory
Property    | Z0.TAppPaths.AppStandardOut                                           | The directory into into which standard out stream emissions are deposited
Property    | Z0.TAppPaths.AppErrorOut                                              | The path to the global test error log directory
Property    | Z0.TAppPaths.AppStandardOutName                                       | The executing application's standard out log filename
Property    | Z0.TAppPaths.AppErrorOutName                                          | The executing application's error log filename
Property    | Z0.TAppPaths.AppDataFileName                                          | The executing application's data filename
Property    | Z0.TAppPaths.AppStandardOutPath                                       | The executing application's standard out log path
Property    | Z0.TAppPaths.AppErrorOutPath                                          | The executing application's error log path
Property    | Z0.TAppPaths.AppDevRoot                                               | The application-relative source code directory
Property    | Z0.TAppPaths.AppConfigPath                                            | The executing application's configuration file path
Property    | Z0.TAppPaths.AppDataPath                                              | The executing application's data directory
Property    | Z0.TAppPaths.AppCaptureDir                                            | The application-relative capture directory
Property    | Z0.TAppPaths.TestDataRoot                                             | The root folder for test-specific data
Property    | Z0.TAppPaths.TestErrorOut                                             | The path to the global test error log directory
Property    | Z0.TAppPaths.TestErrorPath                                            | The application-specific error stream log path
Property    | Z0.TAppPaths.TestResults                                              | The directory into which structured data describing test results are deposited
Property    | Z0.TAppPaths.TestResultPath                                           | The application-specific test result file path
Property    | Z0.TAppPaths.BenchRootFolder                                          | The name of the root bench partition
Property    | Z0.TAppPaths.BenchResults                                             | The directory into which structured data describing test results are deposited
Property    | Z0.TAppPaths.BenchResultPath                                          | The application-specific bench result file path
Method      | Z0.TAppPaths.ForApp(PartId)                                           | Creates a provider rooted at the current root directory for another application
Method      | Z0.TAppPaths.TestDataDir(System.Type)                                 | Defines a test-specific data folder
Method      | Z0.TAppPaths.TestDataDir``1                                           | Defines a parametrically-identified test-specific data folder
Method      | Z0.Arrays.empty``1                                                    | Returns an empty array
Method      | Z0.Arrays.head``1(``0[])                                              | Returns a reference to the location of the first element
Method      | Z0.Arrays.skip``1(``0[],System.Int32)                                 | Adds an offset to the head of an array, measured relative to the reference type
Method      | Z0.Arrays.seek``1(``0[],System.Int32)                                 | Adds an offset to the head of an array, measured relative to the reference type
Method      | Z0.Arrays.empty``1(``0[])                                             | Tests whether an array is empty
Method      | Z0.Arrays.alloc``1(System.Int32)                                      | Allocates a new array
Method      | Z0.Arrays.alloc``1(System.Int32,``0)                                  | Allocates a new array and populates it with a specified value
Method      | Z0.Arrays.fill``1(``0[],``0)                                          | Fills an array, in-place, with a specified value
Method      | Z0.Arrays.clear``1(``0[])                                             | Fills an array with the element type's default value
Method      | Z0.Arrays.replicate``1(``0,System.Int32)                              | Constructs an array filled with a replicated value
Method      | Z0.Arrays.reverse``1(``0[])                                           | Reverses an array in-place
Method      | Z0.Arrays.concat(System.Byte[],System.Byte[])                         | Concatentates two byte arrays
Method      | Z0.Arrays.concat``1(``0[][])                                          | Concatenates a sequence of parameter arrays
Method      | Z0.Arrays.concat``1(System.Collections.Generic.IEnumerable{``0[]})    | Concatenates a sequence of arrays
Method      | Z0.Arrays.concat(System.Byte[][])                                     | Concatentates a parameter array of byte arrays
Method      | Z0.Arrays.concat(System.Collections.Generic.IEnumerable{System.Byte[]})| Concatenates a sequence of byte arrays
Method      | Z0.Arrays.indexed``1(``0[],System.Int32[])                            | Creates a new array by sampling the source array at each specified index
Method      | Z0.BitConvert.GetBytes``1(``0@)                                       | Allocates and fills a buffer with source bytes
Method      | Z0.BitConvert.GetBytes``1(System.ReadOnlySpan{``0},System.Int32,System.Int32)| Converts a specified number of source elements to bytes
Method      | Z0.BitConvert.GetBytes``1(``0@,System.Span{System.Byte})              | Fills a caller-supplied buffer with source bytes
Method      | Z0.BitWriter.write(Z0.N0,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N1,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.Write(Z0.N2,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N3,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N4,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N5,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.Write(Z0.N6,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.Write(Z0.N7,System.UInt32,System.UInt32)                 | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N0,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N1,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N2,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N3,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N4,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N5,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N6,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitWriter.write(Z0.N7,System.Byte,System.Byte)                     | Transfers the state of a naturally-identified source bit to the corresponding bit in the target
Method      | Z0.BitReader.bit(Z0.N0,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N1,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N2,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N3,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N4,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N5,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N6,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N7,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N8,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N9,System.UInt16)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N10,System.UInt16)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N11,System.UInt16)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N12,System.UInt16)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N13,System.UInt16)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N14,System.UInt16)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N15,System.UInt16)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N0,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N1,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N2,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N3,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N4,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N5,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N6,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N7,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N8,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N9,System.UInt32)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N10,System.UInt32)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N11,System.UInt32)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N12,System.UInt32)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N13,System.UInt32)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N14,System.UInt32)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N15,System.UInt32)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N0,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N1,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N2,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N3,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N4,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N5,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N6,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N7,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N8,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N9,System.UInt64)                                 | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N10,System.UInt64)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N11,System.UInt64)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N12,System.UInt64)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N13,System.UInt64)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N14,System.UInt64)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N15,System.UInt64)                                | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N0,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N1,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N2,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N3,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N4,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N5,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N6,System.Byte)                                   | Reads the state of a naturally-identified bit
Method      | Z0.BitReader.bit(Z0.N7,System.Byte)                                   | Reads the state of a naturally-identified bit
Type        | Z0.Buffers                                                            | Api for managing native buffers
Method      | Z0.Buffers.tokenize(System.IntPtr,System.Int32,System.Int32)          | Creates an array of tokens that identify a squence of buffers
Method      | Z0.Buffers.content``1(Z0.IBufferToken)                                | Covers a token-identified buffer with a span
Method      | Z0.Buffers.liberate(System.Span{System.Byte})                         | Enables bytespan execution
Method      | Z0.Buffers.liberate(System.Byte@,System.Int32)                        | Enables execution over a reference-identified memory segment of specified length
Method      | Z0.Buffers.native(System.Int32)                                       | Allocates a native buffer
Method      | Z0.Buffers.release(System.IntPtr)                                     | Deallocates a native allocation
Method      | Z0.Buffers.bytes``1(System.ReadOnlySpan{``0})                         | Reimagines a readonly span of generic values as a span of readonly bytes
Method      | Z0.Buffers.fill``1(System.ReadOnlySpan{``0},Z0.IBufferToken)          | Fills a token-identified buffer with data from a source span and returns the target memory to the caller as a span
Method      | Z0.Buffers.liberate(System.IntPtr,System.Int32)                       | Enables an executable memory segment
Method      | Z0.Buffers.Liberate``1(``0@,System.Int32)                             | Enables en executable memory segment
Method      | Z0.Buffers.VirtualProtectEx(System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32,System.UInt32@)| Windows API that applies memory protection attributes
Property    | Z0.BufferAllocation.Data                                              | Presents the allocation via a span
Method      | Z0.BufferSeq.alloc(System.Int32,System.Byte)                          | Creates a buffer sequence that owns the underlying memory allocation and releases            it upon disposal
Method      | Z0.BufferSeq.alloc(System.Int32,System.Byte,Z0.BufferAllocation@)     | Creates a caller-owed buffer sequence
Method      | Z0.BufferSeq.Buffer(System.Byte)                                      | Presents an index-identifed buffer as a span of bytes
Method      | Z0.BufferSeq.Token(System.Byte)                                       | Retrieves an index-identifed token
Property    | Z0.BufferSeq.Item(System.Byte)                                        | Retrieves an index-identifed token
Property    | Z0.BufferSeq.Item(Z0.BufferSeqId)                                     | Retrieves a token identified by sequence id
Method      | Z0.BufferSeq.Clear(System.Byte)                                       | Zero-fills a token-identified buffer and returns the cleared memory content
Method      | Z0.BufferSeq.Cells``1(System.Byte)                                    | Covers a token-identified buffer with a span over cells of unmanaged type
Method      | Z0.BufferSeq.Fill``1(System.Byte,System.ReadOnlySpan{``0})            | Fills a token-identifed buffer with content from a source span and returns the covering span
Property    | Z0.BufferSeq`1.Head                                                   | The leading buffer
Method      | Z0.BufferSeq`1.Buffer(System.Byte)                                    | Retrieves the content of an index-identified buffer
Method      | Z0.BufferSeq`1.Bytes(System.Byte)                                     | Presents an index-identifed buffer as a span of bytes
Property    | Z0.BufferSeq`1.Item(System.Byte)                                      | Presents an index-identifed buffer as a span of bytes
Method      | Z0.BufferSeq`1.Token(System.Byte)                                     | Retrieves an index-identifed token
Method      | Z0.BufferSeq`1.Clear(System.Byte)                                     | Zero-fills a token-identified buffer and returns the cleared memory content
Method      | Z0.BufferSeq`1.Cells``1(System.Byte)                                  | Covers a token-identified buffer with a span over cells of unmanaged type
Method      | Z0.BufferSeq`1.Fill``1(System.Byte,System.ReadOnlySpan{``0})          | Fills a token-identifed buffer with content from a source span and returns the covering span
Type        | Z0.BufferToken                                                        | Describes an allocated buffer
Property    | Z0.BufferToken.Handle                                                 | The location of the represented buffer allocation
Property    | Z0.BufferToken.Size                                                   | The size, in bytes, of the represented buffer
Type        | Z0.BufferToken`1                                                      | Describes a fixed-width allocated buffer
Property    | Z0.BufferToken`1.Handle                                               | The location of the represented buffer allocation
Property    | Z0.BufferToken`1.Size                                                 | The size, in bytes, of the represented buffer
Method      | Z0.BufferToken`1.Tokenize(System.IntPtr,System.Int32,System.Int32)    | Creates an array of tokens that identify a squence of buffers
Method      | Z0.BufferToken`1.Content``1                                           | Covers a token-identified buffer with a span
Method      | Z0.BufferToken`1.Fill``1(System.ReadOnlySpan{``0})                    | Fills a token-identified buffer with data from a source span and returns the target memory to the caller as a span
Method      | Z0.BufferToken`1.Clear                                                | Zero-fills a token-identified buffer
Method      | Z0.ByteReader.Read``1(System.Span{System.Byte},System.Int32,``0@)     | Reads an unmanaged generic value from a bytespan beginning at a specified offset and deposits the result in a caller-supplied target
Method      | Z0.ByteReader.Read``1(``0@)                                           | Reads a single cell into a span of bytes
Method      | Z0.ByteReader.Read(System.ReadOnlySpan{System.Byte})                  | Reads at most 8 bytes from the data source, as determined by source length
Method      | Z0.ByteReader.Read(System.Byte@,System.Byte)                          | Reads up to 8 bytes from a data source reference, as determined by a specified {count} of bytes,            and will likely incinerate the process with a segmentation fault if there aren't {count} bytes to read
Method      | Z0.ByteReader.Read1(System.Byte@)                                     | Reads 1 byte from a data source reference
Method      | Z0.ByteReader.Read2(System.Byte@)                                     | Reads 2 bytes from a data source reference
Method      | Z0.ByteReader.Read3(System.Byte@)                                     | Reads 3 bytes from a data source reference
Method      | Z0.ByteReader.Read4(System.Byte@)                                     | Reads 4 bytes from a data source reference
Method      | Z0.ByteReader.Read5(System.Byte@)                                     | Reads 5 bytes from a data source reference
Method      | Z0.ByteReader.Read6(System.Byte@)                                     | Reads 6 bytes from a data source reference
Method      | Z0.ByteReader.Read7(System.Byte@)                                     | Reads 7 bytes from a data source reference
Method      | Z0.ByteReader.Read8(System.Byte@)                                     | Reads 8 bytes from a data source reference
Method      | Z0.ByteReader.ReadAll(System.Int16@)                                  | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.ReadAll(System.UInt16@)                                 | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.Read(System.UInt16,Z0.N0)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt16,Z0.N1)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.ReadAll(System.Int32@)                                  | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.ReadAll(System.UInt32@)                                 | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.Read(System.UInt32,Z0.N0)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt32,Z0.N1)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt32,Z0.N2)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt32,Z0.N3)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.ReadAll(System.Int64@)                                  | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.ReadAll(System.UInt64@)                                 | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.ReadAll(System.Single@)                                 | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.ReadAll(System.Double@)                                 | Reads the bytes that define a numeric value
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N0)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N1)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N2)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N3)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N4)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N5)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N6)                               | Reads a source byte, identified by natural index
Method      | Z0.ByteReader.Read(System.UInt64,Z0.N7)                               | Reads a source byte, identified by natural index
Type        | Z0.ByteReaderG                                                        | Defines a bitreader that targets parametric unsigned numeric types
Method      | Z0.ByteReaderG.Read``1(System.ReadOnlySpan{System.Byte})              | Reads at most size[T] bytes as determined by the length of the data source
Method      | Z0.Bytes.span``1(``0[])                                               | Constructs a span from a parameter array
Method      | Z0.Bytes.from``1(``0@)                                                | Reads a single cell into a span of bytes
Method      | Z0.Bytes.from``1(``0)                                                 | Converts the source value to a bytespan
Method      | Z0.Bytes.from``1(``0@,System.Span{System.Byte},System.Int32)          | Writes an unmanaged source value to an array
Method      | Z0.Bytes.get``1(``0@)                                                 | Converts the source value to a bytespan
Method      | Z0.Bytes.one``1(``0@,System.Int32)                                    | Reads/writes a byte from/to a reference
Method      | Z0.Bytes.to``1(``0@,System.Span{System.Byte})                         | Reads a byte array from an unmanaged source value and stored the result in a caller-allocated target
Method      | Z0.Cells.cell``1(System.ReadOnlySpan{System.Byte})                    | Reads a generic value from the head of a source span
Method      | Z0.Cells.cell``1(System.ReadOnlySpan{System.Byte},System.Int32)       | Reads a generic value beginning at a specified offset
Method      | Z0.Cells.cell``1(System.Span{System.Byte})                            | Reads a generic value from the head of a source span
Method      | Z0.Cells.cell``1(System.Span{System.Byte},System.Int32)               | Reads an unmanaged generic value from a bytespan beginning at a specified offset
Method      | Z0.Cells.copy``2(``0@,``1@,System.Int32,System.Int32)                 | Copies a specified number of source values to the target and returns the count of copied bytes
Method      | Z0.Cells.copy``2(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Span{``1},System.Int32)| Copies a specified number source cells to the target and returns the count of copied bytes
Method      | Z0.Cells.copy``2(System.Span{``0},System.Int32,System.Int32,System.Span{``1},System.Int32)| Copies a specified number source cells to the target and returns the count of copied bytes
Method      | Z0.Copier.copy``2(``0@,``1@,System.Int32,System.Int32)                | Copies a specified number of source values to the target and returns the count of copied bytes
Method      | Z0.Copier.copy``2(``0@,System.Span{``1})                              | Copies data from an unmanaged value to a target span
Method      | Z0.Copier.copy(System.Byte*,System.Byte*,System.UInt32)               | Copies a contiguous segments of bytes from one location to another
Method      | Z0.Copier.copy``1(``0*,``0*,System.UInt32)                            | Copies a contiguous segments of values from one location to another
Method      | Z0.Copier.copy``1(``0*,System.Span{``0},System.Int32,System.UInt32)   | Copies a contiguous segments of values to a span
Method      | Z0.Copier.copy(System.Byte*,System.Span{System.Byte},System.Int32,System.UInt32)| Copies a contiguous segments of bytes from a source location to a target span
Type        | Z0.IndexFunction`1                                                    | Canonical signature for a function that projects the values of an enumeration onto a congiguous and strictly monotonic sequence            of integers [0,.., n - 1] where n denotes the maximum number of indexed items
Method      | Z0.memory.reader(System.Byte*,System.Int64,System.Int64)              | Allocates a caller-disposed read-only stream over a block of unmanaged memory
Method      | Z0.memory.writer(System.Byte*,System.Int64,System.Int64)              | Allocates a caller-disposed read/write stream over a block of unmanaged memory
Method      | Z0.memory.copy``2(``0@,``1@,System.Int32,System.Int32)                | Copies a specified number of source values to the target and returns the count of copied bytes
Method      | Z0.memory.copy``2(``0@,System.Span{``1})                              | Copies data from an unmanaged value to a target span
Method      | Z0.memory.copy``1(``0*,System.Span{``0},System.Int32,System.UInt32)   | Copies a contiguous segments of values to a span
Method      | Z0.memory.copy(System.Byte*,System.Span{System.Byte},System.Int32,System.UInt32)| Copies a contiguous segments of bytes from a source location to a target span
Method      | Z0.memory.read8(System.Byte@)                                         | Copies a byte
Method      | Z0.memory.read16(System.Byte@)                                        | Reads 16 bits from a contiguous sequence of 2 bytes
Method      | Z0.memory.read32(System.Byte@)                                        | Reads 32 bits from a contiguous sequence of 4 bytes
Method      | Z0.memory.read32(System.UInt16@)                                      | Reads 32 bits from a contiguous sequence of 2 16-bit integers
Method      | Z0.memory.read64(System.Byte@)                                        | Reads 64 bits from a contiguous sequence of 8 bytes
Method      | Z0.memory.read64(System.UInt16@)                                      | Reads 64 bits from a contiguous sequence of 4 16-bit integers
Method      | Z0.memory.read64(System.UInt32@)                                      | Reads 64 bits from a contiguous sequence of 2 32-bit integers
Method      | Z0.memory.store8(System.Byte,System.Byte@)                            | Projects a source byte onto a byte reference
Method      | Z0.memory.store16(System.UInt16,System.Byte@)                         | Projects 16 source bits onto a contiguous sequence of 2 bytes
Method      | Z0.memory.store32(System.UInt32,System.Byte@)                         | Projects 32 source bits onto a contiguous sequence of 4 bytes
Method      | Z0.memory.store32(System.UInt32,System.UInt16@)                       | Projects 32 source bits onto a contiguous sequence of 2 16-bit integers
Method      | Z0.memory.store64(System.UInt64,System.Byte@)                         | Projects 64 source bits onto a contiguous sequence of 8 bytes
Method      | Z0.memory.store64(System.UInt64,System.UInt16@)                       | Projects 64 source bits onto a contiguous sequence of 4 16-bit integers
Method      | Z0.memory.store64(System.UInt64,System.UInt32@)                       | Projects 64 source bits onto a contiguous sequence of 2 32-bit integers
Method      | Z0.memory.cast``2(System.Memory{``0})                                 | Casts memory cells of one type to another
Method      | Z0.memory.edit``1(System.ReadOnlyMemory{``0})                         | Constructs a mutable memory segment from a readonly memory segment
Method      | Z0.memory.reverse``1(System.Memory{``0})                              | Reverses the memory cells in-place
Method      | Z0.memory.enumerate``1(System.ReadOnlyMemory{``0})                    | Enumerates the content of a readonly memory segment
Method      | Z0.memory.map``2(System.Memory{``0},System.Func{``0,``1})             | Projects a memory source to target via a supplied transformation
Type        | Z0.NatSpan`2                                                          | Defines a span of natural length N
Property    | Z0.NatSpan`2.Data                                                     | The backing storage
Property    | Z0.NatSpan`2.Head                                                     | The leading storage cell
Property    | Z0.NatSpan`2.IsEmpty                                                  | True if no capacity exist, false otherwise
Property    | Z0.NatSpan`2.Item(System.Int32)                                       | Queries/manipulates an index-identified cell
Method      | Z0.NatSpan`2.Cell``1(System.Int32)                                    | Queries/manipulates the underlying strorage through the perspective of another type
Type        | Z0.TableSpan`3                                                        | Defines a tabular span of dimension MxN
Property    | Z0.TableSpan`3.RowCount                                               | The number of rows in the structure
Property    | Z0.TableSpan`3.ColCount                                               | The number of columns in the structure
Property    | Z0.TableSpan`3.RowLenth                                               | The number of cells in each row
Property    | Z0.TableSpan`3.ColLength                                              | The number of cells in each column
Property    | Z0.TableSpan`3.CellCount                                              | The total number of allocated elements
Method      | Z0.TableSpan`3.CheckedTransfer(System.Span{`2})                       | Verifies correct source span length prior to backing store assignment
Property    | Z0.TableSpan`3.Data                                                   | Provides access to the underlying linear storage
Method      | Z0.NatSpan.bytes``2(System.Span{``1},``0)                             | Loads a bytespan of natural length from a generic source span
Method      | Z0.NatSpan.alloc``2(``0,``1)                                          | Allocates span of natural length
Method      | Z0.NatSpan.broadcast``2(``1,Z0.NatSpan{``0,``1}@)                     | Fills a target block with replicated cell data
Method      | Z0.NatSpan.load``2(System.Span{``1},``0)                              | Verifies correct source span length prior to backing store assignment
Method      | Z0.NatSpan.load``2(``1@,``0)                                          | Loads a natural block from a reference
Method      | Z0.refs.edit``1(``0@)                                                 | Presents a readonly reference as reference
Method      | Z0.refs.seek``1(``0@,System.Int32)                                    | Adds an offset to a reference, measured relative to the reference type
Method      | Z0.refs.skip``1(``0@,System.Int32)                                    | Skips a specified number of source elements and returns a readonly reference to the result
Method      | Z0.refs.skip``1(``0@,System.UInt32)                                   | Skips a specified number of source elements and returns a readonly reference to the resulting element
Method      | Z0.refs.skip``1(``0@,System.UInt64)                                   | Skips a specified number of source elements and returns a readonly reference to the resulting element
Method      | Z0.refs.swap``1(``0@,``0@)                                            | The canonical swap function
Method      | Z0.refs.seek8``1(``0@,System.Int32)                                   | Interprets a generic element source as a uint8 element source and skips {count} elments of bit-width 8
Method      | Z0.refs.seekb``1(``0@,System.Int64)                                   | Adds an offset to a reference, measured in bytes
Method      | Z0.refs.skip8``1(``0@,System.Int32)                                   | Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.refs.const64``1(``0@)                                              | Interprets a readonly generic reference as a readonly uint64 reference
Method      | Z0.refs.head``1(System.Span{``0})                                     | Returns a reference to the location of the first span element
Method      | Z0.refs.head``1(System.ReadOnlySpan{``0})                             | Returns a reference to the head of a readonly span
Method      | Z0.refs.skip``1(System.Span{``0},System.Int32)                        | Adds an offset to the head of a span, measured relative to the reference type
Method      | Z0.refs.skip``1(System.ReadOnlySpan{``0},System.Int32)                | Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
Method      | Z0.refs.seek``1(System.Span{``0},System.Int32)                        | Adds an offset to the head of a span, measured relative to the reference type
Method      | Z0.refs.ptr``1(``0@,System.Int32)                                     | Presents generic reference as a generic pointer displaced by an element offset
Method      | Z0.refs.constptr``1(``0@)                                             | Presents a readonly reference as a generic pointer which should intself be considered constant            but, as far as the author is aware, no facility within the language can encode that constraint
Method      | Z0.Spans.alloc``1(System.Int32)                                       | Allocates a span
Method      | Z0.Spans.alloc``1(System.UInt16)                                      | Allocates a span
Method      | Z0.Spans.alloc``1(System.Byte)                                        | Allocates a span
Method      | Z0.Spans.bytes``1(System.Span{``0})                                   | Presents a span of generic values as a span of bytes
Method      | Z0.Spans.cast``1(System.Span{System.Byte},System.Span{System.Byte}@)  | Produces a target T-span from a source bytespan populated with a maximal            number of elemements obtainable from the source bytes; remaining bytes, if            any, are deposited into a remainder bytespan
Method      | Z0.Spans.cast``2(System.ReadOnlySpan{``0})                            | Reimagines a readonly span of one element type as a readonly span of another element type
Method      | Z0.Spans.cast``2(System.Span{``0})                                    | Reimagines a span of one element type as a span of another element type
Method      | Z0.Spans.count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})| Counts the number of values in the source that satisfy the predicate
Method      | Z0.Spans.edit``1(``0@)                                                | Presents a readonly reference as reference
Method      | Z0.Spans.edit``1(``0@,System.Int32)                                   | Loads a span from a memory reference
Method      | Z0.Spans.head``1(System.Span{``0})                                    | Returns a reference to the head of a readonly span
Method      | Z0.Spans.head``1(System.Span{``0},System.Int32)                       | Returns a reference to the head of a span, offset by a specified amount
Method      | Z0.Spans.head``1(System.ReadOnlySpan{``0})                            | Returns a reference to the head of a readonly span
Method      | Z0.Spans.head``1(System.ReadOnlySpan{``0},System.Int32)               | Returns a readonly reference to the head of a readonly span, offset by a specified amount
Method      | Z0.Spans.head``2(Z0.NatSpan{``0,``1})                                 | Returns a reference to the location of the first span element
Method      | Z0.Spans.head8``1(System.Span{``0})                                   | Presents the bytespan head as a reference to an unsigned 8-bit integer
Method      | Z0.Spans.head16``1(System.Span{``0})                                  | Presents the span head as a reference to an unsigned 16-bit integer
Method      | Z0.Spans.head32``1(System.Span{``0})                                  | Presents the bytespan head as a reference to an unsigned 32-bit integer
Method      | Z0.Spans.head8``1(System.ReadOnlySpan{``0})                           | Presents the span head as a readonly reference to an unsigned 8-bit integer
Method      | Z0.Spans.head16``1(System.ReadOnlySpan{``0})                          | Presents the span head as a readonly reference to an unsigned 16-bit integer
Method      | Z0.Spans.head64``1(System.Span{``0})                                  | Presents the span head as a reference to an unsigned 64-bit integer
Method      | Z0.Spans.head64``1(System.ReadOnlySpan{``0})                          | Presents the span head as a readonly reference to an unsigned 64-bit integer
Method      | Z0.Spans.head32``1(System.ReadOnlySpan{``0})                          | Presents the span head as a readonly reference to an unsigned 32-bit integer
Method      | Z0.Spans.head32i(System.ReadOnlySpan{System.Byte})                    | Presents the span head as a reference to a signed 32-bit integer
Method      | Z0.Spans.head64i(System.ReadOnlySpan{System.Byte})                    | Presents the span head as a reference to a signed 64-bit integer
Method      | Z0.Spans.iter``1(System.ReadOnlySpan{``0},System.Action{``0})         | Inovkes an action for each element in a source span
Method      | Z0.Spans.iteri``1(System.ReadOnlySpan{``0},System.Action{System.Int32,``0})| Inovkes an action for each element in a source span
Method      | Z0.Spans.iter``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Action{``0,``0})| Inovkes an action for each pair of elements in source spans of equal length
Method      | Z0.Spans.iter``1(System.Span{``0},System.Span{``0},System.Action{``0,``0})| Inovkes an action for each pair of elements in source spans of equal length
Method      | Z0.Spans.liberate(System.Span{System.Byte})                           | Enables bytespan execution
Method      | Z0.Spans.map``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})| Maps the elements of a source span to a target span
Method      | Z0.Spans.mapi``2(System.ReadOnlySpan{``0},System.Func{System.Int32,``0,``1},System.Span{``1})| Maps the elements of a source span to a target span
Method      | Z0.Spans.seek``1(``0@,System.Int32)                                   | Adds an offset to a reference, measured relative to the reference type
Method      | Z0.Spans.seek8``1(System.Span{``0},System.Int32)                      | Adds an offset to the head of a span, measured relative to 8-bit segments, and returns the resulting reference
Method      | Z0.Spans.seek16``1(System.Span{``0},System.Int32)                     | Adds an offset to the head of a span, measured relative to 16-bit segments, and returns the resulting reference
Method      | Z0.Spans.seek32``1(System.Span{``0},System.Int32)                     | Adds an offset to the head of a span, measured relative to 32-bit segments, and returns the resulting reference
Method      | Z0.Spans.seek64``1(System.Span{``0},System.Int32)                     | Adds an offset to the head of a span, measured relative to 64-bit segments, and returns the resulting reference
Method      | Z0.Spans.seek``1(System.Span{``0},System.Int32)                       | Adds an offset to the head of a span, measured relative to the reference type
Method      | Z0.Spans.skip``1(System.Span{``0},System.Int32)                       | Adds an offset to the head of a span, measured relative to the reference type
Method      | Z0.Spans.skip``1(System.ReadOnlySpan{``0},System.Int32)               | Skips a specified number of source segments and returns a readonly reference to the leading element following the advance
Method      | Z0.Spans.skip``1(``0@,System.Int32)                                   | Skips a specified number of source elements and returns a readonly reference to the resulting element
Method      | Z0.Spans.skip8``1(System.ReadOnlySpan{``0},System.Int32)              | Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.Spans.skip16``1(System.ReadOnlySpan{``0},System.Int32)             | Skips a specified number of 16-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.Spans.skip32``1(System.ReadOnlySpan{``0},System.Int32)             | Skips a specified number of 32-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.Spans.skip64``1(System.ReadOnlySpan{``0},System.Int32)             | Skips a specified number of 64-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.Spans.s8u``1(System.Span{``0})                                     | Presents a span of generic values as a span of bytes
Method      | Z0.Spans.s8i``1(System.Span{``0})                                     | Presents a readonly span of generic values as a span of signed bytes
Method      | Z0.Spans.s16i``1(System.Span{``0})                                    | Presents a span of generic values as a span of signed 16-bit integers
Method      | Z0.Spans.s16u``1(System.Span{``0})                                    | Presents a span of generic values as a span of unsigned 16-bit integers
Method      | Z0.Spans.s32i``1(System.Span{``0})                                    | Presents a span of generic values as a span of signed 32-bit integers
Method      | Z0.Spans.s32u``1(System.Span{``0})                                    | Presents a span of generic values as a span of unsigned 32-bit integers
Method      | Z0.Spans.s64i``1(System.Span{``0})                                    | Presents a span of generic values as a span of 64-bit signed integers
Method      | Z0.Spans.s64u``1(System.Span{``0})                                    | Presents a span of generic values as a span of 64-bit unsigned integers
Method      | Z0.Spans.s32f``1(System.Span{``0})                                    | Presents a span of generic values as a span of 32-bit floats
Method      | Z0.Spans.s64f``1(System.Span{``0})                                    | Presents a span of generic values as a span of 64-bit floats
Method      | Z0.Spans.s8i``1(System.ReadOnlySpan{``0})                             | Presents a readonly span ofgeneric values as a readonly span of signed bytes
Method      | Z0.Spans.s8u``1(System.ReadOnlySpan{``0})                             | Presents a readonly span ofgeneric values as a readonly span of bytes
Method      | Z0.Spans.s16i``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of signed 16-bit integers
Method      | Z0.Spans.s16u``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of unsigned 16-bit integers
Method      | Z0.Spans.s32i``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of signed 32-bit integers
Method      | Z0.Spans.s32u``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of unsigned 32-bit integers
Method      | Z0.Spans.s64i``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of 64-bit signed integers
Method      | Z0.Spans.s64u``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of 64-bit unsigned integers
Method      | Z0.Spans.s32f``1(System.ReadOnlySpan{``0})                            | Presents a readonly span of generic values as a readonly span of 32-bit floats
Method      | Z0.Spans.s64f``1(System.ReadOnlySpan{``0})                            | Presents a readonly readonly span of generic values as a readonly readonly span of 64-bit floats
Method      | Z0.Spans.span``1(``0[])                                               | Constructs a span from a parameter array
Method      | Z0.Spans.to``1(System.Span{System.Byte})                              | Reimagines a span of bytes as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.UInt32})                            | Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.SByte})                             | Reimagines a span of signed bytes as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.Int16})                             | Reimagines a span of signed 16-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.UInt16})                            | Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.Int32})                             | Reimagines a span of unsigned 32-bit signed integers as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.Int64})                             | Reimagines a span of unsigned 64-bit signed integers as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.UInt64})                            | Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.Double})                            | Reimagines a span of unsigned 64-bit floats as a span of generic values
Method      | Z0.Spans.to``1(System.Span{System.Single})                            | Reimagines a span of unsigned 32-bit floats as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.SByte})                     | Reimagines a span of signed bytes as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.Byte})                      | Reimagines a span of bytes as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.Int16})                     | Reimagines a span of signed 16-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.UInt16})                    | Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.UInt32})                    | Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.Int32})                     | Reimagines a span of unsigned 32-bit signed integers as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.Int64})                     | Reimagines a span of unsigned 64-bit signed integers as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.UInt64})                    | Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.Single})                    | Reimagines a span of unsigned 32-bit floats as a span of generic values
Method      | Z0.Spans.to``1(System.ReadOnlySpan{System.Double})                    | Reimagines a span of unsigned 64-bit floats as a span of generic values
Method      | Z0.Spans.view``1(``0@,System.Int32)                                   | Loads a span from a memory reference
Method      | Z0.Spans.view8``1(``0@,System.Int32)                                  | Loads a bytespan from a memory reference
Type        | Z0.PartRing`2                                                         | Defines a mutable circular S-cell buffer partitioned into T-cell parts
Property    | Z0.RingBuffer`1.Count                                                 | The number of elements stored in the queue
Property    | Z0.RingBuffer`1.InPos                                                 | The current position of the writer
Property    | Z0.RingBuffer`1.OutPos                                                | The current position of the reader
Property    | Z0.RingBuffer`1.Capacity                                              | The number of elements the buffer can store
Method      | Z0.SpanBuffers.parts``2(System.Int32)                                 | Allocates a span-predicated S/T ring buffer
Method      | Z0.SpanBuffers.parts``2(System.Span{``0})                             | Covers an S-span with an S/T ring buffer
Method      | Z0.SpanBuffers.ring``1(System.Int32)                                  | Allocates a span-predicated T-ring buffer
Method      | Z0.SpanBuffers.ring``1(System.Span{``0})                              | Covers a span with a ring buffer
Method      | Z0.SpanBuffers.stack``1(System.Int32)                                 | Allocates a span-predicated T-stack
Method      | Z0.SpanBuffers.stack``1(System.Span{``0})                             | Covers a span with a stack buffer
Type        | Z0.Stacked.MemStack128                                                | Defines 16 bytes = 512 bits of stack-allocated storage
Type        | Z0.Stacked.MemStack256                                                | Covers 32 bytes = 256 bits of stack-allocated storage
Type        | Z0.Stacked.MemStack512                                                | Covers 64 bytes = 512 bits of stack-allocated storage
Type        | Z0.Stacked.MemStack1024                                               | Covers 128 bytes = 1024 bits of stack-allocated storage
Method      | Z0.Stacks.alloc(Z0.W8)                                                | Stack allocates 8 bits of storage
Method      | Z0.Stacks.alloc(Z0.W16)                                               | Stack allocates 16 bits of storage
Method      | Z0.Stacks.alloc(Z0.W32)                                               | Stack allocates 32 bits of storage
Method      | Z0.Stacks.alloc(Z0.W64)                                               | Stack allocates 64 bits of storage
Method      | Z0.Stacks.alloc(Z0.W128)                                              | Stack allocates 16 bytes = 128 bits of storage
Method      | Z0.Stacks.alloc(Z0.W256)                                              | Stack allocates 32 bytes = 256-bits of storage
Method      | Z0.Stacks.alloc(Z0.W512)                                              | Stack allocates 64 bytes = 512-bits of storage
Method      | Z0.Stacks.alloc(Z0.W1024)                                             | Stack allocates 128 bytes = 1024-bits of storage
Method      | Z0.Stacks.char2                                                       | Allocates a 2-character storage stack
Method      | Z0.Stacks.char4                                                       | Allocates a 4-character storage stack
Method      | Z0.Stacks.char8                                                       | Allocates an 8-character storage stack
Method      | Z0.Stacks.char16                                                      | Allocates a 16-character storage stack
Method      | Z0.Stacks.char32                                                      | Allocates a 32-character storage stack
Method      | Z0.Stacks.char64                                                      | Allocates a 64-character storage stack
Method      | Z0.Stacks.cell``1(Z0.Stacked.MemStack64@,System.Int32,``0)            | Queries/manipulates an index-identified generic cell value
Method      | Z0.Stacks.cell``1(Z0.Stacked.MemStack128@,System.Int32,``0)           | Queries/manipulates an index-identified generic cell value
Method      | Z0.Stacks.cell``1(Z0.Stacked.MemStack256@,System.Int32,``0)           | Queries/manipulates an index-identified generic cell value
Method      | Z0.Stacks.cell``1(Z0.Stacked.MemStack512@,System.Int32,``0)           | Queries/manipulates an index-identified generic cell value
Method      | Z0.Stacks.cell``1(Z0.Stacked.MemStack1024@,System.Int32,``0)          | Queries/manipulates an index-identified generic cell value
Method      | Z0.Stacks.cell(Z0.Stacked.CharStack2@,System.Int32)                   | Queries/manipulates a index-identified character in a storage stack
Method      | Z0.Stacks.cell(Z0.Stacked.CharStack4@,System.Int32)                   | Queries/manipulates a index-identified character in a storage stack
Method      | Z0.Stacks.cell(Z0.Stacked.CharStack8@,System.Int32)                   | Queries/manipulates a index-identified character in a storage stack
Method      | Z0.Stacks.cell(Z0.Stacked.CharStack16@,System.Int32)                  | Queries/manipulates a index-identified character in a storage stack
Method      | Z0.Stacks.cell(Z0.Stacked.CharStack32@,System.Int32)                  | Queries/manipulates a index-identified character in a storage stack
Method      | Z0.Stacks.cell(Z0.Stacked.CharStack64@,System.Int32)                  | Queries/manipulates a index-identified character in a storage stack
Method      | Z0.Stacks.first(Z0.Stacked.CharStack2@)                               | Retrieves a readonly reference to the leading character storage cell
Method      | Z0.Stacks.first(Z0.Stacked.CharStack4@)                               | Retrieves a readonly reference to the leading character storage cell
Method      | Z0.Stacks.first(Z0.Stacked.CharStack8@)                               | Retrieves a readonly reference to the leading character storage cell
Method      | Z0.Stacks.first(Z0.Stacked.CharStack16@)                              | Retrieves a readonly reference to the leading character storage cell
Method      | Z0.Stacks.first(Z0.Stacked.CharStack32@)                              | Retrieves a readonly reference to the leading character storage cell
Method      | Z0.Stacks.first(Z0.Stacked.CharStack64@)                              | Retrieves a readonly reference to the leading character storage cell
Method      | Z0.Stacks.head``1(Z0.Stacked.MemStack64@,``0)                         | Presents the leading source storage cell as a generic reference
Method      | Z0.Stacks.head``1(Z0.Stacked.MemStack128@,``0)                        | Presents the leading source storage cell as a generic reference
Method      | Z0.Stacks.head``1(Z0.Stacked.MemStack256@,``0)                        | Presents the leading source storage cell as a generic reference
Method      | Z0.Stacks.head``1(Z0.Stacked.MemStack512@,``0)                        | Presents the leading source storage cell as a generic reference
Method      | Z0.Stacks.head``1(Z0.Stacked.MemStack1024@,``0)                       | Presents the leading source storage cell as a generic reference
Method      | Z0.Stacks.head(Z0.Stacked.CharStack2@)                                | Retrieves a reference to the leading character storage cell
Method      | Z0.Stacks.head(Z0.Stacked.CharStack4@)                                | Retrieves a reference to the leading character storage cell
Method      | Z0.Stacks.head(Z0.Stacked.CharStack8@)                                | Retrieves a reference to the leading character storage cell
Method      | Z0.Stacks.head(Z0.Stacked.CharStack16@)                               | Retrieves a reference to the leading character storage cell
Method      | Z0.Stacks.head(Z0.Stacked.CharStack32@)                               | Retrieves a reference to the leading character storage cell
Method      | Z0.Stacks.head(Z0.Stacked.CharStack64@)                               | Retrieves a reference to the leading character storage cell
Method      | Z0.Stacks.head32(Z0.Stacked.MemStack32@)                              | Presents the leading source storage cell as reference to an unsigned 32-bit integer
Method      | Z0.Stacks.head64(Z0.Stacked.MemStack64@)                              | Presents the leading source storage cell as reference to an unsigned 64-bit integer
Method      | Z0.Stacks.head64(Z0.Stacked.MemStack128@)                             | Presents the leading source storage cell as reference to an unsigned 64-bit integer
Method      | Z0.Stacks.head64(Z0.Stacked.MemStack256@)                             | Presents the leading source storage cell as reference to an unsigned 64-bit integer
Method      | Z0.Stacks.head64(Z0.Stacked.MemStack512@)                             | Presents the leading source storage cell as reference to an unsigned 64-bit integer
Method      | Z0.Stacks.head64(Z0.Stacked.MemStack1024@)                            | Presents the leading source storage cell as reference to an unsigned 64-bit integer
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack8@)                                | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack16@)                               | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack32@)                               | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack64@)                               | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack128@)                              | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack256@)                              | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack512@)                              | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.head8(Z0.Stacked.MemStack1024@)                             | Presents the leading source storage cell as a byte reference
Method      | Z0.Stacks.span``1(Z0.Stacked.MemStack64@,``0)                         | Fills a span with data from a stack storage block
Method      | Z0.Stacks.span``1(Z0.Stacked.MemStack128@,``0)                        | Fills a span with data from a stack storage block
Method      | Z0.Stacks.span``1(Z0.Stacked.MemStack256@,``0)                        | Fills a span with data from a stack storage block
Method      | Z0.Stacks.span``1(Z0.Stacked.MemStack512@,``0)                        | Fills a span with data from a stack storage block
Method      | Z0.Stacks.span``1(Z0.Stacked.MemStack1024@,``0)                       | Fills a span with data from a stack storage block
Method      | Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack64@)    | Deposits a specified number reference-identified bytes to a storage target
Method      | Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack128@)   | Deposits a specified number reference-identified bytes to a storage target
Method      | Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack256@)   | Deposits a specified number reference-identified bytes to a storage target
Method      | Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack512@)   | Deposits a specified number reference-identified bytes to a storage target
Method      | Z0.Stacks.store(System.Byte@,System.UInt32,Z0.Stacked.MemStack1024@)  | Deposits a specified number reference-identified bytes to a storage target
Type        | Z0.ByteBlocks.ByteBlock1                                              | 1 byte of storage
Type        | Z0.ByteBlocks.ByteBlock2                                              | 2 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock3                                              | 3 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock4                                              | 4 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock5                                              | 5 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock6                                              | 6 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock7                                              | 7 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock8                                              | 8 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock9                                              | 9 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock10                                             | 10 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock11                                             | 11 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock12                                             | 12 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock13                                             | 13 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock14                                             | 14 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock15                                             | 15 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock16                                             | 16 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock32                                             | 32 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock64                                             | 64 bytes of storage
Type        | Z0.ByteBlocks.ByteBlock128                                            | 127 bytes of storage
Method      | Z0.SymBits.extract(System.SByte,System.Byte,System.Byte)              | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.Byte,System.Byte,System.Byte)               | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.Int16,System.Byte,System.Byte)              | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.UInt16,System.Byte,System.Byte)             | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.UInt32,System.Byte,System.Byte)             | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.Int32,System.Byte,System.Byte)              | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.UInt64,System.Byte,System.Byte)             | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.Int64,System.Byte,System.Byte)              | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.Single,System.Byte,System.Byte)             | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.extract(System.Double,System.Byte,System.Byte)             | Extracts a contiguous range of bits from the source inclusively between two index positions
Method      | Z0.SymBits.vmove8x16(System.Byte@)                                    | VPMOVZXBW ymm, m128            16x8u -&gt; 16x16u            Projects 16 unsigned 8-bit integers onto 16 unsigned 16-bit integers
Method      | Z0.MemStore.Load(System.Int32)                                        | Loads the data tracked by an index-identified memory reference
Method      | Z0.ResourceStore.Accessors(System.Type)                               | Queries the source type for ByteSpan property getters
Method      | Z0.ResourceStore.Accessors(System.Collections.Generic.IEnumerable{System.Type})| Queries the source types for ByteSpan property getters
Method      | Z0.ResourceStore.Accessors(System.Reflection.Assembly)                | Queries the source assembly for ByteSpan property getters
Method      | Z0.ResourceStore.Accessors(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})| Queries the source assemblies for ByteSpan property getters
Property    | Z0.ISymbol`1.Value                                                    | The symbol value
Property    | Z0.ISymbol`2.SegWidth                                                 | The bit-width of a storage cell
Property    | Z0.ISymbol`2.Cell                                                     | The symbol value, from storage cell persective
Property    | Z0.ISymbol`3.SymWidth                                                 | The bit-width of a symbol
Property    | Z0.ISymbol`3.Capacity                                                 | The maximum number of symbols that can be packed into a storage cell
Type        | Z0.Symbol`1                                                           | Defines an S-symbol value
Property    | Z0.Symbol`1.Value                                                     | The symbol value
Type        | Z0.Symbol`2                                                           | Defines an S-symbol value covered by a T-storage cell
Property    | Z0.Symbol`2.Value                                                     | The symbol value
Property    | Z0.Symbol`2.Cell                                                      | The symbol value, from storage cell persective
Type        | Z0.Symbol`3                                                           | Defines an S-symbol value, of bit-width N, covered by a T-storage cell
Property    | Z0.Symbol`3.Value                                                     | The symbol value
Property    | Z0.Symbol`3.Cell                                                      | The symbol value, from storage cell persective
Property    | Z0.Symbol`3.SymWidth                                                  | The bit-width of a symbol
Property    | Z0.Symbol`3.SegWidth                                                  | The bit-width of a storage cell
Property    | Z0.Symbol`3.Capacity                                                  | The maximum number of symbols that can be packed into a storage cell
Property    | Z0.SymbolSpec`1.SegWidth                                              | The bit-width of a storage cell
Property    | Z0.SymbolSpec`1.Capacity                                              | The maximum number of symbols that can be stored in a segment
Type        | Z0.SymbolSpec`2                                                       | Specifes symbol characteristics
Property    | Z0.SymbolSpec`2.Symbols                                               | The specified symbols
Property    | Z0.SymbolSpec`2.SegWidth                                              | The bit-width of a storage cell
Property    | Z0.SymbolSpec`2.SegDomain                                             | The storage cell type identifier
Property    | Z0.SymbolSpec`2.SymWidth                                              | The number of bits occupied by a symbol
Property    | Z0.SymbolSpec`2.Capacity                                              | The maximum number of symbols that can be stored in a segment
Type        | Z0.SymbolSpec`3                                                       | Defines a set of S-symbol values, each of bit-width N and covered by a T-storage cell
Property    | Z0.SymbolSpec`3.SymWidth                                              | The number of bits occupied by a symbol
Property    | Z0.SymbolSpec`3.SegWidth                                              | The width of the underlying numeric primitive
Property    | Z0.SymbolSpec`3.Capacity                                              | The maximum number of symbols that can be stored in a segment
Type        | Z0.BitFormatConfig                                                    | Controls formatting when bitstring content is rendered as text
Field       | Z0.BitFormatConfig.TrimLeadingZeros                                   | Indicates whether leading zeros should be trimmed
Field       | Z0.BitFormatConfig.SpecifierPrefix                                    | Indicates whether the '0b' prefix should be emitted
Field       | Z0.BitFormatConfig.MaxBitCount                                        | The maximum number of bits to be extracted/formatted from the source
Field       | Z0.BitFormatConfig.BlockWidth                                         | Optional contiguous digit sequence width; if unspecified the bistring will be formatted without blocks
Field       | Z0.BitFormatConfig.BlockSep                                           | The character with which to intersperse blocks; if unspecified, a space will be used
Field       | Z0.BitFormatConfig.RowWidth                                           | The optional row width, applicable when formatting rectangular regions of bits
Field       | Z0.BitFormatConfig.ZPad                                               | The number of leading zeroes to pad
Type        | Z0.BitFormatter`1                                                     | Configurable bit data type formatter
Method      | Z0.Formatters.content``1(Z0.FormatRender{``0})                        | Creates a formatter from a rendering function render:T -&gt; string
Method      | Z0.Formatters.content``2(Z0.FormatRender{``0,``1})                    | Creates a formatter from a rendering function render:T -&gt; string
Method      | Z0.Formatters.title``1(Z0.TitleRender{``0})                           | Creates a title formatter from a rendering function render:T -&gt; string
Method      | Z0.Formatters.entitled``1(Z0.ITitleFormatter{``0},Z0.IFormatter{``0}) | Creates an entitled formatter that provides formatting, entitling and entitled formatting
Method      | Z0.Formatters.entitled``1(Z0.TitleRender{``0},Z0.FormatRender{``0})   | Creates an entitled formatter that provides formatting, entitling and entitled formatting            from a format/title render function pair
Type        | Z0.Formatters.DefaultFormatter                                        | Reifies a formatter via Object.ToString()
Type        | Z0.TitleFormatter`1                                                   | Provies a parametric title reification predicated on a render function
Type        | Z0.FormatterAttribute                                                 | Applied to a type to specify a non-default formatter
Property    | Z0.FormatterAttribute.Realization                                     | Specifies the type that realizes IFormatter and its generic variants if extant
Type        | Z0.IEntitled`1                                                        | Characterizes a content formatter that can also produces titles and titled content
Type        | Z0.ITitleFormatter                                                    | Characterizes a service that knows how to produce titles for things
Type        | Z0.ITitleFormatter`1                                                  | Characterizes a parametric title formatter
Field       | Z0.HexSpecs.UC                                                        | The uppercase hex format code
Field       | Z0.HexSpecs.LC                                                        | The lowercase hex format code
Field       | Z0.HexSpecs.DataDelimiter                                             | The delimiter used to separate hex numbers when rendering a hex data sequence
Field       | Z0.HexSpecs.HexPad8                                                   | The maximum number of hex characters required to represent an 8-bit number
Field       | Z0.HexSpecs.HexPad16                                                  | The maximum number of hex characters required to represent a 16-bit number
Field       | Z0.HexSpecs.HexPad32                                                  | The maximum number of hex characters required to represent a 32-bit number
Field       | Z0.HexSpecs.HexPad64                                                  | The maximum number of hex characters required to represent a 64-bit number
Field       | Z0.HexSpecs.PreSpec                                                   | Standard hex specifier that leads the numeric content
Field       | Z0.HexSpecs.PostSpec                                                  | Standard hex specifier that trails the numeric content
Field       | Z0.HexSpecs.MinScalarCode                                             | The asci code of the '0' digit
Field       | Z0.HexSpecs.MaxScalarCode                                             | The asci code of the '9' digit
Field       | Z0.HexSpecs.MinCharCodeU                                              | The asci code of the 'A' digit
Field       | Z0.HexSpecs.MaxCharCodeU                                              | The asci code of the 'F' digit
Field       | Z0.HexSpecs.MinCharCodeL                                              | The asci code of the 'a' digit
Field       | Z0.HexSpecs.MaxCharCodeL                                              | The asci code of the 'f' digit
Property    | Z0.HexSpecs.Uppercase                                                 | Defines the asci character codes for uppercase hex digits 1,2, ..., 9, A, ..., F
Property    | Z0.HexSpecs.Lowercase                                                 | Defines the asci character codes for uppercase hex digits 1,2, ..., 9, a, ..., f
Method      | Z0.HexSpecs.IsScalar(System.Char)                                     | Determines whether a character corresponds to one of the lower hex codes
Method      | Z0.HexSpecs.IsUpperChar(System.Char)                                  | Determines whether a character corresponds to one of the uppercase hex code characters
Method      | Z0.HexSpecs.IsLowerChar(System.Char)                                  | Determines whether a character corresponds to one of the lowercase hex code characters
Method      | Z0.HexSpecs.IsHex(System.Char)                                        | Determines whether a character is a hex digit
Method      | Z0.HexSpecs.CaseSpec(System.Boolean)                                  | Selects either the uppercase format code 'X' or lowercase format code 'x'
Method      | Z0.HexSpecs.ClearSpecs(System.String)                                 | Removes leading or trailing hex specifiers
Method      | Z0.HexSpecs.Parse(System.Char)                                        | Attempts to parse a hex digit
Method      | Z0.MemoryRangeParser.Parse(System.String)                             | Attempts to parse an address segment in standard form, [start,end]
Method      | Z0.MemoryRangeParser.ParseOption(System.String)                       | Attempts to parse an address segment in standard form, [start,end]
Method      | Z0.HexByteParser.Parse(System.Char)                                   | Parses the Hex digit if possible; otherwise raises an error
Method      | Z0.HexByteParser.ParseData(System.String)                             | Parses a space-delimited sequence of hex text
Method      | Z0.HexByteParser.ParseByte(System.String)                             | Parses a hex byte
Method      | Z0.HexFormat.data``1(``0[])                                           | Formats a numeric array as hex data content
Method      | Z0.HexFormat.array``1(``0[])                                          | Formats a numeric aray as...numeric array content
Method      | Z0.HexFormat.data``1(System.ReadOnlySpan{``0})                        | Formats a numeric array as hex data
Method      | Z0.HexFormat.digits``1(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)| Formats a sequence of hex characters encoded in a string according to the characteristics of the parametric            type over which the operation is closed
Type        | Z0.HexFormatConfig                                                    | Defines a common set of hex formatting options
Field       | Z0.HexFormatConfig.ZPad                                               | Indicates whether the numeric content should be left-padded with zeros
Field       | Z0.HexFormatConfig.Specifier                                          | Indicates whether a hex specifier, either prefixing or suffixing the numeric content, should be emitted
Field       | Z0.HexFormatConfig.Uppercase                                          | Indicates whether the hex digits 'A',..,'F' should be upper-cased
Field       | Z0.HexFormatConfig.PreSpec                                            | Indicates whether the hex numeric specifier, if emitted, shold prefix the output
Field       | Z0.HexFormatConfig.CaseFormatChar                                     | The case format character, either 'X' or 'x'
Field       | Z0.HexFormatConfig.Delimiter                                          | The character with which to intersperse hex number sequences
Property    | Z0.HexFormatConfig.FormatCode                                         | The hex format string as determined by configuration
Property    | Z0.HexFormatConfig.HexData                                            | Specifies the default configuration for hex data emission
Property    | Z0.HexFormatConfig.ArrayContent                                       | The default configuration for array initialization content
Method      | Z0.HexScalarParser.SystemParse(System.String)                         | Attempts to parse a hex string as an unsigned long
Method      | Z0.NumericParser.transposition``1(System.String)                      | Parses a transposition in canonical form (i j), if possible; otherwise returns the empty transposition
Method      | Z0.NumericParser.create``1                                            | Creates a numeric parser
Method      | Z0.NumericParser.infallible``1                                        | Creates an infallible numeric parser
Method      | Z0.NumericParser.parse``1(System.String)                              | Attempts to parse the source text as a parametrically-identified type
Method      | Z0.Parsers.from``2(Z0.Parse{``0,``1})                                 | Defines a parser predicated on a parse function
Field       | Z0.text.Eol                                                           | Renders an end-of-line marker
Field       | Z0.text.blank                                                         | The non-null empty string
Method      | Z0.text.space                                                         | Produces a space character
Method      | Z0.text.build                                                         | Creates a new stringbuilder
Method      | Z0.text.assign(System.Object,System.Object)                           | Creates a string of the form "lhs := rhs"
Method      | Z0.text.label(System.Object,System.Object)                            | Creates a string of the form "name: content"
Method      | Z0.text.nonempty(System.String)                                       | Tests whether the source string is nonempty
Method      | Z0.text.empty(System.String)                                          | Tests whether the source string is empty
Method      | Z0.text.ifempty(System.String,System.String)                          | A string-specific coalescing operation
Method      | Z0.text.denullify(System.String)                                      | If the test string is null, returns the empty string; otherwise, returns the test string
Method      | Z0.text.slice(System.String,System.Int32)                             | Extracts a substring
Method      | Z0.text.slice(System.String,System.Int32,System.Int32)                | Extracts a substring
Method      | Z0.text.split(System.String,System.Char)                              | Splits the string, removing empty entries
Method      | Z0.text.replicate(System.Char,System.Int32)                           | Creates a stream of replicated characters
Method      | Z0.text.replicate(System.String,System.Int32)                         | Repeats a string a specified number of times
Method      | Z0.text.concat(System.Collections.Generic.IEnumerable{System.Object}) | Concatenates a sequence of values with no intervening delimiter
Method      | Z0.text.concat(System.Collections.Generic.IEnumerable{System.Char})   | Concatenates a sequence of characters with no intervening delimiter
Method      | Z0.text.format``1(``0)                                                | Formats a custom-formattable elements
Method      | Z0.text.format``1(System.Collections.Generic.IEnumerable{``0})        | Produces a sequence of formatted strings given a sequence of custom-formattable elements
Method      | Z0.text.quote(System.String)                                          | Produces a quote
Method      | Z0.text.lspace(System.Object)                                         | Prepends a space to the source content
Method      | Z0.text.rspace(System.Object)                                         | Appends a space to the source content
Method      | Z0.text.spaced(System.Object)                                         | Formats the content with a space on either side
Method      | Z0.text.spaced(System.Collections.Generic.IEnumerable{System.Object}) | Separates each item with a space
Method      | Z0.text.join(System.Char,System.Object[])                             | Concatenates a sequence of strings intersprsed by a character delimiter with a space on either side
Method      | Z0.text.concat(System.Char,System.Collections.Generic.IEnumerable{System.Object})| Concatenates a sequence of strings intersprsed by a character delimiter with a space on either side
Method      | Z0.text.concat(System.String,System.Collections.Generic.IEnumerable{System.Object})| Joins the string representation of a sequence of items interspersed by a separator
Method      | Z0.text.concat(System.Object[])                                       | Joins the string representation of a sequence of items with no interspersed separator
Method      | Z0.text.intersperse(System.String,System.Char)                        | Creates a new string by weaving a specified character between each character in the source
Method      | Z0.text.intersperse(System.String,System.String)                      | Creates a new string by weaving a substring between each character in the source
Method      | Z0.text.apply``2(``0,System.Func{``0,``1})                            | Applies a function to a value
Method      | Z0.text.embrace(System.String)                                        | Encloses text content between left and right braces
Method      | Z0.text.line(System.String)                                           | Produces a line of content
Method      | Z0.text.enquote(System.Object)                                        | Encloses the supplied text in quotation marks
Method      | Z0.text.enclose(System.Object,System.String,System.String)            | Encloses text within (possibly distinct) left and right boundaries
Method      | Z0.text.enclose(System.Object,System.String)                          | Encloses text within a bounding string
Method      | Z0.text.enclose(System.Char,System.String)                            | Encloses a character within uniform left/right bounding string
Method      | Z0.text.enclose(System.Char,System.String,System.String)              | Encloses a character within (possibly distinct) left and right boundaries
Method      | Z0.text.squote(System.Object)                                         | Encloses text between single quote (') characters
Method      | Z0.text.parenthetical(System.Object[])                                | Encloses content between '(' and ')' characters
Method      | Z0.text.parenthetical(System.Char,System.Object[])                    | Encloses content between '(' and ')' where items are interspersed with a separator
Method      | Z0.text.csv(System.Object,System.Object,System.Object[])              | Renders a content array as a comma-separated list of values
Method      | Z0.text.line(System.Collections.Generic.IEnumerable{System.Object})   | Renders each item from a sequence as list of values, delimited by end-of-line
Method      | Z0.text.enclose(System.Object,System.Char,System.Char)                | Encloses text within (possibly distinct) left and right boundaries
Method      | Z0.text.bracket(System.Object)                                        | Encloses text between '[' and ']' characters
Method      | Z0.text.fenced(System.String,System.Char,System.Char)                 | Determines whether the source text is of the form {left:char}{content:string}{right:char},            ignoring leading/trailing whitespace
Method      | Z0.text.enclosed(System.String,System.String,System.String)           | Extracts text that is enclosed between left and right boundaries, i.e. {left}{content}{right} =&gt; {content}
Method      | Z0.text.indices(System.String,System.Char,System.Char)                | Returns the indices of the first occurrences of the first and second characters in the source, if any
Method      | Z0.text.indices(System.String,System.String,System.String)            | Returns the indices of the first occurrences of the first and second strings in the source, if any
Method      | Z0.text.unfence(System.String,System.Char,System.Char)                | If fenced with specified left and right characters, extracts the enclosed content; otherwise, returns the content unmolested
Method      | Z0.text.bracketed(System.String)                                      | Determines whether the source text is of the form "[{content}]"
Method      | Z0.text.unbracket(System.String)                                      | If bracketed, extracts the enclosed content; otherwise, returns the empty string
Method      | Z0.text.ltrim(System.String,System.Char[])                            | Trims leading characters when matched
Method      | Z0.text.rtrim(System.String,System.Char[])                            | Trims trailing characters when matched
Method      | Z0.text.dots(System.Int32)                                            | Produces "..." where count has the default value of 3
Method      | Z0.text.indented(System.String,System.Int32)                          | Produces an indented string
Method      | Z0.text.spaces(System.Int32)                                          | Produces a string containing a specified number of spaces
Method      | Z0.text.remove(System.String,System.String)                           | Removes a substring from the subject
Method      | Z0.text.enquote(System.String)                                        | Encloses text in quotation marks if nonempty; otherwirse returns empty
Method      | Z0.text.segment(System.String,System.Int32,System.Int32)              | Returns a substring identified by inclusive indices
Method      | Z0.text.format(System.Object,System.Object[])                         | Formats and concatenates an arbitrary number of elements
Method      | Z0.text.left(System.String,System.Int32)                              | Returns the substring [0,chars-1]
Method      | Z0.text.stream(System.String,System.Text.Encoding)                    | Allocates a stream over a string
Method      | Z0.text.list``1(System.ReadOnlySpan{``0},System.Char,System.Int32)    | Formats a sequence of formattable things as delimited list
Method      | Z0.text.list``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Char},System.Int32)| Formats a sequence of formattable things as delimited list
Type        | Z0.Duration                                                           | Captures the length of a time period predicated on timer ticks
Field       | Z0.Duration.Ticks                                                     | The number of elapsed timer ticks that determines the period length
Property    | Z0.Duration.Ns                                                        | The duration expressed in nanoseconds
Property    | Z0.Duration.TickCount                                                 | The duration expressed in timer ticks
Property    | Z0.Duration.Ms                                                        | The duration expressed in milliseconds
Type        | Z0.SystemCounter                                                      | A stopwatch-like type in the form of a struct rather than a class
Property    | Z0.SystemCounter.Elapsed                                              | Measures the accumulated duration
Method      | Z0.SystemCounter.Reset                                                | Clears the counter's state
Property    | Z0.SystemCounter.Count                                                | Gets the total number of timer ticks
Property    | Z0.SystemCounter.Time                                                 | Gets the elapsed time implied by the tick count
Method      | Z0.IClocked.counter(System.Boolean)                                   | Allocates and optionally starts a system counter
Method      | Z0.IClocked.stopwatch(System.Boolean)                                 | Creates a new stopwatch and optionally start it
Method      | Z0.IClocked.snapshot(System.Diagnostics.Stopwatch)                    | Captures a stopwatch duration
Method      | Z0.Time.now                                                           | Right now
Method      | Z0.Time.stopwatch(System.Boolean)                                     | Creates a new stopwatch and optionally start it
Method      | Z0.Time.counter(System.Boolean)                                       | Allocates and optionally starts a system counter
Method      | Z0.Tuples.constant``1(``0,``0)                                        | Creates an immutable homogenous 2-tuple
Method      | Z0.Tuples.constant``1(``0,``0,``0)                                    | Creates an immutable homogenous 2-tuple
Method      | Z0.Tuples.constant``1(``0,``0,``0,``0)                                | Creates an immutable homogenous 4-tuple
Method      | Z0.Tuples.pair``1(``0,``0)                                            | Creates an homogenous pair
Method      | Z0.Tuples.paired``2(``0,``1)                                          | Creates a non-homogenous pair
Method      | Z0.Tuples.pairs``1(System.Int32)                                      | Allocates an homogenous pair store
Method      | Z0.Tuples.triple``1(``0,``0,``0)                                      | Creates an homogenous triple
Method      | Z0.Tuples.tripled``3(``0,``1,``2)                                     | Creates a non-homogenous triple
Method      | Z0.Tuples.triples``1(System.Int32)                                    | Allocates an homogenous triplestore
Type        | Z0.ConstPair                                                          | Defines const pair manipulation api
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.SByte}@)                  | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.Byte}@)                   | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.Int16}@)                  | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.UInt16}@)                 | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.Int32}@)                  | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.UInt32}@)                 | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.Int64}@)                  | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.UInt64}@)                 | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.Single}@)                 | Presents a scalar pair as a parametric pair
Method      | Z0.ConstPair.generic``1(Z0.ConstPair{System.Double}@)                 | Presents a scalar pair as a parametric pair
Type        | Z0.BinaryEval`1                                                       | Captures the operands and outcome of binary operator evaluation
Type        | Z0.EvalResult                                                         | Describes the outcome of a test case
Type        | Z0.PairEval`1                                                         | Captures paired evaluations
Type        | Z0.UnaryEval`1                                                        | Captures the operands and outcome unary pair evaluation
Field       | Z0.UnaryEval`1.Source                                                 | The source operand data
Field       | Z0.UnaryEval`1.Target                                                 | The evaluation data
Property    | Z0.UnaryEval`1.Count                                                  | The evaluated pair count
Property    | Z0.UnaryEval`1.LeftLabel                                              | Designates the left operator
Property    | Z0.UnaryEval`1.RightLabel                                             | Designates the right operator
Type        | Z0.HashTable                                                          | Defines a K-V hashtable manipulation api
Method      | Z0.HashTable.Create``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})| Creates a hashtable from a dictionary
Method      | Z0.HashTable.Create(System.Collections.IEnumerable)                   | Creates a boxed hash table from an enumerable sequence of key-value pairs
Type        | Z0.Interval                                                           | Defines interval manipulation api
Method      | Z0.Interval.open``1(``0,``0)                                          | Defines an open interval (min,max)
Method      | Z0.Interval.closed``1(``0,``0)                                        | Defines a closed interval [min,max]
Method      | Z0.Interval.closedL``1(``0,``0)                                       | Constructs the (left-closed | right-open) interval [min,max)
Method      | Z0.Interval.closedR``1(``0,``0)                                       | Constructs the (left-closed | right-open) interval [min,max)
Method      | Z0.Interval.define``1(``0,``0,Z0.IntervalKind)                        | Defines an interval of specified sort
Type        | Z0.Bin`1                                                              | Represents one or more occurrence of a value within an interval
Type        | Z0.ConstPair`1                                                        | An homogenous immutable 2-tuple
Field       | Z0.ConstPair`1.Left                                                   | The first/left/lo member of the pair
Field       | Z0.ConstPair`1.Right                                                  | The second/right/hi member of the pair
Method      | Z0.ConstPair`1.As``1                                                  | Presents the source T-pair as a U-pair
Type        | Z0.ConstQuad`1                                                        | An homogenous immutable 4-tuple
Field       | Z0.ConstQuad`1.First                                                  | The first member
Field       | Z0.ConstQuad`1.Second                                                 | The second member
Field       | Z0.ConstQuad`1.Third                                                  | The third member
Field       | Z0.ConstQuad`1.Fourth                                                 | The fourth member
Method      | Z0.ConstQuad`1.As``1                                                  | Interprets the pair over an alternate domain
Type        | Z0.ConstTriple`1                                                      | An homogenous immutable 3-tuple
Field       | Z0.ConstTriple`1.First                                                | The first member
Field       | Z0.ConstTriple`1.Second                                               | The second member
Field       | Z0.ConstTriple`1.Third                                                | The third member
Method      | Z0.ConstTriple`1.As``1                                                | Interprets the pair over an alternate domain
Type        | Z0.HashTable`2                                                        | Reifies a K-V parametric hashtable, along with extras
Property    | Z0.HashTable`2.Empty                                                  | A hashtable that hashes nothing
Type        | Z0.Interval`1                                                         | Defines a contiguous segment of homogenous values that lie within left and right boundaries
Field       | Z0.Interval`1.Left                                                    | The left endpoint
Field       | Z0.Interval`1.Right                                                   | The right endpoint
Property    | Z0.Interval`1.Kind                                                    | The interval classification
Property    | Z0.Interval`1.U01                                                     | Specifies the canonical closed unit interval over the underlying primitive
Property    | Z0.Interval`1.Full                                                    | Defines a closed interval that subsumes all points representable by the primal type
Property    | Z0.Interval`1.Unbound                                                 | Defines an open interval that subsumes all points representable by the primal type and all points represented             by increasing the size of the primal type without altering other characteristics
Property    | Z0.Interval`1.LeftClosed                                              | Specifies whether the interval is left-closed, or equivalently right-open, denoted by [Left,Right),
Property    | Z0.Interval`1.RightClosed                                             | Specifies whether the interval is right-closed, or equivalently left-open, denoted by (Left,Right],
Property    | Z0.Interval`1.Open                                                    | Specifies whether the interval is open, denoted by (Left,Right)
Property    | Z0.Interval`1.Closed                                                  | Specifies whether the interval is closed, denoted by [Left,Right]
Property    | Z0.Interval`1.RightOpen                                               | Specifies whether the interval is open on the right and closed on the left, denoted by [Left,Right)
Property    | Z0.Interval`1.LeftOpen                                                | Specifies whether the interval is open on the left and closed on the right, denoted by (Left,Right]
Property    | Z0.Interval`1.LeftUnbounded                                           | Specifies whether the interval is unbounded on the left, denoted by (-∞, right).
Property    | Z0.Interval`1.RightUnbounded                                          | Specifies whether the interval is unbounded on the left, denoted by (left, ∞).
Property    | Z0.Interval`1.Unbounded                                               | Specifies whether the interval is unbounded on the left and right, denoted by (-∞, ∞).
Property    | Z0.Interval`1.Degenerate                                              | Specifies whether the left and right enpoints are the same
Property    | Z0.Interval`1.IsEmpty                                                 | Specifies whether the interval is the zero interval
Property    | Z0.Interval`1.Zero                                                    | Specifies the zero interval
Method      | Z0.Interval`1.ToOpen                                                  | Creates an open interval with endpoints from the existing interval
Method      | Z0.Interval`1.ToLeftOpen                                              | Creates a left-open/right-closed interval with endpoints from the existing interval
Method      | Z0.Interval`1.ToRightClosed                                           | Creates a left-open/right-closed interval with endpoints from the existing interval
Method      | Z0.Interval`1.ToRightOpen                                             | Creates a left-open/right-closed interval with endpoints from the existing interval
Method      | Z0.Interval`1.ToLeftClosed                                            | Creates a left-closed interval with endpoints from the existing interval
Method      | Z0.Interval`1.ToClosed                                                | Creates a closed interval with endpoints from the existing interval
Method      | Z0.Interval`1.Convert``1                                              | Converts the left and right underlying values
Method      | Z0.Interval`1.As``1                                                   | Creates a view of the data in the inverval as seen through the            lens of another type, but performs no conversion
Property    | Z0.Interval`1.Empty                                                   | The interval of nothingness
Type        | Z0.Pair`1                                                             | An homogenous mutable 2-tuple
Field       | Z0.Pair`1.Left                                                        | The first member
Field       | Z0.Pair`1.Right                                                       | The second member
Method      | Z0.Pair`1.As``1                                                       | Interprets the pair over an alternate domain
Type        | Z0.Triple`1                                                           | An homogenous mutable 3-tuple
Field       | Z0.Triple`1.First                                                     | The first member
Field       | Z0.Triple`1.Second                                                    | The second member
Field       | Z0.Triple`1.Third                                                     | The third member
Method      | Z0.Triple`1.As``1                                                     | Interprets the pair over an alternate domain
Type        | Z0.Tripled`3                                                          | Defines a non-homogenous mutable 3-tuple
Field       | Z0.Tripled`3.First                                                    | The first member
Field       | Z0.Tripled`3.Second                                                   | The second member
Field       | Z0.Tripled`3.Third                                                    | The third member
Method      | Z0.Tripled`3.As``3                                                    | Interprets the pair over alternate domains
Type        | Z0.U01`1                                                              | Defines a unit interval for a primal type
Field       | Z0.U01`1.LeftClosed                                                   | Specifies whether the interval is closed on the left
Field       | Z0.U01`1.RightClosed                                                  | Specifies whether the interval is closed on the right
Method      | Z0.U01`1.Close                                                        | Manufactures the interval [0,1]
Method      | Z0.U01`1.Open                                                         | Manufactures the interval (0,1)
Type        | Z0.Pairs                                                              | Defines pair/paired manipulation api
Method      | Z0.Pairs.pair``1(``0,``0)                                             | Creates an homogenous pair
Method      | Z0.Pairs.paired``2(``0,``1)                                           | Creates a non-homogenous pair
Method      | Z0.Pairs.constant``1(``0,``0)                                         | Creates an immutable homogenous 2-tuple
Method      | Z0.Pairs.index``1(Z0.Pair{``0}[])                                     | Creates a pair index from an array of pairs
Type        | Z0.IPolyrand                                                          | Characterizes source capable of producing an interminable sequence of pseudorandom bounded points             of any numeric type among: sbyte, byte, short, ushort, int, uint, long, ulong, float, double
Property    | Z0.IPolyrand.Navigator                                                | Retrieves the random stream navigator, if supported
Type        | Z0.IPolyrandProvider                                                  | Characterizes a type that provides access to a stateful and parametric-polymorphic             pseudorandom number generator
Type        | Z0.IPolySource                                                        | Characterizes a fountain of generic points
Method      | Z0.IPolySource.Next``1                                                | Retrieves the next point from the source, bound only by the domain of the type
Method      | Z0.IPolySource.Next``1(``0)                                           | Retrieves the next point from the source, constrained by an upper bounds
Method      | Z0.IPolySource.Next``1(``0,``0)                                       | Retrieves the next point from the source, constrained by upper and lower bounds
Method      | Z0.IPolySource.Domain``1                                              | Returns the default domain used when producing random points for a parametrically-identifed type
Method      | Z0.IPolySource.Next``1(Z0.Interval{``0})                              | Retrieves the next point from the source, bound within a specified interval
Property    | Z0.ISampleDefaults`1.SampleDomain                                     | The domain of potential values
Type        | Z0.Pairs`1                                                            | Captures a pair sequence
Field       | Z0.Pairs`1.Data                                                       | The captured sequence
Method      | Z0.Pairs`1.Select(System.Int32)                                       | Returns a mutable reference to an index-identified sequence element
Property    | Z0.Pairs`1.Item(System.Int32)                                         | Returns a mutable reference to an index-identified sequence element
Property    | Z0.Pairs`1.Count                                                      | Specifies the number of elements in the sequence
Method      | Z0.Pairs`1.Enumerate                                                  | Lifts sequence content into the LINQ monad
Method      | Z0.NaturalNumericClosures.Define(System.Reflection.MethodInfo,System.Nullable{System.UInt64},System.UInt64,Z0.NumericKind)| Defines an untyped closure over a natural numeric method of sort NxT or MxNxT
Method      | Z0.NaturalNumericClosures.Define``1(System.Reflection.MethodInfo,System.Nullable{System.UInt64},System.UInt64)| Defines a T-parametric closure that includes either one or two natural parameter specifications
Method      | Z0.NaturalNumericClosures.Define``2(System.Reflection.MethodInfo)     | Defines a closure pair NxT over a conforming generic method definition
Method      | Z0.NaturalNumericClosures.Define``3(System.Reflection.MethodInfo)     | Defines a closure triple MxNxT over a conforming generic method definition
Method      | Z0.IInsist.insist(System.Boolean)                                     | Demands mystery invariant satisfaction
Method      | Z0.IInsist.insist(System.Boolean,System.String)                       | Demands mystery invariant satisfaction, but with an attendant message             that, hopefully, expounds the mystery
Method      | Z0.IInsist.insist``1(System.UInt64)                                   | Demands that a numeric value matches the value of parametric type natural
Method      | Z0.IInsist.insist``1(System.Int32)                                    | Demands that a numeric value matches the value of parametric type natural, because .Net is hooked on int32
Method      | Z0.IInsist.insist``1(``0)                                             | Demands that a reference type value is non-null
Method      | Z0.IInsist.insist``1(``0,System.Func{``0,System.Boolean})             | Demands that a value satisfies a predicate
Method      | Z0.IInsist.insist``1(System.Nullable{``0})                            | Demands that a nullable value type value is non-null
Method      | Z0.IInsist.insist``1(Z0.Option{``0})                                  | Demands that an option has a value
Method      | Z0.IInsist.insist``1(``0,``0)                                         | Demands operand equality
Field       | Z0.Typed.z8i                                                          | The zero-value for an 8-bit signed integer
Field       | Z0.Typed.z8                                                           | The zero-value for an 8-bit usigned integer
Field       | Z0.Typed.z16i                                                         | The zero-value for a 16-bit signed integer
Field       | Z0.Typed.z16                                                          | The zero-value for a 16-bit unsigned integer
Field       | Z0.Typed.z32i                                                         | The zero-value for a 32-bit signed integer
Field       | Z0.Typed.z32                                                          | The zero-value for a 32-bit usigned integer
Field       | Z0.Typed.z64i                                                         | The zero-value for a 64-bit signed integer
Field       | Z0.Typed.z64                                                          | The zero-value for a 64-bit usigned integer
Field       | Z0.Typed.z32f                                                         | The zero-value for a 32-bit float
Field       | Z0.Typed.z64f                                                         | The zero-value for a 64-bit float
Method      | Z0.Typed.value``1(``0)                                                | Returns the numeric value represented by a natural type
Method      | Z0.NatCalc.add``2(``0,``1)                                            | Computes k := k1 + k2
Method      | Z0.NatCalc.min``2(``0,``1)                                            | Computes k := k1 + k2
Method      | Z0.NatCalc.max``2(``0,``1)                                            | Computes k := k1 + k2
Method      | Z0.NatCalc.or``2(``0,``1)                                             | Computes k := k1 | k2
Method      | Z0.NatCalc.xor``2(``0,``1)                                            | Computes k := k1 ^ k2
Method      | Z0.NatCalc.not``1(``0)                                                | Computes k := ~k1
Method      | Z0.NatCalc.div``2(``0,``1)                                            | Computes k := k1 / k2
Method      | Z0.NatCalc.divprod``3(``0,``1,``2)                                    | Computes k := (k1*k2) / k3
Method      | Z0.NatCalc.divT``2(``0,``1)                                           | Computes k := value[N] / bitsize[T]
Method      | Z0.NatCalc.divT``3(``0,``1,``2)                                       | Computes k := (k1 / k2) / bitsize[t]
Method      | Z0.NatCalc.divceilT``2(``0,``1)                                       | Computes the upward-rounded quotient             q := natval[N] % bitsize[T] == 0 ? natval[N] / bitsize[T] : (natval[N] / bitsize[T]) + 1
Method      | Z0.NatCalc.eqT``2(``0,``1)                                            | Computes the predicate p := natval[N] == bitsize[T]
Method      | Z0.NatCalc.gt``2(``0,``1)                                             | Computes the predicate p := value[K1] &gt; value[K2]
Method      | Z0.NatCalc.gteq``2(``0,``1)                                           | Computes the predicate p := value[K1] &gt;= value[K2]
Method      | Z0.NatCalc.gtT``2(``0,``1)                                            | Computes the predicate p := value[N] &gt; bitsize[T]
Method      | Z0.NatCalc.gteqT``2(``0,``1)                                          | Computes the predicate p := value[N] &gt;= bitsize[T]
Method      | Z0.NatCalc.mod``2(``0,``1)                                            | Computes k := k1 % k2
Method      | Z0.NatCalc.modT``2(``0,``1)                                           | Computes k := value[N] % bitsize[T]
Method      | Z0.NatCalc.modprod``3(``0,``1,``2)                                    | Computes k := (k1*k2) % k3
Method      | Z0.NatCalc.mul``2(``0,``1)                                            | Computes k := k1*k2
Method      | Z0.NatCalc.mul``3(``0,``1,``2)                                        | Computes k := k1*k2*k3
Method      | Z0.NatCalc.even``1(``0)                                               | Computes k := k % 2 == 0
Method      | Z0.NatCalc.odd``1(``0)                                                | Computes k := k % 2 != 0
Method      | Z0.NatCalc.pow2m1``1(``0)                                             | Computes k := 2^n - 1
Method      | Z0.NatCalc.pow2``1(``0)                                               | Computes k := 2^n
Method      | Z0.NatCalc.square``1(``0)                                             | Computes k := k1*k1
Method      | Z0.NatCalc.srl``2(``0,``1)                                            | Computes k := x &gt;&gt; n
Method      | Z0.NatCalc.sub``2(``0,``1)                                            | Computes k := k1 - k2
Method      | Z0.NatCalc.prodgteq``3(``0,``1,``2)                                   | Computes b := k1 * k2 &gt;= k3
Method      | Z0.NatCalc.prodeq``3(``0,``1,``2)                                     | Computes b := k1 * k2 == k3
Method      | Z0.Dim.define``2(``0,``1)                                             | Constructs an natural dimension of order 2
Method      | Z0.Dim.define(System.UInt64,System.UInt64)                            | Defines a dimension of order 2
Type        | Z0.DimInfo                                                            | Describes a dimension of any order
Field       | Z0.DimInfo.Order                                                      | The number of dimension axes
Field       | Z0.DimInfo.Axes                                                       | The axis index
Field       | Z0.DimInfo.Volume                                                     | Specifies the maximum number of cells that may inhabit the associated space
Type        | Z0.DimK                                                               | Defines a dimension with an arbitrary number of axes
Type        | Z0.Dim2                                                               | Defines a rectangular dimension
Field       | Z0.Dim2.I                                                             | The first axis, e.g. the x-axis
Field       | Z0.Dim2.J                                                             | The second axis, e.g. the y-axis
Property    | Z0.Dim2.Volume                                                        | The volume bound by the rectangle defined by the two axes
Property    | Z0.Dim2.Item(System.Int32)                                            | Returns the axis corresponding to its 0-based index
Property    | Z0.Dim2.Order                                                         | The axis count - 2
Type        | Z0.Dim`2                                                              | Defines a rectangular dimension
Property    | Z0.Dim`2.I                                                            | Specifies the first component of the dimension
Property    | Z0.Dim`2.J                                                            | Specifies the second component of the dimension
Property    | Z0.Dim`2.Volume                                                       | The volume bound by the rectangle defined by the two axes
Property    | Z0.Dim`2.Item(System.Int32)                                           | Returns the axis corresponding to its 0-based index
Property    | Z0.Dim`2.Order                                                        | The axis count - 2
Type        | Z0.Dim1                                                               | Specifies a dimension with one axis
Type        | Z0.Dim`1                                                              | Defines a dimension axis which may represent the dimension of a vector of length N            or the dimensions of a square matrix that contains N vectors of dimension N
Property    | Z0.Dim`1.I                                                            | The one-dimensional axis
Type        | Z0.IDim                                                               | Characterizes a dimension of arbitrary order
Property    | Z0.IDim.Order                                                         | Specifies the number of axes in the dimension
Property    | Z0.IDim.Volume                                                        | Specifies the maximum number of cells that may inhabit the associated space
Property    | Z0.IDim.Item(System.Int32)                                            | Gets the dimension axis determined by its 0-based index, an integer in the interval [0,Order-1]
Property    | Z0.IDim`2.RowCount                                                    | Specifies the first component of the dimension
Property    | Z0.IDim`2.ColCount                                                    | Specifies the second component of the dimension
Type        | Z0.Mod                                                                | Defines mod/div operations
Field       | Z0.Mod.n                                                              | Specifies the divisor for which the modulus was constructed
Field       | Z0.Mod.stateMax                                                       | The maximum state value
Method      | Z0.Mod.Define``1(``0)                                                 | Constructs a modulus operator with a persistent type-natural divisor
Method      | Z0.Mod.Define(System.UInt32,System.UInt32)                            | Constructs a modulus operator with a persistent divisor
Method      | Z0.Mod.op_Increment(Z0.Mod)                                           | Increments the source operand in-place
Method      | Z0.Mod.op_Decrement(Z0.Mod)                                           | Decrements the source operand in-place
Method      | Z0.Mod.mod(System.UInt32)                                             | Computes a % n
Method      | Z0.Mod.div(System.UInt32)                                             | Computes the quotient a / n
Method      | Z0.Mod.divrem(System.UInt32,System.UInt32@)                           | Computes the quotient and remainder
Method      | Z0.Mod.divisible(System.UInt32)                                       | Computes whether a % n == 0
Method      | Z0.ModOps.mod(System.UInt64,System.UInt64,System.UInt32)              | Computes a % N
Method      | Z0.ModOps.div(System.UInt64,System.UInt64,System.UInt32)              | Computes the quotient a / N
Method      | Z0.ModOps.divisible(System.UInt64,System.UInt64,System.UInt32)        | Computes whether a % n == 0
Method      | Z0.ModOps.add(System.UInt64,System.UInt64,System.UInt32,System.UInt32)| Computes (a + b) mod n
Method      | Z0.ModOps.mul(System.UInt64,System.UInt64,System.UInt32,System.UInt32)| Computes (a * b) mod n
Type        | Z0.Mod`1                                                              | Represents div/mod operations for a divisor of type N; This type forms a commutative            ring over the set of least residues {0,...,N-1}, i.e. the ring of integers modulo N,            typically denoted Z/nZ. Moreover, Z/nZ is a field iff n is prime
Property    | Z0.Mod`1.M64                                                          | The fixed 64-bit modulus for the generic closure
Property    | Z0.Mod`1.M32                                                          | The fixed 32-bit modulus for the generic closure
Property    | Z0.Mod`1.MR                                                           | The fixed modulus reciprocal
Method      | Z0.Mod`1.Define(System.UInt32)                                        | Constructs a modulus with a specified state
Method      | Z0.Mod`1.op_Implicit(System.UInt32)~Z0.Mod{`0}                        | Implicitly constructs a typed modulus with an initial state, reducing as necessary
Method      | Z0.Mod`1.op_Implicit(System.Int32)~Z0.Mod{`0}                         | Implicitly constructs a modulus with an initial state from a signed integer, converting/reducing as necessary
Method      | Z0.Mod`1.op_Implicit(Z0.Mod{`0})~System.UInt32                        | Implicitly extracts the state value as an unsigned integer from the source
Method      | Z0.Mod`1.op_Implicit(Z0.Mod{`0})~System.Int32                         | Implicitly extracts the state value as a signed integer from the source
Method      | Z0.Mod`1.op_Increment(Z0.Mod{`0})                                     | Increments the source operand in-place
Method      | Z0.Mod`1.op_Decrement(Z0.Mod{`0})                                     | Decrements the source operand in-place
Method      | Z0.Mod`1.op_Subtraction(Z0.Mod{`0},Z0.Mod{`0})                        | Subtracts the second operand from the first
Method      | Z0.Mod`1.mod(System.UInt32)                                           | Computes a % n
Method      | Z0.Mod`1.div(System.UInt32)                                           | Computes the quotient a / n
Method      | Z0.Mod`1.divrem(System.UInt32,System.UInt32@)                         | Computes the quotient a / n and remainder a % n
Method      | Z0.Mod`1.divisible(System.UInt32)                                     | Computes whether a % n == 0
Method      | Z0.Mod`1.add(System.UInt64,System.UInt64)                             | Computes the modular sum of the operands
Method      | Z0.Mod`1.sub(System.UInt64,System.UInt64)                             | Computes the modular difference of the operands
Method      | Z0.Mod`1.mul(System.UInt64,System.UInt64)                             | Computes the modular product of the operands
Method      | Z0.Mod`1.inc(System.UInt64)                                           | Modular increment
Method      | Z0.Mod`1.dec(System.UInt64)                                           | Modular decrement
Property    | Z0.Mod`1.State                                                        | Returns the current state
Property    | Z0.Mod`1.StateMax                                                     | The maximum state value
Property    | Z0.Mod`1._Mod                                                         | The equivalent untyped modulus with nullary state
Type        | Z0.Digit`2                                                            | Defines a generic digit representation realtive to a natural base
Method      | Z0.NatTypes.sequence(System.UInt32)                                   | Computes the generic type definition for a natural sequence
Type        | Z0.NatVal                                                             | Captures the value of a type natural
Type        | Z0.N0                                                                 | The singleton type representative for 0
Type        | Z0.N1                                                                 | The singleton type representative for 1
Type        | Z0.N2                                                                 | The type that represents 2
Type        | Z0.N3                                                                 | The singleton type representative for 3
Type        | Z0.N4                                                                 | The singleton type representative for 4
Type        | Z0.N5                                                                 | The singleton type representative for 5
Type        | Z0.N6                                                                 | The singleton type representative for 6
Type        | Z0.N7                                                                 | The singleton type representative for 7
Type        | Z0.N8                                                                 | The singleton type representative for 8
Type        | Z0.N9                                                                 | The singleton type representative for 9
Method      | Z0.TypeNats.between(System.UInt64,System.UInt64)                      | Consructs the canonical sequence representatives for the natural numbers within an inclusive range
Method      | Z0.TypeNats.digits(System.UInt64)                                     | Creates a squence of prmitive values from a natural value
Method      | Z0.TypeNats.primitives(System.Byte[])                                 | Constructs an array of types that defines a sequence of natural primitives
Method      | Z0.TypeNats.seq(System.Byte[])                                        | Creates a reflected natural sequence from a sequence of primitive values
Method      | Z0.TypeNats.seq``2(``0,``1)                                           | Creates a two-term natural sequence {D0, D1} from natural primative types D0 and D1            that represents the value k = d0*10 + d1
Method      | Z0.TypeNats.seq``3(``0,``1,``2)                                       | Creates a three-term natural sequence {D0, D1, D2} from natural primitive types D0, D1, D2            that represents the value k = d0*10^2 + d1*10^1 + d2
Method      | Z0.TypeNats.seq``4(``0,``1,``2,``3)                                   | Creates a four-term natural sequence {D0, D1, D2, D3} from natural primitive types D0, D1, D2, D3            that represents the value k = d0*10^3 + d1*10^2 + d2*10 + d3
Method      | Z0.TypeNats.seq``5(``0,``1,``2,``3,``4)                               | Creates a five-term natural sequence {D0, D1, D2, D3, D4} from natural primitive types D0, D1, D2, D3, D4            that represents the value k = d0*10^4 + d1*10^3 + d2*10^2 + d3*10 + d4
Method      | Z0.TypeNats.seq(System.Byte,System.Byte)                              | Creates a reflected two-term natural sequence {d0, d1} from three primitive values d0 and d1
Method      | Z0.TypeNats.seq(System.Byte,System.Byte,System.Byte)                  | Creates a reflected three-term natural sequence {d0, d1, d2} from three primitive values d0, d1, d2
Method      | Z0.TypeNats.seq(System.Byte,System.Byte,System.Byte,System.Byte)      | Creates a reflected four-term natural sequence from three primitive values
Method      | Z0.TypeNats.value``1(``0)                                             | Reveals the natural number in bijection with a parametric type natural
Method      | Z0.TypeNats.digit``2(``1,``0)                                         | Defines a digit relative to a natural base
Method      | Z0.TypeNats.nat``1(``0)                                               | Constructs a natural representative for a specified parametric type
Method      | Z0.TypeNats.reflect(System.UInt64)                                    | Constructs the natural type corresponding to an integral value
Type        | Z0.NatSeq0`1                                                          | Reifies a one-term natural sequence
Type        | Z0.NatSeq`2                                                           | Reifies a two-term natural sequence that represents the value k := k1*10 + k2
Type        | Z0.NatSeq`3                                                           | Reifies a three-term natural sequence
Type        | Z0.NatSeq`4                                                           | Reifies a four-term natural sequence
Type        | Z0.NatSeq`5                                                           | Reifies a five-term natural sequence
Type        | Z0.NatSeq`6                                                           | Reifies a six-term natural sequence
Type        | Z0.NatSeq`7                                                           | Reifies a seven-term natural sequence
Type        | Z0.NatSeq`8                                                           | Reifies a seven-term natural sequence
Type        | Z0.NatSeq`9                                                           | Reifies a seven-term natural sequence
Type        | Z0.INatEven`1                                                         | Requires k:K =&gt; k % 2 == 0
Type        | Z0.INatPow2`1                                                         | Characterizes a natural k such that e:E =&gt; k = 2^e
Type        | Z0.INatSum`2                                                          | Requires k := k1 + k2
Type        | Z0.Vector1024`1                                                       | 4x256 / 2x512
Field       | Z0.Vector1024`1.A                                                     | The lo 256 bit segment
Field       | Z0.Vector1024`1.B                                                     | The second 256-bit segment
Field       | Z0.Vector1024`1.C                                                     | The third 256-bit segment
Field       | Z0.Vector1024`1.D                                                     | The hi 256-bit segment
Property    | Z0.Vector1024`1.Count                                                 | The number of cells covered by the vector
Method      | Z0.Vector1024`1.As``1                                                 | Interprets the pair over an alternate domain
Field       | Z0.Vector512`1.Lo                                                     | The lo 256 bits
Field       | Z0.Vector512`1.Hi                                                     | The hi 256 bits
Property    | Z0.Vector512`1.Count                                                  | The number of cells covered by the vector
Method      | Z0.Vector512`1.As``1                                                  | Interprets the pair over an alternate domain
