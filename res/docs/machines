| M:Z0.SystemEventWriter.Receive(Z0.PulseEvent)     | 
            <summary>
            Writes a system heartbeat event
            </summary>
            <param name="e">The event to write</param>    
        
| M:Z0.Machines.Fsm.TransitionRule``2(``0,``1,``1)  | 
            <summary>
            Defines a single state transition rule of the form (trigger : E, source : S) -&gt; target : S 
            </summary>
            <param name="trigger">The incoming event</param>
            <param name="source">The source state</param>
            <param name="target">The target state</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.TransitionFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.ITransitionRule{``0,``1}})| 
            <summary>
            Defines a machine transition function (trigger : E, source: S) -&gt; target : S 
            that determines machine transition behavior
            </summary>
            <param name="rules">The rules that comprise the function</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.OutputRule``3(``0,``1,``2)      | 
            <summary>
            Defines an output rule of the form (trigger : E, source : S) -&gt; output : O
            that specifies that output to emit when an input is received when in the source state
            </summary>
            <param name="trigger">The triggering event</param>
            <param name="source">The source state</param>
            <param name="output">The output value</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.OutputFunction``3(System.Collections.Generic.IEnumerable{Z0.Machines.IOutputRule{``0,``1,``2}})| 
            <summary>
            Defines a machine transition function (trigger : E, source: S) -&gt; target : S 
            that determines machine transition behavior
            </summary>
            <param name="rules"></param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.EntryRule``2(``0,``1)           | 
            <summary>
            Defines an action that fires upon state entry
            </summary>
            <param name="source">The source state</param>
            <param name="target">The the entry action</param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| M:Z0.Machines.Fsm.EntryFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.IFsmActionRule{``0,``1}})| 
            <summary>
            Defines an entry action function
            </summary>
            <param name="rules">The state entry rules</param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| M:Z0.Machines.Fsm.ExitRuleRule``2(``0,``1)        | 
            <summary>
            Defines an action that fires upon state exit
            </summary>
            <param name="source">The source state</param>
            <param name="target">The the exit action</param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| M:Z0.Machines.Fsm.ExitFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.IFsmActionRule{``0,``1}})| 
            <summary>
            Defines an exit action function
            </summary>
            <param name="rules">The state exit rules</param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| M:Z0.Machines.Fsm.Machine``2(System.String,Z0.Machines.IFsmContext,``1,``1,Z0.Machines.MachineTransition{``0,``1})| 
            <summary>
            Defines the most basic FSM, predicated only on ground-state, end-state and transition function
            </summary>
            <param name="id">Identifies the machine within the context of the executing process</param>
            <param name="s0">The ground-state</param>
            <param name="sZ">The end-state</param>
            <param name="f">The transiion function</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.OutputRuleKey``2(``0,``1)       | 
            <summary>
            Defines an output rule key
            </summary>
            <param name="source">The antecedent state</param>
            <param name="input">The output value</param>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.EntryRuleKey``1(``0)            | 
            <summary>
            Defines an entry rule key
            </summary>
            <param name="source">The antecedent state</param>
            <param name="input">The output value</param>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.ExitRuleKey``1(``0)             | 
            <summary>
            Defines an exit rule key
            </summary>
            <param name="source">The antecedent state</param>
            <param name="input">The output value</param>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.TransitionRuleKey``2(``0,``1)   | 
            <summary>
            Defines a key for a transition rule
            </summary>
            <param name="trigger">The triggering event</param>
            <param name="source">The source state</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.Machine``3(System.String,Z0.Machines.IFsmContext,``1,``1,Z0.Machines.MachineTransition{``0,``1},Z0.Machines.EntryFunction{``1,``2},Z0.Machines.ExitFunction{``1,``2})| 
            <summary>
            Defines a machine that supports entry/exit actions on a per-state basis
            </summary>
            <param name="id">Identifies the machine within the context of the executing process</param>
            <param name="s0">The ground-state</param>
            <param name="sZ">The end-state</param>
            <param name="t">The transition function</param>
            <param name="entry">The entry function</param>
            <param name="exit">The exit function</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The entry action type</typeparam>
        
| M:Z0.Machines.Fsm.DefaultObserver``2(Z0.Machines.Fsm{``0,``1},System.Nullable{Z0.Machines.ObserverTrace})| 
            <summary>
            Creates a default machine observer 
            </summary>
            <param name="fsm">The machine under observation</param>
            <param name="trace">Whether to emit trace messages</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.Fsm.CreateContext(Z0.IPolyrand,System.Nullable{System.UInt64})| 
            <summary>
            Creates a machine context
            </summary>
            <param name="random">The random source</param>
        
| M:Z0.Machines.Fsm.Run``2(Z0.Machines.Fsm{``0,``1})| 
            <summary>
            Runs a machine
            </summary>
            <param name="context">The machine context</param>
            <param name="machine">The specified machine</param>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state tyep</typeparam>
        
| M:Z0.Machines.FsmX.ToFunction``2(System.Collections.Generic.IEnumerable{Z0.Machines.TransitionRule{``0,``1}})| 
            <summary>
            Forms a transition function from a sequence of transition rules
            </summary>
            <param name="rules">The individual rules that will comprise the function</param>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.FsmX.TraceTransitions(Z0.Machines.ObserverTrace)| 
            <summary>
            Specifies whether an observer should be notified when a machine transitions from
            one state to a different state
            </summary>
            <param name="trace">The trace specification</param>
        
| M:Z0.Machines.FsmX.TraceEvents(Z0.Machines.ObserverTrace)| 
            <summary>
            Specifies whether an observer should be notified when a machine receives an event
            </summary>
            <param name="trace">The trace specification</param>
        
| M:Z0.Machines.FsmX.TraceCompletions(Z0.Machines.ObserverTrace)| 
            <summary>
            Specifies whether an observer should be notified when a machine attains the completion state
            </summary>
            <param name="trace">The trace specification</param>
        
| M:Z0.Machines.FsmX.TraceErrors(Z0.Machines.ObserverTrace)| 
            <summary>
            Specifies whether an observer should be notified when an error condition is detected
            </summary>
            <param name="trace">The trace specification</param>
        
| P:Z0.Machines.FsmContext.ReceiptLimit             | 
            <summary>
            If specified, the maximum number of event submissions the machine
            will accept prior to forced termination
            </summary>
        
| T:Z0.Machines.InputReceipt`1                      | 
            <summary>
            Delegate for event that fires when an input event has been received
            </summary>
            <param name="input">The input event</param>
            <typeparam name="E">The input event type</typeparam>
        
| T:Z0.Machines.Transitioned`1                      | 
            <summary>
            Delegate for event that fires when a state transition occurs
            </summary>
            <param name="source">The source/antecdent state</param>
            <param name="target">The target state</param>
            <typeparam name="S">The state type</typeparam>
        
| T:Z0.Machines.Completed                           | 
            <summary>
            Delegate for event that fires when a machine attains endstate
            </summary>
            <param name="endstate"></param>
            <param name="asPlanned"></param>
            <typeparam name="S"></typeparam>
        
| T:Z0.Machines.MachineError                        | 
            <summary>
            Delegate for error event
            </summary>
            <param name="error">The trapped exception</param>
        
| T:Z0.Machines.StateEntry`2                        | 
            <summary>
            Delegate that fires upon state entry
            </summary>
            <param name="entry"></param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| T:Z0.Machines.StateExit`2                         | 
            <summary>
            Delegate that fires upon state exit
            </summary>
            <param name="entry"></param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| T:Z0.Machines.IFsmContext                         | 
            <summary>
            Defines context specialization for FSM
            </summary>
        
| P:Z0.Machines.IRuleKey`2.Trigger                  | 
            <summary>
            The triggering event
            </summary>
        
| P:Z0.Machines.IRuleKey`2.Source                   | 
            <summary>
            The source state
            </summary>
        
| P:Z0.Machines.IFsmActionRule`1.Action             | 
            <summary>
            The action invoked
            </summary>
        
| T:Z0.Machines.IFsmStateRule`1                     | 
            <summary>
             Characterizes a state machine rule predicated wholly or in part on a source state
            </summary>
        
| P:Z0.Machines.IFsmStateRule`1.Source              | 
            <summary>
            The source state
            </summary>
        
| T:Z0.Machines.IFsmEventRule`1                     | 
            <summary>
             Characterizes a state machine rule predicated wholly or in part on an input event
            </summary>
        
| P:Z0.Machines.IFsmEventRule`1.Trigger             | 
            <summary>
            The triggering event
            </summary>
        
| P:Z0.Machines.IFsmActionRule`2.Source             | 
            <summary>
            The state upon which the rule is predicated
            </summary>
        
| T:Z0.Machines.IFsmRule`2                          | 
            <summary>
             Characterizes a state machine rule predicated on an input event and source state
            </summary>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The source state</typeparam>
        
| P:Z0.Machines.IFsmRule`2.Key                      | 
            <summary>
            The rule key for hash-based lookups
            </summary>
        
| T:Z0.Machines.ITransitionRule`2                   | 
            <summary>
             Characterizes a rule of the form (input : E, source : S) -&gt; target : S 
            </summary>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The source state</typeparam>
        
| P:Z0.Machines.ITransitionRule`2.Target            | 
            <summary>
            The target state
            </summary>
        
| T:Z0.Machines.IOutputRule`3                       | 
            <summary>
             Characterizes a rule of the form (input : E, source : S) -&gt; output : S 
            </summary>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="O">The output type</typeparam>
        
| P:Z0.Machines.IOutputRule`3.Output                | 
            <summary>
            The output produced
            </summary>
        
| T:Z0.Machines.IFsmFunction                        | 
            <summary>
            Charaterizes a state machine partial function
            </summary>
        
| T:Z0.Machines.Fsm`2                               | 
            <summary>
            Defines a state machine with minimal feature-set
            </summary>
            <typeparam name="E">The incoming event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| P:Z0.Machines.Fsm`2.Runtime                       | 
            <summary>
            Records the time spent actively running
            </summary>
        
| P:Z0.Machines.Fsm`2.Transition                    | 
            <summary>
            The machine transition function
            </summary>
        
| P:Z0.Machines.Fsm`2.ReceiptCount                  | 
            <summary>
            The number of events that have been received
            </summary>
        
| P:Z0.Machines.Fsm`2.TransitionCount               | 
            <summary>
            The number of state transtions that have occurred
            </summary>
        
| P:Z0.Machines.Fsm`2.EndState                      | 
            <summary>
            The endstate which implicitly signals processing completion
            </summary>
        
| F:Z0.Machines.Fsm`2.CurrentState                  | 
            <summary>
            The current state
            </summary>
        
| F:Z0.Machines.Fsm`2.Error                         | 
            <summary>
            An arror that occurred, if any, prior to normal completion
            </summary>
        
| P:Z0.Machines.Fsm`2.Context                       | 
            <summary>
            The machine context
            </summary>
        
| P:Z0.Machines.Fsm`2.Id                            | 
            <summary>
            Identifies the machine within the process
            </summary>
        
| E:Z0.Machines.Fsm`2.InputReceipt                  | 
            <summary>
            Fires when input is received
            </summary>
        
| E:Z0.Machines.Fsm`2.Transitioned                  | 
            <summary>
            Fires when a transition occurs from one state to a different state
            </summary>
        
| E:Z0.Machines.Fsm`2.Completed                     | 
            <summary>
            Fires when the machine has reached endstate
            </summary>
        
| E:Z0.Machines.Fsm`2.Oops                          | 
            <summary>
            Fires when an error is trapped
            </summary>
        
| P:Z0.Machines.Fsm`2.Triggers                      | 
            <summary>
            Specifies the events that the machine can accept
            </summary>
        
| P:Z0.Machines.Fsm`2.Finished                      | 
            <summary>
            Indicates whether the machine has finished
            </summary>
        
| P:Z0.Machines.Fsm`2.StartTime                     | 
            <summary>
            Records the time at which the machine was started
            </summary>
        
| P:Z0.Machines.Fsm`2.EndTime                       | 
            <summary>
            Records the time at which the machine stopped
            </summary>
        
| P:Z0.Machines.Fsm`2.Started                       | 
            <summary>
            Specifies whether the machine has started
            </summary>
        
| P:Z0.Machines.Fsm`2.ReceiptLimit                  | 
            <summary>
            Specifies the maximum number of events that will be accept prior
            to forceful termination
            </summary>        
        
| M:Z0.Machines.Fsm`2.Start                         | 
            <summary>
            Begins machine execution
            </summary>
        
| M:Z0.Machines.Fsm`2.Submit(`0)                    | 
            <summary>
            Submits input to the machine
            </summary>
            <param name="input">The input data</param>
        
| M:Z0.Machines.Fsm`2.OnEntry(`1)                   | 
            <summary>
            Called upon state entry
            </summary>
            <param name="entry">The entry state</param>
        
| M:Z0.Machines.Fsm`2.OnExit(`1)                    | 
            <summary>
            Called upon state exit
            </summary>
            <param name="exit">The exit state</param>
        
| T:Z0.Machines.Fsm`3                               | 
            <summary>
            Defines a state machine that supports state entry actions
            </summary>
            <typeparam name="E">The incoming event type</typeparam>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="A">The action type</typeparam>
        
| F:Z0.Machines.Fsm`3.EntryFunc                     | 
            <summary>
            The function to evaluate upon state entry to determine the associated action, if any
            </summary>
        
| F:Z0.Machines.Fsm`3.ExitFunc                      | 
            <summary>
            The function to evaluate upon state exit to determine the associated action, if any
            </summary>
        
| F:Z0.Machines.Fsm`3.EntryAction                   | 
            <summary>
            The entry action
            </summary>
        
| F:Z0.Machines.Fsm`3.ExitAction                    | 
            <summary>
            The exit action
            </summary>
        
| T:Z0.Machines.FsmMessages                         | 
            <summary>
            Defines common messages that are issued during setup/execution
            </summary>
        
| T:Z0.Machines.FsmObserver`2                       | 
            <summary>
            Receives notifications from an active machine
            </summary>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.FsmObserver`2.OnComplete(Z0.Machines.FsmStats,System.Boolean)| 
            <summary>
            Receives notification that a state machine has attained its endstate
            </summary>
        
| M:Z0.Machines.FsmObserver`2.OnTransition(`1,`1)   | 
            <summary>
            Receives notification that a transition has occurred
            </summary>
            <param name="s0">The source state</param>
            <param name="s1">The target state</param>
        
| M:Z0.Machines.FsmObserver`2.OnReceipt(`0)         | 
            <summary>
            Receives notification that an event has ben submitted
            </summary>
            <param name="input">The input event</param>
        
| M:Z0.Machines.FsmObserver`2.OnError(System.Exception)| 
            <summary>
            Receives notification that an error has occurred
            </summary>
            <param name="e">The trapped exception</param>
        
| T:Z0.Machines.FsmStats                            | 
            <summary>
            Captures state machine execution metrics
            </summary>
        
| P:Z0.Machines.FsmStats.MachineId                  | 
            <summary>
            Identifies the machine within the executing process
            </summary>
        
| P:Z0.Machines.FsmStats.StartTime                  | 
            <summary>
            The time the machine received the start signal
            </summary>
        
| P:Z0.Machines.FsmStats.EndTime                    | 
            <summary>
            The time the machine workflow completed
            </summary>
        
| P:Z0.Machines.FsmStats.ReceiptCount               | 
            <summary>
            The number of received events
            </summary>
        
| P:Z0.Machines.FsmStats.TransitionCount            | 
            <summary>
            The number of state transtions that have occurred
            </summary>
        
| P:Z0.Machines.FsmStats.Runtime                    | 
            <summary>
            The time spent during active execution
            </summary>
        
| M:Z0.Machines.PrimalFsm.Specify``1(System.String,``0,``0,``0,``0,System.UInt64)| 
            <summary>
            Defines a primal state machine
            </summary>
            <param name="classifier">An identifier that defines a membership class that is propagaged to all machines predicated on the specification</param>
            <param name="states">The number of states the machine will support</param>
            <param name="events">The number of events the machine will recognize</param>
            <param name="minSamples">The minimum number of events that will be sampled for each state</param>
            <param name="maxSamples">The maximum number of events that will be sampled for each state</param>
            <param name="maxReceipts">The maximum number of events that the machine will accept</param>
            <typeparam name="T">A scalar type of sufficient size to accomodate specified characteristics</typeparam>
        
| M:Z0.Machines.PrimalFsm.Create``1(Z0.Machines.PrimalFsmSpec{``0},System.UInt64,System.UInt64)| 
            <summary>
            Creates a primal FSM according to a supplied spec with a specified random seed and stream index
            </summary>
            <param name="spec">The FSM definition</param>
            <param name="seed">The rng seed</param>
            <param name="index">The rng stream index</param>
            <typeparam name="T">The primal fsm type</typeparam>
        
| M:Z0.Machines.PrimalFsm.Run``1(Z0.Machines.PrimalFsmSpec{``0},System.Int32,System.Boolean)| 
            <summary>
            Executes one or more primal state machines
            </summary>
            <param name="spec">The FSM spec that determines machine characteristics </param>
            <param name="machineCount">The number of machines to execute</param>
            <param name="sequential">Specifies whether the machines will be executed sequentially</param>
            <typeparam name="T">The primal type</typeparam>
        
| M:Z0.Machines.PrimalFsm.RunConcurrent``1(Z0.Machines.PrimalFsmSpec{``0},System.Span{System.UInt64},System.Span{System.UInt64})| 
            <summary>
            Executes the specified machines concurrently
            </summary>
            <param name="spec">The machine definition</param>
            <param name="seeds">The rng seeds that determine initial states of the randomizers</param>
            <param name="indices">The rng stream position indices</param>
            <typeparam name="T">The primal FSM type</typeparam>
        
| M:Z0.Machines.PrimalFsm.RunSequential``1(Z0.Machines.PrimalFsmSpec{``0},System.Span{System.UInt64},System.Span{System.UInt64})| 
            <summary>
            Executes the specified machines sequentially
            </summary>
            <param name="spec">The machine definition</param>
            <param name="seeds">The rng seeds that determine initial states of the randomizers</param>
            <param name="indices">The rng stream position indices</param>
            <typeparam name="T">The primal FSM type</typeparam>
        
| T:Z0.Machines.PrimalFsmSpec`1                     | 
            <summary>
            Specifies a state machine via scalar values
            </summary>
            <typeparam name="T">A scalar type of sufficient size to accomodate specified characteristics</typeparam>
        
| P:Z0.Machines.PrimalFsmSpec`1.Classifier          | 
            <summary>
            An identifier that defines a membership class that is propagaged to all machines predicated on the specification
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.StateCount          | 
            <summary>
            The number of states the machine will support
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.EventCount          | 
            <summary>
            The number of events the machine will recognize
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.MinEventSamples     | 
            <summary>
            The minimum number of events that will be sampled for each state
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.MaxEventSamples     | 
            <summary>
            The maximum number of events that will be sampled for each state
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.ReceiptLimit        | 
            <summary>
            The maximum number of events that the machine will accept
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.StartState          | 
            <summary>
            The initial state as determined by the default value of the primal type, i.e. StartState = default
            </summary>
        
| P:Z0.Machines.PrimalFsmSpec`1.EndState            | 
            <summary>
            The final state as determined by the state count, i.e. EndState := StateCount - 1
            </summary>
        
| M:Z0.Machines.PrimalFsmSpec`1.WithStateCount(`0)  | 
            <summary>
            Modifies the state count in-place
            </summary>
            <param name="count">The new state count</param>
        
| M:Z0.Machines.PrimalFsmSpec`1.WithEventCount(`0)  | 
            <summary>
            Modifies the event count in-place
            </summary>
            <param name="count">The new state count</param>
        
| M:Z0.Machines.PrimalFsmSpec`1.WithClassifier(System.String)| 
            <summary>
            Modifies the classifier in-place
            </summary>
            <param name="count">The new state count</param>
        
| M:Z0.Machines.PrimalFsmSpec`1.WithSampleLimits(`0,`0)| 
            <summary>
            Modifies the min and max event sample sizes in-place
            </summary>
            <param name="Min">The min event sample size</param>
            <param name="Max">The max event sample size</param>
        
| T:Z0.Machines.ActionRule`2                        | 
            <summary>
            Characterizes an action that that executes per machine rules
            </summary>
        
| M:Z0.Machines.ActionRule`2.op_Implicit(System.ValueTuple{`0,`1})~Z0.Machines.ActionRule{`0,`1}| 
            <summary>
            Constructs a rule from a source/action pair
            </summary>
            <param name="src">The source state</param>
            <param name="action">The action</param>
            <typeparam name="S">The source type</typeparam>
            <typeparam name="A">The action tyep</typeparam>
        
| P:Z0.Machines.ActionRule`2.Source                 | 
            <summary>
            The state upon which the rule is predicated
            </summary>
        
| P:Z0.Machines.ActionRule`2.Action                 | 
            <summary>
            The action invoked
            </summary>
        
| P:Z0.Machines.ActionRule`2.Key                    | 
            <summary>
            The rule key
            </summary>
        
| P:Z0.Machines.ActionRule`2.RuleId                 | 
            <summary>
            The rule identifier
            </summary>
        
| T:Z0.Machines.ActionRuleKey`1                     | 
            <summary>
            Identifies an action rule for lookup purposes
            </summary>
            <typeparam name="S">The state type</typeparam>
        
| T:Z0.Machines.EntryFunction`2                     | 
            <summary>
            Defines a set of rules that define actions associated with state entry
            </summary>
        
| T:Z0.Machines.ExitFunction`2                      | 
            <summary>
            Defines a set of rules that define actions associated with state Exit
            </summary>
        
| T:Z0.Machines.MachineOutput`3                     | 
            <summary>
            Defines a partial state machine output function of the form 
            (source : S, target : S) -&gt; output : Option[O]
            for source/target pairs in the domain. If an input value (s1:S, s2:S) 
            is not in the function domain, en empty option is returned
            </summary>
        
| M:Z0.Machines.MachineOutput`3.Output(`0,`1)       | 
            <summary>
            Computes the output value, if any, for a specified source state and event
            </summary>
            <param name="trigger">The incoming event</param>
            <param name="source">The source state</param>
        
| M:Z0.Machines.MachineOutput`3.Rule(Z0.Machines.IRuleKey)| 
            <summary>
            Searches for the output rule given a key
            </summary>
            <param name="key">The rule key</param>
        
| T:Z0.Machines.MachineTransition`2                 | 
            <summary>
            Encapsulates the set of all rules (input : E, source : S) -&gt; target : S that define state machine transitions
            </summary>
        
| P:Z0.Machines.MachineTransition`2.Triggers        | 
            <summary>
            Specifies the set of events that can effect a transition
            </summary>
        
| T:Z0.Machines.OutputRule`3                        | 
            <summary>
            Specifies a state machine rule of the form (input:E, source:S) -&gt; output:O
            </summary>
            <typeparam name="E">The event type</typeparam>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="O">The output type</typeparam>
        
| M:Z0.Machines.OutputRule`3.op_Implicit(System.ValueTuple{`0,`1,`2})~Z0.Machines.OutputRule{`0,`1,`2}| 
            <summary>
            Constructs an output rule from a (source,target,output) triple
            </summary>
            <param name="source">The source state</param>
            <param name="target">The target state</param>
            <param name="output">The output to emit upon a source -&gt; target transition</param>
            <typeparam name="S">The state type</typeparam>
            <typeparam name="O">The output type</typeparam>
        
| P:Z0.Machines.OutputRule`3.Trigger                | 
            <summary>
            The source state
            </summary>
        
| P:Z0.Machines.OutputRule`3.Source                 | 
            <summary>
            The target state
            </summary>
        
| P:Z0.Machines.OutputRule`3.Output                 | 
            <summary>
            The output value associated with the specified state
            </summary>
        
| P:Z0.Machines.OutputRule`3.Key                    | 
            <summary>
            The key that identifies the rule
            </summary>
        
| P:Z0.Machines.OutputRule`3.RuleId                 | 
            <summary>
            The rule id as determined by the key
            </summary>
        
| T:Z0.Machines.OutputRuleKey`2                     | 
            <summary>
            Defines a key for efficient/predicatable output rule indexing/lookup
            </summary>
            <typeparam name="S">The state type</typeparam>
        
| P:Z0.Machines.OutputRuleKey`2.Hash                | 
            <summary>
            The invariant hash
            </summary>
        
| T:Z0.Machines.TransitionRule`2                    | 
            <summary>
            Defines state transition rule of the form (input : E, source : S) -&gt; target : S 
            </summary>
            <typeparam name="E">The input event type</typeparam>
            <typeparam name="S">The state type</typeparam>
        
| M:Z0.Machines.TransitionRule`2.op_Implicit(System.ValueTuple{`0,`1,`1})~Z0.Machines.TransitionRule{`0,`1}| 
            <summary>
            Constructs a state transition rule from an (input,source,target) triple
            </summary>
            <param name="input">The input event</param>
            <param name="source">The source state</param>
            <param name="target">The target state</param>
        
| P:Z0.Machines.TransitionRule`2.Trigger            | 
            <summary>
            The transiion event trigger
            </summary>
        
| P:Z0.Machines.TransitionRule`2.Source             | 
            <summary>
            The state upon which the rule is predicated
            </summary>
        
| P:Z0.Machines.TransitionRule`2.Target             | 
            <summary>
            The target state
            </summary>
        
| P:Z0.Machines.TransitionRule`2.Key                | 
            <summary>
            The key that identifies the rule
            </summary>
        
| P:Z0.Machines.TransitionRule`2.RuleId             | 
            <summary>
            The rule id as determined by the key
            </summary>
        
| T:Z0.Machines.TransitionRuleKey`2                 | 
            <summary>
            Defines a key, predicated on input event and current state, identifies a transition rule
            </summary>
        
| P:Z0.Machines.TransitionRuleKey`2.Trigger         | 
            <summary>
            The triggering event
            </summary>
        
| P:Z0.Machines.TransitionRuleKey`2.Source          | 
            <summary>
            The source state
            </summary>
        
| T:Z0.MachineEvent                                 | 
            <summary>
            Identifies an application-level/logical event
            </summary>
        
| T:Z0.MachineEvent`1                               | 
            <summary>
            Represents an application-level/logical event with which data specific to an event class is associated
            </summary>
        
| F:Z0.MachineEvent`1.Payload                       | 
            <summary>
            Data specific to an event class
            </summary>
        
| M:Z0.MachineEvent`1.Materialize(System.Span{System.Byte})| 
            <summary>
            Reconstitutes an event from a sequence of bytes
            </summary>
        
| M:Z0.MachineEvent`1.Serialize                     | 
            <summary>
            Renders the event as a sequence of bytes
            </summary>
        
| T:Z0.EventEmitter                                 | 
            <summary>
            Defines base type for event originators
            </summary>
        
| T:Z0.EventEmitter`1                               | 
            <summary>
            Base type for event type-specific event originators
            </summary>
        
| T:Z0.EventIdentity                                | 
            <summary>
            Defines logical event identity
            </summary>
        
| M:Z0.EventIdentity.Define(System.UInt32,System.UInt32,System.UInt64,System.UInt64)| 
            <summary>
            Constructs an event identity from a (kind,server,agent,time) tuple
            </summary>
            <param name="loc">The location of occurence</param>
            <param name="time">The time of occurrence</param>
            <param name="kind">The kind of event that occurred</param>
        
| F:Z0.EventIdentity.ServerId                       | 
            <summary>
            The originating server
            </summary>
        
| F:Z0.EventIdentity.AgentId                        | 
            <summary>
            The originating agent
            </summary>
        
| F:Z0.EventIdentity.Timestamp                      | 
            <summary>
            Represents the time at which the event originated
            </summary>
        
| F:Z0.EventIdentity.EventKind                      | 
            <summary>
            The event classifier/discriminator
            </summary>        
        
| P:Z0.EventIdentity.Origin                         | 
            <summary>
            Specifies the spacetime event origin
            </summary>
        
| T:Z0.EventOrigin                                  | 
            <summary>
            Captures an instant in time with respect to a server/agent,
            real or simulated
            </summary>
        
| F:Z0.EventOrigin.Location                         | 
            <summary>
            Uniquely identifies the logical event source
            </summary>
        
| F:Z0.EventOrigin.Timestamp                        | 
            <summary>
            The time of occurrence, expressed as number of elapsed ticks 
            from some fixed point in time
            </summary>
        
| M:Z0.EventOrigin.op_Implicit(System.ValueTuple{System.UInt64,System.UInt64})~Z0.EventOrigin| 
            <summary>
            Constructs an origin from an ordered pair of location and timestamp
            </summary>
            <param name="loc">The location of occurence</param>
            <param name="time">The time of occurrence</param>
        
| M:Z0.EventOrigin.op_Implicit(System.ValueTuple{System.UInt32,System.UInt32,System.UInt64})~Z0.EventOrigin| 
            <summary>
            Constructs an origin from an ordered triple of server, agent and timestamp
            </summary>
            <param name="loc">The location of occurence</param>
            <param name="time">The time of occurrence</param>
        
| P:Z0.EventOrigin.Server                           | 
            <summary>
            The originating server
            </summary>
        
| P:Z0.EventOrigin.Agent                            | 
            <summary>
            The originating agent / application
            </summary>
        
| T:Z0.Heartbeat                                    | 
            <summary>
            Captures an instant in time with respect to a server/agent
            </summary>
        
| F:Z0.Heartbeat.ServerId                           | 
            <summary>
            The originating server
            </summary>
        
| F:Z0.Heartbeat.AgentId                            | 
            <summary>
            The originating agent
            </summary>
        
| F:Z0.Heartbeat.Timestamp                          | 
            <summary>
            Represents the time at which the event originated
            </summary>
        
| T:Z0.IntrinsicEvents                              | 
            <summary>
            Defines identifiers for intrinsic system events
            </summary>
        
| T:Z0.PulseEmitter                                 | 
            <summary>
            Produces a periodic pulse event
            </summary>
        
| T:Z0.PulseEmitterConfig                           | 
            <summary>
            Defines configuration parameters for pulse emission
            </summary>
        
| P:Z0.PulseEmitterConfig.Frequency                 | 
            <summary>
            Specifies the emission frequency
            </summary>
        
| T:Z0.PulseEvent                                   | 
            <summary>
            Represents a pulse/tick/heartbeat relative to some frequency
            </summary>
        
| T:Z0.IServerEvent                                 | 
            <summary>
            Bears witness to an occurence of something of identifiable interest 
            at a unique point in spacetime. The (Location,Timestamp,EventKind) triplet
            confers upon the event a logical identity that identifies it across all spacetime.
            The implicit invariant that this construct confers upon an event source, which has
            a fixed location, is that the source many not produce two events of the same kind
            at the same moment in time, relative to timestamp resolution
            </summary>
        
| P:Z0.IServerEvent.Identity                        | 
            <summary>
            Identifies a system event with respect to time/space/subject
            </summary>
        
| P:Z0.IServerEvent.EventKind                       | 
            <summary>
            Specifies an event classifer that can be used to agregate/distinguish sorts of events
            </summary>
        
| P:Z0.IServerEvent.ServerId                        | 
            <summary>
            Identifies the server that originated the event
            </summary>
        
| P:Z0.IServerEvent.AgentId                         | 
            <summary>
            Identifies the server-owned agent that originated the event
            </summary>
        
| P:Z0.IServerEvent.LocationId                      | 
            <summary>
            A value that uniquely identifies the logical event source, predicated
            on server and agent identity
            </summary>
        
| P:Z0.IServerEvent.Timestamp                       | 
            <summary>
            The time of occurrence, expressed as number of elapsed units
            from some fixed point in time
            </summary>
        
| T:Z0.IEventEmitter                                | 
            <summary>
            Characterizes an event orignator
            </summary>
        
| T:Z0.ServerAgent                                  | 
            <summary>
            Defines a logical server
            </summary>
        
| T:Z0.ServerComplex                                | 
            <summary>
            Agent that manages a collection of servers
            </summary>
        
| M:Z0.ServerComplex.Start(Z0.AgentContext)         | 
            <summary>
            Starts a new complex or returns the existing complex
            </summary>
            <param name="context">The context that the complex will inherit</param>
            <param name="servers"></param>
        
| T:Z0.ServerConfig                                 | 
            <summary>
            Defines a server configuration record
            </summary>
        
| P:Z0.ServerConfig.ServerId                        | 
            <summary>
            Identifes the server to which the configuration applies
            </summary>        
        
| P:Z0.ServerConfig.ServerName                      | 
            <summary>
            A descriptive name
            </summary>
        
| P:Z0.ServerConfig.CoreNumber                      | 
            <summary>
            The CPU core to which the server is assigned
            </summary>
        
| T:Z0.ServerProcess                                | 
            <summary>
            Responsible for managing agents owned by a server
            </summary>
        
| M:Z0.ServerProcess.Define(Z0.AgentContext,System.UInt32,System.UInt32,Z0.ISystemAgent[])| 
            <summary>
            Creates and configures, but does not start, a server process
            </summary>
            <param name="Context">The context to which the server process will be assigned</param>
            <param name="ServerId">The server id</param>
            <param name="ServerAgents">The agents to be managed on behalf of the server</param>
        
| P:Z0.ServerProcess.ServerAgents                   | 
            <summary>
            Exposes a readonly stream of the agents under management on behalf of the server
            </summary>
        
| M:Z0.ServiceIdentityPool.NextAgentId(System.UInt32)| 
            <summary>
            Retrieves the next server-relative agent identity
            </summary>
            <param name="ServerId">The owning server</param>
        
| M:Z0.ServiceIdentityPool.NextServerId             | 
            <summary>
            Retrieves the next server id 
            </summary>
        
