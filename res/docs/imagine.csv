Method      | Z0.As.generic``1(System.Span{System.Byte})                            | Reimagines a span of bytes as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.UInt32})                          | Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.SByte})                           | Reimagines a span of signed bytes as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.Int16})                           | Reimagines a span of signed 16-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.UInt16})                          | Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.Int32})                           | Reimagines a span of unsigned 32-bit signed integers as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.Int64})                           | Reimagines a span of unsigned 64-bit signed integers as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.UInt64})                          | Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.Single})                          | Reimagines a span of unsigned 32-bit floats as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.Double})                          | Reimagines a span of unsigned 64-bit floats as a span of generic values
Method      | Z0.As.generic``1(System.Span{System.Decimal})                         | Presents a span of 128-bit decimal values as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.SByte})                   | Reimagines a span of signed bytes as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Byte})                    | Reimagines a span of bytes as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Int16})                   | Reimagines a span of signed 16-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.UInt16})                  | Reimagines a span of unsigned 16-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.UInt32})                  | Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Int32})                   | Reimagines a span of unsigned 32-bit signed integers as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Int64})                   | Reimagines a span of unsigned 64-bit signed integers as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.UInt64})                  | Reimagines a span of unsigned 64-bit unsigned integers as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Single})                  | Reimagines a span of unsigned 32-bit floats as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Double})                  | Presents a span of 64-bit floats as a span of generic values
Method      | Z0.As.generic``1(System.ReadOnlySpan{System.Decimal})                 | Presents a span of 128-bit decimals as a span of generic values
Method      | Z0.As.add``1(``0@,System.Int32)                                       | Adds an offset to a reference
Method      | Z0.As.add``2(``0@,System.Int32)                                       | Adds a T-counted offset to a readonly S-reference and returns the result for            the greater, or perhaps lesser, good
Method      | Z0.As.edit``1(``0@)                                                   | Transforms a readonly T-cell into an editable T-cell
Method      | Z0.As.edit``2(``0@)                                                   | Transforms a readonly S-cell into an editable T-cell
Method      | Z0.As.edit``2(``0@,``1@)                                              | Transforms a readonly S-cell into an editable T-cell
Method      | Z0.As.inc``1(``0@)                                                    | Increments a cell reference by a unit
Method      | Z0.As.pvoid``1(``0@)                                                  | Converts a generic reference into a void pointer
Method      | Z0.As.point``1(``0@)                                                  | Presents a generic reference as a generic pointer
Method      | Z0.As.point``1(``0@,System.Int32)                                     | Presents a generic reference as a generic pointer displaced by an element offset
Method      | Z0.As.point``2(``0@)                                                  | Presents a generic reference r:T as a generic pointer p:T
Method      | Z0.As.pbyte``1(``0@)                                                  | Presents a generic reference as a byte pointer
Method      | Z0.As.read``1(Z0.W8,``0@)                                             | Interprets a readonly generic reference as a readonly uint8 reference
Method      | Z0.As.read``1(Z0.W16,``0@)                                            | Interprets a readonly generic reference as a readonly uint16 reference
Method      | Z0.As.read``1(Z0.W32,``0@)                                            | Interprets a readonly generic reference as a readonly uint32 reference
Method      | Z0.As.read``1(Z0.W64,``0@)                                            | Interprets a readonly generic reference as a readonly uint64 reference
Method      | Z0.As.read``1(``0*,System.Int32,``0@)                                 | Deposits a source value, identified by pointer and offset, into a target reference
Method      | Z0.As.read``1(``0*,System.Int32,``0@,System.Int32)                    | Deposits a range of source values into a target reference
Method      | Z0.As.read``2(``0@)                                                   | Reads a T-value from an S-source
Method      | Z0.As.read``2(``0@,System.Int32)                                      | Reads a T-value from an S-source after skipping a specified count of S-elements
Method      | Z0.As.read``1(System.Byte@)                                           | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.SByte@)                                          | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Int16@)                                          | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.UInt16@)                                         | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Int32@)                                          | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.UInt32@)                                         | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Int64@)                                          | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.UInt64@)                                         | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Single@)                                         | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Double@)                                         | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Boolean@)                                        | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Char@)                                           | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Decimal@)                                        | Reads a T-cell from a specified data source
Method      | Z0.As.read``1(System.Byte@,System.Int32)                              | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.SByte@,System.Int32)                             | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Int16@,System.Int32)                             | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.UInt16@,System.Int32)                            | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Int32@,System.Int32)                             | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.UInt32@,System.Int32)                            | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Int64@,System.Int32)                             | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.UInt64@,System.Int32)                            | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Single@,System.Int32)                            | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Double@,System.Int32)                            | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Boolean@,System.Int32)                           | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Char@,System.Int32)                              | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.read``1(System.Decimal@,System.Int32)                           | Reads a T-cell from a specified data source after skipping a specified number of source cells
Method      | Z0.As.ref``1(``0*)                                                    | Presents a pointer as a reference
Method      | Z0.As.ref``1(Z0.W8,``0@)                                              | Presents a T-reference as a byte reference
Method      | Z0.As.seek8``1(``0@,System.Int32)                                     | Interprets a generic element source as a uint8 element source and skips {count} elments of bit-width 8
Method      | Z0.As.seek16``1(``0@,System.Int32)                                    | Interprets a generic element source as a uint16 element source and skips {count} elments of bit-width 16
Method      | Z0.As.seek32``1(``0@,System.Int32)                                    | Interprets a generic element source as a uint32 element source and skips {count} elments of bit-width 32
Method      | Z0.As.seek64``1(``0@,System.Int32)                                    | Interprets a generic element source as a uint64 element source and skips {count} elments of bit-width 64
Method      | Z0.As.seekw``1(Z0.W8,``0@,System.Int32)                               | Interprets a generic element source as a uint8 element source and skips {count} elments of bit-width 8
Method      | Z0.As.seekw``1(Z0.W16,``0@,System.Int32)                              | Interprets a generic element source as a uint16 element source and skips {count} elments of bit-width 16
Method      | Z0.As.seekw``1(Z0.W32,``0@,System.Int32)                              | Interprets a generic element source as a uint32 element source and skips {count} elments of bit-width 32
Method      | Z0.As.seekw``1(Z0.W64,``0@,System.Int32)                              | Interprets a generic element source as a uint64 element source and skips {count} elments of bit-width 64
Method      | Z0.As.skip8``1(``0@,System.Int32)                                     | Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.As.skipw``1(Z0.W8,``0@,System.Int32)                               | Skips a specified number of 8-bit source segments and returns a readonly reference to the resulting memory location
Method      | Z0.As.swap``1(``0@,``0@)                                              | The canonical swap function, sort of
Method      | Z0.As.take``2(``0@,``1@)                                              | Takes a T-cell from an S-cell source
Method      | Z0.As.as``2(``0@)                                                     | Envisions an S-cell as a T-cell
Method      | Z0.As.as``2(``0@,``1@)                                                | Envisions an S-cell as a T-cell
Method      | Z0.As.view``2(``0@)                                                   | Views an S-cell as a T-cell
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.SByte},System.Span{``0})  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Byte},System.Span{``0})   | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Int16},System.Span{``0})  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.UInt16},System.Span{``0}) | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Int32},System.Span{``0})  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.UInt32},System.Span{``0}) | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Int64},System.Span{``0})  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Single},System.Span{``0}) | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Double},System.Span{``0}) | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.SByte})                   | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Byte})                    | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Int16})                   | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.UInt16})                  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.transform``1(System.ReadOnlySpan{System.Int32})                 | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.UInt32})                  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Int64})                   | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.UInt64})                  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Single})                  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.ReadOnlySpan{System.Double})                  | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.SByte})                           | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.Byte})                            | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.Int16})                           | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.UInt16})                          | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.Int32})                           | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.UInt32})                          | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.transform``1(System.Span{System.Int64})                         | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.UInt64})                          | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.Single})                          | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``1(System.Span{System.Double})                          | Transforms values from a source span to an allocated target span with cells of parametric numeric kind
Method      | Z0.As.convert``2(System.ReadOnlySpan{``0}@,System.Span{``1}@)         | Applies the unconditional numeric conversion S -&gt; T for each source element
Method      | Z0.As.convert``2(System.Span{``0})                                    | Applies the unconditional conversion S -&gt; T for each source element
Method      | Z0.As.convert``2(System.ReadOnlySpan{``0})                            | Converts values in the source to values of the target type
Method      | Z0.As.cover``1(``0*,System.Int32)                                     | Covers a pointer-identified T-counted buffer with a span
Method      | Z0.As.cover``1(``0@,System.Int32)                                     | Covers a reference-identified T-counted buffer with a span
Method      | Z0.As.cover``2(``0@,System.Int32)                                     | Creates a span over a sequence of T-cells from a specified number of S-cells
Method      | Z0.As.cover``2(``0@)                                                  | Creates a span over a sequence of T-cells from a single S-cell
Method      | Z0.As.first``1(System.Span{``0})                                      | Returns a reference to the head of a readonly span
Method      | Z0.As.first``1(System.ReadOnlySpan{``0})                              | Returns a reference to the head of a readonly span
Method      | Z0.As.first``1(Z0.W8,System.ReadOnlySpan{``0})                        | Presents the span head as a readonly reference to an unsigned 8-bit integer
Method      | Z0.As.first``1(Z0.W16,System.ReadOnlySpan{``0})                       | Presents the span head as a readonly reference to an unsigned 16-bit integer
Method      | Z0.As.first``1(Z0.W32,System.ReadOnlySpan{``0})                       | Presents the span head as a readonly reference to an unsigned 32-bit integer
Method      | Z0.As.first``1(Z0.W64,System.ReadOnlySpan{``0})                       | Presents the span head as a readonly reference to an unsigned 64-bit integer
Method      | Z0.As.first``1(Z0.W8,System.Span{``0})                                | Presents the span head as a reference to an unsigned 8-bit integer
Method      | Z0.As.first``1(Z0.W16,System.Span{``0})                               | Presents the span head as a reference to an unsigned 16-bit integer
Method      | Z0.As.first``1(Z0.W32,System.Span{``0})                               | Presents the span head as a reference to an unsigned 32-bit integer
Method      | Z0.As.first``1(Z0.W64,System.Span{``0})                               | Presents the span head as a reference to an unsigned 64-bit integer
Method      | Z0.As.readonly``1(System.Span{``0})                                   | Reflects the immutable self
Method      | Z0.As.readonly``1(``0[])                                              | Reflects the content of an array as a readonly span
Method      | Z0.As.slice``1(System.ReadOnlySpan{``0},System.Int32)                 | Selects a segment [offset, length(src) - 1] from a source span src:ReadOnlySpan[T]
Method      | Z0.As.slice``1(System.ReadOnlySpan{``0},System.Int32,System.Int32)    | Draws a specified count of T-cells from a source span beginning at a specified offset
Method      | Z0.As.slice``1(System.Span{``0},System.Int32)                         | Selects a segment [offset, length(src) - 1] from a source span src:Span[T]
Method      | Z0.As.slice``1(System.Span{``0},System.Int32,System.Int32)            | Draws a specified count of T-cells from a source span beginning at a specified offset
Method      | Z0.As.vto``2(System.Runtime.Intrinsics.Vector128{``0},``1)            | Reinterprets a vector over S-cells as a vector over T-cells
Method      | Z0.As.vto``2(System.Runtime.Intrinsics.Vector256{``0},``1)            | Reinterprets a vector over S-cells as a vector over T-cells
Method      | Z0.As.v8i``1(System.Runtime.Intrinsics.Vector128{``0})                | Presents a generic cpu vector as a cpu vector with components of type int8
Method      | Z0.As.v8u``1(System.Runtime.Intrinsics.Vector128{``0})                | Presents a generic cpu vector as a cpu vector with components of type uint8
Method      | Z0.As.v16i``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type int16
Method      | Z0.As.v16u``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type uint16
Method      | Z0.As.v32i``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type int32
Method      | Z0.As.v32u``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type uint32
Method      | Z0.As.v64i``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type int64
Method      | Z0.As.v64u``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type uint64
Method      | Z0.As.v32f``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type float32
Method      | Z0.As.v64f``1(System.Runtime.Intrinsics.Vector128{``0})               | Presents a generic cpu vector as a cpu vector with components of type float64
Method      | Z0.As.v8i``1(System.Runtime.Intrinsics.Vector256{``0})                | Presents a generic cpu vector as a cpu vector with components of type int8
Method      | Z0.As.v8u``1(System.Runtime.Intrinsics.Vector256{``0})                | Presents a generic cpu vector as a cpu vector with components of type uint8
Method      | Z0.As.v16i``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type int16
Method      | Z0.As.v16u``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type uint16
Method      | Z0.As.v32i``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type int32
Method      | Z0.As.v32u``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type uint32
Method      | Z0.As.v64i``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type int64
Method      | Z0.As.v64u``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type uint64
Method      | Z0.As.v32f``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type float32
Method      | Z0.As.v64f``1(System.Runtime.Intrinsics.Vector256{``0})               | Presents a generic cpu vector as a cpu vector with components of type float64
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.SByte}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.Byte}@)   | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.Int16}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt16}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.Int32}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt32}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.Int64}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.UInt64}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.Single}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector128{System.Double}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.SByte}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.Byte}@)   | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.Int16}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt16}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.Int32}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt32}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.Int64}@)  | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.UInt64}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.Single}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.As.generic``1(System.Runtime.Intrinsics.Vector256{System.Double}@) | Reinterprets the source vector as a vector over parametric T-cells
Method      | Z0.AsInternal.pvoid``1(``0@)                                          | Converts a generic reference into a void pointer
Method      | Z0.AsInternal.constptr``1(``0@,System.Int32)                          | Presents a readonly reference as a generic pointer displaced by an element offset
Method      | Z0.AsInternal.pbyte``1(``0@)                                          | Presents a generic reference as a byte pointer
Method      | Z0.AsInternal.psbyte``1(``0@)                                         | Presents a generic reference as an sbyte pointer
Method      | Z0.AsInternal.puint8``1(``0@)                                         | Presents a generic reference as a byte pointer
Method      | Z0.AsInternal.pint8``1(``0@)                                          | Presents a generic reference as an sbyte pointer
Method      | Z0.AsInternal.pint16``1(``0@)                                         | Presents a generic reference as a short pointer
Method      | Z0.AsInternal.puint16``1(``0@)                                        | Presents a generic reference as a ushort pointer
Method      | Z0.AsInternal.pint32``1(``0@)                                         | Presents a generic reference as an int32 pointer
Method      | Z0.AsInternal.puint32``1(``0@)                                        | Presents a generic reference as an uint32 pointer
Method      | Z0.AsInternal.plong``1(``0@)                                          | Presents a generic reference as an int64 pointer
Method      | Z0.AsInternal.pint64``1(``0@)                                         | Presents a generic reference as an int64 pointer
Method      | Z0.AsInternal.pulong``1(``0@)                                         | Presents a generic reference as a uint64 pointer
Method      | Z0.AsInternal.puint64``1(``0@)                                        | Presents a generic reference as a uint64 pointer
Method      | Z0.AsInternal.ptr``1(``0@)                                            | Presents generic reference as a generic pointer
Method      | Z0.AsInternal.ptr``2(``0@)                                            | Presents a generic reference r:T as a generic pointer p:T
Method      | Z0.AsInternal.seek``1(``0@,System.Int32)                              | Adds a T-counted offset to a T-reference
Method      | Z0.AsInternal.skip``1(``0@,System.Byte)                               | Skips a specified number of source elements and returns a readonly reference to the result
Method      | Z0.AsInternal.skip``1(``0@,System.Int32)                              | Skips a specified number of source elements and returns a readonly reference to the result
Type        | Z0.Imagine                                                            | Presents the world as one wishes it to be, though usage could be disastrous if reality and expectation diverge
Method      | Z0.XTend.As``2(System.Span{``0})                                      | Presents a span of one value-type as a span of another value-type
Method      | Z0.XTend.As``2(System.ReadOnlySpan{``0})                              | Presents a readonly span of one value-type as a span of another value-type
Method      | Z0.XTend.As``1(System.Span{System.Byte})                              | Reimagines a span of bytes as a span of generic values
Method      | Z0.XTend.As``1(System.Span{System.UInt32})                            | Reimagines a span of unsigned 32-bit unsigned integers as a span of generic values
Method      | Z0.XTend.AsBytes``1(System.Span{``0},System.Int32,System.Nullable{System.Int32})| Presents selected span content as a span of bytes
Method      | Z0.XTend.AsBytes``1(System.Span{``0})                                 | Reimagines a span of generic values as a span of bytes
Method      | Z0.XTend.AsBytes``1(System.ReadOnlySpan{``0},System.Int32,System.Nullable{System.Int32})| Presents selected span content as a readonly span of bytes
Method      | Z0.XTend.AsBytes``1(System.ReadOnlySpan{``0})                         | Reimagines a readonly span of generic values as a span of readonly bytes
Method      | Z0.XTend.AsSBytes``1(System.Span{``0})                                | Reimagines a readonly span of generic values as a span of signed bytes
Method      | Z0.XTend.AsSBytes``1(System.ReadOnlySpan{``0})                        | Reimagines a readonly span of generic values as a span of signed bytes
Method      | Z0.XTend.AsChar``1(System.Span{``0})                                  | Reimagines a span of generic values as a span of chars
Method      | Z0.XTend.AsInt16``1(System.Span{``0})                                 | Reimagines a span of generic values as a span of signed 16-bit integers
Method      | Z0.XTend.AsInt16``1(System.ReadOnlySpan{``0})                         | Reimagines a span of generic values as a span of signed 16-bit integers
Method      | Z0.XTend.AsUInt16``1(System.Span{``0})                                | Reimagines a span of generic values as a span of unsigned 16-bit integers
Method      | Z0.XTend.AsUInt16``1(System.ReadOnlySpan{``0})                        | Reimagines a span of generic values as a span of unsigned 16-bit integers
Method      | Z0.XTend.AsInt32``1(System.ReadOnlySpan{``0})                         | Reimagines a span of generic values as a span of signed 32-bit integers
Method      | Z0.XTend.AsInt32``1(System.Span{``0})                                 | Reimagines a span of generic values as a span of signed 32-bit integers
Method      | Z0.XTend.AsUInt32``1(System.Span{``0})                                | Reimagines a span of generic values as a span of unsigned 32-bit integers
Method      | Z0.XTend.AsUInt32``1(System.ReadOnlySpan{``0})                        | Reimagines a span of generic values as a span of unsigned 32-bit integers
Method      | Z0.XTend.AsInt64``1(System.ReadOnlySpan{``0})                         | Reimagines a span of generic values as a span of 64-bit signed integers
Method      | Z0.XTend.AsUInt64``1(System.ReadOnlySpan{``0})                        | Reimagines a span of generic values as a span of 64-bit unsigned integers
Method      | Z0.XTend.AsInt64``1(System.Span{``0})                                 | Reimagines a span of generic values as a span of 64-bit signed integers
Method      | Z0.XTend.AsUInt64``1(System.Span{``0})                                | Reimagines a span of generic values as a span of 64-bit unsigned integers
Method      | Z0.XTend.AsFloat32``1(System.Span{``0})                               | Reimagines a span of generic values as a span of 32-bit floats
Method      | Z0.XTend.AsFloat32``1(System.ReadOnlySpan{``0})                       | Reimagines a span of generic values as a span of 32-bit floats
Method      | Z0.XTend.AsFloat64``1(System.Span{``0})                               | Reimagines a span of generic values as a span of 64-bit floats
Method      | Z0.XTend.AsFloat64``1(System.ReadOnlySpan{``0})                       | Reimagines a span of generic values as a span of 64-bit floats
Method      | Z0.XTend.Singleton``2(System.Span{``0},System.Int32,System.Nullable{System.Int32})| Renders a non-allocating mutable view over a source span segment that is presented as an individual target value
Method      | Z0.XTend.TrimEnd(System.Span{System.Byte})                            | Eliminates trailing zeros in the source span
Method      | Z0.ToNumeric.to``1(System.SByte)                                      | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.Byte)                                       | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.Int16)                                      | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.UInt16)                                     | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.Int32)                                      | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.UInt32)                                     | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.Int64)                                      | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.UInt64)                                     | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.Single)                                     | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.ToNumeric.to``1(System.Double)                                     | Unconditionally converts the source value to a value of parametric numeric type
Method      | Z0.SpanTake.TakeScalar``1(System.Span{System.Byte})                   | Reads a partial value if there aren't a sufficient number of bytes to comprise a target value
Method      | Z0.SpanTake.TakeBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})| Copies at most n bytes from the source span to the target span where n is the length of the target span
Method      | Z0.SpanTake.TakeUInt24``1(System.Span{``0})                           | Converts the leading elements of a primal source span to a 24-bit usigned integer
